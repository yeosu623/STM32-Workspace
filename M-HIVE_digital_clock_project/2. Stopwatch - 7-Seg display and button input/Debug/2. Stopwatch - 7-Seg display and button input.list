
2. Stopwatch - 7-Seg display and button input.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b0c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002c94  08002c94  00012c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ca4  08002ca4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002ca4  08002ca4  00012ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002cac  08002cac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cac  08002cac  00012cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cb0  08002cb0  00012cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002cb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000088  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000094  20000094  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a0d3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019aa  00000000  00000000  0002a10f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009d8  00000000  00000000  0002bac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000900  00000000  00000000  0002c498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020479  00000000  00000000  0002cd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b3bc  00000000  00000000  0004d211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5d24  00000000  00000000  000585cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011e2f1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000027f4  00000000  00000000  0011e344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002c7c 	.word	0x08002c7c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002c7c 	.word	0x08002c7c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <_7SEG_GPIO_Init>:
#include "7seg.h"

void _7SEG_GPIO_Init()
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	; 0x28
 80004d0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIOA,D,E Periph clock enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80004d2:	2300      	movs	r3, #0
 80004d4:	613b      	str	r3, [r7, #16]
 80004d6:	4b6b      	ldr	r3, [pc, #428]	; (8000684 <_7SEG_GPIO_Init+0x1b8>)
 80004d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004da:	4a6a      	ldr	r2, [pc, #424]	; (8000684 <_7SEG_GPIO_Init+0x1b8>)
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	6313      	str	r3, [r2, #48]	; 0x30
 80004e2:	4b68      	ldr	r3, [pc, #416]	; (8000684 <_7SEG_GPIO_Init+0x1b8>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	613b      	str	r3, [r7, #16]
 80004ec:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80004ee:	2300      	movs	r3, #0
 80004f0:	60fb      	str	r3, [r7, #12]
 80004f2:	4b64      	ldr	r3, [pc, #400]	; (8000684 <_7SEG_GPIO_Init+0x1b8>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	4a63      	ldr	r2, [pc, #396]	; (8000684 <_7SEG_GPIO_Init+0x1b8>)
 80004f8:	f043 0304 	orr.w	r3, r3, #4
 80004fc:	6313      	str	r3, [r2, #48]	; 0x30
 80004fe:	4b61      	ldr	r3, [pc, #388]	; (8000684 <_7SEG_GPIO_Init+0x1b8>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	f003 0304 	and.w	r3, r3, #4
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	60bb      	str	r3, [r7, #8]
 800050e:	4b5d      	ldr	r3, [pc, #372]	; (8000684 <_7SEG_GPIO_Init+0x1b8>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	4a5c      	ldr	r2, [pc, #368]	; (8000684 <_7SEG_GPIO_Init+0x1b8>)
 8000514:	f043 0308 	orr.w	r3, r3, #8
 8000518:	6313      	str	r3, [r2, #48]	; 0x30
 800051a:	4b5a      	ldr	r3, [pc, #360]	; (8000684 <_7SEG_GPIO_Init+0x1b8>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	f003 0308 	and.w	r3, r3, #8
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	607b      	str	r3, [r7, #4]
 800052a:	4b56      	ldr	r3, [pc, #344]	; (8000684 <_7SEG_GPIO_Init+0x1b8>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4a55      	ldr	r2, [pc, #340]	; (8000684 <_7SEG_GPIO_Init+0x1b8>)
 8000530:	f043 0310 	orr.w	r3, r3, #16
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
 8000536:	4b53      	ldr	r3, [pc, #332]	; (8000684 <_7SEG_GPIO_Init+0x1b8>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	f003 0310 	and.w	r3, r3, #16
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]

	//Digit1
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_A;
 8000542:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000546:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000548:	2301      	movs	r3, #1
 800054a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054c:	2300      	movs	r3, #0
 800054e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000550:	2300      	movs	r3, #0
 8000552:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIO_DGT1_A, &GPIO_InitStruct);
 8000554:	f107 0314 	add.w	r3, r7, #20
 8000558:	4619      	mov	r1, r3
 800055a:	484b      	ldr	r0, [pc, #300]	; (8000688 <_7SEG_GPIO_Init+0x1bc>)
 800055c:	f001 f9f8 	bl	8001950 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_B;
 8000560:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000564:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_B, &GPIO_InitStruct);
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	4619      	mov	r1, r3
 800056c:	4847      	ldr	r0, [pc, #284]	; (800068c <_7SEG_GPIO_Init+0x1c0>)
 800056e:	f001 f9ef 	bl	8001950 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_C;
 8000572:	2340      	movs	r3, #64	; 0x40
 8000574:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_C, &GPIO_InitStruct);
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	4619      	mov	r1, r3
 800057c:	4842      	ldr	r0, [pc, #264]	; (8000688 <_7SEG_GPIO_Init+0x1bc>)
 800057e:	f001 f9e7 	bl	8001950 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_D;
 8000582:	2320      	movs	r3, #32
 8000584:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_D, &GPIO_InitStruct);
 8000586:	f107 0314 	add.w	r3, r7, #20
 800058a:	4619      	mov	r1, r3
 800058c:	483e      	ldr	r0, [pc, #248]	; (8000688 <_7SEG_GPIO_Init+0x1bc>)
 800058e:	f001 f9df 	bl	8001950 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_E;
 8000592:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000596:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_E, &GPIO_InitStruct);
 8000598:	f107 0314 	add.w	r3, r7, #20
 800059c:	4619      	mov	r1, r3
 800059e:	483c      	ldr	r0, [pc, #240]	; (8000690 <_7SEG_GPIO_Init+0x1c4>)
 80005a0:	f001 f9d6 	bl	8001950 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_F;
 80005a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005a8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_F, &GPIO_InitStruct);
 80005aa:	f107 0314 	add.w	r3, r7, #20
 80005ae:	4619      	mov	r1, r3
 80005b0:	4837      	ldr	r0, [pc, #220]	; (8000690 <_7SEG_GPIO_Init+0x1c4>)
 80005b2:	f001 f9cd 	bl	8001950 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_G;
 80005b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005ba:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_G, &GPIO_InitStruct);
 80005bc:	f107 0314 	add.w	r3, r7, #20
 80005c0:	4619      	mov	r1, r3
 80005c2:	4831      	ldr	r0, [pc, #196]	; (8000688 <_7SEG_GPIO_Init+0x1bc>)
 80005c4:	f001 f9c4 	bl	8001950 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_DP;
 80005c8:	2380      	movs	r3, #128	; 0x80
 80005ca:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_DP, &GPIO_InitStruct);
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	4619      	mov	r1, r3
 80005d2:	482d      	ldr	r0, [pc, #180]	; (8000688 <_7SEG_GPIO_Init+0x1bc>)
 80005d4:	f001 f9bc 	bl	8001950 <HAL_GPIO_Init>

	//Digit2
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_A;
 80005d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005dc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_A, &GPIO_InitStruct);
 80005de:	f107 0314 	add.w	r3, r7, #20
 80005e2:	4619      	mov	r1, r3
 80005e4:	482b      	ldr	r0, [pc, #172]	; (8000694 <_7SEG_GPIO_Init+0x1c8>)
 80005e6:	f001 f9b3 	bl	8001950 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_B;
 80005ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ee:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_B, &GPIO_InitStruct);
 80005f0:	f107 0314 	add.w	r3, r7, #20
 80005f4:	4619      	mov	r1, r3
 80005f6:	4827      	ldr	r0, [pc, #156]	; (8000694 <_7SEG_GPIO_Init+0x1c8>)
 80005f8:	f001 f9aa 	bl	8001950 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_C;
 80005fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000600:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_C, &GPIO_InitStruct);
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	4619      	mov	r1, r3
 8000608:	4822      	ldr	r0, [pc, #136]	; (8000694 <_7SEG_GPIO_Init+0x1c8>)
 800060a:	f001 f9a1 	bl	8001950 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_D;
 800060e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000612:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_D, &GPIO_InitStruct);
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	4619      	mov	r1, r3
 800061a:	481e      	ldr	r0, [pc, #120]	; (8000694 <_7SEG_GPIO_Init+0x1c8>)
 800061c:	f001 f998 	bl	8001950 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_E;
 8000620:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000624:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_E, &GPIO_InitStruct);
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	4619      	mov	r1, r3
 800062c:	4819      	ldr	r0, [pc, #100]	; (8000694 <_7SEG_GPIO_Init+0x1c8>)
 800062e:	f001 f98f 	bl	8001950 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_F;
 8000632:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000636:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_F, &GPIO_InitStruct);
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	4619      	mov	r1, r3
 800063e:	4815      	ldr	r0, [pc, #84]	; (8000694 <_7SEG_GPIO_Init+0x1c8>)
 8000640:	f001 f986 	bl	8001950 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_G;
 8000644:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000648:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_G, &GPIO_InitStruct);
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	4619      	mov	r1, r3
 8000650:	4810      	ldr	r0, [pc, #64]	; (8000694 <_7SEG_GPIO_Init+0x1c8>)
 8000652:	f001 f97d 	bl	8001950 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_DP;
 8000656:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800065a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_DP, &GPIO_InitStruct);
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	4619      	mov	r1, r3
 8000662:	480c      	ldr	r0, [pc, #48]	; (8000694 <_7SEG_GPIO_Init+0x1c8>)
 8000664:	f001 f974 	bl	8001950 <HAL_GPIO_Init>

	
	_7SEG_SetNumber(DGT1, 0, ON);
 8000668:	2201      	movs	r2, #1
 800066a:	2100      	movs	r1, #0
 800066c:	2000      	movs	r0, #0
 800066e:	f000 f813 	bl	8000698 <_7SEG_SetNumber>
	_7SEG_SetNumber(DGT2, 0, ON);
 8000672:	2201      	movs	r2, #1
 8000674:	2100      	movs	r1, #0
 8000676:	2001      	movs	r0, #1
 8000678:	f000 f80e 	bl	8000698 <_7SEG_SetNumber>
}
 800067c:	bf00      	nop
 800067e:	3728      	adds	r7, #40	; 0x28
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40023800 	.word	0x40023800
 8000688:	40020c00 	.word	0x40020c00
 800068c:	40020000 	.word	0x40020000
 8000690:	40020800 	.word	0x40020800
 8000694:	40021000 	.word	0x40021000

08000698 <_7SEG_SetNumber>:


void _7SEG_SetNumber(int dgt, int num, int dp)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	60b9      	str	r1, [r7, #8]
 80006a2:	607a      	str	r2, [r7, #4]
	if(dgt == DGT1)
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	f040 81dc 	bne.w	8000a64 <_7SEG_SetNumber+0x3cc>
	{
		switch(num%10)
 80006ac:	68b9      	ldr	r1, [r7, #8]
 80006ae:	4bcb      	ldr	r3, [pc, #812]	; (80009dc <_7SEG_SetNumber+0x344>)
 80006b0:	fb83 2301 	smull	r2, r3, r3, r1
 80006b4:	109a      	asrs	r2, r3, #2
 80006b6:	17cb      	asrs	r3, r1, #31
 80006b8:	1ad2      	subs	r2, r2, r3
 80006ba:	4613      	mov	r3, r2
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	4413      	add	r3, r2
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	1aca      	subs	r2, r1, r3
 80006c4:	2a09      	cmp	r2, #9
 80006c6:	f200 81ba 	bhi.w	8000a3e <_7SEG_SetNumber+0x3a6>
 80006ca:	a301      	add	r3, pc, #4	; (adr r3, 80006d0 <_7SEG_SetNumber+0x38>)
 80006cc:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80006d0:	080006f9 	.word	0x080006f9
 80006d4:	0800074b 	.word	0x0800074b
 80006d8:	0800079d 	.word	0x0800079d
 80006dc:	080007ef 	.word	0x080007ef
 80006e0:	08000841 	.word	0x08000841
 80006e4:	08000893 	.word	0x08000893
 80006e8:	080008e5 	.word	0x080008e5
 80006ec:	08000937 	.word	0x08000937
 80006f0:	08000989 	.word	0x08000989
 80006f4:	080009ed 	.word	0x080009ed
		{
			case 0: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON;
 80006f8:	2200      	movs	r2, #0
 80006fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006fe:	48b8      	ldr	r0, [pc, #736]	; (80009e0 <_7SEG_SetNumber+0x348>)
 8000700:	f001 fada 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000704:	2200      	movs	r2, #0
 8000706:	f44f 7180 	mov.w	r1, #256	; 0x100
 800070a:	48b6      	ldr	r0, [pc, #728]	; (80009e4 <_7SEG_SetNumber+0x34c>)
 800070c:	f001 fad4 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000710:	2200      	movs	r2, #0
 8000712:	2140      	movs	r1, #64	; 0x40
 8000714:	48b2      	ldr	r0, [pc, #712]	; (80009e0 <_7SEG_SetNumber+0x348>)
 8000716:	f001 facf 	bl	8001cb8 <HAL_GPIO_WritePin>
 800071a:	2200      	movs	r2, #0
 800071c:	2120      	movs	r1, #32
 800071e:	48b0      	ldr	r0, [pc, #704]	; (80009e0 <_7SEG_SetNumber+0x348>)
 8000720:	f001 faca 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000724:	2200      	movs	r2, #0
 8000726:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800072a:	48af      	ldr	r0, [pc, #700]	; (80009e8 <_7SEG_SetNumber+0x350>)
 800072c:	f001 fac4 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000730:	2200      	movs	r2, #0
 8000732:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000736:	48ac      	ldr	r0, [pc, #688]	; (80009e8 <_7SEG_SetNumber+0x350>)
 8000738:	f001 fabe 	bl	8001cb8 <HAL_GPIO_WritePin>
					DGT1_G_OFF;
 800073c:	2201      	movs	r2, #1
 800073e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000742:	48a7      	ldr	r0, [pc, #668]	; (80009e0 <_7SEG_SetNumber+0x348>)
 8000744:	f001 fab8 	bl	8001cb8 <HAL_GPIO_WritePin>
				break;
 8000748:	e179      	b.n	8000a3e <_7SEG_SetNumber+0x3a6>
			case 1: DGT1_B_ON; DGT1_C_ON;
 800074a:	2200      	movs	r2, #0
 800074c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000750:	48a4      	ldr	r0, [pc, #656]	; (80009e4 <_7SEG_SetNumber+0x34c>)
 8000752:	f001 fab1 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000756:	2200      	movs	r2, #0
 8000758:	2140      	movs	r1, #64	; 0x40
 800075a:	48a1      	ldr	r0, [pc, #644]	; (80009e0 <_7SEG_SetNumber+0x348>)
 800075c:	f001 faac 	bl	8001cb8 <HAL_GPIO_WritePin>
					DGT1_A_OFF; DGT1_D_OFF; DGT1_E_OFF; DGT1_F_OFF; DGT1_G_OFF;
 8000760:	2201      	movs	r2, #1
 8000762:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000766:	489e      	ldr	r0, [pc, #632]	; (80009e0 <_7SEG_SetNumber+0x348>)
 8000768:	f001 faa6 	bl	8001cb8 <HAL_GPIO_WritePin>
 800076c:	2201      	movs	r2, #1
 800076e:	2120      	movs	r1, #32
 8000770:	489b      	ldr	r0, [pc, #620]	; (80009e0 <_7SEG_SetNumber+0x348>)
 8000772:	f001 faa1 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000776:	2201      	movs	r2, #1
 8000778:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800077c:	489a      	ldr	r0, [pc, #616]	; (80009e8 <_7SEG_SetNumber+0x350>)
 800077e:	f001 fa9b 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000782:	2201      	movs	r2, #1
 8000784:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000788:	4897      	ldr	r0, [pc, #604]	; (80009e8 <_7SEG_SetNumber+0x350>)
 800078a:	f001 fa95 	bl	8001cb8 <HAL_GPIO_WritePin>
 800078e:	2201      	movs	r2, #1
 8000790:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000794:	4892      	ldr	r0, [pc, #584]	; (80009e0 <_7SEG_SetNumber+0x348>)
 8000796:	f001 fa8f 	bl	8001cb8 <HAL_GPIO_WritePin>
				break;
 800079a:	e150      	b.n	8000a3e <_7SEG_SetNumber+0x3a6>
			case 2: DGT1_A_ON; DGT1_B_ON; DGT1_G_ON; DGT1_E_ON; DGT1_D_ON;
 800079c:	2200      	movs	r2, #0
 800079e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007a2:	488f      	ldr	r0, [pc, #572]	; (80009e0 <_7SEG_SetNumber+0x348>)
 80007a4:	f001 fa88 	bl	8001cb8 <HAL_GPIO_WritePin>
 80007a8:	2200      	movs	r2, #0
 80007aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ae:	488d      	ldr	r0, [pc, #564]	; (80009e4 <_7SEG_SetNumber+0x34c>)
 80007b0:	f001 fa82 	bl	8001cb8 <HAL_GPIO_WritePin>
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ba:	4889      	ldr	r0, [pc, #548]	; (80009e0 <_7SEG_SetNumber+0x348>)
 80007bc:	f001 fa7c 	bl	8001cb8 <HAL_GPIO_WritePin>
 80007c0:	2200      	movs	r2, #0
 80007c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c6:	4888      	ldr	r0, [pc, #544]	; (80009e8 <_7SEG_SetNumber+0x350>)
 80007c8:	f001 fa76 	bl	8001cb8 <HAL_GPIO_WritePin>
 80007cc:	2200      	movs	r2, #0
 80007ce:	2120      	movs	r1, #32
 80007d0:	4883      	ldr	r0, [pc, #524]	; (80009e0 <_7SEG_SetNumber+0x348>)
 80007d2:	f001 fa71 	bl	8001cb8 <HAL_GPIO_WritePin>
					DGT1_C_OFF; DGT1_F_OFF;
 80007d6:	2201      	movs	r2, #1
 80007d8:	2140      	movs	r1, #64	; 0x40
 80007da:	4881      	ldr	r0, [pc, #516]	; (80009e0 <_7SEG_SetNumber+0x348>)
 80007dc:	f001 fa6c 	bl	8001cb8 <HAL_GPIO_WritePin>
 80007e0:	2201      	movs	r2, #1
 80007e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e6:	4880      	ldr	r0, [pc, #512]	; (80009e8 <_7SEG_SetNumber+0x350>)
 80007e8:	f001 fa66 	bl	8001cb8 <HAL_GPIO_WritePin>
				break;
 80007ec:	e127      	b.n	8000a3e <_7SEG_SetNumber+0x3a6>
			case 3: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_G_ON;
 80007ee:	2200      	movs	r2, #0
 80007f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007f4:	487a      	ldr	r0, [pc, #488]	; (80009e0 <_7SEG_SetNumber+0x348>)
 80007f6:	f001 fa5f 	bl	8001cb8 <HAL_GPIO_WritePin>
 80007fa:	2200      	movs	r2, #0
 80007fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000800:	4878      	ldr	r0, [pc, #480]	; (80009e4 <_7SEG_SetNumber+0x34c>)
 8000802:	f001 fa59 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000806:	2200      	movs	r2, #0
 8000808:	2140      	movs	r1, #64	; 0x40
 800080a:	4875      	ldr	r0, [pc, #468]	; (80009e0 <_7SEG_SetNumber+0x348>)
 800080c:	f001 fa54 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000810:	2200      	movs	r2, #0
 8000812:	2120      	movs	r1, #32
 8000814:	4872      	ldr	r0, [pc, #456]	; (80009e0 <_7SEG_SetNumber+0x348>)
 8000816:	f001 fa4f 	bl	8001cb8 <HAL_GPIO_WritePin>
 800081a:	2200      	movs	r2, #0
 800081c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000820:	486f      	ldr	r0, [pc, #444]	; (80009e0 <_7SEG_SetNumber+0x348>)
 8000822:	f001 fa49 	bl	8001cb8 <HAL_GPIO_WritePin>
					DGT1_E_OFF; DGT1_F_OFF;
 8000826:	2201      	movs	r2, #1
 8000828:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800082c:	486e      	ldr	r0, [pc, #440]	; (80009e8 <_7SEG_SetNumber+0x350>)
 800082e:	f001 fa43 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000832:	2201      	movs	r2, #1
 8000834:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000838:	486b      	ldr	r0, [pc, #428]	; (80009e8 <_7SEG_SetNumber+0x350>)
 800083a:	f001 fa3d 	bl	8001cb8 <HAL_GPIO_WritePin>
				break;
 800083e:	e0fe      	b.n	8000a3e <_7SEG_SetNumber+0x3a6>
			case 4: DGT1_F_ON; DGT1_G_ON; DGT1_B_ON; DGT1_C_ON;
 8000840:	2200      	movs	r2, #0
 8000842:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000846:	4868      	ldr	r0, [pc, #416]	; (80009e8 <_7SEG_SetNumber+0x350>)
 8000848:	f001 fa36 	bl	8001cb8 <HAL_GPIO_WritePin>
 800084c:	2200      	movs	r2, #0
 800084e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000852:	4863      	ldr	r0, [pc, #396]	; (80009e0 <_7SEG_SetNumber+0x348>)
 8000854:	f001 fa30 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000858:	2200      	movs	r2, #0
 800085a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800085e:	4861      	ldr	r0, [pc, #388]	; (80009e4 <_7SEG_SetNumber+0x34c>)
 8000860:	f001 fa2a 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000864:	2200      	movs	r2, #0
 8000866:	2140      	movs	r1, #64	; 0x40
 8000868:	485d      	ldr	r0, [pc, #372]	; (80009e0 <_7SEG_SetNumber+0x348>)
 800086a:	f001 fa25 	bl	8001cb8 <HAL_GPIO_WritePin>
					DGT1_A_OFF; DGT1_D_OFF; DGT1_E_OFF;
 800086e:	2201      	movs	r2, #1
 8000870:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000874:	485a      	ldr	r0, [pc, #360]	; (80009e0 <_7SEG_SetNumber+0x348>)
 8000876:	f001 fa1f 	bl	8001cb8 <HAL_GPIO_WritePin>
 800087a:	2201      	movs	r2, #1
 800087c:	2120      	movs	r1, #32
 800087e:	4858      	ldr	r0, [pc, #352]	; (80009e0 <_7SEG_SetNumber+0x348>)
 8000880:	f001 fa1a 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000884:	2201      	movs	r2, #1
 8000886:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800088a:	4857      	ldr	r0, [pc, #348]	; (80009e8 <_7SEG_SetNumber+0x350>)
 800088c:	f001 fa14 	bl	8001cb8 <HAL_GPIO_WritePin>
				break;
 8000890:	e0d5      	b.n	8000a3e <_7SEG_SetNumber+0x3a6>
			case 5: DGT1_A_ON; DGT1_F_ON; DGT1_G_ON; DGT1_C_ON; DGT1_D_ON;
 8000892:	2200      	movs	r2, #0
 8000894:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000898:	4851      	ldr	r0, [pc, #324]	; (80009e0 <_7SEG_SetNumber+0x348>)
 800089a:	f001 fa0d 	bl	8001cb8 <HAL_GPIO_WritePin>
 800089e:	2200      	movs	r2, #0
 80008a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008a4:	4850      	ldr	r0, [pc, #320]	; (80009e8 <_7SEG_SetNumber+0x350>)
 80008a6:	f001 fa07 	bl	8001cb8 <HAL_GPIO_WritePin>
 80008aa:	2200      	movs	r2, #0
 80008ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008b0:	484b      	ldr	r0, [pc, #300]	; (80009e0 <_7SEG_SetNumber+0x348>)
 80008b2:	f001 fa01 	bl	8001cb8 <HAL_GPIO_WritePin>
 80008b6:	2200      	movs	r2, #0
 80008b8:	2140      	movs	r1, #64	; 0x40
 80008ba:	4849      	ldr	r0, [pc, #292]	; (80009e0 <_7SEG_SetNumber+0x348>)
 80008bc:	f001 f9fc 	bl	8001cb8 <HAL_GPIO_WritePin>
 80008c0:	2200      	movs	r2, #0
 80008c2:	2120      	movs	r1, #32
 80008c4:	4846      	ldr	r0, [pc, #280]	; (80009e0 <_7SEG_SetNumber+0x348>)
 80008c6:	f001 f9f7 	bl	8001cb8 <HAL_GPIO_WritePin>
					DGT1_B_OFF; DGT1_E_OFF;
 80008ca:	2201      	movs	r2, #1
 80008cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008d0:	4844      	ldr	r0, [pc, #272]	; (80009e4 <_7SEG_SetNumber+0x34c>)
 80008d2:	f001 f9f1 	bl	8001cb8 <HAL_GPIO_WritePin>
 80008d6:	2201      	movs	r2, #1
 80008d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008dc:	4842      	ldr	r0, [pc, #264]	; (80009e8 <_7SEG_SetNumber+0x350>)
 80008de:	f001 f9eb 	bl	8001cb8 <HAL_GPIO_WritePin>
				break;
 80008e2:	e0ac      	b.n	8000a3e <_7SEG_SetNumber+0x3a6>
			case 6: DGT1_A_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON; DGT1_G_ON;
 80008e4:	2200      	movs	r2, #0
 80008e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008ea:	483d      	ldr	r0, [pc, #244]	; (80009e0 <_7SEG_SetNumber+0x348>)
 80008ec:	f001 f9e4 	bl	8001cb8 <HAL_GPIO_WritePin>
 80008f0:	2200      	movs	r2, #0
 80008f2:	2140      	movs	r1, #64	; 0x40
 80008f4:	483a      	ldr	r0, [pc, #232]	; (80009e0 <_7SEG_SetNumber+0x348>)
 80008f6:	f001 f9df 	bl	8001cb8 <HAL_GPIO_WritePin>
 80008fa:	2200      	movs	r2, #0
 80008fc:	2120      	movs	r1, #32
 80008fe:	4838      	ldr	r0, [pc, #224]	; (80009e0 <_7SEG_SetNumber+0x348>)
 8000900:	f001 f9da 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000904:	2200      	movs	r2, #0
 8000906:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800090a:	4837      	ldr	r0, [pc, #220]	; (80009e8 <_7SEG_SetNumber+0x350>)
 800090c:	f001 f9d4 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000910:	2200      	movs	r2, #0
 8000912:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000916:	4834      	ldr	r0, [pc, #208]	; (80009e8 <_7SEG_SetNumber+0x350>)
 8000918:	f001 f9ce 	bl	8001cb8 <HAL_GPIO_WritePin>
 800091c:	2200      	movs	r2, #0
 800091e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000922:	482f      	ldr	r0, [pc, #188]	; (80009e0 <_7SEG_SetNumber+0x348>)
 8000924:	f001 f9c8 	bl	8001cb8 <HAL_GPIO_WritePin>
					DGT1_B_OFF;
 8000928:	2201      	movs	r2, #1
 800092a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800092e:	482d      	ldr	r0, [pc, #180]	; (80009e4 <_7SEG_SetNumber+0x34c>)
 8000930:	f001 f9c2 	bl	8001cb8 <HAL_GPIO_WritePin>
				break;
 8000934:	e083      	b.n	8000a3e <_7SEG_SetNumber+0x3a6>
			case 7: DGT1_F_ON; DGT1_A_ON; DGT1_B_ON; DGT1_C_ON;
 8000936:	2200      	movs	r2, #0
 8000938:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800093c:	482a      	ldr	r0, [pc, #168]	; (80009e8 <_7SEG_SetNumber+0x350>)
 800093e:	f001 f9bb 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000942:	2200      	movs	r2, #0
 8000944:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000948:	4825      	ldr	r0, [pc, #148]	; (80009e0 <_7SEG_SetNumber+0x348>)
 800094a:	f001 f9b5 	bl	8001cb8 <HAL_GPIO_WritePin>
 800094e:	2200      	movs	r2, #0
 8000950:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000954:	4823      	ldr	r0, [pc, #140]	; (80009e4 <_7SEG_SetNumber+0x34c>)
 8000956:	f001 f9af 	bl	8001cb8 <HAL_GPIO_WritePin>
 800095a:	2200      	movs	r2, #0
 800095c:	2140      	movs	r1, #64	; 0x40
 800095e:	4820      	ldr	r0, [pc, #128]	; (80009e0 <_7SEG_SetNumber+0x348>)
 8000960:	f001 f9aa 	bl	8001cb8 <HAL_GPIO_WritePin>
					DGT1_D_OFF; DGT1_E_OFF; DGT1_G_OFF;
 8000964:	2201      	movs	r2, #1
 8000966:	2120      	movs	r1, #32
 8000968:	481d      	ldr	r0, [pc, #116]	; (80009e0 <_7SEG_SetNumber+0x348>)
 800096a:	f001 f9a5 	bl	8001cb8 <HAL_GPIO_WritePin>
 800096e:	2201      	movs	r2, #1
 8000970:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000974:	481c      	ldr	r0, [pc, #112]	; (80009e8 <_7SEG_SetNumber+0x350>)
 8000976:	f001 f99f 	bl	8001cb8 <HAL_GPIO_WritePin>
 800097a:	2201      	movs	r2, #1
 800097c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000980:	4817      	ldr	r0, [pc, #92]	; (80009e0 <_7SEG_SetNumber+0x348>)
 8000982:	f001 f999 	bl	8001cb8 <HAL_GPIO_WritePin>
				break;
 8000986:	e05a      	b.n	8000a3e <_7SEG_SetNumber+0x3a6>
			case 8: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON; DGT1_G_ON;
 8000988:	2200      	movs	r2, #0
 800098a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800098e:	4814      	ldr	r0, [pc, #80]	; (80009e0 <_7SEG_SetNumber+0x348>)
 8000990:	f001 f992 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000994:	2200      	movs	r2, #0
 8000996:	f44f 7180 	mov.w	r1, #256	; 0x100
 800099a:	4812      	ldr	r0, [pc, #72]	; (80009e4 <_7SEG_SetNumber+0x34c>)
 800099c:	f001 f98c 	bl	8001cb8 <HAL_GPIO_WritePin>
 80009a0:	2200      	movs	r2, #0
 80009a2:	2140      	movs	r1, #64	; 0x40
 80009a4:	480e      	ldr	r0, [pc, #56]	; (80009e0 <_7SEG_SetNumber+0x348>)
 80009a6:	f001 f987 	bl	8001cb8 <HAL_GPIO_WritePin>
 80009aa:	2200      	movs	r2, #0
 80009ac:	2120      	movs	r1, #32
 80009ae:	480c      	ldr	r0, [pc, #48]	; (80009e0 <_7SEG_SetNumber+0x348>)
 80009b0:	f001 f982 	bl	8001cb8 <HAL_GPIO_WritePin>
 80009b4:	2200      	movs	r2, #0
 80009b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009ba:	480b      	ldr	r0, [pc, #44]	; (80009e8 <_7SEG_SetNumber+0x350>)
 80009bc:	f001 f97c 	bl	8001cb8 <HAL_GPIO_WritePin>
 80009c0:	2200      	movs	r2, #0
 80009c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009c6:	4808      	ldr	r0, [pc, #32]	; (80009e8 <_7SEG_SetNumber+0x350>)
 80009c8:	f001 f976 	bl	8001cb8 <HAL_GPIO_WritePin>
 80009cc:	2200      	movs	r2, #0
 80009ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009d2:	4803      	ldr	r0, [pc, #12]	; (80009e0 <_7SEG_SetNumber+0x348>)
 80009d4:	f001 f970 	bl	8001cb8 <HAL_GPIO_WritePin>
				break;
 80009d8:	e031      	b.n	8000a3e <_7SEG_SetNumber+0x3a6>
 80009da:	bf00      	nop
 80009dc:	66666667 	.word	0x66666667
 80009e0:	40020c00 	.word	0x40020c00
 80009e4:	40020000 	.word	0x40020000
 80009e8:	40020800 	.word	0x40020800
			case 9: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_F_ON; DGT1_G_ON;
 80009ec:	2200      	movs	r2, #0
 80009ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009f2:	48c8      	ldr	r0, [pc, #800]	; (8000d14 <_7SEG_SetNumber+0x67c>)
 80009f4:	f001 f960 	bl	8001cb8 <HAL_GPIO_WritePin>
 80009f8:	2200      	movs	r2, #0
 80009fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009fe:	48c6      	ldr	r0, [pc, #792]	; (8000d18 <_7SEG_SetNumber+0x680>)
 8000a00:	f001 f95a 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000a04:	2200      	movs	r2, #0
 8000a06:	2140      	movs	r1, #64	; 0x40
 8000a08:	48c2      	ldr	r0, [pc, #776]	; (8000d14 <_7SEG_SetNumber+0x67c>)
 8000a0a:	f001 f955 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2120      	movs	r1, #32
 8000a12:	48c0      	ldr	r0, [pc, #768]	; (8000d14 <_7SEG_SetNumber+0x67c>)
 8000a14:	f001 f950 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a1e:	48bf      	ldr	r0, [pc, #764]	; (8000d1c <_7SEG_SetNumber+0x684>)
 8000a20:	f001 f94a 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000a24:	2200      	movs	r2, #0
 8000a26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a2a:	48ba      	ldr	r0, [pc, #744]	; (8000d14 <_7SEG_SetNumber+0x67c>)
 8000a2c:	f001 f944 	bl	8001cb8 <HAL_GPIO_WritePin>
					DGT1_E_OFF;
 8000a30:	2201      	movs	r2, #1
 8000a32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a36:	48b9      	ldr	r0, [pc, #740]	; (8000d1c <_7SEG_SetNumber+0x684>)
 8000a38:	f001 f93e 	bl	8001cb8 <HAL_GPIO_WritePin>
				break;
 8000a3c:	bf00      	nop
		}

		if(dp == ON)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d105      	bne.n	8000a50 <_7SEG_SetNumber+0x3b8>
		{
			DGT1_DP_ON;
 8000a44:	2200      	movs	r2, #0
 8000a46:	2180      	movs	r1, #128	; 0x80
 8000a48:	48b2      	ldr	r0, [pc, #712]	; (8000d14 <_7SEG_SetNumber+0x67c>)
 8000a4a:	f001 f935 	bl	8001cb8 <HAL_GPIO_WritePin>
		else if(dp == OFF)
		{
			DGT2_DP_OFF;
		}
	}
}
 8000a4e:	e1ff      	b.n	8000e50 <_7SEG_SetNumber+0x7b8>
		else if(dp == OFF)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	f040 81fc 	bne.w	8000e50 <_7SEG_SetNumber+0x7b8>
			DGT1_DP_OFF;
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2180      	movs	r1, #128	; 0x80
 8000a5c:	48ad      	ldr	r0, [pc, #692]	; (8000d14 <_7SEG_SetNumber+0x67c>)
 8000a5e:	f001 f92b 	bl	8001cb8 <HAL_GPIO_WritePin>
}
 8000a62:	e1f5      	b.n	8000e50 <_7SEG_SetNumber+0x7b8>
	else if(dgt == DGT2)
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	f040 81f2 	bne.w	8000e50 <_7SEG_SetNumber+0x7b8>
		switch(num%10)
 8000a6c:	68b9      	ldr	r1, [r7, #8]
 8000a6e:	4bac      	ldr	r3, [pc, #688]	; (8000d20 <_7SEG_SetNumber+0x688>)
 8000a70:	fb83 2301 	smull	r2, r3, r3, r1
 8000a74:	109a      	asrs	r2, r3, #2
 8000a76:	17cb      	asrs	r3, r1, #31
 8000a78:	1ad2      	subs	r2, r2, r3
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	4413      	add	r3, r2
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	1aca      	subs	r2, r1, r3
 8000a84:	2a09      	cmp	r2, #9
 8000a86:	f200 81d0 	bhi.w	8000e2a <_7SEG_SetNumber+0x792>
 8000a8a:	a301      	add	r3, pc, #4	; (adr r3, 8000a90 <_7SEG_SetNumber+0x3f8>)
 8000a8c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8000a90:	08000ab9 	.word	0x08000ab9
 8000a94:	08000b0f 	.word	0x08000b0f
 8000a98:	08000b65 	.word	0x08000b65
 8000a9c:	08000bbb 	.word	0x08000bbb
 8000aa0:	08000c11 	.word	0x08000c11
 8000aa4:	08000c67 	.word	0x08000c67
 8000aa8:	08000cbd 	.word	0x08000cbd
 8000aac:	08000d29 	.word	0x08000d29
 8000ab0:	08000d7f 	.word	0x08000d7f
 8000ab4:	08000dd5 	.word	0x08000dd5
			case 0: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON;
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000abe:	4899      	ldr	r0, [pc, #612]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000ac0:	f001 f8fa 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aca:	4896      	ldr	r0, [pc, #600]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000acc:	f001 f8f4 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ad6:	4893      	ldr	r0, [pc, #588]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000ad8:	f001 f8ee 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000adc:	2200      	movs	r2, #0
 8000ade:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ae2:	4890      	ldr	r0, [pc, #576]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000ae4:	f001 f8e8 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aee:	488d      	ldr	r0, [pc, #564]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000af0:	f001 f8e2 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000af4:	2200      	movs	r2, #0
 8000af6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000afa:	488a      	ldr	r0, [pc, #552]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000afc:	f001 f8dc 	bl	8001cb8 <HAL_GPIO_WritePin>
					DGT2_G_OFF;
 8000b00:	2201      	movs	r2, #1
 8000b02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b06:	4887      	ldr	r0, [pc, #540]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000b08:	f001 f8d6 	bl	8001cb8 <HAL_GPIO_WritePin>
				break;
 8000b0c:	e18d      	b.n	8000e2a <_7SEG_SetNumber+0x792>
			case 1: DGT2_B_ON; DGT2_C_ON;
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b14:	4883      	ldr	r0, [pc, #524]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000b16:	f001 f8cf 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b20:	4880      	ldr	r0, [pc, #512]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000b22:	f001 f8c9 	bl	8001cb8 <HAL_GPIO_WritePin>
					DGT2_A_OFF; DGT2_D_OFF; DGT2_E_OFF; DGT2_F_OFF; DGT2_G_OFF;
 8000b26:	2201      	movs	r2, #1
 8000b28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b2c:	487d      	ldr	r0, [pc, #500]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000b2e:	f001 f8c3 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000b32:	2201      	movs	r2, #1
 8000b34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b38:	487a      	ldr	r0, [pc, #488]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000b3a:	f001 f8bd 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000b3e:	2201      	movs	r2, #1
 8000b40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b44:	4877      	ldr	r0, [pc, #476]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000b46:	f001 f8b7 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b50:	4874      	ldr	r0, [pc, #464]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000b52:	f001 f8b1 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000b56:	2201      	movs	r2, #1
 8000b58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b5c:	4871      	ldr	r0, [pc, #452]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000b5e:	f001 f8ab 	bl	8001cb8 <HAL_GPIO_WritePin>
				break;
 8000b62:	e162      	b.n	8000e2a <_7SEG_SetNumber+0x792>
			case 2: DGT2_A_ON; DGT2_B_ON; DGT2_G_ON; DGT2_E_ON; DGT2_D_ON;
 8000b64:	2200      	movs	r2, #0
 8000b66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b6a:	486e      	ldr	r0, [pc, #440]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000b6c:	f001 f8a4 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000b70:	2200      	movs	r2, #0
 8000b72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b76:	486b      	ldr	r0, [pc, #428]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000b78:	f001 f89e 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b82:	4868      	ldr	r0, [pc, #416]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000b84:	f001 f898 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b8e:	4865      	ldr	r0, [pc, #404]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000b90:	f001 f892 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000b94:	2200      	movs	r2, #0
 8000b96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b9a:	4862      	ldr	r0, [pc, #392]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000b9c:	f001 f88c 	bl	8001cb8 <HAL_GPIO_WritePin>
					DGT2_C_OFF; DGT2_F_OFF;
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ba6:	485f      	ldr	r0, [pc, #380]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000ba8:	f001 f886 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000bac:	2201      	movs	r2, #1
 8000bae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bb2:	485c      	ldr	r0, [pc, #368]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000bb4:	f001 f880 	bl	8001cb8 <HAL_GPIO_WritePin>
				break;
 8000bb8:	e137      	b.n	8000e2a <_7SEG_SetNumber+0x792>
			case 3: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_G_ON;
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bc0:	4858      	ldr	r0, [pc, #352]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000bc2:	f001 f879 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bcc:	4855      	ldr	r0, [pc, #340]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000bce:	f001 f873 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bd8:	4852      	ldr	r0, [pc, #328]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000bda:	f001 f86d 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000bde:	2200      	movs	r2, #0
 8000be0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000be4:	484f      	ldr	r0, [pc, #316]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000be6:	f001 f867 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000bea:	2200      	movs	r2, #0
 8000bec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bf0:	484c      	ldr	r0, [pc, #304]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000bf2:	f001 f861 	bl	8001cb8 <HAL_GPIO_WritePin>
					DGT2_E_OFF; DGT2_F_OFF;
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bfc:	4849      	ldr	r0, [pc, #292]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000bfe:	f001 f85b 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000c02:	2201      	movs	r2, #1
 8000c04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c08:	4846      	ldr	r0, [pc, #280]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000c0a:	f001 f855 	bl	8001cb8 <HAL_GPIO_WritePin>
				break;
 8000c0e:	e10c      	b.n	8000e2a <_7SEG_SetNumber+0x792>
			case 4: DGT2_F_ON; DGT2_G_ON; DGT2_B_ON; DGT2_C_ON;
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c16:	4843      	ldr	r0, [pc, #268]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000c18:	f001 f84e 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c22:	4840      	ldr	r0, [pc, #256]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000c24:	f001 f848 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c2e:	483d      	ldr	r0, [pc, #244]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000c30:	f001 f842 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000c34:	2200      	movs	r2, #0
 8000c36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c3a:	483a      	ldr	r0, [pc, #232]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000c3c:	f001 f83c 	bl	8001cb8 <HAL_GPIO_WritePin>
					DGT2_A_OFF; DGT2_D_OFF; DGT2_E_OFF;
 8000c40:	2201      	movs	r2, #1
 8000c42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c46:	4837      	ldr	r0, [pc, #220]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000c48:	f001 f836 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c52:	4834      	ldr	r0, [pc, #208]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000c54:	f001 f830 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c5e:	4831      	ldr	r0, [pc, #196]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000c60:	f001 f82a 	bl	8001cb8 <HAL_GPIO_WritePin>
				break;
 8000c64:	e0e1      	b.n	8000e2a <_7SEG_SetNumber+0x792>
			case 5: DGT2_A_ON; DGT2_F_ON; DGT2_G_ON; DGT2_C_ON; DGT2_D_ON;
 8000c66:	2200      	movs	r2, #0
 8000c68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c6c:	482d      	ldr	r0, [pc, #180]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000c6e:	f001 f823 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000c72:	2200      	movs	r2, #0
 8000c74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c78:	482a      	ldr	r0, [pc, #168]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000c7a:	f001 f81d 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c84:	4827      	ldr	r0, [pc, #156]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000c86:	f001 f817 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c90:	4824      	ldr	r0, [pc, #144]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000c92:	f001 f811 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000c96:	2200      	movs	r2, #0
 8000c98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c9c:	4821      	ldr	r0, [pc, #132]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000c9e:	f001 f80b 	bl	8001cb8 <HAL_GPIO_WritePin>
					DGT2_B_OFF; DGT2_E_OFF;
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ca8:	481e      	ldr	r0, [pc, #120]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000caa:	f001 f805 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000cae:	2201      	movs	r2, #1
 8000cb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cb4:	481b      	ldr	r0, [pc, #108]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000cb6:	f000 ffff 	bl	8001cb8 <HAL_GPIO_WritePin>
				break;
 8000cba:	e0b6      	b.n	8000e2a <_7SEG_SetNumber+0x792>
			case 6: DGT2_A_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON; DGT2_G_ON;
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cc2:	4818      	ldr	r0, [pc, #96]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000cc4:	f000 fff8 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cce:	4815      	ldr	r0, [pc, #84]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000cd0:	f000 fff2 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cda:	4812      	ldr	r0, [pc, #72]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000cdc:	f000 ffec 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ce6:	480f      	ldr	r0, [pc, #60]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000ce8:	f000 ffe6 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000cec:	2200      	movs	r2, #0
 8000cee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cf2:	480c      	ldr	r0, [pc, #48]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000cf4:	f000 ffe0 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cfe:	4809      	ldr	r0, [pc, #36]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000d00:	f000 ffda 	bl	8001cb8 <HAL_GPIO_WritePin>
					DGT2_B_OFF;
 8000d04:	2201      	movs	r2, #1
 8000d06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d0a:	4806      	ldr	r0, [pc, #24]	; (8000d24 <_7SEG_SetNumber+0x68c>)
 8000d0c:	f000 ffd4 	bl	8001cb8 <HAL_GPIO_WritePin>
				break;
 8000d10:	e08b      	b.n	8000e2a <_7SEG_SetNumber+0x792>
 8000d12:	bf00      	nop
 8000d14:	40020c00 	.word	0x40020c00
 8000d18:	40020000 	.word	0x40020000
 8000d1c:	40020800 	.word	0x40020800
 8000d20:	66666667 	.word	0x66666667
 8000d24:	40021000 	.word	0x40021000
			case 7: DGT2_F_ON; DGT2_A_ON; DGT2_B_ON; DGT2_C_ON;
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d2e:	484a      	ldr	r0, [pc, #296]	; (8000e58 <_7SEG_SetNumber+0x7c0>)
 8000d30:	f000 ffc2 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000d34:	2200      	movs	r2, #0
 8000d36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d3a:	4847      	ldr	r0, [pc, #284]	; (8000e58 <_7SEG_SetNumber+0x7c0>)
 8000d3c:	f000 ffbc 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000d40:	2200      	movs	r2, #0
 8000d42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d46:	4844      	ldr	r0, [pc, #272]	; (8000e58 <_7SEG_SetNumber+0x7c0>)
 8000d48:	f000 ffb6 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d52:	4841      	ldr	r0, [pc, #260]	; (8000e58 <_7SEG_SetNumber+0x7c0>)
 8000d54:	f000 ffb0 	bl	8001cb8 <HAL_GPIO_WritePin>
					DGT2_D_OFF; DGT2_E_OFF; DGT2_G_OFF;
 8000d58:	2201      	movs	r2, #1
 8000d5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d5e:	483e      	ldr	r0, [pc, #248]	; (8000e58 <_7SEG_SetNumber+0x7c0>)
 8000d60:	f000 ffaa 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000d64:	2201      	movs	r2, #1
 8000d66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d6a:	483b      	ldr	r0, [pc, #236]	; (8000e58 <_7SEG_SetNumber+0x7c0>)
 8000d6c:	f000 ffa4 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000d70:	2201      	movs	r2, #1
 8000d72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d76:	4838      	ldr	r0, [pc, #224]	; (8000e58 <_7SEG_SetNumber+0x7c0>)
 8000d78:	f000 ff9e 	bl	8001cb8 <HAL_GPIO_WritePin>
				break;
 8000d7c:	e055      	b.n	8000e2a <_7SEG_SetNumber+0x792>
			case 8: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON; DGT2_G_ON;
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d84:	4834      	ldr	r0, [pc, #208]	; (8000e58 <_7SEG_SetNumber+0x7c0>)
 8000d86:	f000 ff97 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d90:	4831      	ldr	r0, [pc, #196]	; (8000e58 <_7SEG_SetNumber+0x7c0>)
 8000d92:	f000 ff91 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000d96:	2200      	movs	r2, #0
 8000d98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d9c:	482e      	ldr	r0, [pc, #184]	; (8000e58 <_7SEG_SetNumber+0x7c0>)
 8000d9e:	f000 ff8b 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000da2:	2200      	movs	r2, #0
 8000da4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000da8:	482b      	ldr	r0, [pc, #172]	; (8000e58 <_7SEG_SetNumber+0x7c0>)
 8000daa:	f000 ff85 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000dae:	2200      	movs	r2, #0
 8000db0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000db4:	4828      	ldr	r0, [pc, #160]	; (8000e58 <_7SEG_SetNumber+0x7c0>)
 8000db6:	f000 ff7f 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dc0:	4825      	ldr	r0, [pc, #148]	; (8000e58 <_7SEG_SetNumber+0x7c0>)
 8000dc2:	f000 ff79 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dcc:	4822      	ldr	r0, [pc, #136]	; (8000e58 <_7SEG_SetNumber+0x7c0>)
 8000dce:	f000 ff73 	bl	8001cb8 <HAL_GPIO_WritePin>
				break;
 8000dd2:	e02a      	b.n	8000e2a <_7SEG_SetNumber+0x792>
			case 9: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_F_ON; DGT2_G_ON;
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dda:	481f      	ldr	r0, [pc, #124]	; (8000e58 <_7SEG_SetNumber+0x7c0>)
 8000ddc:	f000 ff6c 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000de0:	2200      	movs	r2, #0
 8000de2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000de6:	481c      	ldr	r0, [pc, #112]	; (8000e58 <_7SEG_SetNumber+0x7c0>)
 8000de8:	f000 ff66 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000dec:	2200      	movs	r2, #0
 8000dee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000df2:	4819      	ldr	r0, [pc, #100]	; (8000e58 <_7SEG_SetNumber+0x7c0>)
 8000df4:	f000 ff60 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dfe:	4816      	ldr	r0, [pc, #88]	; (8000e58 <_7SEG_SetNumber+0x7c0>)
 8000e00:	f000 ff5a 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000e04:	2200      	movs	r2, #0
 8000e06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e0a:	4813      	ldr	r0, [pc, #76]	; (8000e58 <_7SEG_SetNumber+0x7c0>)
 8000e0c:	f000 ff54 	bl	8001cb8 <HAL_GPIO_WritePin>
 8000e10:	2200      	movs	r2, #0
 8000e12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e16:	4810      	ldr	r0, [pc, #64]	; (8000e58 <_7SEG_SetNumber+0x7c0>)
 8000e18:	f000 ff4e 	bl	8001cb8 <HAL_GPIO_WritePin>
					DGT2_E_OFF;
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e22:	480d      	ldr	r0, [pc, #52]	; (8000e58 <_7SEG_SetNumber+0x7c0>)
 8000e24:	f000 ff48 	bl	8001cb8 <HAL_GPIO_WritePin>
				break;
 8000e28:	bf00      	nop
		if(dp == ON)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d106      	bne.n	8000e3e <_7SEG_SetNumber+0x7a6>
			DGT2_DP_ON;
 8000e30:	2200      	movs	r2, #0
 8000e32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e36:	4808      	ldr	r0, [pc, #32]	; (8000e58 <_7SEG_SetNumber+0x7c0>)
 8000e38:	f000 ff3e 	bl	8001cb8 <HAL_GPIO_WritePin>
}
 8000e3c:	e008      	b.n	8000e50 <_7SEG_SetNumber+0x7b8>
		else if(dp == OFF)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d105      	bne.n	8000e50 <_7SEG_SetNumber+0x7b8>
			DGT2_DP_OFF;
 8000e44:	2201      	movs	r2, #1
 8000e46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e4a:	4803      	ldr	r0, [pc, #12]	; (8000e58 <_7SEG_SetNumber+0x7c0>)
 8000e4c:	f000 ff34 	bl	8001cb8 <HAL_GPIO_WritePin>
}
 8000e50:	bf00      	nop
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40021000 	.word	0x40021000

08000e5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	; 0x28
 8000e60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
 8000e70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
 8000e76:	4b62      	ldr	r3, [pc, #392]	; (8001000 <MX_GPIO_Init+0x1a4>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a61      	ldr	r2, [pc, #388]	; (8001000 <MX_GPIO_Init+0x1a4>)
 8000e7c:	f043 0310 	orr.w	r3, r3, #16
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b5f      	ldr	r3, [pc, #380]	; (8001000 <MX_GPIO_Init+0x1a4>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0310 	and.w	r3, r3, #16
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	4b5b      	ldr	r3, [pc, #364]	; (8001000 <MX_GPIO_Init+0x1a4>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a5a      	ldr	r2, [pc, #360]	; (8001000 <MX_GPIO_Init+0x1a4>)
 8000e98:	f043 0304 	orr.w	r3, r3, #4
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b58      	ldr	r3, [pc, #352]	; (8001000 <MX_GPIO_Init+0x1a4>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0304 	and.w	r3, r3, #4
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	4b54      	ldr	r3, [pc, #336]	; (8001000 <MX_GPIO_Init+0x1a4>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a53      	ldr	r2, [pc, #332]	; (8001000 <MX_GPIO_Init+0x1a4>)
 8000eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b51      	ldr	r3, [pc, #324]	; (8001000 <MX_GPIO_Init+0x1a4>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	4b4d      	ldr	r3, [pc, #308]	; (8001000 <MX_GPIO_Init+0x1a4>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a4c      	ldr	r2, [pc, #304]	; (8001000 <MX_GPIO_Init+0x1a4>)
 8000ed0:	f043 0302 	orr.w	r3, r3, #2
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b4a      	ldr	r3, [pc, #296]	; (8001000 <MX_GPIO_Init+0x1a4>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0302 	and.w	r3, r3, #2
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	603b      	str	r3, [r7, #0]
 8000ee6:	4b46      	ldr	r3, [pc, #280]	; (8001000 <MX_GPIO_Init+0x1a4>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a45      	ldr	r2, [pc, #276]	; (8001000 <MX_GPIO_Init+0x1a4>)
 8000eec:	f043 0308 	orr.w	r3, r3, #8
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b43      	ldr	r3, [pc, #268]	; (8001000 <MX_GPIO_Init+0x1a4>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0308 	and.w	r3, r3, #8
 8000efa:	603b      	str	r3, [r7, #0]
 8000efc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2121      	movs	r1, #33	; 0x21
 8000f02:	4840      	ldr	r0, [pc, #256]	; (8001004 <MX_GPIO_Init+0x1a8>)
 8000f04:	f000 fed8 	bl	8001cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000f0e:	483e      	ldr	r0, [pc, #248]	; (8001008 <MX_GPIO_Init+0x1ac>)
 8000f10:	f000 fed2 	bl	8001cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2140      	movs	r1, #64	; 0x40
 8000f18:	483c      	ldr	r0, [pc, #240]	; (800100c <MX_GPIO_Init+0x1b0>)
 8000f1a:	f000 fecd 	bl	8001cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f1e:	2308      	movs	r3, #8
 8000f20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f22:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000f26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	4619      	mov	r1, r3
 8000f32:	4837      	ldr	r0, [pc, #220]	; (8001010 <MX_GPIO_Init+0x1b4>)
 8000f34:	f000 fd0c 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f3e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000f42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	482f      	ldr	r0, [pc, #188]	; (800100c <MX_GPIO_Init+0x1b0>)
 8000f50:	f000 fcfe 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8000f54:	2321      	movs	r3, #33	; 0x21
 8000f56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	2300      	movs	r3, #0
 8000f62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4826      	ldr	r0, [pc, #152]	; (8001004 <MX_GPIO_Init+0x1a8>)
 8000f6c:	f000 fcf0 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 8000f70:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000f74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f76:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000f7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	4619      	mov	r1, r3
 8000f86:	4820      	ldr	r0, [pc, #128]	; (8001008 <MX_GPIO_Init+0x1ac>)
 8000f88:	f000 fce2 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000f8c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000f90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f92:	2301      	movs	r3, #1
 8000f94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4818      	ldr	r0, [pc, #96]	; (8001008 <MX_GPIO_Init+0x1ac>)
 8000fa6:	f000 fcd3 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000faa:	2340      	movs	r3, #64	; 0x40
 8000fac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4812      	ldr	r0, [pc, #72]	; (800100c <MX_GPIO_Init+0x1b0>)
 8000fc2:	f000 fcc5 	bl	8001950 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2100      	movs	r1, #0
 8000fca:	2009      	movs	r0, #9
 8000fcc:	f000 fc89 	bl	80018e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000fd0:	2009      	movs	r0, #9
 8000fd2:	f000 fca2 	bl	800191a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2100      	movs	r1, #0
 8000fda:	200a      	movs	r0, #10
 8000fdc:	f000 fc81 	bl	80018e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000fe0:	200a      	movs	r0, #10
 8000fe2:	f000 fc9a 	bl	800191a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2100      	movs	r1, #0
 8000fea:	2028      	movs	r0, #40	; 0x28
 8000fec:	f000 fc79 	bl	80018e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ff0:	2028      	movs	r0, #40	; 0x28
 8000ff2:	f000 fc92 	bl	800191a <HAL_NVIC_EnableIRQ>

}
 8000ff6:	bf00      	nop
 8000ff8:	3728      	adds	r7, #40	; 0x28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40023800 	.word	0x40023800
 8001004:	40020400 	.word	0x40020400
 8001008:	40020c00 	.word	0x40020c00
 800100c:	40020800 	.word	0x40020800
 8001010:	40021000 	.word	0x40021000

08001014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001018:	f000 fb16 	bl	8001648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800101c:	f000 f86e 	bl	80010fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001020:	f7ff ff1c 	bl	8000e5c <MX_GPIO_Init>
  MX_TIM6_Init();
 8001024:	f000 fa8e 	bl	8001544 <MX_TIM6_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001028:	f000 f8d2 	bl	80011d0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  L_RED_LED_OFF();
 800102c:	2201      	movs	r2, #1
 800102e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001032:	4828      	ldr	r0, [pc, #160]	; (80010d4 <main+0xc0>)
 8001034:	f000 fe40 	bl	8001cb8 <HAL_GPIO_WritePin>
  L_GREEN_LED_OFF();
 8001038:	2201      	movs	r2, #1
 800103a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800103e:	4825      	ldr	r0, [pc, #148]	; (80010d4 <main+0xc0>)
 8001040:	f000 fe3a 	bl	8001cb8 <HAL_GPIO_WritePin>
  L_BLUE_LED_OFF();
 8001044:	2201      	movs	r2, #1
 8001046:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800104a:	4822      	ldr	r0, [pc, #136]	; (80010d4 <main+0xc0>)
 800104c:	f000 fe34 	bl	8001cb8 <HAL_GPIO_WritePin>
  R_RED_LED_OFF();
 8001050:	2201      	movs	r2, #1
 8001052:	2140      	movs	r1, #64	; 0x40
 8001054:	4820      	ldr	r0, [pc, #128]	; (80010d8 <main+0xc4>)
 8001056:	f000 fe2f 	bl	8001cb8 <HAL_GPIO_WritePin>
  R_GREEN_LED_OFF();
 800105a:	2201      	movs	r2, #1
 800105c:	2120      	movs	r1, #32
 800105e:	481f      	ldr	r0, [pc, #124]	; (80010dc <main+0xc8>)
 8001060:	f000 fe2a 	bl	8001cb8 <HAL_GPIO_WritePin>
  R_BLUE_LED_OFF();
 8001064:	2201      	movs	r2, #1
 8001066:	2101      	movs	r1, #1
 8001068:	481c      	ldr	r0, [pc, #112]	; (80010dc <main+0xc8>)
 800106a:	f000 fe25 	bl	8001cb8 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim6);
 800106e:	481c      	ldr	r0, [pc, #112]	; (80010e0 <main+0xcc>)
 8001070:	f001 fb08 	bl	8002684 <HAL_TIM_Base_Start_IT>
  _7SEG_GPIO_Init();
 8001074:	f7ff fa2a 	bl	80004cc <_7SEG_GPIO_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  switch(mode) // 디지털 알람시계의 모드를 Swtich-Case로 구분하였다.
 8001078:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <main+0xd0>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d1fb      	bne.n	8001078 <main+0x64>
	   * Stopwatch 모드일 경우. 여기서는 7-Seg에 시간을 표시해주는 일만 한다.
	   * 밑의 코드에서 버튼의 외부 인터럽트를 통하여 Stopwatch 시작과 리셋을 조작한다.
	   */
	  case Stopwatch :
		    // 0.5초마다 점을 토글시키는 코드
			if(stopwatch_time_1ms < 500) show_7seg_point = ON;
 8001080:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <main+0xd4>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001088:	d203      	bcs.n	8001092 <main+0x7e>
 800108a:	4b18      	ldr	r3, [pc, #96]	; (80010ec <main+0xd8>)
 800108c:	2201      	movs	r2, #1
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	e002      	b.n	8001098 <main+0x84>
			else show_7seg_point = OFF;
 8001092:	4b16      	ldr	r3, [pc, #88]	; (80010ec <main+0xd8>)
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]

			// 첫째 자리는 1초 단위로, 둘째 자리는 0.1초 단위로 7-Seg에 표시한다.
			_7SEG_SetNumber(DGT1, stopwatch_time_1s % 10, show_7seg_point);
 8001098:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <main+0xdc>)
 800109a:	6819      	ldr	r1, [r3, #0]
 800109c:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <main+0xe0>)
 800109e:	fba3 2301 	umull	r2, r3, r3, r1
 80010a2:	08da      	lsrs	r2, r3, #3
 80010a4:	4613      	mov	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	1aca      	subs	r2, r1, r3
 80010ae:	4611      	mov	r1, r2
 80010b0:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <main+0xd8>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	2000      	movs	r0, #0
 80010b8:	f7ff faee 	bl	8000698 <_7SEG_SetNumber>
			_7SEG_SetNumber(DGT2, stopwatch_time_1ms / 100, OFF);
 80010bc:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <main+0xd4>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0d      	ldr	r2, [pc, #52]	; (80010f8 <main+0xe4>)
 80010c2:	fba2 2303 	umull	r2, r3, r2, r3
 80010c6:	095b      	lsrs	r3, r3, #5
 80010c8:	2200      	movs	r2, #0
 80010ca:	4619      	mov	r1, r3
 80010cc:	2001      	movs	r0, #1
 80010ce:	f7ff fae3 	bl	8000698 <_7SEG_SetNumber>
	  switch(mode) // 디지털 알람시계의 모드를 Swtich-Case로 구분하였다.
 80010d2:	e7d1      	b.n	8001078 <main+0x64>
 80010d4:	40020c00 	.word	0x40020c00
 80010d8:	40020800 	.word	0x40020800
 80010dc:	40020400 	.word	0x40020400
 80010e0:	20000048 	.word	0x20000048
 80010e4:	20000044 	.word	0x20000044
 80010e8:	20000040 	.word	0x20000040
 80010ec:	20000028 	.word	0x20000028
 80010f0:	2000003c 	.word	0x2000003c
 80010f4:	cccccccd 	.word	0xcccccccd
 80010f8:	51eb851f 	.word	0x51eb851f

080010fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b094      	sub	sp, #80	; 0x50
 8001100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001102:	f107 0320 	add.w	r3, r7, #32
 8001106:	2230      	movs	r2, #48	; 0x30
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f001 fdae 	bl	8002c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001120:	2300      	movs	r3, #0
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	4b28      	ldr	r3, [pc, #160]	; (80011c8 <SystemClock_Config+0xcc>)
 8001126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001128:	4a27      	ldr	r2, [pc, #156]	; (80011c8 <SystemClock_Config+0xcc>)
 800112a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800112e:	6413      	str	r3, [r2, #64]	; 0x40
 8001130:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <SystemClock_Config+0xcc>)
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800113c:	2300      	movs	r3, #0
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	4b22      	ldr	r3, [pc, #136]	; (80011cc <SystemClock_Config+0xd0>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a21      	ldr	r2, [pc, #132]	; (80011cc <SystemClock_Config+0xd0>)
 8001146:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	4b1f      	ldr	r3, [pc, #124]	; (80011cc <SystemClock_Config+0xd0>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001158:	2302      	movs	r3, #2
 800115a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800115c:	2301      	movs	r3, #1
 800115e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001160:	2310      	movs	r3, #16
 8001162:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001164:	2302      	movs	r3, #2
 8001166:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001168:	2300      	movs	r3, #0
 800116a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800116c:	2308      	movs	r3, #8
 800116e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001170:	23a8      	movs	r3, #168	; 0xa8
 8001172:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001174:	2302      	movs	r3, #2
 8001176:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001178:	2304      	movs	r3, #4
 800117a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117c:	f107 0320 	add.w	r3, r7, #32
 8001180:	4618      	mov	r0, r3
 8001182:	f000 fdcb 	bl	8001d1c <HAL_RCC_OscConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800118c:	f000 f94c 	bl	8001428 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001190:	230f      	movs	r3, #15
 8001192:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001194:	2302      	movs	r3, #2
 8001196:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800119c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	2105      	movs	r1, #5
 80011ae:	4618      	mov	r0, r3
 80011b0:	f001 f82c 	bl	800220c <HAL_RCC_ClockConfig>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011ba:	f000 f935 	bl	8001428 <Error_Handler>
  }
}
 80011be:	bf00      	nop
 80011c0:	3750      	adds	r7, #80	; 0x50
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40007000 	.word	0x40007000

080011d0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2100      	movs	r1, #0
 80011d8:	2036      	movs	r0, #54	; 0x36
 80011da:	f000 fb82 	bl	80018e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011de:	2036      	movs	r0, #54	; 0x36
 80011e0:	f000 fb9b 	bl	800191a <HAL_NVIC_EnableIRQ>
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // 1ms 주기의 Timer 6
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a12      	ldr	r2, [pc, #72]	; (8001240 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d11d      	bne.n	8001236 <HAL_TIM_PeriodElapsedCallback+0x4e>
	{
		// Stopwatch 시작할시, 1ms 단위로 시간을 누적하여 측정한다.
		if(stopwatch_start)
 80011fa:	4b12      	ldr	r3, [pc, #72]	; (8001244 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d006      	beq.n	8001210 <HAL_TIM_PeriodElapsedCallback+0x28>
		{
			stopwatch_time_1ms++;
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	3301      	adds	r3, #1
 8001208:	4a0f      	ldr	r2, [pc, #60]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800120a:	6013      	str	r3, [r2, #0]
			convert_stopwatch_time_format(); // Stopwatch의 1ms를 1s, 1m, 1h로 변환하는 함수
 800120c:	f000 f826 	bl	800125c <convert_stopwatch_time_format>
		}

		// Stopwatch를 리셋할시, 누적된 시간을 0으로 초기화 한다.
		if(stopwatch_reset)
 8001210:	4b0e      	ldr	r3, [pc, #56]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d00e      	beq.n	8001236 <HAL_TIM_PeriodElapsedCallback+0x4e>
		{
			stopwatch_time_1ms = 0;
 8001218:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
			stopwatch_time_1s = 0;
 800121e:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
			stopwatch_time_1m = 0;
 8001224:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
			stopwatch_time_1h = 0;
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
			stopwatch_reset = FALSE;
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40001000 	.word	0x40001000
 8001244:	2000002c 	.word	0x2000002c
 8001248:	20000040 	.word	0x20000040
 800124c:	20000030 	.word	0x20000030
 8001250:	2000003c 	.word	0x2000003c
 8001254:	20000038 	.word	0x20000038
 8001258:	20000034 	.word	0x20000034

0800125c <convert_stopwatch_time_format>:

void convert_stopwatch_time_format()
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
	if(stopwatch_time_1ms == 1000)
 8001260:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <convert_stopwatch_time_format+0x58>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001268:	d107      	bne.n	800127a <convert_stopwatch_time_format+0x1e>
	{
		stopwatch_time_1ms = 0;
 800126a:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <convert_stopwatch_time_format+0x58>)
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
		stopwatch_time_1s++;
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <convert_stopwatch_time_format+0x5c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	3301      	adds	r3, #1
 8001276:	4a10      	ldr	r2, [pc, #64]	; (80012b8 <convert_stopwatch_time_format+0x5c>)
 8001278:	6013      	str	r3, [r2, #0]
	}
	if(stopwatch_time_1s == 60)
 800127a:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <convert_stopwatch_time_format+0x5c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b3c      	cmp	r3, #60	; 0x3c
 8001280:	d107      	bne.n	8001292 <convert_stopwatch_time_format+0x36>
	{
		stopwatch_time_1s = 0;
 8001282:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <convert_stopwatch_time_format+0x5c>)
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
		stopwatch_time_1m++;
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <convert_stopwatch_time_format+0x60>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	3301      	adds	r3, #1
 800128e:	4a0b      	ldr	r2, [pc, #44]	; (80012bc <convert_stopwatch_time_format+0x60>)
 8001290:	6013      	str	r3, [r2, #0]
	}
	if(stopwatch_time_1m == 60)
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <convert_stopwatch_time_format+0x60>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2b3c      	cmp	r3, #60	; 0x3c
 8001298:	d107      	bne.n	80012aa <convert_stopwatch_time_format+0x4e>
	{
		stopwatch_time_1m = 0;
 800129a:	4b08      	ldr	r3, [pc, #32]	; (80012bc <convert_stopwatch_time_format+0x60>)
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
		stopwatch_time_1h++;
 80012a0:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <convert_stopwatch_time_format+0x64>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	3301      	adds	r3, #1
 80012a6:	4a06      	ldr	r2, [pc, #24]	; (80012c0 <convert_stopwatch_time_format+0x64>)
 80012a8:	6013      	str	r3, [r2, #0]
	}
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	20000040 	.word	0x20000040
 80012b8:	2000003c 	.word	0x2000003c
 80012bc:	20000038 	.word	0x20000038
 80012c0:	20000034 	.word	0x20000034

080012c4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) // 외부 인터럽트를 통하여 SW1~4를 조작하는 함수
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	80fb      	strh	r3, [r7, #6]
	// SW1
	if(GPIO_Pin == SW1 && CHECK_SW1_PRESSING())
 80012ce:	88fb      	ldrh	r3, [r7, #6]
 80012d0:	2b08      	cmp	r3, #8
 80012d2:	d11b      	bne.n	800130c <HAL_GPIO_EXTI_Callback+0x48>
 80012d4:	2108      	movs	r1, #8
 80012d6:	484e      	ldr	r0, [pc, #312]	; (8001410 <HAL_GPIO_EXTI_Callback+0x14c>)
 80012d8:	f000 fcd6 	bl	8001c88 <HAL_GPIO_ReadPin>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d114      	bne.n	800130c <HAL_GPIO_EXTI_Callback+0x48>
	{
		L_RED_LED_TOGGLE();
 80012e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012e6:	484b      	ldr	r0, [pc, #300]	; (8001414 <HAL_GPIO_EXTI_Callback+0x150>)
 80012e8:	f000 fcce 	bl	8001c88 <HAL_GPIO_ReadPin>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d106      	bne.n	8001300 <HAL_GPIO_EXTI_Callback+0x3c>
 80012f2:	2200      	movs	r2, #0
 80012f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012f8:	4846      	ldr	r0, [pc, #280]	; (8001414 <HAL_GPIO_EXTI_Callback+0x150>)
 80012fa:	f000 fcdd 	bl	8001cb8 <HAL_GPIO_WritePin>
 80012fe:	e005      	b.n	800130c <HAL_GPIO_EXTI_Callback+0x48>
 8001300:	2201      	movs	r2, #1
 8001302:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001306:	4843      	ldr	r0, [pc, #268]	; (8001414 <HAL_GPIO_EXTI_Callback+0x150>)
 8001308:	f000 fcd6 	bl	8001cb8 <HAL_GPIO_WritePin>
	}

	// SW2
	if(GPIO_Pin == SW2 && CHECK_SW2_PRESSING())
 800130c:	88fb      	ldrh	r3, [r7, #6]
 800130e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001312:	d12b      	bne.n	800136c <HAL_GPIO_EXTI_Callback+0xa8>
 8001314:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001318:	483f      	ldr	r0, [pc, #252]	; (8001418 <HAL_GPIO_EXTI_Callback+0x154>)
 800131a:	f000 fcb5 	bl	8001c88 <HAL_GPIO_ReadPin>
 800131e:	4603      	mov	r3, r0
 8001320:	2b01      	cmp	r3, #1
 8001322:	d123      	bne.n	800136c <HAL_GPIO_EXTI_Callback+0xa8>
	{
		L_GREEN_LED_TOGGLE();
 8001324:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001328:	483a      	ldr	r0, [pc, #232]	; (8001414 <HAL_GPIO_EXTI_Callback+0x150>)
 800132a:	f000 fcad 	bl	8001c88 <HAL_GPIO_ReadPin>
 800132e:	4603      	mov	r3, r0
 8001330:	2b01      	cmp	r3, #1
 8001332:	d106      	bne.n	8001342 <HAL_GPIO_EXTI_Callback+0x7e>
 8001334:	2200      	movs	r2, #0
 8001336:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800133a:	4836      	ldr	r0, [pc, #216]	; (8001414 <HAL_GPIO_EXTI_Callback+0x150>)
 800133c:	f000 fcbc 	bl	8001cb8 <HAL_GPIO_WritePin>
 8001340:	e005      	b.n	800134e <HAL_GPIO_EXTI_Callback+0x8a>
 8001342:	2201      	movs	r2, #1
 8001344:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001348:	4832      	ldr	r0, [pc, #200]	; (8001414 <HAL_GPIO_EXTI_Callback+0x150>)
 800134a:	f000 fcb5 	bl	8001cb8 <HAL_GPIO_WritePin>

		switch(mode)
 800134e:	4b33      	ldr	r3, [pc, #204]	; (800141c <HAL_GPIO_EXTI_Callback+0x158>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d10b      	bne.n	800136e <HAL_GPIO_EXTI_Callback+0xaa>
		{
		case Stopwatch :
			stopwatch_start = !stopwatch_start; // Stopwatch의 Start/Pause를 토글한다.
 8001356:	4b32      	ldr	r3, [pc, #200]	; (8001420 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	bf0c      	ite	eq
 800135e:	2301      	moveq	r3, #1
 8001360:	2300      	movne	r3, #0
 8001362:	b2db      	uxtb	r3, r3
 8001364:	461a      	mov	r2, r3
 8001366:	4b2e      	ldr	r3, [pc, #184]	; (8001420 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001368:	601a      	str	r2, [r3, #0]
			break;
 800136a:	e000      	b.n	800136e <HAL_GPIO_EXTI_Callback+0xaa>
		}
	}
 800136c:	bf00      	nop

	// SW3
	if(GPIO_Pin == SW3 && CHECK_SW3_PRESSING())
 800136e:	88fb      	ldrh	r3, [r7, #6]
 8001370:	2b10      	cmp	r3, #16
 8001372:	d127      	bne.n	80013c4 <HAL_GPIO_EXTI_Callback+0x100>
 8001374:	2110      	movs	r1, #16
 8001376:	4827      	ldr	r0, [pc, #156]	; (8001414 <HAL_GPIO_EXTI_Callback+0x150>)
 8001378:	f000 fc86 	bl	8001c88 <HAL_GPIO_ReadPin>
 800137c:	4603      	mov	r3, r0
 800137e:	2b01      	cmp	r3, #1
 8001380:	d120      	bne.n	80013c4 <HAL_GPIO_EXTI_Callback+0x100>
	{
		L_BLUE_LED_TOGGLE();
 8001382:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001386:	4823      	ldr	r0, [pc, #140]	; (8001414 <HAL_GPIO_EXTI_Callback+0x150>)
 8001388:	f000 fc7e 	bl	8001c88 <HAL_GPIO_ReadPin>
 800138c:	4603      	mov	r3, r0
 800138e:	2b01      	cmp	r3, #1
 8001390:	d106      	bne.n	80013a0 <HAL_GPIO_EXTI_Callback+0xdc>
 8001392:	2200      	movs	r2, #0
 8001394:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001398:	481e      	ldr	r0, [pc, #120]	; (8001414 <HAL_GPIO_EXTI_Callback+0x150>)
 800139a:	f000 fc8d 	bl	8001cb8 <HAL_GPIO_WritePin>
 800139e:	e005      	b.n	80013ac <HAL_GPIO_EXTI_Callback+0xe8>
 80013a0:	2201      	movs	r2, #1
 80013a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013a6:	481b      	ldr	r0, [pc, #108]	; (8001414 <HAL_GPIO_EXTI_Callback+0x150>)
 80013a8:	f000 fc86 	bl	8001cb8 <HAL_GPIO_WritePin>

		switch(mode)
 80013ac:	4b1b      	ldr	r3, [pc, #108]	; (800141c <HAL_GPIO_EXTI_Callback+0x158>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d10a      	bne.n	80013ca <HAL_GPIO_EXTI_Callback+0x106>
		{
		case Stopwatch :
			if(!stopwatch_start) stopwatch_reset = TRUE; // Stopwatch가 Pause일 경우, Stopwatch를 Reset한다.
 80013b4:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <HAL_GPIO_EXTI_Callback+0x15c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d105      	bne.n	80013c8 <HAL_GPIO_EXTI_Callback+0x104>
 80013bc:	4b19      	ldr	r3, [pc, #100]	; (8001424 <HAL_GPIO_EXTI_Callback+0x160>)
 80013be:	2201      	movs	r2, #1
 80013c0:	601a      	str	r2, [r3, #0]
			break;
 80013c2:	e001      	b.n	80013c8 <HAL_GPIO_EXTI_Callback+0x104>
		}
	}
 80013c4:	bf00      	nop
 80013c6:	e000      	b.n	80013ca <HAL_GPIO_EXTI_Callback+0x106>
			break;
 80013c8:	bf00      	nop

	// SW4
	if(GPIO_Pin == SW4 && CHECK_SW4_PRESSING())
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013d0:	d119      	bne.n	8001406 <HAL_GPIO_EXTI_Callback+0x142>
 80013d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013d6:	480f      	ldr	r0, [pc, #60]	; (8001414 <HAL_GPIO_EXTI_Callback+0x150>)
 80013d8:	f000 fc56 	bl	8001c88 <HAL_GPIO_ReadPin>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d111      	bne.n	8001406 <HAL_GPIO_EXTI_Callback+0x142>
	{
		R_RED_LED_TOGGLE();
 80013e2:	2140      	movs	r1, #64	; 0x40
 80013e4:	480c      	ldr	r0, [pc, #48]	; (8001418 <HAL_GPIO_EXTI_Callback+0x154>)
 80013e6:	f000 fc4f 	bl	8001c88 <HAL_GPIO_ReadPin>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d105      	bne.n	80013fc <HAL_GPIO_EXTI_Callback+0x138>
 80013f0:	2200      	movs	r2, #0
 80013f2:	2140      	movs	r1, #64	; 0x40
 80013f4:	4808      	ldr	r0, [pc, #32]	; (8001418 <HAL_GPIO_EXTI_Callback+0x154>)
 80013f6:	f000 fc5f 	bl	8001cb8 <HAL_GPIO_WritePin>
	}
}
 80013fa:	e004      	b.n	8001406 <HAL_GPIO_EXTI_Callback+0x142>
		R_RED_LED_TOGGLE();
 80013fc:	2201      	movs	r2, #1
 80013fe:	2140      	movs	r1, #64	; 0x40
 8001400:	4805      	ldr	r0, [pc, #20]	; (8001418 <HAL_GPIO_EXTI_Callback+0x154>)
 8001402:	f000 fc59 	bl	8001cb8 <HAL_GPIO_WritePin>
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40021000 	.word	0x40021000
 8001414:	40020c00 	.word	0x40020c00
 8001418:	40020800 	.word	0x40020800
 800141c:	20000044 	.word	0x20000044
 8001420:	2000002c 	.word	0x2000002c
 8001424:	20000030 	.word	0x20000030

08001428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800142c:	b672      	cpsid	i
}
 800142e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001430:	e7fe      	b.n	8001430 <Error_Handler+0x8>
	...

08001434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	607b      	str	r3, [r7, #4]
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <HAL_MspInit+0x4c>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	4a0f      	ldr	r2, [pc, #60]	; (8001480 <HAL_MspInit+0x4c>)
 8001444:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001448:	6453      	str	r3, [r2, #68]	; 0x44
 800144a:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <HAL_MspInit+0x4c>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	603b      	str	r3, [r7, #0]
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <HAL_MspInit+0x4c>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	4a08      	ldr	r2, [pc, #32]	; (8001480 <HAL_MspInit+0x4c>)
 8001460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001464:	6413      	str	r3, [r2, #64]	; 0x40
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_MspInit+0x4c>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146e:	603b      	str	r3, [r7, #0]
 8001470:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800

08001484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <NMI_Handler+0x4>

0800148a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <HardFault_Handler+0x4>

08001490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <MemManage_Handler+0x4>

08001496 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800149a:	e7fe      	b.n	800149a <BusFault_Handler+0x4>

0800149c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <UsageFault_Handler+0x4>

080014a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d0:	f000 f90c 	bl	80016ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80014dc:	2008      	movs	r0, #8
 80014de:	f000 fc05 	bl	8001cec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80014ea:	2010      	movs	r0, #16
 80014ec:	f000 fbfe 	bl	8001cec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80014f8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80014fc:	f000 fbf6 	bl	8001cec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001500:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001504:	f000 fbf2 	bl	8001cec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}

0800150c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001510:	4802      	ldr	r0, [pc, #8]	; (800151c <TIM6_DAC_IRQHandler+0x10>)
 8001512:	f001 f927 	bl	8002764 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000048 	.word	0x20000048

08001520 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <SystemInit+0x20>)
 8001526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800152a:	4a05      	ldr	r2, [pc, #20]	; (8001540 <SystemInit+0x20>)
 800152c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001530:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800154a:	463b      	mov	r3, r7
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <MX_TIM6_Init+0x64>)
 8001554:	4a15      	ldr	r2, [pc, #84]	; (80015ac <MX_TIM6_Init+0x68>)
 8001556:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 99;
 8001558:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <MX_TIM6_Init+0x64>)
 800155a:	2263      	movs	r2, #99	; 0x63
 800155c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155e:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <MX_TIM6_Init+0x64>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 839;
 8001564:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <MX_TIM6_Init+0x64>)
 8001566:	f240 3247 	movw	r2, #839	; 0x347
 800156a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800156c:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <MX_TIM6_Init+0x64>)
 800156e:	2200      	movs	r2, #0
 8001570:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001572:	480d      	ldr	r0, [pc, #52]	; (80015a8 <MX_TIM6_Init+0x64>)
 8001574:	f001 f836 	bl	80025e4 <HAL_TIM_Base_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800157e:	f7ff ff53 	bl	8001428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001582:	2300      	movs	r3, #0
 8001584:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800158a:	463b      	mov	r3, r7
 800158c:	4619      	mov	r1, r3
 800158e:	4806      	ldr	r0, [pc, #24]	; (80015a8 <MX_TIM6_Init+0x64>)
 8001590:	f001 fab8 	bl	8002b04 <HAL_TIMEx_MasterConfigSynchronization>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800159a:	f7ff ff45 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000048 	.word	0x20000048
 80015ac:	40001000 	.word	0x40001000

080015b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a0b      	ldr	r2, [pc, #44]	; (80015ec <HAL_TIM_Base_MspInit+0x3c>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d10d      	bne.n	80015de <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <HAL_TIM_Base_MspInit+0x40>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	4a09      	ldr	r2, [pc, #36]	; (80015f0 <HAL_TIM_Base_MspInit+0x40>)
 80015cc:	f043 0310 	orr.w	r3, r3, #16
 80015d0:	6413      	str	r3, [r2, #64]	; 0x40
 80015d2:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <HAL_TIM_Base_MspInit+0x40>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f003 0310 	and.w	r3, r3, #16
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80015de:	bf00      	nop
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	40001000 	.word	0x40001000
 80015f0:	40023800 	.word	0x40023800

080015f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800162c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015f8:	480d      	ldr	r0, [pc, #52]	; (8001630 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015fa:	490e      	ldr	r1, [pc, #56]	; (8001634 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015fc:	4a0e      	ldr	r2, [pc, #56]	; (8001638 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001600:	e002      	b.n	8001608 <LoopCopyDataInit>

08001602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001606:	3304      	adds	r3, #4

08001608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800160a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800160c:	d3f9      	bcc.n	8001602 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800160e:	4a0b      	ldr	r2, [pc, #44]	; (800163c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001610:	4c0b      	ldr	r4, [pc, #44]	; (8001640 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001614:	e001      	b.n	800161a <LoopFillZerobss>

08001616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001618:	3204      	adds	r2, #4

0800161a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800161a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800161c:	d3fb      	bcc.n	8001616 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800161e:	f7ff ff7f 	bl	8001520 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001622:	f001 faff 	bl	8002c24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001626:	f7ff fcf5 	bl	8001014 <main>
  bx  lr    
 800162a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800162c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001634:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001638:	08002cb4 	.word	0x08002cb4
  ldr r2, =_sbss
 800163c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001640:	20000094 	.word	0x20000094

08001644 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001644:	e7fe      	b.n	8001644 <ADC_IRQHandler>
	...

08001648 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800164c:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <HAL_Init+0x40>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a0d      	ldr	r2, [pc, #52]	; (8001688 <HAL_Init+0x40>)
 8001652:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001656:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001658:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <HAL_Init+0x40>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <HAL_Init+0x40>)
 800165e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001662:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001664:	4b08      	ldr	r3, [pc, #32]	; (8001688 <HAL_Init+0x40>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a07      	ldr	r2, [pc, #28]	; (8001688 <HAL_Init+0x40>)
 800166a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800166e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001670:	2003      	movs	r0, #3
 8001672:	f000 f92b 	bl	80018cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001676:	200f      	movs	r0, #15
 8001678:	f000 f808 	bl	800168c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800167c:	f7ff feda 	bl	8001434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40023c00 	.word	0x40023c00

0800168c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <HAL_InitTick+0x54>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <HAL_InitTick+0x58>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	4619      	mov	r1, r3
 800169e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 f943 	bl	8001936 <HAL_SYSTICK_Config>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e00e      	b.n	80016d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b0f      	cmp	r3, #15
 80016be:	d80a      	bhi.n	80016d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c0:	2200      	movs	r2, #0
 80016c2:	6879      	ldr	r1, [r7, #4]
 80016c4:	f04f 30ff 	mov.w	r0, #4294967295
 80016c8:	f000 f90b 	bl	80018e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016cc:	4a06      	ldr	r2, [pc, #24]	; (80016e8 <HAL_InitTick+0x5c>)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
 80016d4:	e000      	b.n	80016d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000000 	.word	0x20000000
 80016e4:	20000008 	.word	0x20000008
 80016e8:	20000004 	.word	0x20000004

080016ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_IncTick+0x20>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_IncTick+0x24>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4413      	add	r3, r2
 80016fc:	4a04      	ldr	r2, [pc, #16]	; (8001710 <HAL_IncTick+0x24>)
 80016fe:	6013      	str	r3, [r2, #0]
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	20000008 	.word	0x20000008
 8001710:	20000090 	.word	0x20000090

08001714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  return uwTick;
 8001718:	4b03      	ldr	r3, [pc, #12]	; (8001728 <HAL_GetTick+0x14>)
 800171a:	681b      	ldr	r3, [r3, #0]
}
 800171c:	4618      	mov	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	20000090 	.word	0x20000090

0800172c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800173c:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <__NVIC_SetPriorityGrouping+0x44>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001742:	68ba      	ldr	r2, [r7, #8]
 8001744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001748:	4013      	ands	r3, r2
 800174a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001754:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800175c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800175e:	4a04      	ldr	r2, [pc, #16]	; (8001770 <__NVIC_SetPriorityGrouping+0x44>)
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	60d3      	str	r3, [r2, #12]
}
 8001764:	bf00      	nop
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001778:	4b04      	ldr	r3, [pc, #16]	; (800178c <__NVIC_GetPriorityGrouping+0x18>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	0a1b      	lsrs	r3, r3, #8
 800177e:	f003 0307 	and.w	r3, r3, #7
}
 8001782:	4618      	mov	r0, r3
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	db0b      	blt.n	80017ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	f003 021f 	and.w	r2, r3, #31
 80017a8:	4907      	ldr	r1, [pc, #28]	; (80017c8 <__NVIC_EnableIRQ+0x38>)
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	095b      	lsrs	r3, r3, #5
 80017b0:	2001      	movs	r0, #1
 80017b2:	fa00 f202 	lsl.w	r2, r0, r2
 80017b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000e100 	.word	0xe000e100

080017cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	6039      	str	r1, [r7, #0]
 80017d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	db0a      	blt.n	80017f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	490c      	ldr	r1, [pc, #48]	; (8001818 <__NVIC_SetPriority+0x4c>)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	0112      	lsls	r2, r2, #4
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	440b      	add	r3, r1
 80017f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017f4:	e00a      	b.n	800180c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	4908      	ldr	r1, [pc, #32]	; (800181c <__NVIC_SetPriority+0x50>)
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	f003 030f 	and.w	r3, r3, #15
 8001802:	3b04      	subs	r3, #4
 8001804:	0112      	lsls	r2, r2, #4
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	440b      	add	r3, r1
 800180a:	761a      	strb	r2, [r3, #24]
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000e100 	.word	0xe000e100
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001820:	b480      	push	{r7}
 8001822:	b089      	sub	sp, #36	; 0x24
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	f1c3 0307 	rsb	r3, r3, #7
 800183a:	2b04      	cmp	r3, #4
 800183c:	bf28      	it	cs
 800183e:	2304      	movcs	r3, #4
 8001840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	3304      	adds	r3, #4
 8001846:	2b06      	cmp	r3, #6
 8001848:	d902      	bls.n	8001850 <NVIC_EncodePriority+0x30>
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	3b03      	subs	r3, #3
 800184e:	e000      	b.n	8001852 <NVIC_EncodePriority+0x32>
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001854:	f04f 32ff 	mov.w	r2, #4294967295
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43da      	mvns	r2, r3
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	401a      	ands	r2, r3
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001868:	f04f 31ff 	mov.w	r1, #4294967295
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	fa01 f303 	lsl.w	r3, r1, r3
 8001872:	43d9      	mvns	r1, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001878:	4313      	orrs	r3, r2
         );
}
 800187a:	4618      	mov	r0, r3
 800187c:	3724      	adds	r7, #36	; 0x24
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
	...

08001888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3b01      	subs	r3, #1
 8001894:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001898:	d301      	bcc.n	800189e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800189a:	2301      	movs	r3, #1
 800189c:	e00f      	b.n	80018be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800189e:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <SysTick_Config+0x40>)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018a6:	210f      	movs	r1, #15
 80018a8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ac:	f7ff ff8e 	bl	80017cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <SysTick_Config+0x40>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018b6:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <SysTick_Config+0x40>)
 80018b8:	2207      	movs	r2, #7
 80018ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	e000e010 	.word	0xe000e010

080018cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff ff29 	bl	800172c <__NVIC_SetPriorityGrouping>
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b086      	sub	sp, #24
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	4603      	mov	r3, r0
 80018ea:	60b9      	str	r1, [r7, #8]
 80018ec:	607a      	str	r2, [r7, #4]
 80018ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018f4:	f7ff ff3e 	bl	8001774 <__NVIC_GetPriorityGrouping>
 80018f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	68b9      	ldr	r1, [r7, #8]
 80018fe:	6978      	ldr	r0, [r7, #20]
 8001900:	f7ff ff8e 	bl	8001820 <NVIC_EncodePriority>
 8001904:	4602      	mov	r2, r0
 8001906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800190a:	4611      	mov	r1, r2
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff ff5d 	bl	80017cc <__NVIC_SetPriority>
}
 8001912:	bf00      	nop
 8001914:	3718      	adds	r7, #24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b082      	sub	sp, #8
 800191e:	af00      	add	r7, sp, #0
 8001920:	4603      	mov	r3, r0
 8001922:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ff31 	bl	8001790 <__NVIC_EnableIRQ>
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff ffa2 	bl	8001888 <SysTick_Config>
 8001944:	4603      	mov	r3, r0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001950:	b480      	push	{r7}
 8001952:	b089      	sub	sp, #36	; 0x24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001962:	2300      	movs	r3, #0
 8001964:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
 800196a:	e16b      	b.n	8001c44 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800196c:	2201      	movs	r2, #1
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	4013      	ands	r3, r2
 800197e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	429a      	cmp	r2, r3
 8001986:	f040 815a 	bne.w	8001c3e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	2b01      	cmp	r3, #1
 8001994:	d005      	beq.n	80019a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d130      	bne.n	8001a04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	2203      	movs	r2, #3
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4013      	ands	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	68da      	ldr	r2, [r3, #12]
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019d8:	2201      	movs	r2, #1
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	091b      	lsrs	r3, r3, #4
 80019ee:	f003 0201 	and.w	r2, r3, #1
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 0303 	and.w	r3, r3, #3
 8001a0c:	2b03      	cmp	r3, #3
 8001a0e:	d017      	beq.n	8001a40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	2203      	movs	r2, #3
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d123      	bne.n	8001a94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	08da      	lsrs	r2, r3, #3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3208      	adds	r2, #8
 8001a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	220f      	movs	r2, #15
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	691a      	ldr	r2, [r3, #16]
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	08da      	lsrs	r2, r3, #3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3208      	adds	r2, #8
 8001a8e:	69b9      	ldr	r1, [r7, #24]
 8001a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 0203 	and.w	r2, r3, #3
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f000 80b4 	beq.w	8001c3e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	4b60      	ldr	r3, [pc, #384]	; (8001c5c <HAL_GPIO_Init+0x30c>)
 8001adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ade:	4a5f      	ldr	r2, [pc, #380]	; (8001c5c <HAL_GPIO_Init+0x30c>)
 8001ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ae6:	4b5d      	ldr	r3, [pc, #372]	; (8001c5c <HAL_GPIO_Init+0x30c>)
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001af2:	4a5b      	ldr	r2, [pc, #364]	; (8001c60 <HAL_GPIO_Init+0x310>)
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	089b      	lsrs	r3, r3, #2
 8001af8:	3302      	adds	r3, #2
 8001afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	220f      	movs	r2, #15
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a52      	ldr	r2, [pc, #328]	; (8001c64 <HAL_GPIO_Init+0x314>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d02b      	beq.n	8001b76 <HAL_GPIO_Init+0x226>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a51      	ldr	r2, [pc, #324]	; (8001c68 <HAL_GPIO_Init+0x318>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d025      	beq.n	8001b72 <HAL_GPIO_Init+0x222>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a50      	ldr	r2, [pc, #320]	; (8001c6c <HAL_GPIO_Init+0x31c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d01f      	beq.n	8001b6e <HAL_GPIO_Init+0x21e>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a4f      	ldr	r2, [pc, #316]	; (8001c70 <HAL_GPIO_Init+0x320>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d019      	beq.n	8001b6a <HAL_GPIO_Init+0x21a>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a4e      	ldr	r2, [pc, #312]	; (8001c74 <HAL_GPIO_Init+0x324>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d013      	beq.n	8001b66 <HAL_GPIO_Init+0x216>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a4d      	ldr	r2, [pc, #308]	; (8001c78 <HAL_GPIO_Init+0x328>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d00d      	beq.n	8001b62 <HAL_GPIO_Init+0x212>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a4c      	ldr	r2, [pc, #304]	; (8001c7c <HAL_GPIO_Init+0x32c>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d007      	beq.n	8001b5e <HAL_GPIO_Init+0x20e>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a4b      	ldr	r2, [pc, #300]	; (8001c80 <HAL_GPIO_Init+0x330>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d101      	bne.n	8001b5a <HAL_GPIO_Init+0x20a>
 8001b56:	2307      	movs	r3, #7
 8001b58:	e00e      	b.n	8001b78 <HAL_GPIO_Init+0x228>
 8001b5a:	2308      	movs	r3, #8
 8001b5c:	e00c      	b.n	8001b78 <HAL_GPIO_Init+0x228>
 8001b5e:	2306      	movs	r3, #6
 8001b60:	e00a      	b.n	8001b78 <HAL_GPIO_Init+0x228>
 8001b62:	2305      	movs	r3, #5
 8001b64:	e008      	b.n	8001b78 <HAL_GPIO_Init+0x228>
 8001b66:	2304      	movs	r3, #4
 8001b68:	e006      	b.n	8001b78 <HAL_GPIO_Init+0x228>
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e004      	b.n	8001b78 <HAL_GPIO_Init+0x228>
 8001b6e:	2302      	movs	r3, #2
 8001b70:	e002      	b.n	8001b78 <HAL_GPIO_Init+0x228>
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <HAL_GPIO_Init+0x228>
 8001b76:	2300      	movs	r3, #0
 8001b78:	69fa      	ldr	r2, [r7, #28]
 8001b7a:	f002 0203 	and.w	r2, r2, #3
 8001b7e:	0092      	lsls	r2, r2, #2
 8001b80:	4093      	lsls	r3, r2
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b88:	4935      	ldr	r1, [pc, #212]	; (8001c60 <HAL_GPIO_Init+0x310>)
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	089b      	lsrs	r3, r3, #2
 8001b8e:	3302      	adds	r3, #2
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b96:	4b3b      	ldr	r3, [pc, #236]	; (8001c84 <HAL_GPIO_Init+0x334>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bba:	4a32      	ldr	r2, [pc, #200]	; (8001c84 <HAL_GPIO_Init+0x334>)
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bc0:	4b30      	ldr	r3, [pc, #192]	; (8001c84 <HAL_GPIO_Init+0x334>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001be4:	4a27      	ldr	r2, [pc, #156]	; (8001c84 <HAL_GPIO_Init+0x334>)
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bea:	4b26      	ldr	r3, [pc, #152]	; (8001c84 <HAL_GPIO_Init+0x334>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c0e:	4a1d      	ldr	r2, [pc, #116]	; (8001c84 <HAL_GPIO_Init+0x334>)
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c14:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <HAL_GPIO_Init+0x334>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c38:	4a12      	ldr	r2, [pc, #72]	; (8001c84 <HAL_GPIO_Init+0x334>)
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3301      	adds	r3, #1
 8001c42:	61fb      	str	r3, [r7, #28]
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	2b0f      	cmp	r3, #15
 8001c48:	f67f ae90 	bls.w	800196c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c4c:	bf00      	nop
 8001c4e:	bf00      	nop
 8001c50:	3724      	adds	r7, #36	; 0x24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40013800 	.word	0x40013800
 8001c64:	40020000 	.word	0x40020000
 8001c68:	40020400 	.word	0x40020400
 8001c6c:	40020800 	.word	0x40020800
 8001c70:	40020c00 	.word	0x40020c00
 8001c74:	40021000 	.word	0x40021000
 8001c78:	40021400 	.word	0x40021400
 8001c7c:	40021800 	.word	0x40021800
 8001c80:	40021c00 	.word	0x40021c00
 8001c84:	40013c00 	.word	0x40013c00

08001c88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691a      	ldr	r2, [r3, #16]
 8001c98:	887b      	ldrh	r3, [r7, #2]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d002      	beq.n	8001ca6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	73fb      	strb	r3, [r7, #15]
 8001ca4:	e001      	b.n	8001caa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	807b      	strh	r3, [r7, #2]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cc8:	787b      	ldrb	r3, [r7, #1]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cce:	887a      	ldrh	r2, [r7, #2]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cd4:	e003      	b.n	8001cde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cd6:	887b      	ldrh	r3, [r7, #2]
 8001cd8:	041a      	lsls	r2, r3, #16
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	619a      	str	r2, [r3, #24]
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
	...

08001cec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001cf6:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cf8:	695a      	ldr	r2, [r3, #20]
 8001cfa:	88fb      	ldrh	r3, [r7, #6]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d006      	beq.n	8001d10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d02:	4a05      	ldr	r2, [pc, #20]	; (8001d18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d04:	88fb      	ldrh	r3, [r7, #6]
 8001d06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d08:	88fb      	ldrh	r3, [r7, #6]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff fada 	bl	80012c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d10:	bf00      	nop
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40013c00 	.word	0x40013c00

08001d1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e267      	b.n	80021fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d075      	beq.n	8001e26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d3a:	4b88      	ldr	r3, [pc, #544]	; (8001f5c <HAL_RCC_OscConfig+0x240>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 030c 	and.w	r3, r3, #12
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	d00c      	beq.n	8001d60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d46:	4b85      	ldr	r3, [pc, #532]	; (8001f5c <HAL_RCC_OscConfig+0x240>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d4e:	2b08      	cmp	r3, #8
 8001d50:	d112      	bne.n	8001d78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d52:	4b82      	ldr	r3, [pc, #520]	; (8001f5c <HAL_RCC_OscConfig+0x240>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d5e:	d10b      	bne.n	8001d78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d60:	4b7e      	ldr	r3, [pc, #504]	; (8001f5c <HAL_RCC_OscConfig+0x240>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d05b      	beq.n	8001e24 <HAL_RCC_OscConfig+0x108>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d157      	bne.n	8001e24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e242      	b.n	80021fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d80:	d106      	bne.n	8001d90 <HAL_RCC_OscConfig+0x74>
 8001d82:	4b76      	ldr	r3, [pc, #472]	; (8001f5c <HAL_RCC_OscConfig+0x240>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a75      	ldr	r2, [pc, #468]	; (8001f5c <HAL_RCC_OscConfig+0x240>)
 8001d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	e01d      	b.n	8001dcc <HAL_RCC_OscConfig+0xb0>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d98:	d10c      	bne.n	8001db4 <HAL_RCC_OscConfig+0x98>
 8001d9a:	4b70      	ldr	r3, [pc, #448]	; (8001f5c <HAL_RCC_OscConfig+0x240>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a6f      	ldr	r2, [pc, #444]	; (8001f5c <HAL_RCC_OscConfig+0x240>)
 8001da0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	4b6d      	ldr	r3, [pc, #436]	; (8001f5c <HAL_RCC_OscConfig+0x240>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a6c      	ldr	r2, [pc, #432]	; (8001f5c <HAL_RCC_OscConfig+0x240>)
 8001dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	e00b      	b.n	8001dcc <HAL_RCC_OscConfig+0xb0>
 8001db4:	4b69      	ldr	r3, [pc, #420]	; (8001f5c <HAL_RCC_OscConfig+0x240>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a68      	ldr	r2, [pc, #416]	; (8001f5c <HAL_RCC_OscConfig+0x240>)
 8001dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dbe:	6013      	str	r3, [r2, #0]
 8001dc0:	4b66      	ldr	r3, [pc, #408]	; (8001f5c <HAL_RCC_OscConfig+0x240>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a65      	ldr	r2, [pc, #404]	; (8001f5c <HAL_RCC_OscConfig+0x240>)
 8001dc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d013      	beq.n	8001dfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd4:	f7ff fc9e 	bl	8001714 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ddc:	f7ff fc9a 	bl	8001714 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b64      	cmp	r3, #100	; 0x64
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e207      	b.n	80021fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dee:	4b5b      	ldr	r3, [pc, #364]	; (8001f5c <HAL_RCC_OscConfig+0x240>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f0      	beq.n	8001ddc <HAL_RCC_OscConfig+0xc0>
 8001dfa:	e014      	b.n	8001e26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfc:	f7ff fc8a 	bl	8001714 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e04:	f7ff fc86 	bl	8001714 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b64      	cmp	r3, #100	; 0x64
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e1f3      	b.n	80021fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e16:	4b51      	ldr	r3, [pc, #324]	; (8001f5c <HAL_RCC_OscConfig+0x240>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f0      	bne.n	8001e04 <HAL_RCC_OscConfig+0xe8>
 8001e22:	e000      	b.n	8001e26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d063      	beq.n	8001efa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e32:	4b4a      	ldr	r3, [pc, #296]	; (8001f5c <HAL_RCC_OscConfig+0x240>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 030c 	and.w	r3, r3, #12
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00b      	beq.n	8001e56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e3e:	4b47      	ldr	r3, [pc, #284]	; (8001f5c <HAL_RCC_OscConfig+0x240>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e46:	2b08      	cmp	r3, #8
 8001e48:	d11c      	bne.n	8001e84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e4a:	4b44      	ldr	r3, [pc, #272]	; (8001f5c <HAL_RCC_OscConfig+0x240>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d116      	bne.n	8001e84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e56:	4b41      	ldr	r3, [pc, #260]	; (8001f5c <HAL_RCC_OscConfig+0x240>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d005      	beq.n	8001e6e <HAL_RCC_OscConfig+0x152>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d001      	beq.n	8001e6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e1c7      	b.n	80021fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6e:	4b3b      	ldr	r3, [pc, #236]	; (8001f5c <HAL_RCC_OscConfig+0x240>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	4937      	ldr	r1, [pc, #220]	; (8001f5c <HAL_RCC_OscConfig+0x240>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e82:	e03a      	b.n	8001efa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d020      	beq.n	8001ece <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e8c:	4b34      	ldr	r3, [pc, #208]	; (8001f60 <HAL_RCC_OscConfig+0x244>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e92:	f7ff fc3f 	bl	8001714 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e9a:	f7ff fc3b 	bl	8001714 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e1a8      	b.n	80021fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eac:	4b2b      	ldr	r3, [pc, #172]	; (8001f5c <HAL_RCC_OscConfig+0x240>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0f0      	beq.n	8001e9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb8:	4b28      	ldr	r3, [pc, #160]	; (8001f5c <HAL_RCC_OscConfig+0x240>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	4925      	ldr	r1, [pc, #148]	; (8001f5c <HAL_RCC_OscConfig+0x240>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	600b      	str	r3, [r1, #0]
 8001ecc:	e015      	b.n	8001efa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ece:	4b24      	ldr	r3, [pc, #144]	; (8001f60 <HAL_RCC_OscConfig+0x244>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed4:	f7ff fc1e 	bl	8001714 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001edc:	f7ff fc1a 	bl	8001714 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e187      	b.n	80021fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eee:	4b1b      	ldr	r3, [pc, #108]	; (8001f5c <HAL_RCC_OscConfig+0x240>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f0      	bne.n	8001edc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d036      	beq.n	8001f74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d016      	beq.n	8001f3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f0e:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <HAL_RCC_OscConfig+0x248>)
 8001f10:	2201      	movs	r2, #1
 8001f12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f14:	f7ff fbfe 	bl	8001714 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f1c:	f7ff fbfa 	bl	8001714 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e167      	b.n	80021fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <HAL_RCC_OscConfig+0x240>)
 8001f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0f0      	beq.n	8001f1c <HAL_RCC_OscConfig+0x200>
 8001f3a:	e01b      	b.n	8001f74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f3c:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <HAL_RCC_OscConfig+0x248>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f42:	f7ff fbe7 	bl	8001714 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f48:	e00e      	b.n	8001f68 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f4a:	f7ff fbe3 	bl	8001714 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d907      	bls.n	8001f68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e150      	b.n	80021fe <HAL_RCC_OscConfig+0x4e2>
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	42470000 	.word	0x42470000
 8001f64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f68:	4b88      	ldr	r3, [pc, #544]	; (800218c <HAL_RCC_OscConfig+0x470>)
 8001f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1ea      	bne.n	8001f4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 8097 	beq.w	80020b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f82:	2300      	movs	r3, #0
 8001f84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f86:	4b81      	ldr	r3, [pc, #516]	; (800218c <HAL_RCC_OscConfig+0x470>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d10f      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	4b7d      	ldr	r3, [pc, #500]	; (800218c <HAL_RCC_OscConfig+0x470>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	4a7c      	ldr	r2, [pc, #496]	; (800218c <HAL_RCC_OscConfig+0x470>)
 8001f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa2:	4b7a      	ldr	r3, [pc, #488]	; (800218c <HAL_RCC_OscConfig+0x470>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb2:	4b77      	ldr	r3, [pc, #476]	; (8002190 <HAL_RCC_OscConfig+0x474>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d118      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fbe:	4b74      	ldr	r3, [pc, #464]	; (8002190 <HAL_RCC_OscConfig+0x474>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a73      	ldr	r2, [pc, #460]	; (8002190 <HAL_RCC_OscConfig+0x474>)
 8001fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fca:	f7ff fba3 	bl	8001714 <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd2:	f7ff fb9f 	bl	8001714 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e10c      	b.n	80021fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe4:	4b6a      	ldr	r3, [pc, #424]	; (8002190 <HAL_RCC_OscConfig+0x474>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0f0      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d106      	bne.n	8002006 <HAL_RCC_OscConfig+0x2ea>
 8001ff8:	4b64      	ldr	r3, [pc, #400]	; (800218c <HAL_RCC_OscConfig+0x470>)
 8001ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffc:	4a63      	ldr	r2, [pc, #396]	; (800218c <HAL_RCC_OscConfig+0x470>)
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	6713      	str	r3, [r2, #112]	; 0x70
 8002004:	e01c      	b.n	8002040 <HAL_RCC_OscConfig+0x324>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2b05      	cmp	r3, #5
 800200c:	d10c      	bne.n	8002028 <HAL_RCC_OscConfig+0x30c>
 800200e:	4b5f      	ldr	r3, [pc, #380]	; (800218c <HAL_RCC_OscConfig+0x470>)
 8002010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002012:	4a5e      	ldr	r2, [pc, #376]	; (800218c <HAL_RCC_OscConfig+0x470>)
 8002014:	f043 0304 	orr.w	r3, r3, #4
 8002018:	6713      	str	r3, [r2, #112]	; 0x70
 800201a:	4b5c      	ldr	r3, [pc, #368]	; (800218c <HAL_RCC_OscConfig+0x470>)
 800201c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201e:	4a5b      	ldr	r2, [pc, #364]	; (800218c <HAL_RCC_OscConfig+0x470>)
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	6713      	str	r3, [r2, #112]	; 0x70
 8002026:	e00b      	b.n	8002040 <HAL_RCC_OscConfig+0x324>
 8002028:	4b58      	ldr	r3, [pc, #352]	; (800218c <HAL_RCC_OscConfig+0x470>)
 800202a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202c:	4a57      	ldr	r2, [pc, #348]	; (800218c <HAL_RCC_OscConfig+0x470>)
 800202e:	f023 0301 	bic.w	r3, r3, #1
 8002032:	6713      	str	r3, [r2, #112]	; 0x70
 8002034:	4b55      	ldr	r3, [pc, #340]	; (800218c <HAL_RCC_OscConfig+0x470>)
 8002036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002038:	4a54      	ldr	r2, [pc, #336]	; (800218c <HAL_RCC_OscConfig+0x470>)
 800203a:	f023 0304 	bic.w	r3, r3, #4
 800203e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d015      	beq.n	8002074 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002048:	f7ff fb64 	bl	8001714 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800204e:	e00a      	b.n	8002066 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002050:	f7ff fb60 	bl	8001714 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	f241 3288 	movw	r2, #5000	; 0x1388
 800205e:	4293      	cmp	r3, r2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e0cb      	b.n	80021fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002066:	4b49      	ldr	r3, [pc, #292]	; (800218c <HAL_RCC_OscConfig+0x470>)
 8002068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0ee      	beq.n	8002050 <HAL_RCC_OscConfig+0x334>
 8002072:	e014      	b.n	800209e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002074:	f7ff fb4e 	bl	8001714 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800207a:	e00a      	b.n	8002092 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800207c:	f7ff fb4a 	bl	8001714 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	f241 3288 	movw	r2, #5000	; 0x1388
 800208a:	4293      	cmp	r3, r2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e0b5      	b.n	80021fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002092:	4b3e      	ldr	r3, [pc, #248]	; (800218c <HAL_RCC_OscConfig+0x470>)
 8002094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1ee      	bne.n	800207c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800209e:	7dfb      	ldrb	r3, [r7, #23]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d105      	bne.n	80020b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020a4:	4b39      	ldr	r3, [pc, #228]	; (800218c <HAL_RCC_OscConfig+0x470>)
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	4a38      	ldr	r2, [pc, #224]	; (800218c <HAL_RCC_OscConfig+0x470>)
 80020aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 80a1 	beq.w	80021fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020ba:	4b34      	ldr	r3, [pc, #208]	; (800218c <HAL_RCC_OscConfig+0x470>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 030c 	and.w	r3, r3, #12
 80020c2:	2b08      	cmp	r3, #8
 80020c4:	d05c      	beq.n	8002180 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d141      	bne.n	8002152 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ce:	4b31      	ldr	r3, [pc, #196]	; (8002194 <HAL_RCC_OscConfig+0x478>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d4:	f7ff fb1e 	bl	8001714 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020dc:	f7ff fb1a 	bl	8001714 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e087      	b.n	80021fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ee:	4b27      	ldr	r3, [pc, #156]	; (800218c <HAL_RCC_OscConfig+0x470>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f0      	bne.n	80020dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69da      	ldr	r2, [r3, #28]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	019b      	lsls	r3, r3, #6
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002110:	085b      	lsrs	r3, r3, #1
 8002112:	3b01      	subs	r3, #1
 8002114:	041b      	lsls	r3, r3, #16
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211c:	061b      	lsls	r3, r3, #24
 800211e:	491b      	ldr	r1, [pc, #108]	; (800218c <HAL_RCC_OscConfig+0x470>)
 8002120:	4313      	orrs	r3, r2
 8002122:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002124:	4b1b      	ldr	r3, [pc, #108]	; (8002194 <HAL_RCC_OscConfig+0x478>)
 8002126:	2201      	movs	r2, #1
 8002128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212a:	f7ff faf3 	bl	8001714 <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002132:	f7ff faef 	bl	8001714 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e05c      	b.n	80021fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002144:	4b11      	ldr	r3, [pc, #68]	; (800218c <HAL_RCC_OscConfig+0x470>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0f0      	beq.n	8002132 <HAL_RCC_OscConfig+0x416>
 8002150:	e054      	b.n	80021fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002152:	4b10      	ldr	r3, [pc, #64]	; (8002194 <HAL_RCC_OscConfig+0x478>)
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002158:	f7ff fadc 	bl	8001714 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002160:	f7ff fad8 	bl	8001714 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e045      	b.n	80021fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002172:	4b06      	ldr	r3, [pc, #24]	; (800218c <HAL_RCC_OscConfig+0x470>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1f0      	bne.n	8002160 <HAL_RCC_OscConfig+0x444>
 800217e:	e03d      	b.n	80021fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d107      	bne.n	8002198 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e038      	b.n	80021fe <HAL_RCC_OscConfig+0x4e2>
 800218c:	40023800 	.word	0x40023800
 8002190:	40007000 	.word	0x40007000
 8002194:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002198:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <HAL_RCC_OscConfig+0x4ec>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d028      	beq.n	80021f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d121      	bne.n	80021f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021be:	429a      	cmp	r2, r3
 80021c0:	d11a      	bne.n	80021f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021c8:	4013      	ands	r3, r2
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d111      	bne.n	80021f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021de:	085b      	lsrs	r3, r3, #1
 80021e0:	3b01      	subs	r3, #1
 80021e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d107      	bne.n	80021f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d001      	beq.n	80021fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e000      	b.n	80021fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40023800 	.word	0x40023800

0800220c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e0cc      	b.n	80023ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002220:	4b68      	ldr	r3, [pc, #416]	; (80023c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	429a      	cmp	r2, r3
 800222c:	d90c      	bls.n	8002248 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222e:	4b65      	ldr	r3, [pc, #404]	; (80023c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002236:	4b63      	ldr	r3, [pc, #396]	; (80023c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	429a      	cmp	r2, r3
 8002242:	d001      	beq.n	8002248 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e0b8      	b.n	80023ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d020      	beq.n	8002296 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	d005      	beq.n	800226c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002260:	4b59      	ldr	r3, [pc, #356]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	4a58      	ldr	r2, [pc, #352]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800226a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0308 	and.w	r3, r3, #8
 8002274:	2b00      	cmp	r3, #0
 8002276:	d005      	beq.n	8002284 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002278:	4b53      	ldr	r3, [pc, #332]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	4a52      	ldr	r2, [pc, #328]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 800227e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002282:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002284:	4b50      	ldr	r3, [pc, #320]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	494d      	ldr	r1, [pc, #308]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002292:	4313      	orrs	r3, r2
 8002294:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d044      	beq.n	800232c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d107      	bne.n	80022ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022aa:	4b47      	ldr	r3, [pc, #284]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d119      	bne.n	80022ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e07f      	b.n	80023ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d003      	beq.n	80022ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022c6:	2b03      	cmp	r3, #3
 80022c8:	d107      	bne.n	80022da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ca:	4b3f      	ldr	r3, [pc, #252]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d109      	bne.n	80022ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e06f      	b.n	80023ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022da:	4b3b      	ldr	r3, [pc, #236]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e067      	b.n	80023ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ea:	4b37      	ldr	r3, [pc, #220]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f023 0203 	bic.w	r2, r3, #3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	4934      	ldr	r1, [pc, #208]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022fc:	f7ff fa0a 	bl	8001714 <HAL_GetTick>
 8002300:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002302:	e00a      	b.n	800231a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002304:	f7ff fa06 	bl	8001714 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002312:	4293      	cmp	r3, r2
 8002314:	d901      	bls.n	800231a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e04f      	b.n	80023ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231a:	4b2b      	ldr	r3, [pc, #172]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 020c 	and.w	r2, r3, #12
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	429a      	cmp	r2, r3
 800232a:	d1eb      	bne.n	8002304 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800232c:	4b25      	ldr	r3, [pc, #148]	; (80023c4 <HAL_RCC_ClockConfig+0x1b8>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d20c      	bcs.n	8002354 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233a:	4b22      	ldr	r3, [pc, #136]	; (80023c4 <HAL_RCC_ClockConfig+0x1b8>)
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002342:	4b20      	ldr	r3, [pc, #128]	; (80023c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	429a      	cmp	r2, r3
 800234e:	d001      	beq.n	8002354 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e032      	b.n	80023ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	2b00      	cmp	r3, #0
 800235e:	d008      	beq.n	8002372 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002360:	4b19      	ldr	r3, [pc, #100]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	4916      	ldr	r1, [pc, #88]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	4313      	orrs	r3, r2
 8002370:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	2b00      	cmp	r3, #0
 800237c:	d009      	beq.n	8002392 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800237e:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	490e      	ldr	r1, [pc, #56]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 800238e:	4313      	orrs	r3, r2
 8002390:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002392:	f000 f821 	bl	80023d8 <HAL_RCC_GetSysClockFreq>
 8002396:	4602      	mov	r2, r0
 8002398:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	091b      	lsrs	r3, r3, #4
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	490a      	ldr	r1, [pc, #40]	; (80023cc <HAL_RCC_ClockConfig+0x1c0>)
 80023a4:	5ccb      	ldrb	r3, [r1, r3]
 80023a6:	fa22 f303 	lsr.w	r3, r2, r3
 80023aa:	4a09      	ldr	r2, [pc, #36]	; (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 80023ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023ae:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <HAL_RCC_ClockConfig+0x1c8>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff f96a 	bl	800168c <HAL_InitTick>

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40023c00 	.word	0x40023c00
 80023c8:	40023800 	.word	0x40023800
 80023cc:	08002c94 	.word	0x08002c94
 80023d0:	20000000 	.word	0x20000000
 80023d4:	20000004 	.word	0x20000004

080023d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023dc:	b094      	sub	sp, #80	; 0x50
 80023de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023e0:	2300      	movs	r3, #0
 80023e2:	647b      	str	r3, [r7, #68]	; 0x44
 80023e4:	2300      	movs	r3, #0
 80023e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023e8:	2300      	movs	r3, #0
 80023ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023f0:	4b79      	ldr	r3, [pc, #484]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 030c 	and.w	r3, r3, #12
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d00d      	beq.n	8002418 <HAL_RCC_GetSysClockFreq+0x40>
 80023fc:	2b08      	cmp	r3, #8
 80023fe:	f200 80e1 	bhi.w	80025c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002402:	2b00      	cmp	r3, #0
 8002404:	d002      	beq.n	800240c <HAL_RCC_GetSysClockFreq+0x34>
 8002406:	2b04      	cmp	r3, #4
 8002408:	d003      	beq.n	8002412 <HAL_RCC_GetSysClockFreq+0x3a>
 800240a:	e0db      	b.n	80025c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800240c:	4b73      	ldr	r3, [pc, #460]	; (80025dc <HAL_RCC_GetSysClockFreq+0x204>)
 800240e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002410:	e0db      	b.n	80025ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002412:	4b73      	ldr	r3, [pc, #460]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002414:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002416:	e0d8      	b.n	80025ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002418:	4b6f      	ldr	r3, [pc, #444]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002420:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002422:	4b6d      	ldr	r3, [pc, #436]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d063      	beq.n	80024f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800242e:	4b6a      	ldr	r3, [pc, #424]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	099b      	lsrs	r3, r3, #6
 8002434:	2200      	movs	r2, #0
 8002436:	63bb      	str	r3, [r7, #56]	; 0x38
 8002438:	63fa      	str	r2, [r7, #60]	; 0x3c
 800243a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800243c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002440:	633b      	str	r3, [r7, #48]	; 0x30
 8002442:	2300      	movs	r3, #0
 8002444:	637b      	str	r3, [r7, #52]	; 0x34
 8002446:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800244a:	4622      	mov	r2, r4
 800244c:	462b      	mov	r3, r5
 800244e:	f04f 0000 	mov.w	r0, #0
 8002452:	f04f 0100 	mov.w	r1, #0
 8002456:	0159      	lsls	r1, r3, #5
 8002458:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800245c:	0150      	lsls	r0, r2, #5
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	4621      	mov	r1, r4
 8002464:	1a51      	subs	r1, r2, r1
 8002466:	6139      	str	r1, [r7, #16]
 8002468:	4629      	mov	r1, r5
 800246a:	eb63 0301 	sbc.w	r3, r3, r1
 800246e:	617b      	str	r3, [r7, #20]
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	f04f 0300 	mov.w	r3, #0
 8002478:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800247c:	4659      	mov	r1, fp
 800247e:	018b      	lsls	r3, r1, #6
 8002480:	4651      	mov	r1, sl
 8002482:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002486:	4651      	mov	r1, sl
 8002488:	018a      	lsls	r2, r1, #6
 800248a:	4651      	mov	r1, sl
 800248c:	ebb2 0801 	subs.w	r8, r2, r1
 8002490:	4659      	mov	r1, fp
 8002492:	eb63 0901 	sbc.w	r9, r3, r1
 8002496:	f04f 0200 	mov.w	r2, #0
 800249a:	f04f 0300 	mov.w	r3, #0
 800249e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024aa:	4690      	mov	r8, r2
 80024ac:	4699      	mov	r9, r3
 80024ae:	4623      	mov	r3, r4
 80024b0:	eb18 0303 	adds.w	r3, r8, r3
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	462b      	mov	r3, r5
 80024b8:	eb49 0303 	adc.w	r3, r9, r3
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	f04f 0200 	mov.w	r2, #0
 80024c2:	f04f 0300 	mov.w	r3, #0
 80024c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024ca:	4629      	mov	r1, r5
 80024cc:	024b      	lsls	r3, r1, #9
 80024ce:	4621      	mov	r1, r4
 80024d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024d4:	4621      	mov	r1, r4
 80024d6:	024a      	lsls	r2, r1, #9
 80024d8:	4610      	mov	r0, r2
 80024da:	4619      	mov	r1, r3
 80024dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024de:	2200      	movs	r2, #0
 80024e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80024e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024e8:	f7fd fe6e 	bl	80001c8 <__aeabi_uldivmod>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4613      	mov	r3, r2
 80024f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024f4:	e058      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024f6:	4b38      	ldr	r3, [pc, #224]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	099b      	lsrs	r3, r3, #6
 80024fc:	2200      	movs	r2, #0
 80024fe:	4618      	mov	r0, r3
 8002500:	4611      	mov	r1, r2
 8002502:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002506:	623b      	str	r3, [r7, #32]
 8002508:	2300      	movs	r3, #0
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
 800250c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002510:	4642      	mov	r2, r8
 8002512:	464b      	mov	r3, r9
 8002514:	f04f 0000 	mov.w	r0, #0
 8002518:	f04f 0100 	mov.w	r1, #0
 800251c:	0159      	lsls	r1, r3, #5
 800251e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002522:	0150      	lsls	r0, r2, #5
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	4641      	mov	r1, r8
 800252a:	ebb2 0a01 	subs.w	sl, r2, r1
 800252e:	4649      	mov	r1, r9
 8002530:	eb63 0b01 	sbc.w	fp, r3, r1
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	f04f 0300 	mov.w	r3, #0
 800253c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002540:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002544:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002548:	ebb2 040a 	subs.w	r4, r2, sl
 800254c:	eb63 050b 	sbc.w	r5, r3, fp
 8002550:	f04f 0200 	mov.w	r2, #0
 8002554:	f04f 0300 	mov.w	r3, #0
 8002558:	00eb      	lsls	r3, r5, #3
 800255a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800255e:	00e2      	lsls	r2, r4, #3
 8002560:	4614      	mov	r4, r2
 8002562:	461d      	mov	r5, r3
 8002564:	4643      	mov	r3, r8
 8002566:	18e3      	adds	r3, r4, r3
 8002568:	603b      	str	r3, [r7, #0]
 800256a:	464b      	mov	r3, r9
 800256c:	eb45 0303 	adc.w	r3, r5, r3
 8002570:	607b      	str	r3, [r7, #4]
 8002572:	f04f 0200 	mov.w	r2, #0
 8002576:	f04f 0300 	mov.w	r3, #0
 800257a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800257e:	4629      	mov	r1, r5
 8002580:	028b      	lsls	r3, r1, #10
 8002582:	4621      	mov	r1, r4
 8002584:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002588:	4621      	mov	r1, r4
 800258a:	028a      	lsls	r2, r1, #10
 800258c:	4610      	mov	r0, r2
 800258e:	4619      	mov	r1, r3
 8002590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002592:	2200      	movs	r2, #0
 8002594:	61bb      	str	r3, [r7, #24]
 8002596:	61fa      	str	r2, [r7, #28]
 8002598:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800259c:	f7fd fe14 	bl	80001c8 <__aeabi_uldivmod>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4613      	mov	r3, r2
 80025a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025a8:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	0c1b      	lsrs	r3, r3, #16
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	3301      	adds	r3, #1
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80025b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025c2:	e002      	b.n	80025ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025c4:	4b05      	ldr	r3, [pc, #20]	; (80025dc <HAL_RCC_GetSysClockFreq+0x204>)
 80025c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3750      	adds	r7, #80	; 0x50
 80025d0:	46bd      	mov	sp, r7
 80025d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025d6:	bf00      	nop
 80025d8:	40023800 	.word	0x40023800
 80025dc:	00f42400 	.word	0x00f42400
 80025e0:	007a1200 	.word	0x007a1200

080025e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e041      	b.n	800267a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d106      	bne.n	8002610 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7fe ffd0 	bl	80015b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2202      	movs	r2, #2
 8002614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3304      	adds	r3, #4
 8002620:	4619      	mov	r1, r3
 8002622:	4610      	mov	r0, r2
 8002624:	f000 f9ce 	bl	80029c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b01      	cmp	r3, #1
 8002696:	d001      	beq.n	800269c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e04e      	b.n	800273a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2202      	movs	r2, #2
 80026a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 0201 	orr.w	r2, r2, #1
 80026b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a23      	ldr	r2, [pc, #140]	; (8002748 <HAL_TIM_Base_Start_IT+0xc4>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d022      	beq.n	8002704 <HAL_TIM_Base_Start_IT+0x80>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026c6:	d01d      	beq.n	8002704 <HAL_TIM_Base_Start_IT+0x80>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a1f      	ldr	r2, [pc, #124]	; (800274c <HAL_TIM_Base_Start_IT+0xc8>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d018      	beq.n	8002704 <HAL_TIM_Base_Start_IT+0x80>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a1e      	ldr	r2, [pc, #120]	; (8002750 <HAL_TIM_Base_Start_IT+0xcc>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d013      	beq.n	8002704 <HAL_TIM_Base_Start_IT+0x80>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a1c      	ldr	r2, [pc, #112]	; (8002754 <HAL_TIM_Base_Start_IT+0xd0>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d00e      	beq.n	8002704 <HAL_TIM_Base_Start_IT+0x80>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a1b      	ldr	r2, [pc, #108]	; (8002758 <HAL_TIM_Base_Start_IT+0xd4>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d009      	beq.n	8002704 <HAL_TIM_Base_Start_IT+0x80>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a19      	ldr	r2, [pc, #100]	; (800275c <HAL_TIM_Base_Start_IT+0xd8>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d004      	beq.n	8002704 <HAL_TIM_Base_Start_IT+0x80>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a18      	ldr	r2, [pc, #96]	; (8002760 <HAL_TIM_Base_Start_IT+0xdc>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d111      	bne.n	8002728 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2b06      	cmp	r3, #6
 8002714:	d010      	beq.n	8002738 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f042 0201 	orr.w	r2, r2, #1
 8002724:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002726:	e007      	b.n	8002738 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0201 	orr.w	r2, r2, #1
 8002736:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	40010000 	.word	0x40010000
 800274c:	40000400 	.word	0x40000400
 8002750:	40000800 	.word	0x40000800
 8002754:	40000c00 	.word	0x40000c00
 8002758:	40010400 	.word	0x40010400
 800275c:	40014000 	.word	0x40014000
 8002760:	40001800 	.word	0x40001800

08002764 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b02      	cmp	r3, #2
 8002778:	d122      	bne.n	80027c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b02      	cmp	r3, #2
 8002786:	d11b      	bne.n	80027c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f06f 0202 	mvn.w	r2, #2
 8002790:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	f003 0303 	and.w	r3, r3, #3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f8ee 	bl	8002988 <HAL_TIM_IC_CaptureCallback>
 80027ac:	e005      	b.n	80027ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f8e0 	bl	8002974 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 f8f1 	bl	800299c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d122      	bne.n	8002814 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b04      	cmp	r3, #4
 80027da:	d11b      	bne.n	8002814 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f06f 0204 	mvn.w	r2, #4
 80027e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2202      	movs	r2, #2
 80027ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f8c4 	bl	8002988 <HAL_TIM_IC_CaptureCallback>
 8002800:	e005      	b.n	800280e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f8b6 	bl	8002974 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f8c7 	bl	800299c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	2b08      	cmp	r3, #8
 8002820:	d122      	bne.n	8002868 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f003 0308 	and.w	r3, r3, #8
 800282c:	2b08      	cmp	r3, #8
 800282e:	d11b      	bne.n	8002868 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f06f 0208 	mvn.w	r2, #8
 8002838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2204      	movs	r2, #4
 800283e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f89a 	bl	8002988 <HAL_TIM_IC_CaptureCallback>
 8002854:	e005      	b.n	8002862 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f88c 	bl	8002974 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f89d 	bl	800299c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	f003 0310 	and.w	r3, r3, #16
 8002872:	2b10      	cmp	r3, #16
 8002874:	d122      	bne.n	80028bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f003 0310 	and.w	r3, r3, #16
 8002880:	2b10      	cmp	r3, #16
 8002882:	d11b      	bne.n	80028bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f06f 0210 	mvn.w	r2, #16
 800288c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2208      	movs	r2, #8
 8002892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f870 	bl	8002988 <HAL_TIM_IC_CaptureCallback>
 80028a8:	e005      	b.n	80028b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f862 	bl	8002974 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f873 	bl	800299c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d10e      	bne.n	80028e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d107      	bne.n	80028e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f06f 0201 	mvn.w	r2, #1
 80028e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7fe fc80 	bl	80011e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f2:	2b80      	cmp	r3, #128	; 0x80
 80028f4:	d10e      	bne.n	8002914 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002900:	2b80      	cmp	r3, #128	; 0x80
 8002902:	d107      	bne.n	8002914 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800290c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f97e 	bl	8002c10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291e:	2b40      	cmp	r3, #64	; 0x40
 8002920:	d10e      	bne.n	8002940 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292c:	2b40      	cmp	r3, #64	; 0x40
 800292e:	d107      	bne.n	8002940 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f838 	bl	80029b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	f003 0320 	and.w	r3, r3, #32
 800294a:	2b20      	cmp	r3, #32
 800294c:	d10e      	bne.n	800296c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f003 0320 	and.w	r3, r3, #32
 8002958:	2b20      	cmp	r3, #32
 800295a:	d107      	bne.n	800296c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f06f 0220 	mvn.w	r2, #32
 8002964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f948 	bl	8002bfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800296c:	bf00      	nop
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a40      	ldr	r2, [pc, #256]	; (8002ad8 <TIM_Base_SetConfig+0x114>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d013      	beq.n	8002a04 <TIM_Base_SetConfig+0x40>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e2:	d00f      	beq.n	8002a04 <TIM_Base_SetConfig+0x40>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a3d      	ldr	r2, [pc, #244]	; (8002adc <TIM_Base_SetConfig+0x118>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d00b      	beq.n	8002a04 <TIM_Base_SetConfig+0x40>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a3c      	ldr	r2, [pc, #240]	; (8002ae0 <TIM_Base_SetConfig+0x11c>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d007      	beq.n	8002a04 <TIM_Base_SetConfig+0x40>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a3b      	ldr	r2, [pc, #236]	; (8002ae4 <TIM_Base_SetConfig+0x120>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d003      	beq.n	8002a04 <TIM_Base_SetConfig+0x40>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a3a      	ldr	r2, [pc, #232]	; (8002ae8 <TIM_Base_SetConfig+0x124>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d108      	bne.n	8002a16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a2f      	ldr	r2, [pc, #188]	; (8002ad8 <TIM_Base_SetConfig+0x114>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d02b      	beq.n	8002a76 <TIM_Base_SetConfig+0xb2>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a24:	d027      	beq.n	8002a76 <TIM_Base_SetConfig+0xb2>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a2c      	ldr	r2, [pc, #176]	; (8002adc <TIM_Base_SetConfig+0x118>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d023      	beq.n	8002a76 <TIM_Base_SetConfig+0xb2>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a2b      	ldr	r2, [pc, #172]	; (8002ae0 <TIM_Base_SetConfig+0x11c>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d01f      	beq.n	8002a76 <TIM_Base_SetConfig+0xb2>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a2a      	ldr	r2, [pc, #168]	; (8002ae4 <TIM_Base_SetConfig+0x120>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d01b      	beq.n	8002a76 <TIM_Base_SetConfig+0xb2>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a29      	ldr	r2, [pc, #164]	; (8002ae8 <TIM_Base_SetConfig+0x124>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d017      	beq.n	8002a76 <TIM_Base_SetConfig+0xb2>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a28      	ldr	r2, [pc, #160]	; (8002aec <TIM_Base_SetConfig+0x128>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d013      	beq.n	8002a76 <TIM_Base_SetConfig+0xb2>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a27      	ldr	r2, [pc, #156]	; (8002af0 <TIM_Base_SetConfig+0x12c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d00f      	beq.n	8002a76 <TIM_Base_SetConfig+0xb2>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a26      	ldr	r2, [pc, #152]	; (8002af4 <TIM_Base_SetConfig+0x130>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d00b      	beq.n	8002a76 <TIM_Base_SetConfig+0xb2>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a25      	ldr	r2, [pc, #148]	; (8002af8 <TIM_Base_SetConfig+0x134>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d007      	beq.n	8002a76 <TIM_Base_SetConfig+0xb2>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a24      	ldr	r2, [pc, #144]	; (8002afc <TIM_Base_SetConfig+0x138>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d003      	beq.n	8002a76 <TIM_Base_SetConfig+0xb2>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a23      	ldr	r2, [pc, #140]	; (8002b00 <TIM_Base_SetConfig+0x13c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d108      	bne.n	8002a88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a0a      	ldr	r2, [pc, #40]	; (8002ad8 <TIM_Base_SetConfig+0x114>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d003      	beq.n	8002abc <TIM_Base_SetConfig+0xf8>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a0c      	ldr	r2, [pc, #48]	; (8002ae8 <TIM_Base_SetConfig+0x124>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d103      	bne.n	8002ac4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	691a      	ldr	r2, [r3, #16]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	615a      	str	r2, [r3, #20]
}
 8002aca:	bf00      	nop
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	40010000 	.word	0x40010000
 8002adc:	40000400 	.word	0x40000400
 8002ae0:	40000800 	.word	0x40000800
 8002ae4:	40000c00 	.word	0x40000c00
 8002ae8:	40010400 	.word	0x40010400
 8002aec:	40014000 	.word	0x40014000
 8002af0:	40014400 	.word	0x40014400
 8002af4:	40014800 	.word	0x40014800
 8002af8:	40001800 	.word	0x40001800
 8002afc:	40001c00 	.word	0x40001c00
 8002b00:	40002000 	.word	0x40002000

08002b04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d101      	bne.n	8002b1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e05a      	b.n	8002bd2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2202      	movs	r2, #2
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a21      	ldr	r2, [pc, #132]	; (8002be0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d022      	beq.n	8002ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b68:	d01d      	beq.n	8002ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a1d      	ldr	r2, [pc, #116]	; (8002be4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d018      	beq.n	8002ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a1b      	ldr	r2, [pc, #108]	; (8002be8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d013      	beq.n	8002ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a1a      	ldr	r2, [pc, #104]	; (8002bec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d00e      	beq.n	8002ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a18      	ldr	r2, [pc, #96]	; (8002bf0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d009      	beq.n	8002ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a17      	ldr	r2, [pc, #92]	; (8002bf4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d004      	beq.n	8002ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a15      	ldr	r2, [pc, #84]	; (8002bf8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d10c      	bne.n	8002bc0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40010000 	.word	0x40010000
 8002be4:	40000400 	.word	0x40000400
 8002be8:	40000800 	.word	0x40000800
 8002bec:	40000c00 	.word	0x40000c00
 8002bf0:	40010400 	.word	0x40010400
 8002bf4:	40014000 	.word	0x40014000
 8002bf8:	40001800 	.word	0x40001800

08002bfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <__libc_init_array>:
 8002c24:	b570      	push	{r4, r5, r6, lr}
 8002c26:	4d0d      	ldr	r5, [pc, #52]	; (8002c5c <__libc_init_array+0x38>)
 8002c28:	4c0d      	ldr	r4, [pc, #52]	; (8002c60 <__libc_init_array+0x3c>)
 8002c2a:	1b64      	subs	r4, r4, r5
 8002c2c:	10a4      	asrs	r4, r4, #2
 8002c2e:	2600      	movs	r6, #0
 8002c30:	42a6      	cmp	r6, r4
 8002c32:	d109      	bne.n	8002c48 <__libc_init_array+0x24>
 8002c34:	4d0b      	ldr	r5, [pc, #44]	; (8002c64 <__libc_init_array+0x40>)
 8002c36:	4c0c      	ldr	r4, [pc, #48]	; (8002c68 <__libc_init_array+0x44>)
 8002c38:	f000 f820 	bl	8002c7c <_init>
 8002c3c:	1b64      	subs	r4, r4, r5
 8002c3e:	10a4      	asrs	r4, r4, #2
 8002c40:	2600      	movs	r6, #0
 8002c42:	42a6      	cmp	r6, r4
 8002c44:	d105      	bne.n	8002c52 <__libc_init_array+0x2e>
 8002c46:	bd70      	pop	{r4, r5, r6, pc}
 8002c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c4c:	4798      	blx	r3
 8002c4e:	3601      	adds	r6, #1
 8002c50:	e7ee      	b.n	8002c30 <__libc_init_array+0xc>
 8002c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c56:	4798      	blx	r3
 8002c58:	3601      	adds	r6, #1
 8002c5a:	e7f2      	b.n	8002c42 <__libc_init_array+0x1e>
 8002c5c:	08002cac 	.word	0x08002cac
 8002c60:	08002cac 	.word	0x08002cac
 8002c64:	08002cac 	.word	0x08002cac
 8002c68:	08002cb0 	.word	0x08002cb0

08002c6c <memset>:
 8002c6c:	4402      	add	r2, r0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d100      	bne.n	8002c76 <memset+0xa>
 8002c74:	4770      	bx	lr
 8002c76:	f803 1b01 	strb.w	r1, [r3], #1
 8002c7a:	e7f9      	b.n	8002c70 <memset+0x4>

08002c7c <_init>:
 8002c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c7e:	bf00      	nop
 8002c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c82:	bc08      	pop	{r3}
 8002c84:	469e      	mov	lr, r3
 8002c86:	4770      	bx	lr

08002c88 <_fini>:
 8002c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c8a:	bf00      	nop
 8002c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c8e:	bc08      	pop	{r3}
 8002c90:	469e      	mov	lr, r3
 8002c92:	4770      	bx	lr
