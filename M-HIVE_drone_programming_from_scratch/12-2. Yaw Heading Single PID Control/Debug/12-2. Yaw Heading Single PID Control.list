
12-2. Yaw Heading Single PID Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fda4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000854  0800ff38  0800ff38  0001ff38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801078c  0801078c  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  0801078c  0801078c  0002078c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010794  08010794  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010794  08010794  00020794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010798  08010798  00020798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0801079c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  200001e0  0801097c  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006a4  0801097c  000306a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018773  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000467d  00000000  00000000  00048983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001740  00000000  00000000  0004d000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001550  00000000  00000000  0004e740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026573  00000000  00000000  0004fc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b583  00000000  00000000  00076203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3a0a  00000000  00000000  00091786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00165190  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072a8  00000000  00000000  001651e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ff1c 	.word	0x0800ff1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800ff1c 	.word	0x0800ff1c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <HAL_Init+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0d      	ldr	r2, [pc, #52]	; (8000eec <HAL_Init+0x40>)
 8000eb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <HAL_Init+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <HAL_Init+0x40>)
 8000ec2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ec6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a07      	ldr	r2, [pc, #28]	; (8000eec <HAL_Init+0x40>)
 8000ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed4:	2003      	movs	r0, #3
 8000ed6:	f000 fd43 	bl	8001960 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eda:	2000      	movs	r0, #0
 8000edc:	f000 f808 	bl	8000ef0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee0:	f00a fb38 	bl	800b554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40023c00 	.word	0x40023c00

08000ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <HAL_InitTick+0x54>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <HAL_InitTick+0x58>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4619      	mov	r1, r3
 8000f02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 fd5b 	bl	80019ca <HAL_SYSTICK_Config>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e00e      	b.n	8000f3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b0f      	cmp	r3, #15
 8000f22:	d80a      	bhi.n	8000f3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f24:	2200      	movs	r2, #0
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	f000 fd23 	bl	8001976 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f30:	4a06      	ldr	r2, [pc, #24]	; (8000f4c <HAL_InitTick+0x5c>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	e000      	b.n	8000f3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	2000000c 	.word	0x2000000c
 8000f48:	20000004 	.word	0x20000004
 8000f4c:	20000000 	.word	0x20000000

08000f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_IncTick+0x20>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_IncTick+0x24>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <HAL_IncTick+0x24>)
 8000f62:	6013      	str	r3, [r2, #0]
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000004 	.word	0x20000004
 8000f74:	200001fc 	.word	0x200001fc

08000f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <HAL_GetTick+0x14>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	200001fc 	.word	0x200001fc

08000f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f98:	f7ff ffee 	bl	8000f78 <HAL_GetTick>
 8000f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa8:	d005      	beq.n	8000fb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <HAL_Delay+0x44>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fb6:	bf00      	nop
 8000fb8:	f7ff ffde 	bl	8000f78 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d8f7      	bhi.n	8000fb8 <HAL_Delay+0x28>
  {
  }
}
 8000fc8:	bf00      	nop
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000004 	.word	0x20000004

08000fd8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d101      	bne.n	8000fee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e033      	b.n	8001056 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d109      	bne.n	800100a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f007 fdc6 	bl	8008b88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	f003 0310 	and.w	r3, r3, #16
 8001012:	2b00      	cmp	r3, #0
 8001014:	d118      	bne.n	8001048 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800101e:	f023 0302 	bic.w	r3, r3, #2
 8001022:	f043 0202 	orr.w	r2, r3, #2
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f000 fa4a 	bl	80014c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	f023 0303 	bic.w	r3, r3, #3
 800103e:	f043 0201 	orr.w	r2, r3, #1
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	641a      	str	r2, [r3, #64]	; 0x40
 8001046:	e001      	b.n	800104c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001054:	7bfb      	ldrb	r3, [r7, #15]
}
 8001056:	4618      	mov	r0, r3
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800106c:	2300      	movs	r3, #0
 800106e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001076:	2b01      	cmp	r3, #1
 8001078:	d101      	bne.n	800107e <HAL_ADC_Start_DMA+0x1e>
 800107a:	2302      	movs	r3, #2
 800107c:	e0cc      	b.n	8001218 <HAL_ADC_Start_DMA+0x1b8>
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2201      	movs	r2, #1
 8001082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	2b01      	cmp	r3, #1
 8001092:	d018      	beq.n	80010c6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	689a      	ldr	r2, [r3, #8]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f042 0201 	orr.w	r2, r2, #1
 80010a2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010a4:	4b5e      	ldr	r3, [pc, #376]	; (8001220 <HAL_ADC_Start_DMA+0x1c0>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a5e      	ldr	r2, [pc, #376]	; (8001224 <HAL_ADC_Start_DMA+0x1c4>)
 80010aa:	fba2 2303 	umull	r2, r3, r2, r3
 80010ae:	0c9a      	lsrs	r2, r3, #18
 80010b0:	4613      	mov	r3, r2
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	4413      	add	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80010b8:	e002      	b.n	80010c0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	3b01      	subs	r3, #1
 80010be:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1f9      	bne.n	80010ba <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	f040 80a0 	bne.w	8001216 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010de:	f023 0301 	bic.w	r3, r3, #1
 80010e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d007      	beq.n	8001108 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001100:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001114:	d106      	bne.n	8001124 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	f023 0206 	bic.w	r2, r3, #6
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	645a      	str	r2, [r3, #68]	; 0x44
 8001122:	e002      	b.n	800112a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2200      	movs	r2, #0
 8001128:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001132:	4b3d      	ldr	r3, [pc, #244]	; (8001228 <HAL_ADC_Start_DMA+0x1c8>)
 8001134:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800113a:	4a3c      	ldr	r2, [pc, #240]	; (800122c <HAL_ADC_Start_DMA+0x1cc>)
 800113c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001142:	4a3b      	ldr	r2, [pc, #236]	; (8001230 <HAL_ADC_Start_DMA+0x1d0>)
 8001144:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800114a:	4a3a      	ldr	r2, [pc, #232]	; (8001234 <HAL_ADC_Start_DMA+0x1d4>)
 800114c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001156:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	685a      	ldr	r2, [r3, #4]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001166:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	689a      	ldr	r2, [r3, #8]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001176:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	334c      	adds	r3, #76	; 0x4c
 8001182:	4619      	mov	r1, r3
 8001184:	68ba      	ldr	r2, [r7, #8]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f000 fcda 	bl	8001b40 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 031f 	and.w	r3, r3, #31
 8001194:	2b00      	cmp	r3, #0
 8001196:	d12a      	bne.n	80011ee <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a26      	ldr	r2, [pc, #152]	; (8001238 <HAL_ADC_Start_DMA+0x1d8>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d015      	beq.n	80011ce <HAL_ADC_Start_DMA+0x16e>
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a25      	ldr	r2, [pc, #148]	; (800123c <HAL_ADC_Start_DMA+0x1dc>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d105      	bne.n	80011b8 <HAL_ADC_Start_DMA+0x158>
 80011ac:	4b1e      	ldr	r3, [pc, #120]	; (8001228 <HAL_ADC_Start_DMA+0x1c8>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 031f 	and.w	r3, r3, #31
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d00a      	beq.n	80011ce <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a20      	ldr	r2, [pc, #128]	; (8001240 <HAL_ADC_Start_DMA+0x1e0>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d129      	bne.n	8001216 <HAL_ADC_Start_DMA+0x1b6>
 80011c2:	4b19      	ldr	r3, [pc, #100]	; (8001228 <HAL_ADC_Start_DMA+0x1c8>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 0310 	and.w	r3, r3, #16
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d123      	bne.n	8001216 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d11c      	bne.n	8001216 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	689a      	ldr	r2, [r3, #8]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	e013      	b.n	8001216 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a11      	ldr	r2, [pc, #68]	; (8001238 <HAL_ADC_Start_DMA+0x1d8>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d10e      	bne.n	8001216 <HAL_ADC_Start_DMA+0x1b6>
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d107      	bne.n	8001216 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001214:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	2000000c 	.word	0x2000000c
 8001224:	431bde83 	.word	0x431bde83
 8001228:	40012300 	.word	0x40012300
 800122c:	080016bd 	.word	0x080016bd
 8001230:	08001777 	.word	0x08001777
 8001234:	08001793 	.word	0x08001793
 8001238:	40012000 	.word	0x40012000
 800123c:	40012100 	.word	0x40012100
 8001240:	40012200 	.word	0x40012200

08001244 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001294:	2b01      	cmp	r3, #1
 8001296:	d101      	bne.n	800129c <HAL_ADC_ConfigChannel+0x1c>
 8001298:	2302      	movs	r3, #2
 800129a:	e105      	b.n	80014a8 <HAL_ADC_ConfigChannel+0x228>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2201      	movs	r2, #1
 80012a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b09      	cmp	r3, #9
 80012aa:	d925      	bls.n	80012f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	68d9      	ldr	r1, [r3, #12]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	461a      	mov	r2, r3
 80012ba:	4613      	mov	r3, r2
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4413      	add	r3, r2
 80012c0:	3b1e      	subs	r3, #30
 80012c2:	2207      	movs	r2, #7
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43da      	mvns	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	400a      	ands	r2, r1
 80012d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	68d9      	ldr	r1, [r3, #12]
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	4618      	mov	r0, r3
 80012e4:	4603      	mov	r3, r0
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	4403      	add	r3, r0
 80012ea:	3b1e      	subs	r3, #30
 80012ec:	409a      	lsls	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	430a      	orrs	r2, r1
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	e022      	b.n	800133e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6919      	ldr	r1, [r3, #16]
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	b29b      	uxth	r3, r3
 8001304:	461a      	mov	r2, r3
 8001306:	4613      	mov	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	4413      	add	r3, r2
 800130c:	2207      	movs	r2, #7
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43da      	mvns	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	400a      	ands	r2, r1
 800131a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6919      	ldr	r1, [r3, #16]
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	689a      	ldr	r2, [r3, #8]
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	b29b      	uxth	r3, r3
 800132c:	4618      	mov	r0, r3
 800132e:	4603      	mov	r3, r0
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	4403      	add	r3, r0
 8001334:	409a      	lsls	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	430a      	orrs	r2, r1
 800133c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	2b06      	cmp	r3, #6
 8001344:	d824      	bhi.n	8001390 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	4613      	mov	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4413      	add	r3, r2
 8001356:	3b05      	subs	r3, #5
 8001358:	221f      	movs	r2, #31
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43da      	mvns	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	400a      	ands	r2, r1
 8001366:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	b29b      	uxth	r3, r3
 8001374:	4618      	mov	r0, r3
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	4613      	mov	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	3b05      	subs	r3, #5
 8001382:	fa00 f203 	lsl.w	r2, r0, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	430a      	orrs	r2, r1
 800138c:	635a      	str	r2, [r3, #52]	; 0x34
 800138e:	e04c      	b.n	800142a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2b0c      	cmp	r3, #12
 8001396:	d824      	bhi.n	80013e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	4613      	mov	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	4413      	add	r3, r2
 80013a8:	3b23      	subs	r3, #35	; 0x23
 80013aa:	221f      	movs	r2, #31
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43da      	mvns	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	400a      	ands	r2, r1
 80013b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	4618      	mov	r0, r3
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	4613      	mov	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4413      	add	r3, r2
 80013d2:	3b23      	subs	r3, #35	; 0x23
 80013d4:	fa00 f203 	lsl.w	r2, r0, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	430a      	orrs	r2, r1
 80013de:	631a      	str	r2, [r3, #48]	; 0x30
 80013e0:	e023      	b.n	800142a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	4613      	mov	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4413      	add	r3, r2
 80013f2:	3b41      	subs	r3, #65	; 0x41
 80013f4:	221f      	movs	r2, #31
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43da      	mvns	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	400a      	ands	r2, r1
 8001402:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	b29b      	uxth	r3, r3
 8001410:	4618      	mov	r0, r3
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	4613      	mov	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	3b41      	subs	r3, #65	; 0x41
 800141e:	fa00 f203 	lsl.w	r2, r0, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	430a      	orrs	r2, r1
 8001428:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800142a:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <HAL_ADC_ConfigChannel+0x234>)
 800142c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a21      	ldr	r2, [pc, #132]	; (80014b8 <HAL_ADC_ConfigChannel+0x238>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d109      	bne.n	800144c <HAL_ADC_ConfigChannel+0x1cc>
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b12      	cmp	r3, #18
 800143e:	d105      	bne.n	800144c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a19      	ldr	r2, [pc, #100]	; (80014b8 <HAL_ADC_ConfigChannel+0x238>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d123      	bne.n	800149e <HAL_ADC_ConfigChannel+0x21e>
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b10      	cmp	r3, #16
 800145c:	d003      	beq.n	8001466 <HAL_ADC_ConfigChannel+0x1e6>
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2b11      	cmp	r3, #17
 8001464:	d11b      	bne.n	800149e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2b10      	cmp	r3, #16
 8001478:	d111      	bne.n	800149e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <HAL_ADC_ConfigChannel+0x23c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a10      	ldr	r2, [pc, #64]	; (80014c0 <HAL_ADC_ConfigChannel+0x240>)
 8001480:	fba2 2303 	umull	r2, r3, r2, r3
 8001484:	0c9a      	lsrs	r2, r3, #18
 8001486:	4613      	mov	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001490:	e002      	b.n	8001498 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	3b01      	subs	r3, #1
 8001496:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f9      	bne.n	8001492 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	40012300 	.word	0x40012300
 80014b8:	40012000 	.word	0x40012000
 80014bc:	2000000c 	.word	0x2000000c
 80014c0:	431bde83 	.word	0x431bde83

080014c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014cc:	4b79      	ldr	r3, [pc, #484]	; (80016b4 <ADC_Init+0x1f0>)
 80014ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	431a      	orrs	r2, r3
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6859      	ldr	r1, [r3, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	691b      	ldr	r3, [r3, #16]
 8001504:	021a      	lsls	r2, r3, #8
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	430a      	orrs	r2, r1
 800150c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800151c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6859      	ldr	r1, [r3, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	430a      	orrs	r2, r1
 800152e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800153e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6899      	ldr	r1, [r3, #8]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	68da      	ldr	r2, [r3, #12]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	430a      	orrs	r2, r1
 8001550:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001556:	4a58      	ldr	r2, [pc, #352]	; (80016b8 <ADC_Init+0x1f4>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d022      	beq.n	80015a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	689a      	ldr	r2, [r3, #8]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800156a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6899      	ldr	r1, [r3, #8]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	430a      	orrs	r2, r1
 800157c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800158c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6899      	ldr	r1, [r3, #8]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	430a      	orrs	r2, r1
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	e00f      	b.n	80015c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 0202 	bic.w	r2, r2, #2
 80015d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6899      	ldr	r1, [r3, #8]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	7e1b      	ldrb	r3, [r3, #24]
 80015dc:	005a      	lsls	r2, r3, #1
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	430a      	orrs	r2, r1
 80015e4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d01b      	beq.n	8001628 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015fe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800160e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6859      	ldr	r1, [r3, #4]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161a:	3b01      	subs	r3, #1
 800161c:	035a      	lsls	r2, r3, #13
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	e007      	b.n	8001638 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001636:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001646:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	3b01      	subs	r3, #1
 8001654:	051a      	lsls	r2, r3, #20
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800166c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6899      	ldr	r1, [r3, #8]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800167a:	025a      	lsls	r2, r3, #9
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	430a      	orrs	r2, r1
 8001682:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001692:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6899      	ldr	r1, [r3, #8]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	029a      	lsls	r2, r3, #10
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	430a      	orrs	r2, r1
 80016a6:	609a      	str	r2, [r3, #8]
}
 80016a8:	bf00      	nop
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	40012300 	.word	0x40012300
 80016b8:	0f000001 	.word	0x0f000001

080016bc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016c8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d13c      	bne.n	8001750 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d12b      	bne.n	8001748 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d127      	bne.n	8001748 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001702:	2b00      	cmp	r3, #0
 8001704:	d006      	beq.n	8001714 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001710:	2b00      	cmp	r3, #0
 8001712:	d119      	bne.n	8001748 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 0220 	bic.w	r2, r2, #32
 8001722:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d105      	bne.n	8001748 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	f043 0201 	orr.w	r2, r3, #1
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001748:	68f8      	ldr	r0, [r7, #12]
 800174a:	f7ff fd7b 	bl	8001244 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800174e:	e00e      	b.n	800176e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001754:	f003 0310 	and.w	r3, r3, #16
 8001758:	2b00      	cmp	r3, #0
 800175a:	d003      	beq.n	8001764 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800175c:	68f8      	ldr	r0, [r7, #12]
 800175e:	f7ff fd85 	bl	800126c <HAL_ADC_ErrorCallback>
}
 8001762:	e004      	b.n	800176e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	4798      	blx	r3
}
 800176e:	bf00      	nop
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b084      	sub	sp, #16
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001782:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	f7ff fd67 	bl	8001258 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b084      	sub	sp, #16
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800179e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2240      	movs	r2, #64	; 0x40
 80017a4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	f043 0204 	orr.w	r2, r3, #4
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80017b2:	68f8      	ldr	r0, [r7, #12]
 80017b4:	f7ff fd5a 	bl	800126c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017b8:	bf00      	nop
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d0:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <__NVIC_SetPriorityGrouping+0x44>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017d6:	68ba      	ldr	r2, [r7, #8]
 80017d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017dc:	4013      	ands	r3, r2
 80017de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017f2:	4a04      	ldr	r2, [pc, #16]	; (8001804 <__NVIC_SetPriorityGrouping+0x44>)
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	60d3      	str	r3, [r2, #12]
}
 80017f8:	bf00      	nop
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800180c:	4b04      	ldr	r3, [pc, #16]	; (8001820 <__NVIC_GetPriorityGrouping+0x18>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	0a1b      	lsrs	r3, r3, #8
 8001812:	f003 0307 	and.w	r3, r3, #7
}
 8001816:	4618      	mov	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	2b00      	cmp	r3, #0
 8001834:	db0b      	blt.n	800184e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	f003 021f 	and.w	r2, r3, #31
 800183c:	4907      	ldr	r1, [pc, #28]	; (800185c <__NVIC_EnableIRQ+0x38>)
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	095b      	lsrs	r3, r3, #5
 8001844:	2001      	movs	r0, #1
 8001846:	fa00 f202 	lsl.w	r2, r0, r2
 800184a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	e000e100 	.word	0xe000e100

08001860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	6039      	str	r1, [r7, #0]
 800186a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001870:	2b00      	cmp	r3, #0
 8001872:	db0a      	blt.n	800188a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	b2da      	uxtb	r2, r3
 8001878:	490c      	ldr	r1, [pc, #48]	; (80018ac <__NVIC_SetPriority+0x4c>)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	0112      	lsls	r2, r2, #4
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	440b      	add	r3, r1
 8001884:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001888:	e00a      	b.n	80018a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4908      	ldr	r1, [pc, #32]	; (80018b0 <__NVIC_SetPriority+0x50>)
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	3b04      	subs	r3, #4
 8001898:	0112      	lsls	r2, r2, #4
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	440b      	add	r3, r1
 800189e:	761a      	strb	r2, [r3, #24]
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000e100 	.word	0xe000e100
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b089      	sub	sp, #36	; 0x24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f1c3 0307 	rsb	r3, r3, #7
 80018ce:	2b04      	cmp	r3, #4
 80018d0:	bf28      	it	cs
 80018d2:	2304      	movcs	r3, #4
 80018d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3304      	adds	r3, #4
 80018da:	2b06      	cmp	r3, #6
 80018dc:	d902      	bls.n	80018e4 <NVIC_EncodePriority+0x30>
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3b03      	subs	r3, #3
 80018e2:	e000      	b.n	80018e6 <NVIC_EncodePriority+0x32>
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43da      	mvns	r2, r3
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	401a      	ands	r2, r3
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	fa01 f303 	lsl.w	r3, r1, r3
 8001906:	43d9      	mvns	r1, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800190c:	4313      	orrs	r3, r2
         );
}
 800190e:	4618      	mov	r0, r3
 8001910:	3724      	adds	r7, #36	; 0x24
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
	...

0800191c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3b01      	subs	r3, #1
 8001928:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800192c:	d301      	bcc.n	8001932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800192e:	2301      	movs	r3, #1
 8001930:	e00f      	b.n	8001952 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001932:	4a0a      	ldr	r2, [pc, #40]	; (800195c <SysTick_Config+0x40>)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3b01      	subs	r3, #1
 8001938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800193a:	210f      	movs	r1, #15
 800193c:	f04f 30ff 	mov.w	r0, #4294967295
 8001940:	f7ff ff8e 	bl	8001860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001944:	4b05      	ldr	r3, [pc, #20]	; (800195c <SysTick_Config+0x40>)
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800194a:	4b04      	ldr	r3, [pc, #16]	; (800195c <SysTick_Config+0x40>)
 800194c:	2207      	movs	r2, #7
 800194e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	e000e010 	.word	0xe000e010

08001960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7ff ff29 	bl	80017c0 <__NVIC_SetPriorityGrouping>
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001976:	b580      	push	{r7, lr}
 8001978:	b086      	sub	sp, #24
 800197a:	af00      	add	r7, sp, #0
 800197c:	4603      	mov	r3, r0
 800197e:	60b9      	str	r1, [r7, #8]
 8001980:	607a      	str	r2, [r7, #4]
 8001982:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001988:	f7ff ff3e 	bl	8001808 <__NVIC_GetPriorityGrouping>
 800198c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	68b9      	ldr	r1, [r7, #8]
 8001992:	6978      	ldr	r0, [r7, #20]
 8001994:	f7ff ff8e 	bl	80018b4 <NVIC_EncodePriority>
 8001998:	4602      	mov	r2, r0
 800199a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800199e:	4611      	mov	r1, r2
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff5d 	bl	8001860 <__NVIC_SetPriority>
}
 80019a6:	bf00      	nop
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	4603      	mov	r3, r0
 80019b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff31 	bl	8001824 <__NVIC_EnableIRQ>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff ffa2 	bl	800191c <SysTick_Config>
 80019d8:	4603      	mov	r3, r0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019f0:	f7ff fac2 	bl	8000f78 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e099      	b.n	8001b34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f022 0201 	bic.w	r2, r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a20:	e00f      	b.n	8001a42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a22:	f7ff faa9 	bl	8000f78 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b05      	cmp	r3, #5
 8001a2e:	d908      	bls.n	8001a42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2220      	movs	r2, #32
 8001a34:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2203      	movs	r2, #3
 8001a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e078      	b.n	8001b34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1e8      	bne.n	8001a22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	4b38      	ldr	r3, [pc, #224]	; (8001b3c <HAL_DMA_Init+0x158>)
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	d107      	bne.n	8001aac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	f023 0307 	bic.w	r3, r3, #7
 8001ac2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	d117      	bne.n	8001b06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d00e      	beq.n	8001b06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 fa91 	bl	8002010 <DMA_CheckFifoParam>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d008      	beq.n	8001b06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2240      	movs	r2, #64	; 0x40
 8001af8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b02:	2301      	movs	r3, #1
 8001b04:	e016      	b.n	8001b34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 fa48 	bl	8001fa4 <DMA_CalcBaseAndBitshift>
 8001b14:	4603      	mov	r3, r0
 8001b16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b1c:	223f      	movs	r2, #63	; 0x3f
 8001b1e:	409a      	lsls	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	f010803f 	.word	0xf010803f

08001b40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
 8001b4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d101      	bne.n	8001b66 <HAL_DMA_Start_IT+0x26>
 8001b62:	2302      	movs	r3, #2
 8001b64:	e040      	b.n	8001be8 <HAL_DMA_Start_IT+0xa8>
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d12f      	bne.n	8001bda <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2202      	movs	r2, #2
 8001b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	68b9      	ldr	r1, [r7, #8]
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f000 f9da 	bl	8001f48 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b98:	223f      	movs	r2, #63	; 0x3f
 8001b9a:	409a      	lsls	r2, r3
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f042 0216 	orr.w	r2, r2, #22
 8001bae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d007      	beq.n	8001bc8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f042 0208 	orr.w	r2, r2, #8
 8001bc6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f042 0201 	orr.w	r2, r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	e005      	b.n	8001be6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001be2:	2302      	movs	r3, #2
 8001be4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d004      	beq.n	8001c0e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2280      	movs	r2, #128	; 0x80
 8001c08:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e00c      	b.n	8001c28 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2205      	movs	r2, #5
 8001c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 0201 	bic.w	r2, r2, #1
 8001c24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c40:	4b8e      	ldr	r3, [pc, #568]	; (8001e7c <HAL_DMA_IRQHandler+0x248>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a8e      	ldr	r2, [pc, #568]	; (8001e80 <HAL_DMA_IRQHandler+0x24c>)
 8001c46:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4a:	0a9b      	lsrs	r3, r3, #10
 8001c4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5e:	2208      	movs	r2, #8
 8001c60:	409a      	lsls	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4013      	ands	r3, r2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d01a      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d013      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f022 0204 	bic.w	r2, r2, #4
 8001c86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8c:	2208      	movs	r2, #8
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c98:	f043 0201 	orr.w	r2, r3, #1
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	409a      	lsls	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4013      	ands	r3, r2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d012      	beq.n	8001cd6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00b      	beq.n	8001cd6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cce:	f043 0202 	orr.w	r2, r3, #2
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cda:	2204      	movs	r2, #4
 8001cdc:	409a      	lsls	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d012      	beq.n	8001d0c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00b      	beq.n	8001d0c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf8:	2204      	movs	r2, #4
 8001cfa:	409a      	lsls	r2, r3
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d04:	f043 0204 	orr.w	r2, r3, #4
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d10:	2210      	movs	r2, #16
 8001d12:	409a      	lsls	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4013      	ands	r3, r2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d043      	beq.n	8001da4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0308 	and.w	r3, r3, #8
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d03c      	beq.n	8001da4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2e:	2210      	movs	r2, #16
 8001d30:	409a      	lsls	r2, r3
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d018      	beq.n	8001d76 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d108      	bne.n	8001d64 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d024      	beq.n	8001da4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	4798      	blx	r3
 8001d62:	e01f      	b.n	8001da4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d01b      	beq.n	8001da4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	4798      	blx	r3
 8001d74:	e016      	b.n	8001da4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d107      	bne.n	8001d94 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 0208 	bic.w	r2, r2, #8
 8001d92:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da8:	2220      	movs	r2, #32
 8001daa:	409a      	lsls	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4013      	ands	r3, r2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f000 808f 	beq.w	8001ed4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0310 	and.w	r3, r3, #16
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 8087 	beq.w	8001ed4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dca:	2220      	movs	r2, #32
 8001dcc:	409a      	lsls	r2, r3
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b05      	cmp	r3, #5
 8001ddc:	d136      	bne.n	8001e4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 0216 	bic.w	r2, r2, #22
 8001dec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	695a      	ldr	r2, [r3, #20]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dfc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d103      	bne.n	8001e0e <HAL_DMA_IRQHandler+0x1da>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d007      	beq.n	8001e1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 0208 	bic.w	r2, r2, #8
 8001e1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e22:	223f      	movs	r2, #63	; 0x3f
 8001e24:	409a      	lsls	r2, r3
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d07e      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	4798      	blx	r3
        }
        return;
 8001e4a:	e079      	b.n	8001f40 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d01d      	beq.n	8001e96 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10d      	bne.n	8001e84 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d031      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	4798      	blx	r3
 8001e78:	e02c      	b.n	8001ed4 <HAL_DMA_IRQHandler+0x2a0>
 8001e7a:	bf00      	nop
 8001e7c:	2000000c 	.word	0x2000000c
 8001e80:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d023      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	4798      	blx	r3
 8001e94:	e01e      	b.n	8001ed4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10f      	bne.n	8001ec4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0210 	bic.w	r2, r2, #16
 8001eb2:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d032      	beq.n	8001f42 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d022      	beq.n	8001f2e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2205      	movs	r2, #5
 8001eec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 0201 	bic.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	3301      	adds	r3, #1
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d307      	bcc.n	8001f1c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f2      	bne.n	8001f00 <HAL_DMA_IRQHandler+0x2cc>
 8001f1a:	e000      	b.n	8001f1e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f1c:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d005      	beq.n	8001f42 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	4798      	blx	r3
 8001f3e:	e000      	b.n	8001f42 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f40:	bf00      	nop
    }
  }
}
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
 8001f54:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f64:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2b40      	cmp	r3, #64	; 0x40
 8001f74:	d108      	bne.n	8001f88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f86:	e007      	b.n	8001f98 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68ba      	ldr	r2, [r7, #8]
 8001f8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	60da      	str	r2, [r3, #12]
}
 8001f98:	bf00      	nop
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	3b10      	subs	r3, #16
 8001fb4:	4a14      	ldr	r2, [pc, #80]	; (8002008 <DMA_CalcBaseAndBitshift+0x64>)
 8001fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fba:	091b      	lsrs	r3, r3, #4
 8001fbc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001fbe:	4a13      	ldr	r2, [pc, #76]	; (800200c <DMA_CalcBaseAndBitshift+0x68>)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	d909      	bls.n	8001fe6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fda:	f023 0303 	bic.w	r3, r3, #3
 8001fde:	1d1a      	adds	r2, r3, #4
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	659a      	str	r2, [r3, #88]	; 0x58
 8001fe4:	e007      	b.n	8001ff6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fee:	f023 0303 	bic.w	r3, r3, #3
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	aaaaaaab 	.word	0xaaaaaaab
 800200c:	080102e0 	.word	0x080102e0

08002010 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002018:	2300      	movs	r3, #0
 800201a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002020:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d11f      	bne.n	800206a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	2b03      	cmp	r3, #3
 800202e:	d856      	bhi.n	80020de <DMA_CheckFifoParam+0xce>
 8002030:	a201      	add	r2, pc, #4	; (adr r2, 8002038 <DMA_CheckFifoParam+0x28>)
 8002032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002036:	bf00      	nop
 8002038:	08002049 	.word	0x08002049
 800203c:	0800205b 	.word	0x0800205b
 8002040:	08002049 	.word	0x08002049
 8002044:	080020df 	.word	0x080020df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d046      	beq.n	80020e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002058:	e043      	b.n	80020e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002062:	d140      	bne.n	80020e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002068:	e03d      	b.n	80020e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002072:	d121      	bne.n	80020b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	2b03      	cmp	r3, #3
 8002078:	d837      	bhi.n	80020ea <DMA_CheckFifoParam+0xda>
 800207a:	a201      	add	r2, pc, #4	; (adr r2, 8002080 <DMA_CheckFifoParam+0x70>)
 800207c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002080:	08002091 	.word	0x08002091
 8002084:	08002097 	.word	0x08002097
 8002088:	08002091 	.word	0x08002091
 800208c:	080020a9 	.word	0x080020a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	73fb      	strb	r3, [r7, #15]
      break;
 8002094:	e030      	b.n	80020f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d025      	beq.n	80020ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020a6:	e022      	b.n	80020ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020b0:	d11f      	bne.n	80020f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020b6:	e01c      	b.n	80020f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d903      	bls.n	80020c6 <DMA_CheckFifoParam+0xb6>
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	2b03      	cmp	r3, #3
 80020c2:	d003      	beq.n	80020cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020c4:	e018      	b.n	80020f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	73fb      	strb	r3, [r7, #15]
      break;
 80020ca:	e015      	b.n	80020f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00e      	beq.n	80020f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	73fb      	strb	r3, [r7, #15]
      break;
 80020dc:	e00b      	b.n	80020f6 <DMA_CheckFifoParam+0xe6>
      break;
 80020de:	bf00      	nop
 80020e0:	e00a      	b.n	80020f8 <DMA_CheckFifoParam+0xe8>
      break;
 80020e2:	bf00      	nop
 80020e4:	e008      	b.n	80020f8 <DMA_CheckFifoParam+0xe8>
      break;
 80020e6:	bf00      	nop
 80020e8:	e006      	b.n	80020f8 <DMA_CheckFifoParam+0xe8>
      break;
 80020ea:	bf00      	nop
 80020ec:	e004      	b.n	80020f8 <DMA_CheckFifoParam+0xe8>
      break;
 80020ee:	bf00      	nop
 80020f0:	e002      	b.n	80020f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80020f2:	bf00      	nop
 80020f4:	e000      	b.n	80020f8 <DMA_CheckFifoParam+0xe8>
      break;
 80020f6:	bf00      	nop
    }
  } 
  
  return status; 
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop

08002108 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002108:	b480      	push	{r7}
 800210a:	b089      	sub	sp, #36	; 0x24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002116:	2300      	movs	r3, #0
 8002118:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800211a:	2300      	movs	r3, #0
 800211c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800211e:	2300      	movs	r3, #0
 8002120:	61fb      	str	r3, [r7, #28]
 8002122:	e16b      	b.n	80023fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002124:	2201      	movs	r2, #1
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	4013      	ands	r3, r2
 8002136:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	429a      	cmp	r2, r3
 800213e:	f040 815a 	bne.w	80023f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d00b      	beq.n	8002162 <HAL_GPIO_Init+0x5a>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b02      	cmp	r3, #2
 8002150:	d007      	beq.n	8002162 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002156:	2b11      	cmp	r3, #17
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b12      	cmp	r3, #18
 8002160:	d130      	bne.n	80021c4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	2203      	movs	r2, #3
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4013      	ands	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4313      	orrs	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002198:	2201      	movs	r2, #1
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	f003 0201 	and.w	r2, r3, #1
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	2203      	movs	r2, #3
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4013      	ands	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d003      	beq.n	8002204 <HAL_GPIO_Init+0xfc>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b12      	cmp	r3, #18
 8002202:	d123      	bne.n	800224c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	08da      	lsrs	r2, r3, #3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3208      	adds	r2, #8
 800220c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002210:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	220f      	movs	r2, #15
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	691a      	ldr	r2, [r3, #16]
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	08da      	lsrs	r2, r3, #3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	3208      	adds	r2, #8
 8002246:	69b9      	ldr	r1, [r7, #24]
 8002248:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	2203      	movs	r2, #3
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f003 0203 	and.w	r2, r3, #3
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4313      	orrs	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 80b4 	beq.w	80023f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	4b60      	ldr	r3, [pc, #384]	; (8002414 <HAL_GPIO_Init+0x30c>)
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	4a5f      	ldr	r2, [pc, #380]	; (8002414 <HAL_GPIO_Init+0x30c>)
 8002298:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800229c:	6453      	str	r3, [r2, #68]	; 0x44
 800229e:	4b5d      	ldr	r3, [pc, #372]	; (8002414 <HAL_GPIO_Init+0x30c>)
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022aa:	4a5b      	ldr	r2, [pc, #364]	; (8002418 <HAL_GPIO_Init+0x310>)
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	089b      	lsrs	r3, r3, #2
 80022b0:	3302      	adds	r3, #2
 80022b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	220f      	movs	r2, #15
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43db      	mvns	r3, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4013      	ands	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a52      	ldr	r2, [pc, #328]	; (800241c <HAL_GPIO_Init+0x314>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d02b      	beq.n	800232e <HAL_GPIO_Init+0x226>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a51      	ldr	r2, [pc, #324]	; (8002420 <HAL_GPIO_Init+0x318>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d025      	beq.n	800232a <HAL_GPIO_Init+0x222>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a50      	ldr	r2, [pc, #320]	; (8002424 <HAL_GPIO_Init+0x31c>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d01f      	beq.n	8002326 <HAL_GPIO_Init+0x21e>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a4f      	ldr	r2, [pc, #316]	; (8002428 <HAL_GPIO_Init+0x320>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d019      	beq.n	8002322 <HAL_GPIO_Init+0x21a>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a4e      	ldr	r2, [pc, #312]	; (800242c <HAL_GPIO_Init+0x324>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d013      	beq.n	800231e <HAL_GPIO_Init+0x216>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a4d      	ldr	r2, [pc, #308]	; (8002430 <HAL_GPIO_Init+0x328>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d00d      	beq.n	800231a <HAL_GPIO_Init+0x212>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a4c      	ldr	r2, [pc, #304]	; (8002434 <HAL_GPIO_Init+0x32c>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d007      	beq.n	8002316 <HAL_GPIO_Init+0x20e>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a4b      	ldr	r2, [pc, #300]	; (8002438 <HAL_GPIO_Init+0x330>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d101      	bne.n	8002312 <HAL_GPIO_Init+0x20a>
 800230e:	2307      	movs	r3, #7
 8002310:	e00e      	b.n	8002330 <HAL_GPIO_Init+0x228>
 8002312:	2308      	movs	r3, #8
 8002314:	e00c      	b.n	8002330 <HAL_GPIO_Init+0x228>
 8002316:	2306      	movs	r3, #6
 8002318:	e00a      	b.n	8002330 <HAL_GPIO_Init+0x228>
 800231a:	2305      	movs	r3, #5
 800231c:	e008      	b.n	8002330 <HAL_GPIO_Init+0x228>
 800231e:	2304      	movs	r3, #4
 8002320:	e006      	b.n	8002330 <HAL_GPIO_Init+0x228>
 8002322:	2303      	movs	r3, #3
 8002324:	e004      	b.n	8002330 <HAL_GPIO_Init+0x228>
 8002326:	2302      	movs	r3, #2
 8002328:	e002      	b.n	8002330 <HAL_GPIO_Init+0x228>
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <HAL_GPIO_Init+0x228>
 800232e:	2300      	movs	r3, #0
 8002330:	69fa      	ldr	r2, [r7, #28]
 8002332:	f002 0203 	and.w	r2, r2, #3
 8002336:	0092      	lsls	r2, r2, #2
 8002338:	4093      	lsls	r3, r2
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4313      	orrs	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002340:	4935      	ldr	r1, [pc, #212]	; (8002418 <HAL_GPIO_Init+0x310>)
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	089b      	lsrs	r3, r3, #2
 8002346:	3302      	adds	r3, #2
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800234e:	4b3b      	ldr	r3, [pc, #236]	; (800243c <HAL_GPIO_Init+0x334>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	43db      	mvns	r3, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4013      	ands	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4313      	orrs	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002372:	4a32      	ldr	r2, [pc, #200]	; (800243c <HAL_GPIO_Init+0x334>)
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002378:	4b30      	ldr	r3, [pc, #192]	; (800243c <HAL_GPIO_Init+0x334>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800239c:	4a27      	ldr	r2, [pc, #156]	; (800243c <HAL_GPIO_Init+0x334>)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023a2:	4b26      	ldr	r3, [pc, #152]	; (800243c <HAL_GPIO_Init+0x334>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	43db      	mvns	r3, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4013      	ands	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023c6:	4a1d      	ldr	r2, [pc, #116]	; (800243c <HAL_GPIO_Init+0x334>)
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023cc:	4b1b      	ldr	r3, [pc, #108]	; (800243c <HAL_GPIO_Init+0x334>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023f0:	4a12      	ldr	r2, [pc, #72]	; (800243c <HAL_GPIO_Init+0x334>)
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	3301      	adds	r3, #1
 80023fa:	61fb      	str	r3, [r7, #28]
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	2b0f      	cmp	r3, #15
 8002400:	f67f ae90 	bls.w	8002124 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002404:	bf00      	nop
 8002406:	bf00      	nop
 8002408:	3724      	adds	r7, #36	; 0x24
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40023800 	.word	0x40023800
 8002418:	40013800 	.word	0x40013800
 800241c:	40020000 	.word	0x40020000
 8002420:	40020400 	.word	0x40020400
 8002424:	40020800 	.word	0x40020800
 8002428:	40020c00 	.word	0x40020c00
 800242c:	40021000 	.word	0x40021000
 8002430:	40021400 	.word	0x40021400
 8002434:	40021800 	.word	0x40021800
 8002438:	40021c00 	.word	0x40021c00
 800243c:	40013c00 	.word	0x40013c00

08002440 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e12b      	b.n	80026aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d106      	bne.n	800246c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f006 fd08 	bl	8008e7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2224      	movs	r2, #36	; 0x24
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0201 	bic.w	r2, r2, #1
 8002482:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002492:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024a4:	f001 fbee 	bl	8003c84 <HAL_RCC_GetPCLK1Freq>
 80024a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	4a81      	ldr	r2, [pc, #516]	; (80026b4 <HAL_I2C_Init+0x274>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d807      	bhi.n	80024c4 <HAL_I2C_Init+0x84>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4a80      	ldr	r2, [pc, #512]	; (80026b8 <HAL_I2C_Init+0x278>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	bf94      	ite	ls
 80024bc:	2301      	movls	r3, #1
 80024be:	2300      	movhi	r3, #0
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	e006      	b.n	80024d2 <HAL_I2C_Init+0x92>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4a7d      	ldr	r2, [pc, #500]	; (80026bc <HAL_I2C_Init+0x27c>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	bf94      	ite	ls
 80024cc:	2301      	movls	r3, #1
 80024ce:	2300      	movhi	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e0e7      	b.n	80026aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	4a78      	ldr	r2, [pc, #480]	; (80026c0 <HAL_I2C_Init+0x280>)
 80024de:	fba2 2303 	umull	r2, r3, r2, r3
 80024e2:	0c9b      	lsrs	r3, r3, #18
 80024e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68ba      	ldr	r2, [r7, #8]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	4a6a      	ldr	r2, [pc, #424]	; (80026b4 <HAL_I2C_Init+0x274>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d802      	bhi.n	8002514 <HAL_I2C_Init+0xd4>
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	3301      	adds	r3, #1
 8002512:	e009      	b.n	8002528 <HAL_I2C_Init+0xe8>
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800251a:	fb02 f303 	mul.w	r3, r2, r3
 800251e:	4a69      	ldr	r2, [pc, #420]	; (80026c4 <HAL_I2C_Init+0x284>)
 8002520:	fba2 2303 	umull	r2, r3, r2, r3
 8002524:	099b      	lsrs	r3, r3, #6
 8002526:	3301      	adds	r3, #1
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	430b      	orrs	r3, r1
 800252e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800253a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	495c      	ldr	r1, [pc, #368]	; (80026b4 <HAL_I2C_Init+0x274>)
 8002544:	428b      	cmp	r3, r1
 8002546:	d819      	bhi.n	800257c <HAL_I2C_Init+0x13c>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	1e59      	subs	r1, r3, #1
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	fbb1 f3f3 	udiv	r3, r1, r3
 8002556:	1c59      	adds	r1, r3, #1
 8002558:	f640 73fc 	movw	r3, #4092	; 0xffc
 800255c:	400b      	ands	r3, r1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00a      	beq.n	8002578 <HAL_I2C_Init+0x138>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	1e59      	subs	r1, r3, #1
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002570:	3301      	adds	r3, #1
 8002572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002576:	e051      	b.n	800261c <HAL_I2C_Init+0x1dc>
 8002578:	2304      	movs	r3, #4
 800257a:	e04f      	b.n	800261c <HAL_I2C_Init+0x1dc>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d111      	bne.n	80025a8 <HAL_I2C_Init+0x168>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	1e58      	subs	r0, r3, #1
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6859      	ldr	r1, [r3, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	440b      	add	r3, r1
 8002592:	fbb0 f3f3 	udiv	r3, r0, r3
 8002596:	3301      	adds	r3, #1
 8002598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800259c:	2b00      	cmp	r3, #0
 800259e:	bf0c      	ite	eq
 80025a0:	2301      	moveq	r3, #1
 80025a2:	2300      	movne	r3, #0
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	e012      	b.n	80025ce <HAL_I2C_Init+0x18e>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	1e58      	subs	r0, r3, #1
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6859      	ldr	r1, [r3, #4]
 80025b0:	460b      	mov	r3, r1
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	0099      	lsls	r1, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80025be:	3301      	adds	r3, #1
 80025c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	bf0c      	ite	eq
 80025c8:	2301      	moveq	r3, #1
 80025ca:	2300      	movne	r3, #0
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_I2C_Init+0x196>
 80025d2:	2301      	movs	r3, #1
 80025d4:	e022      	b.n	800261c <HAL_I2C_Init+0x1dc>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10e      	bne.n	80025fc <HAL_I2C_Init+0x1bc>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	1e58      	subs	r0, r3, #1
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6859      	ldr	r1, [r3, #4]
 80025e6:	460b      	mov	r3, r1
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	440b      	add	r3, r1
 80025ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80025f0:	3301      	adds	r3, #1
 80025f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025fa:	e00f      	b.n	800261c <HAL_I2C_Init+0x1dc>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	1e58      	subs	r0, r3, #1
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6859      	ldr	r1, [r3, #4]
 8002604:	460b      	mov	r3, r1
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	0099      	lsls	r1, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002612:	3301      	adds	r3, #1
 8002614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002618:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	6809      	ldr	r1, [r1, #0]
 8002620:	4313      	orrs	r3, r2
 8002622:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69da      	ldr	r2, [r3, #28]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	431a      	orrs	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800264a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	6911      	ldr	r1, [r2, #16]
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	68d2      	ldr	r2, [r2, #12]
 8002656:	4311      	orrs	r1, r2
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6812      	ldr	r2, [r2, #0]
 800265c:	430b      	orrs	r3, r1
 800265e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	695a      	ldr	r2, [r3, #20]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 0201 	orr.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2220      	movs	r2, #32
 8002696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	000186a0 	.word	0x000186a0
 80026b8:	001e847f 	.word	0x001e847f
 80026bc:	003d08ff 	.word	0x003d08ff
 80026c0:	431bde83 	.word	0x431bde83
 80026c4:	10624dd3 	.word	0x10624dd3

080026c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af02      	add	r7, sp, #8
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	4608      	mov	r0, r1
 80026d2:	4611      	mov	r1, r2
 80026d4:	461a      	mov	r2, r3
 80026d6:	4603      	mov	r3, r0
 80026d8:	817b      	strh	r3, [r7, #10]
 80026da:	460b      	mov	r3, r1
 80026dc:	813b      	strh	r3, [r7, #8]
 80026de:	4613      	mov	r3, r2
 80026e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026e2:	f7fe fc49 	bl	8000f78 <HAL_GetTick>
 80026e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b20      	cmp	r3, #32
 80026f2:	f040 80d9 	bne.w	80028a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	2319      	movs	r3, #25
 80026fc:	2201      	movs	r2, #1
 80026fe:	496d      	ldr	r1, [pc, #436]	; (80028b4 <HAL_I2C_Mem_Write+0x1ec>)
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f000 fc7b 	bl	8002ffc <I2C_WaitOnFlagUntilTimeout>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800270c:	2302      	movs	r3, #2
 800270e:	e0cc      	b.n	80028aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002716:	2b01      	cmp	r3, #1
 8002718:	d101      	bne.n	800271e <HAL_I2C_Mem_Write+0x56>
 800271a:	2302      	movs	r3, #2
 800271c:	e0c5      	b.n	80028aa <HAL_I2C_Mem_Write+0x1e2>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b01      	cmp	r3, #1
 8002732:	d007      	beq.n	8002744 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0201 	orr.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002752:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2221      	movs	r2, #33	; 0x21
 8002758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2240      	movs	r2, #64	; 0x40
 8002760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6a3a      	ldr	r2, [r7, #32]
 800276e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002774:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800277a:	b29a      	uxth	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4a4d      	ldr	r2, [pc, #308]	; (80028b8 <HAL_I2C_Mem_Write+0x1f0>)
 8002784:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002786:	88f8      	ldrh	r0, [r7, #6]
 8002788:	893a      	ldrh	r2, [r7, #8]
 800278a:	8979      	ldrh	r1, [r7, #10]
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	9301      	str	r3, [sp, #4]
 8002790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	4603      	mov	r3, r0
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 fab6 	bl	8002d08 <I2C_RequestMemoryWrite>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d052      	beq.n	8002848 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e081      	b.n	80028aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f000 fcfc 	bl	80031a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00d      	beq.n	80027d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	d107      	bne.n	80027ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e06b      	b.n	80028aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	781a      	ldrb	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	1c5a      	adds	r2, r3, #1
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	3b01      	subs	r3, #1
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b04      	cmp	r3, #4
 800280e:	d11b      	bne.n	8002848 <HAL_I2C_Mem_Write+0x180>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002814:	2b00      	cmp	r3, #0
 8002816:	d017      	beq.n	8002848 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	781a      	ldrb	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	1c5a      	adds	r2, r3, #1
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002832:	3b01      	subs	r3, #1
 8002834:	b29a      	uxth	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283e:	b29b      	uxth	r3, r3
 8002840:	3b01      	subs	r3, #1
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1aa      	bne.n	80027a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 fce8 	bl	800322a <I2C_WaitOnBTFFlagUntilTimeout>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00d      	beq.n	800287c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	2b04      	cmp	r3, #4
 8002866:	d107      	bne.n	8002878 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002876:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e016      	b.n	80028aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800288a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2220      	movs	r2, #32
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028a4:	2300      	movs	r3, #0
 80028a6:	e000      	b.n	80028aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80028a8:	2302      	movs	r3, #2
  }
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	00100002 	.word	0x00100002
 80028b8:	ffff0000 	.word	0xffff0000

080028bc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08c      	sub	sp, #48	; 0x30
 80028c0:	af02      	add	r7, sp, #8
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	4608      	mov	r0, r1
 80028c6:	4611      	mov	r1, r2
 80028c8:	461a      	mov	r2, r3
 80028ca:	4603      	mov	r3, r0
 80028cc:	817b      	strh	r3, [r7, #10]
 80028ce:	460b      	mov	r3, r1
 80028d0:	813b      	strh	r3, [r7, #8]
 80028d2:	4613      	mov	r3, r2
 80028d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028d6:	f7fe fb4f 	bl	8000f78 <HAL_GetTick>
 80028da:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b20      	cmp	r3, #32
 80028e6:	f040 8208 	bne.w	8002cfa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	2319      	movs	r3, #25
 80028f0:	2201      	movs	r2, #1
 80028f2:	497b      	ldr	r1, [pc, #492]	; (8002ae0 <HAL_I2C_Mem_Read+0x224>)
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 fb81 	bl	8002ffc <I2C_WaitOnFlagUntilTimeout>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002900:	2302      	movs	r3, #2
 8002902:	e1fb      	b.n	8002cfc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800290a:	2b01      	cmp	r3, #1
 800290c:	d101      	bne.n	8002912 <HAL_I2C_Mem_Read+0x56>
 800290e:	2302      	movs	r3, #2
 8002910:	e1f4      	b.n	8002cfc <HAL_I2C_Mem_Read+0x440>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b01      	cmp	r3, #1
 8002926:	d007      	beq.n	8002938 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0201 	orr.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002946:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2222      	movs	r2, #34	; 0x22
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2240      	movs	r2, #64	; 0x40
 8002954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002962:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002968:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296e:	b29a      	uxth	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4a5b      	ldr	r2, [pc, #364]	; (8002ae4 <HAL_I2C_Mem_Read+0x228>)
 8002978:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800297a:	88f8      	ldrh	r0, [r7, #6]
 800297c:	893a      	ldrh	r2, [r7, #8]
 800297e:	8979      	ldrh	r1, [r7, #10]
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	9301      	str	r3, [sp, #4]
 8002984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	4603      	mov	r3, r0
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 fa50 	bl	8002e30 <I2C_RequestMemoryRead>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e1b0      	b.n	8002cfc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d113      	bne.n	80029ca <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029a2:	2300      	movs	r3, #0
 80029a4:	623b      	str	r3, [r7, #32]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	623b      	str	r3, [r7, #32]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	623b      	str	r3, [r7, #32]
 80029b6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	e184      	b.n	8002cd4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d11b      	bne.n	8002a0a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	61fb      	str	r3, [r7, #28]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	61fb      	str	r3, [r7, #28]
 80029f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	e164      	b.n	8002cd4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d11b      	bne.n	8002a4a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a20:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a32:	2300      	movs	r3, #0
 8002a34:	61bb      	str	r3, [r7, #24]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	61bb      	str	r3, [r7, #24]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	61bb      	str	r3, [r7, #24]
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	e144      	b.n	8002cd4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	617b      	str	r3, [r7, #20]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	617b      	str	r3, [r7, #20]
 8002a5e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002a60:	e138      	b.n	8002cd4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a66:	2b03      	cmp	r3, #3
 8002a68:	f200 80f1 	bhi.w	8002c4e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d123      	bne.n	8002abc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 fc17 	bl	80032ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e139      	b.n	8002cfc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691a      	ldr	r2, [r3, #16]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9a:	1c5a      	adds	r2, r3, #1
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002aba:	e10b      	b.n	8002cd4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d14e      	bne.n	8002b62 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aca:	2200      	movs	r2, #0
 8002acc:	4906      	ldr	r1, [pc, #24]	; (8002ae8 <HAL_I2C_Mem_Read+0x22c>)
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 fa94 	bl	8002ffc <I2C_WaitOnFlagUntilTimeout>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d008      	beq.n	8002aec <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e10e      	b.n	8002cfc <HAL_I2C_Mem_Read+0x440>
 8002ade:	bf00      	nop
 8002ae0:	00100002 	.word	0x00100002
 8002ae4:	ffff0000 	.word	0xffff0000
 8002ae8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002afa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	691a      	ldr	r2, [r3, #16]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	3b01      	subs	r3, #1
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	691a      	ldr	r2, [r3, #16]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b60:	e0b8      	b.n	8002cd4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b68:	2200      	movs	r2, #0
 8002b6a:	4966      	ldr	r1, [pc, #408]	; (8002d04 <HAL_I2C_Mem_Read+0x448>)
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f000 fa45 	bl	8002ffc <I2C_WaitOnFlagUntilTimeout>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e0bf      	b.n	8002cfc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	691a      	ldr	r2, [r3, #16]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	1c5a      	adds	r2, r3, #1
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	494f      	ldr	r1, [pc, #316]	; (8002d04 <HAL_I2C_Mem_Read+0x448>)
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 fa17 	bl	8002ffc <I2C_WaitOnFlagUntilTimeout>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e091      	b.n	8002cfc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002be6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	691a      	ldr	r2, [r3, #16]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	1c5a      	adds	r2, r3, #1
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	3b01      	subs	r3, #1
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	691a      	ldr	r2, [r3, #16]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	1c5a      	adds	r2, r3, #1
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c36:	3b01      	subs	r3, #1
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	3b01      	subs	r3, #1
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c4c:	e042      	b.n	8002cd4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 fb2a 	bl	80032ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e04c      	b.n	8002cfc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	691a      	ldr	r2, [r3, #16]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	1c5a      	adds	r2, r3, #1
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	f003 0304 	and.w	r3, r3, #4
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	d118      	bne.n	8002cd4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	691a      	ldr	r2, [r3, #16]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	1c5a      	adds	r2, r3, #1
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f47f aec2 	bne.w	8002a62 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	e000      	b.n	8002cfc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002cfa:	2302      	movs	r3, #2
  }
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3728      	adds	r7, #40	; 0x28
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	00010004 	.word	0x00010004

08002d08 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	4608      	mov	r0, r1
 8002d12:	4611      	mov	r1, r2
 8002d14:	461a      	mov	r2, r3
 8002d16:	4603      	mov	r3, r0
 8002d18:	817b      	strh	r3, [r7, #10]
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	813b      	strh	r3, [r7, #8]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 f95c 	bl	8002ffc <I2C_WaitOnFlagUntilTimeout>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00c      	beq.n	8002d64 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e05f      	b.n	8002e24 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d64:	897b      	ldrh	r3, [r7, #10]
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	461a      	mov	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d72:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	6a3a      	ldr	r2, [r7, #32]
 8002d78:	492c      	ldr	r1, [pc, #176]	; (8002e2c <I2C_RequestMemoryWrite+0x124>)
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 f995 	bl	80030aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e04c      	b.n	8002e24 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	617b      	str	r3, [r7, #20]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	617b      	str	r3, [r7, #20]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	617b      	str	r3, [r7, #20]
 8002d9e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da2:	6a39      	ldr	r1, [r7, #32]
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f000 f9ff 	bl	80031a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00d      	beq.n	8002dcc <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db4:	2b04      	cmp	r3, #4
 8002db6:	d107      	bne.n	8002dc8 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dc6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e02b      	b.n	8002e24 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dcc:	88fb      	ldrh	r3, [r7, #6]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d105      	bne.n	8002dde <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002dd2:	893b      	ldrh	r3, [r7, #8]
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	611a      	str	r2, [r3, #16]
 8002ddc:	e021      	b.n	8002e22 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002dde:	893b      	ldrh	r3, [r7, #8]
 8002de0:	0a1b      	lsrs	r3, r3, #8
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dee:	6a39      	ldr	r1, [r7, #32]
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 f9d9 	bl	80031a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00d      	beq.n	8002e18 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d107      	bne.n	8002e14 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e12:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e005      	b.n	8002e24 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e18:	893b      	ldrh	r3, [r7, #8]
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	00010002 	.word	0x00010002

08002e30 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b088      	sub	sp, #32
 8002e34:	af02      	add	r7, sp, #8
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	4608      	mov	r0, r1
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	4603      	mov	r3, r0
 8002e40:	817b      	strh	r3, [r7, #10]
 8002e42:	460b      	mov	r3, r1
 8002e44:	813b      	strh	r3, [r7, #8]
 8002e46:	4613      	mov	r3, r2
 8002e48:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e58:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 f8c0 	bl	8002ffc <I2C_WaitOnFlagUntilTimeout>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00c      	beq.n	8002e9c <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e0a9      	b.n	8002ff0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e9c:	897b      	ldrh	r3, [r7, #10]
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002eaa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	6a3a      	ldr	r2, [r7, #32]
 8002eb0:	4951      	ldr	r1, [pc, #324]	; (8002ff8 <I2C_RequestMemoryRead+0x1c8>)
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 f8f9 	bl	80030aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e096      	b.n	8002ff0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	617b      	str	r3, [r7, #20]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	617b      	str	r3, [r7, #20]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	617b      	str	r3, [r7, #20]
 8002ed6:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eda:	6a39      	ldr	r1, [r7, #32]
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 f963 	bl	80031a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00d      	beq.n	8002f04 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eec:	2b04      	cmp	r3, #4
 8002eee:	d107      	bne.n	8002f00 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002efe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e075      	b.n	8002ff0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f04:	88fb      	ldrh	r3, [r7, #6]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d105      	bne.n	8002f16 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f0a:	893b      	ldrh	r3, [r7, #8]
 8002f0c:	b2da      	uxtb	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	611a      	str	r2, [r3, #16]
 8002f14:	e021      	b.n	8002f5a <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f16:	893b      	ldrh	r3, [r7, #8]
 8002f18:	0a1b      	lsrs	r3, r3, #8
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f26:	6a39      	ldr	r1, [r7, #32]
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 f93d 	bl	80031a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00d      	beq.n	8002f50 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	d107      	bne.n	8002f4c <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f4a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e04f      	b.n	8002ff0 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f50:	893b      	ldrh	r3, [r7, #8]
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f5c:	6a39      	ldr	r1, [r7, #32]
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 f922 	bl	80031a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00d      	beq.n	8002f86 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d107      	bne.n	8002f82 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e034      	b.n	8002ff0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 f82a 	bl	8002ffc <I2C_WaitOnFlagUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00c      	beq.n	8002fc8 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d003      	beq.n	8002fc4 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e013      	b.n	8002ff0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002fc8:	897b      	ldrh	r3, [r7, #10]
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	6a3a      	ldr	r2, [r7, #32]
 8002fdc:	4906      	ldr	r1, [pc, #24]	; (8002ff8 <I2C_RequestMemoryRead+0x1c8>)
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 f863 	bl	80030aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e000      	b.n	8002ff0 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	00010002 	.word	0x00010002

08002ffc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	603b      	str	r3, [r7, #0]
 8003008:	4613      	mov	r3, r2
 800300a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800300c:	e025      	b.n	800305a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003014:	d021      	beq.n	800305a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003016:	f7fd ffaf 	bl	8000f78 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	429a      	cmp	r2, r3
 8003024:	d302      	bcc.n	800302c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d116      	bne.n	800305a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2220      	movs	r2, #32
 8003036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	f043 0220 	orr.w	r2, r3, #32
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e023      	b.n	80030a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	0c1b      	lsrs	r3, r3, #16
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b01      	cmp	r3, #1
 8003062:	d10d      	bne.n	8003080 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	43da      	mvns	r2, r3
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	4013      	ands	r3, r2
 8003070:	b29b      	uxth	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	bf0c      	ite	eq
 8003076:	2301      	moveq	r3, #1
 8003078:	2300      	movne	r3, #0
 800307a:	b2db      	uxtb	r3, r3
 800307c:	461a      	mov	r2, r3
 800307e:	e00c      	b.n	800309a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	43da      	mvns	r2, r3
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	4013      	ands	r3, r2
 800308c:	b29b      	uxth	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	bf0c      	ite	eq
 8003092:	2301      	moveq	r3, #1
 8003094:	2300      	movne	r3, #0
 8003096:	b2db      	uxtb	r3, r3
 8003098:	461a      	mov	r2, r3
 800309a:	79fb      	ldrb	r3, [r7, #7]
 800309c:	429a      	cmp	r2, r3
 800309e:	d0b6      	beq.n	800300e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b084      	sub	sp, #16
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	60f8      	str	r0, [r7, #12]
 80030b2:	60b9      	str	r1, [r7, #8]
 80030b4:	607a      	str	r2, [r7, #4]
 80030b6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030b8:	e051      	b.n	800315e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030c8:	d123      	bne.n	8003112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2220      	movs	r2, #32
 80030ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	f043 0204 	orr.w	r2, r3, #4
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e046      	b.n	80031a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003118:	d021      	beq.n	800315e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800311a:	f7fd ff2d 	bl	8000f78 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	429a      	cmp	r2, r3
 8003128:	d302      	bcc.n	8003130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d116      	bne.n	800315e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2220      	movs	r2, #32
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	f043 0220 	orr.w	r2, r3, #32
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e020      	b.n	80031a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	0c1b      	lsrs	r3, r3, #16
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b01      	cmp	r3, #1
 8003166:	d10c      	bne.n	8003182 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	43da      	mvns	r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	4013      	ands	r3, r2
 8003174:	b29b      	uxth	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	bf14      	ite	ne
 800317a:	2301      	movne	r3, #1
 800317c:	2300      	moveq	r3, #0
 800317e:	b2db      	uxtb	r3, r3
 8003180:	e00b      	b.n	800319a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	43da      	mvns	r2, r3
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	4013      	ands	r3, r2
 800318e:	b29b      	uxth	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	bf14      	ite	ne
 8003194:	2301      	movne	r3, #1
 8003196:	2300      	moveq	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d18d      	bne.n	80030ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031b4:	e02d      	b.n	8003212 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 f8ce 	bl	8003358 <I2C_IsAcknowledgeFailed>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e02d      	b.n	8003222 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031cc:	d021      	beq.n	8003212 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ce:	f7fd fed3 	bl	8000f78 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	68ba      	ldr	r2, [r7, #8]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d302      	bcc.n	80031e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d116      	bne.n	8003212 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2220      	movs	r2, #32
 80031ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	f043 0220 	orr.w	r2, r3, #32
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e007      	b.n	8003222 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800321c:	2b80      	cmp	r3, #128	; 0x80
 800321e:	d1ca      	bne.n	80031b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b084      	sub	sp, #16
 800322e:	af00      	add	r7, sp, #0
 8003230:	60f8      	str	r0, [r7, #12]
 8003232:	60b9      	str	r1, [r7, #8]
 8003234:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003236:	e02d      	b.n	8003294 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 f88d 	bl	8003358 <I2C_IsAcknowledgeFailed>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e02d      	b.n	80032a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324e:	d021      	beq.n	8003294 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003250:	f7fd fe92 	bl	8000f78 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	429a      	cmp	r2, r3
 800325e:	d302      	bcc.n	8003266 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d116      	bne.n	8003294 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2220      	movs	r2, #32
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	f043 0220 	orr.w	r2, r3, #32
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e007      	b.n	80032a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	f003 0304 	and.w	r3, r3, #4
 800329e:	2b04      	cmp	r3, #4
 80032a0:	d1ca      	bne.n	8003238 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032b8:	e042      	b.n	8003340 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	f003 0310 	and.w	r3, r3, #16
 80032c4:	2b10      	cmp	r3, #16
 80032c6:	d119      	bne.n	80032fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f06f 0210 	mvn.w	r2, #16
 80032d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2220      	movs	r2, #32
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e029      	b.n	8003350 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032fc:	f7fd fe3c 	bl	8000f78 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	429a      	cmp	r2, r3
 800330a:	d302      	bcc.n	8003312 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d116      	bne.n	8003340 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2220      	movs	r2, #32
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332c:	f043 0220 	orr.w	r2, r3, #32
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e007      	b.n	8003350 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334a:	2b40      	cmp	r3, #64	; 0x40
 800334c:	d1b5      	bne.n	80032ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800336a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800336e:	d11b      	bne.n	80033a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003378:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2220      	movs	r2, #32
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	f043 0204 	orr.w	r2, r3, #4
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e000      	b.n	80033aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
	...

080033b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e25e      	b.n	8003888 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d075      	beq.n	80034c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033d6:	4b88      	ldr	r3, [pc, #544]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 030c 	and.w	r3, r3, #12
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d00c      	beq.n	80033fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033e2:	4b85      	ldr	r3, [pc, #532]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d112      	bne.n	8003414 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ee:	4b82      	ldr	r3, [pc, #520]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033fa:	d10b      	bne.n	8003414 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033fc:	4b7e      	ldr	r3, [pc, #504]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d05b      	beq.n	80034c0 <HAL_RCC_OscConfig+0x108>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d157      	bne.n	80034c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e239      	b.n	8003888 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800341c:	d106      	bne.n	800342c <HAL_RCC_OscConfig+0x74>
 800341e:	4b76      	ldr	r3, [pc, #472]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a75      	ldr	r2, [pc, #468]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 8003424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	e01d      	b.n	8003468 <HAL_RCC_OscConfig+0xb0>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003434:	d10c      	bne.n	8003450 <HAL_RCC_OscConfig+0x98>
 8003436:	4b70      	ldr	r3, [pc, #448]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a6f      	ldr	r2, [pc, #444]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 800343c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	4b6d      	ldr	r3, [pc, #436]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a6c      	ldr	r2, [pc, #432]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 8003448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	e00b      	b.n	8003468 <HAL_RCC_OscConfig+0xb0>
 8003450:	4b69      	ldr	r3, [pc, #420]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a68      	ldr	r2, [pc, #416]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 8003456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800345a:	6013      	str	r3, [r2, #0]
 800345c:	4b66      	ldr	r3, [pc, #408]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a65      	ldr	r2, [pc, #404]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 8003462:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003466:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d013      	beq.n	8003498 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003470:	f7fd fd82 	bl	8000f78 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003478:	f7fd fd7e 	bl	8000f78 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b64      	cmp	r3, #100	; 0x64
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e1fe      	b.n	8003888 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348a:	4b5b      	ldr	r3, [pc, #364]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0f0      	beq.n	8003478 <HAL_RCC_OscConfig+0xc0>
 8003496:	e014      	b.n	80034c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003498:	f7fd fd6e 	bl	8000f78 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034a0:	f7fd fd6a 	bl	8000f78 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b64      	cmp	r3, #100	; 0x64
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e1ea      	b.n	8003888 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034b2:	4b51      	ldr	r3, [pc, #324]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1f0      	bne.n	80034a0 <HAL_RCC_OscConfig+0xe8>
 80034be:	e000      	b.n	80034c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d063      	beq.n	8003596 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034ce:	4b4a      	ldr	r3, [pc, #296]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 030c 	and.w	r3, r3, #12
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00b      	beq.n	80034f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034da:	4b47      	ldr	r3, [pc, #284]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034e2:	2b08      	cmp	r3, #8
 80034e4:	d11c      	bne.n	8003520 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034e6:	4b44      	ldr	r3, [pc, #272]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d116      	bne.n	8003520 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034f2:	4b41      	ldr	r3, [pc, #260]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d005      	beq.n	800350a <HAL_RCC_OscConfig+0x152>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d001      	beq.n	800350a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e1be      	b.n	8003888 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800350a:	4b3b      	ldr	r3, [pc, #236]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	4937      	ldr	r1, [pc, #220]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 800351a:	4313      	orrs	r3, r2
 800351c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800351e:	e03a      	b.n	8003596 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d020      	beq.n	800356a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003528:	4b34      	ldr	r3, [pc, #208]	; (80035fc <HAL_RCC_OscConfig+0x244>)
 800352a:	2201      	movs	r2, #1
 800352c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352e:	f7fd fd23 	bl	8000f78 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003536:	f7fd fd1f 	bl	8000f78 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e19f      	b.n	8003888 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003548:	4b2b      	ldr	r3, [pc, #172]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d0f0      	beq.n	8003536 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003554:	4b28      	ldr	r3, [pc, #160]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	4925      	ldr	r1, [pc, #148]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 8003564:	4313      	orrs	r3, r2
 8003566:	600b      	str	r3, [r1, #0]
 8003568:	e015      	b.n	8003596 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800356a:	4b24      	ldr	r3, [pc, #144]	; (80035fc <HAL_RCC_OscConfig+0x244>)
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003570:	f7fd fd02 	bl	8000f78 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003578:	f7fd fcfe 	bl	8000f78 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e17e      	b.n	8003888 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800358a:	4b1b      	ldr	r3, [pc, #108]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f0      	bne.n	8003578 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0308 	and.w	r3, r3, #8
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d036      	beq.n	8003610 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d016      	beq.n	80035d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035aa:	4b15      	ldr	r3, [pc, #84]	; (8003600 <HAL_RCC_OscConfig+0x248>)
 80035ac:	2201      	movs	r2, #1
 80035ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b0:	f7fd fce2 	bl	8000f78 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035b8:	f7fd fcde 	bl	8000f78 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e15e      	b.n	8003888 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ca:	4b0b      	ldr	r3, [pc, #44]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 80035cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0f0      	beq.n	80035b8 <HAL_RCC_OscConfig+0x200>
 80035d6:	e01b      	b.n	8003610 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035d8:	4b09      	ldr	r3, [pc, #36]	; (8003600 <HAL_RCC_OscConfig+0x248>)
 80035da:	2200      	movs	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035de:	f7fd fccb 	bl	8000f78 <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035e4:	e00e      	b.n	8003604 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035e6:	f7fd fcc7 	bl	8000f78 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d907      	bls.n	8003604 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e147      	b.n	8003888 <HAL_RCC_OscConfig+0x4d0>
 80035f8:	40023800 	.word	0x40023800
 80035fc:	42470000 	.word	0x42470000
 8003600:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003604:	4b88      	ldr	r3, [pc, #544]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 8003606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1ea      	bne.n	80035e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 8097 	beq.w	800374c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800361e:	2300      	movs	r3, #0
 8003620:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003622:	4b81      	ldr	r3, [pc, #516]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10f      	bne.n	800364e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800362e:	2300      	movs	r3, #0
 8003630:	60bb      	str	r3, [r7, #8]
 8003632:	4b7d      	ldr	r3, [pc, #500]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	4a7c      	ldr	r2, [pc, #496]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 8003638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800363c:	6413      	str	r3, [r2, #64]	; 0x40
 800363e:	4b7a      	ldr	r3, [pc, #488]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003646:	60bb      	str	r3, [r7, #8]
 8003648:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800364a:	2301      	movs	r3, #1
 800364c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800364e:	4b77      	ldr	r3, [pc, #476]	; (800382c <HAL_RCC_OscConfig+0x474>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003656:	2b00      	cmp	r3, #0
 8003658:	d118      	bne.n	800368c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800365a:	4b74      	ldr	r3, [pc, #464]	; (800382c <HAL_RCC_OscConfig+0x474>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a73      	ldr	r2, [pc, #460]	; (800382c <HAL_RCC_OscConfig+0x474>)
 8003660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003664:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003666:	f7fd fc87 	bl	8000f78 <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800366e:	f7fd fc83 	bl	8000f78 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e103      	b.n	8003888 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003680:	4b6a      	ldr	r3, [pc, #424]	; (800382c <HAL_RCC_OscConfig+0x474>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0f0      	beq.n	800366e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d106      	bne.n	80036a2 <HAL_RCC_OscConfig+0x2ea>
 8003694:	4b64      	ldr	r3, [pc, #400]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 8003696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003698:	4a63      	ldr	r2, [pc, #396]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 800369a:	f043 0301 	orr.w	r3, r3, #1
 800369e:	6713      	str	r3, [r2, #112]	; 0x70
 80036a0:	e01c      	b.n	80036dc <HAL_RCC_OscConfig+0x324>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	2b05      	cmp	r3, #5
 80036a8:	d10c      	bne.n	80036c4 <HAL_RCC_OscConfig+0x30c>
 80036aa:	4b5f      	ldr	r3, [pc, #380]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 80036ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ae:	4a5e      	ldr	r2, [pc, #376]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 80036b0:	f043 0304 	orr.w	r3, r3, #4
 80036b4:	6713      	str	r3, [r2, #112]	; 0x70
 80036b6:	4b5c      	ldr	r3, [pc, #368]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 80036b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ba:	4a5b      	ldr	r2, [pc, #364]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 80036bc:	f043 0301 	orr.w	r3, r3, #1
 80036c0:	6713      	str	r3, [r2, #112]	; 0x70
 80036c2:	e00b      	b.n	80036dc <HAL_RCC_OscConfig+0x324>
 80036c4:	4b58      	ldr	r3, [pc, #352]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 80036c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c8:	4a57      	ldr	r2, [pc, #348]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 80036ca:	f023 0301 	bic.w	r3, r3, #1
 80036ce:	6713      	str	r3, [r2, #112]	; 0x70
 80036d0:	4b55      	ldr	r3, [pc, #340]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 80036d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d4:	4a54      	ldr	r2, [pc, #336]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 80036d6:	f023 0304 	bic.w	r3, r3, #4
 80036da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d015      	beq.n	8003710 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e4:	f7fd fc48 	bl	8000f78 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ea:	e00a      	b.n	8003702 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ec:	f7fd fc44 	bl	8000f78 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e0c2      	b.n	8003888 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003702:	4b49      	ldr	r3, [pc, #292]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 8003704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0ee      	beq.n	80036ec <HAL_RCC_OscConfig+0x334>
 800370e:	e014      	b.n	800373a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003710:	f7fd fc32 	bl	8000f78 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003716:	e00a      	b.n	800372e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003718:	f7fd fc2e 	bl	8000f78 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	f241 3288 	movw	r2, #5000	; 0x1388
 8003726:	4293      	cmp	r3, r2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e0ac      	b.n	8003888 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800372e:	4b3e      	ldr	r3, [pc, #248]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 8003730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1ee      	bne.n	8003718 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800373a:	7dfb      	ldrb	r3, [r7, #23]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d105      	bne.n	800374c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003740:	4b39      	ldr	r3, [pc, #228]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	4a38      	ldr	r2, [pc, #224]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 8003746:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800374a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 8098 	beq.w	8003886 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003756:	4b34      	ldr	r3, [pc, #208]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 030c 	and.w	r3, r3, #12
 800375e:	2b08      	cmp	r3, #8
 8003760:	d05c      	beq.n	800381c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	2b02      	cmp	r3, #2
 8003768:	d141      	bne.n	80037ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800376a:	4b31      	ldr	r3, [pc, #196]	; (8003830 <HAL_RCC_OscConfig+0x478>)
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003770:	f7fd fc02 	bl	8000f78 <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003778:	f7fd fbfe 	bl	8000f78 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e07e      	b.n	8003888 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800378a:	4b27      	ldr	r3, [pc, #156]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1f0      	bne.n	8003778 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69da      	ldr	r2, [r3, #28]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	431a      	orrs	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	019b      	lsls	r3, r3, #6
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ac:	085b      	lsrs	r3, r3, #1
 80037ae:	3b01      	subs	r3, #1
 80037b0:	041b      	lsls	r3, r3, #16
 80037b2:	431a      	orrs	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b8:	061b      	lsls	r3, r3, #24
 80037ba:	491b      	ldr	r1, [pc, #108]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037c0:	4b1b      	ldr	r3, [pc, #108]	; (8003830 <HAL_RCC_OscConfig+0x478>)
 80037c2:	2201      	movs	r2, #1
 80037c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c6:	f7fd fbd7 	bl	8000f78 <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ce:	f7fd fbd3 	bl	8000f78 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e053      	b.n	8003888 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e0:	4b11      	ldr	r3, [pc, #68]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0f0      	beq.n	80037ce <HAL_RCC_OscConfig+0x416>
 80037ec:	e04b      	b.n	8003886 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ee:	4b10      	ldr	r3, [pc, #64]	; (8003830 <HAL_RCC_OscConfig+0x478>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f4:	f7fd fbc0 	bl	8000f78 <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037fc:	f7fd fbbc 	bl	8000f78 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e03c      	b.n	8003888 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800380e:	4b06      	ldr	r3, [pc, #24]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1f0      	bne.n	80037fc <HAL_RCC_OscConfig+0x444>
 800381a:	e034      	b.n	8003886 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d107      	bne.n	8003834 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e02f      	b.n	8003888 <HAL_RCC_OscConfig+0x4d0>
 8003828:	40023800 	.word	0x40023800
 800382c:	40007000 	.word	0x40007000
 8003830:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003834:	4b16      	ldr	r3, [pc, #88]	; (8003890 <HAL_RCC_OscConfig+0x4d8>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	429a      	cmp	r2, r3
 8003846:	d11c      	bne.n	8003882 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003852:	429a      	cmp	r2, r3
 8003854:	d115      	bne.n	8003882 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800385c:	4013      	ands	r3, r2
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003862:	4293      	cmp	r3, r2
 8003864:	d10d      	bne.n	8003882 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003870:	429a      	cmp	r2, r3
 8003872:	d106      	bne.n	8003882 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800387e:	429a      	cmp	r2, r3
 8003880:	d001      	beq.n	8003886 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e000      	b.n	8003888 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3718      	adds	r7, #24
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	40023800 	.word	0x40023800

08003894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e0cc      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038a8:	4b68      	ldr	r3, [pc, #416]	; (8003a4c <HAL_RCC_ClockConfig+0x1b8>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 030f 	and.w	r3, r3, #15
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d90c      	bls.n	80038d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038b6:	4b65      	ldr	r3, [pc, #404]	; (8003a4c <HAL_RCC_ClockConfig+0x1b8>)
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	b2d2      	uxtb	r2, r2
 80038bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038be:	4b63      	ldr	r3, [pc, #396]	; (8003a4c <HAL_RCC_ClockConfig+0x1b8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d001      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e0b8      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d020      	beq.n	800391e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038e8:	4b59      	ldr	r3, [pc, #356]	; (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	4a58      	ldr	r2, [pc, #352]	; (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0308 	and.w	r3, r3, #8
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d005      	beq.n	800390c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003900:	4b53      	ldr	r3, [pc, #332]	; (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	4a52      	ldr	r2, [pc, #328]	; (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 8003906:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800390a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800390c:	4b50      	ldr	r3, [pc, #320]	; (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	494d      	ldr	r1, [pc, #308]	; (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 800391a:	4313      	orrs	r3, r2
 800391c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d044      	beq.n	80039b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d107      	bne.n	8003942 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003932:	4b47      	ldr	r3, [pc, #284]	; (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d119      	bne.n	8003972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e07f      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2b02      	cmp	r3, #2
 8003948:	d003      	beq.n	8003952 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800394e:	2b03      	cmp	r3, #3
 8003950:	d107      	bne.n	8003962 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003952:	4b3f      	ldr	r3, [pc, #252]	; (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d109      	bne.n	8003972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e06f      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003962:	4b3b      	ldr	r3, [pc, #236]	; (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e067      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003972:	4b37      	ldr	r3, [pc, #220]	; (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f023 0203 	bic.w	r2, r3, #3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	4934      	ldr	r1, [pc, #208]	; (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 8003980:	4313      	orrs	r3, r2
 8003982:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003984:	f7fd faf8 	bl	8000f78 <HAL_GetTick>
 8003988:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800398a:	e00a      	b.n	80039a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800398c:	f7fd faf4 	bl	8000f78 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	f241 3288 	movw	r2, #5000	; 0x1388
 800399a:	4293      	cmp	r3, r2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e04f      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039a2:	4b2b      	ldr	r3, [pc, #172]	; (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f003 020c 	and.w	r2, r3, #12
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d1eb      	bne.n	800398c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039b4:	4b25      	ldr	r3, [pc, #148]	; (8003a4c <HAL_RCC_ClockConfig+0x1b8>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 030f 	and.w	r3, r3, #15
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d20c      	bcs.n	80039dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039c2:	4b22      	ldr	r3, [pc, #136]	; (8003a4c <HAL_RCC_ClockConfig+0x1b8>)
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ca:	4b20      	ldr	r3, [pc, #128]	; (8003a4c <HAL_RCC_ClockConfig+0x1b8>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d001      	beq.n	80039dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e032      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0304 	and.w	r3, r3, #4
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d008      	beq.n	80039fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039e8:	4b19      	ldr	r3, [pc, #100]	; (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	4916      	ldr	r1, [pc, #88]	; (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0308 	and.w	r3, r3, #8
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d009      	beq.n	8003a1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a06:	4b12      	ldr	r3, [pc, #72]	; (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	490e      	ldr	r1, [pc, #56]	; (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a1a:	f000 f821 	bl	8003a60 <HAL_RCC_GetSysClockFreq>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	091b      	lsrs	r3, r3, #4
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	490a      	ldr	r1, [pc, #40]	; (8003a54 <HAL_RCC_ClockConfig+0x1c0>)
 8003a2c:	5ccb      	ldrb	r3, [r1, r3]
 8003a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a32:	4a09      	ldr	r2, [pc, #36]	; (8003a58 <HAL_RCC_ClockConfig+0x1c4>)
 8003a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a36:	4b09      	ldr	r3, [pc, #36]	; (8003a5c <HAL_RCC_ClockConfig+0x1c8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fd fa58 	bl	8000ef0 <HAL_InitTick>

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	40023c00 	.word	0x40023c00
 8003a50:	40023800 	.word	0x40023800
 8003a54:	0801033c 	.word	0x0801033c
 8003a58:	2000000c 	.word	0x2000000c
 8003a5c:	20000000 	.word	0x20000000

08003a60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a64:	b094      	sub	sp, #80	; 0x50
 8003a66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	647b      	str	r3, [r7, #68]	; 0x44
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a70:	2300      	movs	r3, #0
 8003a72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003a74:	2300      	movs	r3, #0
 8003a76:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a78:	4b79      	ldr	r3, [pc, #484]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 030c 	and.w	r3, r3, #12
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d00d      	beq.n	8003aa0 <HAL_RCC_GetSysClockFreq+0x40>
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	f200 80e1 	bhi.w	8003c4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d002      	beq.n	8003a94 <HAL_RCC_GetSysClockFreq+0x34>
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d003      	beq.n	8003a9a <HAL_RCC_GetSysClockFreq+0x3a>
 8003a92:	e0db      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a94:	4b73      	ldr	r3, [pc, #460]	; (8003c64 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a96:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003a98:	e0db      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a9a:	4b73      	ldr	r3, [pc, #460]	; (8003c68 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a9e:	e0d8      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003aa0:	4b6f      	ldr	r3, [pc, #444]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003aa8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aaa:	4b6d      	ldr	r3, [pc, #436]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d063      	beq.n	8003b7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ab6:	4b6a      	ldr	r3, [pc, #424]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	099b      	lsrs	r3, r3, #6
 8003abc:	2200      	movs	r2, #0
 8003abe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ac0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ac8:	633b      	str	r3, [r7, #48]	; 0x30
 8003aca:	2300      	movs	r3, #0
 8003acc:	637b      	str	r3, [r7, #52]	; 0x34
 8003ace:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ad2:	4622      	mov	r2, r4
 8003ad4:	462b      	mov	r3, r5
 8003ad6:	f04f 0000 	mov.w	r0, #0
 8003ada:	f04f 0100 	mov.w	r1, #0
 8003ade:	0159      	lsls	r1, r3, #5
 8003ae0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ae4:	0150      	lsls	r0, r2, #5
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	460b      	mov	r3, r1
 8003aea:	4621      	mov	r1, r4
 8003aec:	1a51      	subs	r1, r2, r1
 8003aee:	6139      	str	r1, [r7, #16]
 8003af0:	4629      	mov	r1, r5
 8003af2:	eb63 0301 	sbc.w	r3, r3, r1
 8003af6:	617b      	str	r3, [r7, #20]
 8003af8:	f04f 0200 	mov.w	r2, #0
 8003afc:	f04f 0300 	mov.w	r3, #0
 8003b00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b04:	4659      	mov	r1, fp
 8003b06:	018b      	lsls	r3, r1, #6
 8003b08:	4651      	mov	r1, sl
 8003b0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b0e:	4651      	mov	r1, sl
 8003b10:	018a      	lsls	r2, r1, #6
 8003b12:	4651      	mov	r1, sl
 8003b14:	ebb2 0801 	subs.w	r8, r2, r1
 8003b18:	4659      	mov	r1, fp
 8003b1a:	eb63 0901 	sbc.w	r9, r3, r1
 8003b1e:	f04f 0200 	mov.w	r2, #0
 8003b22:	f04f 0300 	mov.w	r3, #0
 8003b26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b32:	4690      	mov	r8, r2
 8003b34:	4699      	mov	r9, r3
 8003b36:	4623      	mov	r3, r4
 8003b38:	eb18 0303 	adds.w	r3, r8, r3
 8003b3c:	60bb      	str	r3, [r7, #8]
 8003b3e:	462b      	mov	r3, r5
 8003b40:	eb49 0303 	adc.w	r3, r9, r3
 8003b44:	60fb      	str	r3, [r7, #12]
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	f04f 0300 	mov.w	r3, #0
 8003b4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b52:	4629      	mov	r1, r5
 8003b54:	024b      	lsls	r3, r1, #9
 8003b56:	4621      	mov	r1, r4
 8003b58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b5c:	4621      	mov	r1, r4
 8003b5e:	024a      	lsls	r2, r1, #9
 8003b60:	4610      	mov	r0, r2
 8003b62:	4619      	mov	r1, r3
 8003b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b66:	2200      	movs	r2, #0
 8003b68:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b70:	f7fd f81a 	bl	8000ba8 <__aeabi_uldivmod>
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	4613      	mov	r3, r2
 8003b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b7c:	e058      	b.n	8003c30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b7e:	4b38      	ldr	r3, [pc, #224]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	099b      	lsrs	r3, r3, #6
 8003b84:	2200      	movs	r2, #0
 8003b86:	4618      	mov	r0, r3
 8003b88:	4611      	mov	r1, r2
 8003b8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b8e:	623b      	str	r3, [r7, #32]
 8003b90:	2300      	movs	r3, #0
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24
 8003b94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b98:	4642      	mov	r2, r8
 8003b9a:	464b      	mov	r3, r9
 8003b9c:	f04f 0000 	mov.w	r0, #0
 8003ba0:	f04f 0100 	mov.w	r1, #0
 8003ba4:	0159      	lsls	r1, r3, #5
 8003ba6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003baa:	0150      	lsls	r0, r2, #5
 8003bac:	4602      	mov	r2, r0
 8003bae:	460b      	mov	r3, r1
 8003bb0:	4641      	mov	r1, r8
 8003bb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bb6:	4649      	mov	r1, r9
 8003bb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	f04f 0300 	mov.w	r3, #0
 8003bc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003bc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003bcc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003bd0:	ebb2 040a 	subs.w	r4, r2, sl
 8003bd4:	eb63 050b 	sbc.w	r5, r3, fp
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	f04f 0300 	mov.w	r3, #0
 8003be0:	00eb      	lsls	r3, r5, #3
 8003be2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003be6:	00e2      	lsls	r2, r4, #3
 8003be8:	4614      	mov	r4, r2
 8003bea:	461d      	mov	r5, r3
 8003bec:	4643      	mov	r3, r8
 8003bee:	18e3      	adds	r3, r4, r3
 8003bf0:	603b      	str	r3, [r7, #0]
 8003bf2:	464b      	mov	r3, r9
 8003bf4:	eb45 0303 	adc.w	r3, r5, r3
 8003bf8:	607b      	str	r3, [r7, #4]
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c06:	4629      	mov	r1, r5
 8003c08:	028b      	lsls	r3, r1, #10
 8003c0a:	4621      	mov	r1, r4
 8003c0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c10:	4621      	mov	r1, r4
 8003c12:	028a      	lsls	r2, r1, #10
 8003c14:	4610      	mov	r0, r2
 8003c16:	4619      	mov	r1, r3
 8003c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	61bb      	str	r3, [r7, #24]
 8003c1e:	61fa      	str	r2, [r7, #28]
 8003c20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c24:	f7fc ffc0 	bl	8000ba8 <__aeabi_uldivmod>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c30:	4b0b      	ldr	r3, [pc, #44]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	0c1b      	lsrs	r3, r3, #16
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003c40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c4a:	e002      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c4c:	4b05      	ldr	r3, [pc, #20]	; (8003c64 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3750      	adds	r7, #80	; 0x50
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c5e:	bf00      	nop
 8003c60:	40023800 	.word	0x40023800
 8003c64:	00f42400 	.word	0x00f42400
 8003c68:	007a1200 	.word	0x007a1200

08003c6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c70:	4b03      	ldr	r3, [pc, #12]	; (8003c80 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c72:	681b      	ldr	r3, [r3, #0]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	2000000c 	.word	0x2000000c

08003c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c88:	f7ff fff0 	bl	8003c6c <HAL_RCC_GetHCLKFreq>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	4b05      	ldr	r3, [pc, #20]	; (8003ca4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	0a9b      	lsrs	r3, r3, #10
 8003c94:	f003 0307 	and.w	r3, r3, #7
 8003c98:	4903      	ldr	r1, [pc, #12]	; (8003ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c9a:	5ccb      	ldrb	r3, [r1, r3]
 8003c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	0801034c 	.word	0x0801034c

08003cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003cb0:	f7ff ffdc 	bl	8003c6c <HAL_RCC_GetHCLKFreq>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	4b05      	ldr	r3, [pc, #20]	; (8003ccc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	0b5b      	lsrs	r3, r3, #13
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	4903      	ldr	r1, [pc, #12]	; (8003cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cc2:	5ccb      	ldrb	r3, [r1, r3]
 8003cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	0801034c 	.word	0x0801034c

08003cd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e03f      	b.n	8003d66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d106      	bne.n	8003d00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f008 fc60 	bl	800c5c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2224      	movs	r2, #36	; 0x24
 8003d04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68da      	ldr	r2, [r3, #12]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 fbdb 	bl	80044d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	691a      	ldr	r2, [r3, #16]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695a      	ldr	r2, [r3, #20]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68da      	ldr	r2, [r3, #12]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2220      	movs	r2, #32
 8003d58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b088      	sub	sp, #32
 8003d72:	af02      	add	r7, sp, #8
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	603b      	str	r3, [r7, #0]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b20      	cmp	r3, #32
 8003d8c:	f040 8083 	bne.w	8003e96 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <HAL_UART_Transmit+0x2e>
 8003d96:	88fb      	ldrh	r3, [r7, #6]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e07b      	b.n	8003e98 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d101      	bne.n	8003dae <HAL_UART_Transmit+0x40>
 8003daa:	2302      	movs	r3, #2
 8003dac:	e074      	b.n	8003e98 <HAL_UART_Transmit+0x12a>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2221      	movs	r2, #33	; 0x21
 8003dc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003dc4:	f7fd f8d8 	bl	8000f78 <HAL_GetTick>
 8003dc8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	88fa      	ldrh	r2, [r7, #6]
 8003dce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	88fa      	ldrh	r2, [r7, #6]
 8003dd4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003dde:	e042      	b.n	8003e66 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003df6:	d122      	bne.n	8003e3e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	2180      	movs	r1, #128	; 0x80
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f000 f9fa 	bl	80041fc <UART_WaitOnFlagUntilTimeout>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e042      	b.n	8003e98 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e24:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d103      	bne.n	8003e36 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	3302      	adds	r3, #2
 8003e32:	60bb      	str	r3, [r7, #8]
 8003e34:	e017      	b.n	8003e66 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	60bb      	str	r3, [r7, #8]
 8003e3c:	e013      	b.n	8003e66 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	2200      	movs	r2, #0
 8003e46:	2180      	movs	r1, #128	; 0x80
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 f9d7 	bl	80041fc <UART_WaitOnFlagUntilTimeout>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e01f      	b.n	8003e98 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	1c5a      	adds	r2, r3, #1
 8003e5c:	60ba      	str	r2, [r7, #8]
 8003e5e:	781a      	ldrb	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1b7      	bne.n	8003de0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	2200      	movs	r2, #0
 8003e78:	2140      	movs	r1, #64	; 0x40
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 f9be 	bl	80041fc <UART_WaitOnFlagUntilTimeout>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e006      	b.n	8003e98 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	e000      	b.n	8003e98 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003e96:	2302      	movs	r3, #2
  }
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3718      	adds	r7, #24
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b20      	cmp	r3, #32
 8003eb8:	d130      	bne.n	8003f1c <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <HAL_UART_Transmit_IT+0x26>
 8003ec0:	88fb      	ldrh	r3, [r7, #6]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e029      	b.n	8003f1e <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d101      	bne.n	8003ed8 <HAL_UART_Transmit_IT+0x38>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	e022      	b.n	8003f1e <HAL_UART_Transmit_IT+0x7e>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	88fa      	ldrh	r2, [r7, #6]
 8003eea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	88fa      	ldrh	r2, [r7, #6]
 8003ef0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2221      	movs	r2, #33	; 0x21
 8003efc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68da      	ldr	r2, [r3, #12]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f16:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	e000      	b.n	8003f1e <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003f1c:	2302      	movs	r3, #2
  }
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b085      	sub	sp, #20
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	60f8      	str	r0, [r7, #12]
 8003f32:	60b9      	str	r1, [r7, #8]
 8003f34:	4613      	mov	r3, r2
 8003f36:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b20      	cmp	r3, #32
 8003f42:	d140      	bne.n	8003fc6 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d002      	beq.n	8003f50 <HAL_UART_Receive_IT+0x26>
 8003f4a:	88fb      	ldrh	r3, [r7, #6]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e039      	b.n	8003fc8 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d101      	bne.n	8003f62 <HAL_UART_Receive_IT+0x38>
 8003f5e:	2302      	movs	r3, #2
 8003f60:	e032      	b.n	8003fc8 <HAL_UART_Receive_IT+0x9e>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	88fa      	ldrh	r2, [r7, #6]
 8003f74:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	88fa      	ldrh	r2, [r7, #6]
 8003f7a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2222      	movs	r2, #34	; 0x22
 8003f86:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68da      	ldr	r2, [r3, #12]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fa0:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	695a      	ldr	r2, [r3, #20]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f042 0201 	orr.w	r2, r2, #1
 8003fb0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68da      	ldr	r2, [r3, #12]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f042 0220 	orr.w	r2, r2, #32
 8003fc0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	e000      	b.n	8003fc8 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003fc6:	2302      	movs	r3, #2
  }
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3714      	adds	r7, #20
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b088      	sub	sp, #32
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	f003 030f 	and.w	r3, r3, #15
 8004002:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10d      	bne.n	8004026 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	f003 0320 	and.w	r3, r3, #32
 8004010:	2b00      	cmp	r3, #0
 8004012:	d008      	beq.n	8004026 <HAL_UART_IRQHandler+0x52>
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	f003 0320 	and.w	r3, r3, #32
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f9d6 	bl	80043d0 <UART_Receive_IT>
      return;
 8004024:	e0d0      	b.n	80041c8 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 80b0 	beq.w	800418e <HAL_UART_IRQHandler+0x1ba>
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b00      	cmp	r3, #0
 8004036:	d105      	bne.n	8004044 <HAL_UART_IRQHandler+0x70>
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800403e:	2b00      	cmp	r3, #0
 8004040:	f000 80a5 	beq.w	800418e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00a      	beq.n	8004064 <HAL_UART_IRQHandler+0x90>
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004054:	2b00      	cmp	r3, #0
 8004056:	d005      	beq.n	8004064 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800405c:	f043 0201 	orr.w	r2, r3, #1
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	f003 0304 	and.w	r3, r3, #4
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00a      	beq.n	8004084 <HAL_UART_IRQHandler+0xb0>
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	d005      	beq.n	8004084 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407c:	f043 0202 	orr.w	r2, r3, #2
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00a      	beq.n	80040a4 <HAL_UART_IRQHandler+0xd0>
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b00      	cmp	r3, #0
 8004096:	d005      	beq.n	80040a4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800409c:	f043 0204 	orr.w	r2, r3, #4
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	f003 0308 	and.w	r3, r3, #8
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00f      	beq.n	80040ce <HAL_UART_IRQHandler+0xfa>
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	f003 0320 	and.w	r3, r3, #32
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d104      	bne.n	80040c2 <HAL_UART_IRQHandler+0xee>
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d005      	beq.n	80040ce <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c6:	f043 0208 	orr.w	r2, r3, #8
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d077      	beq.n	80041c6 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	f003 0320 	and.w	r3, r3, #32
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d007      	beq.n	80040f0 <HAL_UART_IRQHandler+0x11c>
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	f003 0320 	and.w	r3, r3, #32
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d002      	beq.n	80040f0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f970 	bl	80043d0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fa:	2b40      	cmp	r3, #64	; 0x40
 80040fc:	bf0c      	ite	eq
 80040fe:	2301      	moveq	r3, #1
 8004100:	2300      	movne	r3, #0
 8004102:	b2db      	uxtb	r3, r3
 8004104:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410a:	f003 0308 	and.w	r3, r3, #8
 800410e:	2b00      	cmp	r3, #0
 8004110:	d102      	bne.n	8004118 <HAL_UART_IRQHandler+0x144>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d031      	beq.n	800417c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f8b9 	bl	8004290 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004128:	2b40      	cmp	r3, #64	; 0x40
 800412a:	d123      	bne.n	8004174 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	695a      	ldr	r2, [r3, #20]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800413a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004140:	2b00      	cmp	r3, #0
 8004142:	d013      	beq.n	800416c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004148:	4a21      	ldr	r2, [pc, #132]	; (80041d0 <HAL_UART_IRQHandler+0x1fc>)
 800414a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004150:	4618      	mov	r0, r3
 8004152:	f7fd fd4d 	bl	8001bf0 <HAL_DMA_Abort_IT>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d016      	beq.n	800418a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004166:	4610      	mov	r0, r2
 8004168:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800416a:	e00e      	b.n	800418a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 f83b 	bl	80041e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004172:	e00a      	b.n	800418a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f837 	bl	80041e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800417a:	e006      	b.n	800418a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f833 	bl	80041e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004188:	e01d      	b.n	80041c6 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800418a:	bf00      	nop
    return;
 800418c:	e01b      	b.n	80041c6 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004194:	2b00      	cmp	r3, #0
 8004196:	d008      	beq.n	80041aa <HAL_UART_IRQHandler+0x1d6>
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f8a6 	bl	80042f4 <UART_Transmit_IT>
    return;
 80041a8:	e00e      	b.n	80041c8 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d009      	beq.n	80041c8 <HAL_UART_IRQHandler+0x1f4>
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d004      	beq.n	80041c8 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f8ee 	bl	80043a0 <UART_EndTransmit_IT>
    return;
 80041c4:	e000      	b.n	80041c8 <HAL_UART_IRQHandler+0x1f4>
    return;
 80041c6:	bf00      	nop
  }
}
 80041c8:	3720      	adds	r7, #32
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	080042cd 	.word	0x080042cd

080041d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	603b      	str	r3, [r7, #0]
 8004208:	4613      	mov	r3, r2
 800420a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800420c:	e02c      	b.n	8004268 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004214:	d028      	beq.n	8004268 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d007      	beq.n	800422c <UART_WaitOnFlagUntilTimeout+0x30>
 800421c:	f7fc feac 	bl	8000f78 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	429a      	cmp	r2, r3
 800422a:	d21d      	bcs.n	8004268 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800423a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695a      	ldr	r2, [r3, #20]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 0201 	bic.w	r2, r2, #1
 800424a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2220      	movs	r2, #32
 8004250:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2220      	movs	r2, #32
 8004258:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e00f      	b.n	8004288 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	4013      	ands	r3, r2
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	429a      	cmp	r2, r3
 8004276:	bf0c      	ite	eq
 8004278:	2301      	moveq	r3, #1
 800427a:	2300      	movne	r3, #0
 800427c:	b2db      	uxtb	r3, r3
 800427e:	461a      	mov	r2, r3
 8004280:	79fb      	ldrb	r3, [r7, #7]
 8004282:	429a      	cmp	r2, r3
 8004284:	d0c3      	beq.n	800420e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80042a6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	695a      	ldr	r2, [r3, #20]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 0201 	bic.w	r2, r2, #1
 80042b6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2220      	movs	r2, #32
 80042bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f7ff ff7e 	bl	80041e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042ec:	bf00      	nop
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b21      	cmp	r3, #33	; 0x21
 8004306:	d144      	bne.n	8004392 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004310:	d11a      	bne.n	8004348 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	881b      	ldrh	r3, [r3, #0]
 800431c:	461a      	mov	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004326:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d105      	bne.n	800433c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	1c9a      	adds	r2, r3, #2
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	621a      	str	r2, [r3, #32]
 800433a:	e00e      	b.n	800435a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	1c5a      	adds	r2, r3, #1
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	621a      	str	r2, [r3, #32]
 8004346:	e008      	b.n	800435a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	1c59      	adds	r1, r3, #1
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	6211      	str	r1, [r2, #32]
 8004352:	781a      	ldrb	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800435e:	b29b      	uxth	r3, r3
 8004360:	3b01      	subs	r3, #1
 8004362:	b29b      	uxth	r3, r3
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	4619      	mov	r1, r3
 8004368:	84d1      	strh	r1, [r2, #38]	; 0x26
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10f      	bne.n	800438e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800437c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68da      	ldr	r2, [r3, #12]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800438c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800438e:	2300      	movs	r3, #0
 8004390:	e000      	b.n	8004394 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004392:	2302      	movs	r3, #2
  }
}
 8004394:	4618      	mov	r0, r3
 8004396:	3714      	adds	r7, #20
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043b6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f7ff ff07 	bl	80041d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3708      	adds	r7, #8
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b22      	cmp	r3, #34	; 0x22
 80043e2:	d171      	bne.n	80044c8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ec:	d123      	bne.n	8004436 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10e      	bne.n	800441a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	b29b      	uxth	r3, r3
 8004404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004408:	b29a      	uxth	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004412:	1c9a      	adds	r2, r3, #2
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	629a      	str	r2, [r3, #40]	; 0x28
 8004418:	e029      	b.n	800446e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	b29b      	uxth	r3, r3
 8004422:	b2db      	uxtb	r3, r3
 8004424:	b29a      	uxth	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442e:	1c5a      	adds	r2, r3, #1
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	629a      	str	r2, [r3, #40]	; 0x28
 8004434:	e01b      	b.n	800446e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10a      	bne.n	8004454 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6858      	ldr	r0, [r3, #4]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004448:	1c59      	adds	r1, r3, #1
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6291      	str	r1, [r2, #40]	; 0x28
 800444e:	b2c2      	uxtb	r2, r0
 8004450:	701a      	strb	r2, [r3, #0]
 8004452:	e00c      	b.n	800446e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	b2da      	uxtb	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004460:	1c58      	adds	r0, r3, #1
 8004462:	6879      	ldr	r1, [r7, #4]
 8004464:	6288      	str	r0, [r1, #40]	; 0x28
 8004466:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800446a:	b2d2      	uxtb	r2, r2
 800446c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004472:	b29b      	uxth	r3, r3
 8004474:	3b01      	subs	r3, #1
 8004476:	b29b      	uxth	r3, r3
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	4619      	mov	r1, r3
 800447c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800447e:	2b00      	cmp	r3, #0
 8004480:	d120      	bne.n	80044c4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68da      	ldr	r2, [r3, #12]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0220 	bic.w	r2, r2, #32
 8004490:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68da      	ldr	r2, [r3, #12]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	695a      	ldr	r2, [r3, #20]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 0201 	bic.w	r2, r2, #1
 80044b0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2220      	movs	r2, #32
 80044b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f006 fbf0 	bl	800aca0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80044c0:	2300      	movs	r3, #0
 80044c2:	e002      	b.n	80044ca <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80044c4:	2300      	movs	r3, #0
 80044c6:	e000      	b.n	80044ca <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80044c8:	2302      	movs	r3, #2
  }
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
	...

080044d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044d8:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80044dc:	af00      	add	r7, sp, #0
 80044de:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044e2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044ee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80044f2:	68d9      	ldr	r1, [r3, #12]
 80044f4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	ea40 0301 	orr.w	r3, r0, r1
 80044fe:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004500:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004504:	689a      	ldr	r2, [r3, #8]
 8004506:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	431a      	orrs	r2, r3
 800450e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	431a      	orrs	r2, r3
 8004516:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800451a:	69db      	ldr	r3, [r3, #28]
 800451c:	4313      	orrs	r3, r2
 800451e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8004522:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800452e:	f021 010c 	bic.w	r1, r1, #12
 8004532:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800453c:	430b      	orrs	r3, r1
 800453e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004540:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800454c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004550:	6999      	ldr	r1, [r3, #24]
 8004552:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	ea40 0301 	orr.w	r3, r0, r1
 800455c:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800455e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004568:	f040 824a 	bne.w	8004a00 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800456c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	4b96      	ldr	r3, [pc, #600]	; (80047cc <UART_SetConfig+0x2f8>)
 8004574:	429a      	cmp	r2, r3
 8004576:	d006      	beq.n	8004586 <UART_SetConfig+0xb2>
 8004578:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	4b94      	ldr	r3, [pc, #592]	; (80047d0 <UART_SetConfig+0x2fc>)
 8004580:	429a      	cmp	r2, r3
 8004582:	f040 8129 	bne.w	80047d8 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004586:	f7ff fb91 	bl	8003cac <HAL_RCC_GetPCLK2Freq>
 800458a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800458e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004592:	2200      	movs	r2, #0
 8004594:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8004598:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 800459c:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 80045a0:	4622      	mov	r2, r4
 80045a2:	462b      	mov	r3, r5
 80045a4:	1891      	adds	r1, r2, r2
 80045a6:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80045aa:	415b      	adcs	r3, r3
 80045ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80045b0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80045b4:	4621      	mov	r1, r4
 80045b6:	1851      	adds	r1, r2, r1
 80045b8:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80045bc:	4629      	mov	r1, r5
 80045be:	414b      	adcs	r3, r1
 80045c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80045c4:	f04f 0200 	mov.w	r2, #0
 80045c8:	f04f 0300 	mov.w	r3, #0
 80045cc:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 80045d0:	4649      	mov	r1, r9
 80045d2:	00cb      	lsls	r3, r1, #3
 80045d4:	4641      	mov	r1, r8
 80045d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045da:	4641      	mov	r1, r8
 80045dc:	00ca      	lsls	r2, r1, #3
 80045de:	4610      	mov	r0, r2
 80045e0:	4619      	mov	r1, r3
 80045e2:	4603      	mov	r3, r0
 80045e4:	4622      	mov	r2, r4
 80045e6:	189b      	adds	r3, r3, r2
 80045e8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80045ec:	462b      	mov	r3, r5
 80045ee:	460a      	mov	r2, r1
 80045f0:	eb42 0303 	adc.w	r3, r2, r3
 80045f4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80045f8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004604:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8004608:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 800460c:	460b      	mov	r3, r1
 800460e:	18db      	adds	r3, r3, r3
 8004610:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004614:	4613      	mov	r3, r2
 8004616:	eb42 0303 	adc.w	r3, r2, r3
 800461a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800461e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8004622:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8004626:	f7fc fabf 	bl	8000ba8 <__aeabi_uldivmod>
 800462a:	4602      	mov	r2, r0
 800462c:	460b      	mov	r3, r1
 800462e:	4b69      	ldr	r3, [pc, #420]	; (80047d4 <UART_SetConfig+0x300>)
 8004630:	fba3 2302 	umull	r2, r3, r3, r2
 8004634:	095b      	lsrs	r3, r3, #5
 8004636:	011c      	lsls	r4, r3, #4
 8004638:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800463c:	2200      	movs	r2, #0
 800463e:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8004642:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8004646:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 800464a:	4642      	mov	r2, r8
 800464c:	464b      	mov	r3, r9
 800464e:	1891      	adds	r1, r2, r2
 8004650:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8004654:	415b      	adcs	r3, r3
 8004656:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800465a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800465e:	4641      	mov	r1, r8
 8004660:	1851      	adds	r1, r2, r1
 8004662:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8004666:	4649      	mov	r1, r9
 8004668:	414b      	adcs	r3, r1
 800466a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800466e:	f04f 0200 	mov.w	r2, #0
 8004672:	f04f 0300 	mov.w	r3, #0
 8004676:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 800467a:	4659      	mov	r1, fp
 800467c:	00cb      	lsls	r3, r1, #3
 800467e:	4651      	mov	r1, sl
 8004680:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004684:	4651      	mov	r1, sl
 8004686:	00ca      	lsls	r2, r1, #3
 8004688:	4610      	mov	r0, r2
 800468a:	4619      	mov	r1, r3
 800468c:	4603      	mov	r3, r0
 800468e:	4642      	mov	r2, r8
 8004690:	189b      	adds	r3, r3, r2
 8004692:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8004696:	464b      	mov	r3, r9
 8004698:	460a      	mov	r2, r1
 800469a:	eb42 0303 	adc.w	r3, r2, r3
 800469e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80046a2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80046ae:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 80046b2:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 80046b6:	460b      	mov	r3, r1
 80046b8:	18db      	adds	r3, r3, r3
 80046ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80046be:	4613      	mov	r3, r2
 80046c0:	eb42 0303 	adc.w	r3, r2, r3
 80046c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80046c8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80046cc:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 80046d0:	f7fc fa6a 	bl	8000ba8 <__aeabi_uldivmod>
 80046d4:	4602      	mov	r2, r0
 80046d6:	460b      	mov	r3, r1
 80046d8:	4611      	mov	r1, r2
 80046da:	4b3e      	ldr	r3, [pc, #248]	; (80047d4 <UART_SetConfig+0x300>)
 80046dc:	fba3 2301 	umull	r2, r3, r3, r1
 80046e0:	095b      	lsrs	r3, r3, #5
 80046e2:	2264      	movs	r2, #100	; 0x64
 80046e4:	fb02 f303 	mul.w	r3, r2, r3
 80046e8:	1acb      	subs	r3, r1, r3
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80046f0:	4b38      	ldr	r3, [pc, #224]	; (80047d4 <UART_SetConfig+0x300>)
 80046f2:	fba3 2302 	umull	r2, r3, r3, r2
 80046f6:	095b      	lsrs	r3, r3, #5
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046fe:	441c      	add	r4, r3
 8004700:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004704:	2200      	movs	r2, #0
 8004706:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800470a:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 800470e:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8004712:	4642      	mov	r2, r8
 8004714:	464b      	mov	r3, r9
 8004716:	1891      	adds	r1, r2, r2
 8004718:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800471c:	415b      	adcs	r3, r3
 800471e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004722:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8004726:	4641      	mov	r1, r8
 8004728:	1851      	adds	r1, r2, r1
 800472a:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800472e:	4649      	mov	r1, r9
 8004730:	414b      	adcs	r3, r1
 8004732:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004736:	f04f 0200 	mov.w	r2, #0
 800473a:	f04f 0300 	mov.w	r3, #0
 800473e:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8004742:	4659      	mov	r1, fp
 8004744:	00cb      	lsls	r3, r1, #3
 8004746:	4651      	mov	r1, sl
 8004748:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800474c:	4651      	mov	r1, sl
 800474e:	00ca      	lsls	r2, r1, #3
 8004750:	4610      	mov	r0, r2
 8004752:	4619      	mov	r1, r3
 8004754:	4603      	mov	r3, r0
 8004756:	4642      	mov	r2, r8
 8004758:	189b      	adds	r3, r3, r2
 800475a:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800475e:	464b      	mov	r3, r9
 8004760:	460a      	mov	r2, r1
 8004762:	eb42 0303 	adc.w	r3, r2, r3
 8004766:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800476a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8004776:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 800477a:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 800477e:	460b      	mov	r3, r1
 8004780:	18db      	adds	r3, r3, r3
 8004782:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004786:	4613      	mov	r3, r2
 8004788:	eb42 0303 	adc.w	r3, r2, r3
 800478c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004790:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8004794:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8004798:	f7fc fa06 	bl	8000ba8 <__aeabi_uldivmod>
 800479c:	4602      	mov	r2, r0
 800479e:	460b      	mov	r3, r1
 80047a0:	4b0c      	ldr	r3, [pc, #48]	; (80047d4 <UART_SetConfig+0x300>)
 80047a2:	fba3 1302 	umull	r1, r3, r3, r2
 80047a6:	095b      	lsrs	r3, r3, #5
 80047a8:	2164      	movs	r1, #100	; 0x64
 80047aa:	fb01 f303 	mul.w	r3, r1, r3
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	00db      	lsls	r3, r3, #3
 80047b2:	3332      	adds	r3, #50	; 0x32
 80047b4:	4a07      	ldr	r2, [pc, #28]	; (80047d4 <UART_SetConfig+0x300>)
 80047b6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ba:	095b      	lsrs	r3, r3, #5
 80047bc:	f003 0207 	and.w	r2, r3, #7
 80047c0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4422      	add	r2, r4
 80047c8:	609a      	str	r2, [r3, #8]
 80047ca:	e349      	b.n	8004e60 <UART_SetConfig+0x98c>
 80047cc:	40011000 	.word	0x40011000
 80047d0:	40011400 	.word	0x40011400
 80047d4:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047d8:	f7ff fa54 	bl	8003c84 <HAL_RCC_GetPCLK1Freq>
 80047dc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80047e4:	2200      	movs	r2, #0
 80047e6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80047ea:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 80047ee:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 80047f2:	4622      	mov	r2, r4
 80047f4:	462b      	mov	r3, r5
 80047f6:	1891      	adds	r1, r2, r2
 80047f8:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80047fc:	415b      	adcs	r3, r3
 80047fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004802:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004806:	4621      	mov	r1, r4
 8004808:	eb12 0a01 	adds.w	sl, r2, r1
 800480c:	4629      	mov	r1, r5
 800480e:	eb43 0b01 	adc.w	fp, r3, r1
 8004812:	f04f 0200 	mov.w	r2, #0
 8004816:	f04f 0300 	mov.w	r3, #0
 800481a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800481e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004822:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004826:	4692      	mov	sl, r2
 8004828:	469b      	mov	fp, r3
 800482a:	4623      	mov	r3, r4
 800482c:	eb1a 0303 	adds.w	r3, sl, r3
 8004830:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004834:	462b      	mov	r3, r5
 8004836:	eb4b 0303 	adc.w	r3, fp, r3
 800483a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800483e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800484a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800484e:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8004852:	460b      	mov	r3, r1
 8004854:	18db      	adds	r3, r3, r3
 8004856:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800485a:	4613      	mov	r3, r2
 800485c:	eb42 0303 	adc.w	r3, r2, r3
 8004860:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004864:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004868:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800486c:	f7fc f99c 	bl	8000ba8 <__aeabi_uldivmod>
 8004870:	4602      	mov	r2, r0
 8004872:	460b      	mov	r3, r1
 8004874:	4b61      	ldr	r3, [pc, #388]	; (80049fc <UART_SetConfig+0x528>)
 8004876:	fba3 2302 	umull	r2, r3, r3, r2
 800487a:	095b      	lsrs	r3, r3, #5
 800487c:	011c      	lsls	r4, r3, #4
 800487e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004882:	2200      	movs	r2, #0
 8004884:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8004888:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 800488c:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8004890:	4642      	mov	r2, r8
 8004892:	464b      	mov	r3, r9
 8004894:	1891      	adds	r1, r2, r2
 8004896:	67b9      	str	r1, [r7, #120]	; 0x78
 8004898:	415b      	adcs	r3, r3
 800489a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800489c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80048a0:	4641      	mov	r1, r8
 80048a2:	1851      	adds	r1, r2, r1
 80048a4:	6739      	str	r1, [r7, #112]	; 0x70
 80048a6:	4649      	mov	r1, r9
 80048a8:	414b      	adcs	r3, r1
 80048aa:	677b      	str	r3, [r7, #116]	; 0x74
 80048ac:	f04f 0200 	mov.w	r2, #0
 80048b0:	f04f 0300 	mov.w	r3, #0
 80048b4:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 80048b8:	4659      	mov	r1, fp
 80048ba:	00cb      	lsls	r3, r1, #3
 80048bc:	4651      	mov	r1, sl
 80048be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048c2:	4651      	mov	r1, sl
 80048c4:	00ca      	lsls	r2, r1, #3
 80048c6:	4610      	mov	r0, r2
 80048c8:	4619      	mov	r1, r3
 80048ca:	4603      	mov	r3, r0
 80048cc:	4642      	mov	r2, r8
 80048ce:	189b      	adds	r3, r3, r2
 80048d0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80048d4:	464b      	mov	r3, r9
 80048d6:	460a      	mov	r2, r1
 80048d8:	eb42 0303 	adc.w	r3, r2, r3
 80048dc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80048e0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80048ec:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 80048f0:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 80048f4:	460b      	mov	r3, r1
 80048f6:	18db      	adds	r3, r3, r3
 80048f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80048fa:	4613      	mov	r3, r2
 80048fc:	eb42 0303 	adc.w	r3, r2, r3
 8004900:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004902:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004906:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800490a:	f7fc f94d 	bl	8000ba8 <__aeabi_uldivmod>
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	4611      	mov	r1, r2
 8004914:	4b39      	ldr	r3, [pc, #228]	; (80049fc <UART_SetConfig+0x528>)
 8004916:	fba3 2301 	umull	r2, r3, r3, r1
 800491a:	095b      	lsrs	r3, r3, #5
 800491c:	2264      	movs	r2, #100	; 0x64
 800491e:	fb02 f303 	mul.w	r3, r2, r3
 8004922:	1acb      	subs	r3, r1, r3
 8004924:	00db      	lsls	r3, r3, #3
 8004926:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800492a:	4b34      	ldr	r3, [pc, #208]	; (80049fc <UART_SetConfig+0x528>)
 800492c:	fba3 2302 	umull	r2, r3, r3, r2
 8004930:	095b      	lsrs	r3, r3, #5
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004938:	441c      	add	r4, r3
 800493a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800493e:	2200      	movs	r2, #0
 8004940:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8004944:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004948:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 800494c:	4642      	mov	r2, r8
 800494e:	464b      	mov	r3, r9
 8004950:	1891      	adds	r1, r2, r2
 8004952:	6639      	str	r1, [r7, #96]	; 0x60
 8004954:	415b      	adcs	r3, r3
 8004956:	667b      	str	r3, [r7, #100]	; 0x64
 8004958:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800495c:	4641      	mov	r1, r8
 800495e:	1851      	adds	r1, r2, r1
 8004960:	65b9      	str	r1, [r7, #88]	; 0x58
 8004962:	4649      	mov	r1, r9
 8004964:	414b      	adcs	r3, r1
 8004966:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004968:	f04f 0200 	mov.w	r2, #0
 800496c:	f04f 0300 	mov.w	r3, #0
 8004970:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8004974:	4659      	mov	r1, fp
 8004976:	00cb      	lsls	r3, r1, #3
 8004978:	4651      	mov	r1, sl
 800497a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800497e:	4651      	mov	r1, sl
 8004980:	00ca      	lsls	r2, r1, #3
 8004982:	4610      	mov	r0, r2
 8004984:	4619      	mov	r1, r3
 8004986:	4603      	mov	r3, r0
 8004988:	4642      	mov	r2, r8
 800498a:	189b      	adds	r3, r3, r2
 800498c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8004990:	464b      	mov	r3, r9
 8004992:	460a      	mov	r2, r1
 8004994:	eb42 0303 	adc.w	r3, r2, r3
 8004998:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800499c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80049a8:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 80049ac:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 80049b0:	460b      	mov	r3, r1
 80049b2:	18db      	adds	r3, r3, r3
 80049b4:	653b      	str	r3, [r7, #80]	; 0x50
 80049b6:	4613      	mov	r3, r2
 80049b8:	eb42 0303 	adc.w	r3, r2, r3
 80049bc:	657b      	str	r3, [r7, #84]	; 0x54
 80049be:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80049c2:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80049c6:	f7fc f8ef 	bl	8000ba8 <__aeabi_uldivmod>
 80049ca:	4602      	mov	r2, r0
 80049cc:	460b      	mov	r3, r1
 80049ce:	4b0b      	ldr	r3, [pc, #44]	; (80049fc <UART_SetConfig+0x528>)
 80049d0:	fba3 1302 	umull	r1, r3, r3, r2
 80049d4:	095b      	lsrs	r3, r3, #5
 80049d6:	2164      	movs	r1, #100	; 0x64
 80049d8:	fb01 f303 	mul.w	r3, r1, r3
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	3332      	adds	r3, #50	; 0x32
 80049e2:	4a06      	ldr	r2, [pc, #24]	; (80049fc <UART_SetConfig+0x528>)
 80049e4:	fba2 2303 	umull	r2, r3, r2, r3
 80049e8:	095b      	lsrs	r3, r3, #5
 80049ea:	f003 0207 	and.w	r2, r3, #7
 80049ee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4422      	add	r2, r4
 80049f6:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80049f8:	e232      	b.n	8004e60 <UART_SetConfig+0x98c>
 80049fa:	bf00      	nop
 80049fc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a00:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	4b8d      	ldr	r3, [pc, #564]	; (8004c3c <UART_SetConfig+0x768>)
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d006      	beq.n	8004a1a <UART_SetConfig+0x546>
 8004a0c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	4b8b      	ldr	r3, [pc, #556]	; (8004c40 <UART_SetConfig+0x76c>)
 8004a14:	429a      	cmp	r2, r3
 8004a16:	f040 8117 	bne.w	8004c48 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a1a:	f7ff f947 	bl	8003cac <HAL_RCC_GetPCLK2Freq>
 8004a1e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a22:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004a26:	2200      	movs	r2, #0
 8004a28:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8004a2c:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8004a30:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8004a34:	4622      	mov	r2, r4
 8004a36:	462b      	mov	r3, r5
 8004a38:	1891      	adds	r1, r2, r2
 8004a3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a3c:	415b      	adcs	r3, r3
 8004a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a44:	4621      	mov	r1, r4
 8004a46:	eb12 0801 	adds.w	r8, r2, r1
 8004a4a:	4629      	mov	r1, r5
 8004a4c:	eb43 0901 	adc.w	r9, r3, r1
 8004a50:	f04f 0200 	mov.w	r2, #0
 8004a54:	f04f 0300 	mov.w	r3, #0
 8004a58:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a5c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a60:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a64:	4690      	mov	r8, r2
 8004a66:	4699      	mov	r9, r3
 8004a68:	4623      	mov	r3, r4
 8004a6a:	eb18 0303 	adds.w	r3, r8, r3
 8004a6e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004a72:	462b      	mov	r3, r5
 8004a74:	eb49 0303 	adc.w	r3, r9, r3
 8004a78:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8004a7c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004a88:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8004a8c:	f04f 0200 	mov.w	r2, #0
 8004a90:	f04f 0300 	mov.w	r3, #0
 8004a94:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8004a98:	4629      	mov	r1, r5
 8004a9a:	008b      	lsls	r3, r1, #2
 8004a9c:	4621      	mov	r1, r4
 8004a9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004aa2:	4621      	mov	r1, r4
 8004aa4:	008a      	lsls	r2, r1, #2
 8004aa6:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8004aaa:	f7fc f87d 	bl	8000ba8 <__aeabi_uldivmod>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	4b64      	ldr	r3, [pc, #400]	; (8004c44 <UART_SetConfig+0x770>)
 8004ab4:	fba3 2302 	umull	r2, r3, r3, r2
 8004ab8:	095b      	lsrs	r3, r3, #5
 8004aba:	011c      	lsls	r4, r3, #4
 8004abc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8004ac6:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004aca:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8004ace:	4642      	mov	r2, r8
 8004ad0:	464b      	mov	r3, r9
 8004ad2:	1891      	adds	r1, r2, r2
 8004ad4:	6439      	str	r1, [r7, #64]	; 0x40
 8004ad6:	415b      	adcs	r3, r3
 8004ad8:	647b      	str	r3, [r7, #68]	; 0x44
 8004ada:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ade:	4641      	mov	r1, r8
 8004ae0:	1851      	adds	r1, r2, r1
 8004ae2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ae4:	4649      	mov	r1, r9
 8004ae6:	414b      	adcs	r3, r1
 8004ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aea:	f04f 0200 	mov.w	r2, #0
 8004aee:	f04f 0300 	mov.w	r3, #0
 8004af2:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8004af6:	4659      	mov	r1, fp
 8004af8:	00cb      	lsls	r3, r1, #3
 8004afa:	4651      	mov	r1, sl
 8004afc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b00:	4651      	mov	r1, sl
 8004b02:	00ca      	lsls	r2, r1, #3
 8004b04:	4610      	mov	r0, r2
 8004b06:	4619      	mov	r1, r3
 8004b08:	4603      	mov	r3, r0
 8004b0a:	4642      	mov	r2, r8
 8004b0c:	189b      	adds	r3, r3, r2
 8004b0e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8004b12:	464b      	mov	r3, r9
 8004b14:	460a      	mov	r2, r1
 8004b16:	eb42 0303 	adc.w	r3, r2, r3
 8004b1a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8004b1e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8004b2a:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8004b2e:	f04f 0200 	mov.w	r2, #0
 8004b32:	f04f 0300 	mov.w	r3, #0
 8004b36:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8004b3a:	4649      	mov	r1, r9
 8004b3c:	008b      	lsls	r3, r1, #2
 8004b3e:	4641      	mov	r1, r8
 8004b40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b44:	4641      	mov	r1, r8
 8004b46:	008a      	lsls	r2, r1, #2
 8004b48:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8004b4c:	f7fc f82c 	bl	8000ba8 <__aeabi_uldivmod>
 8004b50:	4602      	mov	r2, r0
 8004b52:	460b      	mov	r3, r1
 8004b54:	4b3b      	ldr	r3, [pc, #236]	; (8004c44 <UART_SetConfig+0x770>)
 8004b56:	fba3 1302 	umull	r1, r3, r3, r2
 8004b5a:	095b      	lsrs	r3, r3, #5
 8004b5c:	2164      	movs	r1, #100	; 0x64
 8004b5e:	fb01 f303 	mul.w	r3, r1, r3
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	011b      	lsls	r3, r3, #4
 8004b66:	3332      	adds	r3, #50	; 0x32
 8004b68:	4a36      	ldr	r2, [pc, #216]	; (8004c44 <UART_SetConfig+0x770>)
 8004b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6e:	095b      	lsrs	r3, r3, #5
 8004b70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b74:	441c      	add	r4, r3
 8004b76:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004b80:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8004b84:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8004b88:	4642      	mov	r2, r8
 8004b8a:	464b      	mov	r3, r9
 8004b8c:	1891      	adds	r1, r2, r2
 8004b8e:	6339      	str	r1, [r7, #48]	; 0x30
 8004b90:	415b      	adcs	r3, r3
 8004b92:	637b      	str	r3, [r7, #52]	; 0x34
 8004b94:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004b98:	4641      	mov	r1, r8
 8004b9a:	1851      	adds	r1, r2, r1
 8004b9c:	62b9      	str	r1, [r7, #40]	; 0x28
 8004b9e:	4649      	mov	r1, r9
 8004ba0:	414b      	adcs	r3, r1
 8004ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ba4:	f04f 0200 	mov.w	r2, #0
 8004ba8:	f04f 0300 	mov.w	r3, #0
 8004bac:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8004bb0:	4659      	mov	r1, fp
 8004bb2:	00cb      	lsls	r3, r1, #3
 8004bb4:	4651      	mov	r1, sl
 8004bb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bba:	4651      	mov	r1, sl
 8004bbc:	00ca      	lsls	r2, r1, #3
 8004bbe:	4610      	mov	r0, r2
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	4642      	mov	r2, r8
 8004bc6:	189b      	adds	r3, r3, r2
 8004bc8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004bcc:	464b      	mov	r3, r9
 8004bce:	460a      	mov	r2, r1
 8004bd0:	eb42 0303 	adc.w	r3, r2, r3
 8004bd4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004bd8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004be4:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8004be8:	f04f 0200 	mov.w	r2, #0
 8004bec:	f04f 0300 	mov.w	r3, #0
 8004bf0:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8004bf4:	4649      	mov	r1, r9
 8004bf6:	008b      	lsls	r3, r1, #2
 8004bf8:	4641      	mov	r1, r8
 8004bfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bfe:	4641      	mov	r1, r8
 8004c00:	008a      	lsls	r2, r1, #2
 8004c02:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8004c06:	f7fb ffcf 	bl	8000ba8 <__aeabi_uldivmod>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	4b0d      	ldr	r3, [pc, #52]	; (8004c44 <UART_SetConfig+0x770>)
 8004c10:	fba3 1302 	umull	r1, r3, r3, r2
 8004c14:	095b      	lsrs	r3, r3, #5
 8004c16:	2164      	movs	r1, #100	; 0x64
 8004c18:	fb01 f303 	mul.w	r3, r1, r3
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	011b      	lsls	r3, r3, #4
 8004c20:	3332      	adds	r3, #50	; 0x32
 8004c22:	4a08      	ldr	r2, [pc, #32]	; (8004c44 <UART_SetConfig+0x770>)
 8004c24:	fba2 2303 	umull	r2, r3, r2, r3
 8004c28:	095b      	lsrs	r3, r3, #5
 8004c2a:	f003 020f 	and.w	r2, r3, #15
 8004c2e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4422      	add	r2, r4
 8004c36:	609a      	str	r2, [r3, #8]
 8004c38:	e112      	b.n	8004e60 <UART_SetConfig+0x98c>
 8004c3a:	bf00      	nop
 8004c3c:	40011000 	.word	0x40011000
 8004c40:	40011400 	.word	0x40011400
 8004c44:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c48:	f7ff f81c 	bl	8003c84 <HAL_RCC_GetPCLK1Freq>
 8004c4c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c50:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004c54:	2200      	movs	r2, #0
 8004c56:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004c5a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004c5e:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8004c62:	4642      	mov	r2, r8
 8004c64:	464b      	mov	r3, r9
 8004c66:	1891      	adds	r1, r2, r2
 8004c68:	6239      	str	r1, [r7, #32]
 8004c6a:	415b      	adcs	r3, r3
 8004c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c72:	4641      	mov	r1, r8
 8004c74:	1854      	adds	r4, r2, r1
 8004c76:	4649      	mov	r1, r9
 8004c78:	eb43 0501 	adc.w	r5, r3, r1
 8004c7c:	f04f 0200 	mov.w	r2, #0
 8004c80:	f04f 0300 	mov.w	r3, #0
 8004c84:	00eb      	lsls	r3, r5, #3
 8004c86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c8a:	00e2      	lsls	r2, r4, #3
 8004c8c:	4614      	mov	r4, r2
 8004c8e:	461d      	mov	r5, r3
 8004c90:	4643      	mov	r3, r8
 8004c92:	18e3      	adds	r3, r4, r3
 8004c94:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004c98:	464b      	mov	r3, r9
 8004c9a:	eb45 0303 	adc.w	r3, r5, r3
 8004c9e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004ca2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004cae:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8004cb2:	f04f 0200 	mov.w	r2, #0
 8004cb6:	f04f 0300 	mov.w	r3, #0
 8004cba:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8004cbe:	4629      	mov	r1, r5
 8004cc0:	008b      	lsls	r3, r1, #2
 8004cc2:	4621      	mov	r1, r4
 8004cc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cc8:	4621      	mov	r1, r4
 8004cca:	008a      	lsls	r2, r1, #2
 8004ccc:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8004cd0:	f7fb ff6a 	bl	8000ba8 <__aeabi_uldivmod>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	4b64      	ldr	r3, [pc, #400]	; (8004e6c <UART_SetConfig+0x998>)
 8004cda:	fba3 2302 	umull	r2, r3, r3, r2
 8004cde:	095b      	lsrs	r3, r3, #5
 8004ce0:	011c      	lsls	r4, r3, #4
 8004ce2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004cec:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8004cf0:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8004cf4:	4642      	mov	r2, r8
 8004cf6:	464b      	mov	r3, r9
 8004cf8:	1891      	adds	r1, r2, r2
 8004cfa:	61b9      	str	r1, [r7, #24]
 8004cfc:	415b      	adcs	r3, r3
 8004cfe:	61fb      	str	r3, [r7, #28]
 8004d00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d04:	4641      	mov	r1, r8
 8004d06:	1851      	adds	r1, r2, r1
 8004d08:	6139      	str	r1, [r7, #16]
 8004d0a:	4649      	mov	r1, r9
 8004d0c:	414b      	adcs	r3, r1
 8004d0e:	617b      	str	r3, [r7, #20]
 8004d10:	f04f 0200 	mov.w	r2, #0
 8004d14:	f04f 0300 	mov.w	r3, #0
 8004d18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d1c:	4659      	mov	r1, fp
 8004d1e:	00cb      	lsls	r3, r1, #3
 8004d20:	4651      	mov	r1, sl
 8004d22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d26:	4651      	mov	r1, sl
 8004d28:	00ca      	lsls	r2, r1, #3
 8004d2a:	4610      	mov	r0, r2
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4603      	mov	r3, r0
 8004d30:	4642      	mov	r2, r8
 8004d32:	189b      	adds	r3, r3, r2
 8004d34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004d38:	464b      	mov	r3, r9
 8004d3a:	460a      	mov	r2, r1
 8004d3c:	eb42 0303 	adc.w	r3, r2, r3
 8004d40:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004d44:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004d50:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004d54:	f04f 0200 	mov.w	r2, #0
 8004d58:	f04f 0300 	mov.w	r3, #0
 8004d5c:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8004d60:	4649      	mov	r1, r9
 8004d62:	008b      	lsls	r3, r1, #2
 8004d64:	4641      	mov	r1, r8
 8004d66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d6a:	4641      	mov	r1, r8
 8004d6c:	008a      	lsls	r2, r1, #2
 8004d6e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8004d72:	f7fb ff19 	bl	8000ba8 <__aeabi_uldivmod>
 8004d76:	4602      	mov	r2, r0
 8004d78:	460b      	mov	r3, r1
 8004d7a:	4b3c      	ldr	r3, [pc, #240]	; (8004e6c <UART_SetConfig+0x998>)
 8004d7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d80:	095b      	lsrs	r3, r3, #5
 8004d82:	2164      	movs	r1, #100	; 0x64
 8004d84:	fb01 f303 	mul.w	r3, r1, r3
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	011b      	lsls	r3, r3, #4
 8004d8c:	3332      	adds	r3, #50	; 0x32
 8004d8e:	4a37      	ldr	r2, [pc, #220]	; (8004e6c <UART_SetConfig+0x998>)
 8004d90:	fba2 2303 	umull	r2, r3, r2, r3
 8004d94:	095b      	lsrs	r3, r3, #5
 8004d96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d9a:	441c      	add	r4, r3
 8004d9c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004da0:	2200      	movs	r2, #0
 8004da2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004da6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004daa:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8004dae:	4642      	mov	r2, r8
 8004db0:	464b      	mov	r3, r9
 8004db2:	1891      	adds	r1, r2, r2
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	415b      	adcs	r3, r3
 8004db8:	60fb      	str	r3, [r7, #12]
 8004dba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dbe:	4641      	mov	r1, r8
 8004dc0:	1851      	adds	r1, r2, r1
 8004dc2:	6039      	str	r1, [r7, #0]
 8004dc4:	4649      	mov	r1, r9
 8004dc6:	414b      	adcs	r3, r1
 8004dc8:	607b      	str	r3, [r7, #4]
 8004dca:	f04f 0200 	mov.w	r2, #0
 8004dce:	f04f 0300 	mov.w	r3, #0
 8004dd2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004dd6:	4659      	mov	r1, fp
 8004dd8:	00cb      	lsls	r3, r1, #3
 8004dda:	4651      	mov	r1, sl
 8004ddc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004de0:	4651      	mov	r1, sl
 8004de2:	00ca      	lsls	r2, r1, #3
 8004de4:	4610      	mov	r0, r2
 8004de6:	4619      	mov	r1, r3
 8004de8:	4603      	mov	r3, r0
 8004dea:	4642      	mov	r2, r8
 8004dec:	189b      	adds	r3, r3, r2
 8004dee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004df2:	464b      	mov	r3, r9
 8004df4:	460a      	mov	r2, r1
 8004df6:	eb42 0303 	adc.w	r3, r2, r3
 8004dfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004dfe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e0a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004e0e:	f04f 0200 	mov.w	r2, #0
 8004e12:	f04f 0300 	mov.w	r3, #0
 8004e16:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8004e1a:	4649      	mov	r1, r9
 8004e1c:	008b      	lsls	r3, r1, #2
 8004e1e:	4641      	mov	r1, r8
 8004e20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e24:	4641      	mov	r1, r8
 8004e26:	008a      	lsls	r2, r1, #2
 8004e28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e2c:	f7fb febc 	bl	8000ba8 <__aeabi_uldivmod>
 8004e30:	4602      	mov	r2, r0
 8004e32:	460b      	mov	r3, r1
 8004e34:	4b0d      	ldr	r3, [pc, #52]	; (8004e6c <UART_SetConfig+0x998>)
 8004e36:	fba3 1302 	umull	r1, r3, r3, r2
 8004e3a:	095b      	lsrs	r3, r3, #5
 8004e3c:	2164      	movs	r1, #100	; 0x64
 8004e3e:	fb01 f303 	mul.w	r3, r1, r3
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	011b      	lsls	r3, r3, #4
 8004e46:	3332      	adds	r3, #50	; 0x32
 8004e48:	4a08      	ldr	r2, [pc, #32]	; (8004e6c <UART_SetConfig+0x998>)
 8004e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4e:	095b      	lsrs	r3, r3, #5
 8004e50:	f003 020f 	and.w	r2, r3, #15
 8004e54:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4422      	add	r2, r4
 8004e5c:	609a      	str	r2, [r3, #8]
}
 8004e5e:	e7ff      	b.n	8004e60 <UART_SetConfig+0x98c>
 8004e60:	bf00      	nop
 8004e62:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004e66:	46bd      	mov	sp, r7
 8004e68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e6c:	51eb851f 	.word	0x51eb851f

08004e70 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b089      	sub	sp, #36	; 0x24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	fa93 f3a3 	rbit	r3, r3
 8004e8a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	fab3 f383 	clz	r3, r3
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	2103      	movs	r1, #3
 8004e98:	fa01 f303 	lsl.w	r3, r1, r3
 8004e9c:	43db      	mvns	r3, r3
 8004e9e:	401a      	ands	r2, r3
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	fa93 f3a3 	rbit	r3, r3
 8004eaa:	61bb      	str	r3, [r7, #24]
  return result;
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	fab3 f383 	clz	r3, r3
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	005b      	lsls	r3, r3, #1
 8004eb6:	6879      	ldr	r1, [r7, #4]
 8004eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	601a      	str	r2, [r3, #0]
}
 8004ec2:	bf00      	nop
 8004ec4:	3724      	adds	r7, #36	; 0x24
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b089      	sub	sp, #36	; 0x24
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	60f8      	str	r0, [r7, #12]
 8004ed6:	60b9      	str	r1, [r7, #8]
 8004ed8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, (GPIO_OTYPER_OT_0 << POSITION_VAL(Pin)), (OutputType << POSITION_VAL(Pin)));
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	685a      	ldr	r2, [r3, #4]
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	fa93 f3a3 	rbit	r3, r3
 8004ee8:	613b      	str	r3, [r7, #16]
  return result;
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	fab3 f383 	clz	r3, r3
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	408b      	lsls	r3, r1
 8004ef8:	43db      	mvns	r3, r3
 8004efa:	401a      	ands	r2, r3
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	fa93 f3a3 	rbit	r3, r3
 8004f06:	61bb      	str	r3, [r7, #24]
  return result;
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	fab3 f383 	clz	r3, r3
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	4619      	mov	r1, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	408b      	lsls	r3, r1
 8004f16:	431a      	orrs	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	605a      	str	r2, [r3, #4]
}
 8004f1c:	bf00      	nop
 8004f1e:	3724      	adds	r7, #36	; 0x24
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b089      	sub	sp, #36	; 0x24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	689a      	ldr	r2, [r3, #8]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	fa93 f3a3 	rbit	r3, r3
 8004f42:	613b      	str	r3, [r7, #16]
  return result;
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	fab3 f383 	clz	r3, r3
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	005b      	lsls	r3, r3, #1
 8004f4e:	2103      	movs	r1, #3
 8004f50:	fa01 f303 	lsl.w	r3, r1, r3
 8004f54:	43db      	mvns	r3, r3
 8004f56:	401a      	ands	r2, r3
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	fa93 f3a3 	rbit	r3, r3
 8004f62:	61bb      	str	r3, [r7, #24]
  return result;
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	fab3 f383 	clz	r3, r3
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	005b      	lsls	r3, r3, #1
 8004f6e:	6879      	ldr	r1, [r7, #4]
 8004f70:	fa01 f303 	lsl.w	r3, r1, r3
 8004f74:	431a      	orrs	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8004f7a:	bf00      	nop
 8004f7c:	3724      	adds	r7, #36	; 0x24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b089      	sub	sp, #36	; 0x24
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	60f8      	str	r0, [r7, #12]
 8004f8e:	60b9      	str	r1, [r7, #8]
 8004f90:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	68da      	ldr	r2, [r3, #12]
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	fa93 f3a3 	rbit	r3, r3
 8004fa0:	613b      	str	r3, [r7, #16]
  return result;
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	fab3 f383 	clz	r3, r3
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	005b      	lsls	r3, r3, #1
 8004fac:	2103      	movs	r1, #3
 8004fae:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb2:	43db      	mvns	r3, r3
 8004fb4:	401a      	ands	r2, r3
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	fa93 f3a3 	rbit	r3, r3
 8004fc0:	61bb      	str	r3, [r7, #24]
  return result;
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	fab3 f383 	clz	r3, r3
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	6879      	ldr	r1, [r7, #4]
 8004fce:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	60da      	str	r2, [r3, #12]
}
 8004fd8:	bf00      	nop
 8004fda:	3724      	adds	r7, #36	; 0x24
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b089      	sub	sp, #36	; 0x24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6a1a      	ldr	r2, [r3, #32]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	fa93 f3a3 	rbit	r3, r3
 8004ffe:	613b      	str	r3, [r7, #16]
  return result;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	fab3 f383 	clz	r3, r3
 8005006:	b2db      	uxtb	r3, r3
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	210f      	movs	r1, #15
 800500c:	fa01 f303 	lsl.w	r3, r1, r3
 8005010:	43db      	mvns	r3, r3
 8005012:	401a      	ands	r2, r3
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	fa93 f3a3 	rbit	r3, r3
 800501e:	61bb      	str	r3, [r7, #24]
  return result;
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	fab3 f383 	clz	r3, r3
 8005026:	b2db      	uxtb	r3, r3
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	6879      	ldr	r1, [r7, #4]
 800502c:	fa01 f303 	lsl.w	r3, r1, r3
 8005030:	431a      	orrs	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8005036:	bf00      	nop
 8005038:	3724      	adds	r7, #36	; 0x24
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005042:	b480      	push	{r7}
 8005044:	b089      	sub	sp, #36	; 0x24
 8005046:	af00      	add	r7, sp, #0
 8005048:	60f8      	str	r0, [r7, #12]
 800504a:	60b9      	str	r1, [r7, #8]
 800504c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	0a1b      	lsrs	r3, r3, #8
 8005056:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	fa93 f3a3 	rbit	r3, r3
 800505e:	613b      	str	r3, [r7, #16]
  return result;
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	fab3 f383 	clz	r3, r3
 8005066:	b2db      	uxtb	r3, r3
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	210f      	movs	r1, #15
 800506c:	fa01 f303 	lsl.w	r3, r1, r3
 8005070:	43db      	mvns	r3, r3
 8005072:	401a      	ands	r2, r3
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	0a1b      	lsrs	r3, r3, #8
 8005078:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	fa93 f3a3 	rbit	r3, r3
 8005080:	61bb      	str	r3, [r7, #24]
  return result;
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	fab3 f383 	clz	r3, r3
 8005088:	b2db      	uxtb	r3, r3
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	6879      	ldr	r1, [r7, #4]
 800508e:	fa01 f303 	lsl.w	r3, r1, r3
 8005092:	431a      	orrs	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8005098:	bf00      	nop
 800509a:	3724      	adds	r7, #36	; 0x24
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b088      	sub	sp, #32
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80050ae:	2300      	movs	r3, #0
 80050b0:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80050b2:	2300      	movs	r3, #0
 80050b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	fa93 f3a3 	rbit	r3, r3
 80050c2:	613b      	str	r3, [r7, #16]
  return result;
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	fab3 f383 	clz	r3, r3
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80050ce:	e050      	b.n	8005172 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	2101      	movs	r1, #1
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	fa01 f303 	lsl.w	r3, r1, r3
 80050dc:	4013      	ands	r3, r2
 80050de:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d042      	beq.n	800516c <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d003      	beq.n	80050f6 <LL_GPIO_Init+0x52>
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d10d      	bne.n	8005112 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	461a      	mov	r2, r3
 80050fc:	69b9      	ldr	r1, [r7, #24]
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7ff ff12 	bl	8004f28 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	461a      	mov	r2, r3
 800510a:	69b9      	ldr	r1, [r7, #24]
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f7ff fede 	bl	8004ece <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	461a      	mov	r2, r3
 8005118:	69b9      	ldr	r1, [r7, #24]
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7ff ff33 	bl	8004f86 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2b02      	cmp	r3, #2
 8005126:	d11a      	bne.n	800515e <LL_GPIO_Init+0xba>
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	fa93 f3a3 	rbit	r3, r3
 8005132:	60bb      	str	r3, [r7, #8]
  return result;
 8005134:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8005136:	fab3 f383 	clz	r3, r3
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b07      	cmp	r3, #7
 800513e:	d807      	bhi.n	8005150 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	461a      	mov	r2, r3
 8005146:	69b9      	ldr	r1, [r7, #24]
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f7ff ff4b 	bl	8004fe4 <LL_GPIO_SetAFPin_0_7>
 800514e:	e006      	b.n	800515e <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	461a      	mov	r2, r3
 8005156:	69b9      	ldr	r1, [r7, #24]
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f7ff ff72 	bl	8005042 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	461a      	mov	r2, r3
 8005164:	69b9      	ldr	r1, [r7, #24]
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7ff fe82 	bl	8004e70 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	3301      	adds	r3, #1
 8005170:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	fa22 f303 	lsr.w	r3, r2, r3
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1a7      	bne.n	80050d0 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3720      	adds	r7, #32
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
	...

0800518c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800518c:	b480      	push	{r7}
 800518e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005190:	4b04      	ldr	r3, [pc, #16]	; (80051a4 <LL_RCC_GetSysClkSource+0x18>)
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f003 030c 	and.w	r3, r3, #12
}
 8005198:	4618      	mov	r0, r3
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	40023800 	.word	0x40023800

080051a8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80051a8:	b480      	push	{r7}
 80051aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80051ac:	4b04      	ldr	r3, [pc, #16]	; (80051c0 <LL_RCC_GetAHBPrescaler+0x18>)
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	40023800 	.word	0x40023800

080051c4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80051c8:	4b04      	ldr	r3, [pc, #16]	; (80051dc <LL_RCC_GetAPB1Prescaler+0x18>)
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	40023800 	.word	0x40023800

080051e0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80051e0:	b480      	push	{r7}
 80051e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80051e4:	4b04      	ldr	r3, [pc, #16]	; (80051f8 <LL_RCC_GetAPB2Prescaler+0x18>)
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	40023800 	.word	0x40023800

080051fc <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80051fc:	b480      	push	{r7}
 80051fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005200:	4b04      	ldr	r3, [pc, #16]	; (8005214 <LL_RCC_PLL_GetMainSource+0x18>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8005208:	4618      	mov	r0, r3
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	40023800 	.word	0x40023800

08005218 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005218:	b480      	push	{r7}
 800521a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800521c:	4b04      	ldr	r3, [pc, #16]	; (8005230 <LL_RCC_PLL_GetN+0x18>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	099b      	lsrs	r3, r3, #6
 8005222:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8005226:	4618      	mov	r0, r3
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr
 8005230:	40023800 	.word	0x40023800

08005234 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8005234:	b480      	push	{r7}
 8005236:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8005238:	4b04      	ldr	r3, [pc, #16]	; (800524c <LL_RCC_PLL_GetP+0x18>)
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8005240:	4618      	mov	r0, r3
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	40023800 	.word	0x40023800

08005250 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005250:	b480      	push	{r7}
 8005252:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005254:	4b04      	ldr	r3, [pc, #16]	; (8005268 <LL_RCC_PLL_GetDivider+0x18>)
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800525c:	4618      	mov	r0, r3
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	40023800 	.word	0x40023800

0800526c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8005274:	f000 f820 	bl	80052b8 <RCC_GetSystemClockFreq>
 8005278:	4602      	mov	r2, r0
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4618      	mov	r0, r3
 8005284:	f000 f840 	bl	8005308 <RCC_GetHCLKClockFreq>
 8005288:	4602      	mov	r2, r0
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	4618      	mov	r0, r3
 8005294:	f000 f84e 	bl	8005334 <RCC_GetPCLK1ClockFreq>
 8005298:	4602      	mov	r2, r0
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f000 f85a 	bl	800535c <RCC_GetPCLK2ClockFreq>
 80052a8:	4602      	mov	r2, r0
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	60da      	str	r2, [r3, #12]
}
 80052ae:	bf00      	nop
 80052b0:	3708      	adds	r7, #8
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
	...

080052b8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80052be:	2300      	movs	r3, #0
 80052c0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80052c2:	f7ff ff63 	bl	800518c <LL_RCC_GetSysClkSource>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b08      	cmp	r3, #8
 80052ca:	d00c      	beq.n	80052e6 <RCC_GetSystemClockFreq+0x2e>
 80052cc:	2b08      	cmp	r3, #8
 80052ce:	d80f      	bhi.n	80052f0 <RCC_GetSystemClockFreq+0x38>
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d002      	beq.n	80052da <RCC_GetSystemClockFreq+0x22>
 80052d4:	2b04      	cmp	r3, #4
 80052d6:	d003      	beq.n	80052e0 <RCC_GetSystemClockFreq+0x28>
 80052d8:	e00a      	b.n	80052f0 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80052da:	4b09      	ldr	r3, [pc, #36]	; (8005300 <RCC_GetSystemClockFreq+0x48>)
 80052dc:	607b      	str	r3, [r7, #4]
      break;
 80052de:	e00a      	b.n	80052f6 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80052e0:	4b08      	ldr	r3, [pc, #32]	; (8005304 <RCC_GetSystemClockFreq+0x4c>)
 80052e2:	607b      	str	r3, [r7, #4]
      break;
 80052e4:	e007      	b.n	80052f6 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80052e6:	2008      	movs	r0, #8
 80052e8:	f000 f84c 	bl	8005384 <RCC_PLL_GetFreqDomain_SYS>
 80052ec:	6078      	str	r0, [r7, #4]
      break;
 80052ee:	e002      	b.n	80052f6 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80052f0:	4b03      	ldr	r3, [pc, #12]	; (8005300 <RCC_GetSystemClockFreq+0x48>)
 80052f2:	607b      	str	r3, [r7, #4]
      break;
 80052f4:	bf00      	nop
  }

  return frequency;
 80052f6:	687b      	ldr	r3, [r7, #4]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	00f42400 	.word	0x00f42400
 8005304:	007a1200 	.word	0x007a1200

08005308 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005310:	f7ff ff4a 	bl	80051a8 <LL_RCC_GetAHBPrescaler>
 8005314:	4603      	mov	r3, r0
 8005316:	091b      	lsrs	r3, r3, #4
 8005318:	f003 030f 	and.w	r3, r3, #15
 800531c:	4a04      	ldr	r2, [pc, #16]	; (8005330 <RCC_GetHCLKClockFreq+0x28>)
 800531e:	5cd3      	ldrb	r3, [r2, r3]
 8005320:	461a      	mov	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	40d3      	lsrs	r3, r2
}
 8005326:	4618      	mov	r0, r3
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	0801033c 	.word	0x0801033c

08005334 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800533c:	f7ff ff42 	bl	80051c4 <LL_RCC_GetAPB1Prescaler>
 8005340:	4603      	mov	r3, r0
 8005342:	0a9b      	lsrs	r3, r3, #10
 8005344:	4a04      	ldr	r2, [pc, #16]	; (8005358 <RCC_GetPCLK1ClockFreq+0x24>)
 8005346:	5cd3      	ldrb	r3, [r2, r3]
 8005348:	461a      	mov	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	40d3      	lsrs	r3, r2
}
 800534e:	4618      	mov	r0, r3
 8005350:	3708      	adds	r7, #8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	0801034c 	.word	0x0801034c

0800535c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005364:	f7ff ff3c 	bl	80051e0 <LL_RCC_GetAPB2Prescaler>
 8005368:	4603      	mov	r3, r0
 800536a:	0b5b      	lsrs	r3, r3, #13
 800536c:	4a04      	ldr	r2, [pc, #16]	; (8005380 <RCC_GetPCLK2ClockFreq+0x24>)
 800536e:	5cd3      	ldrb	r3, [r2, r3]
 8005370:	461a      	mov	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	40d3      	lsrs	r3, r2
}
 8005376:	4618      	mov	r0, r3
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	0801034c 	.word	0x0801034c

08005384 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8005384:	b590      	push	{r4, r7, lr}
 8005386:	b087      	sub	sp, #28
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 800538c:	2300      	movs	r3, #0
 800538e:	617b      	str	r3, [r7, #20]
 8005390:	2300      	movs	r3, #0
 8005392:	60fb      	str	r3, [r7, #12]
 8005394:	2300      	movs	r3, #0
 8005396:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005398:	f7ff ff30 	bl	80051fc <LL_RCC_PLL_GetMainSource>
 800539c:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d004      	beq.n	80053ae <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053aa:	d003      	beq.n	80053b4 <RCC_PLL_GetFreqDomain_SYS+0x30>
 80053ac:	e005      	b.n	80053ba <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80053ae:	4b12      	ldr	r3, [pc, #72]	; (80053f8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80053b0:	617b      	str	r3, [r7, #20]
      break;
 80053b2:	e005      	b.n	80053c0 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80053b4:	4b11      	ldr	r3, [pc, #68]	; (80053fc <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80053b6:	617b      	str	r3, [r7, #20]
      break;
 80053b8:	e002      	b.n	80053c0 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80053ba:	4b0f      	ldr	r3, [pc, #60]	; (80053f8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80053bc:	617b      	str	r3, [r7, #20]
      break;
 80053be:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b08      	cmp	r3, #8
 80053c4:	d113      	bne.n	80053ee <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80053c6:	f7ff ff43 	bl	8005250 <LL_RCC_PLL_GetDivider>
 80053ca:	4602      	mov	r2, r0
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	fbb3 f4f2 	udiv	r4, r3, r2
 80053d2:	f7ff ff21 	bl	8005218 <LL_RCC_PLL_GetN>
 80053d6:	4603      	mov	r3, r0
 80053d8:	fb03 f404 	mul.w	r4, r3, r4
 80053dc:	f7ff ff2a 	bl	8005234 <LL_RCC_PLL_GetP>
 80053e0:	4603      	mov	r3, r0
 80053e2:	0c1b      	lsrs	r3, r3, #16
 80053e4:	3301      	adds	r3, #1
 80053e6:	005b      	lsls	r3, r3, #1
 80053e8:	fbb4 f3f3 	udiv	r3, r4, r3
 80053ec:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80053ee:	693b      	ldr	r3, [r7, #16]
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	371c      	adds	r7, #28
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd90      	pop	{r4, r7, pc}
 80053f8:	00f42400 	.word	0x00f42400
 80053fc:	007a1200 	.word	0x007a1200

08005400 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005410:	2b40      	cmp	r3, #64	; 0x40
 8005412:	d101      	bne.n	8005418 <LL_SPI_IsEnabled+0x18>
 8005414:	2301      	movs	r3, #1
 8005416:	e000      	b.n	800541a <LL_SPI_IsEnabled+0x1a>
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr

08005426 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8005426:	b480      	push	{r7}
 8005428:	b083      	sub	sp, #12
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
 800542e:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	b29b      	uxth	r3, r3
 8005434:	461a      	mov	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	611a      	str	r2, [r3, #16]
}
 800543a:	bf00      	nop
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8005446:	b580      	push	{r7, lr}
 8005448:	b084      	sub	sp, #16
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
 800544e:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f7ff ffd3 	bl	8005400 <LL_SPI_IsEnabled>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d139      	bne.n	80054d4 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005468:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800546c:	683a      	ldr	r2, [r7, #0]
 800546e:	6811      	ldr	r1, [r2, #0]
 8005470:	683a      	ldr	r2, [r7, #0]
 8005472:	6852      	ldr	r2, [r2, #4]
 8005474:	4311      	orrs	r1, r2
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	6892      	ldr	r2, [r2, #8]
 800547a:	4311      	orrs	r1, r2
 800547c:	683a      	ldr	r2, [r7, #0]
 800547e:	68d2      	ldr	r2, [r2, #12]
 8005480:	4311      	orrs	r1, r2
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	6912      	ldr	r2, [r2, #16]
 8005486:	4311      	orrs	r1, r2
 8005488:	683a      	ldr	r2, [r7, #0]
 800548a:	6952      	ldr	r2, [r2, #20]
 800548c:	4311      	orrs	r1, r2
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	6992      	ldr	r2, [r2, #24]
 8005492:	4311      	orrs	r1, r2
 8005494:	683a      	ldr	r2, [r7, #0]
 8005496:	69d2      	ldr	r2, [r2, #28]
 8005498:	4311      	orrs	r1, r2
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	6a12      	ldr	r2, [r2, #32]
 800549e:	430a      	orrs	r2, r1
 80054a0:	431a      	orrs	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f023 0204 	bic.w	r2, r3, #4
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	0c1b      	lsrs	r3, r3, #16
 80054b4:	431a      	orrs	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054c2:	d105      	bne.n	80054d0 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	4619      	mov	r1, r3
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7ff ffab 	bl	8005426 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80054d0:	2300      	movs	r3, #0
 80054d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	69db      	ldr	r3, [r3, #28]
 80054d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	61da      	str	r2, [r3, #28]
  return status;
 80054e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b083      	sub	sp, #12
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
 80054f2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	683a      	ldr	r2, [r7, #0]
 80054f8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80054fa:	bf00      	nop
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
 800550e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005516:	bf00      	nop
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8005522:	b480      	push	{r7}
 8005524:	b083      	sub	sp, #12
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
 800552a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	683a      	ldr	r2, [r7, #0]
 8005530:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005532:	bf00      	nop
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800553e:	b480      	push	{r7}
 8005540:	b083      	sub	sp, #12
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
 8005546:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800554e:	bf00      	nop
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800555a:	b480      	push	{r7}
 800555c:	b083      	sub	sp, #12
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
 8005562:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	683a      	ldr	r2, [r7, #0]
 8005568:	639a      	str	r2, [r3, #56]	; 0x38
}
 800556a:	bf00      	nop
 800556c:	370c      	adds	r7, #12
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr

08005576 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8005576:	b480      	push	{r7}
 8005578:	b083      	sub	sp, #12
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
 800557e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	683a      	ldr	r2, [r7, #0]
 8005584:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005586:	bf00      	nop
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8005592:	b480      	push	{r7}
 8005594:	b083      	sub	sp, #12
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
 800559a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	683a      	ldr	r2, [r7, #0]
 80055a0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80055a2:	bf00      	nop
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80055ae:	b480      	push	{r7}
 80055b0:	b083      	sub	sp, #12
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	f043 0201 	orr.w	r2, r3, #1
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	615a      	str	r2, [r3, #20]
}
 80055c2:	bf00      	nop
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
	...

080055d0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a3d      	ldr	r2, [pc, #244]	; (80056d8 <LL_TIM_Init+0x108>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d013      	beq.n	8005610 <LL_TIM_Init+0x40>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ee:	d00f      	beq.n	8005610 <LL_TIM_Init+0x40>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a3a      	ldr	r2, [pc, #232]	; (80056dc <LL_TIM_Init+0x10c>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d00b      	beq.n	8005610 <LL_TIM_Init+0x40>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a39      	ldr	r2, [pc, #228]	; (80056e0 <LL_TIM_Init+0x110>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d007      	beq.n	8005610 <LL_TIM_Init+0x40>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a38      	ldr	r2, [pc, #224]	; (80056e4 <LL_TIM_Init+0x114>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d003      	beq.n	8005610 <LL_TIM_Init+0x40>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a37      	ldr	r2, [pc, #220]	; (80056e8 <LL_TIM_Init+0x118>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d106      	bne.n	800561e <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	4313      	orrs	r3, r2
 800561c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a2d      	ldr	r2, [pc, #180]	; (80056d8 <LL_TIM_Init+0x108>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d02b      	beq.n	800567e <LL_TIM_Init+0xae>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800562c:	d027      	beq.n	800567e <LL_TIM_Init+0xae>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a2a      	ldr	r2, [pc, #168]	; (80056dc <LL_TIM_Init+0x10c>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d023      	beq.n	800567e <LL_TIM_Init+0xae>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a29      	ldr	r2, [pc, #164]	; (80056e0 <LL_TIM_Init+0x110>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d01f      	beq.n	800567e <LL_TIM_Init+0xae>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a28      	ldr	r2, [pc, #160]	; (80056e4 <LL_TIM_Init+0x114>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d01b      	beq.n	800567e <LL_TIM_Init+0xae>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a27      	ldr	r2, [pc, #156]	; (80056e8 <LL_TIM_Init+0x118>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d017      	beq.n	800567e <LL_TIM_Init+0xae>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a26      	ldr	r2, [pc, #152]	; (80056ec <LL_TIM_Init+0x11c>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d013      	beq.n	800567e <LL_TIM_Init+0xae>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a25      	ldr	r2, [pc, #148]	; (80056f0 <LL_TIM_Init+0x120>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d00f      	beq.n	800567e <LL_TIM_Init+0xae>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a24      	ldr	r2, [pc, #144]	; (80056f4 <LL_TIM_Init+0x124>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d00b      	beq.n	800567e <LL_TIM_Init+0xae>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a23      	ldr	r2, [pc, #140]	; (80056f8 <LL_TIM_Init+0x128>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d007      	beq.n	800567e <LL_TIM_Init+0xae>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a22      	ldr	r2, [pc, #136]	; (80056fc <LL_TIM_Init+0x12c>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d003      	beq.n	800567e <LL_TIM_Init+0xae>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a21      	ldr	r2, [pc, #132]	; (8005700 <LL_TIM_Init+0x130>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d106      	bne.n	800568c <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	4313      	orrs	r3, r2
 800568a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	4619      	mov	r1, r3
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f7ff ff34 	bl	8005506 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	881b      	ldrh	r3, [r3, #0]
 80056a2:	4619      	mov	r1, r3
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f7ff ff20 	bl	80054ea <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a0a      	ldr	r2, [pc, #40]	; (80056d8 <LL_TIM_Init+0x108>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d003      	beq.n	80056ba <LL_TIM_Init+0xea>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a0c      	ldr	r2, [pc, #48]	; (80056e8 <LL_TIM_Init+0x118>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d105      	bne.n	80056c6 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	7c1b      	ldrb	r3, [r3, #16]
 80056be:	4619      	mov	r1, r3
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f7ff ff2e 	bl	8005522 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7ff ff71 	bl	80055ae <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	40010000 	.word	0x40010000
 80056dc:	40000400 	.word	0x40000400
 80056e0:	40000800 	.word	0x40000800
 80056e4:	40000c00 	.word	0x40000c00
 80056e8:	40010400 	.word	0x40010400
 80056ec:	40014000 	.word	0x40014000
 80056f0:	40014400 	.word	0x40014400
 80056f4:	40014800 	.word	0x40014800
 80056f8:	40001800 	.word	0x40001800
 80056fc:	40001c00 	.word	0x40001c00
 8005700:	40002000 	.word	0x40002000

08005704 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b086      	sub	sp, #24
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800571a:	d027      	beq.n	800576c <LL_TIM_OC_Init+0x68>
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005722:	d82a      	bhi.n	800577a <LL_TIM_OC_Init+0x76>
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800572a:	d018      	beq.n	800575e <LL_TIM_OC_Init+0x5a>
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005732:	d822      	bhi.n	800577a <LL_TIM_OC_Init+0x76>
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	2b01      	cmp	r3, #1
 8005738:	d003      	beq.n	8005742 <LL_TIM_OC_Init+0x3e>
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	2b10      	cmp	r3, #16
 800573e:	d007      	beq.n	8005750 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8005740:	e01b      	b.n	800577a <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8005742:	6879      	ldr	r1, [r7, #4]
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f000 f81f 	bl	8005788 <OC1Config>
 800574a:	4603      	mov	r3, r0
 800574c:	75fb      	strb	r3, [r7, #23]
      break;
 800574e:	e015      	b.n	800577c <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8005750:	6879      	ldr	r1, [r7, #4]
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f000 f884 	bl	8005860 <OC2Config>
 8005758:	4603      	mov	r3, r0
 800575a:	75fb      	strb	r3, [r7, #23]
      break;
 800575c:	e00e      	b.n	800577c <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800575e:	6879      	ldr	r1, [r7, #4]
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f000 f8ed 	bl	8005940 <OC3Config>
 8005766:	4603      	mov	r3, r0
 8005768:	75fb      	strb	r3, [r7, #23]
      break;
 800576a:	e007      	b.n	800577c <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800576c:	6879      	ldr	r1, [r7, #4]
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f000 f956 	bl	8005a20 <OC4Config>
 8005774:	4603      	mov	r3, r0
 8005776:	75fb      	strb	r3, [r7, #23]
      break;
 8005778:	e000      	b.n	800577c <LL_TIM_OC_Init+0x78>
      break;
 800577a:	bf00      	nop
  }

  return result;
 800577c:	7dfb      	ldrb	r3, [r7, #23]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3718      	adds	r7, #24
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
	...

08005788 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b086      	sub	sp, #24
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	f023 0201 	bic.w	r2, r3, #1
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f023 0303 	bic.w	r3, r3, #3
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f023 0202 	bic.w	r2, r3, #2
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	f023 0201 	bic.w	r2, r3, #1
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	4313      	orrs	r3, r2
 80057e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a1c      	ldr	r2, [pc, #112]	; (8005858 <OC1Config+0xd0>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d003      	beq.n	80057f2 <OC1Config+0x6a>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a1b      	ldr	r2, [pc, #108]	; (800585c <OC1Config+0xd4>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d11e      	bne.n	8005830 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f023 0208 	bic.w	r2, r3, #8
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	695b      	ldr	r3, [r3, #20]
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4313      	orrs	r3, r2
 8005800:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f023 0204 	bic.w	r2, r3, #4
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	4313      	orrs	r3, r2
 8005810:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	4313      	orrs	r3, r2
 800581e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	005b      	lsls	r3, r3, #1
 800582c:	4313      	orrs	r3, r2
 800582e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	4619      	mov	r1, r3
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7ff fe7b 	bl	800553e <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3718      	adds	r7, #24
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	40010000 	.word	0x40010000
 800585c:	40010400 	.word	0x40010400

08005860 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b086      	sub	sp, #24
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	f023 0210 	bic.w	r2, r3, #16
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800588e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	021b      	lsls	r3, r3, #8
 800589c:	4313      	orrs	r3, r2
 800589e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f023 0220 	bic.w	r2, r3, #32
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	011b      	lsls	r3, r3, #4
 80058ac:	4313      	orrs	r3, r2
 80058ae:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f023 0210 	bic.w	r2, r3, #16
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	011b      	lsls	r3, r3, #4
 80058bc:	4313      	orrs	r3, r2
 80058be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a1d      	ldr	r2, [pc, #116]	; (8005938 <OC2Config+0xd8>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d003      	beq.n	80058d0 <OC2Config+0x70>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a1c      	ldr	r2, [pc, #112]	; (800593c <OC2Config+0xdc>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d11f      	bne.n	8005910 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	019b      	lsls	r3, r3, #6
 80058dc:	4313      	orrs	r3, r2
 80058de:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	019b      	lsls	r3, r3, #6
 80058ec:	4313      	orrs	r3, r2
 80058ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4313      	orrs	r3, r2
 80058fe:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	00db      	lsls	r3, r3, #3
 800590c:	4313      	orrs	r3, r2
 800590e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	4619      	mov	r1, r3
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7ff fe19 	bl	800555a <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3718      	adds	r7, #24
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	40010000 	.word	0x40010000
 800593c:	40010400 	.word	0x40010400

08005940 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b086      	sub	sp, #24
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	69db      	ldr	r3, [r3, #28]
 8005966:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f023 0303 	bic.w	r3, r3, #3
 800596e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4313      	orrs	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	021b      	lsls	r3, r3, #8
 800598a:	4313      	orrs	r3, r2
 800598c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	021b      	lsls	r3, r3, #8
 800599a:	4313      	orrs	r3, r2
 800599c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a1d      	ldr	r2, [pc, #116]	; (8005a18 <OC3Config+0xd8>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d003      	beq.n	80059ae <OC3Config+0x6e>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a1c      	ldr	r2, [pc, #112]	; (8005a1c <OC3Config+0xdc>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d11f      	bne.n	80059ee <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	695b      	ldr	r3, [r3, #20]
 80059b8:	029b      	lsls	r3, r3, #10
 80059ba:	4313      	orrs	r3, r2
 80059bc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	029b      	lsls	r3, r3, #10
 80059ca:	4313      	orrs	r3, r2
 80059cc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	011b      	lsls	r3, r3, #4
 80059da:	4313      	orrs	r3, r2
 80059dc:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	69db      	ldr	r3, [r3, #28]
 80059e8:	015b      	lsls	r3, r3, #5
 80059ea:	4313      	orrs	r3, r2
 80059ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	4619      	mov	r1, r3
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f7ff fdb8 	bl	8005576 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3718      	adds	r7, #24
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	40010000 	.word	0x40010000
 8005a1c:	40010400 	.word	0x40010400

08005a20 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	021b      	lsls	r3, r3, #8
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	031b      	lsls	r3, r3, #12
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	031b      	lsls	r3, r3, #12
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a11      	ldr	r2, [pc, #68]	; (8005ac8 <OC4Config+0xa8>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d003      	beq.n	8005a90 <OC4Config+0x70>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a10      	ldr	r2, [pc, #64]	; (8005acc <OC4Config+0xac>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d107      	bne.n	8005aa0 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	019b      	lsls	r3, r3, #6
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f7ff fd6d 	bl	8005592 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3718      	adds	r7, #24
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	40010000 	.word	0x40010000
 8005acc:	40010400 	.word	0x40010400

08005ad0 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ae0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ae4:	bf0c      	ite	eq
 8005ae6:	2301      	moveq	r3, #1
 8005ae8:	2300      	movne	r3, #0
 8005aea:	b2db      	uxtb	r3, r3
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	431a      	orrs	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	611a      	str	r2, [r3, #16]
}
 8005b12:	bf00      	nop
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b083      	sub	sp, #12
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
 8005b26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	431a      	orrs	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	615a      	str	r2, [r3, #20]
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8005b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b48:	b0c0      	sub	sp, #256	; 0x100
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005b50:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8005b54:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8005b58:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b64:	f040 810c 	bne.w	8005d80 <LL_USART_SetBaudRate+0x23c>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8005b68:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b72:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005b76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005b7a:	4622      	mov	r2, r4
 8005b7c:	462b      	mov	r3, r5
 8005b7e:	1891      	adds	r1, r2, r2
 8005b80:	6639      	str	r1, [r7, #96]	; 0x60
 8005b82:	415b      	adcs	r3, r3
 8005b84:	667b      	str	r3, [r7, #100]	; 0x64
 8005b86:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005b8a:	4621      	mov	r1, r4
 8005b8c:	eb12 0801 	adds.w	r8, r2, r1
 8005b90:	4629      	mov	r1, r5
 8005b92:	eb43 0901 	adc.w	r9, r3, r1
 8005b96:	f04f 0200 	mov.w	r2, #0
 8005b9a:	f04f 0300 	mov.w	r3, #0
 8005b9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ba2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ba6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005baa:	4690      	mov	r8, r2
 8005bac:	4699      	mov	r9, r3
 8005bae:	4623      	mov	r3, r4
 8005bb0:	eb18 0303 	adds.w	r3, r8, r3
 8005bb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005bb8:	462b      	mov	r3, r5
 8005bba:	eb49 0303 	adc.w	r3, r9, r3
 8005bbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bc2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	469a      	mov	sl, r3
 8005bca:	4693      	mov	fp, r2
 8005bcc:	eb1a 030a 	adds.w	r3, sl, sl
 8005bd0:	65bb      	str	r3, [r7, #88]	; 0x58
 8005bd2:	eb4b 030b 	adc.w	r3, fp, fp
 8005bd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bd8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005bdc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005be0:	f7fa ffe2 	bl	8000ba8 <__aeabi_uldivmod>
 8005be4:	4602      	mov	r2, r0
 8005be6:	460b      	mov	r3, r1
 8005be8:	4b64      	ldr	r3, [pc, #400]	; (8005d7c <LL_USART_SetBaudRate+0x238>)
 8005bea:	fba3 2302 	umull	r2, r3, r3, r2
 8005bee:	095b      	lsrs	r3, r3, #5
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	011b      	lsls	r3, r3, #4
 8005bf4:	b29c      	uxth	r4, r3
 8005bf6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c00:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005c04:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8005c08:	4642      	mov	r2, r8
 8005c0a:	464b      	mov	r3, r9
 8005c0c:	1891      	adds	r1, r2, r2
 8005c0e:	6539      	str	r1, [r7, #80]	; 0x50
 8005c10:	415b      	adcs	r3, r3
 8005c12:	657b      	str	r3, [r7, #84]	; 0x54
 8005c14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005c18:	4641      	mov	r1, r8
 8005c1a:	1851      	adds	r1, r2, r1
 8005c1c:	64b9      	str	r1, [r7, #72]	; 0x48
 8005c1e:	4649      	mov	r1, r9
 8005c20:	414b      	adcs	r3, r1
 8005c22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c24:	f04f 0200 	mov.w	r2, #0
 8005c28:	f04f 0300 	mov.w	r3, #0
 8005c2c:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8005c30:	4659      	mov	r1, fp
 8005c32:	00cb      	lsls	r3, r1, #3
 8005c34:	4651      	mov	r1, sl
 8005c36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c3a:	4651      	mov	r1, sl
 8005c3c:	00ca      	lsls	r2, r1, #3
 8005c3e:	4610      	mov	r0, r2
 8005c40:	4619      	mov	r1, r3
 8005c42:	4603      	mov	r3, r0
 8005c44:	4642      	mov	r2, r8
 8005c46:	189b      	adds	r3, r3, r2
 8005c48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c4c:	464b      	mov	r3, r9
 8005c4e:	460a      	mov	r2, r1
 8005c50:	eb42 0303 	adc.w	r3, r2, r3
 8005c54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005c58:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c62:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8005c66:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	18db      	adds	r3, r3, r3
 8005c6e:	643b      	str	r3, [r7, #64]	; 0x40
 8005c70:	4613      	mov	r3, r2
 8005c72:	eb42 0303 	adc.w	r3, r2, r3
 8005c76:	647b      	str	r3, [r7, #68]	; 0x44
 8005c78:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c7c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005c80:	f7fa ff92 	bl	8000ba8 <__aeabi_uldivmod>
 8005c84:	4602      	mov	r2, r0
 8005c86:	460b      	mov	r3, r1
 8005c88:	4611      	mov	r1, r2
 8005c8a:	4b3c      	ldr	r3, [pc, #240]	; (8005d7c <LL_USART_SetBaudRate+0x238>)
 8005c8c:	fba3 2301 	umull	r2, r3, r3, r1
 8005c90:	095b      	lsrs	r3, r3, #5
 8005c92:	2264      	movs	r2, #100	; 0x64
 8005c94:	fb02 f303 	mul.w	r3, r2, r3
 8005c98:	1acb      	subs	r3, r1, r3
 8005c9a:	00db      	lsls	r3, r3, #3
 8005c9c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005ca0:	4b36      	ldr	r3, [pc, #216]	; (8005d7c <LL_USART_SetBaudRate+0x238>)
 8005ca2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ca6:	095b      	lsrs	r3, r3, #5
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	005b      	lsls	r3, r3, #1
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	4423      	add	r3, r4
 8005cb6:	b29c      	uxth	r4, r3
 8005cb8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005cc2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005cc6:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8005cca:	4642      	mov	r2, r8
 8005ccc:	464b      	mov	r3, r9
 8005cce:	1891      	adds	r1, r2, r2
 8005cd0:	63b9      	str	r1, [r7, #56]	; 0x38
 8005cd2:	415b      	adcs	r3, r3
 8005cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cd6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005cda:	4641      	mov	r1, r8
 8005cdc:	1851      	adds	r1, r2, r1
 8005cde:	6339      	str	r1, [r7, #48]	; 0x30
 8005ce0:	4649      	mov	r1, r9
 8005ce2:	414b      	adcs	r3, r1
 8005ce4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ce6:	f04f 0200 	mov.w	r2, #0
 8005cea:	f04f 0300 	mov.w	r3, #0
 8005cee:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005cf2:	4659      	mov	r1, fp
 8005cf4:	00cb      	lsls	r3, r1, #3
 8005cf6:	4651      	mov	r1, sl
 8005cf8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cfc:	4651      	mov	r1, sl
 8005cfe:	00ca      	lsls	r2, r1, #3
 8005d00:	4610      	mov	r0, r2
 8005d02:	4619      	mov	r1, r3
 8005d04:	4603      	mov	r3, r0
 8005d06:	4642      	mov	r2, r8
 8005d08:	189b      	adds	r3, r3, r2
 8005d0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d0e:	464b      	mov	r3, r9
 8005d10:	460a      	mov	r2, r1
 8005d12:	eb42 0303 	adc.w	r3, r2, r3
 8005d16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005d1a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d24:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8005d28:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	18db      	adds	r3, r3, r3
 8005d30:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d32:	4613      	mov	r3, r2
 8005d34:	eb42 0303 	adc.w	r3, r2, r3
 8005d38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d3e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8005d42:	f7fa ff31 	bl	8000ba8 <__aeabi_uldivmod>
 8005d46:	4602      	mov	r2, r0
 8005d48:	460b      	mov	r3, r1
 8005d4a:	4b0c      	ldr	r3, [pc, #48]	; (8005d7c <LL_USART_SetBaudRate+0x238>)
 8005d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8005d50:	095b      	lsrs	r3, r3, #5
 8005d52:	2164      	movs	r1, #100	; 0x64
 8005d54:	fb01 f303 	mul.w	r3, r1, r3
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	00db      	lsls	r3, r3, #3
 8005d5c:	3332      	adds	r3, #50	; 0x32
 8005d5e:	4a07      	ldr	r2, [pc, #28]	; (8005d7c <LL_USART_SetBaudRate+0x238>)
 8005d60:	fba2 2303 	umull	r2, r3, r2, r3
 8005d64:	095b      	lsrs	r3, r3, #5
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	f003 0307 	and.w	r3, r3, #7
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	4423      	add	r3, r4
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	461a      	mov	r2, r3
 8005d74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d78:	609a      	str	r2, [r3, #8]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 8005d7a:	e107      	b.n	8005f8c <LL_USART_SetBaudRate+0x448>
 8005d7c:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005d80:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d84:	2200      	movs	r2, #0
 8005d86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d8a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005d8e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8005d92:	4642      	mov	r2, r8
 8005d94:	464b      	mov	r3, r9
 8005d96:	1891      	adds	r1, r2, r2
 8005d98:	6239      	str	r1, [r7, #32]
 8005d9a:	415b      	adcs	r3, r3
 8005d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005da2:	4641      	mov	r1, r8
 8005da4:	1854      	adds	r4, r2, r1
 8005da6:	4649      	mov	r1, r9
 8005da8:	eb43 0501 	adc.w	r5, r3, r1
 8005dac:	f04f 0200 	mov.w	r2, #0
 8005db0:	f04f 0300 	mov.w	r3, #0
 8005db4:	00eb      	lsls	r3, r5, #3
 8005db6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005dba:	00e2      	lsls	r2, r4, #3
 8005dbc:	4614      	mov	r4, r2
 8005dbe:	461d      	mov	r5, r3
 8005dc0:	4643      	mov	r3, r8
 8005dc2:	18e3      	adds	r3, r4, r3
 8005dc4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005dc8:	464b      	mov	r3, r9
 8005dca:	eb45 0303 	adc.w	r3, r5, r3
 8005dce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005dd2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ddc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005de0:	f04f 0200 	mov.w	r2, #0
 8005de4:	f04f 0300 	mov.w	r3, #0
 8005de8:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8005dec:	4629      	mov	r1, r5
 8005dee:	008b      	lsls	r3, r1, #2
 8005df0:	4621      	mov	r1, r4
 8005df2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005df6:	4621      	mov	r1, r4
 8005df8:	008a      	lsls	r2, r1, #2
 8005dfa:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8005dfe:	f7fa fed3 	bl	8000ba8 <__aeabi_uldivmod>
 8005e02:	4602      	mov	r2, r0
 8005e04:	460b      	mov	r3, r1
 8005e06:	4b64      	ldr	r3, [pc, #400]	; (8005f98 <LL_USART_SetBaudRate+0x454>)
 8005e08:	fba3 2302 	umull	r2, r3, r3, r2
 8005e0c:	095b      	lsrs	r3, r3, #5
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	011b      	lsls	r3, r3, #4
 8005e12:	b29c      	uxth	r4, r3
 8005e14:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e22:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8005e26:	4642      	mov	r2, r8
 8005e28:	464b      	mov	r3, r9
 8005e2a:	1891      	adds	r1, r2, r2
 8005e2c:	61b9      	str	r1, [r7, #24]
 8005e2e:	415b      	adcs	r3, r3
 8005e30:	61fb      	str	r3, [r7, #28]
 8005e32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e36:	4641      	mov	r1, r8
 8005e38:	1851      	adds	r1, r2, r1
 8005e3a:	6139      	str	r1, [r7, #16]
 8005e3c:	4649      	mov	r1, r9
 8005e3e:	414b      	adcs	r3, r1
 8005e40:	617b      	str	r3, [r7, #20]
 8005e42:	f04f 0200 	mov.w	r2, #0
 8005e46:	f04f 0300 	mov.w	r3, #0
 8005e4a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e4e:	4659      	mov	r1, fp
 8005e50:	00cb      	lsls	r3, r1, #3
 8005e52:	4651      	mov	r1, sl
 8005e54:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e58:	4651      	mov	r1, sl
 8005e5a:	00ca      	lsls	r2, r1, #3
 8005e5c:	4610      	mov	r0, r2
 8005e5e:	4619      	mov	r1, r3
 8005e60:	4603      	mov	r3, r0
 8005e62:	4642      	mov	r2, r8
 8005e64:	189b      	adds	r3, r3, r2
 8005e66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e6a:	464b      	mov	r3, r9
 8005e6c:	460a      	mov	r2, r1
 8005e6e:	eb42 0303 	adc.w	r3, r2, r3
 8005e72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005e76:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e80:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005e84:	f04f 0200 	mov.w	r2, #0
 8005e88:	f04f 0300 	mov.w	r3, #0
 8005e8c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8005e90:	4649      	mov	r1, r9
 8005e92:	008b      	lsls	r3, r1, #2
 8005e94:	4641      	mov	r1, r8
 8005e96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e9a:	4641      	mov	r1, r8
 8005e9c:	008a      	lsls	r2, r1, #2
 8005e9e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8005ea2:	f7fa fe81 	bl	8000ba8 <__aeabi_uldivmod>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	4b3b      	ldr	r3, [pc, #236]	; (8005f98 <LL_USART_SetBaudRate+0x454>)
 8005eac:	fba3 1302 	umull	r1, r3, r3, r2
 8005eb0:	095b      	lsrs	r3, r3, #5
 8005eb2:	2164      	movs	r1, #100	; 0x64
 8005eb4:	fb01 f303 	mul.w	r3, r1, r3
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	011b      	lsls	r3, r3, #4
 8005ebc:	3332      	adds	r3, #50	; 0x32
 8005ebe:	4a36      	ldr	r2, [pc, #216]	; (8005f98 <LL_USART_SetBaudRate+0x454>)
 8005ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec4:	095b      	lsrs	r3, r3, #5
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	4423      	add	r3, r4
 8005ed0:	b29c      	uxth	r4, r3
 8005ed2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	67bb      	str	r3, [r7, #120]	; 0x78
 8005eda:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005edc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005ee0:	4642      	mov	r2, r8
 8005ee2:	464b      	mov	r3, r9
 8005ee4:	1891      	adds	r1, r2, r2
 8005ee6:	60b9      	str	r1, [r7, #8]
 8005ee8:	415b      	adcs	r3, r3
 8005eea:	60fb      	str	r3, [r7, #12]
 8005eec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ef0:	4641      	mov	r1, r8
 8005ef2:	1851      	adds	r1, r2, r1
 8005ef4:	6039      	str	r1, [r7, #0]
 8005ef6:	4649      	mov	r1, r9
 8005ef8:	414b      	adcs	r3, r1
 8005efa:	607b      	str	r3, [r7, #4]
 8005efc:	f04f 0200 	mov.w	r2, #0
 8005f00:	f04f 0300 	mov.w	r3, #0
 8005f04:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f08:	4659      	mov	r1, fp
 8005f0a:	00cb      	lsls	r3, r1, #3
 8005f0c:	4651      	mov	r1, sl
 8005f0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f12:	4651      	mov	r1, sl
 8005f14:	00ca      	lsls	r2, r1, #3
 8005f16:	4610      	mov	r0, r2
 8005f18:	4619      	mov	r1, r3
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	4642      	mov	r2, r8
 8005f1e:	189b      	adds	r3, r3, r2
 8005f20:	673b      	str	r3, [r7, #112]	; 0x70
 8005f22:	464b      	mov	r3, r9
 8005f24:	460a      	mov	r2, r1
 8005f26:	eb42 0303 	adc.w	r3, r2, r3
 8005f2a:	677b      	str	r3, [r7, #116]	; 0x74
 8005f2c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005f30:	2200      	movs	r2, #0
 8005f32:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f34:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f36:	f04f 0200 	mov.w	r2, #0
 8005f3a:	f04f 0300 	mov.w	r3, #0
 8005f3e:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8005f42:	4649      	mov	r1, r9
 8005f44:	008b      	lsls	r3, r1, #2
 8005f46:	4641      	mov	r1, r8
 8005f48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f4c:	4641      	mov	r1, r8
 8005f4e:	008a      	lsls	r2, r1, #2
 8005f50:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005f54:	f7fa fe28 	bl	8000ba8 <__aeabi_uldivmod>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	4b0e      	ldr	r3, [pc, #56]	; (8005f98 <LL_USART_SetBaudRate+0x454>)
 8005f5e:	fba3 1302 	umull	r1, r3, r3, r2
 8005f62:	095b      	lsrs	r3, r3, #5
 8005f64:	2164      	movs	r1, #100	; 0x64
 8005f66:	fb01 f303 	mul.w	r3, r1, r3
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	011b      	lsls	r3, r3, #4
 8005f6e:	3332      	adds	r3, #50	; 0x32
 8005f70:	4a09      	ldr	r2, [pc, #36]	; (8005f98 <LL_USART_SetBaudRate+0x454>)
 8005f72:	fba2 2303 	umull	r2, r3, r2, r3
 8005f76:	095b      	lsrs	r3, r3, #5
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	f003 030f 	and.w	r3, r3, #15
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	4423      	add	r3, r4
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	461a      	mov	r2, r3
 8005f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f8a:	609a      	str	r2, [r3, #8]
}
 8005f8c:	bf00      	nop
 8005f8e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005f92:	46bd      	mov	sp, r7
 8005f94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f98:	51eb851f 	.word	0x51eb851f

08005f9c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b088      	sub	sp, #32
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8005faa:	2300      	movs	r3, #0
 8005fac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f7ff fd8e 	bl	8005ad0 <LL_USART_IsEnabled>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d15e      	bne.n	8006078 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005fc2:	f023 030c 	bic.w	r3, r3, #12
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	6851      	ldr	r1, [r2, #4]
 8005fca:	683a      	ldr	r2, [r7, #0]
 8005fcc:	68d2      	ldr	r2, [r2, #12]
 8005fce:	4311      	orrs	r1, r2
 8005fd0:	683a      	ldr	r2, [r7, #0]
 8005fd2:	6912      	ldr	r2, [r2, #16]
 8005fd4:	4311      	orrs	r1, r2
 8005fd6:	683a      	ldr	r2, [r7, #0]
 8005fd8:	6992      	ldr	r2, [r2, #24]
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f7ff fd85 	bl	8005af8 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f7ff fd92 	bl	8005b1e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8005ffa:	f107 0308 	add.w	r3, r7, #8
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7ff f934 	bl	800526c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a1f      	ldr	r2, [pc, #124]	; (8006084 <LL_USART_Init+0xe8>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d102      	bne.n	8006012 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	61bb      	str	r3, [r7, #24]
 8006010:	e021      	b.n	8006056 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a1c      	ldr	r2, [pc, #112]	; (8006088 <LL_USART_Init+0xec>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d102      	bne.n	8006020 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	61bb      	str	r3, [r7, #24]
 800601e:	e01a      	b.n	8006056 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a1a      	ldr	r2, [pc, #104]	; (800608c <LL_USART_Init+0xf0>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d102      	bne.n	800602e <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	61bb      	str	r3, [r7, #24]
 800602c:	e013      	b.n	8006056 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a17      	ldr	r2, [pc, #92]	; (8006090 <LL_USART_Init+0xf4>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d102      	bne.n	800603c <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	61bb      	str	r3, [r7, #24]
 800603a:	e00c      	b.n	8006056 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a15      	ldr	r2, [pc, #84]	; (8006094 <LL_USART_Init+0xf8>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d102      	bne.n	800604a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	61bb      	str	r3, [r7, #24]
 8006048:	e005      	b.n	8006056 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a12      	ldr	r2, [pc, #72]	; (8006098 <LL_USART_Init+0xfc>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d101      	bne.n	8006056 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00d      	beq.n	8006078 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d009      	beq.n	8006078 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8006064:	2300      	movs	r3, #0
 8006066:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	699a      	ldr	r2, [r3, #24]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	69b9      	ldr	r1, [r7, #24]
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7ff fd66 	bl	8005b44 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8006078:	7ffb      	ldrb	r3, [r7, #31]
}
 800607a:	4618      	mov	r0, r3
 800607c:	3720      	adds	r7, #32
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	40011000 	.word	0x40011000
 8006088:	40004400 	.word	0x40004400
 800608c:	40004800 	.word	0x40004800
 8006090:	40011400 	.word	0x40011400
 8006094:	40004c00 	.word	0x40004c00
 8006098:	40005000 	.word	0x40005000

0800609c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	683a      	ldr	r2, [r7, #0]
 80060aa:	619a      	str	r2, [r3, #24]
}
 80060ac:	bf00      	nop
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	041a      	lsls	r2, r3, #16
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	619a      	str	r2, [r3, #24]
}
 80060ca:	bf00      	nop
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
	...

080060d8 <AT24C08_Page_Write>:

#include "i2c.h"
#include "AT24C08.h"

void AT24C08_Page_Write(unsigned char page, unsigned char* data, unsigned char len)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b088      	sub	sp, #32
 80060dc:	af04      	add	r7, sp, #16
 80060de:	4603      	mov	r3, r0
 80060e0:	6039      	str	r1, [r7, #0]
 80060e2:	71fb      	strb	r3, [r7, #7]
 80060e4:	4613      	mov	r3, r2
 80060e6:	71bb      	strb	r3, [r7, #6]
	unsigned char devAddress = ((page*16)>>8)<<1 | 0xA0;
 80060e8:	79fb      	ldrb	r3, [r7, #7]
 80060ea:	011b      	lsls	r3, r3, #4
 80060ec:	121b      	asrs	r3, r3, #8
 80060ee:	005b      	lsls	r3, r3, #1
 80060f0:	b25b      	sxtb	r3, r3
 80060f2:	f063 035f 	orn	r3, r3, #95	; 0x5f
 80060f6:	b25b      	sxtb	r3, r3
 80060f8:	73fb      	strb	r3, [r7, #15]
	unsigned char wordAddress = (page*16) & 0xff;
 80060fa:	79fb      	ldrb	r3, [r7, #7]
 80060fc:	011b      	lsls	r3, r3, #4
 80060fe:	73bb      	strb	r3, [r7, #14]

	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8006100:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006104:	480e      	ldr	r0, [pc, #56]	; (8006140 <AT24C08_Page_Write+0x68>)
 8006106:	f7ff ffd7 	bl	80060b8 <LL_GPIO_ResetOutputPin>
	HAL_I2C_Mem_Write(&hi2c1, devAddress, wordAddress, I2C_MEMADD_SIZE_8BIT, &data[0], 16, 1);
 800610a:	7bfb      	ldrb	r3, [r7, #15]
 800610c:	b299      	uxth	r1, r3
 800610e:	7bbb      	ldrb	r3, [r7, #14]
 8006110:	b29a      	uxth	r2, r3
 8006112:	2301      	movs	r3, #1
 8006114:	9302      	str	r3, [sp, #8]
 8006116:	2310      	movs	r3, #16
 8006118:	9301      	str	r3, [sp, #4]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	9300      	str	r3, [sp, #0]
 800611e:	2301      	movs	r3, #1
 8006120:	4808      	ldr	r0, [pc, #32]	; (8006144 <AT24C08_Page_Write+0x6c>)
 8006122:	f7fc fad1 	bl	80026c8 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8006126:	2001      	movs	r0, #1
 8006128:	f7fa ff32 	bl	8000f90 <HAL_Delay>
	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 800612c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006130:	4803      	ldr	r0, [pc, #12]	; (8006140 <AT24C08_Page_Write+0x68>)
 8006132:	f7ff ffb3 	bl	800609c <LL_GPIO_SetOutputPin>
}
 8006136:	bf00      	nop
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	40020800 	.word	0x40020800
 8006144:	20000554 	.word	0x20000554

08006148 <AT24C08_Page_Read>:

void AT24C08_Page_Read(unsigned char page, unsigned char* data, unsigned char len)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b088      	sub	sp, #32
 800614c:	af04      	add	r7, sp, #16
 800614e:	4603      	mov	r3, r0
 8006150:	6039      	str	r1, [r7, #0]
 8006152:	71fb      	strb	r3, [r7, #7]
 8006154:	4613      	mov	r3, r2
 8006156:	71bb      	strb	r3, [r7, #6]
	unsigned char devAddress = ((page*16)>>8)<<1 | 0xA0;
 8006158:	79fb      	ldrb	r3, [r7, #7]
 800615a:	011b      	lsls	r3, r3, #4
 800615c:	121b      	asrs	r3, r3, #8
 800615e:	005b      	lsls	r3, r3, #1
 8006160:	b25b      	sxtb	r3, r3
 8006162:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8006166:	b25b      	sxtb	r3, r3
 8006168:	73fb      	strb	r3, [r7, #15]
	unsigned char wordAddress = (page*16) & 0xff;
 800616a:	79fb      	ldrb	r3, [r7, #7]
 800616c:	011b      	lsls	r3, r3, #4
 800616e:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Read(&hi2c1, devAddress, wordAddress, I2C_MEMADD_SIZE_8BIT, &data[0], 16, 1);
 8006170:	7bfb      	ldrb	r3, [r7, #15]
 8006172:	b299      	uxth	r1, r3
 8006174:	7bbb      	ldrb	r3, [r7, #14]
 8006176:	b29a      	uxth	r2, r3
 8006178:	2301      	movs	r3, #1
 800617a:	9302      	str	r3, [sp, #8]
 800617c:	2310      	movs	r3, #16
 800617e:	9301      	str	r3, [sp, #4]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	9300      	str	r3, [sp, #0]
 8006184:	2301      	movs	r3, #1
 8006186:	4803      	ldr	r0, [pc, #12]	; (8006194 <AT24C08_Page_Read+0x4c>)
 8006188:	f7fc fb98 	bl	80028bc <HAL_I2C_Mem_Read>
}
 800618c:	bf00      	nop
 800618e:	3710      	adds	r7, #16
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	20000554 	.word	0x20000554

08006198 <EP_PIDGain_Write>:

void EP_PIDGain_Write(unsigned char id, float PGain, float IGain, float DGain)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b08c      	sub	sp, #48	; 0x30
 800619c:	af00      	add	r7, sp, #0
 800619e:	4603      	mov	r3, r0
 80061a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80061a4:	edc7 0a01 	vstr	s1, [r7, #4]
 80061a8:	ed87 1a00 	vstr	s2, [r7]
 80061ac:	73fb      	strb	r3, [r7, #15]
	unsigned char buf_write[16];
	Parser parser;

	buf_write[0] = 0x45;
 80061ae:	2345      	movs	r3, #69	; 0x45
 80061b0:	763b      	strb	r3, [r7, #24]
	buf_write[1] = 0x50;
 80061b2:	2350      	movs	r3, #80	; 0x50
 80061b4:	767b      	strb	r3, [r7, #25]
	buf_write[2] = id;
 80061b6:	7bfb      	ldrb	r3, [r7, #15]
 80061b8:	76bb      	strb	r3, [r7, #26]
	parser.f = PGain;
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	617b      	str	r3, [r7, #20]
	buf_write[3] = parser.byte[0];
 80061be:	7d3b      	ldrb	r3, [r7, #20]
 80061c0:	76fb      	strb	r3, [r7, #27]
	buf_write[4] = parser.byte[1];
 80061c2:	7d7b      	ldrb	r3, [r7, #21]
 80061c4:	773b      	strb	r3, [r7, #28]
	buf_write[5] = parser.byte[2];
 80061c6:	7dbb      	ldrb	r3, [r7, #22]
 80061c8:	777b      	strb	r3, [r7, #29]
	buf_write[6] = parser.byte[3];
 80061ca:	7dfb      	ldrb	r3, [r7, #23]
 80061cc:	77bb      	strb	r3, [r7, #30]

	parser.f = IGain;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	617b      	str	r3, [r7, #20]
	buf_write[7] = parser.byte[0];
 80061d2:	7d3b      	ldrb	r3, [r7, #20]
 80061d4:	77fb      	strb	r3, [r7, #31]
	buf_write[8] = parser.byte[1];
 80061d6:	7d7b      	ldrb	r3, [r7, #21]
 80061d8:	f887 3020 	strb.w	r3, [r7, #32]
	buf_write[9] = parser.byte[2];
 80061dc:	7dbb      	ldrb	r3, [r7, #22]
 80061de:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buf_write[10] = parser.byte[3];
 80061e2:	7dfb      	ldrb	r3, [r7, #23]
 80061e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	parser.f = DGain;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	617b      	str	r3, [r7, #20]
	buf_write[11] = parser.byte[0];
 80061ec:	7d3b      	ldrb	r3, [r7, #20]
 80061ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buf_write[12] = parser.byte[1];
 80061f2:	7d7b      	ldrb	r3, [r7, #21]
 80061f4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buf_write[13] = parser.byte[2];
 80061f8:	7dbb      	ldrb	r3, [r7, #22]
 80061fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buf_write[14] = parser.byte[3];
 80061fe:	7dfb      	ldrb	r3, [r7, #23]
 8006200:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	unsigned char chksum = 0xff;
 8006204:	23ff      	movs	r3, #255	; 0xff
 8006206:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for(int i=0;i<15;i++) chksum -= buf_write[i];
 800620a:	2300      	movs	r3, #0
 800620c:	62bb      	str	r3, [r7, #40]	; 0x28
 800620e:	e00c      	b.n	800622a <EP_PIDGain_Write+0x92>
 8006210:	f107 0218 	add.w	r2, r7, #24
 8006214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006216:	4413      	add	r3, r2
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006226:	3301      	adds	r3, #1
 8006228:	62bb      	str	r3, [r7, #40]	; 0x28
 800622a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622c:	2b0e      	cmp	r3, #14
 800622e:	ddef      	ble.n	8006210 <EP_PIDGain_Write+0x78>

	buf_write[15] = chksum;
 8006230:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	switch(id)
 8006238:	7bfb      	ldrb	r3, [r7, #15]
 800623a:	2b05      	cmp	r3, #5
 800623c:	d83e      	bhi.n	80062bc <EP_PIDGain_Write+0x124>
 800623e:	a201      	add	r2, pc, #4	; (adr r2, 8006244 <EP_PIDGain_Write+0xac>)
 8006240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006244:	0800625d 	.word	0x0800625d
 8006248:	0800626d 	.word	0x0800626d
 800624c:	0800627d 	.word	0x0800627d
 8006250:	0800628d 	.word	0x0800628d
 8006254:	0800629d 	.word	0x0800629d
 8006258:	080062ad 	.word	0x080062ad
	{
	case 0:
		AT24C08_Page_Write(0, &buf_write[0], 16);
 800625c:	f107 0318 	add.w	r3, r7, #24
 8006260:	2210      	movs	r2, #16
 8006262:	4619      	mov	r1, r3
 8006264:	2000      	movs	r0, #0
 8006266:	f7ff ff37 	bl	80060d8 <AT24C08_Page_Write>
		break;
 800626a:	e027      	b.n	80062bc <EP_PIDGain_Write+0x124>
	case 1:
		AT24C08_Page_Write(1, &buf_write[0], 16);
 800626c:	f107 0318 	add.w	r3, r7, #24
 8006270:	2210      	movs	r2, #16
 8006272:	4619      	mov	r1, r3
 8006274:	2001      	movs	r0, #1
 8006276:	f7ff ff2f 	bl	80060d8 <AT24C08_Page_Write>
		break;
 800627a:	e01f      	b.n	80062bc <EP_PIDGain_Write+0x124>
	case 2:
		AT24C08_Page_Write(2, &buf_write[0], 16);
 800627c:	f107 0318 	add.w	r3, r7, #24
 8006280:	2210      	movs	r2, #16
 8006282:	4619      	mov	r1, r3
 8006284:	2002      	movs	r0, #2
 8006286:	f7ff ff27 	bl	80060d8 <AT24C08_Page_Write>
		break;
 800628a:	e017      	b.n	80062bc <EP_PIDGain_Write+0x124>
	case 3:
		AT24C08_Page_Write(3, &buf_write[0], 16);
 800628c:	f107 0318 	add.w	r3, r7, #24
 8006290:	2210      	movs	r2, #16
 8006292:	4619      	mov	r1, r3
 8006294:	2003      	movs	r0, #3
 8006296:	f7ff ff1f 	bl	80060d8 <AT24C08_Page_Write>
		break;
 800629a:	e00f      	b.n	80062bc <EP_PIDGain_Write+0x124>
	case 4:
		AT24C08_Page_Write(4, &buf_write[0], 16);
 800629c:	f107 0318 	add.w	r3, r7, #24
 80062a0:	2210      	movs	r2, #16
 80062a2:	4619      	mov	r1, r3
 80062a4:	2004      	movs	r0, #4
 80062a6:	f7ff ff17 	bl	80060d8 <AT24C08_Page_Write>
		break;
 80062aa:	e007      	b.n	80062bc <EP_PIDGain_Write+0x124>
	case 5:
		AT24C08_Page_Write(5, &buf_write[0], 16);
 80062ac:	f107 0318 	add.w	r3, r7, #24
 80062b0:	2210      	movs	r2, #16
 80062b2:	4619      	mov	r1, r3
 80062b4:	2005      	movs	r0, #5
 80062b6:	f7ff ff0f 	bl	80060d8 <AT24C08_Page_Write>
		break;
 80062ba:	bf00      	nop
	}
}
 80062bc:	bf00      	nop
 80062be:	3730      	adds	r7, #48	; 0x30
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <EP_PIDGain_Read>:

unsigned char EP_PIDGain_Read(unsigned char id, float* PGain, float* IGain, float* DGain)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b08c      	sub	sp, #48	; 0x30
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60b9      	str	r1, [r7, #8]
 80062cc:	607a      	str	r2, [r7, #4]
 80062ce:	603b      	str	r3, [r7, #0]
 80062d0:	4603      	mov	r3, r0
 80062d2:	73fb      	strb	r3, [r7, #15]
	unsigned char buf_read[16];
	Parser parser;

	switch(id)
 80062d4:	7bfb      	ldrb	r3, [r7, #15]
 80062d6:	2b05      	cmp	r3, #5
 80062d8:	d83e      	bhi.n	8006358 <EP_PIDGain_Read+0x94>
 80062da:	a201      	add	r2, pc, #4	; (adr r2, 80062e0 <EP_PIDGain_Read+0x1c>)
 80062dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e0:	080062f9 	.word	0x080062f9
 80062e4:	08006309 	.word	0x08006309
 80062e8:	08006319 	.word	0x08006319
 80062ec:	08006329 	.word	0x08006329
 80062f0:	08006339 	.word	0x08006339
 80062f4:	08006349 	.word	0x08006349
	{
	case 0:
		AT24C08_Page_Read(0, &buf_read[0], 16);
 80062f8:	f107 0318 	add.w	r3, r7, #24
 80062fc:	2210      	movs	r2, #16
 80062fe:	4619      	mov	r1, r3
 8006300:	2000      	movs	r0, #0
 8006302:	f7ff ff21 	bl	8006148 <AT24C08_Page_Read>
		break;
 8006306:	e027      	b.n	8006358 <EP_PIDGain_Read+0x94>
	case 1:
		AT24C08_Page_Read(1, &buf_read[0], 16);
 8006308:	f107 0318 	add.w	r3, r7, #24
 800630c:	2210      	movs	r2, #16
 800630e:	4619      	mov	r1, r3
 8006310:	2001      	movs	r0, #1
 8006312:	f7ff ff19 	bl	8006148 <AT24C08_Page_Read>
		break;
 8006316:	e01f      	b.n	8006358 <EP_PIDGain_Read+0x94>
	case 2:
		AT24C08_Page_Read(2, &buf_read[0], 16);
 8006318:	f107 0318 	add.w	r3, r7, #24
 800631c:	2210      	movs	r2, #16
 800631e:	4619      	mov	r1, r3
 8006320:	2002      	movs	r0, #2
 8006322:	f7ff ff11 	bl	8006148 <AT24C08_Page_Read>
		break;
 8006326:	e017      	b.n	8006358 <EP_PIDGain_Read+0x94>
	case 3:
		AT24C08_Page_Read(3, &buf_read[0], 16);
 8006328:	f107 0318 	add.w	r3, r7, #24
 800632c:	2210      	movs	r2, #16
 800632e:	4619      	mov	r1, r3
 8006330:	2003      	movs	r0, #3
 8006332:	f7ff ff09 	bl	8006148 <AT24C08_Page_Read>
		break;
 8006336:	e00f      	b.n	8006358 <EP_PIDGain_Read+0x94>
	case 4:
		AT24C08_Page_Read(4, &buf_read[0], 16);
 8006338:	f107 0318 	add.w	r3, r7, #24
 800633c:	2210      	movs	r2, #16
 800633e:	4619      	mov	r1, r3
 8006340:	2004      	movs	r0, #4
 8006342:	f7ff ff01 	bl	8006148 <AT24C08_Page_Read>
		break;
 8006346:	e007      	b.n	8006358 <EP_PIDGain_Read+0x94>
	case 5:
		AT24C08_Page_Read(5, &buf_read[0], 16);
 8006348:	f107 0318 	add.w	r3, r7, #24
 800634c:	2210      	movs	r2, #16
 800634e:	4619      	mov	r1, r3
 8006350:	2005      	movs	r0, #5
 8006352:	f7ff fef9 	bl	8006148 <AT24C08_Page_Read>
		break;
 8006356:	bf00      	nop
	}

	unsigned char chksum = 0xff;
 8006358:	23ff      	movs	r3, #255	; 0xff
 800635a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for(int i=0;i<15;i++) chksum -= buf_read[i];
 800635e:	2300      	movs	r3, #0
 8006360:	62bb      	str	r3, [r7, #40]	; 0x28
 8006362:	e00c      	b.n	800637e <EP_PIDGain_Read+0xba>
 8006364:	f107 0218 	add.w	r2, r7, #24
 8006368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636a:	4413      	add	r3, r2
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637a:	3301      	adds	r3, #1
 800637c:	62bb      	str	r3, [r7, #40]	; 0x28
 800637e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006380:	2b0e      	cmp	r3, #14
 8006382:	ddef      	ble.n	8006364 <EP_PIDGain_Read+0xa0>

	if(buf_read[15] == chksum && buf_read[0] == 0x45 && buf_read[1] == 0x50)
 8006384:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006388:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800638c:	429a      	cmp	r2, r3
 800638e:	d12f      	bne.n	80063f0 <EP_PIDGain_Read+0x12c>
 8006390:	7e3b      	ldrb	r3, [r7, #24]
 8006392:	2b45      	cmp	r3, #69	; 0x45
 8006394:	d12c      	bne.n	80063f0 <EP_PIDGain_Read+0x12c>
 8006396:	7e7b      	ldrb	r3, [r7, #25]
 8006398:	2b50      	cmp	r3, #80	; 0x50
 800639a:	d129      	bne.n	80063f0 <EP_PIDGain_Read+0x12c>
	{
		parser.byte[0] = buf_read[3];
 800639c:	7efb      	ldrb	r3, [r7, #27]
 800639e:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[4];
 80063a0:	7f3b      	ldrb	r3, [r7, #28]
 80063a2:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[5];
 80063a4:	7f7b      	ldrb	r3, [r7, #29]
 80063a6:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[6];
 80063a8:	7fbb      	ldrb	r3, [r7, #30]
 80063aa:	75fb      	strb	r3, [r7, #23]
		*PGain = parser.f;
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	601a      	str	r2, [r3, #0]

		parser.byte[0] = buf_read[7];
 80063b2:	7ffb      	ldrb	r3, [r7, #31]
 80063b4:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[8];
 80063b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80063ba:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[9];
 80063bc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80063c0:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[10];
 80063c2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80063c6:	75fb      	strb	r3, [r7, #23]
		*IGain = parser.f;
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	601a      	str	r2, [r3, #0]

		parser.byte[0] = buf_read[11];
 80063ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80063d2:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[12];
 80063d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80063d8:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[13];
 80063da:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80063de:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[14];
 80063e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80063e4:	75fb      	strb	r3, [r7, #23]
		*DGain = parser.f;
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	601a      	str	r2, [r3, #0]

		return 0;
 80063ec:	2300      	movs	r3, #0
 80063ee:	e000      	b.n	80063f2 <EP_PIDGain_Read+0x12e>
	}

	return 1;
 80063f0:	2301      	movs	r3, #1
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3730      	adds	r7, #48	; 0x30
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop

080063fc <LL_SPI_Enable>:
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	601a      	str	r2, [r3, #0]
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <LL_SPI_SetStandard>:
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f023 0210 	bic.w	r2, r3, #16
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	431a      	orrs	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	605a      	str	r2, [r3, #4]
}
 8006436:	bf00      	nop
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8006442:	b480      	push	{r7}
 8006444:	b083      	sub	sp, #12
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	2b01      	cmp	r3, #1
 8006454:	d101      	bne.n	800645a <LL_SPI_IsActiveFlag_RXNE+0x18>
 8006456:	2301      	movs	r3, #1
 8006458:	e000      	b.n	800645c <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f003 0302 	and.w	r3, r3, #2
 8006478:	2b02      	cmp	r3, #2
 800647a:	d101      	bne.n	8006480 <LL_SPI_IsActiveFlag_TXE+0x18>
 800647c:	2301      	movs	r3, #1
 800647e:	e000      	b.n	8006482 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 800648e:	b480      	push	{r7}
 8006490:	b083      	sub	sp, #12
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	b2db      	uxtb	r3, r3
}
 800649c:	4618      	mov	r0, r3
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	460b      	mov	r3, r1
 80064b2:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	330c      	adds	r3, #12
 80064b8:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	78fa      	ldrb	r2, [r7, #3]
 80064be:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80064c0:	bf00      	nop
 80064c2:	3714      	adds	r7, #20
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <LL_GPIO_IsInputPinSet>:
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	691a      	ldr	r2, [r3, #16]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	4013      	ands	r3, r2
 80064de:	683a      	ldr	r2, [r7, #0]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	bf0c      	ite	eq
 80064e4:	2301      	moveq	r3, #1
 80064e6:	2300      	movne	r3, #0
 80064e8:	b2db      	uxtb	r3, r3
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr

080064f6 <LL_GPIO_SetOutputPin>:
{
 80064f6:	b480      	push	{r7}
 80064f8:	b083      	sub	sp, #12
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
 80064fe:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	683a      	ldr	r2, [r7, #0]
 8006504:	619a      	str	r2, [r3, #24]
}
 8006506:	bf00      	nop
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr

08006512 <LL_GPIO_ResetOutputPin>:
{
 8006512:	b480      	push	{r7}
 8006514:	b083      	sub	sp, #12
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
 800651a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	041a      	lsls	r2, r3, #16
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	619a      	str	r2, [r3, #24]
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8006538:	4b08      	ldr	r3, [pc, #32]	; (800655c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800653a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800653c:	4907      	ldr	r1, [pc, #28]	; (800655c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4313      	orrs	r3, r2
 8006542:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8006544:	4b05      	ldr	r3, [pc, #20]	; (800655c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006546:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4013      	ands	r3, r2
 800654c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800654e:	68fb      	ldr	r3, [r7, #12]
}
 8006550:	bf00      	nop
 8006552:	3714      	adds	r7, #20
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr
 800655c:	40023800 	.word	0x40023800

08006560 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8006568:	4b08      	ldr	r3, [pc, #32]	; (800658c <LL_APB1_GRP1_EnableClock+0x2c>)
 800656a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800656c:	4907      	ldr	r1, [pc, #28]	; (800658c <LL_APB1_GRP1_EnableClock+0x2c>)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4313      	orrs	r3, r2
 8006572:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8006574:	4b05      	ldr	r3, [pc, #20]	; (800658c <LL_APB1_GRP1_EnableClock+0x2c>)
 8006576:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4013      	ands	r3, r2
 800657c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800657e:	68fb      	ldr	r3, [r7, #12]
}
 8006580:	bf00      	nop
 8006582:	3714      	adds	r7, #20
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr
 800658c:	40023800 	.word	0x40023800

08006590 <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b090      	sub	sp, #64	; 0x40
 8006594:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8006596:	f107 0318 	add.w	r3, r7, #24
 800659a:	2228      	movs	r2, #40	; 0x28
 800659c:	2100      	movs	r1, #0
 800659e:	4618      	mov	r0, r3
 80065a0:	f006 f8b2 	bl	800c708 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065a4:	463b      	mov	r3, r7
 80065a6:	2200      	movs	r2, #0
 80065a8:	601a      	str	r2, [r3, #0]
 80065aa:	605a      	str	r2, [r3, #4]
 80065ac:	609a      	str	r2, [r3, #8]
 80065ae:	60da      	str	r2, [r3, #12]
 80065b0:	611a      	str	r2, [r3, #16]
 80065b2:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80065b4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80065b8:	f7ff ffd2 	bl	8006560 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80065bc:	2002      	movs	r0, #2
 80065be:	f7ff ffb7 	bl	8006530 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80065c2:	2004      	movs	r0, #4
 80065c4:	f7ff ffb4 	bl	8006530 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80065c8:	2001      	movs	r0, #1
 80065ca:	f7ff ffb1 	bl	8006530 <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 80065ce:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80065d2:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80065d4:	2302      	movs	r3, #2
 80065d6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80065d8:	2303      	movs	r3, #3
 80065da:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80065dc:	2300      	movs	r3, #0
 80065de:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80065e0:	2300      	movs	r3, #0
 80065e2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80065e4:	2305      	movs	r3, #5
 80065e6:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065e8:	463b      	mov	r3, r7
 80065ea:	4619      	mov	r1, r3
 80065ec:	4841      	ldr	r0, [pc, #260]	; (80066f4 <BNO080_GPIO_SPI_Initialization+0x164>)
 80065ee:	f7fe fd59 	bl	80050a4 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80065f2:	2300      	movs	r3, #0
 80065f4:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80065f6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80065fa:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80065fc:	2300      	movs	r3, #0
 80065fe:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8006600:	2302      	movs	r3, #2
 8006602:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8006604:	2301      	movs	r3, #1
 8006606:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8006608:	f44f 7300 	mov.w	r3, #512	; 0x200
 800660c:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 800660e:	2318      	movs	r3, #24
 8006610:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8006612:	2300      	movs	r3, #0
 8006614:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8006616:	2300      	movs	r3, #0
 8006618:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 800661a:	230a      	movs	r3, #10
 800661c:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 800661e:	f107 0318 	add.w	r3, r7, #24
 8006622:	4619      	mov	r1, r3
 8006624:	4834      	ldr	r0, [pc, #208]	; (80066f8 <BNO080_GPIO_SPI_Initialization+0x168>)
 8006626:	f7fe ff0e 	bl	8005446 <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 800662a:	2100      	movs	r1, #0
 800662c:	4832      	ldr	r0, [pc, #200]	; (80066f8 <BNO080_GPIO_SPI_Initialization+0x168>)
 800662e:	f7ff fef5 	bl	800641c <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 8006632:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006636:	4831      	ldr	r0, [pc, #196]	; (80066fc <BNO080_GPIO_SPI_Initialization+0x16c>)
 8006638:	f7ff ff6b 	bl	8006512 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 800663c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006640:	482c      	ldr	r0, [pc, #176]	; (80066f4 <BNO080_GPIO_SPI_Initialization+0x164>)
 8006642:	f7ff ff66 	bl	8006512 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 8006646:	f44f 7180 	mov.w	r1, #256	; 0x100
 800664a:	482d      	ldr	r0, [pc, #180]	; (8006700 <BNO080_GPIO_SPI_Initialization+0x170>)
 800664c:	f7ff ff61 	bl	8006512 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 8006650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006654:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006656:	2301      	movs	r3, #1
 8006658:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800665a:	2303      	movs	r3, #3
 800665c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800665e:	2300      	movs	r3, #0
 8006660:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006662:	2300      	movs	r3, #0
 8006664:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 8006666:	463b      	mov	r3, r7
 8006668:	4619      	mov	r1, r3
 800666a:	4822      	ldr	r0, [pc, #136]	; (80066f4 <BNO080_GPIO_SPI_Initialization+0x164>)
 800666c:	f7fe fd1a 	bl	80050a4 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 8006670:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006674:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006676:	2301      	movs	r3, #1
 8006678:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800667a:	2303      	movs	r3, #3
 800667c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800667e:	2300      	movs	r3, #0
 8006680:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006682:	2300      	movs	r3, #0
 8006684:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 8006686:	463b      	mov	r3, r7
 8006688:	4619      	mov	r1, r3
 800668a:	481c      	ldr	r0, [pc, #112]	; (80066fc <BNO080_GPIO_SPI_Initialization+0x16c>)
 800668c:	f7fe fd0a 	bl	80050a4 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 8006690:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006694:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006696:	2301      	movs	r3, #1
 8006698:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800669a:	2303      	movs	r3, #3
 800669c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800669e:	2300      	movs	r3, #0
 80066a0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80066a2:	2300      	movs	r3, #0
 80066a4:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 80066a6:	463b      	mov	r3, r7
 80066a8:	4619      	mov	r1, r3
 80066aa:	4815      	ldr	r0, [pc, #84]	; (8006700 <BNO080_GPIO_SPI_Initialization+0x170>)
 80066ac:	f7fe fcfa 	bl	80050a4 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 80066b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066b4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80066b6:	2300      	movs	r3, #0
 80066b8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80066ba:	2301      	movs	r3, #1
 80066bc:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 80066be:	463b      	mov	r3, r7
 80066c0:	4619      	mov	r1, r3
 80066c2:	480e      	ldr	r0, [pc, #56]	; (80066fc <BNO080_GPIO_SPI_Initialization+0x16c>)
 80066c4:	f7fe fcee 	bl	80050a4 <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 80066c8:	480b      	ldr	r0, [pc, #44]	; (80066f8 <BNO080_GPIO_SPI_Initialization+0x168>)
 80066ca:	f7ff fe97 	bl	80063fc <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 80066ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80066d2:	4808      	ldr	r0, [pc, #32]	; (80066f4 <BNO080_GPIO_SPI_Initialization+0x164>)
 80066d4:	f7ff ff0f 	bl	80064f6 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 80066d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80066dc:	4808      	ldr	r0, [pc, #32]	; (8006700 <BNO080_GPIO_SPI_Initialization+0x170>)
 80066de:	f7ff ff0a 	bl	80064f6 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 80066e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066e6:	4805      	ldr	r0, [pc, #20]	; (80066fc <BNO080_GPIO_SPI_Initialization+0x16c>)
 80066e8:	f7ff ff05 	bl	80064f6 <LL_GPIO_SetOutputPin>
}
 80066ec:	bf00      	nop
 80066ee:	3740      	adds	r7, #64	; 0x40
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	40020400 	.word	0x40020400
 80066f8:	40003800 	.word	0x40003800
 80066fc:	40020800 	.word	0x40020800
 8006700:	40020000 	.word	0x40020000

08006704 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 800670a:	f7ff ff41 	bl	8006590 <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 800670e:	482e      	ldr	r0, [pc, #184]	; (80067c8 <BNO080_Initialization+0xc4>)
 8006710:	f006 fc6c 	bl	800cfec <iprintf>
	
	CHIP_DESELECT(BNO080);
 8006714:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006718:	482c      	ldr	r0, [pc, #176]	; (80067cc <BNO080_Initialization+0xc8>)
 800671a:	f7ff feec 	bl	80064f6 <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 800671e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006722:	482b      	ldr	r0, [pc, #172]	; (80067d0 <BNO080_Initialization+0xcc>)
 8006724:	f7ff fee7 	bl	80064f6 <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 8006728:	f44f 7100 	mov.w	r1, #512	; 0x200
 800672c:	4829      	ldr	r0, [pc, #164]	; (80067d4 <BNO080_Initialization+0xd0>)
 800672e:	f7ff fef0 	bl	8006512 <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 8006732:	20c8      	movs	r0, #200	; 0xc8
 8006734:	f7fa fc2c 	bl	8000f90 <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 8006738:	f44f 7100 	mov.w	r1, #512	; 0x200
 800673c:	4825      	ldr	r0, [pc, #148]	; (80067d4 <BNO080_Initialization+0xd0>)
 800673e:	f7ff feda 	bl	80064f6 <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 8006742:	f000 fc43 	bl	8006fcc <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 8006746:	f000 fc41 	bl	8006fcc <BNO080_waitForSPI>
	BNO080_receivePacket();
 800674a:	f000 fc63 	bl	8007014 <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 800674e:	f000 fc3d 	bl	8006fcc <BNO080_waitForSPI>
	BNO080_receivePacket();
 8006752:	f000 fc5f 	bl	8007014 <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8006756:	4b20      	ldr	r3, [pc, #128]	; (80067d8 <BNO080_Initialization+0xd4>)
 8006758:	22f9      	movs	r2, #249	; 0xf9
 800675a:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 800675c:	4b1e      	ldr	r3, [pc, #120]	; (80067d8 <BNO080_Initialization+0xd4>)
 800675e:	2200      	movs	r2, #0
 8006760:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 8006762:	2102      	movs	r1, #2
 8006764:	2002      	movs	r0, #2
 8006766:	f000 fcc5 	bl	80070f4 <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 800676a:	f000 fc2f 	bl	8006fcc <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 800676e:	f000 fc51 	bl	8007014 <BNO080_receivePacket>
 8006772:	4603      	mov	r3, r0
 8006774:	2b01      	cmp	r3, #1
 8006776:	d11b      	bne.n	80067b0 <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 8006778:	4b18      	ldr	r3, [pc, #96]	; (80067dc <BNO080_Initialization+0xd8>)
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	4619      	mov	r1, r3
 800677e:	4b17      	ldr	r3, [pc, #92]	; (80067dc <BNO080_Initialization+0xd8>)
 8006780:	785b      	ldrb	r3, [r3, #1]
 8006782:	461a      	mov	r2, r3
 8006784:	4b15      	ldr	r3, [pc, #84]	; (80067dc <BNO080_Initialization+0xd8>)
 8006786:	789b      	ldrb	r3, [r3, #2]
 8006788:	4618      	mov	r0, r3
 800678a:	4b14      	ldr	r3, [pc, #80]	; (80067dc <BNO080_Initialization+0xd8>)
 800678c:	78db      	ldrb	r3, [r3, #3]
 800678e:	9300      	str	r3, [sp, #0]
 8006790:	4603      	mov	r3, r0
 8006792:	4813      	ldr	r0, [pc, #76]	; (80067e0 <BNO080_Initialization+0xdc>)
 8006794:	f006 fc2a 	bl	800cfec <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8006798:	4b0f      	ldr	r3, [pc, #60]	; (80067d8 <BNO080_Initialization+0xd4>)
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	2bf8      	cmp	r3, #248	; 0xf8
 800679e:	d107      	bne.n	80067b0 <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 80067a0:	4b0d      	ldr	r3, [pc, #52]	; (80067d8 <BNO080_Initialization+0xd4>)
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	4619      	mov	r1, r3
 80067a6:	480f      	ldr	r0, [pc, #60]	; (80067e4 <BNO080_Initialization+0xe0>)
 80067a8:	f006 fc20 	bl	800cfec <iprintf>
			return (0);
 80067ac:	2300      	movs	r3, #0
 80067ae:	e007      	b.n	80067c0 <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 80067b0:	4b09      	ldr	r3, [pc, #36]	; (80067d8 <BNO080_Initialization+0xd4>)
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	22f8      	movs	r2, #248	; 0xf8
 80067b6:	4619      	mov	r1, r3
 80067b8:	480b      	ldr	r0, [pc, #44]	; (80067e8 <BNO080_Initialization+0xe4>)
 80067ba:	f006 fc17 	bl	800cfec <iprintf>
	return (1); //Something went wrong
 80067be:	2301      	movs	r3, #1
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	0800ff38 	.word	0x0800ff38
 80067cc:	40020400 	.word	0x40020400
 80067d0:	40020000 	.word	0x40020000
 80067d4:	40020800 	.word	0x40020800
 80067d8:	20000204 	.word	0x20000204
 80067dc:	20000200 	.word	0x20000200
 80067e0:	0800ff4c 	.word	0x0800ff4c
 80067e4:	0800ff64 	.word	0x0800ff64
 80067e8:	0800ff84 	.word	0x0800ff84

080067ec <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	4603      	mov	r3, r0
 80067f4:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 80067f6:	bf00      	nop
 80067f8:	480c      	ldr	r0, [pc, #48]	; (800682c <SPI2_SendByte+0x40>)
 80067fa:	f7ff fe35 	bl	8006468 <LL_SPI_IsActiveFlag_TXE>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d0f9      	beq.n	80067f8 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 8006804:	79fb      	ldrb	r3, [r7, #7]
 8006806:	4619      	mov	r1, r3
 8006808:	4808      	ldr	r0, [pc, #32]	; (800682c <SPI2_SendByte+0x40>)
 800680a:	f7ff fe4d 	bl	80064a8 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 800680e:	bf00      	nop
 8006810:	4806      	ldr	r0, [pc, #24]	; (800682c <SPI2_SendByte+0x40>)
 8006812:	f7ff fe16 	bl	8006442 <LL_SPI_IsActiveFlag_RXNE>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d0f9      	beq.n	8006810 <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 800681c:	4803      	ldr	r0, [pc, #12]	; (800682c <SPI2_SendByte+0x40>)
 800681e:	f7ff fe36 	bl	800648e <LL_SPI_ReceiveData8>
 8006822:	4603      	mov	r3, r0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	40003800 	.word	0x40003800

08006830 <BNO080_dataAvailable>:
//////////////////////////////////////////////////////////////////////////

//Updates the latest variables if possible
//Returns false if new readings are not available
int BNO080_dataAvailable(void)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is NULL, then we'll rely on BNO080_receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8006834:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006838:	4811      	ldr	r0, [pc, #68]	; (8006880 <BNO080_dataAvailable+0x50>)
 800683a:	f7ff fe47 	bl	80064cc <LL_GPIO_IsInputPinSet>
 800683e:	4603      	mov	r3, r0
 8006840:	2b01      	cmp	r3, #1
 8006842:	d101      	bne.n	8006848 <BNO080_dataAvailable+0x18>
		return (0);
 8006844:	2300      	movs	r3, #0
 8006846:	e019      	b.n	800687c <BNO080_dataAvailable+0x4c>

	if (BNO080_receivePacket() == 1)
 8006848:	f000 fbe4 	bl	8007014 <BNO080_receivePacket>
 800684c:	4603      	mov	r3, r0
 800684e:	2b01      	cmp	r3, #1
 8006850:	d113      	bne.n	800687a <BNO080_dataAvailable+0x4a>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 8006852:	4b0c      	ldr	r3, [pc, #48]	; (8006884 <BNO080_dataAvailable+0x54>)
 8006854:	789b      	ldrb	r3, [r3, #2]
 8006856:	2b03      	cmp	r3, #3
 8006858:	d107      	bne.n	800686a <BNO080_dataAvailable+0x3a>
 800685a:	4b0b      	ldr	r3, [pc, #44]	; (8006888 <BNO080_dataAvailable+0x58>)
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	2bfb      	cmp	r3, #251	; 0xfb
 8006860:	d103      	bne.n	800686a <BNO080_dataAvailable+0x3a>
		{
			BNO080_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 8006862:	f000 f82f 	bl	80068c4 <BNO080_parseInputReport>
			return (1);
 8006866:	2301      	movs	r3, #1
 8006868:	e008      	b.n	800687c <BNO080_dataAvailable+0x4c>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 800686a:	4b06      	ldr	r3, [pc, #24]	; (8006884 <BNO080_dataAvailable+0x54>)
 800686c:	789b      	ldrb	r3, [r3, #2]
 800686e:	2b02      	cmp	r3, #2
 8006870:	d103      	bne.n	800687a <BNO080_dataAvailable+0x4a>
		{
			BNO080_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 8006872:	f000 f80b 	bl	800688c <BNO080_parseCommandReport>
			return (1);
 8006876:	2301      	movs	r3, #1
 8006878:	e000      	b.n	800687c <BNO080_dataAvailable+0x4c>
		}
	}
	return (0);
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	bd80      	pop	{r7, pc}
 8006880:	40020800 	.word	0x40020800
 8006884:	20000200 	.word	0x20000200
 8006888:	20000204 	.word	0x20000204

0800688c <BNO080_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void BNO080_parseCommandReport(void)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 8006892:	4b0a      	ldr	r3, [pc, #40]	; (80068bc <BNO080_parseCommandReport+0x30>)
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	2bf1      	cmp	r3, #241	; 0xf1
 8006898:	d109      	bne.n	80068ae <BNO080_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 800689a:	4b08      	ldr	r3, [pc, #32]	; (80068bc <BNO080_parseCommandReport+0x30>)
 800689c:	789b      	ldrb	r3, [r3, #2]
 800689e:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 80068a0:	79fb      	ldrb	r3, [r7, #7]
 80068a2:	2b07      	cmp	r3, #7
 80068a4:	d103      	bne.n	80068ae <BNO080_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5]; //R0 - Status (0 = success, non-zero = fail)
 80068a6:	4b05      	ldr	r3, [pc, #20]	; (80068bc <BNO080_parseCommandReport+0x30>)
 80068a8:	795a      	ldrb	r2, [r3, #5]
 80068aa:	4b05      	ldr	r3, [pc, #20]	; (80068c0 <BNO080_parseCommandReport+0x34>)
 80068ac:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 80068ae:	bf00      	nop
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	20000204 	.word	0x20000204
 80068c0:	200002c8 	.word	0x200002c8

080068c4 <BNO080_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void BNO080_parseInputReport(void)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b087      	sub	sp, #28
 80068c8:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 80068ca:	4b98      	ldr	r3, [pc, #608]	; (8006b2c <BNO080_parseInputReport+0x268>)
 80068cc:	785b      	ldrb	r3, [r3, #1]
 80068ce:	021b      	lsls	r3, r3, #8
 80068d0:	b21a      	sxth	r2, r3
 80068d2:	4b96      	ldr	r3, [pc, #600]	; (8006b2c <BNO080_parseInputReport+0x268>)
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	b21b      	sxth	r3, r3
 80068d8:	4313      	orrs	r3, r2
 80068da:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 80068dc:	8a3b      	ldrh	r3, [r7, #16]
 80068de:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80068e2:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 80068e4:	8a3b      	ldrh	r3, [r7, #16]
 80068e6:	3b04      	subs	r3, #4
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | (shtpData[3] << (8 * 2)) | (shtpData[2] << (8 * 1)) | (shtpData[1] << (8 * 0));
 80068ec:	4b90      	ldr	r3, [pc, #576]	; (8006b30 <BNO080_parseInputReport+0x26c>)
 80068ee:	791b      	ldrb	r3, [r3, #4]
 80068f0:	061b      	lsls	r3, r3, #24
 80068f2:	4a8f      	ldr	r2, [pc, #572]	; (8006b30 <BNO080_parseInputReport+0x26c>)
 80068f4:	78d2      	ldrb	r2, [r2, #3]
 80068f6:	0412      	lsls	r2, r2, #16
 80068f8:	4313      	orrs	r3, r2
 80068fa:	4a8d      	ldr	r2, [pc, #564]	; (8006b30 <BNO080_parseInputReport+0x26c>)
 80068fc:	7892      	ldrb	r2, [r2, #2]
 80068fe:	0212      	lsls	r2, r2, #8
 8006900:	4313      	orrs	r3, r2
 8006902:	4a8b      	ldr	r2, [pc, #556]	; (8006b30 <BNO080_parseInputReport+0x26c>)
 8006904:	7852      	ldrb	r2, [r2, #1]
 8006906:	4313      	orrs	r3, r2
 8006908:	4a8a      	ldr	r2, [pc, #552]	; (8006b34 <BNO080_parseInputReport+0x270>)
 800690a:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[7] & 0x03; //Get status bits
 800690c:	4b88      	ldr	r3, [pc, #544]	; (8006b30 <BNO080_parseInputReport+0x26c>)
 800690e:	79db      	ldrb	r3, [r3, #7]
 8006910:	f003 0303 	and.w	r3, r3, #3
 8006914:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[10] << 8 | shtpData[9];
 8006916:	4b86      	ldr	r3, [pc, #536]	; (8006b30 <BNO080_parseInputReport+0x26c>)
 8006918:	7a9b      	ldrb	r3, [r3, #10]
 800691a:	021b      	lsls	r3, r3, #8
 800691c:	b21a      	sxth	r2, r3
 800691e:	4b84      	ldr	r3, [pc, #528]	; (8006b30 <BNO080_parseInputReport+0x26c>)
 8006920:	7a5b      	ldrb	r3, [r3, #9]
 8006922:	b21b      	sxth	r3, r3
 8006924:	4313      	orrs	r3, r2
 8006926:	b21b      	sxth	r3, r3
 8006928:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[12] << 8 | shtpData[11];
 800692a:	4b81      	ldr	r3, [pc, #516]	; (8006b30 <BNO080_parseInputReport+0x26c>)
 800692c:	7b1b      	ldrb	r3, [r3, #12]
 800692e:	021b      	lsls	r3, r3, #8
 8006930:	b21a      	sxth	r2, r3
 8006932:	4b7f      	ldr	r3, [pc, #508]	; (8006b30 <BNO080_parseInputReport+0x26c>)
 8006934:	7adb      	ldrb	r3, [r3, #11]
 8006936:	b21b      	sxth	r3, r3
 8006938:	4313      	orrs	r3, r2
 800693a:	b21b      	sxth	r3, r3
 800693c:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[14] << 8 | shtpData[13];
 800693e:	4b7c      	ldr	r3, [pc, #496]	; (8006b30 <BNO080_parseInputReport+0x26c>)
 8006940:	7b9b      	ldrb	r3, [r3, #14]
 8006942:	021b      	lsls	r3, r3, #8
 8006944:	b21a      	sxth	r2, r3
 8006946:	4b7a      	ldr	r3, [pc, #488]	; (8006b30 <BNO080_parseInputReport+0x26c>)
 8006948:	7b5b      	ldrb	r3, [r3, #13]
 800694a:	b21b      	sxth	r3, r3
 800694c:	4313      	orrs	r3, r2
 800694e:	b21b      	sxth	r3, r3
 8006950:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 8006952:	2300      	movs	r3, #0
 8006954:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0;
 8006956:	2300      	movs	r3, #0
 8006958:	82bb      	strh	r3, [r7, #20]

	if (dataLength > 14)
 800695a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800695e:	2b0e      	cmp	r3, #14
 8006960:	dd09      	ble.n	8006976 <BNO080_parseInputReport+0xb2>
	{
		data4 = (uint16_t)shtpData[16] << 8 | shtpData[15];
 8006962:	4b73      	ldr	r3, [pc, #460]	; (8006b30 <BNO080_parseInputReport+0x26c>)
 8006964:	7c1b      	ldrb	r3, [r3, #16]
 8006966:	021b      	lsls	r3, r3, #8
 8006968:	b21a      	sxth	r2, r3
 800696a:	4b71      	ldr	r3, [pc, #452]	; (8006b30 <BNO080_parseInputReport+0x26c>)
 800696c:	7bdb      	ldrb	r3, [r3, #15]
 800696e:	b21b      	sxth	r3, r3
 8006970:	4313      	orrs	r3, r2
 8006972:	b21b      	sxth	r3, r3
 8006974:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength > 16)
 8006976:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800697a:	2b10      	cmp	r3, #16
 800697c:	dd09      	ble.n	8006992 <BNO080_parseInputReport+0xce>
	{
		data5 = (uint16_t)shtpData[18] << 8 | shtpData[17];
 800697e:	4b6c      	ldr	r3, [pc, #432]	; (8006b30 <BNO080_parseInputReport+0x26c>)
 8006980:	7c9b      	ldrb	r3, [r3, #18]
 8006982:	021b      	lsls	r3, r3, #8
 8006984:	b21a      	sxth	r2, r3
 8006986:	4b6a      	ldr	r3, [pc, #424]	; (8006b30 <BNO080_parseInputReport+0x26c>)
 8006988:	7c5b      	ldrb	r3, [r3, #17]
 800698a:	b21b      	sxth	r3, r3
 800698c:	4313      	orrs	r3, r2
 800698e:	b21b      	sxth	r3, r3
 8006990:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	switch(shtpData[5])
 8006992:	4b67      	ldr	r3, [pc, #412]	; (8006b30 <BNO080_parseInputReport+0x26c>)
 8006994:	795b      	ldrb	r3, [r3, #5]
 8006996:	2b1e      	cmp	r3, #30
 8006998:	dc46      	bgt.n	8006a28 <BNO080_parseInputReport+0x164>
 800699a:	2b00      	cmp	r3, #0
 800699c:	f340 80bf 	ble.w	8006b1e <BNO080_parseInputReport+0x25a>
 80069a0:	3b01      	subs	r3, #1
 80069a2:	2b1d      	cmp	r3, #29
 80069a4:	f200 80bb 	bhi.w	8006b1e <BNO080_parseInputReport+0x25a>
 80069a8:	a201      	add	r2, pc, #4	; (adr r2, 80069b0 <BNO080_parseInputReport+0xec>)
 80069aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ae:	bf00      	nop
 80069b0:	08006a2f 	.word	0x08006a2f
 80069b4:	08006a67 	.word	0x08006a67
 80069b8:	08006a83 	.word	0x08006a83
 80069bc:	08006a4b 	.word	0x08006a4b
 80069c0:	08006a9f 	.word	0x08006a9f
 80069c4:	08006b1f 	.word	0x08006b1f
 80069c8:	08006b1f 	.word	0x08006b1f
 80069cc:	08006a9f 	.word	0x08006a9f
 80069d0:	08006b1f 	.word	0x08006b1f
 80069d4:	08006b1f 	.word	0x08006b1f
 80069d8:	08006b1f 	.word	0x08006b1f
 80069dc:	08006b1f 	.word	0x08006b1f
 80069e0:	08006b1f 	.word	0x08006b1f
 80069e4:	08006b1f 	.word	0x08006b1f
 80069e8:	08006b1f 	.word	0x08006b1f
 80069ec:	08006b1f 	.word	0x08006b1f
 80069f0:	08006ac7 	.word	0x08006ac7
 80069f4:	08006b1f 	.word	0x08006b1f
 80069f8:	08006acf 	.word	0x08006acf
 80069fc:	08006b1f 	.word	0x08006b1f
 8006a00:	08006b1f 	.word	0x08006b1f
 8006a04:	08006b1f 	.word	0x08006b1f
 8006a08:	08006b1f 	.word	0x08006b1f
 8006a0c:	08006b1f 	.word	0x08006b1f
 8006a10:	08006b1f 	.word	0x08006b1f
 8006a14:	08006b1f 	.word	0x08006b1f
 8006a18:	08006b1f 	.word	0x08006b1f
 8006a1c:	08006b1f 	.word	0x08006b1f
 8006a20:	08006b1f 	.word	0x08006b1f
 8006a24:	08006ad9 	.word	0x08006ad9
 8006a28:	2bf1      	cmp	r3, #241	; 0xf1
 8006a2a:	d06d      	beq.n	8006b08 <BNO080_parseInputReport+0x244>
			//See reference manual to add additional feature reports as needed
		}
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8006a2c:	e077      	b.n	8006b1e <BNO080_parseInputReport+0x25a>
			accelAccuracy = status;
 8006a2e:	7bfb      	ldrb	r3, [r7, #15]
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	4b41      	ldr	r3, [pc, #260]	; (8006b38 <BNO080_parseInputReport+0x274>)
 8006a34:	801a      	strh	r2, [r3, #0]
			rawAccelX = data1;
 8006a36:	4a41      	ldr	r2, [pc, #260]	; (8006b3c <BNO080_parseInputReport+0x278>)
 8006a38:	89bb      	ldrh	r3, [r7, #12]
 8006a3a:	8013      	strh	r3, [r2, #0]
			rawAccelY = data2;
 8006a3c:	4a40      	ldr	r2, [pc, #256]	; (8006b40 <BNO080_parseInputReport+0x27c>)
 8006a3e:	897b      	ldrh	r3, [r7, #10]
 8006a40:	8013      	strh	r3, [r2, #0]
			rawAccelZ = data3;
 8006a42:	4a40      	ldr	r2, [pc, #256]	; (8006b44 <BNO080_parseInputReport+0x280>)
 8006a44:	893b      	ldrh	r3, [r7, #8]
 8006a46:	8013      	strh	r3, [r2, #0]
			break;
 8006a48:	e069      	b.n	8006b1e <BNO080_parseInputReport+0x25a>
			accelLinAccuracy = status;
 8006a4a:	7bfb      	ldrb	r3, [r7, #15]
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	4b3e      	ldr	r3, [pc, #248]	; (8006b48 <BNO080_parseInputReport+0x284>)
 8006a50:	801a      	strh	r2, [r3, #0]
			rawLinAccelX = data1;
 8006a52:	4a3e      	ldr	r2, [pc, #248]	; (8006b4c <BNO080_parseInputReport+0x288>)
 8006a54:	89bb      	ldrh	r3, [r7, #12]
 8006a56:	8013      	strh	r3, [r2, #0]
			rawLinAccelY = data2;
 8006a58:	4a3d      	ldr	r2, [pc, #244]	; (8006b50 <BNO080_parseInputReport+0x28c>)
 8006a5a:	897b      	ldrh	r3, [r7, #10]
 8006a5c:	8013      	strh	r3, [r2, #0]
			rawLinAccelZ = data3;
 8006a5e:	4a3d      	ldr	r2, [pc, #244]	; (8006b54 <BNO080_parseInputReport+0x290>)
 8006a60:	893b      	ldrh	r3, [r7, #8]
 8006a62:	8013      	strh	r3, [r2, #0]
			break;
 8006a64:	e05b      	b.n	8006b1e <BNO080_parseInputReport+0x25a>
			gyroAccuracy = status;
 8006a66:	7bfb      	ldrb	r3, [r7, #15]
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	4b3b      	ldr	r3, [pc, #236]	; (8006b58 <BNO080_parseInputReport+0x294>)
 8006a6c:	801a      	strh	r2, [r3, #0]
			rawGyroX = data1;
 8006a6e:	4a3b      	ldr	r2, [pc, #236]	; (8006b5c <BNO080_parseInputReport+0x298>)
 8006a70:	89bb      	ldrh	r3, [r7, #12]
 8006a72:	8013      	strh	r3, [r2, #0]
			rawGyroY = data2;
 8006a74:	4a3a      	ldr	r2, [pc, #232]	; (8006b60 <BNO080_parseInputReport+0x29c>)
 8006a76:	897b      	ldrh	r3, [r7, #10]
 8006a78:	8013      	strh	r3, [r2, #0]
			rawGyroZ = data3;
 8006a7a:	4a3a      	ldr	r2, [pc, #232]	; (8006b64 <BNO080_parseInputReport+0x2a0>)
 8006a7c:	893b      	ldrh	r3, [r7, #8]
 8006a7e:	8013      	strh	r3, [r2, #0]
			break;
 8006a80:	e04d      	b.n	8006b1e <BNO080_parseInputReport+0x25a>
			magAccuracy = status;
 8006a82:	7bfb      	ldrb	r3, [r7, #15]
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	4b38      	ldr	r3, [pc, #224]	; (8006b68 <BNO080_parseInputReport+0x2a4>)
 8006a88:	801a      	strh	r2, [r3, #0]
			rawMagX = data1;
 8006a8a:	4a38      	ldr	r2, [pc, #224]	; (8006b6c <BNO080_parseInputReport+0x2a8>)
 8006a8c:	89bb      	ldrh	r3, [r7, #12]
 8006a8e:	8013      	strh	r3, [r2, #0]
			rawMagY = data2;
 8006a90:	4a37      	ldr	r2, [pc, #220]	; (8006b70 <BNO080_parseInputReport+0x2ac>)
 8006a92:	897b      	ldrh	r3, [r7, #10]
 8006a94:	8013      	strh	r3, [r2, #0]
			rawMagZ = data3;
 8006a96:	4a37      	ldr	r2, [pc, #220]	; (8006b74 <BNO080_parseInputReport+0x2b0>)
 8006a98:	893b      	ldrh	r3, [r7, #8]
 8006a9a:	8013      	strh	r3, [r2, #0]
			break;
 8006a9c:	e03f      	b.n	8006b1e <BNO080_parseInputReport+0x25a>
			quatAccuracy = status;
 8006a9e:	7bfb      	ldrb	r3, [r7, #15]
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	4b35      	ldr	r3, [pc, #212]	; (8006b78 <BNO080_parseInputReport+0x2b4>)
 8006aa4:	801a      	strh	r2, [r3, #0]
			rawQuatI = data1;
 8006aa6:	4a35      	ldr	r2, [pc, #212]	; (8006b7c <BNO080_parseInputReport+0x2b8>)
 8006aa8:	89bb      	ldrh	r3, [r7, #12]
 8006aaa:	8013      	strh	r3, [r2, #0]
			rawQuatJ = data2;
 8006aac:	4a34      	ldr	r2, [pc, #208]	; (8006b80 <BNO080_parseInputReport+0x2bc>)
 8006aae:	897b      	ldrh	r3, [r7, #10]
 8006ab0:	8013      	strh	r3, [r2, #0]
			rawQuatK = data3;
 8006ab2:	4a34      	ldr	r2, [pc, #208]	; (8006b84 <BNO080_parseInputReport+0x2c0>)
 8006ab4:	893b      	ldrh	r3, [r7, #8]
 8006ab6:	8013      	strh	r3, [r2, #0]
			rawQuatReal = data4;
 8006ab8:	4a33      	ldr	r2, [pc, #204]	; (8006b88 <BNO080_parseInputReport+0x2c4>)
 8006aba:	8afb      	ldrh	r3, [r7, #22]
 8006abc:	8013      	strh	r3, [r2, #0]
			rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 8006abe:	4a33      	ldr	r2, [pc, #204]	; (8006b8c <BNO080_parseInputReport+0x2c8>)
 8006ac0:	8abb      	ldrh	r3, [r7, #20]
 8006ac2:	8013      	strh	r3, [r2, #0]
			break;
 8006ac4:	e02b      	b.n	8006b1e <BNO080_parseInputReport+0x25a>
			stepCount = data3; //Bytes 8/9
 8006ac6:	4a32      	ldr	r2, [pc, #200]	; (8006b90 <BNO080_parseInputReport+0x2cc>)
 8006ac8:	893b      	ldrh	r3, [r7, #8]
 8006aca:	8013      	strh	r3, [r2, #0]
			break;
 8006acc:	e027      	b.n	8006b1e <BNO080_parseInputReport+0x25a>
			stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 8006ace:	4b18      	ldr	r3, [pc, #96]	; (8006b30 <BNO080_parseInputReport+0x26c>)
 8006ad0:	7a5a      	ldrb	r2, [r3, #9]
 8006ad2:	4b30      	ldr	r3, [pc, #192]	; (8006b94 <BNO080_parseInputReport+0x2d0>)
 8006ad4:	701a      	strb	r2, [r3, #0]
			break;
 8006ad6:	e022      	b.n	8006b1e <BNO080_parseInputReport+0x25a>
			activityClassifier = shtpData[5 + 5]; //Most likely state
 8006ad8:	4b15      	ldr	r3, [pc, #84]	; (8006b30 <BNO080_parseInputReport+0x26c>)
 8006ada:	7a9a      	ldrb	r2, [r3, #10]
 8006adc:	4b2e      	ldr	r3, [pc, #184]	; (8006b98 <BNO080_parseInputReport+0x2d4>)
 8006ade:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	74fb      	strb	r3, [r7, #19]
 8006ae4:	e00c      	b.n	8006b00 <BNO080_parseInputReport+0x23c>
				_activityConfidences[x] = shtpData[11 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 8006ae6:	7cfb      	ldrb	r3, [r7, #19]
 8006ae8:	f103 020b 	add.w	r2, r3, #11
 8006aec:	4b2b      	ldr	r3, [pc, #172]	; (8006b9c <BNO080_parseInputReport+0x2d8>)
 8006aee:	6819      	ldr	r1, [r3, #0]
 8006af0:	7cfb      	ldrb	r3, [r7, #19]
 8006af2:	440b      	add	r3, r1
 8006af4:	490e      	ldr	r1, [pc, #56]	; (8006b30 <BNO080_parseInputReport+0x26c>)
 8006af6:	5c8a      	ldrb	r2, [r1, r2]
 8006af8:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8006afa:	7cfb      	ldrb	r3, [r7, #19]
 8006afc:	3301      	adds	r3, #1
 8006afe:	74fb      	strb	r3, [r7, #19]
 8006b00:	7cfb      	ldrb	r3, [r7, #19]
 8006b02:	2b08      	cmp	r3, #8
 8006b04:	d9ef      	bls.n	8006ae6 <BNO080_parseInputReport+0x222>
			break;
 8006b06:	e00a      	b.n	8006b1e <BNO080_parseInputReport+0x25a>
			uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 8006b08:	4b09      	ldr	r3, [pc, #36]	; (8006b30 <BNO080_parseInputReport+0x26c>)
 8006b0a:	79db      	ldrb	r3, [r3, #7]
 8006b0c:	71fb      	strb	r3, [r7, #7]
			if (command == COMMAND_ME_CALIBRATE)
 8006b0e:	79fb      	ldrb	r3, [r7, #7]
 8006b10:	2b07      	cmp	r3, #7
 8006b12:	d103      	bne.n	8006b1c <BNO080_parseInputReport+0x258>
				calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 8006b14:	4b06      	ldr	r3, [pc, #24]	; (8006b30 <BNO080_parseInputReport+0x26c>)
 8006b16:	7a9a      	ldrb	r2, [r3, #10]
 8006b18:	4b21      	ldr	r3, [pc, #132]	; (8006ba0 <BNO080_parseInputReport+0x2dc>)
 8006b1a:	701a      	strb	r2, [r3, #0]
			break;
 8006b1c:	bf00      	nop
}
 8006b1e:	bf00      	nop
 8006b20:	371c      	adds	r7, #28
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	20000200 	.word	0x20000200
 8006b30:	20000204 	.word	0x20000204
 8006b34:	200002bc 	.word	0x200002bc
 8006b38:	20000292 	.word	0x20000292
 8006b3c:	2000028c 	.word	0x2000028c
 8006b40:	2000028e 	.word	0x2000028e
 8006b44:	20000290 	.word	0x20000290
 8006b48:	2000029a 	.word	0x2000029a
 8006b4c:	20000294 	.word	0x20000294
 8006b50:	20000296 	.word	0x20000296
 8006b54:	20000298 	.word	0x20000298
 8006b58:	200002a2 	.word	0x200002a2
 8006b5c:	2000029c 	.word	0x2000029c
 8006b60:	2000029e 	.word	0x2000029e
 8006b64:	200002a0 	.word	0x200002a0
 8006b68:	200002aa 	.word	0x200002aa
 8006b6c:	200002a4 	.word	0x200002a4
 8006b70:	200002a6 	.word	0x200002a6
 8006b74:	200002a8 	.word	0x200002a8
 8006b78:	200002b6 	.word	0x200002b6
 8006b7c:	200002ac 	.word	0x200002ac
 8006b80:	200002ae 	.word	0x200002ae
 8006b84:	200002b0 	.word	0x200002b0
 8006b88:	200002b2 	.word	0x200002b2
 8006b8c:	200002b4 	.word	0x200002b4
 8006b90:	200002b8 	.word	0x200002b8
 8006b94:	200002c0 	.word	0x200002c0
 8006b98:	200002c1 	.word	0x200002c1
 8006b9c:	200002c4 	.word	0x200002c4
 8006ba0:	200002c8 	.word	0x200002c8

08006ba4 <BNO080_getQuatI>:

//Return the rotation vector quaternion I
float BNO080_getQuatI()
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatI, rotationVector_Q1);
 8006ba8:	4b07      	ldr	r3, [pc, #28]	; (8006bc8 <BNO080_getQuatI+0x24>)
 8006baa:	881b      	ldrh	r3, [r3, #0]
 8006bac:	b21b      	sxth	r3, r3
 8006bae:	4a07      	ldr	r2, [pc, #28]	; (8006bcc <BNO080_getQuatI+0x28>)
 8006bb0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006bb4:	b2d2      	uxtb	r2, r2
 8006bb6:	4611      	mov	r1, r2
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f000 f8bb 	bl	8006d34 <BNO080_qToFloat>
 8006bbe:	eef0 7a40 	vmov.f32	s15, s0
}
 8006bc2:	eeb0 0a67 	vmov.f32	s0, s15
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	200002ac 	.word	0x200002ac
 8006bcc:	20000006 	.word	0x20000006

08006bd0 <BNO080_getQuatJ>:

//Return the rotation vector quaternion J
float BNO080_getQuatJ()
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatJ, rotationVector_Q1);
 8006bd4:	4b07      	ldr	r3, [pc, #28]	; (8006bf4 <BNO080_getQuatJ+0x24>)
 8006bd6:	881b      	ldrh	r3, [r3, #0]
 8006bd8:	b21b      	sxth	r3, r3
 8006bda:	4a07      	ldr	r2, [pc, #28]	; (8006bf8 <BNO080_getQuatJ+0x28>)
 8006bdc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006be0:	b2d2      	uxtb	r2, r2
 8006be2:	4611      	mov	r1, r2
 8006be4:	4618      	mov	r0, r3
 8006be6:	f000 f8a5 	bl	8006d34 <BNO080_qToFloat>
 8006bea:	eef0 7a40 	vmov.f32	s15, s0
}
 8006bee:	eeb0 0a67 	vmov.f32	s0, s15
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	200002ae 	.word	0x200002ae
 8006bf8:	20000006 	.word	0x20000006

08006bfc <BNO080_getQuatK>:

//Return the rotation vector quaternion K
float BNO080_getQuatK()
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatK, rotationVector_Q1);
 8006c00:	4b07      	ldr	r3, [pc, #28]	; (8006c20 <BNO080_getQuatK+0x24>)
 8006c02:	881b      	ldrh	r3, [r3, #0]
 8006c04:	b21b      	sxth	r3, r3
 8006c06:	4a07      	ldr	r2, [pc, #28]	; (8006c24 <BNO080_getQuatK+0x28>)
 8006c08:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006c0c:	b2d2      	uxtb	r2, r2
 8006c0e:	4611      	mov	r1, r2
 8006c10:	4618      	mov	r0, r3
 8006c12:	f000 f88f 	bl	8006d34 <BNO080_qToFloat>
 8006c16:	eef0 7a40 	vmov.f32	s15, s0
}
 8006c1a:	eeb0 0a67 	vmov.f32	s0, s15
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	200002b0 	.word	0x200002b0
 8006c24:	20000006 	.word	0x20000006

08006c28 <BNO080_getQuatReal>:

//Return the rotation vector quaternion Real
float BNO080_getQuatReal()
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatReal, rotationVector_Q1);
 8006c2c:	4b07      	ldr	r3, [pc, #28]	; (8006c4c <BNO080_getQuatReal+0x24>)
 8006c2e:	881b      	ldrh	r3, [r3, #0]
 8006c30:	b21b      	sxth	r3, r3
 8006c32:	4a07      	ldr	r2, [pc, #28]	; (8006c50 <BNO080_getQuatReal+0x28>)
 8006c34:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006c38:	b2d2      	uxtb	r2, r2
 8006c3a:	4611      	mov	r1, r2
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f000 f879 	bl	8006d34 <BNO080_qToFloat>
 8006c42:	eef0 7a40 	vmov.f32	s15, s0
}
 8006c46:	eeb0 0a67 	vmov.f32	s0, s15
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	200002b2 	.word	0x200002b2
 8006c50:	20000006 	.word	0x20000006

08006c54 <BNO080_getQuatRadianAccuracy>:

//Return the rotation vector accuracy
float BNO080_getQuatRadianAccuracy()
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
 8006c58:	4b07      	ldr	r3, [pc, #28]	; (8006c78 <BNO080_getQuatRadianAccuracy+0x24>)
 8006c5a:	881b      	ldrh	r3, [r3, #0]
 8006c5c:	b21b      	sxth	r3, r3
 8006c5e:	4a07      	ldr	r2, [pc, #28]	; (8006c7c <BNO080_getQuatRadianAccuracy+0x28>)
 8006c60:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006c64:	b2d2      	uxtb	r2, r2
 8006c66:	4611      	mov	r1, r2
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f000 f863 	bl	8006d34 <BNO080_qToFloat>
 8006c6e:	eef0 7a40 	vmov.f32	s15, s0
}
 8006c72:	eeb0 0a67 	vmov.f32	s0, s15
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	200002b4 	.word	0x200002b4
 8006c7c:	20000006 	.word	0x20000006

08006c80 <BNO080_getQuatAccuracy>:

//Return the acceleration component
uint8_t BNO080_getQuatAccuracy()
{
 8006c80:	b480      	push	{r7}
 8006c82:	af00      	add	r7, sp, #0
	return (quatAccuracy);
 8006c84:	4b03      	ldr	r3, [pc, #12]	; (8006c94 <BNO080_getQuatAccuracy+0x14>)
 8006c86:	881b      	ldrh	r3, [r3, #0]
 8006c88:	b2db      	uxtb	r3, r3
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr
 8006c94:	200002b6 	.word	0x200002b6

08006c98 <BNO080_getMagX>:
	return (gyroAccuracy);
}

//Return the magnetometer component
float BNO080_getMagX()
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagX, magnetometer_Q1);
 8006c9c:	4b07      	ldr	r3, [pc, #28]	; (8006cbc <BNO080_getMagX+0x24>)
 8006c9e:	881b      	ldrh	r3, [r3, #0]
 8006ca0:	b21b      	sxth	r3, r3
 8006ca2:	4a07      	ldr	r2, [pc, #28]	; (8006cc0 <BNO080_getMagX+0x28>)
 8006ca4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006ca8:	b2d2      	uxtb	r2, r2
 8006caa:	4611      	mov	r1, r2
 8006cac:	4618      	mov	r0, r3
 8006cae:	f000 f841 	bl	8006d34 <BNO080_qToFloat>
 8006cb2:	eef0 7a40 	vmov.f32	s15, s0
}
 8006cb6:	eeb0 0a67 	vmov.f32	s0, s15
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	200002a4 	.word	0x200002a4
 8006cc0:	20000008 	.word	0x20000008

08006cc4 <BNO080_getMagY>:

//Return the magnetometer component
float BNO080_getMagY()
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagY, magnetometer_Q1);
 8006cc8:	4b07      	ldr	r3, [pc, #28]	; (8006ce8 <BNO080_getMagY+0x24>)
 8006cca:	881b      	ldrh	r3, [r3, #0]
 8006ccc:	b21b      	sxth	r3, r3
 8006cce:	4a07      	ldr	r2, [pc, #28]	; (8006cec <BNO080_getMagY+0x28>)
 8006cd0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006cd4:	b2d2      	uxtb	r2, r2
 8006cd6:	4611      	mov	r1, r2
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f000 f82b 	bl	8006d34 <BNO080_qToFloat>
 8006cde:	eef0 7a40 	vmov.f32	s15, s0
}
 8006ce2:	eeb0 0a67 	vmov.f32	s0, s15
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	200002a6 	.word	0x200002a6
 8006cec:	20000008 	.word	0x20000008

08006cf0 <BNO080_getMagZ>:

//Return the magnetometer component
float BNO080_getMagZ()
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagZ, magnetometer_Q1);
 8006cf4:	4b07      	ldr	r3, [pc, #28]	; (8006d14 <BNO080_getMagZ+0x24>)
 8006cf6:	881b      	ldrh	r3, [r3, #0]
 8006cf8:	b21b      	sxth	r3, r3
 8006cfa:	4a07      	ldr	r2, [pc, #28]	; (8006d18 <BNO080_getMagZ+0x28>)
 8006cfc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006d00:	b2d2      	uxtb	r2, r2
 8006d02:	4611      	mov	r1, r2
 8006d04:	4618      	mov	r0, r3
 8006d06:	f000 f815 	bl	8006d34 <BNO080_qToFloat>
 8006d0a:	eef0 7a40 	vmov.f32	s15, s0
}
 8006d0e:	eeb0 0a67 	vmov.f32	s0, s15
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	200002a8 	.word	0x200002a8
 8006d18:	20000008 	.word	0x20000008

08006d1c <BNO080_getMagAccuracy>:

//Return the mag component
uint8_t BNO080_getMagAccuracy()
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	af00      	add	r7, sp, #0
	return (magAccuracy);
 8006d20:	4b03      	ldr	r3, [pc, #12]	; (8006d30 <BNO080_getMagAccuracy+0x14>)
 8006d22:	881b      	ldrh	r3, [r3, #0]
 8006d24:	b2db      	uxtb	r3, r3
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr
 8006d30:	200002aa 	.word	0x200002aa

08006d34 <BNO080_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	ed2d 8b02 	vpush	{d8}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	4603      	mov	r3, r0
 8006d40:	460a      	mov	r2, r1
 8006d42:	80fb      	strh	r3, [r7, #6]
 8006d44:	4613      	mov	r3, r2
 8006d46:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 8006d48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d4c:	ee07 3a90 	vmov	s15, r3
 8006d50:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8006d54:	797b      	ldrb	r3, [r7, #5]
 8006d56:	425b      	negs	r3, r3
 8006d58:	ee07 3a90 	vmov	s15, r3
 8006d5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d60:	eef0 0a67 	vmov.f32	s1, s15
 8006d64:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8006d68:	f008 faa6 	bl	800f2b8 <powf>
 8006d6c:	eef0 7a40 	vmov.f32	s15, s0
 8006d70:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 8006d74:	eeb0 0a67 	vmov.f32	s0, s15
 8006d78:	3708      	adds	r7, #8
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	ecbd 8b02 	vpop	{d8}
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <BNO080_enableGameRotationVector>:
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
}

//Sends the packet to enable the rotation vector
void BNO080_enableGameRotationVector(uint16_t timeBetweenReports)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b082      	sub	sp, #8
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	4603      	mov	r3, r0
 8006d8a:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_GAME_ROTATION_VECTOR, timeBetweenReports, 0);
 8006d8c:	88fb      	ldrh	r3, [r7, #6]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	4619      	mov	r1, r3
 8006d92:	2008      	movs	r0, #8
 8006d94:	f000 f82a 	bl	8006dec <BNO080_setFeatureCommand>
}
 8006d98:	bf00      	nop
 8006d9a:	3708      	adds	r7, #8
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <BNO080_enableMagnetometer>:
	BNO080_setFeatureCommand(SENSOR_REPORTID_GYROSCOPE, timeBetweenReports, 0);
}

//Sends the packet to enable the magnetometer
void BNO080_enableMagnetometer(uint16_t timeBetweenReports)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	4603      	mov	r3, r0
 8006da8:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_MAGNETIC_FIELD, timeBetweenReports, 0);
 8006daa:	88fb      	ldrh	r3, [r7, #6]
 8006dac:	2200      	movs	r2, #0
 8006dae:	4619      	mov	r1, r3
 8006db0:	2003      	movs	r0, #3
 8006db2:	f000 f81b 	bl	8006dec <BNO080_setFeatureCommand>
}
 8006db6:	bf00      	nop
 8006db8:	3708      	adds	r7, #8
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <BNO080_calibrateAll>:
	BNO080_sendCalibrateCommand(CALIBRATE_PLANAR_ACCEL);
}

//See 2.2 of the Calibration Procedure document 1000-4044
void BNO080_calibrateAll()
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	af00      	add	r7, sp, #0
	BNO080_sendCalibrateCommand(CALIBRATE_ACCEL_GYRO_MAG);
 8006dc2:	2004      	movs	r0, #4
 8006dc4:	f000 f884 	bl	8006ed0 <BNO080_sendCalibrateCommand>
}
 8006dc8:	bf00      	nop
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <BNO080_calibrationComplete>:
}

//See page 51 of reference manual - ME Calibration Response
//Byte 5 is parsed during the readPacket and stored in calibrationStatus
int BNO080_calibrationComplete()
{
 8006dcc:	b480      	push	{r7}
 8006dce:	af00      	add	r7, sp, #0
	if (calibrationStatus == 0)
 8006dd0:	4b05      	ldr	r3, [pc, #20]	; (8006de8 <BNO080_calibrationComplete+0x1c>)
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d101      	bne.n	8006ddc <BNO080_calibrationComplete+0x10>
		return (1);
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e000      	b.n	8006dde <BNO080_calibrationComplete+0x12>
	return (0);
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr
 8006de8:	200002c8 	.word	0x200002c8

08006dec <BNO080_setFeatureCommand>:

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	4603      	mov	r3, r0
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	607a      	str	r2, [r7, #4]
 8006df8:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8006dfa:	4b24      	ldr	r3, [pc, #144]	; (8006e8c <BNO080_setFeatureCommand+0xa0>)
 8006dfc:	22fd      	movs	r2, #253	; 0xfd
 8006dfe:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8006e00:	4a22      	ldr	r2, [pc, #136]	; (8006e8c <BNO080_setFeatureCommand+0xa0>)
 8006e02:	7bfb      	ldrb	r3, [r7, #15]
 8006e04:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 8006e06:	4b21      	ldr	r3, [pc, #132]	; (8006e8c <BNO080_setFeatureCommand+0xa0>)
 8006e08:	2200      	movs	r2, #0
 8006e0a:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 8006e0c:	4b1f      	ldr	r3, [pc, #124]	; (8006e8c <BNO080_setFeatureCommand+0xa0>)
 8006e0e:	2200      	movs	r2, #0
 8006e10:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 8006e12:	4b1e      	ldr	r3, [pc, #120]	; (8006e8c <BNO080_setFeatureCommand+0xa0>)
 8006e14:	2200      	movs	r2, #0
 8006e16:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	b2da      	uxtb	r2, r3
 8006e1c:	4b1b      	ldr	r3, [pc, #108]	; (8006e8c <BNO080_setFeatureCommand+0xa0>)
 8006e1e:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	0a1b      	lsrs	r3, r3, #8
 8006e24:	b2da      	uxtb	r2, r3
 8006e26:	4b19      	ldr	r3, [pc, #100]	; (8006e8c <BNO080_setFeatureCommand+0xa0>)
 8006e28:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	0c1b      	lsrs	r3, r3, #16
 8006e2e:	b2da      	uxtb	r2, r3
 8006e30:	4b16      	ldr	r3, [pc, #88]	; (8006e8c <BNO080_setFeatureCommand+0xa0>)
 8006e32:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	0e1b      	lsrs	r3, r3, #24
 8006e38:	b2da      	uxtb	r2, r3
 8006e3a:	4b14      	ldr	r3, [pc, #80]	; (8006e8c <BNO080_setFeatureCommand+0xa0>)
 8006e3c:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 8006e3e:	4b13      	ldr	r3, [pc, #76]	; (8006e8c <BNO080_setFeatureCommand+0xa0>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8006e44:	4b11      	ldr	r3, [pc, #68]	; (8006e8c <BNO080_setFeatureCommand+0xa0>)
 8006e46:	2200      	movs	r2, #0
 8006e48:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 8006e4a:	4b10      	ldr	r3, [pc, #64]	; (8006e8c <BNO080_setFeatureCommand+0xa0>)
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8006e50:	4b0e      	ldr	r3, [pc, #56]	; (8006e8c <BNO080_setFeatureCommand+0xa0>)
 8006e52:	2200      	movs	r2, #0
 8006e54:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	b2da      	uxtb	r2, r3
 8006e5a:	4b0c      	ldr	r3, [pc, #48]	; (8006e8c <BNO080_setFeatureCommand+0xa0>)
 8006e5c:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	0a1b      	lsrs	r3, r3, #8
 8006e62:	b2da      	uxtb	r2, r3
 8006e64:	4b09      	ldr	r3, [pc, #36]	; (8006e8c <BNO080_setFeatureCommand+0xa0>)
 8006e66:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	0c1b      	lsrs	r3, r3, #16
 8006e6c:	b2da      	uxtb	r2, r3
 8006e6e:	4b07      	ldr	r3, [pc, #28]	; (8006e8c <BNO080_setFeatureCommand+0xa0>)
 8006e70:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	0e1b      	lsrs	r3, r3, #24
 8006e76:	b2da      	uxtb	r2, r3
 8006e78:	4b04      	ldr	r3, [pc, #16]	; (8006e8c <BNO080_setFeatureCommand+0xa0>)
 8006e7a:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 8006e7c:	2111      	movs	r1, #17
 8006e7e:	2002      	movs	r0, #2
 8006e80:	f000 f938 	bl	80070f4 <BNO080_sendPacket>
}
 8006e84:	bf00      	nop
 8006e86:	3710      	adds	r7, #16
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	20000204 	.word	0x20000204

08006e90 <BNO080_sendCommand>:

//Tell the sensor to do a command
//See 6.3.8 page 41, Command request
//The caller is expected to set P0 through P8 prior to calling
void BNO080_sendCommand(uint8_t command)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	4603      	mov	r3, r0
 8006e98:	71fb      	strb	r3, [r7, #7]
	shtpData[0] = SHTP_REPORT_COMMAND_REQUEST; //Command Request
 8006e9a:	4b0b      	ldr	r3, [pc, #44]	; (8006ec8 <BNO080_sendCommand+0x38>)
 8006e9c:	22f2      	movs	r2, #242	; 0xf2
 8006e9e:	701a      	strb	r2, [r3, #0]
	shtpData[1] = commandSequenceNumber++;	 //Increments automatically each function call
 8006ea0:	4b0a      	ldr	r3, [pc, #40]	; (8006ecc <BNO080_sendCommand+0x3c>)
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	1c5a      	adds	r2, r3, #1
 8006ea6:	b2d1      	uxtb	r1, r2
 8006ea8:	4a08      	ldr	r2, [pc, #32]	; (8006ecc <BNO080_sendCommand+0x3c>)
 8006eaa:	7011      	strb	r1, [r2, #0]
 8006eac:	4a06      	ldr	r2, [pc, #24]	; (8006ec8 <BNO080_sendCommand+0x38>)
 8006eae:	7053      	strb	r3, [r2, #1]
	shtpData[2] = command;					   //Command
 8006eb0:	4a05      	ldr	r2, [pc, #20]	; (8006ec8 <BNO080_sendCommand+0x38>)
 8006eb2:	79fb      	ldrb	r3, [r7, #7]
 8006eb4:	7093      	strb	r3, [r2, #2]
	shtpData[9] = 0;
	shtpData[10] = 0;
	shtpData[11] = 0;*/

	//Transmit packet on channel 2, 12 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 12);
 8006eb6:	210c      	movs	r1, #12
 8006eb8:	2002      	movs	r0, #2
 8006eba:	f000 f91b 	bl	80070f4 <BNO080_sendPacket>
}
 8006ebe:	bf00      	nop
 8006ec0:	3708      	adds	r7, #8
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	20000204 	.word	0x20000204
 8006ecc:	2000028a 	.word	0x2000028a

08006ed0 <BNO080_sendCalibrateCommand>:

//This tells the BNO080 to begin calibrating
//See page 50 of reference manual and the 1000-4044 calibration doc
void BNO080_sendCalibrateCommand(uint8_t thingToCalibrate)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	71fb      	strb	r3, [r7, #7]
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8006eda:	2303      	movs	r3, #3
 8006edc:	73fb      	strb	r3, [r7, #15]
 8006ede:	e006      	b.n	8006eee <BNO080_sendCalibrateCommand+0x1e>
		shtpData[x] = 0;
 8006ee0:	7bfb      	ldrb	r3, [r7, #15]
 8006ee2:	4a1d      	ldr	r2, [pc, #116]	; (8006f58 <BNO080_sendCalibrateCommand+0x88>)
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8006ee8:	7bfb      	ldrb	r3, [r7, #15]
 8006eea:	3301      	adds	r3, #1
 8006eec:	73fb      	strb	r3, [r7, #15]
 8006eee:	7bfb      	ldrb	r3, [r7, #15]
 8006ef0:	2b0b      	cmp	r3, #11
 8006ef2:	d9f5      	bls.n	8006ee0 <BNO080_sendCalibrateCommand+0x10>

	if (thingToCalibrate == CALIBRATE_ACCEL)
 8006ef4:	79fb      	ldrb	r3, [r7, #7]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d103      	bne.n	8006f02 <BNO080_sendCalibrateCommand+0x32>
		shtpData[3] = 1;
 8006efa:	4b17      	ldr	r3, [pc, #92]	; (8006f58 <BNO080_sendCalibrateCommand+0x88>)
 8006efc:	2201      	movs	r2, #1
 8006efe:	70da      	strb	r2, [r3, #3]
 8006f00:	e020      	b.n	8006f44 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_GYRO)
 8006f02:	79fb      	ldrb	r3, [r7, #7]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d103      	bne.n	8006f10 <BNO080_sendCalibrateCommand+0x40>
		shtpData[4] = 1;
 8006f08:	4b13      	ldr	r3, [pc, #76]	; (8006f58 <BNO080_sendCalibrateCommand+0x88>)
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	711a      	strb	r2, [r3, #4]
 8006f0e:	e019      	b.n	8006f44 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_MAG)
 8006f10:	79fb      	ldrb	r3, [r7, #7]
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d103      	bne.n	8006f1e <BNO080_sendCalibrateCommand+0x4e>
		shtpData[5] = 1;
 8006f16:	4b10      	ldr	r3, [pc, #64]	; (8006f58 <BNO080_sendCalibrateCommand+0x88>)
 8006f18:	2201      	movs	r2, #1
 8006f1a:	715a      	strb	r2, [r3, #5]
 8006f1c:	e012      	b.n	8006f44 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_PLANAR_ACCEL)
 8006f1e:	79fb      	ldrb	r3, [r7, #7]
 8006f20:	2b03      	cmp	r3, #3
 8006f22:	d103      	bne.n	8006f2c <BNO080_sendCalibrateCommand+0x5c>
		shtpData[7] = 1;
 8006f24:	4b0c      	ldr	r3, [pc, #48]	; (8006f58 <BNO080_sendCalibrateCommand+0x88>)
 8006f26:	2201      	movs	r2, #1
 8006f28:	71da      	strb	r2, [r3, #7]
 8006f2a:	e00b      	b.n	8006f44 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_ACCEL_GYRO_MAG)
 8006f2c:	79fb      	ldrb	r3, [r7, #7]
 8006f2e:	2b04      	cmp	r3, #4
 8006f30:	d108      	bne.n	8006f44 <BNO080_sendCalibrateCommand+0x74>
	{
		shtpData[3] = 1;
 8006f32:	4b09      	ldr	r3, [pc, #36]	; (8006f58 <BNO080_sendCalibrateCommand+0x88>)
 8006f34:	2201      	movs	r2, #1
 8006f36:	70da      	strb	r2, [r3, #3]
		shtpData[4] = 1;
 8006f38:	4b07      	ldr	r3, [pc, #28]	; (8006f58 <BNO080_sendCalibrateCommand+0x88>)
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	711a      	strb	r2, [r3, #4]
		shtpData[5] = 1;
 8006f3e:	4b06      	ldr	r3, [pc, #24]	; (8006f58 <BNO080_sendCalibrateCommand+0x88>)
 8006f40:	2201      	movs	r2, #1
 8006f42:	715a      	strb	r2, [r3, #5]
	}
	else if (thingToCalibrate == CALIBRATE_STOP)
		; //Do nothing, bytes are set to zero

	//Make the internal calStatus variable non-zero (operation failed) so that user can test while we wait
	calibrationStatus = 1;
 8006f44:	4b05      	ldr	r3, [pc, #20]	; (8006f5c <BNO080_sendCalibrateCommand+0x8c>)
 8006f46:	2201      	movs	r2, #1
 8006f48:	701a      	strb	r2, [r3, #0]

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_ME_CALIBRATE);
 8006f4a:	2007      	movs	r0, #7
 8006f4c:	f7ff ffa0 	bl	8006e90 <BNO080_sendCommand>
}
 8006f50:	bf00      	nop
 8006f52:	3710      	adds	r7, #16
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	20000204 	.word	0x20000204
 8006f5c:	200002c8 	.word	0x200002c8

08006f60 <BNO080_requestCalibrationStatus>:

//Request ME Calibration Status from BNO080
//See page 51 of reference manual
void BNO080_requestCalibrationStatus()
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8006f66:	2303      	movs	r3, #3
 8006f68:	71fb      	strb	r3, [r7, #7]
 8006f6a:	e006      	b.n	8006f7a <BNO080_requestCalibrationStatus+0x1a>
		shtpData[x] = 0;
 8006f6c:	79fb      	ldrb	r3, [r7, #7]
 8006f6e:	4a09      	ldr	r2, [pc, #36]	; (8006f94 <BNO080_requestCalibrationStatus+0x34>)
 8006f70:	2100      	movs	r1, #0
 8006f72:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8006f74:	79fb      	ldrb	r3, [r7, #7]
 8006f76:	3301      	adds	r3, #1
 8006f78:	71fb      	strb	r3, [r7, #7]
 8006f7a:	79fb      	ldrb	r3, [r7, #7]
 8006f7c:	2b0b      	cmp	r3, #11
 8006f7e:	d9f5      	bls.n	8006f6c <BNO080_requestCalibrationStatus+0xc>

	shtpData[6] = 0x01; //P3 - 0x01 - Subcommand: Get ME Calibration
 8006f80:	4b04      	ldr	r3, [pc, #16]	; (8006f94 <BNO080_requestCalibrationStatus+0x34>)
 8006f82:	2201      	movs	r2, #1
 8006f84:	719a      	strb	r2, [r3, #6]

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_ME_CALIBRATE);
 8006f86:	2007      	movs	r0, #7
 8006f88:	f7ff ff82 	bl	8006e90 <BNO080_sendCommand>
}
 8006f8c:	bf00      	nop
 8006f8e:	3708      	adds	r7, #8
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	20000204 	.word	0x20000204

08006f98 <BNO080_saveCalibration>:

//This tells the BNO080 to save the Dynamic Calibration Data (DCD) to flash
//See page 49 of reference manual and the 1000-4044 calibration doc
void BNO080_saveCalibration()
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	71fb      	strb	r3, [r7, #7]
 8006fa2:	e006      	b.n	8006fb2 <BNO080_saveCalibration+0x1a>
		shtpData[x] = 0;
 8006fa4:	79fb      	ldrb	r3, [r7, #7]
 8006fa6:	4a08      	ldr	r2, [pc, #32]	; (8006fc8 <BNO080_saveCalibration+0x30>)
 8006fa8:	2100      	movs	r1, #0
 8006faa:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8006fac:	79fb      	ldrb	r3, [r7, #7]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	71fb      	strb	r3, [r7, #7]
 8006fb2:	79fb      	ldrb	r3, [r7, #7]
 8006fb4:	2b0b      	cmp	r3, #11
 8006fb6:	d9f5      	bls.n	8006fa4 <BNO080_saveCalibration+0xc>

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_DCD); //Save DCD command
 8006fb8:	2006      	movs	r0, #6
 8006fba:	f7ff ff69 	bl	8006e90 <BNO080_sendCommand>
}
 8006fbe:	bf00      	nop
 8006fc0:	3708      	adds	r7, #8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	20000204 	.word	0x20000204

08006fcc <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	607b      	str	r3, [r7, #4]
 8006fd6:	e00c      	b.n	8006ff2 <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 8006fd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006fdc:	480b      	ldr	r0, [pc, #44]	; (800700c <BNO080_waitForSPI+0x40>)
 8006fde:	f7ff fa75 	bl	80064cc <LL_GPIO_IsInputPinSet>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d101      	bne.n	8006fec <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e00a      	b.n	8007002 <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	607b      	str	r3, [r7, #4]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff8:	d1ee      	bne.n	8006fd8 <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 8006ffa:	4805      	ldr	r0, [pc, #20]	; (8007010 <BNO080_waitForSPI+0x44>)
 8006ffc:	f006 f87c 	bl	800d0f8 <puts>
	return (0);
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3708      	adds	r7, #8
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	40020800 	.word	0x40020800
 8007010:	0800ffd0 	.word	0x0800ffd0

08007014 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 800701a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800701e:	4831      	ldr	r0, [pc, #196]	; (80070e4 <BNO080_receivePacket+0xd0>)
 8007020:	f7ff fa54 	bl	80064cc <LL_GPIO_IsInputPinSet>
 8007024:	4603      	mov	r3, r0
 8007026:	2b01      	cmp	r3, #1
 8007028:	d101      	bne.n	800702e <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 800702a:	2300      	movs	r3, #0
 800702c:	e056      	b.n	80070dc <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 800702e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007032:	482d      	ldr	r0, [pc, #180]	; (80070e8 <BNO080_receivePacket+0xd4>)
 8007034:	f7ff fa6d 	bl	8006512 <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 8007038:	2000      	movs	r0, #0
 800703a:	f7ff fbd7 	bl	80067ec <SPI2_SendByte>
 800703e:	4603      	mov	r3, r0
 8007040:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 8007042:	2000      	movs	r0, #0
 8007044:	f7ff fbd2 	bl	80067ec <SPI2_SendByte>
 8007048:	4603      	mov	r3, r0
 800704a:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 800704c:	2000      	movs	r0, #0
 800704e:	f7ff fbcd 	bl	80067ec <SPI2_SendByte>
 8007052:	4603      	mov	r3, r0
 8007054:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 8007056:	2000      	movs	r0, #0
 8007058:	f7ff fbc8 	bl	80067ec <SPI2_SendByte>
 800705c:	4603      	mov	r3, r0
 800705e:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 8007060:	4a22      	ldr	r2, [pc, #136]	; (80070ec <BNO080_receivePacket+0xd8>)
 8007062:	7b7b      	ldrb	r3, [r7, #13]
 8007064:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 8007066:	4a21      	ldr	r2, [pc, #132]	; (80070ec <BNO080_receivePacket+0xd8>)
 8007068:	7b3b      	ldrb	r3, [r7, #12]
 800706a:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 800706c:	4a1f      	ldr	r2, [pc, #124]	; (80070ec <BNO080_receivePacket+0xd8>)
 800706e:	7afb      	ldrb	r3, [r7, #11]
 8007070:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 8007072:	4a1e      	ldr	r2, [pc, #120]	; (80070ec <BNO080_receivePacket+0xd8>)
 8007074:	7abb      	ldrb	r3, [r7, #10]
 8007076:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8007078:	7b3b      	ldrb	r3, [r7, #12]
 800707a:	021b      	lsls	r3, r3, #8
 800707c:	b21a      	sxth	r2, r3
 800707e:	7b7b      	ldrb	r3, [r7, #13]
 8007080:	b21b      	sxth	r3, r3
 8007082:	4313      	orrs	r3, r2
 8007084:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 8007086:	893b      	ldrh	r3, [r7, #8]
 8007088:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800708c:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 800708e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d101      	bne.n	800709a <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 8007096:	2300      	movs	r3, #0
 8007098:	e020      	b.n	80070dc <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 800709a:	893b      	ldrh	r3, [r7, #8]
 800709c:	3b04      	subs	r3, #4
 800709e:	b29b      	uxth	r3, r3
 80070a0:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 80070a2:	2300      	movs	r3, #0
 80070a4:	81fb      	strh	r3, [r7, #14]
 80070a6:	e00e      	b.n	80070c6 <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 80070a8:	20ff      	movs	r0, #255	; 0xff
 80070aa:	f7ff fb9f 	bl	80067ec <SPI2_SendByte>
 80070ae:	4603      	mov	r3, r0
 80070b0:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 80070b2:	89fb      	ldrh	r3, [r7, #14]
 80070b4:	2b7f      	cmp	r3, #127	; 0x7f
 80070b6:	d803      	bhi.n	80070c0 <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 80070b8:	89fb      	ldrh	r3, [r7, #14]
 80070ba:	490d      	ldr	r1, [pc, #52]	; (80070f0 <BNO080_receivePacket+0xdc>)
 80070bc:	79fa      	ldrb	r2, [r7, #7]
 80070be:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 80070c0:	89fb      	ldrh	r3, [r7, #14]
 80070c2:	3301      	adds	r3, #1
 80070c4:	81fb      	strh	r3, [r7, #14]
 80070c6:	89fa      	ldrh	r2, [r7, #14]
 80070c8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	dbeb      	blt.n	80070a8 <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 80070d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80070d4:	4804      	ldr	r0, [pc, #16]	; (80070e8 <BNO080_receivePacket+0xd4>)
 80070d6:	f7ff fa0e 	bl	80064f6 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 80070da:	2301      	movs	r3, #1
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	40020800 	.word	0x40020800
 80070e8:	40020400 	.word	0x40020400
 80070ec:	20000200 	.word	0x20000200
 80070f0:	20000204 	.word	0x20000204

080070f4 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	4603      	mov	r3, r0
 80070fc:	460a      	mov	r2, r1
 80070fe:	71fb      	strb	r3, [r7, #7]
 8007100:	4613      	mov	r3, r2
 8007102:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8007104:	79bb      	ldrb	r3, [r7, #6]
 8007106:	3304      	adds	r3, #4
 8007108:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 800710a:	f7ff ff5f 	bl	8006fcc <BNO080_waitForSPI>
 800710e:	4603      	mov	r3, r0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d101      	bne.n	8007118 <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 8007114:	2300      	movs	r3, #0
 8007116:	e032      	b.n	800717e <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 8007118:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800711c:	481a      	ldr	r0, [pc, #104]	; (8007188 <BNO080_sendPacket+0x94>)
 800711e:	f7ff f9f8 	bl	8006512 <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 8007122:	7bbb      	ldrb	r3, [r7, #14]
 8007124:	4618      	mov	r0, r3
 8007126:	f7ff fb61 	bl	80067ec <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 800712a:	7bbb      	ldrb	r3, [r7, #14]
 800712c:	121b      	asrs	r3, r3, #8
 800712e:	b2db      	uxtb	r3, r3
 8007130:	4618      	mov	r0, r3
 8007132:	f7ff fb5b 	bl	80067ec <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 8007136:	79fb      	ldrb	r3, [r7, #7]
 8007138:	4618      	mov	r0, r3
 800713a:	f7ff fb57 	bl	80067ec <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 800713e:	79fb      	ldrb	r3, [r7, #7]
 8007140:	4a12      	ldr	r2, [pc, #72]	; (800718c <BNO080_sendPacket+0x98>)
 8007142:	5cd2      	ldrb	r2, [r2, r3]
 8007144:	1c51      	adds	r1, r2, #1
 8007146:	b2c8      	uxtb	r0, r1
 8007148:	4910      	ldr	r1, [pc, #64]	; (800718c <BNO080_sendPacket+0x98>)
 800714a:	54c8      	strb	r0, [r1, r3]
 800714c:	4610      	mov	r0, r2
 800714e:	f7ff fb4d 	bl	80067ec <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 8007152:	2300      	movs	r3, #0
 8007154:	73fb      	strb	r3, [r7, #15]
 8007156:	e008      	b.n	800716a <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 8007158:	7bfb      	ldrb	r3, [r7, #15]
 800715a:	4a0d      	ldr	r2, [pc, #52]	; (8007190 <BNO080_sendPacket+0x9c>)
 800715c:	5cd3      	ldrb	r3, [r2, r3]
 800715e:	4618      	mov	r0, r3
 8007160:	f7ff fb44 	bl	80067ec <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 8007164:	7bfb      	ldrb	r3, [r7, #15]
 8007166:	3301      	adds	r3, #1
 8007168:	73fb      	strb	r3, [r7, #15]
 800716a:	7bfa      	ldrb	r2, [r7, #15]
 800716c:	79bb      	ldrb	r3, [r7, #6]
 800716e:	429a      	cmp	r2, r3
 8007170:	d3f2      	bcc.n	8007158 <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 8007172:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007176:	4804      	ldr	r0, [pc, #16]	; (8007188 <BNO080_sendPacket+0x94>)
 8007178:	f7ff f9bd 	bl	80064f6 <LL_GPIO_SetOutputPin>

	return (1);
 800717c:	2301      	movs	r3, #1
}
 800717e:	4618      	mov	r0, r3
 8007180:	3710      	adds	r7, #16
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	40020400 	.word	0x40020400
 800718c:	20000284 	.word	0x20000284
 8007190:	20000204 	.word	0x20000204

08007194 <iBus_Check_CHKSUM>:
#include "FS-iA6B.h"

FSiA6B_iBus iBus;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	460b      	mov	r3, r1
 800719e:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 80071a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80071a4:	81fb      	strh	r3, [r7, #14]

	for(int i=0;i<len-2;i++)
 80071a6:	2300      	movs	r3, #0
 80071a8:	60bb      	str	r3, [r7, #8]
 80071aa:	e00a      	b.n	80071c2 <iBus_Check_CHKSUM+0x2e>
	{
		chksum = chksum - data[i];
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	4413      	add	r3, r2
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	89fa      	ldrh	r2, [r7, #14]
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	81fb      	strh	r3, [r7, #14]
	for(int i=0;i<len-2;i++)
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	3301      	adds	r3, #1
 80071c0:	60bb      	str	r3, [r7, #8]
 80071c2:	78fb      	ldrb	r3, [r7, #3]
 80071c4:	3b02      	subs	r3, #2
 80071c6:	68ba      	ldr	r2, [r7, #8]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	dbef      	blt.n	80071ac <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum&0x00ff)==data[30]) && ((chksum>>8)==data[31]);
 80071cc:	89fb      	ldrh	r3, [r7, #14]
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	321e      	adds	r2, #30
 80071d4:	7812      	ldrb	r2, [r2, #0]
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d10a      	bne.n	80071f0 <iBus_Check_CHKSUM+0x5c>
 80071da:	89fb      	ldrh	r3, [r7, #14]
 80071dc:	0a1b      	lsrs	r3, r3, #8
 80071de:	b29a      	uxth	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	331f      	adds	r3, #31
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d101      	bne.n	80071f0 <iBus_Check_CHKSUM+0x5c>
 80071ec:	2301      	movs	r3, #1
 80071ee:	e000      	b.n	80071f2 <iBus_Check_CHKSUM+0x5e>
 80071f0:	2300      	movs	r3, #0
 80071f2:	b2db      	uxtb	r3, r3
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3714      	adds	r7, #20
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA6B_iBus* iBus)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]

	iBus->RH = (data[2] | data[3]<<8) & 0x0fff;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	3302      	adds	r3, #2
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	b21a      	sxth	r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	3303      	adds	r3, #3
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	021b      	lsls	r3, r3, #8
 800721a:	b21b      	sxth	r3, r3
 800721c:	4313      	orrs	r3, r2
 800721e:	b21b      	sxth	r3, r3
 8007220:	b29b      	uxth	r3, r3
 8007222:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007226:	b29a      	uxth	r2, r3
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	801a      	strh	r2, [r3, #0]
	iBus->RV = (data[4] | data[5]<<8) & 0x0fff;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	3304      	adds	r3, #4
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	b21a      	sxth	r2, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	3305      	adds	r3, #5
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	021b      	lsls	r3, r3, #8
 800723c:	b21b      	sxth	r3, r3
 800723e:	4313      	orrs	r3, r2
 8007240:	b21b      	sxth	r3, r3
 8007242:	b29b      	uxth	r3, r3
 8007244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007248:	b29a      	uxth	r2, r3
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	805a      	strh	r2, [r3, #2]
	iBus->LV = (data[6] | data[7]<<8) & 0x0fff;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	3306      	adds	r3, #6
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	b21a      	sxth	r2, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	3307      	adds	r3, #7
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	021b      	lsls	r3, r3, #8
 800725e:	b21b      	sxth	r3, r3
 8007260:	4313      	orrs	r3, r2
 8007262:	b21b      	sxth	r3, r3
 8007264:	b29b      	uxth	r3, r3
 8007266:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800726a:	b29a      	uxth	r2, r3
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	809a      	strh	r2, [r3, #4]
	iBus->LH = (data[8] | data[9]<<8) & 0x0fff;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	3308      	adds	r3, #8
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	b21a      	sxth	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	3309      	adds	r3, #9
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	021b      	lsls	r3, r3, #8
 8007280:	b21b      	sxth	r3, r3
 8007282:	4313      	orrs	r3, r2
 8007284:	b21b      	sxth	r3, r3
 8007286:	b29b      	uxth	r3, r3
 8007288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800728c:	b29a      	uxth	r2, r3
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	80da      	strh	r2, [r3, #6]
	iBus->SwA = (data[10] | data[11]<<8) & 0x0fff;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	330a      	adds	r3, #10
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	b21a      	sxth	r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	330b      	adds	r3, #11
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	021b      	lsls	r3, r3, #8
 80072a2:	b21b      	sxth	r3, r3
 80072a4:	4313      	orrs	r3, r2
 80072a6:	b21b      	sxth	r3, r3
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072ae:	b29a      	uxth	r2, r3
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	811a      	strh	r2, [r3, #8]
	iBus->SwC = (data[12] | data[13]<<8) & 0x0fff;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	330c      	adds	r3, #12
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	b21a      	sxth	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	330d      	adds	r3, #13
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	021b      	lsls	r3, r3, #8
 80072c4:	b21b      	sxth	r3, r3
 80072c6:	4313      	orrs	r3, r2
 80072c8:	b21b      	sxth	r3, r3
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	819a      	strh	r2, [r3, #12]

#define _USE_FS_I6
#ifdef _USE_FS_I6
	iBus->FailSafe = (data[13] >> 4);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	330d      	adds	r3, #13
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	091b      	lsrs	r3, r3, #4
 80072de:	b2da      	uxtb	r2, r3
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	751a      	strb	r2, [r3, #20]

#ifdef _USE_FS_I6X
	iBus->SwD = (data[14] | data[15]<<8) & 0x0fff;
	iBus->FailSafe = iBus->SwD == 1500;
#endif
}
 80072e4:	bf00      	nop
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <iBus_isActiveFailsafe>:

unsigned char iBus_isActiveFailsafe(FSiA6B_iBus* iBus)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
	return iBus->FailSafe != 0;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	7d1b      	ldrb	r3, [r3, #20]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	bf14      	ite	ne
 8007300:	2301      	movne	r3, #1
 8007302:	2300      	moveq	r3, #0
 8007304:	b2db      	uxtb	r3, r3
}
 8007306:	4618      	mov	r0, r3
 8007308:	370c      	adds	r7, #12
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr

08007312 <LL_SPI_Enable>:
{
 8007312:	b480      	push	{r7}
 8007314:	b083      	sub	sp, #12
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	601a      	str	r2, [r3, #0]
}
 8007326:	bf00      	nop
 8007328:	370c      	adds	r7, #12
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr

08007332 <LL_SPI_SetStandard>:
{
 8007332:	b480      	push	{r7}
 8007334:	b083      	sub	sp, #12
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
 800733a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	f023 0210 	bic.w	r2, r3, #16
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	431a      	orrs	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	605a      	str	r2, [r3, #4]
}
 800734c:	bf00      	nop
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <LL_SPI_IsActiveFlag_RXNE>:
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	f003 0301 	and.w	r3, r3, #1
 8007368:	2b01      	cmp	r3, #1
 800736a:	d101      	bne.n	8007370 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800736c:	2301      	movs	r3, #1
 800736e:	e000      	b.n	8007372 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	370c      	adds	r7, #12
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr

0800737e <LL_SPI_IsActiveFlag_TXE>:
{
 800737e:	b480      	push	{r7}
 8007380:	b083      	sub	sp, #12
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	f003 0302 	and.w	r3, r3, #2
 800738e:	2b02      	cmp	r3, #2
 8007390:	d101      	bne.n	8007396 <LL_SPI_IsActiveFlag_TXE+0x18>
 8007392:	2301      	movs	r3, #1
 8007394:	e000      	b.n	8007398 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <LL_SPI_ReceiveData8>:
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	b2db      	uxtb	r3, r3
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	370c      	adds	r7, #12
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr

080073be <LL_SPI_TransmitData8>:
{
 80073be:	b480      	push	{r7}
 80073c0:	b085      	sub	sp, #20
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
 80073c6:	460b      	mov	r3, r1
 80073c8:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	330c      	adds	r3, #12
 80073ce:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	78fa      	ldrb	r2, [r7, #3]
 80073d4:	701a      	strb	r2, [r3, #0]
}
 80073d6:	bf00      	nop
 80073d8:	3714      	adds	r7, #20
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr

080073e2 <LL_GPIO_IsInputPinSet>:
{
 80073e2:	b480      	push	{r7}
 80073e4:	b083      	sub	sp, #12
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
 80073ea:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	691a      	ldr	r2, [r3, #16]
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	4013      	ands	r3, r2
 80073f4:	683a      	ldr	r2, [r7, #0]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	bf0c      	ite	eq
 80073fa:	2301      	moveq	r3, #1
 80073fc:	2300      	movne	r3, #0
 80073fe:	b2db      	uxtb	r3, r3
}
 8007400:	4618      	mov	r0, r3
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <LL_GPIO_SetOutputPin>:
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	683a      	ldr	r2, [r7, #0]
 800741a:	619a      	str	r2, [r3, #24]
}
 800741c:	bf00      	nop
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <LL_GPIO_ResetOutputPin>:
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	041a      	lsls	r2, r3, #16
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	619a      	str	r2, [r3, #24]
}
 800743a:	bf00      	nop
 800743c:	370c      	adds	r7, #12
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
	...

08007448 <LL_AHB1_GRP1_EnableClock>:
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8007450:	4b08      	ldr	r3, [pc, #32]	; (8007474 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007452:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007454:	4907      	ldr	r1, [pc, #28]	; (8007474 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4313      	orrs	r3, r2
 800745a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800745c:	4b05      	ldr	r3, [pc, #20]	; (8007474 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800745e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4013      	ands	r3, r2
 8007464:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007466:	68fb      	ldr	r3, [r7, #12]
}
 8007468:	bf00      	nop
 800746a:	3714      	adds	r7, #20
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr
 8007474:	40023800 	.word	0x40023800

08007478 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8007480:	4b08      	ldr	r3, [pc, #32]	; (80074a4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8007482:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007484:	4907      	ldr	r1, [pc, #28]	; (80074a4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4313      	orrs	r3, r2
 800748a:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800748c:	4b05      	ldr	r3, [pc, #20]	; (80074a4 <LL_APB2_GRP1_EnableClock+0x2c>)
 800748e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4013      	ands	r3, r2
 8007494:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007496:	68fb      	ldr	r3, [r7, #12]
}
 8007498:	bf00      	nop
 800749a:	3714      	adds	r7, #20
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr
 80074a4:	40023800 	.word	0x40023800

080074a8 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b090      	sub	sp, #64	; 0x40
 80074ac:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80074ae:	f107 0318 	add.w	r3, r7, #24
 80074b2:	2228      	movs	r2, #40	; 0x28
 80074b4:	2100      	movs	r1, #0
 80074b6:	4618      	mov	r0, r3
 80074b8:	f005 f926 	bl	800c708 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074bc:	463b      	mov	r3, r7
 80074be:	2200      	movs	r2, #0
 80074c0:	601a      	str	r2, [r3, #0]
 80074c2:	605a      	str	r2, [r3, #4]
 80074c4:	609a      	str	r2, [r3, #8]
 80074c6:	60da      	str	r2, [r3, #12]
 80074c8:	611a      	str	r2, [r3, #16]
 80074ca:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80074cc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80074d0:	f7ff ffd2 	bl	8007478 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80074d4:	2001      	movs	r0, #1
 80074d6:	f7ff ffb7 	bl	8007448 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80074da:	2004      	movs	r0, #4
 80074dc:	f7ff ffb4 	bl	8007448 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80074e0:	23e0      	movs	r3, #224	; 0xe0
 80074e2:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80074e4:	2302      	movs	r3, #2
 80074e6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80074e8:	2303      	movs	r3, #3
 80074ea:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80074ec:	2300      	movs	r3, #0
 80074ee:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80074f0:	2300      	movs	r3, #0
 80074f2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80074f4:	2305      	movs	r3, #5
 80074f6:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074f8:	463b      	mov	r3, r7
 80074fa:	4619      	mov	r1, r3
 80074fc:	4825      	ldr	r0, [pc, #148]	; (8007594 <ICM20602_GPIO_SPI_Initialization+0xec>)
 80074fe:	f7fd fdd1 	bl	80050a4 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8007502:	2300      	movs	r3, #0
 8007504:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8007506:	f44f 7382 	mov.w	r3, #260	; 0x104
 800750a:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800750c:	2300      	movs	r3, #0
 800750e:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8007510:	2302      	movs	r3, #2
 8007512:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8007514:	2301      	movs	r3, #1
 8007516:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8007518:	f44f 7300 	mov.w	r3, #512	; 0x200
 800751c:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 800751e:	2310      	movs	r3, #16
 8007520:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8007522:	2300      	movs	r3, #0
 8007524:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8007526:	2300      	movs	r3, #0
 8007528:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 800752a:	230a      	movs	r3, #10
 800752c:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 800752e:	f107 0318 	add.w	r3, r7, #24
 8007532:	4619      	mov	r1, r3
 8007534:	4818      	ldr	r0, [pc, #96]	; (8007598 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8007536:	f7fd ff86 	bl	8005446 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 800753a:	2100      	movs	r1, #0
 800753c:	4816      	ldr	r0, [pc, #88]	; (8007598 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 800753e:	f7ff fef8 	bl	8007332 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 8007542:	2110      	movs	r1, #16
 8007544:	4815      	ldr	r0, [pc, #84]	; (800759c <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8007546:	f7ff ff6f 	bl	8007428 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 800754a:	2310      	movs	r3, #16
 800754c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800754e:	2301      	movs	r3, #1
 8007550:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007552:	2303      	movs	r3, #3
 8007554:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007556:	2300      	movs	r3, #0
 8007558:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800755a:	2300      	movs	r3, #0
 800755c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 800755e:	463b      	mov	r3, r7
 8007560:	4619      	mov	r1, r3
 8007562:	480e      	ldr	r0, [pc, #56]	; (800759c <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8007564:	f7fd fd9e 	bl	80050a4 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 8007568:	2320      	movs	r3, #32
 800756a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800756c:	2300      	movs	r3, #0
 800756e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8007570:	2301      	movs	r3, #1
 8007572:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 8007574:	463b      	mov	r3, r7
 8007576:	4619      	mov	r1, r3
 8007578:	4808      	ldr	r0, [pc, #32]	; (800759c <ICM20602_GPIO_SPI_Initialization+0xf4>)
 800757a:	f7fd fd93 	bl	80050a4 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 800757e:	4806      	ldr	r0, [pc, #24]	; (8007598 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8007580:	f7ff fec7 	bl	8007312 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8007584:	2110      	movs	r1, #16
 8007586:	4805      	ldr	r0, [pc, #20]	; (800759c <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8007588:	f7ff ff40 	bl	800740c <LL_GPIO_SetOutputPin>
}
 800758c:	bf00      	nop
 800758e:	3740      	adds	r7, #64	; 0x40
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	40020000 	.word	0x40020000
 8007598:	40013000 	.word	0x40013000
 800759c:	40020800 	.word	0x40020800

080075a0 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	4603      	mov	r3, r0
 80075a8:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 80075aa:	bf00      	nop
 80075ac:	480c      	ldr	r0, [pc, #48]	; (80075e0 <SPI1_SendByte+0x40>)
 80075ae:	f7ff fee6 	bl	800737e <LL_SPI_IsActiveFlag_TXE>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d0f9      	beq.n	80075ac <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 80075b8:	79fb      	ldrb	r3, [r7, #7]
 80075ba:	4619      	mov	r1, r3
 80075bc:	4808      	ldr	r0, [pc, #32]	; (80075e0 <SPI1_SendByte+0x40>)
 80075be:	f7ff fefe 	bl	80073be <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 80075c2:	bf00      	nop
 80075c4:	4806      	ldr	r0, [pc, #24]	; (80075e0 <SPI1_SendByte+0x40>)
 80075c6:	f7ff fec7 	bl	8007358 <LL_SPI_IsActiveFlag_RXNE>
 80075ca:	4603      	mov	r3, r0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d0f9      	beq.n	80075c4 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 80075d0:	4803      	ldr	r0, [pc, #12]	; (80075e0 <SPI1_SendByte+0x40>)
 80075d2:	f7ff fee7 	bl	80073a4 <LL_SPI_ReceiveData8>
 80075d6:	4603      	mov	r3, r0
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3708      	adds	r7, #8
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	40013000 	.word	0x40013000

080075e4 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	4603      	mov	r3, r0
 80075ec:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 80075ee:	2110      	movs	r1, #16
 80075f0:	480b      	ldr	r0, [pc, #44]	; (8007620 <ICM20602_Readbyte+0x3c>)
 80075f2:	f7ff ff19 	bl	8007428 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80075f6:	79fb      	ldrb	r3, [r7, #7]
 80075f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	4618      	mov	r0, r3
 8007600:	f7ff ffce 	bl	80075a0 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8007604:	2000      	movs	r0, #0
 8007606:	f7ff ffcb 	bl	80075a0 <SPI1_SendByte>
 800760a:	4603      	mov	r3, r0
 800760c:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 800760e:	2110      	movs	r1, #16
 8007610:	4803      	ldr	r0, [pc, #12]	; (8007620 <ICM20602_Readbyte+0x3c>)
 8007612:	f7ff fefb 	bl	800740c <LL_GPIO_SetOutputPin>
	
	return val;
 8007616:	7bfb      	ldrb	r3, [r7, #15]
}
 8007618:	4618      	mov	r0, r3
 800761a:	3710      	adds	r7, #16
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	40020800 	.word	0x40020800

08007624 <ICM20602_Readbytes>:

void ICM20602_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8007624:	b590      	push	{r4, r7, lr}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
 800762a:	4603      	mov	r3, r0
 800762c:	603a      	str	r2, [r7, #0]
 800762e:	71fb      	strb	r3, [r7, #7]
 8007630:	460b      	mov	r3, r1
 8007632:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8007634:	2300      	movs	r3, #0
 8007636:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM20602);
 8007638:	2110      	movs	r1, #16
 800763a:	4810      	ldr	r0, [pc, #64]	; (800767c <ICM20602_Readbytes+0x58>)
 800763c:	f7ff fef4 	bl	8007428 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8007640:	79fb      	ldrb	r3, [r7, #7]
 8007642:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007646:	b2db      	uxtb	r3, r3
 8007648:	4618      	mov	r0, r3
 800764a:	f7ff ffa9 	bl	80075a0 <SPI1_SendByte>
	while(i < len)
 800764e:	e009      	b.n	8007664 <ICM20602_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	1c5a      	adds	r2, r3, #1
 8007654:	60fa      	str	r2, [r7, #12]
 8007656:	683a      	ldr	r2, [r7, #0]
 8007658:	18d4      	adds	r4, r2, r3
 800765a:	2000      	movs	r0, #0
 800765c:	f7ff ffa0 	bl	80075a0 <SPI1_SendByte>
 8007660:	4603      	mov	r3, r0
 8007662:	7023      	strb	r3, [r4, #0]
	while(i < len)
 8007664:	79bb      	ldrb	r3, [r7, #6]
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	429a      	cmp	r2, r3
 800766a:	d3f1      	bcc.n	8007650 <ICM20602_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM20602);
 800766c:	2110      	movs	r1, #16
 800766e:	4803      	ldr	r0, [pc, #12]	; (800767c <ICM20602_Readbytes+0x58>)
 8007670:	f7ff fecc 	bl	800740c <LL_GPIO_SetOutputPin>
}
 8007674:	bf00      	nop
 8007676:	3714      	adds	r7, #20
 8007678:	46bd      	mov	sp, r7
 800767a:	bd90      	pop	{r4, r7, pc}
 800767c:	40020800 	.word	0x40020800

08007680 <ICM20602_Writebyte>:

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	4603      	mov	r3, r0
 8007688:	460a      	mov	r2, r1
 800768a:	71fb      	strb	r3, [r7, #7]
 800768c:	4613      	mov	r3, r2
 800768e:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 8007690:	2110      	movs	r1, #16
 8007692:	480b      	ldr	r0, [pc, #44]	; (80076c0 <ICM20602_Writebyte+0x40>)
 8007694:	f7ff fec8 	bl	8007428 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8007698:	79fb      	ldrb	r3, [r7, #7]
 800769a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	4618      	mov	r0, r3
 80076a2:	f7ff ff7d 	bl	80075a0 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 80076a6:	79bb      	ldrb	r3, [r7, #6]
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7ff ff79 	bl	80075a0 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 80076ae:	2110      	movs	r1, #16
 80076b0:	4803      	ldr	r0, [pc, #12]	; (80076c0 <ICM20602_Writebyte+0x40>)
 80076b2:	f7ff feab 	bl	800740c <LL_GPIO_SetOutputPin>
}
 80076b6:	bf00      	nop
 80076b8:	3708      	adds	r7, #8
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	40020800 	.word	0x40020800

080076c4 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 80076ca:	2300      	movs	r3, #0
 80076cc:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 80076ce:	f107 0308 	add.w	r3, r7, #8
 80076d2:	2200      	movs	r2, #0
 80076d4:	601a      	str	r2, [r3, #0]
 80076d6:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 80076d8:	463b      	mov	r3, r7
 80076da:	2200      	movs	r2, #0
 80076dc:	601a      	str	r2, [r3, #0]
 80076de:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 80076e0:	f7ff fee2 	bl	80074a8 <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 80076e4:	4833      	ldr	r0, [pc, #204]	; (80077b4 <ICM20602_Initialization+0xf0>)
 80076e6:	f005 fc81 	bl	800cfec <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 80076ea:	2075      	movs	r0, #117	; 0x75
 80076ec:	f7ff ff7a 	bl	80075e4 <ICM20602_Readbyte>
 80076f0:	4603      	mov	r3, r0
 80076f2:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 80076f4:	7bfb      	ldrb	r3, [r7, #15]
 80076f6:	2b12      	cmp	r3, #18
 80076f8:	d105      	bne.n	8007706 <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 80076fa:	7bfb      	ldrb	r3, [r7, #15]
 80076fc:	4619      	mov	r1, r3
 80076fe:	482e      	ldr	r0, [pc, #184]	; (80077b8 <ICM20602_Initialization+0xf4>)
 8007700:	f005 fc74 	bl	800cfec <iprintf>
 8007704:	e012      	b.n	800772c <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 8007706:	7bfb      	ldrb	r3, [r7, #15]
 8007708:	2b12      	cmp	r3, #18
 800770a:	d00f      	beq.n	800772c <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 800770c:	2075      	movs	r0, #117	; 0x75
 800770e:	f7ff ff69 	bl	80075e4 <ICM20602_Readbyte>
 8007712:	4603      	mov	r3, r0
 8007714:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8007716:	7bfb      	ldrb	r3, [r7, #15]
 8007718:	2b12      	cmp	r3, #18
 800771a:	d007      	beq.n	800772c <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 800771c:	7bfb      	ldrb	r3, [r7, #15]
 800771e:	2212      	movs	r2, #18
 8007720:	4619      	mov	r1, r3
 8007722:	4826      	ldr	r0, [pc, #152]	; (80077bc <ICM20602_Initialization+0xf8>)
 8007724:	f005 fc62 	bl	800cfec <iprintf>
			return 1; //ERROR
 8007728:	2301      	movs	r3, #1
 800772a:	e03f      	b.n	80077ac <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 800772c:	2180      	movs	r1, #128	; 0x80
 800772e:	206b      	movs	r0, #107	; 0x6b
 8007730:	f7ff ffa6 	bl	8007680 <ICM20602_Writebyte>
	HAL_Delay(50);
 8007734:	2032      	movs	r0, #50	; 0x32
 8007736:	f7f9 fc2b 	bl	8000f90 <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 800773a:	2101      	movs	r1, #1
 800773c:	206b      	movs	r0, #107	; 0x6b
 800773e:	f7ff ff9f 	bl	8007680 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 8007742:	2032      	movs	r0, #50	; 0x32
 8007744:	f7f9 fc24 	bl	8000f90 <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 8007748:	2138      	movs	r1, #56	; 0x38
 800774a:	206c      	movs	r0, #108	; 0x6c
 800774c:	f7ff ff98 	bl	8007680 <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 8007750:	2032      	movs	r0, #50	; 0x32
 8007752:	f7f9 fc1d 	bl	8000f90 <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 8007756:	2100      	movs	r1, #0
 8007758:	2019      	movs	r0, #25
 800775a:	f7ff ff91 	bl	8007680 <ICM20602_Writebyte>
	HAL_Delay(50);
 800775e:	2032      	movs	r0, #50	; 0x32
 8007760:	f7f9 fc16 	bl	8000f90 <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8007764:	2105      	movs	r1, #5
 8007766:	201a      	movs	r0, #26
 8007768:	f7ff ff8a 	bl	8007680 <ICM20602_Writebyte>
	HAL_Delay(50);
 800776c:	2032      	movs	r0, #50	; 0x32
 800776e:	f7f9 fc0f 	bl	8000f90 <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 8007772:	2118      	movs	r1, #24
 8007774:	201b      	movs	r0, #27
 8007776:	f7ff ff83 	bl	8007680 <ICM20602_Writebyte>
	HAL_Delay(50);
 800777a:	2032      	movs	r0, #50	; 0x32
 800777c:	f7f9 fc08 	bl	8000f90 <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 8007780:	2118      	movs	r1, #24
 8007782:	201c      	movs	r0, #28
 8007784:	f7ff ff7c 	bl	8007680 <ICM20602_Writebyte>
	HAL_Delay(50);
 8007788:	2032      	movs	r0, #50	; 0x32
 800778a:	f7f9 fc01 	bl	8000f90 <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 800778e:	2103      	movs	r1, #3
 8007790:	201d      	movs	r0, #29
 8007792:	f7ff ff75 	bl	8007680 <ICM20602_Writebyte>
	HAL_Delay(50);
 8007796:	2032      	movs	r0, #50	; 0x32
 8007798:	f7f9 fbfa 	bl	8000f90 <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 800779c:	2101      	movs	r1, #1
 800779e:	2038      	movs	r0, #56	; 0x38
 80077a0:	f7ff ff6e 	bl	8007680 <ICM20602_Writebyte>
	HAL_Delay(50);
 80077a4:	2032      	movs	r0, #50	; 0x32
 80077a6:	f7f9 fbf3 	bl	8000f90 <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3710      	adds	r7, #16
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	0800ffe4 	.word	0x0800ffe4
 80077b8:	0800fffc 	.word	0x0800fffc
 80077bc:	08010020 	.word	0x08010020

080077c0 <ICM20602_Get3AxisGyroRawData>:
	gyro[1] = ((data[10] << 8) | data[11]);
	gyro[2] = ((data[12] << 8) | data[13]);
}

void ICM20602_Get3AxisGyroRawData(short* gyro)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
	unsigned char data[6];
	ICM20602_Readbytes(GYRO_XOUT_H, 6, data);
 80077c8:	f107 0308 	add.w	r3, r7, #8
 80077cc:	461a      	mov	r2, r3
 80077ce:	2106      	movs	r1, #6
 80077d0:	2043      	movs	r0, #67	; 0x43
 80077d2:	f7ff ff27 	bl	8007624 <ICM20602_Readbytes>
	
	gyro[0] = ((data[0] << 8) | data[1]);
 80077d6:	7a3b      	ldrb	r3, [r7, #8]
 80077d8:	021b      	lsls	r3, r3, #8
 80077da:	b21a      	sxth	r2, r3
 80077dc:	7a7b      	ldrb	r3, [r7, #9]
 80077de:	b21b      	sxth	r3, r3
 80077e0:	4313      	orrs	r3, r2
 80077e2:	b21a      	sxth	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	801a      	strh	r2, [r3, #0]
	gyro[1] = ((data[2] << 8) | data[3]);
 80077e8:	7abb      	ldrb	r3, [r7, #10]
 80077ea:	021b      	lsls	r3, r3, #8
 80077ec:	b219      	sxth	r1, r3
 80077ee:	7afb      	ldrb	r3, [r7, #11]
 80077f0:	b21a      	sxth	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	3302      	adds	r3, #2
 80077f6:	430a      	orrs	r2, r1
 80077f8:	b212      	sxth	r2, r2
 80077fa:	801a      	strh	r2, [r3, #0]
	gyro[2] = ((data[4] << 8) | data[5]);
 80077fc:	7b3b      	ldrb	r3, [r7, #12]
 80077fe:	021b      	lsls	r3, r3, #8
 8007800:	b219      	sxth	r1, r3
 8007802:	7b7b      	ldrb	r3, [r7, #13]
 8007804:	b21a      	sxth	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	3304      	adds	r3, #4
 800780a:	430a      	orrs	r2, r1
 800780c:	b212      	sxth	r2, r2
 800780e:	801a      	strh	r2, [r3, #0]
}
 8007810:	bf00      	nop
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <ICM20602_DataReady>:
	accel[1] = ((data[2] << 8) | data[3]);
	accel[2] = ((data[4] << 8) | data[5]);
}

int ICM20602_DataReady(void)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(ICM20602_INT_PORT, ICM20602_INT_PIN);
 800781c:	2120      	movs	r1, #32
 800781e:	4803      	ldr	r0, [pc, #12]	; (800782c <ICM20602_DataReady+0x14>)
 8007820:	f7ff fddf 	bl	80073e2 <LL_GPIO_IsInputPinSet>
 8007824:	4603      	mov	r3, r0
}
 8007826:	4618      	mov	r0, r3
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	40020800 	.word	0x40020800

08007830 <LL_SPI_Enable>:
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	601a      	str	r2, [r3, #0]
}
 8007844:	bf00      	nop
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <LL_SPI_SetStandard>:
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	f023 0210 	bic.w	r2, r3, #16
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	431a      	orrs	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	605a      	str	r2, [r3, #4]
}
 800786a:	bf00      	nop
 800786c:	370c      	adds	r7, #12
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr

08007876 <LL_SPI_IsActiveFlag_RXNE>:
{
 8007876:	b480      	push	{r7}
 8007878:	b083      	sub	sp, #12
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	f003 0301 	and.w	r3, r3, #1
 8007886:	2b01      	cmp	r3, #1
 8007888:	d101      	bne.n	800788e <LL_SPI_IsActiveFlag_RXNE+0x18>
 800788a:	2301      	movs	r3, #1
 800788c:	e000      	b.n	8007890 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800788e:	2300      	movs	r3, #0
}
 8007890:	4618      	mov	r0, r3
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <LL_SPI_IsActiveFlag_TXE>:
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	f003 0302 	and.w	r3, r3, #2
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d101      	bne.n	80078b4 <LL_SPI_IsActiveFlag_TXE+0x18>
 80078b0:	2301      	movs	r3, #1
 80078b2:	e000      	b.n	80078b6 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <LL_SPI_ReceiveData8>:
{
 80078c2:	b480      	push	{r7}
 80078c4:	b083      	sub	sp, #12
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	b2db      	uxtb	r3, r3
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	370c      	adds	r7, #12
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <LL_SPI_TransmitData8>:
{
 80078dc:	b480      	push	{r7}
 80078de:	b085      	sub	sp, #20
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	460b      	mov	r3, r1
 80078e6:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	330c      	adds	r3, #12
 80078ec:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	78fa      	ldrb	r2, [r7, #3]
 80078f2:	701a      	strb	r2, [r3, #0]
}
 80078f4:	bf00      	nop
 80078f6:	3714      	adds	r7, #20
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <LL_GPIO_IsInputPinSet>:
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	691a      	ldr	r2, [r3, #16]
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	4013      	ands	r3, r2
 8007912:	683a      	ldr	r2, [r7, #0]
 8007914:	429a      	cmp	r2, r3
 8007916:	bf0c      	ite	eq
 8007918:	2301      	moveq	r3, #1
 800791a:	2300      	movne	r3, #0
 800791c:	b2db      	uxtb	r3, r3
}
 800791e:	4618      	mov	r0, r3
 8007920:	370c      	adds	r7, #12
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr

0800792a <LL_GPIO_SetOutputPin>:
{
 800792a:	b480      	push	{r7}
 800792c:	b083      	sub	sp, #12
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
 8007932:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	683a      	ldr	r2, [r7, #0]
 8007938:	619a      	str	r2, [r3, #24]
}
 800793a:	bf00      	nop
 800793c:	370c      	adds	r7, #12
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr

08007946 <LL_GPIO_ResetOutputPin>:
{
 8007946:	b480      	push	{r7}
 8007948:	b083      	sub	sp, #12
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
 800794e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	041a      	lsls	r2, r3, #16
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	619a      	str	r2, [r3, #24]
}
 8007958:	bf00      	nop
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <LL_AHB1_GRP1_EnableClock>:
{
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800796c:	4b08      	ldr	r3, [pc, #32]	; (8007990 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800796e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007970:	4907      	ldr	r1, [pc, #28]	; (8007990 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4313      	orrs	r3, r2
 8007976:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8007978:	4b05      	ldr	r3, [pc, #20]	; (8007990 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800797a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4013      	ands	r3, r2
 8007980:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007982:	68fb      	ldr	r3, [r7, #12]
}
 8007984:	bf00      	nop
 8007986:	3714      	adds	r7, #20
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr
 8007990:	40023800 	.word	0x40023800

08007994 <LL_APB1_GRP1_EnableClock>:
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800799c:	4b08      	ldr	r3, [pc, #32]	; (80079c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800799e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079a0:	4907      	ldr	r1, [pc, #28]	; (80079c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80079a8:	4b05      	ldr	r3, [pc, #20]	; (80079c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80079aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4013      	ands	r3, r2
 80079b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80079b2:	68fb      	ldr	r3, [r7, #12]
}
 80079b4:	bf00      	nop
 80079b6:	3714      	adds	r7, #20
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr
 80079c0:	40023800 	.word	0x40023800

080079c4 <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b090      	sub	sp, #64	; 0x40
 80079c8:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80079ca:	f107 0318 	add.w	r3, r7, #24
 80079ce:	2228      	movs	r2, #40	; 0x28
 80079d0:	2100      	movs	r1, #0
 80079d2:	4618      	mov	r0, r3
 80079d4:	f004 fe98 	bl	800c708 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079d8:	463b      	mov	r3, r7
 80079da:	2200      	movs	r2, #0
 80079dc:	601a      	str	r2, [r3, #0]
 80079de:	605a      	str	r2, [r3, #4]
 80079e0:	609a      	str	r2, [r3, #8]
 80079e2:	60da      	str	r2, [r3, #12]
 80079e4:	611a      	str	r2, [r3, #16]
 80079e6:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 80079e8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80079ec:	f7ff ffd2 	bl	8007994 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80079f0:	2002      	movs	r0, #2
 80079f2:	f7ff ffb7 	bl	8007964 <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 80079f6:	2338      	movs	r3, #56	; 0x38
 80079f8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80079fa:	2302      	movs	r3, #2
 80079fc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80079fe:	2303      	movs	r3, #3
 8007a00:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007a02:	2300      	movs	r3, #0
 8007a04:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007a06:	2300      	movs	r3, #0
 8007a08:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8007a0a:	2306      	movs	r3, #6
 8007a0c:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a0e:	463b      	mov	r3, r7
 8007a10:	4619      	mov	r1, r3
 8007a12:	4826      	ldr	r0, [pc, #152]	; (8007aac <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8007a14:	f7fd fb46 	bl	80050a4 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8007a1c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007a20:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8007a22:	2300      	movs	r3, #0
 8007a24:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8007a26:	2302      	movs	r3, #2
 8007a28:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8007a2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a32:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8007a34:	2308      	movs	r3, #8
 8007a36:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8007a40:	230a      	movs	r3, #10
 8007a42:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 8007a44:	f107 0318 	add.w	r3, r7, #24
 8007a48:	4619      	mov	r1, r3
 8007a4a:	4819      	ldr	r0, [pc, #100]	; (8007ab0 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8007a4c:	f7fd fcfb 	bl	8005446 <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8007a50:	2100      	movs	r1, #0
 8007a52:	4817      	ldr	r0, [pc, #92]	; (8007ab0 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8007a54:	f7ff fefc 	bl	8007850 <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 8007a58:	2140      	movs	r1, #64	; 0x40
 8007a5a:	4814      	ldr	r0, [pc, #80]	; (8007aac <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8007a5c:	f7ff ff73 	bl	8007946 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 8007a60:	2340      	movs	r3, #64	; 0x40
 8007a62:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007a64:	2301      	movs	r3, #1
 8007a66:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007a70:	2300      	movs	r3, #0
 8007a72:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 8007a74:	463b      	mov	r3, r7
 8007a76:	4619      	mov	r1, r3
 8007a78:	480c      	ldr	r0, [pc, #48]	; (8007aac <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8007a7a:	f7fd fb13 	bl	80050a4 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 8007a7e:	2380      	movs	r3, #128	; 0x80
 8007a80:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8007a82:	2300      	movs	r3, #0
 8007a84:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8007a86:	2301      	movs	r3, #1
 8007a88:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 8007a8a:	463b      	mov	r3, r7
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	4807      	ldr	r0, [pc, #28]	; (8007aac <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8007a90:	f7fd fb08 	bl	80050a4 <LL_GPIO_Init>
	
	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 8007a94:	4806      	ldr	r0, [pc, #24]	; (8007ab0 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8007a96:	f7ff fecb 	bl	8007830 <LL_SPI_Enable>
	
	CHIP_DESELECT(LPS22HH);
 8007a9a:	2140      	movs	r1, #64	; 0x40
 8007a9c:	4803      	ldr	r0, [pc, #12]	; (8007aac <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8007a9e:	f7ff ff44 	bl	800792a <LL_GPIO_SetOutputPin>
}
 8007aa2:	bf00      	nop
 8007aa4:	3740      	adds	r7, #64	; 0x40
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	40020400 	.word	0x40020400
 8007ab0:	40003c00 	.word	0x40003c00

08007ab4 <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	4603      	mov	r3, r0
 8007abc:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 8007abe:	bf00      	nop
 8007ac0:	480c      	ldr	r0, [pc, #48]	; (8007af4 <SPI3_SendByte+0x40>)
 8007ac2:	f7ff feeb 	bl	800789c <LL_SPI_IsActiveFlag_TXE>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d0f9      	beq.n	8007ac0 <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 8007acc:	79fb      	ldrb	r3, [r7, #7]
 8007ace:	4619      	mov	r1, r3
 8007ad0:	4808      	ldr	r0, [pc, #32]	; (8007af4 <SPI3_SendByte+0x40>)
 8007ad2:	f7ff ff03 	bl	80078dc <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 8007ad6:	bf00      	nop
 8007ad8:	4806      	ldr	r0, [pc, #24]	; (8007af4 <SPI3_SendByte+0x40>)
 8007ada:	f7ff fecc 	bl	8007876 <LL_SPI_IsActiveFlag_RXNE>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d0f9      	beq.n	8007ad8 <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 8007ae4:	4803      	ldr	r0, [pc, #12]	; (8007af4 <SPI3_SendByte+0x40>)
 8007ae6:	f7ff feec 	bl	80078c2 <LL_SPI_ReceiveData8>
 8007aea:	4603      	mov	r3, r0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3708      	adds	r7, #8
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	40003c00 	.word	0x40003c00

08007af8 <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	4603      	mov	r3, r0
 8007b00:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 8007b02:	2140      	movs	r1, #64	; 0x40
 8007b04:	480b      	ldr	r0, [pc, #44]	; (8007b34 <LPS22HH_Readbyte+0x3c>)
 8007b06:	f7ff ff1e 	bl	8007946 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8007b0a:	79fb      	ldrb	r3, [r7, #7]
 8007b0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7ff ffce 	bl	8007ab4 <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 8007b18:	2000      	movs	r0, #0
 8007b1a:	f7ff ffcb 	bl	8007ab4 <SPI3_SendByte>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 8007b22:	2140      	movs	r1, #64	; 0x40
 8007b24:	4803      	ldr	r0, [pc, #12]	; (8007b34 <LPS22HH_Readbyte+0x3c>)
 8007b26:	f7ff ff00 	bl	800792a <LL_GPIO_SetOutputPin>
	
	return val;
 8007b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	40020400 	.word	0x40020400

08007b38 <LPS22HH_Readbytes>:

void LPS22HH_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8007b38:	b590      	push	{r4, r7, lr}
 8007b3a:	b085      	sub	sp, #20
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	4603      	mov	r3, r0
 8007b40:	603a      	str	r2, [r7, #0]
 8007b42:	71fb      	strb	r3, [r7, #7]
 8007b44:	460b      	mov	r3, r1
 8007b46:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(LPS22HH);
 8007b4c:	2140      	movs	r1, #64	; 0x40
 8007b4e:	4810      	ldr	r0, [pc, #64]	; (8007b90 <LPS22HH_Readbytes+0x58>)
 8007b50:	f7ff fef9 	bl	8007946 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8007b54:	79fb      	ldrb	r3, [r7, #7]
 8007b56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f7ff ffa9 	bl	8007ab4 <SPI3_SendByte>
	while(i < len)
 8007b62:	e009      	b.n	8007b78 <LPS22HH_Readbytes+0x40>
	{
		data[i++] = SPI3_SendByte(0x00); //Send DUMMY
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	1c5a      	adds	r2, r3, #1
 8007b68:	60fa      	str	r2, [r7, #12]
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	18d4      	adds	r4, r2, r3
 8007b6e:	2000      	movs	r0, #0
 8007b70:	f7ff ffa0 	bl	8007ab4 <SPI3_SendByte>
 8007b74:	4603      	mov	r3, r0
 8007b76:	7023      	strb	r3, [r4, #0]
	while(i < len)
 8007b78:	79bb      	ldrb	r3, [r7, #6]
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d3f1      	bcc.n	8007b64 <LPS22HH_Readbytes+0x2c>
	}
	CHIP_DESELECT(LPS22HH);
 8007b80:	2140      	movs	r1, #64	; 0x40
 8007b82:	4803      	ldr	r0, [pc, #12]	; (8007b90 <LPS22HH_Readbytes+0x58>)
 8007b84:	f7ff fed1 	bl	800792a <LL_GPIO_SetOutputPin>
}
 8007b88:	bf00      	nop
 8007b8a:	3714      	adds	r7, #20
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd90      	pop	{r4, r7, pc}
 8007b90:	40020400 	.word	0x40020400

08007b94 <LPS22HH_Writebyte>:

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	460a      	mov	r2, r1
 8007b9e:	71fb      	strb	r3, [r7, #7]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 8007ba4:	2140      	movs	r1, #64	; 0x40
 8007ba6:	480b      	ldr	r0, [pc, #44]	; (8007bd4 <LPS22HH_Writebyte+0x40>)
 8007ba8:	f7ff fecd 	bl	8007946 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8007bac:	79fb      	ldrb	r3, [r7, #7]
 8007bae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f7ff ff7d 	bl	8007ab4 <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 8007bba:	79bb      	ldrb	r3, [r7, #6]
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f7ff ff79 	bl	8007ab4 <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 8007bc2:	2140      	movs	r1, #64	; 0x40
 8007bc4:	4803      	ldr	r0, [pc, #12]	; (8007bd4 <LPS22HH_Writebyte+0x40>)
 8007bc6:	f7ff feb0 	bl	800792a <LL_GPIO_SetOutputPin>
}
 8007bca:	bf00      	nop
 8007bcc:	3708      	adds	r7, #8
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	40020400 	.word	0x40020400

08007bd8 <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 8007bde:	2300      	movs	r3, #0
 8007be0:	71fb      	strb	r3, [r7, #7]
	
	LPS22HH_GPIO_SPI_Initialization();
 8007be2:	f7ff feef 	bl	80079c4 <LPS22HH_GPIO_SPI_Initialization>
	
	printf("Checking LPS22HH...");
 8007be6:	4841      	ldr	r0, [pc, #260]	; (8007cec <LPS22HH_Initialization+0x114>)
 8007be8:	f005 fa00 	bl	800cfec <iprintf>
	
	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F); 
 8007bec:	200f      	movs	r0, #15
 8007bee:	f7ff ff83 	bl	8007af8 <LPS22HH_Readbyte>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 8007bf6:	79fb      	ldrb	r3, [r7, #7]
 8007bf8:	2bb3      	cmp	r3, #179	; 0xb3
 8007bfa:	d105      	bne.n	8007c08 <LPS22HH_Initialization+0x30>
	{
		printf("\nLPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 8007bfc:	79fb      	ldrb	r3, [r7, #7]
 8007bfe:	4619      	mov	r1, r3
 8007c00:	483b      	ldr	r0, [pc, #236]	; (8007cf0 <LPS22HH_Initialization+0x118>)
 8007c02:	f005 f9f3 	bl	800cfec <iprintf>
 8007c06:	e012      	b.n	8007c2e <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 8007c08:	79fb      	ldrb	r3, [r7, #7]
 8007c0a:	2bb3      	cmp	r3, #179	; 0xb3
 8007c0c:	d00f      	beq.n	8007c2e <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 8007c0e:	200f      	movs	r0, #15
 8007c10:	f7ff ff72 	bl	8007af8 <LPS22HH_Readbyte>
 8007c14:	4603      	mov	r3, r0
 8007c16:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 8007c18:	79fb      	ldrb	r3, [r7, #7]
 8007c1a:	2bb3      	cmp	r3, #179	; 0xb3
 8007c1c:	d007      	beq.n	8007c2e <LPS22HH_Initialization+0x56>
			printf( "nLPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 8007c1e:	79fb      	ldrb	r3, [r7, #7]
 8007c20:	22b3      	movs	r2, #179	; 0xb3
 8007c22:	4619      	mov	r1, r3
 8007c24:	4833      	ldr	r0, [pc, #204]	; (8007cf4 <LPS22HH_Initialization+0x11c>)
 8007c26:	f005 f9e1 	bl	800cfec <iprintf>
			return 1; //ERROR
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e059      	b.n	8007ce2 <LPS22HH_Initialization+0x10a>
		}
	}
	
	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 8007c2e:	2104      	movs	r1, #4
 8007c30:	2011      	movs	r0, #17
 8007c32:	f7ff ffaf 	bl	8007b94 <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 8007c36:	2011      	movs	r0, #17
 8007c38:	f7ff ff5e 	bl	8007af8 <LPS22HH_Readbyte>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	f003 0304 	and.w	r3, r3, #4
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d1f7      	bne.n	8007c36 <LPS22HH_Initialization+0x5e>
	
	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8007c46:	2010      	movs	r0, #16
 8007c48:	f7ff ff56 	bl	8007af8 <LPS22HH_Readbyte>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 8007c50:	79bb      	ldrb	r3, [r7, #6]
 8007c52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c56:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8007c58:	79bb      	ldrb	r3, [r7, #6]
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	2010      	movs	r0, #16
 8007c5e:	f7ff ff99 	bl	8007b94 <LPS22HH_Writebyte>
	temp_reg = 0;
 8007c62:	2300      	movs	r3, #0
 8007c64:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8007c66:	2010      	movs	r0, #16
 8007c68:	f7ff ff46 	bl	8007af8 <LPS22HH_Readbyte>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);
	
	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8007c70:	2010      	movs	r0, #16
 8007c72:	f7ff ff41 	bl	8007af8 <LPS22HH_Readbyte>
 8007c76:	4603      	mov	r3, r0
 8007c78:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 8007c7a:	79bb      	ldrb	r3, [r7, #6]
 8007c7c:	f043 030c 	orr.w	r3, r3, #12
 8007c80:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8007c82:	79bb      	ldrb	r3, [r7, #6]
 8007c84:	4619      	mov	r1, r3
 8007c86:	2010      	movs	r0, #16
 8007c88:	f7ff ff84 	bl	8007b94 <LPS22HH_Writebyte>
	
	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8007c8c:	2010      	movs	r0, #16
 8007c8e:	f7ff ff33 	bl	8007af8 <LPS22HH_Readbyte>
 8007c92:	4603      	mov	r3, r0
 8007c94:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8007c96:	79bb      	ldrb	r3, [r7, #6]
 8007c98:	f043 0302 	orr.w	r3, r3, #2
 8007c9c:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8007c9e:	79bb      	ldrb	r3, [r7, #6]
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	2010      	movs	r0, #16
 8007ca4:	f7ff ff76 	bl	8007b94 <LPS22HH_Writebyte>
	
	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 8007ca8:	2011      	movs	r0, #17
 8007caa:	f7ff ff25 	bl	8007af8 <LPS22HH_Readbyte>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8007cb2:	79bb      	ldrb	r3, [r7, #6]
 8007cb4:	f043 0302 	orr.w	r3, r3, #2
 8007cb8:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 8007cba:	79bb      	ldrb	r3, [r7, #6]
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	2011      	movs	r0, #17
 8007cc0:	f7ff ff68 	bl	8007b94 <LPS22HH_Writebyte>
	
	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 8007cc4:	2012      	movs	r0, #18
 8007cc6:	f7ff ff17 	bl	8007af8 <LPS22HH_Readbyte>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 8007cce:	79bb      	ldrb	r3, [r7, #6]
 8007cd0:	f043 0304 	orr.w	r3, r3, #4
 8007cd4:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 8007cd6:	79bb      	ldrb	r3, [r7, #6]
 8007cd8:	4619      	mov	r1, r3
 8007cda:	2012      	movs	r0, #18
 8007cdc:	f7ff ff5a 	bl	8007b94 <LPS22HH_Writebyte>
	
	return 0; //OK
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3708      	adds	r7, #8
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	0801004c 	.word	0x0801004c
 8007cf0:	08010060 	.word	0x08010060
 8007cf4:	08010084 	.word	0x08010084

08007cf8 <LPS22HH_DataReady>:


int LPS22HH_DataReady(void)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(LPS22HH_INT_PORT, LPS22HH_INT_PIN);
 8007cfc:	2180      	movs	r1, #128	; 0x80
 8007cfe:	4803      	ldr	r0, [pc, #12]	; (8007d0c <LPS22HH_DataReady+0x14>)
 8007d00:	f7ff fdfe 	bl	8007900 <LL_GPIO_IsInputPinSet>
 8007d04:	4603      	mov	r3, r0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	40020400 	.word	0x40020400

08007d10 <LPS22HH_GetPressure>:

void LPS22HH_GetPressure(int32_t* pressure)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(PRESSURE_OUT_XL, 3, (unsigned char*)pressure);
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	2103      	movs	r1, #3
 8007d1c:	2028      	movs	r0, #40	; 0x28
 8007d1e:	f7ff ff0b 	bl	8007b38 <LPS22HH_Readbytes>
}
 8007d22:	bf00      	nop
 8007d24:	3708      	adds	r7, #8
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <LPS22HH_GetTemperature>:

void LPS22HH_GetTemperature(int16_t* temperature)
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b082      	sub	sp, #8
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(TEMP_OUT_L, 2, (unsigned char*)temperature);
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	2102      	movs	r1, #2
 8007d36:	202b      	movs	r0, #43	; 0x2b
 8007d38:	f7ff fefe 	bl	8007b38 <LPS22HH_Readbytes>
}
 8007d3c:	bf00      	nop
 8007d3e:	3708      	adds	r7, #8
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <getAltitude2>:
{
	return (powf((SEA_PRESSURE / pressure), 0.1902226f) - 1.0) * 44307.69396f; //145366.45f * 0.3048f = 44307.69396f;
}

float getAltitude2(float pressure, float temperature) //Get Altitude with temperature correction.
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	ed87 0a01 	vstr	s0, [r7, #4]
 8007d4e:	edc7 0a00 	vstr	s1, [r7]
	return ((powf((SEA_PRESSURE / pressure), 0.1902226f) - 1.0f) * (temperature + 273.15f)) / 0.0065f;
 8007d52:	eddf 6a12 	vldr	s13, [pc, #72]	; 8007d9c <getAltitude2+0x58>
 8007d56:	edd7 7a01 	vldr	s15, [r7, #4]
 8007d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d5e:	eddf 0a10 	vldr	s1, [pc, #64]	; 8007da0 <getAltitude2+0x5c>
 8007d62:	eeb0 0a47 	vmov.f32	s0, s14
 8007d66:	f007 faa7 	bl	800f2b8 <powf>
 8007d6a:	eef0 7a40 	vmov.f32	s15, s0
 8007d6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d72:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007d76:	edd7 7a00 	vldr	s15, [r7]
 8007d7a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8007da4 <getAltitude2+0x60>
 8007d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d86:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8007da8 <getAltitude2+0x64>
 8007d8a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007d8e:	eef0 7a66 	vmov.f32	s15, s13
}
 8007d92:	eeb0 0a67 	vmov.f32	s0, s15
 8007d96:	3708      	adds	r7, #8
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	447d5000 	.word	0x447d5000
 8007da0:	3e42c9b7 	.word	0x3e42c9b7
 8007da4:	43889333 	.word	0x43889333
 8007da8:	3bd4fdf4 	.word	0x3bd4fdf4

08007dac <__NVIC_GetPriorityGrouping>:
{
 8007dac:	b480      	push	{r7}
 8007dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007db0:	4b04      	ldr	r3, [pc, #16]	; (8007dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	0a1b      	lsrs	r3, r3, #8
 8007db6:	f003 0307 	and.w	r3, r3, #7
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr
 8007dc4:	e000ed00 	.word	0xe000ed00

08007dc8 <__NVIC_EnableIRQ>:
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	4603      	mov	r3, r0
 8007dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	db0b      	blt.n	8007df2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007dda:	79fb      	ldrb	r3, [r7, #7]
 8007ddc:	f003 021f 	and.w	r2, r3, #31
 8007de0:	4907      	ldr	r1, [pc, #28]	; (8007e00 <__NVIC_EnableIRQ+0x38>)
 8007de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007de6:	095b      	lsrs	r3, r3, #5
 8007de8:	2001      	movs	r0, #1
 8007dea:	fa00 f202 	lsl.w	r2, r0, r2
 8007dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007df2:	bf00      	nop
 8007df4:	370c      	adds	r7, #12
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop
 8007e00:	e000e100 	.word	0xe000e100

08007e04 <__NVIC_SetPriority>:
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	6039      	str	r1, [r7, #0]
 8007e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	db0a      	blt.n	8007e2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	b2da      	uxtb	r2, r3
 8007e1c:	490c      	ldr	r1, [pc, #48]	; (8007e50 <__NVIC_SetPriority+0x4c>)
 8007e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e22:	0112      	lsls	r2, r2, #4
 8007e24:	b2d2      	uxtb	r2, r2
 8007e26:	440b      	add	r3, r1
 8007e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007e2c:	e00a      	b.n	8007e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	b2da      	uxtb	r2, r3
 8007e32:	4908      	ldr	r1, [pc, #32]	; (8007e54 <__NVIC_SetPriority+0x50>)
 8007e34:	79fb      	ldrb	r3, [r7, #7]
 8007e36:	f003 030f 	and.w	r3, r3, #15
 8007e3a:	3b04      	subs	r3, #4
 8007e3c:	0112      	lsls	r2, r2, #4
 8007e3e:	b2d2      	uxtb	r2, r2
 8007e40:	440b      	add	r3, r1
 8007e42:	761a      	strb	r2, [r3, #24]
}
 8007e44:	bf00      	nop
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr
 8007e50:	e000e100 	.word	0xe000e100
 8007e54:	e000ed00 	.word	0xe000ed00

08007e58 <NVIC_EncodePriority>:
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b089      	sub	sp, #36	; 0x24
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f003 0307 	and.w	r3, r3, #7
 8007e6a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	f1c3 0307 	rsb	r3, r3, #7
 8007e72:	2b04      	cmp	r3, #4
 8007e74:	bf28      	it	cs
 8007e76:	2304      	movcs	r3, #4
 8007e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	3304      	adds	r3, #4
 8007e7e:	2b06      	cmp	r3, #6
 8007e80:	d902      	bls.n	8007e88 <NVIC_EncodePriority+0x30>
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	3b03      	subs	r3, #3
 8007e86:	e000      	b.n	8007e8a <NVIC_EncodePriority+0x32>
 8007e88:	2300      	movs	r3, #0
 8007e8a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	fa02 f303 	lsl.w	r3, r2, r3
 8007e96:	43da      	mvns	r2, r3
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	401a      	ands	r2, r3
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8007eaa:	43d9      	mvns	r1, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007eb0:	4313      	orrs	r3, r2
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3724      	adds	r7, #36	; 0x24
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr

08007ebe <LL_USART_Enable>:
{
 8007ebe:	b480      	push	{r7}
 8007ec0:	b083      	sub	sp, #12
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	60da      	str	r2, [r3, #12]
}
 8007ed2:	bf00      	nop
 8007ed4:	370c      	adds	r7, #12
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr

08007ede <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8007ede:	b480      	push	{r7}
 8007ee0:	b083      	sub	sp, #12
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	695b      	ldr	r3, [r3, #20]
 8007ef6:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	615a      	str	r2, [r3, #20]
}
 8007efe:	bf00      	nop
 8007f00:	370c      	adds	r7, #12
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr

08007f0a <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8007f0a:	b480      	push	{r7}
 8007f0c:	b083      	sub	sp, #12
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f1a:	2b80      	cmp	r3, #128	; 0x80
 8007f1c:	bf0c      	ite	eq
 8007f1e:	2301      	moveq	r3, #1
 8007f20:	2300      	movne	r3, #0
 8007f22:	b2db      	uxtb	r3, r3
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	460b      	mov	r3, r1
 8007f3a:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8007f3c:	78fa      	ldrb	r2, [r7, #3]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	605a      	str	r2, [r3, #4]
}
 8007f42:	bf00      	nop
 8007f44:	370c      	adds	r7, #12
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
	...

08007f50 <LL_AHB1_GRP1_EnableClock>:
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8007f58:	4b08      	ldr	r3, [pc, #32]	; (8007f7c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007f5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f5c:	4907      	ldr	r1, [pc, #28]	; (8007f7c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8007f64:	4b05      	ldr	r3, [pc, #20]	; (8007f7c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007f66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
}
 8007f70:	bf00      	nop
 8007f72:	3714      	adds	r7, #20
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr
 8007f7c:	40023800 	.word	0x40023800

08007f80 <LL_APB1_GRP1_EnableClock>:
{
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8007f88:	4b08      	ldr	r3, [pc, #32]	; (8007fac <LL_APB1_GRP1_EnableClock+0x2c>)
 8007f8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f8c:	4907      	ldr	r1, [pc, #28]	; (8007fac <LL_APB1_GRP1_EnableClock+0x2c>)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8007f94:	4b05      	ldr	r3, [pc, #20]	; (8007fac <LL_APB1_GRP1_EnableClock+0x2c>)
 8007f96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4013      	ands	r3, r2
 8007f9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
}
 8007fa0:	bf00      	nop
 8007fa2:	3714      	adds	r7, #20
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr
 8007fac:	40023800 	.word	0x40023800

08007fb0 <M8N_TransmitData>:
	0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x31,
	0xBF
};

void M8N_TransmitData(unsigned char* data, unsigned char len)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	460b      	mov	r3, r1
 8007fba:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<len;i++)
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	60fb      	str	r3, [r7, #12]
 8007fc0:	e011      	b.n	8007fe6 <M8N_TransmitData+0x36>
	{
		while(!LL_USART_IsActiveFlag_TXE(UART4));
 8007fc2:	bf00      	nop
 8007fc4:	480c      	ldr	r0, [pc, #48]	; (8007ff8 <M8N_TransmitData+0x48>)
 8007fc6:	f7ff ffa0 	bl	8007f0a <LL_USART_IsActiveFlag_TXE>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d0f9      	beq.n	8007fc4 <M8N_TransmitData+0x14>
		LL_USART_TransmitData8(UART4, *(data+i));
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	4619      	mov	r1, r3
 8007fda:	4807      	ldr	r0, [pc, #28]	; (8007ff8 <M8N_TransmitData+0x48>)
 8007fdc:	f7ff ffa8 	bl	8007f30 <LL_USART_TransmitData8>
	for(int i=0;i<len;i++)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	60fb      	str	r3, [r7, #12]
 8007fe6:	78fb      	ldrb	r3, [r7, #3]
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	dbe9      	blt.n	8007fc2 <M8N_TransmitData+0x12>
	}
}
 8007fee:	bf00      	nop
 8007ff0:	bf00      	nop
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	40004c00 	.word	0x40004c00

08007ffc <M8N_UART4_Initialization>:

void M8N_UART4_Initialization(void)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b08e      	sub	sp, #56	; 0x38
 8008000:	af00      	add	r7, sp, #0
	LL_USART_InitTypeDef USART_InitStruct = {0};
 8008002:	f107 031c 	add.w	r3, r7, #28
 8008006:	2200      	movs	r2, #0
 8008008:	601a      	str	r2, [r3, #0]
 800800a:	605a      	str	r2, [r3, #4]
 800800c:	609a      	str	r2, [r3, #8]
 800800e:	60da      	str	r2, [r3, #12]
 8008010:	611a      	str	r2, [r3, #16]
 8008012:	615a      	str	r2, [r3, #20]
 8008014:	619a      	str	r2, [r3, #24]

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008016:	1d3b      	adds	r3, r7, #4
 8008018:	2200      	movs	r2, #0
 800801a:	601a      	str	r2, [r3, #0]
 800801c:	605a      	str	r2, [r3, #4]
 800801e:	609a      	str	r2, [r3, #8]
 8008020:	60da      	str	r2, [r3, #12]
 8008022:	611a      	str	r2, [r3, #16]
 8008024:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8008026:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800802a:	f7ff ffa9 	bl	8007f80 <LL_APB1_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800802e:	2004      	movs	r0, #4
 8008030:	f7ff ff8e 	bl	8007f50 <LL_AHB1_GRP1_EnableClock>
	/**UART4 GPIO Configuration
	PC10   ------> UART4_TX
	PC11   ------> UART4_RX
	*/
	GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 8008034:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008038:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800803a:	2302      	movs	r3, #2
 800803c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800803e:	2303      	movs	r3, #3
 8008040:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008042:	2300      	movs	r3, #0
 8008044:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8008046:	2301      	movs	r3, #1
 8008048:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800804a:	2308      	movs	r3, #8
 800804c:	61bb      	str	r3, [r7, #24]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800804e:	1d3b      	adds	r3, r7, #4
 8008050:	4619      	mov	r1, r3
 8008052:	4819      	ldr	r0, [pc, #100]	; (80080b8 <M8N_UART4_Initialization+0xbc>)
 8008054:	f7fd f826 	bl	80050a4 <LL_GPIO_Init>

	/* UART4 interrupt Init */
	NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8008058:	f7ff fea8 	bl	8007dac <__NVIC_GetPriorityGrouping>
 800805c:	4603      	mov	r3, r0
 800805e:	2200      	movs	r2, #0
 8008060:	2100      	movs	r1, #0
 8008062:	4618      	mov	r0, r3
 8008064:	f7ff fef8 	bl	8007e58 <NVIC_EncodePriority>
 8008068:	4603      	mov	r3, r0
 800806a:	4619      	mov	r1, r3
 800806c:	2034      	movs	r0, #52	; 0x34
 800806e:	f7ff fec9 	bl	8007e04 <__NVIC_SetPriority>
	NVIC_EnableIRQ(UART4_IRQn);
 8008072:	2034      	movs	r0, #52	; 0x34
 8008074:	f7ff fea8 	bl	8007dc8 <__NVIC_EnableIRQ>

	USART_InitStruct.BaudRate = 9600;
 8008078:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800807c:	61fb      	str	r3, [r7, #28]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800807e:	2300      	movs	r3, #0
 8008080:	623b      	str	r3, [r7, #32]
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8008082:	2300      	movs	r3, #0
 8008084:	627b      	str	r3, [r7, #36]	; 0x24
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8008086:	2300      	movs	r3, #0
 8008088:	62bb      	str	r3, [r7, #40]	; 0x28
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800808a:	230c      	movs	r3, #12
 800808c:	62fb      	str	r3, [r7, #44]	; 0x2c
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800808e:	2300      	movs	r3, #0
 8008090:	633b      	str	r3, [r7, #48]	; 0x30
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8008092:	2300      	movs	r3, #0
 8008094:	637b      	str	r3, [r7, #52]	; 0x34
	LL_USART_Init(UART4, &USART_InitStruct);
 8008096:	f107 031c 	add.w	r3, r7, #28
 800809a:	4619      	mov	r1, r3
 800809c:	4807      	ldr	r0, [pc, #28]	; (80080bc <M8N_UART4_Initialization+0xc0>)
 800809e:	f7fd ff7d 	bl	8005f9c <LL_USART_Init>
	LL_USART_ConfigAsyncMode(UART4);
 80080a2:	4806      	ldr	r0, [pc, #24]	; (80080bc <M8N_UART4_Initialization+0xc0>)
 80080a4:	f7ff ff1b 	bl	8007ede <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(UART4);
 80080a8:	4804      	ldr	r0, [pc, #16]	; (80080bc <M8N_UART4_Initialization+0xc0>)
 80080aa:	f7ff ff08 	bl	8007ebe <LL_USART_Enable>
}
 80080ae:	bf00      	nop
 80080b0:	3738      	adds	r7, #56	; 0x38
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	40020800 	.word	0x40020800
 80080bc:	40004c00 	.word	0x40004c00

080080c0 <M8N_Initialization>:

void M8N_Initialization(void)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	af00      	add	r7, sp, #0
	M8N_UART4_Initialization();
 80080c4:	f7ff ff9a 	bl	8007ffc <M8N_UART4_Initialization>

	M8N_TransmitData(&UBX_CFG_PRT[0], sizeof(UBX_CFG_PRT));
 80080c8:	211c      	movs	r1, #28
 80080ca:	480d      	ldr	r0, [pc, #52]	; (8008100 <M8N_Initialization+0x40>)
 80080cc:	f7ff ff70 	bl	8007fb0 <M8N_TransmitData>
	HAL_Delay(100);
 80080d0:	2064      	movs	r0, #100	; 0x64
 80080d2:	f7f8 ff5d 	bl	8000f90 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_MSG[0], sizeof(UBX_CFG_MSG));
 80080d6:	2110      	movs	r1, #16
 80080d8:	480a      	ldr	r0, [pc, #40]	; (8008104 <M8N_Initialization+0x44>)
 80080da:	f7ff ff69 	bl	8007fb0 <M8N_TransmitData>
	HAL_Delay(100);
 80080de:	2064      	movs	r0, #100	; 0x64
 80080e0:	f7f8 ff56 	bl	8000f90 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_RATE[0], sizeof(UBX_CFG_RATE));
 80080e4:	210e      	movs	r1, #14
 80080e6:	4808      	ldr	r0, [pc, #32]	; (8008108 <M8N_Initialization+0x48>)
 80080e8:	f7ff ff62 	bl	8007fb0 <M8N_TransmitData>
	HAL_Delay(100);
 80080ec:	2064      	movs	r0, #100	; 0x64
 80080ee:	f7f8 ff4f 	bl	8000f90 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_CFG[0], sizeof(UBX_CFG_CFG));
 80080f2:	2115      	movs	r1, #21
 80080f4:	4805      	ldr	r0, [pc, #20]	; (800810c <M8N_Initialization+0x4c>)
 80080f6:	f7ff ff5b 	bl	8007fb0 <M8N_TransmitData>
}
 80080fa:	bf00      	nop
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	080102e8 	.word	0x080102e8
 8008104:	08010304 	.word	0x08010304
 8008108:	08010314 	.word	0x08010314
 800810c:	08010324 	.word	0x08010324

08008110 <M8N_UBX_CHKSUM_Check>:

unsigned char M8N_UBX_CHKSUM_Check(unsigned char* data, unsigned char len)
{
 8008110:	b480      	push	{r7}
 8008112:	b085      	sub	sp, #20
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	460b      	mov	r3, r1
 800811a:	70fb      	strb	r3, [r7, #3]
	unsigned char CK_A = 0, CK_B = 0;
 800811c:	2300      	movs	r3, #0
 800811e:	73fb      	strb	r3, [r7, #15]
 8008120:	2300      	movs	r3, #0
 8008122:	73bb      	strb	r3, [r7, #14]

	for(int i=2;i<len-2;i++)
 8008124:	2302      	movs	r3, #2
 8008126:	60bb      	str	r3, [r7, #8]
 8008128:	e00d      	b.n	8008146 <M8N_UBX_CHKSUM_Check+0x36>
	{
		CK_A = CK_A + data[i];
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	4413      	add	r3, r2
 8008130:	781a      	ldrb	r2, [r3, #0]
 8008132:	7bfb      	ldrb	r3, [r7, #15]
 8008134:	4413      	add	r3, r2
 8008136:	73fb      	strb	r3, [r7, #15]
		CK_B = CK_B + CK_A;
 8008138:	7bba      	ldrb	r2, [r7, #14]
 800813a:	7bfb      	ldrb	r3, [r7, #15]
 800813c:	4413      	add	r3, r2
 800813e:	73bb      	strb	r3, [r7, #14]
	for(int i=2;i<len-2;i++)
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	3301      	adds	r3, #1
 8008144:	60bb      	str	r3, [r7, #8]
 8008146:	78fb      	ldrb	r3, [r7, #3]
 8008148:	3b02      	subs	r3, #2
 800814a:	68ba      	ldr	r2, [r7, #8]
 800814c:	429a      	cmp	r2, r3
 800814e:	dbec      	blt.n	800812a <M8N_UBX_CHKSUM_Check+0x1a>
	}

	return ((CK_A == data[len-2]) && (CK_B == data[len-1]));
 8008150:	78fb      	ldrb	r3, [r7, #3]
 8008152:	3b02      	subs	r3, #2
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	4413      	add	r3, r2
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	7bfa      	ldrb	r2, [r7, #15]
 800815c:	429a      	cmp	r2, r3
 800815e:	d109      	bne.n	8008174 <M8N_UBX_CHKSUM_Check+0x64>
 8008160:	78fb      	ldrb	r3, [r7, #3]
 8008162:	3b01      	subs	r3, #1
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	4413      	add	r3, r2
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	7bba      	ldrb	r2, [r7, #14]
 800816c:	429a      	cmp	r2, r3
 800816e:	d101      	bne.n	8008174 <M8N_UBX_CHKSUM_Check+0x64>
 8008170:	2301      	movs	r3, #1
 8008172:	e000      	b.n	8008176 <M8N_UBX_CHKSUM_Check+0x66>
 8008174:	2300      	movs	r3, #0
 8008176:	b2db      	uxtb	r3, r3
}
 8008178:	4618      	mov	r0, r3
 800817a:	3714      	adds	r7, #20
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <M8N_UBX_NAV_POSLLH_Parsing>:

void M8N_UBX_NAV_POSLLH_Parsing(unsigned char* data, M8N_UBX_NAV_POSLLH* posllh)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
	posllh->CLASS = data[2];
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	789a      	ldrb	r2, [r3, #2]
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	701a      	strb	r2, [r3, #0]
	posllh->ID = data[3];
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	78da      	ldrb	r2, [r3, #3]
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	705a      	strb	r2, [r3, #1]
	posllh->length = data[4] | data[5]<<8;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	3304      	adds	r3, #4
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	b21a      	sxth	r2, r3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	3305      	adds	r3, #5
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	021b      	lsls	r3, r3, #8
 80081ae:	b21b      	sxth	r3, r3
 80081b0:	4313      	orrs	r3, r2
 80081b2:	b21b      	sxth	r3, r3
 80081b4:	b29a      	uxth	r2, r3
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	805a      	strh	r2, [r3, #2]

	posllh->iTOW = data[6] | data[7]<<8 | data[8]<<16 | data[9]<<24;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	3306      	adds	r3, #6
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	461a      	mov	r2, r3
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	3307      	adds	r3, #7
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	021b      	lsls	r3, r3, #8
 80081ca:	431a      	orrs	r2, r3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	3308      	adds	r3, #8
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	041b      	lsls	r3, r3, #16
 80081d4:	431a      	orrs	r2, r3
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	3309      	adds	r3, #9
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	061b      	lsls	r3, r3, #24
 80081de:	4313      	orrs	r3, r2
 80081e0:	461a      	mov	r2, r3
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	605a      	str	r2, [r3, #4]
	posllh->lon = data[10] | data[11]<<8 | data[12]<<16 | data[13]<<24;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	330a      	adds	r3, #10
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	461a      	mov	r2, r3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	330b      	adds	r3, #11
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	021b      	lsls	r3, r3, #8
 80081f6:	431a      	orrs	r2, r3
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	330c      	adds	r3, #12
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	041b      	lsls	r3, r3, #16
 8008200:	431a      	orrs	r2, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	330d      	adds	r3, #13
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	061b      	lsls	r3, r3, #24
 800820a:	431a      	orrs	r2, r3
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	609a      	str	r2, [r3, #8]
	posllh->lat = data[14] | data[15]<<8 | data[16]<<16 | data[17]<<24;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	330e      	adds	r3, #14
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	461a      	mov	r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	330f      	adds	r3, #15
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	021b      	lsls	r3, r3, #8
 8008220:	431a      	orrs	r2, r3
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	3310      	adds	r3, #16
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	041b      	lsls	r3, r3, #16
 800822a:	431a      	orrs	r2, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	3311      	adds	r3, #17
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	061b      	lsls	r3, r3, #24
 8008234:	431a      	orrs	r2, r3
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	60da      	str	r2, [r3, #12]
	posllh->height = data[18] | data[19]<<8 | data[20]<<16 | data[21]<<24;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	3312      	adds	r3, #18
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	461a      	mov	r2, r3
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	3313      	adds	r3, #19
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	021b      	lsls	r3, r3, #8
 800824a:	431a      	orrs	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	3314      	adds	r3, #20
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	041b      	lsls	r3, r3, #16
 8008254:	431a      	orrs	r2, r3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	3315      	adds	r3, #21
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	061b      	lsls	r3, r3, #24
 800825e:	431a      	orrs	r2, r3
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	611a      	str	r2, [r3, #16]
	posllh->hMSL = data[22] | data[23]<<8 | data[24]<<16 | data[25]<<24;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	3316      	adds	r3, #22
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	461a      	mov	r2, r3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	3317      	adds	r3, #23
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	021b      	lsls	r3, r3, #8
 8008274:	431a      	orrs	r2, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	3318      	adds	r3, #24
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	041b      	lsls	r3, r3, #16
 800827e:	431a      	orrs	r2, r3
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	3319      	adds	r3, #25
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	061b      	lsls	r3, r3, #24
 8008288:	431a      	orrs	r2, r3
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	615a      	str	r2, [r3, #20]
	posllh->hAcc = data[26] | data[27]<<8 | data[28]<<16 | data[29]<<24;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	331a      	adds	r3, #26
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	461a      	mov	r2, r3
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	331b      	adds	r3, #27
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	021b      	lsls	r3, r3, #8
 800829e:	431a      	orrs	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	331c      	adds	r3, #28
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	041b      	lsls	r3, r3, #16
 80082a8:	431a      	orrs	r2, r3
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	331d      	adds	r3, #29
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	061b      	lsls	r3, r3, #24
 80082b2:	4313      	orrs	r3, r2
 80082b4:	461a      	mov	r2, r3
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	619a      	str	r2, [r3, #24]
	posllh->vAcc = data[30] | data[31]<<8 | data[32]<<16 | data[33]<<24;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	331e      	adds	r3, #30
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	461a      	mov	r2, r3
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	331f      	adds	r3, #31
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	021b      	lsls	r3, r3, #8
 80082ca:	431a      	orrs	r2, r3
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	3320      	adds	r3, #32
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	041b      	lsls	r3, r3, #16
 80082d4:	431a      	orrs	r2, r3
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	3321      	adds	r3, #33	; 0x21
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	061b      	lsls	r3, r3, #24
 80082de:	4313      	orrs	r3, r2
 80082e0:	461a      	mov	r2, r3
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	61da      	str	r2, [r3, #28]

//	posllh->lon_f64 = posllh->lon / 10000000.;
//	posllh->lat_f64 = posllh->lat / 10000000.;
}
 80082e6:	bf00      	nop
 80082e8:	370c      	adds	r7, #12
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr
	...

080082f4 <Double_Roll_Pitch_PID_Calculation>:
#define DT 0.001f
#define OUTER_DERIV_FILT_ENABLE 1
#define INNER_DERIV_FILT_ENABLE 1

void Double_Roll_Pitch_PID_Calculation(PIDDouble* axis, float set_point_angle, float angle/*BNO080 Rotation Angle*/, float rate/*ICM-20602 Angular Rate*/)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b085      	sub	sp, #20
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8008300:	edc7 0a01 	vstr	s1, [r7, #4]
 8008304:	ed87 1a00 	vstr	s2, [r7]
	/*********** Double PID Outer Begin (Roll and Pitch Angular Position Control) *************/
	axis->out.reference = set_point_angle;	//Set point of outer PID control
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	68ba      	ldr	r2, [r7, #8]
 800830c:	645a      	str	r2, [r3, #68]	; 0x44
	axis->out.meas_value = angle;			//BNO080 rotation angle
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	649a      	str	r2, [r3, #72]	; 0x48

	axis->out.error = axis->out.reference - axis->out.meas_value;	//Define error of outer loop
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8008320:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	axis->out.p_result = axis->out.error * axis->out.kp;			//Calculate P result of outer loop
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8008336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

	axis->out.error_sum = axis->out.error_sum + axis->out.error * DT;	//Define summation of outer loop
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800834c:	eddf 6a7f 	vldr	s13, [pc, #508]	; 800854c <Double_Roll_Pitch_PID_Calculation+0x258>
 8008350:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008354:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
#define OUT_ERR_SUM_MAX 500
#define OUT_I_ERR_MIN -OUT_ERR_SUM_MAX
	if(axis->out.error_sum > OUT_ERR_SUM_MAX) axis->out.error_sum = OUT_ERR_SUM_MAX;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008364:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8008550 <Double_Roll_Pitch_PID_Calculation+0x25c>
 8008368:	eef4 7ac7 	vcmpe.f32	s15, s14
 800836c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008370:	dd03      	ble.n	800837a <Double_Roll_Pitch_PID_Calculation+0x86>
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	4a77      	ldr	r2, [pc, #476]	; (8008554 <Double_Roll_Pitch_PID_Calculation+0x260>)
 8008376:	655a      	str	r2, [r3, #84]	; 0x54
 8008378:	e00c      	b.n	8008394 <Double_Roll_Pitch_PID_Calculation+0xa0>
	else if(axis->out.error_sum < OUT_I_ERR_MIN) axis->out.error_sum = OUT_I_ERR_MIN;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008380:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8008558 <Double_Roll_Pitch_PID_Calculation+0x264>
 8008384:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800838c:	d502      	bpl.n	8008394 <Double_Roll_Pitch_PID_Calculation+0xa0>
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	4a72      	ldr	r2, [pc, #456]	; (800855c <Double_Roll_Pitch_PID_Calculation+0x268>)
 8008392:	655a      	str	r2, [r3, #84]	; 0x54
	axis->out.i_result = axis->out.error_sum * axis->out.ki;			//Calculate I result of outer loop
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80083a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	axis->out.error_deriv = -rate;										//Define derivative of outer loop (rate = ICM-20602 Angular Rate)
 80083aa:	edd7 7a00 	vldr	s15, [r7]
 80083ae:	eef1 7a67 	vneg.f32	s15, s15
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

#if !OUTER_DERIV_FILT_ENABLE
	axis->out.d_result = axis->out.error_deriv * axis->out.kd;			//Calculate D result of outer loop
#else
	axis->out.error_deriv_filt = axis->out.error_deriv_filt * 0.4f + axis->out.error_deriv * 0.6f;	//filter for derivative
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80083be:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8008560 <Double_Roll_Pitch_PID_Calculation+0x26c>
 80083c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80083cc:	eddf 6a65 	vldr	s13, [pc, #404]	; 8008564 <Double_Roll_Pitch_PID_Calculation+0x270>
 80083d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80083d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	axis->out.d_result = axis->out.error_deriv_filt * axis->out.kd;									//Calculate D result of inner loop
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80083ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
#endif

	axis->out.pid_result = axis->out.p_result + axis->out.i_result + axis->out.d_result;  //Calculate PID result of outer loop
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8008400:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800840a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	/****************************************************************************************/
	
	/************ Double PID Inner Begin (Roll and Pitch Angular Rate Control) **************/
	axis->in.reference = axis->out.pid_result;	//Set point of inner PID control is the PID result of outer loop (for double PID control)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	60da      	str	r2, [r3, #12]
	axis->in.meas_value = rate;					//ICM-20602 angular rate
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	683a      	ldr	r2, [r7, #0]
 8008420:	611a      	str	r2, [r3, #16]

	axis->in.error = axis->in.reference - axis->in.meas_value;	//Define error of inner loop
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	ed93 7a03 	vldr	s14, [r3, #12]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	edd3 7a04 	vldr	s15, [r3, #16]
 800842e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	edc3 7a06 	vstr	s15, [r3, #24]
	axis->in.p_result = axis->in.error * axis->in.kp;			//Calculate P result of inner loop
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	ed93 7a06 	vldr	s14, [r3, #24]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	edd3 7a00 	vldr	s15, [r3]
 8008444:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	axis->in.error_sum = axis->in.error_sum + axis->in.error * DT;	//Define summation of inner loop
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	ed93 7a07 	vldr	s14, [r3, #28]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	edd3 7a06 	vldr	s15, [r3, #24]
 800845a:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800854c <Double_Roll_Pitch_PID_Calculation+0x258>
 800845e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008462:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	edc3 7a07 	vstr	s15, [r3, #28]
#define IN_ERR_SUM_MAX 500
#define IN_I_ERR_MIN -IN_ERR_SUM_MAX
	if(axis->out.error_sum > IN_ERR_SUM_MAX) axis->out.error_sum = IN_ERR_SUM_MAX;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008472:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8008550 <Double_Roll_Pitch_PID_Calculation+0x25c>
 8008476:	eef4 7ac7 	vcmpe.f32	s15, s14
 800847a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800847e:	dd03      	ble.n	8008488 <Double_Roll_Pitch_PID_Calculation+0x194>
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	4a34      	ldr	r2, [pc, #208]	; (8008554 <Double_Roll_Pitch_PID_Calculation+0x260>)
 8008484:	655a      	str	r2, [r3, #84]	; 0x54
 8008486:	e00c      	b.n	80084a2 <Double_Roll_Pitch_PID_Calculation+0x1ae>
	else if(axis->out.error_sum < IN_I_ERR_MIN) axis->out.error_sum = IN_I_ERR_MIN;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800848e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8008558 <Double_Roll_Pitch_PID_Calculation+0x264>
 8008492:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800849a:	d502      	bpl.n	80084a2 <Double_Roll_Pitch_PID_Calculation+0x1ae>
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	4a2f      	ldr	r2, [pc, #188]	; (800855c <Double_Roll_Pitch_PID_Calculation+0x268>)
 80084a0:	655a      	str	r2, [r3, #84]	; 0x54
	axis->in.i_result = axis->in.error_sum * axis->in.ki;							//Calculate I result of inner loop
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	ed93 7a07 	vldr	s14, [r3, #28]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80084ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	axis->in.error_deriv = -(axis->in.meas_value - axis->in.meas_value_prev) / DT;	//Define derivative of inner loop
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	ed93 7a04 	vldr	s14, [r3, #16]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	edd3 7a05 	vldr	s15, [r3, #20]
 80084c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084c8:	eeb1 7a67 	vneg.f32	s14, s15
 80084cc:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800854c <Double_Roll_Pitch_PID_Calculation+0x258>
 80084d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	edc3 7a08 	vstr	s15, [r3, #32]
	axis->in.meas_value_prev = axis->in.meas_value;									//Refresh value_prev to the latest value
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	691a      	ldr	r2, [r3, #16]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	615a      	str	r2, [r3, #20]

#if !INNER_DERIV_FILT_ENABLE
	axis->in.d_result = axis->in.error_deriv * axis->in.kd;				//Calculate D result of inner loop
#else
	axis->in.error_deriv_filt = axis->in.error_deriv_filt * 0.5f + axis->in.error_deriv * 0.5f;	//filter for derivative
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80084e8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80084ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	edd3 7a08 	vldr	s15, [r3, #32]
 80084f6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80084fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80084fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	axis->in.d_result = axis->in.error_deriv_filt * axis->in.kd;								//Calculate D result of inner loop
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	edd3 7a02 	vldr	s15, [r3, #8]
 8008514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
#endif
	
	axis->in.pid_result = axis->in.p_result + axis->in.i_result + axis->in.d_result; //Calculate PID result of inner loop
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800852a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008534:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	/****************************************************************************************/
}
 800853e:	bf00      	nop
 8008540:	3714      	adds	r7, #20
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop
 800854c:	3a83126f 	.word	0x3a83126f
 8008550:	43fa0000 	.word	0x43fa0000
 8008554:	43fa0000 	.word	0x43fa0000
 8008558:	c3fa0000 	.word	0xc3fa0000
 800855c:	c3fa0000 	.word	0xc3fa0000
 8008560:	3ecccccd 	.word	0x3ecccccd
 8008564:	3f19999a 	.word	0x3f19999a

08008568 <Single_Yaw_Heading_PID_Calculation>:

void Single_Yaw_Heading_PID_Calculation(PIDSingle* axis, float set_point_angle, float angle/*BNO080 Rotation Angle*/, float rate/*ICM-20602 Angular Rate*/)
{
 8008568:	b480      	push	{r7}
 800856a:	b085      	sub	sp, #20
 800856c:	af00      	add	r7, sp, #0
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	ed87 0a02 	vstr	s0, [r7, #8]
 8008574:	edc7 0a01 	vstr	s1, [r7, #4]
 8008578:	ed87 1a00 	vstr	s2, [r7]
	/*********** Single PID Begin (Yaw Angular Position) *************/
	axis->reference = set_point_angle;	//Set point of yaw heading @ yaw stick is center.
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	68ba      	ldr	r2, [r7, #8]
 8008580:	60da      	str	r2, [r3, #12]
	axis->meas_value = angle;			//Current BNO080_Yaw angle @ yaw stick is center.
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	611a      	str	r2, [r3, #16]

	axis->error = axis->reference - axis->meas_value;	//Define error of yaw angle control
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	ed93 7a03 	vldr	s14, [r3, #12]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	edd3 7a04 	vldr	s15, [r3, #16]
 8008594:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	edc3 7a06 	vstr	s15, [r3, #24]

	if(axis->error > 180.f) axis->error -= 360.f;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	edd3 7a06 	vldr	s15, [r3, #24]
 80085a4:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800868c <Single_Yaw_Heading_PID_Calculation+0x124>
 80085a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80085ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085b0:	dd0a      	ble.n	80085c8 <Single_Yaw_Heading_PID_Calculation+0x60>
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	edd3 7a06 	vldr	s15, [r3, #24]
 80085b8:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8008690 <Single_Yaw_Heading_PID_Calculation+0x128>
 80085bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	edc3 7a06 	vstr	s15, [r3, #24]
 80085c6:	e013      	b.n	80085f0 <Single_Yaw_Heading_PID_Calculation+0x88>
	else if(axis->error < -180.f) axis->error += 360.f;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	edd3 7a06 	vldr	s15, [r3, #24]
 80085ce:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8008694 <Single_Yaw_Heading_PID_Calculation+0x12c>
 80085d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80085d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085da:	d509      	bpl.n	80085f0 <Single_Yaw_Heading_PID_Calculation+0x88>
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	edd3 7a06 	vldr	s15, [r3, #24]
 80085e2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8008690 <Single_Yaw_Heading_PID_Calculation+0x128>
 80085e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	edc3 7a06 	vstr	s15, [r3, #24]
	
	axis->p_result = axis->error * axis->kp;			//Calculate P result of yaw angle control
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	ed93 7a06 	vldr	s14, [r3, #24]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	edd3 7a00 	vldr	s15, [r3]
 80085fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	axis->error_sum = axis->error_sum + axis->error * DT;	//Define summation of yaw angle control
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	ed93 7a07 	vldr	s14, [r3, #28]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	edd3 7a06 	vldr	s15, [r3, #24]
 8008612:	eddf 6a21 	vldr	s13, [pc, #132]	; 8008698 <Single_Yaw_Heading_PID_Calculation+0x130>
 8008616:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800861a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	edc3 7a07 	vstr	s15, [r3, #28]
	axis->i_result = axis->error_sum * axis->ki;			//Calculate I result of yaw angle control
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	ed93 7a07 	vldr	s14, [r3, #28]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	edd3 7a01 	vldr	s15, [r3, #4]
 8008630:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	axis->error_deriv = -rate;						//Define differentiation of yaw angle control
 800863a:	edd7 7a00 	vldr	s15, [r7]
 800863e:	eef1 7a67 	vneg.f32	s15, s15
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	edc3 7a08 	vstr	s15, [r3, #32]
	axis->d_result = axis->error_deriv * axis->kd;	//Calculate D result of yaw angle control
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	ed93 7a08 	vldr	s14, [r3, #32]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	edd3 7a02 	vldr	s15, [r3, #8]
 8008654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	
	axis->pid_result = axis->p_result + axis->i_result + axis->d_result; //Calculate PID result of yaw angle control
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800866a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008674:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	/***************************************************************/
}
 800867e:	bf00      	nop
 8008680:	3714      	adds	r7, #20
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr
 800868a:	bf00      	nop
 800868c:	43340000 	.word	0x43340000
 8008690:	43b40000 	.word	0x43b40000
 8008694:	c3340000 	.word	0xc3340000
 8008698:	3a83126f 	.word	0x3a83126f

0800869c <Single_Yaw_Rate_PID_Calculation>:

void Single_Yaw_Rate_PID_Calculation(PIDSingle* axis, float set_point_rate, float rate/*ICM-20602 Angular Rate*/)
{
 800869c:	b480      	push	{r7}
 800869e:	b085      	sub	sp, #20
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	ed87 0a02 	vstr	s0, [r7, #8]
 80086a8:	edc7 0a01 	vstr	s1, [r7, #4]
	/*********** Single PID Begin (Yaw Angular Rate Control) *************/
	axis->reference = set_point_rate;	//Set point of yaw heading @ yaw stick is not center.
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	68ba      	ldr	r2, [r7, #8]
 80086b0:	60da      	str	r2, [r3, #12]
	axis->meas_value = rate;			//Current ICM20602.gyro_z @ yaw stick is not center.
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	611a      	str	r2, [r3, #16]

	axis->error = axis->reference - axis->meas_value;	//Define error of yaw rate control
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	ed93 7a03 	vldr	s14, [r3, #12]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	edd3 7a04 	vldr	s15, [r3, #16]
 80086c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	edc3 7a06 	vstr	s15, [r3, #24]
	axis->p_result = axis->error * axis->kp;			//Calculate P result of yaw rate control
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	ed93 7a06 	vldr	s14, [r3, #24]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	edd3 7a00 	vldr	s15, [r3]
 80086da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	axis->error_sum = axis->error_sum + axis->error * DT;	//Define summation of yaw rate control
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	ed93 7a07 	vldr	s14, [r3, #28]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	edd3 7a06 	vldr	s15, [r3, #24]
 80086f0:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008784 <Single_Yaw_Rate_PID_Calculation+0xe8>
 80086f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80086f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	edc3 7a07 	vstr	s15, [r3, #28]
	axis->i_result = axis->error_sum * axis->ki;			//Calculate I result of yaw rate control
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	ed93 7a07 	vldr	s14, [r3, #28]
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	edd3 7a01 	vldr	s15, [r3, #4]
 800870e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	axis->error_deriv = -(axis->meas_value - axis->meas_value_prev) / DT;	//Define differentiation of yaw rate control
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	ed93 7a04 	vldr	s14, [r3, #16]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	edd3 7a05 	vldr	s15, [r3, #20]
 8008724:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008728:	eeb1 7a67 	vneg.f32	s14, s15
 800872c:	eddf 6a15 	vldr	s13, [pc, #84]	; 8008784 <Single_Yaw_Rate_PID_Calculation+0xe8>
 8008730:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	edc3 7a08 	vstr	s15, [r3, #32]
	axis->meas_value_prev = axis->meas_value;								//Refresh value_prev to the latest value
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	691a      	ldr	r2, [r3, #16]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	615a      	str	r2, [r3, #20]
	axis->d_result = axis->error_deriv * axis->kd;							//Calculate D result of yaw rate control
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	ed93 7a08 	vldr	s14, [r3, #32]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	edd3 7a02 	vldr	s15, [r3, #8]
 800874e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	axis->pid_result = axis->p_result + axis->i_result + axis->d_result; //Calculate PID result of yaw control
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8008764:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800876e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	/*******************************************************************/
}
 8008778:	bf00      	nop
 800877a:	3714      	adds	r7, #20
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr
 8008784:	3a83126f 	.word	0x3a83126f

08008788 <Reset_PID_Integrator>:

void Reset_PID_Integrator(PIDSingle* axis)
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
	axis->error_sum = 0;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f04f 0200 	mov.w	r2, #0
 8008796:	61da      	str	r2, [r3, #28]
}
 8008798:	bf00      	nop
 800879a:	370c      	adds	r7, #12
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <Reset_All_PID_Integrator>:

void Reset_All_PID_Integrator(void)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	af00      	add	r7, sp, #0
	Reset_PID_Integrator(&roll.in);
 80087a8:	4809      	ldr	r0, [pc, #36]	; (80087d0 <Reset_All_PID_Integrator+0x2c>)
 80087aa:	f7ff ffed 	bl	8008788 <Reset_PID_Integrator>
	Reset_PID_Integrator(&roll.out);
 80087ae:	4809      	ldr	r0, [pc, #36]	; (80087d4 <Reset_All_PID_Integrator+0x30>)
 80087b0:	f7ff ffea 	bl	8008788 <Reset_PID_Integrator>
	Reset_PID_Integrator(&pitch.in);
 80087b4:	4808      	ldr	r0, [pc, #32]	; (80087d8 <Reset_All_PID_Integrator+0x34>)
 80087b6:	f7ff ffe7 	bl	8008788 <Reset_PID_Integrator>
	Reset_PID_Integrator(&pitch.out);
 80087ba:	4808      	ldr	r0, [pc, #32]	; (80087dc <Reset_All_PID_Integrator+0x38>)
 80087bc:	f7ff ffe4 	bl	8008788 <Reset_PID_Integrator>
	Reset_PID_Integrator(&yaw_heading);
 80087c0:	4807      	ldr	r0, [pc, #28]	; (80087e0 <Reset_All_PID_Integrator+0x3c>)
 80087c2:	f7ff ffe1 	bl	8008788 <Reset_PID_Integrator>
	Reset_PID_Integrator(&yaw_rate);
 80087c6:	4807      	ldr	r0, [pc, #28]	; (80087e4 <Reset_All_PID_Integrator+0x40>)
 80087c8:	f7ff ffde 	bl	8008788 <Reset_PID_Integrator>
}
 80087cc:	bf00      	nop
 80087ce:	bd80      	pop	{r7, pc}
 80087d0:	20000350 	.word	0x20000350
 80087d4:	20000388 	.word	0x20000388
 80087d8:	200003c0 	.word	0x200003c0
 80087dc:	200003f8 	.word	0x200003f8
 80087e0:	20000430 	.word	0x20000430
 80087e4:	20000468 	.word	0x20000468

080087e8 <Quaternion_Update>:
float BNO080_Roll;
float BNO080_Pitch;
float BNO080_Yaw;

void Quaternion_Update(float* q)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b088      	sub	sp, #32
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
	float q1, q2, q3, q4;
	float norm;

	norm = invSqrt(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);    // normalize quaternion
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	ed93 7a00 	vldr	s14, [r3]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	edd3 7a00 	vldr	s15, [r3]
 80087fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	3304      	adds	r3, #4
 8008804:	edd3 6a00 	vldr	s13, [r3]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	3304      	adds	r3, #4
 800880c:	edd3 7a00 	vldr	s15, [r3]
 8008810:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008814:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	3308      	adds	r3, #8
 800881c:	edd3 6a00 	vldr	s13, [r3]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	3308      	adds	r3, #8
 8008824:	edd3 7a00 	vldr	s15, [r3]
 8008828:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800882c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	330c      	adds	r3, #12
 8008834:	edd3 6a00 	vldr	s13, [r3]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	330c      	adds	r3, #12
 800883c:	edd3 7a00 	vldr	s15, [r3]
 8008840:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008844:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008848:	eeb0 0a67 	vmov.f32	s0, s15
 800884c:	f000 f90e 	bl	8008a6c <invSqrt>
 8008850:	ed87 0a07 	vstr	s0, [r7, #28]
	
	q1 = q[0] * norm; //x
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	edd3 7a00 	vldr	s15, [r3]
 800885a:	ed97 7a07 	vldr	s14, [r7, #28]
 800885e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008862:	edc7 7a06 	vstr	s15, [r7, #24]
	q2 = q[1] * norm; //y
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	3304      	adds	r3, #4
 800886a:	edd3 7a00 	vldr	s15, [r3]
 800886e:	ed97 7a07 	vldr	s14, [r7, #28]
 8008872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008876:	edc7 7a05 	vstr	s15, [r7, #20]
	q3 = q[2] * norm; //z
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	3308      	adds	r3, #8
 800887e:	edd3 7a00 	vldr	s15, [r3]
 8008882:	ed97 7a07 	vldr	s14, [r7, #28]
 8008886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800888a:	edc7 7a04 	vstr	s15, [r7, #16]
	q4 = q[3] * norm; //w
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	330c      	adds	r3, #12
 8008892:	edd3 7a00 	vldr	s15, [r3]
 8008896:	ed97 7a07 	vldr	s14, [r7, #28]
 800889a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800889e:	edc7 7a03 	vstr	s15, [r7, #12]

	BNO080_Pitch = atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 80088a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80088a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80088aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80088ae:	edd7 6a06 	vldr	s13, [r7, #24]
 80088b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80088b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80088ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80088be:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80088c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80088c6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80088ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80088ce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80088d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80088d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80088da:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80088de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80088e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80088e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80088ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80088ee:	eef0 0a67 	vmov.f32	s1, s15
 80088f2:	eeb0 0a66 	vmov.f32	s0, s13
 80088f6:	f006 fcdd 	bl	800f2b4 <atan2f>
 80088fa:	eef0 7a40 	vmov.f32	s15, s0
 80088fe:	4b55      	ldr	r3, [pc, #340]	; (8008a54 <Quaternion_Update+0x26c>)
 8008900:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  = -asinf(2.0f * (q2*q4 - q1*q3));
 8008904:	ed97 7a05 	vldr	s14, [r7, #20]
 8008908:	edd7 7a03 	vldr	s15, [r7, #12]
 800890c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008910:	edd7 6a06 	vldr	s13, [r7, #24]
 8008914:	edd7 7a04 	vldr	s15, [r7, #16]
 8008918:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800891c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008920:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008924:	eeb0 0a67 	vmov.f32	s0, s15
 8008928:	f006 fc98 	bl	800f25c <asinf>
 800892c:	eef0 7a40 	vmov.f32	s15, s0
 8008930:	eef1 7a67 	vneg.f32	s15, s15
 8008934:	4b48      	ldr	r3, [pc, #288]	; (8008a58 <Quaternion_Update+0x270>)
 8008936:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   = atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 800893a:	ed97 7a06 	vldr	s14, [r7, #24]
 800893e:	edd7 7a05 	vldr	s15, [r7, #20]
 8008942:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008946:	edd7 6a04 	vldr	s13, [r7, #16]
 800894a:	edd7 7a03 	vldr	s15, [r7, #12]
 800894e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008952:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008956:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800895a:	edd7 7a06 	vldr	s15, [r7, #24]
 800895e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8008962:	edd7 7a05 	vldr	s15, [r7, #20]
 8008966:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800896a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800896e:	edd7 7a04 	vldr	s15, [r7, #16]
 8008972:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008976:	ee37 7a67 	vsub.f32	s14, s14, s15
 800897a:	edd7 7a03 	vldr	s15, [r7, #12]
 800897e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008982:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008986:	eef0 0a67 	vmov.f32	s1, s15
 800898a:	eeb0 0a66 	vmov.f32	s0, s13
 800898e:	f006 fc91 	bl	800f2b4 <atan2f>
 8008992:	eef0 7a40 	vmov.f32	s15, s0
 8008996:	4b31      	ldr	r3, [pc, #196]	; (8008a5c <Quaternion_Update+0x274>)
 8008998:	edc3 7a00 	vstr	s15, [r3]

	BNO080_Pitch *= _180_DIV_PI;
 800899c:	4b2d      	ldr	r3, [pc, #180]	; (8008a54 <Quaternion_Update+0x26c>)
 800899e:	edd3 7a00 	vldr	s15, [r3]
 80089a2:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8008a60 <Quaternion_Update+0x278>
 80089a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80089aa:	4b2a      	ldr	r3, [pc, #168]	; (8008a54 <Quaternion_Update+0x26c>)
 80089ac:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  *= _180_DIV_PI;
 80089b0:	4b29      	ldr	r3, [pc, #164]	; (8008a58 <Quaternion_Update+0x270>)
 80089b2:	edd3 7a00 	vldr	s15, [r3]
 80089b6:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8008a60 <Quaternion_Update+0x278>
 80089ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80089be:	4b26      	ldr	r3, [pc, #152]	; (8008a58 <Quaternion_Update+0x270>)
 80089c0:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   *= _180_DIV_PI;
 80089c4:	4b25      	ldr	r3, [pc, #148]	; (8008a5c <Quaternion_Update+0x274>)
 80089c6:	edd3 7a00 	vldr	s15, [r3]
 80089ca:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8008a60 <Quaternion_Update+0x278>
 80089ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80089d2:	4b22      	ldr	r3, [pc, #136]	; (8008a5c <Quaternion_Update+0x274>)
 80089d4:	edc3 7a00 	vstr	s15, [r3]
	
	if(BNO080_Yaw>=0)
 80089d8:	4b20      	ldr	r3, [pc, #128]	; (8008a5c <Quaternion_Update+0x274>)
 80089da:	edd3 7a00 	vldr	s15, [r3]
 80089de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80089e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089e6:	db0a      	blt.n	80089fe <Quaternion_Update+0x216>
		BNO080_Yaw = 360.f - BNO080_Yaw;
 80089e8:	4b1c      	ldr	r3, [pc, #112]	; (8008a5c <Quaternion_Update+0x274>)
 80089ea:	edd3 7a00 	vldr	s15, [r3]
 80089ee:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8008a64 <Quaternion_Update+0x27c>
 80089f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80089f6:	4b19      	ldr	r3, [pc, #100]	; (8008a5c <Quaternion_Update+0x274>)
 80089f8:	edc3 7a00 	vstr	s15, [r3]
 80089fc:	e007      	b.n	8008a0e <Quaternion_Update+0x226>
	else	
		BNO080_Yaw = -BNO080_Yaw;
 80089fe:	4b17      	ldr	r3, [pc, #92]	; (8008a5c <Quaternion_Update+0x274>)
 8008a00:	edd3 7a00 	vldr	s15, [r3]
 8008a04:	eef1 7a67 	vneg.f32	s15, s15
 8008a08:	4b14      	ldr	r3, [pc, #80]	; (8008a5c <Quaternion_Update+0x274>)
 8008a0a:	edc3 7a00 	vstr	s15, [r3]
	
	
	if(BNO080_Pitch>=0)
 8008a0e:	4b11      	ldr	r3, [pc, #68]	; (8008a54 <Quaternion_Update+0x26c>)
 8008a10:	edd3 7a00 	vldr	s15, [r3]
 8008a14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a1c:	db0a      	blt.n	8008a34 <Quaternion_Update+0x24c>
		BNO080_Pitch = 180.f - BNO080_Pitch;
 8008a1e:	4b0d      	ldr	r3, [pc, #52]	; (8008a54 <Quaternion_Update+0x26c>)
 8008a20:	edd3 7a00 	vldr	s15, [r3]
 8008a24:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008a68 <Quaternion_Update+0x280>
 8008a28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a2c:	4b09      	ldr	r3, [pc, #36]	; (8008a54 <Quaternion_Update+0x26c>)
 8008a2e:	edc3 7a00 	vstr	s15, [r3]
	else
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
}
 8008a32:	e00b      	b.n	8008a4c <Quaternion_Update+0x264>
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
 8008a34:	4b07      	ldr	r3, [pc, #28]	; (8008a54 <Quaternion_Update+0x26c>)
 8008a36:	edd3 7a00 	vldr	s15, [r3]
 8008a3a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8008a68 <Quaternion_Update+0x280>
 8008a3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008a42:	eef1 7a67 	vneg.f32	s15, s15
 8008a46:	4b03      	ldr	r3, [pc, #12]	; (8008a54 <Quaternion_Update+0x26c>)
 8008a48:	edc3 7a00 	vstr	s15, [r3]
}
 8008a4c:	bf00      	nop
 8008a4e:	3720      	adds	r7, #32
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}
 8008a54:	200004a4 	.word	0x200004a4
 8008a58:	200004a0 	.word	0x200004a0
 8008a5c:	200004a8 	.word	0x200004a8
 8008a60:	42652ee1 	.word	0x42652ee1
 8008a64:	43b40000 	.word	0x43b40000
 8008a68:	43340000 	.word	0x43340000

08008a6c <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b087      	sub	sp, #28
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8008a76:	edd7 7a01 	vldr	s15, [r7, #4]
 8008a7a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008a7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008a82:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8008a8a:	f107 0310 	add.w	r3, r7, #16
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	105a      	asrs	r2, r3, #1
 8008a96:	4b12      	ldr	r3, [pc, #72]	; (8008ae0 <invSqrt+0x74>)
 8008a98:	1a9b      	subs	r3, r3, r2
 8008a9a:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8008a9c:	f107 030c 	add.w	r3, r7, #12
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8008aa4:	ed97 7a04 	vldr	s14, [r7, #16]
 8008aa8:	edd7 7a05 	vldr	s15, [r7, #20]
 8008aac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008ab0:	edd7 7a04 	vldr	s15, [r7, #16]
 8008ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ab8:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8008abc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008ac0:	edd7 7a04 	vldr	s15, [r7, #16]
 8008ac4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ac8:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	ee07 3a90 	vmov	s15, r3
}
 8008ad2:	eeb0 0a67 	vmov.f32	s0, s15
 8008ad6:	371c      	adds	r7, #28
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr
 8008ae0:	5f3759df 	.word	0x5f3759df

08008ae4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8008aea:	463b      	mov	r3, r7
 8008aec:	2200      	movs	r2, #0
 8008aee:	601a      	str	r2, [r3, #0]
 8008af0:	605a      	str	r2, [r3, #4]
 8008af2:	609a      	str	r2, [r3, #8]
 8008af4:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8008af6:	4b21      	ldr	r3, [pc, #132]	; (8008b7c <MX_ADC1_Init+0x98>)
 8008af8:	4a21      	ldr	r2, [pc, #132]	; (8008b80 <MX_ADC1_Init+0x9c>)
 8008afa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8008afc:	4b1f      	ldr	r3, [pc, #124]	; (8008b7c <MX_ADC1_Init+0x98>)
 8008afe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008b02:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008b04:	4b1d      	ldr	r3, [pc, #116]	; (8008b7c <MX_ADC1_Init+0x98>)
 8008b06:	2200      	movs	r2, #0
 8008b08:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8008b0a:	4b1c      	ldr	r3, [pc, #112]	; (8008b7c <MX_ADC1_Init+0x98>)
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8008b10:	4b1a      	ldr	r3, [pc, #104]	; (8008b7c <MX_ADC1_Init+0x98>)
 8008b12:	2201      	movs	r2, #1
 8008b14:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008b16:	4b19      	ldr	r3, [pc, #100]	; (8008b7c <MX_ADC1_Init+0x98>)
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008b1e:	4b17      	ldr	r3, [pc, #92]	; (8008b7c <MX_ADC1_Init+0x98>)
 8008b20:	2200      	movs	r2, #0
 8008b22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008b24:	4b15      	ldr	r3, [pc, #84]	; (8008b7c <MX_ADC1_Init+0x98>)
 8008b26:	4a17      	ldr	r2, [pc, #92]	; (8008b84 <MX_ADC1_Init+0xa0>)
 8008b28:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008b2a:	4b14      	ldr	r3, [pc, #80]	; (8008b7c <MX_ADC1_Init+0x98>)
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8008b30:	4b12      	ldr	r3, [pc, #72]	; (8008b7c <MX_ADC1_Init+0x98>)
 8008b32:	2201      	movs	r2, #1
 8008b34:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8008b36:	4b11      	ldr	r3, [pc, #68]	; (8008b7c <MX_ADC1_Init+0x98>)
 8008b38:	2201      	movs	r2, #1
 8008b3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008b3e:	4b0f      	ldr	r3, [pc, #60]	; (8008b7c <MX_ADC1_Init+0x98>)
 8008b40:	2201      	movs	r2, #1
 8008b42:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008b44:	480d      	ldr	r0, [pc, #52]	; (8008b7c <MX_ADC1_Init+0x98>)
 8008b46:	f7f8 fa47 	bl	8000fd8 <HAL_ADC_Init>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d001      	beq.n	8008b54 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8008b50:	f002 fba5 	bl	800b29e <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8008b54:	2308      	movs	r3, #8
 8008b56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8008b5c:	2307      	movs	r3, #7
 8008b5e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008b60:	463b      	mov	r3, r7
 8008b62:	4619      	mov	r1, r3
 8008b64:	4805      	ldr	r0, [pc, #20]	; (8008b7c <MX_ADC1_Init+0x98>)
 8008b66:	f7f8 fb8b 	bl	8001280 <HAL_ADC_ConfigChannel>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d001      	beq.n	8008b74 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8008b70:	f002 fb95 	bl	800b29e <Error_Handler>
  }

}
 8008b74:	bf00      	nop
 8008b76:	3710      	adds	r7, #16
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}
 8008b7c:	200004ac 	.word	0x200004ac
 8008b80:	40012000 	.word	0x40012000
 8008b84:	0f000001 	.word	0x0f000001

08008b88 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b08a      	sub	sp, #40	; 0x28
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b90:	f107 0314 	add.w	r3, r7, #20
 8008b94:	2200      	movs	r2, #0
 8008b96:	601a      	str	r2, [r3, #0]
 8008b98:	605a      	str	r2, [r3, #4]
 8008b9a:	609a      	str	r2, [r3, #8]
 8008b9c:	60da      	str	r2, [r3, #12]
 8008b9e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a2e      	ldr	r2, [pc, #184]	; (8008c60 <HAL_ADC_MspInit+0xd8>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d156      	bne.n	8008c58 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8008baa:	2300      	movs	r3, #0
 8008bac:	613b      	str	r3, [r7, #16]
 8008bae:	4b2d      	ldr	r3, [pc, #180]	; (8008c64 <HAL_ADC_MspInit+0xdc>)
 8008bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bb2:	4a2c      	ldr	r2, [pc, #176]	; (8008c64 <HAL_ADC_MspInit+0xdc>)
 8008bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8008bba:	4b2a      	ldr	r3, [pc, #168]	; (8008c64 <HAL_ADC_MspInit+0xdc>)
 8008bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bc2:	613b      	str	r3, [r7, #16]
 8008bc4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	60fb      	str	r3, [r7, #12]
 8008bca:	4b26      	ldr	r3, [pc, #152]	; (8008c64 <HAL_ADC_MspInit+0xdc>)
 8008bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bce:	4a25      	ldr	r2, [pc, #148]	; (8008c64 <HAL_ADC_MspInit+0xdc>)
 8008bd0:	f043 0302 	orr.w	r3, r3, #2
 8008bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8008bd6:	4b23      	ldr	r3, [pc, #140]	; (8008c64 <HAL_ADC_MspInit+0xdc>)
 8008bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bda:	f003 0302 	and.w	r3, r3, #2
 8008bde:	60fb      	str	r3, [r7, #12]
 8008be0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008be2:	2301      	movs	r3, #1
 8008be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008be6:	2303      	movs	r3, #3
 8008be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bea:	2300      	movs	r3, #0
 8008bec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008bee:	f107 0314 	add.w	r3, r7, #20
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	481c      	ldr	r0, [pc, #112]	; (8008c68 <HAL_ADC_MspInit+0xe0>)
 8008bf6:	f7f9 fa87 	bl	8002108 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8008bfa:	4b1c      	ldr	r3, [pc, #112]	; (8008c6c <HAL_ADC_MspInit+0xe4>)
 8008bfc:	4a1c      	ldr	r2, [pc, #112]	; (8008c70 <HAL_ADC_MspInit+0xe8>)
 8008bfe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8008c00:	4b1a      	ldr	r3, [pc, #104]	; (8008c6c <HAL_ADC_MspInit+0xe4>)
 8008c02:	2200      	movs	r2, #0
 8008c04:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008c06:	4b19      	ldr	r3, [pc, #100]	; (8008c6c <HAL_ADC_MspInit+0xe4>)
 8008c08:	2200      	movs	r2, #0
 8008c0a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008c0c:	4b17      	ldr	r3, [pc, #92]	; (8008c6c <HAL_ADC_MspInit+0xe4>)
 8008c0e:	2200      	movs	r2, #0
 8008c10:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8008c12:	4b16      	ldr	r3, [pc, #88]	; (8008c6c <HAL_ADC_MspInit+0xe4>)
 8008c14:	2200      	movs	r2, #0
 8008c16:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008c18:	4b14      	ldr	r3, [pc, #80]	; (8008c6c <HAL_ADC_MspInit+0xe4>)
 8008c1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c1e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008c20:	4b12      	ldr	r3, [pc, #72]	; (8008c6c <HAL_ADC_MspInit+0xe4>)
 8008c22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008c26:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8008c28:	4b10      	ldr	r3, [pc, #64]	; (8008c6c <HAL_ADC_MspInit+0xe4>)
 8008c2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c2e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8008c30:	4b0e      	ldr	r3, [pc, #56]	; (8008c6c <HAL_ADC_MspInit+0xe4>)
 8008c32:	2200      	movs	r2, #0
 8008c34:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008c36:	4b0d      	ldr	r3, [pc, #52]	; (8008c6c <HAL_ADC_MspInit+0xe4>)
 8008c38:	2200      	movs	r2, #0
 8008c3a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8008c3c:	480b      	ldr	r0, [pc, #44]	; (8008c6c <HAL_ADC_MspInit+0xe4>)
 8008c3e:	f7f8 fed1 	bl	80019e4 <HAL_DMA_Init>
 8008c42:	4603      	mov	r3, r0
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d001      	beq.n	8008c4c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8008c48:	f002 fb29 	bl	800b29e <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	4a07      	ldr	r2, [pc, #28]	; (8008c6c <HAL_ADC_MspInit+0xe4>)
 8008c50:	639a      	str	r2, [r3, #56]	; 0x38
 8008c52:	4a06      	ldr	r2, [pc, #24]	; (8008c6c <HAL_ADC_MspInit+0xe4>)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8008c58:	bf00      	nop
 8008c5a:	3728      	adds	r7, #40	; 0x28
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	40012000 	.word	0x40012000
 8008c64:	40023800 	.word	0x40023800
 8008c68:	40020400 	.word	0x40020400
 8008c6c:	200004f4 	.word	0x200004f4
 8008c70:	40026410 	.word	0x40026410

08008c74 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	607b      	str	r3, [r7, #4]
 8008c7e:	4b0c      	ldr	r3, [pc, #48]	; (8008cb0 <MX_DMA_Init+0x3c>)
 8008c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c82:	4a0b      	ldr	r2, [pc, #44]	; (8008cb0 <MX_DMA_Init+0x3c>)
 8008c84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008c88:	6313      	str	r3, [r2, #48]	; 0x30
 8008c8a:	4b09      	ldr	r3, [pc, #36]	; (8008cb0 <MX_DMA_Init+0x3c>)
 8008c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c92:	607b      	str	r3, [r7, #4]
 8008c94:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8008c96:	2200      	movs	r2, #0
 8008c98:	2100      	movs	r1, #0
 8008c9a:	2038      	movs	r0, #56	; 0x38
 8008c9c:	f7f8 fe6b 	bl	8001976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8008ca0:	2038      	movs	r0, #56	; 0x38
 8008ca2:	f7f8 fe84 	bl	80019ae <HAL_NVIC_EnableIRQ>

}
 8008ca6:	bf00      	nop
 8008ca8:	3708      	adds	r7, #8
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	40023800 	.word	0x40023800

08008cb4 <LL_GPIO_SetOutputPin>:
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	683a      	ldr	r2, [r7, #0]
 8008cc2:	619a      	str	r2, [r3, #24]
}
 8008cc4:	bf00      	nop
 8008cc6:	370c      	adds	r7, #12
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr

08008cd0 <LL_GPIO_ResetOutputPin>:
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	041a      	lsls	r2, r3, #16
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	619a      	str	r2, [r3, #24]
}
 8008ce2:	bf00      	nop
 8008ce4:	370c      	adds	r7, #12
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr
	...

08008cf0 <LL_AHB1_GRP1_EnableClock>:
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b085      	sub	sp, #20
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8008cf8:	4b08      	ldr	r3, [pc, #32]	; (8008d1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008cfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cfc:	4907      	ldr	r1, [pc, #28]	; (8008d1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4313      	orrs	r3, r2
 8008d02:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8008d04:	4b05      	ldr	r3, [pc, #20]	; (8008d1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008d06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4013      	ands	r3, r2
 8008d0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
}
 8008d10:	bf00      	nop
 8008d12:	3714      	adds	r7, #20
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr
 8008d1c:	40023800 	.word	0x40023800

08008d20 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b086      	sub	sp, #24
 8008d24:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d26:	463b      	mov	r3, r7
 8008d28:	2200      	movs	r2, #0
 8008d2a:	601a      	str	r2, [r3, #0]
 8008d2c:	605a      	str	r2, [r3, #4]
 8008d2e:	609a      	str	r2, [r3, #8]
 8008d30:	60da      	str	r2, [r3, #12]
 8008d32:	611a      	str	r2, [r3, #16]
 8008d34:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8008d36:	2004      	movs	r0, #4
 8008d38:	f7ff ffda 	bl	8008cf0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8008d3c:	2080      	movs	r0, #128	; 0x80
 8008d3e:	f7ff ffd7 	bl	8008cf0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8008d42:	2001      	movs	r0, #1
 8008d44:	f7ff ffd4 	bl	8008cf0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8008d48:	2002      	movs	r0, #2
 8008d4a:	f7ff ffd1 	bl	8008cf0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8008d4e:	2008      	movs	r0, #8
 8008d50:	f7ff ffce 	bl	8008cf0 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8008d54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008d58:	482e      	ldr	r0, [pc, #184]	; (8008e14 <MX_GPIO_Init+0xf4>)
 8008d5a:	f7ff ffab 	bl	8008cb4 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4 
 8008d5e:	f240 2117 	movw	r1, #535	; 0x217
 8008d62:	482c      	ldr	r0, [pc, #176]	; (8008e14 <MX_GPIO_Init+0xf4>)
 8008d64:	f7ff ffb4 	bl	8008cd0 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12|LL_GPIO_PIN_6);
 8008d68:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8008d6c:	482a      	ldr	r0, [pc, #168]	; (8008e18 <MX_GPIO_Init+0xf8>)
 8008d6e:	f7ff ffaf 	bl	8008cd0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8008d72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008d76:	4829      	ldr	r0, [pc, #164]	; (8008e1c <MX_GPIO_Init+0xfc>)
 8008d78:	f7ff ffaa 	bl	8008cd0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2 
 8008d7c:	f242 2317 	movw	r3, #8727	; 0x2217
 8008d80:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8008d82:	2301      	movs	r3, #1
 8008d84:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8008d86:	2300      	movs	r3, #0
 8008d88:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008d92:	463b      	mov	r3, r7
 8008d94:	4619      	mov	r1, r3
 8008d96:	481f      	ldr	r0, [pc, #124]	; (8008e14 <MX_GPIO_Init+0xf4>)
 8008d98:	f7fc f984 	bl	80050a4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_8;
 8008d9c:	f44f 7390 	mov.w	r3, #288	; 0x120
 8008da0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8008da2:	2300      	movs	r3, #0
 8008da4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008da6:	2300      	movs	r3, #0
 8008da8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008daa:	463b      	mov	r3, r7
 8008dac:	4619      	mov	r1, r3
 8008dae:	4819      	ldr	r0, [pc, #100]	; (8008e14 <MX_GPIO_Init+0xf4>)
 8008db0:	f7fc f978 	bl	80050a4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_6;
 8008db4:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8008db8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008dca:	463b      	mov	r3, r7
 8008dcc:	4619      	mov	r1, r3
 8008dce:	4812      	ldr	r0, [pc, #72]	; (8008e18 <MX_GPIO_Init+0xf8>)
 8008dd0:	f7fc f968 	bl	80050a4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8008dd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008dd8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8008dde:	2300      	movs	r3, #0
 8008de0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008de2:	2300      	movs	r3, #0
 8008de4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008de6:	2300      	movs	r3, #0
 8008de8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008dea:	463b      	mov	r3, r7
 8008dec:	4619      	mov	r1, r3
 8008dee:	480b      	ldr	r0, [pc, #44]	; (8008e1c <MX_GPIO_Init+0xfc>)
 8008df0:	f7fc f958 	bl	80050a4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8008df4:	2380      	movs	r3, #128	; 0x80
 8008df6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008e00:	463b      	mov	r3, r7
 8008e02:	4619      	mov	r1, r3
 8008e04:	4804      	ldr	r0, [pc, #16]	; (8008e18 <MX_GPIO_Init+0xf8>)
 8008e06:	f7fc f94d 	bl	80050a4 <LL_GPIO_Init>

}
 8008e0a:	bf00      	nop
 8008e0c:	3718      	adds	r7, #24
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	40020800 	.word	0x40020800
 8008e18:	40020400 	.word	0x40020400
 8008e1c:	40020000 	.word	0x40020000

08008e20 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8008e24:	4b12      	ldr	r3, [pc, #72]	; (8008e70 <MX_I2C1_Init+0x50>)
 8008e26:	4a13      	ldr	r2, [pc, #76]	; (8008e74 <MX_I2C1_Init+0x54>)
 8008e28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008e2a:	4b11      	ldr	r3, [pc, #68]	; (8008e70 <MX_I2C1_Init+0x50>)
 8008e2c:	4a12      	ldr	r2, [pc, #72]	; (8008e78 <MX_I2C1_Init+0x58>)
 8008e2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008e30:	4b0f      	ldr	r3, [pc, #60]	; (8008e70 <MX_I2C1_Init+0x50>)
 8008e32:	2200      	movs	r2, #0
 8008e34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008e36:	4b0e      	ldr	r3, [pc, #56]	; (8008e70 <MX_I2C1_Init+0x50>)
 8008e38:	2200      	movs	r2, #0
 8008e3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008e3c:	4b0c      	ldr	r3, [pc, #48]	; (8008e70 <MX_I2C1_Init+0x50>)
 8008e3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008e42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008e44:	4b0a      	ldr	r3, [pc, #40]	; (8008e70 <MX_I2C1_Init+0x50>)
 8008e46:	2200      	movs	r2, #0
 8008e48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008e4a:	4b09      	ldr	r3, [pc, #36]	; (8008e70 <MX_I2C1_Init+0x50>)
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008e50:	4b07      	ldr	r3, [pc, #28]	; (8008e70 <MX_I2C1_Init+0x50>)
 8008e52:	2200      	movs	r2, #0
 8008e54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008e56:	4b06      	ldr	r3, [pc, #24]	; (8008e70 <MX_I2C1_Init+0x50>)
 8008e58:	2200      	movs	r2, #0
 8008e5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008e5c:	4804      	ldr	r0, [pc, #16]	; (8008e70 <MX_I2C1_Init+0x50>)
 8008e5e:	f7f9 faef 	bl	8002440 <HAL_I2C_Init>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d001      	beq.n	8008e6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008e68:	f002 fa19 	bl	800b29e <Error_Handler>
  }

}
 8008e6c:	bf00      	nop
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	20000554 	.word	0x20000554
 8008e74:	40005400 	.word	0x40005400
 8008e78:	00061a80 	.word	0x00061a80

08008e7c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b08a      	sub	sp, #40	; 0x28
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e84:	f107 0314 	add.w	r3, r7, #20
 8008e88:	2200      	movs	r2, #0
 8008e8a:	601a      	str	r2, [r3, #0]
 8008e8c:	605a      	str	r2, [r3, #4]
 8008e8e:	609a      	str	r2, [r3, #8]
 8008e90:	60da      	str	r2, [r3, #12]
 8008e92:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a19      	ldr	r2, [pc, #100]	; (8008f00 <HAL_I2C_MspInit+0x84>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d12c      	bne.n	8008ef8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	613b      	str	r3, [r7, #16]
 8008ea2:	4b18      	ldr	r3, [pc, #96]	; (8008f04 <HAL_I2C_MspInit+0x88>)
 8008ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ea6:	4a17      	ldr	r2, [pc, #92]	; (8008f04 <HAL_I2C_MspInit+0x88>)
 8008ea8:	f043 0302 	orr.w	r3, r3, #2
 8008eac:	6313      	str	r3, [r2, #48]	; 0x30
 8008eae:	4b15      	ldr	r3, [pc, #84]	; (8008f04 <HAL_I2C_MspInit+0x88>)
 8008eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eb2:	f003 0302 	and.w	r3, r3, #2
 8008eb6:	613b      	str	r3, [r7, #16]
 8008eb8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8008eba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008ec0:	2312      	movs	r3, #18
 8008ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ec8:	2303      	movs	r3, #3
 8008eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008ecc:	2304      	movs	r3, #4
 8008ece:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008ed0:	f107 0314 	add.w	r3, r7, #20
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	480c      	ldr	r0, [pc, #48]	; (8008f08 <HAL_I2C_MspInit+0x8c>)
 8008ed8:	f7f9 f916 	bl	8002108 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008edc:	2300      	movs	r3, #0
 8008ede:	60fb      	str	r3, [r7, #12]
 8008ee0:	4b08      	ldr	r3, [pc, #32]	; (8008f04 <HAL_I2C_MspInit+0x88>)
 8008ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee4:	4a07      	ldr	r2, [pc, #28]	; (8008f04 <HAL_I2C_MspInit+0x88>)
 8008ee6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008eea:	6413      	str	r3, [r2, #64]	; 0x40
 8008eec:	4b05      	ldr	r3, [pc, #20]	; (8008f04 <HAL_I2C_MspInit+0x88>)
 8008eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ef4:	60fb      	str	r3, [r7, #12]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8008ef8:	bf00      	nop
 8008efa:	3728      	adds	r7, #40	; 0x28
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	40005400 	.word	0x40005400
 8008f04:	40023800 	.word	0x40023800
 8008f08:	40020400 	.word	0x40020400

08008f0c <LL_TIM_EnableCounter>:
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b083      	sub	sp, #12
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f043 0201 	orr.w	r2, r3, #1
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	601a      	str	r2, [r3, #0]
}
 8008f20:	bf00      	nop
 8008f22:	370c      	adds	r7, #12
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <LL_TIM_CC_EnableChannel>:
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6a1a      	ldr	r2, [r3, #32]
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	431a      	orrs	r2, r3
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	621a      	str	r2, [r3, #32]
}
 8008f42:	bf00      	nop
 8008f44:	370c      	adds	r7, #12
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr

08008f4e <LL_TIM_CC_DisableChannel>:
{
 8008f4e:	b480      	push	{r7}
 8008f50:	b083      	sub	sp, #12
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
 8008f56:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6a1a      	ldr	r2, [r3, #32]
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	43db      	mvns	r3, r3
 8008f60:	401a      	ands	r2, r3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	621a      	str	r2, [r3, #32]
}
 8008f66:	bf00      	nop
 8008f68:	370c      	adds	r7, #12
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr

08008f72 <LL_TIM_EnableIT_UPDATE>:
{
 8008f72:	b480      	push	{r7}
 8008f74:	b083      	sub	sp, #12
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	f043 0201 	orr.w	r2, r3, #1
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	60da      	str	r2, [r3, #12]
}
 8008f86:	bf00      	nop
 8008f88:	370c      	adds	r7, #12
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr

08008f92 <LL_USART_IsActiveFlag_TXE>:
{
 8008f92:	b480      	push	{r7}
 8008f94:	b083      	sub	sp, #12
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fa2:	2b80      	cmp	r3, #128	; 0x80
 8008fa4:	bf0c      	ite	eq
 8008fa6:	2301      	moveq	r3, #1
 8008fa8:	2300      	movne	r3, #0
 8008faa:	b2db      	uxtb	r3, r3
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	370c      	adds	r7, #12
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <LL_USART_EnableIT_RXNE>:
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b083      	sub	sp, #12
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	68db      	ldr	r3, [r3, #12]
 8008fc4:	f043 0220 	orr.w	r2, r3, #32
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	60da      	str	r2, [r3, #12]
}
 8008fcc:	bf00      	nop
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <LL_USART_TransmitData8>:
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8008fe4:	78fa      	ldrb	r2, [r7, #3]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	605a      	str	r2, [r3, #4]
}
 8008fea:	bf00      	nop
 8008fec:	370c      	adds	r7, #12
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr

08008ff6 <LL_GPIO_SetOutputPin>:
{
 8008ff6:	b480      	push	{r7}
 8008ff8:	b083      	sub	sp, #12
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
 8008ffe:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	683a      	ldr	r2, [r7, #0]
 8009004:	619a      	str	r2, [r3, #24]
}
 8009006:	bf00      	nop
 8009008:	370c      	adds	r7, #12
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr

08009012 <LL_GPIO_ResetOutputPin>:
{
 8009012:	b480      	push	{r7}
 8009014:	b083      	sub	sp, #12
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
 800901a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	041a      	lsls	r2, r3, #16
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	619a      	str	r2, [r3, #24]
}
 8009024:	bf00      	nop
 8009026:	370c      	adds	r7, #12
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr

08009030 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8009030:	b480      	push	{r7}
 8009032:	b083      	sub	sp, #12
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ PinMask);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	695a      	ldr	r2, [r3, #20]
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	405a      	eors	r2, r3
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	615a      	str	r2, [r3, #20]
}
 8009046:	bf00      	nop
 8009048:	370c      	adds	r7, #12
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr
	...

08009054 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char* p, int len)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b086      	sub	sp, #24
 8009058:	af00      	add	r7, sp, #0
 800905a:	60f8      	str	r0, [r7, #12]
 800905c:	60b9      	str	r1, [r7, #8]
 800905e:	607a      	str	r2, [r7, #4]
	for(int i=0;i<len;i++)
 8009060:	2300      	movs	r3, #0
 8009062:	617b      	str	r3, [r7, #20]
 8009064:	e011      	b.n	800908a <_write+0x36>
	{
		while(!LL_USART_IsActiveFlag_TXE(USART6));
 8009066:	bf00      	nop
 8009068:	480c      	ldr	r0, [pc, #48]	; (800909c <_write+0x48>)
 800906a:	f7ff ff92 	bl	8008f92 <LL_USART_IsActiveFlag_TXE>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d0f9      	beq.n	8009068 <_write+0x14>
		LL_USART_TransmitData8(USART6, *(p+i));
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	68ba      	ldr	r2, [r7, #8]
 8009078:	4413      	add	r3, r2
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	4619      	mov	r1, r3
 800907e:	4807      	ldr	r0, [pc, #28]	; (800909c <_write+0x48>)
 8009080:	f7ff ffaa 	bl	8008fd8 <LL_USART_TransmitData8>
	for(int i=0;i<len;i++)
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	3301      	adds	r3, #1
 8009088:	617b      	str	r3, [r7, #20]
 800908a:	697a      	ldr	r2, [r7, #20]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	429a      	cmp	r2, r3
 8009090:	dbe9      	blt.n	8009066 <_write+0x12>
	}
	return len;
 8009092:	687b      	ldr	r3, [r7, #4]
}
 8009094:	4618      	mov	r0, r3
 8009096:	3718      	adds	r7, #24
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}
 800909c:	40011400 	.word	0x40011400

080090a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b090      	sub	sp, #64	; 0x40
 80090a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	float q[4];
	float quatRadianAccuracy;
	unsigned short adcVal;

	short gyro_x_offset = 1, gyro_y_offset = -23, gyro_z_offset = -3;
 80090a6:	2301      	movs	r3, #1
 80090a8:	847b      	strh	r3, [r7, #34]	; 0x22
 80090aa:	f64f 73e9 	movw	r3, #65513	; 0xffe9
 80090ae:	843b      	strh	r3, [r7, #32]
 80090b0:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 80090b4:	83fb      	strh	r3, [r7, #30]
	unsigned char motor_arming_flag = 0;
 80090b6:	2300      	movs	r3, #0
 80090b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	unsigned short iBus_SwA_Prev = 0;
 80090bc:	2300      	movs	r3, #0
 80090be:	87bb      	strh	r3, [r7, #60]	; 0x3c
	unsigned char iBus_rx_cnt = 0;
 80090c0:	2300      	movs	r3, #0
 80090c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80090c6:	f7f7 fef1 	bl	8000eac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80090ca:	f001 fb9d 	bl	800a808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80090ce:	f7ff fe27 	bl	8008d20 <MX_GPIO_Init>
  MX_TIM3_Init();
 80090d2:	f002 febf 	bl	800be54 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 80090d6:	f003 fa13 	bl	800c500 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 80090da:	f002 f995 	bl	800b408 <MX_SPI2_Init>
  MX_SPI1_Init();
 80090de:	f002 f941 	bl	800b364 <MX_SPI1_Init>
  MX_SPI3_Init();
 80090e2:	f002 f9e5 	bl	800b4b0 <MX_SPI3_Init>
  MX_UART4_Init();
 80090e6:	f003 f907 	bl	800c2f8 <MX_UART4_Init>
  MX_UART5_Init();
 80090ea:	f003 f967 	bl	800c3bc <MX_UART5_Init>
  MX_TIM5_Init();
 80090ee:	f002 ff23 	bl	800bf38 <MX_TIM5_Init>
  MX_I2C1_Init();
 80090f2:	f7ff fe95 	bl	8008e20 <MX_I2C1_Init>
  MX_DMA_Init();
 80090f6:	f7ff fdbd 	bl	8008c74 <MX_DMA_Init>
  MX_ADC1_Init();
 80090fa:	f7ff fcf3 	bl	8008ae4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80090fe:	f003 f9d5 	bl	800c4ac <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8009102:	f002 ffc7 	bl	800c094 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM3); //Buzzer
 8009106:	488e      	ldr	r0, [pc, #568]	; (8009340 <main+0x2a0>)
 8009108:	f7ff ff00 	bl	8008f0c <LL_TIM_EnableCounter>

  LL_USART_EnableIT_RXNE(USART6); //Debug UART
 800910c:	488d      	ldr	r0, [pc, #564]	; (8009344 <main+0x2a4>)
 800910e:	f7ff ff53 	bl	8008fb8 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(UART4); //GPS
 8009112:	488d      	ldr	r0, [pc, #564]	; (8009348 <main+0x2a8>)
 8009114:	f7ff ff50 	bl	8008fb8 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(UART5); //FS-iA6B
 8009118:	488c      	ldr	r0, [pc, #560]	; (800934c <main+0x2ac>)
 800911a:	f7ff ff4d 	bl	8008fb8 <LL_USART_EnableIT_RXNE>

  LL_TIM_EnableCounter(TIM5); //Motor PWM
 800911e:	488c      	ldr	r0, [pc, #560]	; (8009350 <main+0x2b0>)
 8009120:	f7ff fef4 	bl	8008f0c <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH1);
 8009124:	2101      	movs	r1, #1
 8009126:	488a      	ldr	r0, [pc, #552]	; (8009350 <main+0x2b0>)
 8009128:	f7ff ff00 	bl	8008f2c <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH2);
 800912c:	2110      	movs	r1, #16
 800912e:	4888      	ldr	r0, [pc, #544]	; (8009350 <main+0x2b0>)
 8009130:	f7ff fefc 	bl	8008f2c <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH3);
 8009134:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009138:	4885      	ldr	r0, [pc, #532]	; (8009350 <main+0x2b0>)
 800913a:	f7ff fef7 	bl	8008f2c <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH4);
 800913e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009142:	4883      	ldr	r0, [pc, #524]	; (8009350 <main+0x2b0>)
 8009144:	f7ff fef2 	bl	8008f2c <LL_TIM_CC_EnableChannel>

  HAL_ADC_Start_DMA(&hadc1, &adcVal, 1); //Battery ADC
 8009148:	1dbb      	adds	r3, r7, #6
 800914a:	2201      	movs	r2, #1
 800914c:	4619      	mov	r1, r3
 800914e:	4881      	ldr	r0, [pc, #516]	; (8009354 <main+0x2b4>)
 8009150:	f7f7 ff86 	bl	8001060 <HAL_ADC_Start_DMA>

  HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1); //Telemetry
 8009154:	2201      	movs	r2, #1
 8009156:	4980      	ldr	r1, [pc, #512]	; (8009358 <main+0x2b8>)
 8009158:	4880      	ldr	r0, [pc, #512]	; (800935c <main+0x2bc>)
 800915a:	f7fa fee6 	bl	8003f2a <HAL_UART_Receive_IT>

  LL_TIM_EnableCounter(TIM7); //10Hz, 50Hz, 1kHz loop
 800915e:	4880      	ldr	r0, [pc, #512]	; (8009360 <main+0x2c0>)
 8009160:	f7ff fed4 	bl	8008f0c <LL_TIM_EnableCounter>
  LL_TIM_EnableIT_UPDATE(TIM7);
 8009164:	487e      	ldr	r0, [pc, #504]	; (8009360 <main+0x2c0>)
 8009166:	f7ff ff04 	bl	8008f72 <LL_TIM_EnableIT_UPDATE>


  TIM3->PSC = 1000;
 800916a:	4b75      	ldr	r3, [pc, #468]	; (8009340 <main+0x2a0>)
 800916c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009170:	629a      	str	r2, [r3, #40]	; 0x28
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009172:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009176:	4872      	ldr	r0, [pc, #456]	; (8009340 <main+0x2a0>)
 8009178:	f7ff fed8 	bl	8008f2c <LL_TIM_CC_EnableChannel>
  HAL_Delay(60);
 800917c:	203c      	movs	r0, #60	; 0x3c
 800917e:	f7f7 ff07 	bl	8000f90 <HAL_Delay>
  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009182:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009186:	486e      	ldr	r0, [pc, #440]	; (8009340 <main+0x2a0>)
 8009188:	f7ff fee1 	bl	8008f4e <LL_TIM_CC_DisableChannel>
  HAL_Delay(60);
 800918c:	203c      	movs	r0, #60	; 0x3c
 800918e:	f7f7 feff 	bl	8000f90 <HAL_Delay>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009192:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009196:	486a      	ldr	r0, [pc, #424]	; (8009340 <main+0x2a0>)
 8009198:	f7ff fec8 	bl	8008f2c <LL_TIM_CC_EnableChannel>
  HAL_Delay(60);
 800919c:	203c      	movs	r0, #60	; 0x3c
 800919e:	f7f7 fef7 	bl	8000f90 <HAL_Delay>
  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80091a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80091a6:	4866      	ldr	r0, [pc, #408]	; (8009340 <main+0x2a0>)
 80091a8:	f7ff fed1 	bl	8008f4e <LL_TIM_CC_DisableChannel>
  HAL_Delay(60);
 80091ac:	203c      	movs	r0, #60	; 0x3c
 80091ae:	f7f7 feef 	bl	8000f90 <HAL_Delay>
  printf("Checking sensor connection..\n");
 80091b2:	486c      	ldr	r0, [pc, #432]	; (8009364 <main+0x2c4>)
 80091b4:	f003 ffa0 	bl	800d0f8 <puts>


  if(BNO080_Initialization() != 0)
 80091b8:	f7fd faa4 	bl	8006704 <BNO080_Initialization>
 80091bc:	4603      	mov	r3, r0
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d03a      	beq.n	8009238 <main+0x198>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80091c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80091c6:	485e      	ldr	r0, [pc, #376]	; (8009340 <main+0x2a0>)
 80091c8:	f7ff feb0 	bl	8008f2c <LL_TIM_CC_EnableChannel>

	  TIM3->PSC = 1000;
 80091cc:	4b5c      	ldr	r3, [pc, #368]	; (8009340 <main+0x2a0>)
 80091ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80091d2:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 80091d4:	2064      	movs	r0, #100	; 0x64
 80091d6:	f7f7 fedb 	bl	8000f90 <HAL_Delay>
	  TIM3->PSC = 1500;
 80091da:	4b59      	ldr	r3, [pc, #356]	; (8009340 <main+0x2a0>)
 80091dc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80091e0:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 80091e2:	2064      	movs	r0, #100	; 0x64
 80091e4:	f7f7 fed4 	bl	8000f90 <HAL_Delay>
	  TIM3->PSC = 2000;
 80091e8:	4b55      	ldr	r3, [pc, #340]	; (8009340 <main+0x2a0>)
 80091ea:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80091ee:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 80091f0:	2064      	movs	r0, #100	; 0x64
 80091f2:	f7f7 fecd 	bl	8000f90 <HAL_Delay>

	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80091f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80091fa:	4851      	ldr	r0, [pc, #324]	; (8009340 <main+0x2a0>)
 80091fc:	f7ff fea7 	bl	8008f4e <LL_TIM_CC_DisableChannel>

	  printf("\nBNO080 failed. Program shutting down...\n");
 8009200:	4859      	ldr	r0, [pc, #356]	; (8009368 <main+0x2c8>)
 8009202:	f003 ff79 	bl	800d0f8 <puts>
	  while(1)
	  {
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009206:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800920a:	484d      	ldr	r0, [pc, #308]	; (8009340 <main+0x2a0>)
 800920c:	f7ff fe9f 	bl	8008f4e <LL_TIM_CC_DisableChannel>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0);
 8009210:	2101      	movs	r1, #1
 8009212:	4856      	ldr	r0, [pc, #344]	; (800936c <main+0x2cc>)
 8009214:	f7ff ff0c 	bl	8009030 <LL_GPIO_TogglePin>
		  HAL_Delay(200);
 8009218:	20c8      	movs	r0, #200	; 0xc8
 800921a:	f7f7 feb9 	bl	8000f90 <HAL_Delay>
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800921e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009222:	4847      	ldr	r0, [pc, #284]	; (8009340 <main+0x2a0>)
 8009224:	f7ff fe82 	bl	8008f2c <LL_TIM_CC_EnableChannel>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0);
 8009228:	2101      	movs	r1, #1
 800922a:	4850      	ldr	r0, [pc, #320]	; (800936c <main+0x2cc>)
 800922c:	f7ff ff00 	bl	8009030 <LL_GPIO_TogglePin>
		  HAL_Delay(200);
 8009230:	20c8      	movs	r0, #200	; 0xc8
 8009232:	f7f7 fead 	bl	8000f90 <HAL_Delay>
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009236:	e7e6      	b.n	8009206 <main+0x166>
	  }
  }
  //BNO080_enableRotationVector(2500);
  BNO080_enableGameRotationVector(2500);
 8009238:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800923c:	f7fd fda1 	bl	8006d82 <BNO080_enableGameRotationVector>

  if(ICM20602_Initialization() != 0)
 8009240:	f7fe fa40 	bl	80076c4 <ICM20602_Initialization>
 8009244:	4603      	mov	r3, r0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d03a      	beq.n	80092c0 <main+0x220>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800924a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800924e:	483c      	ldr	r0, [pc, #240]	; (8009340 <main+0x2a0>)
 8009250:	f7ff fe6c 	bl	8008f2c <LL_TIM_CC_EnableChannel>

	  TIM3->PSC = 1000;
 8009254:	4b3a      	ldr	r3, [pc, #232]	; (8009340 <main+0x2a0>)
 8009256:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800925a:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 800925c:	2064      	movs	r0, #100	; 0x64
 800925e:	f7f7 fe97 	bl	8000f90 <HAL_Delay>
	  TIM3->PSC = 1500;
 8009262:	4b37      	ldr	r3, [pc, #220]	; (8009340 <main+0x2a0>)
 8009264:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009268:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 800926a:	2064      	movs	r0, #100	; 0x64
 800926c:	f7f7 fe90 	bl	8000f90 <HAL_Delay>
	  TIM3->PSC = 2000;
 8009270:	4b33      	ldr	r3, [pc, #204]	; (8009340 <main+0x2a0>)
 8009272:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009276:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 8009278:	2064      	movs	r0, #100	; 0x64
 800927a:	f7f7 fe89 	bl	8000f90 <HAL_Delay>

	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800927e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009282:	482f      	ldr	r0, [pc, #188]	; (8009340 <main+0x2a0>)
 8009284:	f7ff fe63 	bl	8008f4e <LL_TIM_CC_DisableChannel>

	  printf("\nICM-20602 failed. Program shutting down...\n");
 8009288:	4839      	ldr	r0, [pc, #228]	; (8009370 <main+0x2d0>)
 800928a:	f003 ff35 	bl	800d0f8 <puts>
	  while(1)
	  {
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800928e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009292:	482b      	ldr	r0, [pc, #172]	; (8009340 <main+0x2a0>)
 8009294:	f7ff fe5b 	bl	8008f4e <LL_TIM_CC_DisableChannel>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_1);
 8009298:	2102      	movs	r1, #2
 800929a:	4834      	ldr	r0, [pc, #208]	; (800936c <main+0x2cc>)
 800929c:	f7ff fec8 	bl	8009030 <LL_GPIO_TogglePin>
		  HAL_Delay(200);
 80092a0:	20c8      	movs	r0, #200	; 0xc8
 80092a2:	f7f7 fe75 	bl	8000f90 <HAL_Delay>
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80092a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80092aa:	4825      	ldr	r0, [pc, #148]	; (8009340 <main+0x2a0>)
 80092ac:	f7ff fe3e 	bl	8008f2c <LL_TIM_CC_EnableChannel>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_1);
 80092b0:	2102      	movs	r1, #2
 80092b2:	482e      	ldr	r0, [pc, #184]	; (800936c <main+0x2cc>)
 80092b4:	f7ff febc 	bl	8009030 <LL_GPIO_TogglePin>
		  HAL_Delay(200);
 80092b8:	20c8      	movs	r0, #200	; 0xc8
 80092ba:	f7f7 fe69 	bl	8000f90 <HAL_Delay>
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80092be:	e7e6      	b.n	800928e <main+0x1ee>
	  }
  }

  if(LPS22HH_Initialization() != 0)
 80092c0:	f7fe fc8a 	bl	8007bd8 <LPS22HH_Initialization>
 80092c4:	4603      	mov	r3, r0
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d056      	beq.n	8009378 <main+0x2d8>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80092ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80092ce:	481c      	ldr	r0, [pc, #112]	; (8009340 <main+0x2a0>)
 80092d0:	f7ff fe2c 	bl	8008f2c <LL_TIM_CC_EnableChannel>

	  TIM3->PSC = 1000;
 80092d4:	4b1a      	ldr	r3, [pc, #104]	; (8009340 <main+0x2a0>)
 80092d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80092da:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 80092dc:	2064      	movs	r0, #100	; 0x64
 80092de:	f7f7 fe57 	bl	8000f90 <HAL_Delay>
	  TIM3->PSC = 1500;
 80092e2:	4b17      	ldr	r3, [pc, #92]	; (8009340 <main+0x2a0>)
 80092e4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80092e8:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 80092ea:	2064      	movs	r0, #100	; 0x64
 80092ec:	f7f7 fe50 	bl	8000f90 <HAL_Delay>
	  TIM3->PSC = 2000;
 80092f0:	4b13      	ldr	r3, [pc, #76]	; (8009340 <main+0x2a0>)
 80092f2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80092f6:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 80092f8:	2064      	movs	r0, #100	; 0x64
 80092fa:	f7f7 fe49 	bl	8000f90 <HAL_Delay>

	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80092fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009302:	480f      	ldr	r0, [pc, #60]	; (8009340 <main+0x2a0>)
 8009304:	f7ff fe23 	bl	8008f4e <LL_TIM_CC_DisableChannel>

	  printf("\nLPS22HH failed. Program shutting down...\n");
 8009308:	481a      	ldr	r0, [pc, #104]	; (8009374 <main+0x2d4>)
 800930a:	f003 fef5 	bl	800d0f8 <puts>
	  while(1)
	  {
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800930e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009312:	480b      	ldr	r0, [pc, #44]	; (8009340 <main+0x2a0>)
 8009314:	f7ff fe1b 	bl	8008f4e <LL_TIM_CC_DisableChannel>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 8009318:	2104      	movs	r1, #4
 800931a:	4814      	ldr	r0, [pc, #80]	; (800936c <main+0x2cc>)
 800931c:	f7ff fe88 	bl	8009030 <LL_GPIO_TogglePin>
		  HAL_Delay(200);
 8009320:	20c8      	movs	r0, #200	; 0xc8
 8009322:	f7f7 fe35 	bl	8000f90 <HAL_Delay>
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009326:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800932a:	4805      	ldr	r0, [pc, #20]	; (8009340 <main+0x2a0>)
 800932c:	f7ff fdfe 	bl	8008f2c <LL_TIM_CC_EnableChannel>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 8009330:	2104      	movs	r1, #4
 8009332:	480e      	ldr	r0, [pc, #56]	; (800936c <main+0x2cc>)
 8009334:	f7ff fe7c 	bl	8009030 <LL_GPIO_TogglePin>
		  HAL_Delay(200);
 8009338:	20c8      	movs	r0, #200	; 0xc8
 800933a:	f7f7 fe29 	bl	8000f90 <HAL_Delay>
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800933e:	e7e6      	b.n	800930e <main+0x26e>
 8009340:	40000400 	.word	0x40000400
 8009344:	40011400 	.word	0x40011400
 8009348:	40004c00 	.word	0x40004c00
 800934c:	40005000 	.word	0x40005000
 8009350:	40000c00 	.word	0x40000c00
 8009354:	200004ac 	.word	0x200004ac
 8009358:	20000641 	.word	0x20000641
 800935c:	20000654 	.word	0x20000654
 8009360:	40001400 	.word	0x40001400
 8009364:	080100b0 	.word	0x080100b0
 8009368:	080100d0 	.word	0x080100d0
 800936c:	40020800 	.word	0x40020800
 8009370:	080100fc 	.word	0x080100fc
 8009374:	08010128 	.word	0x08010128
	  }
  }

  printf("All sensors OK!\n\n");
 8009378:	48c2      	ldr	r0, [pc, #776]	; (8009684 <main+0x5e4>)
 800937a:	f003 febd 	bl	800d0f8 <puts>

  M8N_Initialization();
 800937e:	f7fe fe9f 	bl	80080c0 <M8N_Initialization>



  ICM20602_Writebyte(0x13, (gyro_x_offset*-2)>>8);
 8009382:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8009386:	4613      	mov	r3, r2
 8009388:	07db      	lsls	r3, r3, #31
 800938a:	1a9b      	subs	r3, r3, r2
 800938c:	005b      	lsls	r3, r3, #1
 800938e:	121b      	asrs	r3, r3, #8
 8009390:	4619      	mov	r1, r3
 8009392:	2013      	movs	r0, #19
 8009394:	f7fe f974 	bl	8007680 <ICM20602_Writebyte>
  ICM20602_Writebyte(0x14, (gyro_x_offset*-2));
 8009398:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800939c:	4613      	mov	r3, r2
 800939e:	07db      	lsls	r3, r3, #31
 80093a0:	1a9b      	subs	r3, r3, r2
 80093a2:	005b      	lsls	r3, r3, #1
 80093a4:	4619      	mov	r1, r3
 80093a6:	2014      	movs	r0, #20
 80093a8:	f7fe f96a 	bl	8007680 <ICM20602_Writebyte>

  ICM20602_Writebyte(0x15, (gyro_y_offset*-2)>>8);
 80093ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80093b0:	4613      	mov	r3, r2
 80093b2:	07db      	lsls	r3, r3, #31
 80093b4:	1a9b      	subs	r3, r3, r2
 80093b6:	005b      	lsls	r3, r3, #1
 80093b8:	121b      	asrs	r3, r3, #8
 80093ba:	4619      	mov	r1, r3
 80093bc:	2015      	movs	r0, #21
 80093be:	f7fe f95f 	bl	8007680 <ICM20602_Writebyte>
  ICM20602_Writebyte(0x16, (gyro_y_offset*-2));
 80093c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80093c6:	4613      	mov	r3, r2
 80093c8:	07db      	lsls	r3, r3, #31
 80093ca:	1a9b      	subs	r3, r3, r2
 80093cc:	005b      	lsls	r3, r3, #1
 80093ce:	4619      	mov	r1, r3
 80093d0:	2016      	movs	r0, #22
 80093d2:	f7fe f955 	bl	8007680 <ICM20602_Writebyte>

  ICM20602_Writebyte(0x17, (gyro_z_offset*-2)>>8);
 80093d6:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80093da:	4613      	mov	r3, r2
 80093dc:	07db      	lsls	r3, r3, #31
 80093de:	1a9b      	subs	r3, r3, r2
 80093e0:	005b      	lsls	r3, r3, #1
 80093e2:	121b      	asrs	r3, r3, #8
 80093e4:	4619      	mov	r1, r3
 80093e6:	2017      	movs	r0, #23
 80093e8:	f7fe f94a 	bl	8007680 <ICM20602_Writebyte>
  ICM20602_Writebyte(0x18, (gyro_z_offset*-2));
 80093ec:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80093f0:	4613      	mov	r3, r2
 80093f2:	07db      	lsls	r3, r3, #31
 80093f4:	1a9b      	subs	r3, r3, r2
 80093f6:	005b      	lsls	r3, r3, #1
 80093f8:	4619      	mov	r1, r3
 80093fa:	2018      	movs	r0, #24
 80093fc:	f7fe f940 	bl	8007680 <ICM20602_Writebyte>

  printf("Loading PID Gain...\n");
 8009400:	48a1      	ldr	r0, [pc, #644]	; (8009688 <main+0x5e8>)
 8009402:	f003 fe79 	bl	800d0f8 <puts>


  if(EP_PIDGain_Read(0, &roll.in.kp, &roll.in.ki, &roll.in.kd) != 0 ||
 8009406:	4ba1      	ldr	r3, [pc, #644]	; (800968c <main+0x5ec>)
 8009408:	4aa1      	ldr	r2, [pc, #644]	; (8009690 <main+0x5f0>)
 800940a:	49a2      	ldr	r1, [pc, #648]	; (8009694 <main+0x5f4>)
 800940c:	2000      	movs	r0, #0
 800940e:	f7fc ff59 	bl	80062c4 <EP_PIDGain_Read>
 8009412:	4603      	mov	r3, r0
 8009414:	2b00      	cmp	r3, #0
 8009416:	d12c      	bne.n	8009472 <main+0x3d2>
		  EP_PIDGain_Read(1, &roll.out.kp, &roll.out.ki, &roll.out.kd) != 0 ||
 8009418:	4b9f      	ldr	r3, [pc, #636]	; (8009698 <main+0x5f8>)
 800941a:	4aa0      	ldr	r2, [pc, #640]	; (800969c <main+0x5fc>)
 800941c:	49a0      	ldr	r1, [pc, #640]	; (80096a0 <main+0x600>)
 800941e:	2001      	movs	r0, #1
 8009420:	f7fc ff50 	bl	80062c4 <EP_PIDGain_Read>
 8009424:	4603      	mov	r3, r0
  if(EP_PIDGain_Read(0, &roll.in.kp, &roll.in.ki, &roll.in.kd) != 0 ||
 8009426:	2b00      	cmp	r3, #0
 8009428:	d123      	bne.n	8009472 <main+0x3d2>
		  EP_PIDGain_Read(2, &pitch.in.kp, &pitch.in.ki, &pitch.in.kd) != 0 ||
 800942a:	4b9e      	ldr	r3, [pc, #632]	; (80096a4 <main+0x604>)
 800942c:	4a9e      	ldr	r2, [pc, #632]	; (80096a8 <main+0x608>)
 800942e:	499f      	ldr	r1, [pc, #636]	; (80096ac <main+0x60c>)
 8009430:	2002      	movs	r0, #2
 8009432:	f7fc ff47 	bl	80062c4 <EP_PIDGain_Read>
 8009436:	4603      	mov	r3, r0
		  EP_PIDGain_Read(1, &roll.out.kp, &roll.out.ki, &roll.out.kd) != 0 ||
 8009438:	2b00      	cmp	r3, #0
 800943a:	d11a      	bne.n	8009472 <main+0x3d2>
		  EP_PIDGain_Read(3, &pitch.out.kp, &pitch.out.ki, &pitch.out.kd) != 0 ||
 800943c:	4b9c      	ldr	r3, [pc, #624]	; (80096b0 <main+0x610>)
 800943e:	4a9d      	ldr	r2, [pc, #628]	; (80096b4 <main+0x614>)
 8009440:	499d      	ldr	r1, [pc, #628]	; (80096b8 <main+0x618>)
 8009442:	2003      	movs	r0, #3
 8009444:	f7fc ff3e 	bl	80062c4 <EP_PIDGain_Read>
 8009448:	4603      	mov	r3, r0
		  EP_PIDGain_Read(2, &pitch.in.kp, &pitch.in.ki, &pitch.in.kd) != 0 ||
 800944a:	2b00      	cmp	r3, #0
 800944c:	d111      	bne.n	8009472 <main+0x3d2>
		  EP_PIDGain_Read(4, &yaw_heading.kp, &yaw_heading.ki, &yaw_heading.kd) != 0 ||
 800944e:	4b9b      	ldr	r3, [pc, #620]	; (80096bc <main+0x61c>)
 8009450:	4a9b      	ldr	r2, [pc, #620]	; (80096c0 <main+0x620>)
 8009452:	499c      	ldr	r1, [pc, #624]	; (80096c4 <main+0x624>)
 8009454:	2004      	movs	r0, #4
 8009456:	f7fc ff35 	bl	80062c4 <EP_PIDGain_Read>
 800945a:	4603      	mov	r3, r0
		  EP_PIDGain_Read(3, &pitch.out.kp, &pitch.out.ki, &pitch.out.kd) != 0 ||
 800945c:	2b00      	cmp	r3, #0
 800945e:	d108      	bne.n	8009472 <main+0x3d2>
		  EP_PIDGain_Read(5, &yaw_rate.kp, &yaw_rate.ki, &yaw_rate.kd) != 0)
 8009460:	4b99      	ldr	r3, [pc, #612]	; (80096c8 <main+0x628>)
 8009462:	4a9a      	ldr	r2, [pc, #616]	; (80096cc <main+0x62c>)
 8009464:	499a      	ldr	r1, [pc, #616]	; (80096d0 <main+0x630>)
 8009466:	2005      	movs	r0, #5
 8009468:	f7fc ff2c 	bl	80062c4 <EP_PIDGain_Read>
 800946c:	4603      	mov	r3, r0
		  EP_PIDGain_Read(4, &yaw_heading.kp, &yaw_heading.ki, &yaw_heading.kd) != 0 ||
 800946e:	2b00      	cmp	r3, #0
 8009470:	d026      	beq.n	80094c0 <main+0x420>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009472:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009476:	4897      	ldr	r0, [pc, #604]	; (80096d4 <main+0x634>)
 8009478:	f7ff fd58 	bl	8008f2c <LL_TIM_CC_EnableChannel>

	  TIM3->PSC = 1000;
 800947c:	4b95      	ldr	r3, [pc, #596]	; (80096d4 <main+0x634>)
 800947e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009482:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 8009484:	2064      	movs	r0, #100	; 0x64
 8009486:	f7f7 fd83 	bl	8000f90 <HAL_Delay>
	  TIM3->PSC = 1500;
 800948a:	4b92      	ldr	r3, [pc, #584]	; (80096d4 <main+0x634>)
 800948c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009490:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 8009492:	2064      	movs	r0, #100	; 0x64
 8009494:	f7f7 fd7c 	bl	8000f90 <HAL_Delay>
	  TIM3->PSC = 2000;
 8009498:	4b8e      	ldr	r3, [pc, #568]	; (80096d4 <main+0x634>)
 800949a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800949e:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 80094a0:	2064      	movs	r0, #100	; 0x64
 80094a2:	f7f7 fd75 	bl	8000f90 <HAL_Delay>

	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80094a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80094aa:	488a      	ldr	r0, [pc, #552]	; (80096d4 <main+0x634>)
 80094ac:	f7ff fd4f 	bl	8008f4e <LL_TIM_CC_DisableChannel>

	  HAL_Delay(500);
 80094b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80094b4:	f7f7 fd6c 	bl	8000f90 <HAL_Delay>
	  printf("\nCouldn't load PID gain.\n");
 80094b8:	4887      	ldr	r0, [pc, #540]	; (80096d8 <main+0x638>)
 80094ba:	f003 fe1d 	bl	800d0f8 <puts>
 80094be:	e098      	b.n	80095f2 <main+0x552>
  }
  else
  {
	  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 0, roll.in.kp, roll.in.ki, roll.in.kd);
 80094c0:	4b74      	ldr	r3, [pc, #464]	; (8009694 <main+0x5f4>)
 80094c2:	edd3 7a00 	vldr	s15, [r3]
 80094c6:	4b73      	ldr	r3, [pc, #460]	; (8009694 <main+0x5f4>)
 80094c8:	ed93 7a01 	vldr	s14, [r3, #4]
 80094cc:	4b71      	ldr	r3, [pc, #452]	; (8009694 <main+0x5f4>)
 80094ce:	edd3 6a02 	vldr	s13, [r3, #8]
 80094d2:	eeb0 1a66 	vmov.f32	s2, s13
 80094d6:	eef0 0a47 	vmov.f32	s1, s14
 80094da:	eeb0 0a67 	vmov.f32	s0, s15
 80094de:	2100      	movs	r1, #0
 80094e0:	487e      	ldr	r0, [pc, #504]	; (80096dc <main+0x63c>)
 80094e2:	f001 fe89 	bl	800b1f8 <Encode_Msg_PID_Gain>
	  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 80094e6:	230a      	movs	r3, #10
 80094e8:	2214      	movs	r2, #20
 80094ea:	497c      	ldr	r1, [pc, #496]	; (80096dc <main+0x63c>)
 80094ec:	487c      	ldr	r0, [pc, #496]	; (80096e0 <main+0x640>)
 80094ee:	f7fa fc3e 	bl	8003d6e <HAL_UART_Transmit>
	  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 1, roll.out.kp, roll.out.ki, roll.out.kd);
 80094f2:	4b68      	ldr	r3, [pc, #416]	; (8009694 <main+0x5f4>)
 80094f4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80094f8:	4b66      	ldr	r3, [pc, #408]	; (8009694 <main+0x5f4>)
 80094fa:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80094fe:	4b65      	ldr	r3, [pc, #404]	; (8009694 <main+0x5f4>)
 8009500:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8009504:	eeb0 1a66 	vmov.f32	s2, s13
 8009508:	eef0 0a47 	vmov.f32	s1, s14
 800950c:	eeb0 0a67 	vmov.f32	s0, s15
 8009510:	2101      	movs	r1, #1
 8009512:	4872      	ldr	r0, [pc, #456]	; (80096dc <main+0x63c>)
 8009514:	f001 fe70 	bl	800b1f8 <Encode_Msg_PID_Gain>
	  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8009518:	230a      	movs	r3, #10
 800951a:	2214      	movs	r2, #20
 800951c:	496f      	ldr	r1, [pc, #444]	; (80096dc <main+0x63c>)
 800951e:	4870      	ldr	r0, [pc, #448]	; (80096e0 <main+0x640>)
 8009520:	f7fa fc25 	bl	8003d6e <HAL_UART_Transmit>
	  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 2, pitch.in.kp, pitch.in.ki, pitch.in.kd);
 8009524:	4b61      	ldr	r3, [pc, #388]	; (80096ac <main+0x60c>)
 8009526:	edd3 7a00 	vldr	s15, [r3]
 800952a:	4b60      	ldr	r3, [pc, #384]	; (80096ac <main+0x60c>)
 800952c:	ed93 7a01 	vldr	s14, [r3, #4]
 8009530:	4b5e      	ldr	r3, [pc, #376]	; (80096ac <main+0x60c>)
 8009532:	edd3 6a02 	vldr	s13, [r3, #8]
 8009536:	eeb0 1a66 	vmov.f32	s2, s13
 800953a:	eef0 0a47 	vmov.f32	s1, s14
 800953e:	eeb0 0a67 	vmov.f32	s0, s15
 8009542:	2102      	movs	r1, #2
 8009544:	4865      	ldr	r0, [pc, #404]	; (80096dc <main+0x63c>)
 8009546:	f001 fe57 	bl	800b1f8 <Encode_Msg_PID_Gain>
	  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800954a:	230a      	movs	r3, #10
 800954c:	2214      	movs	r2, #20
 800954e:	4963      	ldr	r1, [pc, #396]	; (80096dc <main+0x63c>)
 8009550:	4863      	ldr	r0, [pc, #396]	; (80096e0 <main+0x640>)
 8009552:	f7fa fc0c 	bl	8003d6e <HAL_UART_Transmit>
	  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 3, pitch.out.kp, pitch.out.ki, pitch.out.kd);
 8009556:	4b55      	ldr	r3, [pc, #340]	; (80096ac <main+0x60c>)
 8009558:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800955c:	4b53      	ldr	r3, [pc, #332]	; (80096ac <main+0x60c>)
 800955e:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8009562:	4b52      	ldr	r3, [pc, #328]	; (80096ac <main+0x60c>)
 8009564:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8009568:	eeb0 1a66 	vmov.f32	s2, s13
 800956c:	eef0 0a47 	vmov.f32	s1, s14
 8009570:	eeb0 0a67 	vmov.f32	s0, s15
 8009574:	2103      	movs	r1, #3
 8009576:	4859      	ldr	r0, [pc, #356]	; (80096dc <main+0x63c>)
 8009578:	f001 fe3e 	bl	800b1f8 <Encode_Msg_PID_Gain>
	  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800957c:	230a      	movs	r3, #10
 800957e:	2214      	movs	r2, #20
 8009580:	4956      	ldr	r1, [pc, #344]	; (80096dc <main+0x63c>)
 8009582:	4857      	ldr	r0, [pc, #348]	; (80096e0 <main+0x640>)
 8009584:	f7fa fbf3 	bl	8003d6e <HAL_UART_Transmit>
	  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 4, yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 8009588:	4b4e      	ldr	r3, [pc, #312]	; (80096c4 <main+0x624>)
 800958a:	edd3 7a00 	vldr	s15, [r3]
 800958e:	4b4d      	ldr	r3, [pc, #308]	; (80096c4 <main+0x624>)
 8009590:	ed93 7a01 	vldr	s14, [r3, #4]
 8009594:	4b4b      	ldr	r3, [pc, #300]	; (80096c4 <main+0x624>)
 8009596:	edd3 6a02 	vldr	s13, [r3, #8]
 800959a:	eeb0 1a66 	vmov.f32	s2, s13
 800959e:	eef0 0a47 	vmov.f32	s1, s14
 80095a2:	eeb0 0a67 	vmov.f32	s0, s15
 80095a6:	2104      	movs	r1, #4
 80095a8:	484c      	ldr	r0, [pc, #304]	; (80096dc <main+0x63c>)
 80095aa:	f001 fe25 	bl	800b1f8 <Encode_Msg_PID_Gain>
	  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 80095ae:	230a      	movs	r3, #10
 80095b0:	2214      	movs	r2, #20
 80095b2:	494a      	ldr	r1, [pc, #296]	; (80096dc <main+0x63c>)
 80095b4:	484a      	ldr	r0, [pc, #296]	; (80096e0 <main+0x640>)
 80095b6:	f7fa fbda 	bl	8003d6e <HAL_UART_Transmit>
	  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 5, yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 80095ba:	4b45      	ldr	r3, [pc, #276]	; (80096d0 <main+0x630>)
 80095bc:	edd3 7a00 	vldr	s15, [r3]
 80095c0:	4b43      	ldr	r3, [pc, #268]	; (80096d0 <main+0x630>)
 80095c2:	ed93 7a01 	vldr	s14, [r3, #4]
 80095c6:	4b42      	ldr	r3, [pc, #264]	; (80096d0 <main+0x630>)
 80095c8:	edd3 6a02 	vldr	s13, [r3, #8]
 80095cc:	eeb0 1a66 	vmov.f32	s2, s13
 80095d0:	eef0 0a47 	vmov.f32	s1, s14
 80095d4:	eeb0 0a67 	vmov.f32	s0, s15
 80095d8:	2105      	movs	r1, #5
 80095da:	4840      	ldr	r0, [pc, #256]	; (80096dc <main+0x63c>)
 80095dc:	f001 fe0c 	bl	800b1f8 <Encode_Msg_PID_Gain>
	  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 80095e0:	230a      	movs	r3, #10
 80095e2:	2214      	movs	r2, #20
 80095e4:	493d      	ldr	r1, [pc, #244]	; (80096dc <main+0x63c>)
 80095e6:	483e      	ldr	r0, [pc, #248]	; (80096e0 <main+0x640>)
 80095e8:	f7fa fbc1 	bl	8003d6e <HAL_UART_Transmit>
	  printf("\nAll gains OK!\n\n");
 80095ec:	483d      	ldr	r0, [pc, #244]	; (80096e4 <main+0x644>)
 80095ee:	f003 fd83 	bl	800d0f8 <puts>
  }




  while(Is_iBus_Received() == 0)
 80095f2:	e013      	b.n	800961c <main+0x57c>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80095f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80095f8:	4836      	ldr	r0, [pc, #216]	; (80096d4 <main+0x634>)
 80095fa:	f7ff fc97 	bl	8008f2c <LL_TIM_CC_EnableChannel>

	  TIM3->PSC = 3000;
 80095fe:	4b35      	ldr	r3, [pc, #212]	; (80096d4 <main+0x634>)
 8009600:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8009604:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 8009606:	20c8      	movs	r0, #200	; 0xc8
 8009608:	f7f7 fcc2 	bl	8000f90 <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800960c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009610:	4830      	ldr	r0, [pc, #192]	; (80096d4 <main+0x634>)
 8009612:	f7ff fc9c 	bl	8008f4e <LL_TIM_CC_DisableChannel>
	  HAL_Delay(200);
 8009616:	20c8      	movs	r0, #200	; 0xc8
 8009618:	f7f7 fcba 	bl	8000f90 <HAL_Delay>
  while(Is_iBus_Received() == 0)
 800961c:	f001 f9b2 	bl	800a984 <Is_iBus_Received>
 8009620:	4603      	mov	r3, r0
 8009622:	2b00      	cmp	r3, #0
 8009624:	d0e6      	beq.n	80095f4 <main+0x554>
  }

  if(iBus.SwC == 2000)
 8009626:	4b30      	ldr	r3, [pc, #192]	; (80096e8 <main+0x648>)
 8009628:	899b      	ldrh	r3, [r3, #12]
 800962a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800962e:	d17d      	bne.n	800972c <main+0x68c>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009630:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009634:	4827      	ldr	r0, [pc, #156]	; (80096d4 <main+0x634>)
 8009636:	f7ff fc79 	bl	8008f2c <LL_TIM_CC_EnableChannel>

	  TIM3->PSC = 1500;
 800963a:	4b26      	ldr	r3, [pc, #152]	; (80096d4 <main+0x634>)
 800963c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009640:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 8009642:	20c8      	movs	r0, #200	; 0xc8
 8009644:	f7f7 fca4 	bl	8000f90 <HAL_Delay>
	  TIM3->PSC = 2000;
 8009648:	4b22      	ldr	r3, [pc, #136]	; (80096d4 <main+0x634>)
 800964a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800964e:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 8009650:	20c8      	movs	r0, #200	; 0xc8
 8009652:	f7f7 fc9d 	bl	8000f90 <HAL_Delay>
	  TIM3->PSC = 1500;
 8009656:	4b1f      	ldr	r3, [pc, #124]	; (80096d4 <main+0x634>)
 8009658:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800965c:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 800965e:	20c8      	movs	r0, #200	; 0xc8
 8009660:	f7f7 fc96 	bl	8000f90 <HAL_Delay>
	  TIM3->PSC = 2000;
 8009664:	4b1b      	ldr	r3, [pc, #108]	; (80096d4 <main+0x634>)
 8009666:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800966a:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 800966c:	20c8      	movs	r0, #200	; 0xc8
 800966e:	f7f7 fc8f 	bl	8000f90 <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009672:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009676:	4817      	ldr	r0, [pc, #92]	; (80096d4 <main+0x634>)
 8009678:	f7ff fc69 	bl	8008f4e <LL_TIM_CC_DisableChannel>

	  ESC_Calibration();
 800967c:	f001 f954 	bl	800a928 <ESC_Calibration>
	  while(iBus.SwC != 1000)
 8009680:	e04e      	b.n	8009720 <main+0x680>
 8009682:	bf00      	nop
 8009684:	08010154 	.word	0x08010154
 8009688:	08010168 	.word	0x08010168
 800968c:	20000358 	.word	0x20000358
 8009690:	20000354 	.word	0x20000354
 8009694:	20000350 	.word	0x20000350
 8009698:	20000390 	.word	0x20000390
 800969c:	2000038c 	.word	0x2000038c
 80096a0:	20000388 	.word	0x20000388
 80096a4:	200003c8 	.word	0x200003c8
 80096a8:	200003c4 	.word	0x200003c4
 80096ac:	200003c0 	.word	0x200003c0
 80096b0:	20000400 	.word	0x20000400
 80096b4:	200003fc 	.word	0x200003fc
 80096b8:	200003f8 	.word	0x200003f8
 80096bc:	20000438 	.word	0x20000438
 80096c0:	20000434 	.word	0x20000434
 80096c4:	20000430 	.word	0x20000430
 80096c8:	20000470 	.word	0x20000470
 80096cc:	2000046c 	.word	0x2000046c
 80096d0:	20000468 	.word	0x20000468
 80096d4:	40000400 	.word	0x40000400
 80096d8:	0801017c 	.word	0x0801017c
 80096dc:	200005a8 	.word	0x200005a8
 80096e0:	20000654 	.word	0x20000654
 80096e4:	08010198 	.word	0x08010198
 80096e8:	200002cc 	.word	0x200002cc
	  {
		  Is_iBus_Received();
 80096ec:	f001 f94a 	bl	800a984 <Is_iBus_Received>
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80096f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80096f4:	4835      	ldr	r0, [pc, #212]	; (80097cc <main+0x72c>)
 80096f6:	f7ff fc19 	bl	8008f2c <LL_TIM_CC_EnableChannel>

		  TIM3->PSC = 1500;
 80096fa:	4b34      	ldr	r3, [pc, #208]	; (80097cc <main+0x72c>)
 80096fc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009700:	629a      	str	r2, [r3, #40]	; 0x28
		  HAL_Delay(200);
 8009702:	20c8      	movs	r0, #200	; 0xc8
 8009704:	f7f7 fc44 	bl	8000f90 <HAL_Delay>
		  TIM3->PSC = 2000;
 8009708:	4b30      	ldr	r3, [pc, #192]	; (80097cc <main+0x72c>)
 800970a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800970e:	629a      	str	r2, [r3, #40]	; 0x28
		  HAL_Delay(200);
 8009710:	20c8      	movs	r0, #200	; 0xc8
 8009712:	f7f7 fc3d 	bl	8000f90 <HAL_Delay>
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009716:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800971a:	482c      	ldr	r0, [pc, #176]	; (80097cc <main+0x72c>)
 800971c:	f7ff fc17 	bl	8008f4e <LL_TIM_CC_DisableChannel>
	  while(iBus.SwC != 1000)
 8009720:	4b2b      	ldr	r3, [pc, #172]	; (80097d0 <main+0x730>)
 8009722:	899b      	ldrh	r3, [r3, #12]
 8009724:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009728:	d1e0      	bne.n	80096ec <main+0x64c>
 800972a:	e067      	b.n	80097fc <main+0x75c>
	  }
  }
  else if(iBus.SwC == 1500)
 800972c:	4b28      	ldr	r3, [pc, #160]	; (80097d0 <main+0x730>)
 800972e:	899b      	ldrh	r3, [r3, #12]
 8009730:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009734:	4293      	cmp	r3, r2
 8009736:	d161      	bne.n	80097fc <main+0x75c>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009738:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800973c:	4823      	ldr	r0, [pc, #140]	; (80097cc <main+0x72c>)
 800973e:	f7ff fbf5 	bl	8008f2c <LL_TIM_CC_EnableChannel>

	  TIM3->PSC = 1500;
 8009742:	4b22      	ldr	r3, [pc, #136]	; (80097cc <main+0x72c>)
 8009744:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009748:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 800974a:	20c8      	movs	r0, #200	; 0xc8
 800974c:	f7f7 fc20 	bl	8000f90 <HAL_Delay>
	  TIM3->PSC = 2000;
 8009750:	4b1e      	ldr	r3, [pc, #120]	; (80097cc <main+0x72c>)
 8009752:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009756:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 8009758:	20c8      	movs	r0, #200	; 0xc8
 800975a:	f7f7 fc19 	bl	8000f90 <HAL_Delay>
	  TIM3->PSC = 1500;
 800975e:	4b1b      	ldr	r3, [pc, #108]	; (80097cc <main+0x72c>)
 8009760:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009764:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 8009766:	20c8      	movs	r0, #200	; 0xc8
 8009768:	f7f7 fc12 	bl	8000f90 <HAL_Delay>
	  TIM3->PSC = 2000;
 800976c:	4b17      	ldr	r3, [pc, #92]	; (80097cc <main+0x72c>)
 800976e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009772:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 8009774:	20c8      	movs	r0, #200	; 0xc8
 8009776:	f7f7 fc0b 	bl	8000f90 <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800977a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800977e:	4813      	ldr	r0, [pc, #76]	; (80097cc <main+0x72c>)
 8009780:	f7ff fbe5 	bl	8008f4e <LL_TIM_CC_DisableChannel>

	  BNO080_Calibration();
 8009784:	f001 f91e 	bl	800a9c4 <BNO080_Calibration>
	  while(iBus.SwC != 1000)
 8009788:	e019      	b.n	80097be <main+0x71e>
	  {
		  Is_iBus_Received();
 800978a:	f001 f8fb 	bl	800a984 <Is_iBus_Received>
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800978e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009792:	480e      	ldr	r0, [pc, #56]	; (80097cc <main+0x72c>)
 8009794:	f7ff fbca 	bl	8008f2c <LL_TIM_CC_EnableChannel>

		  TIM3->PSC = 1500;
 8009798:	4b0c      	ldr	r3, [pc, #48]	; (80097cc <main+0x72c>)
 800979a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800979e:	629a      	str	r2, [r3, #40]	; 0x28
		  HAL_Delay(200);
 80097a0:	20c8      	movs	r0, #200	; 0xc8
 80097a2:	f7f7 fbf5 	bl	8000f90 <HAL_Delay>
		  TIM3->PSC = 2000;
 80097a6:	4b09      	ldr	r3, [pc, #36]	; (80097cc <main+0x72c>)
 80097a8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80097ac:	629a      	str	r2, [r3, #40]	; 0x28
		  HAL_Delay(200);
 80097ae:	20c8      	movs	r0, #200	; 0xc8
 80097b0:	f7f7 fbee 	bl	8000f90 <HAL_Delay>
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80097b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80097b8:	4804      	ldr	r0, [pc, #16]	; (80097cc <main+0x72c>)
 80097ba:	f7ff fbc8 	bl	8008f4e <LL_TIM_CC_DisableChannel>
	  while(iBus.SwC != 1000)
 80097be:	4b04      	ldr	r3, [pc, #16]	; (80097d0 <main+0x730>)
 80097c0:	899b      	ldrh	r3, [r3, #12]
 80097c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80097c6:	d1e0      	bne.n	800978a <main+0x6ea>
	  }
  }
//
//
  while(Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000)
 80097c8:	e018      	b.n	80097fc <main+0x75c>
 80097ca:	bf00      	nop
 80097cc:	40000400 	.word	0x40000400
 80097d0:	200002cc 	.word	0x200002cc
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80097d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80097d8:	489b      	ldr	r0, [pc, #620]	; (8009a48 <main+0x9a8>)
 80097da:	f7ff fba7 	bl	8008f2c <LL_TIM_CC_EnableChannel>

	  TIM3->PSC = 1000;
 80097de:	4b9a      	ldr	r3, [pc, #616]	; (8009a48 <main+0x9a8>)
 80097e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80097e4:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(70);
 80097e6:	2046      	movs	r0, #70	; 0x46
 80097e8:	f7f7 fbd2 	bl	8000f90 <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80097ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80097f0:	4895      	ldr	r0, [pc, #596]	; (8009a48 <main+0x9a8>)
 80097f2:	f7ff fbac 	bl	8008f4e <LL_TIM_CC_DisableChannel>
	  HAL_Delay(70);
 80097f6:	2046      	movs	r0, #70	; 0x46
 80097f8:	f7f7 fbca 	bl	8000f90 <HAL_Delay>
  while(Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000)
 80097fc:	f001 f86e 	bl	800a8dc <Is_iBus_Throttle_Min>
 8009800:	4603      	mov	r3, r0
 8009802:	2b00      	cmp	r3, #0
 8009804:	d0e6      	beq.n	80097d4 <main+0x734>
 8009806:	4b91      	ldr	r3, [pc, #580]	; (8009a4c <main+0x9ac>)
 8009808:	891b      	ldrh	r3, [r3, #8]
 800980a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800980e:	d0e1      	beq.n	80097d4 <main+0x734>
  }




  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009810:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009814:	488c      	ldr	r0, [pc, #560]	; (8009a48 <main+0x9a8>)
 8009816:	f7ff fb89 	bl	8008f2c <LL_TIM_CC_EnableChannel>

  TIM3->PSC = 2000;
 800981a:	4b8b      	ldr	r3, [pc, #556]	; (8009a48 <main+0x9a8>)
 800981c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009820:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8009822:	2064      	movs	r0, #100	; 0x64
 8009824:	f7f7 fbb4 	bl	8000f90 <HAL_Delay>
  TIM3->PSC = 1500;
 8009828:	4b87      	ldr	r3, [pc, #540]	; (8009a48 <main+0x9a8>)
 800982a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800982e:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8009830:	2064      	movs	r0, #100	; 0x64
 8009832:	f7f7 fbad 	bl	8000f90 <HAL_Delay>
  TIM3->PSC = 1000;
 8009836:	4b84      	ldr	r3, [pc, #528]	; (8009a48 <main+0x9a8>)
 8009838:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800983c:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 800983e:	2064      	movs	r0, #100	; 0x64
 8009840:	f7f7 fba6 	bl	8000f90 <HAL_Delay>

  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009844:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009848:	487f      	ldr	r0, [pc, #508]	; (8009a48 <main+0x9a8>)
 800984a:	f7ff fb80 	bl	8008f4e <LL_TIM_CC_DisableChannel>

  printf("Start\n");
 800984e:	4880      	ldr	r0, [pc, #512]	; (8009a50 <main+0x9b0>)
 8009850:	f003 fc52 	bl	800d0f8 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(tim7_1ms_flag == 1)
 8009854:	4b7f      	ldr	r3, [pc, #508]	; (8009a54 <main+0x9b4>)
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	2b01      	cmp	r3, #1
 800985a:	f040 81a8 	bne.w	8009bae <main+0xb0e>
	  {
		  tim7_1ms_flag = 0;
 800985e:	4b7d      	ldr	r3, [pc, #500]	; (8009a54 <main+0x9b4>)
 8009860:	2200      	movs	r2, #0
 8009862:	701a      	strb	r2, [r3, #0]

		  Double_Roll_Pitch_PID_Calculation(&pitch, (iBus.RV - 1500) * 0.1f, BNO080_Pitch, ICM20602.gyro_x);
 8009864:	4b79      	ldr	r3, [pc, #484]	; (8009a4c <main+0x9ac>)
 8009866:	885b      	ldrh	r3, [r3, #2]
 8009868:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800986c:	ee07 3a90 	vmov	s15, r3
 8009870:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009874:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8009a58 <main+0x9b8>
 8009878:	ee67 7a87 	vmul.f32	s15, s15, s14
 800987c:	4b77      	ldr	r3, [pc, #476]	; (8009a5c <main+0x9bc>)
 800987e:	ed93 7a00 	vldr	s14, [r3]
 8009882:	4b77      	ldr	r3, [pc, #476]	; (8009a60 <main+0x9c0>)
 8009884:	edd3 6a07 	vldr	s13, [r3, #28]
 8009888:	eeb0 1a66 	vmov.f32	s2, s13
 800988c:	eef0 0a47 	vmov.f32	s1, s14
 8009890:	eeb0 0a67 	vmov.f32	s0, s15
 8009894:	4873      	ldr	r0, [pc, #460]	; (8009a64 <main+0x9c4>)
 8009896:	f7fe fd2d 	bl	80082f4 <Double_Roll_Pitch_PID_Calculation>
		  Double_Roll_Pitch_PID_Calculation(&roll, (iBus.RH - 1500) * 0.1f, BNO080_Roll, ICM20602.gyro_y);
 800989a:	4b6c      	ldr	r3, [pc, #432]	; (8009a4c <main+0x9ac>)
 800989c:	881b      	ldrh	r3, [r3, #0]
 800989e:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80098a2:	ee07 3a90 	vmov	s15, r3
 80098a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80098aa:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8009a58 <main+0x9b8>
 80098ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80098b2:	4b6d      	ldr	r3, [pc, #436]	; (8009a68 <main+0x9c8>)
 80098b4:	ed93 7a00 	vldr	s14, [r3]
 80098b8:	4b69      	ldr	r3, [pc, #420]	; (8009a60 <main+0x9c0>)
 80098ba:	edd3 6a08 	vldr	s13, [r3, #32]
 80098be:	eeb0 1a66 	vmov.f32	s2, s13
 80098c2:	eef0 0a47 	vmov.f32	s1, s14
 80098c6:	eeb0 0a67 	vmov.f32	s0, s15
 80098ca:	4868      	ldr	r0, [pc, #416]	; (8009a6c <main+0x9cc>)
 80098cc:	f7fe fd12 	bl	80082f4 <Double_Roll_Pitch_PID_Calculation>

		  if(iBus.LV < 1030 || motor_arming_flag == 0)
 80098d0:	4b5e      	ldr	r3, [pc, #376]	; (8009a4c <main+0x9ac>)
 80098d2:	889b      	ldrh	r3, [r3, #4]
 80098d4:	f240 4205 	movw	r2, #1029	; 0x405
 80098d8:	4293      	cmp	r3, r2
 80098da:	d903      	bls.n	80098e4 <main+0x844>
 80098dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d101      	bne.n	80098e8 <main+0x848>
		  {
			  Reset_All_PID_Integrator();
 80098e4:	f7fe ff5e 	bl	80087a4 <Reset_All_PID_Integrator>
		  }

		  if(iBus.LH < 1485 || iBus.LH > 1515)
 80098e8:	4b58      	ldr	r3, [pc, #352]	; (8009a4c <main+0x9ac>)
 80098ea:	88db      	ldrh	r3, [r3, #6]
 80098ec:	f240 52cc 	movw	r2, #1484	; 0x5cc
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d906      	bls.n	8009902 <main+0x862>
 80098f4:	4b55      	ldr	r3, [pc, #340]	; (8009a4c <main+0x9ac>)
 80098f6:	88db      	ldrh	r3, [r3, #6]
 80098f8:	f240 52eb 	movw	r2, #1515	; 0x5eb
 80098fc:	4293      	cmp	r3, r2
 80098fe:	f240 80bb 	bls.w	8009a78 <main+0x9d8>
		  {
			  yaw_heading_reference = BNO080_Yaw;
 8009902:	4b5b      	ldr	r3, [pc, #364]	; (8009a70 <main+0x9d0>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	62fb      	str	r3, [r7, #44]	; 0x2c
			  Single_Yaw_Rate_PID_Calculation(&yaw_rate, (iBus.LH - 1500), ICM20602.gyro_z);
 8009908:	4b50      	ldr	r3, [pc, #320]	; (8009a4c <main+0x9ac>)
 800990a:	88db      	ldrh	r3, [r3, #6]
 800990c:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8009910:	ee07 3a90 	vmov	s15, r3
 8009914:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009918:	4b51      	ldr	r3, [pc, #324]	; (8009a60 <main+0x9c0>)
 800991a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800991e:	eef0 0a47 	vmov.f32	s1, s14
 8009922:	eeb0 0a67 	vmov.f32	s0, s15
 8009926:	4853      	ldr	r0, [pc, #332]	; (8009a74 <main+0x9d4>)
 8009928:	f7fe feb8 	bl	800869c <Single_Yaw_Rate_PID_Calculation>

			  ccr1 = 10500 + 500 + (iBus.LV - 1000) * 10 - pitch.in.pid_result + roll.in.pid_result - yaw_rate.pid_result;
 800992c:	4b47      	ldr	r3, [pc, #284]	; (8009a4c <main+0x9ac>)
 800992e:	889b      	ldrh	r3, [r3, #4]
 8009930:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8009934:	4613      	mov	r3, r2
 8009936:	009b      	lsls	r3, r3, #2
 8009938:	4413      	add	r3, r2
 800993a:	005b      	lsls	r3, r3, #1
 800993c:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8009940:	3338      	adds	r3, #56	; 0x38
 8009942:	ee07 3a90 	vmov	s15, r3
 8009946:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800994a:	4b46      	ldr	r3, [pc, #280]	; (8009a64 <main+0x9c4>)
 800994c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009950:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009954:	4b45      	ldr	r3, [pc, #276]	; (8009a6c <main+0x9cc>)
 8009956:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800995a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800995e:	4b45      	ldr	r3, [pc, #276]	; (8009a74 <main+0x9d4>)
 8009960:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009964:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009968:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800996c:	ee17 3a90 	vmov	r3, s15
 8009970:	873b      	strh	r3, [r7, #56]	; 0x38
			  ccr2 = 10500 + 500 + (iBus.LV - 1000) * 10 + pitch.in.pid_result + roll.in.pid_result + yaw_rate.pid_result;
 8009972:	4b36      	ldr	r3, [pc, #216]	; (8009a4c <main+0x9ac>)
 8009974:	889b      	ldrh	r3, [r3, #4]
 8009976:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 800997a:	4613      	mov	r3, r2
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	4413      	add	r3, r2
 8009980:	005b      	lsls	r3, r3, #1
 8009982:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8009986:	3338      	adds	r3, #56	; 0x38
 8009988:	ee07 3a90 	vmov	s15, r3
 800998c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009990:	4b34      	ldr	r3, [pc, #208]	; (8009a64 <main+0x9c4>)
 8009992:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009996:	ee37 7a27 	vadd.f32	s14, s14, s15
 800999a:	4b34      	ldr	r3, [pc, #208]	; (8009a6c <main+0x9cc>)
 800999c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80099a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80099a4:	4b33      	ldr	r3, [pc, #204]	; (8009a74 <main+0x9d4>)
 80099a6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80099aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80099ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099b2:	ee17 3a90 	vmov	r3, s15
 80099b6:	86fb      	strh	r3, [r7, #54]	; 0x36
			  ccr3 = 10500 + 500 + (iBus.LV - 1000) * 10 + pitch.in.pid_result - roll.in.pid_result - yaw_rate.pid_result;
 80099b8:	4b24      	ldr	r3, [pc, #144]	; (8009a4c <main+0x9ac>)
 80099ba:	889b      	ldrh	r3, [r3, #4]
 80099bc:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 80099c0:	4613      	mov	r3, r2
 80099c2:	009b      	lsls	r3, r3, #2
 80099c4:	4413      	add	r3, r2
 80099c6:	005b      	lsls	r3, r3, #1
 80099c8:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 80099cc:	3338      	adds	r3, #56	; 0x38
 80099ce:	ee07 3a90 	vmov	s15, r3
 80099d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80099d6:	4b23      	ldr	r3, [pc, #140]	; (8009a64 <main+0x9c4>)
 80099d8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80099dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80099e0:	4b22      	ldr	r3, [pc, #136]	; (8009a6c <main+0x9cc>)
 80099e2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80099e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80099ea:	4b22      	ldr	r3, [pc, #136]	; (8009a74 <main+0x9d4>)
 80099ec:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80099f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80099f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099f8:	ee17 3a90 	vmov	r3, s15
 80099fc:	86bb      	strh	r3, [r7, #52]	; 0x34
			  ccr4 = 10500 + 500 + (iBus.LV - 1000) * 10 - pitch.in.pid_result - roll.in.pid_result + yaw_rate.pid_result;
 80099fe:	4b13      	ldr	r3, [pc, #76]	; (8009a4c <main+0x9ac>)
 8009a00:	889b      	ldrh	r3, [r3, #4]
 8009a02:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8009a06:	4613      	mov	r3, r2
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	4413      	add	r3, r2
 8009a0c:	005b      	lsls	r3, r3, #1
 8009a0e:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8009a12:	3338      	adds	r3, #56	; 0x38
 8009a14:	ee07 3a90 	vmov	s15, r3
 8009a18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009a1c:	4b11      	ldr	r3, [pc, #68]	; (8009a64 <main+0x9c4>)
 8009a1e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009a22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009a26:	4b11      	ldr	r3, [pc, #68]	; (8009a6c <main+0x9cc>)
 8009a28:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009a2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009a30:	4b10      	ldr	r3, [pc, #64]	; (8009a74 <main+0x9d4>)
 8009a32:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009a36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a3e:	ee17 3a90 	vmov	r3, s15
 8009a42:	867b      	strh	r3, [r7, #50]	; 0x32
 8009a44:	e0b3      	b.n	8009bae <main+0xb0e>
 8009a46:	bf00      	nop
 8009a48:	40000400 	.word	0x40000400
 8009a4c:	200002cc 	.word	0x200002cc
 8009a50:	080101a8 	.word	0x080101a8
 8009a54:	20000642 	.word	0x20000642
 8009a58:	3dcccccd 	.word	0x3dcccccd
 8009a5c:	200004a4 	.word	0x200004a4
 8009a60:	200002e4 	.word	0x200002e4
 8009a64:	200003c0 	.word	0x200003c0
 8009a68:	200004a0 	.word	0x200004a0
 8009a6c:	20000350 	.word	0x20000350
 8009a70:	200004a8 	.word	0x200004a8
 8009a74:	20000468 	.word	0x20000468
		  }
		  else
		  {
			  Single_Yaw_Heading_PID_Calculation(&yaw_heading, yaw_heading_reference, BNO080_Yaw, ICM20602.gyro_z);
 8009a78:	4bb9      	ldr	r3, [pc, #740]	; (8009d60 <main+0xcc0>)
 8009a7a:	edd3 7a00 	vldr	s15, [r3]
 8009a7e:	4bb9      	ldr	r3, [pc, #740]	; (8009d64 <main+0xcc4>)
 8009a80:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8009a84:	eeb0 1a47 	vmov.f32	s2, s14
 8009a88:	eef0 0a67 	vmov.f32	s1, s15
 8009a8c:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8009a90:	48b5      	ldr	r0, [pc, #724]	; (8009d68 <main+0xcc8>)
 8009a92:	f7fe fd69 	bl	8008568 <Single_Yaw_Heading_PID_Calculation>

			  ccr1 = 10500 + 500 + (iBus.LV - 1000) * 10 - pitch.in.pid_result + roll.in.pid_result - yaw_heading.pid_result;
 8009a96:	4bb5      	ldr	r3, [pc, #724]	; (8009d6c <main+0xccc>)
 8009a98:	889b      	ldrh	r3, [r3, #4]
 8009a9a:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8009a9e:	4613      	mov	r3, r2
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	4413      	add	r3, r2
 8009aa4:	005b      	lsls	r3, r3, #1
 8009aa6:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8009aaa:	3338      	adds	r3, #56	; 0x38
 8009aac:	ee07 3a90 	vmov	s15, r3
 8009ab0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009ab4:	4bae      	ldr	r3, [pc, #696]	; (8009d70 <main+0xcd0>)
 8009ab6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009aba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009abe:	4bad      	ldr	r3, [pc, #692]	; (8009d74 <main+0xcd4>)
 8009ac0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009ac4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009ac8:	4ba7      	ldr	r3, [pc, #668]	; (8009d68 <main+0xcc8>)
 8009aca:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009ace:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ad2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ad6:	ee17 3a90 	vmov	r3, s15
 8009ada:	873b      	strh	r3, [r7, #56]	; 0x38
			  ccr2 = 10500 + 500 + (iBus.LV - 1000) * 10 + pitch.in.pid_result + roll.in.pid_result + yaw_heading.pid_result;
 8009adc:	4ba3      	ldr	r3, [pc, #652]	; (8009d6c <main+0xccc>)
 8009ade:	889b      	ldrh	r3, [r3, #4]
 8009ae0:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8009ae4:	4613      	mov	r3, r2
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	4413      	add	r3, r2
 8009aea:	005b      	lsls	r3, r3, #1
 8009aec:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8009af0:	3338      	adds	r3, #56	; 0x38
 8009af2:	ee07 3a90 	vmov	s15, r3
 8009af6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009afa:	4b9d      	ldr	r3, [pc, #628]	; (8009d70 <main+0xcd0>)
 8009afc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009b00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009b04:	4b9b      	ldr	r3, [pc, #620]	; (8009d74 <main+0xcd4>)
 8009b06:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009b0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009b0e:	4b96      	ldr	r3, [pc, #600]	; (8009d68 <main+0xcc8>)
 8009b10:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009b14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b1c:	ee17 3a90 	vmov	r3, s15
 8009b20:	86fb      	strh	r3, [r7, #54]	; 0x36
			  ccr3 = 10500 + 500 + (iBus.LV - 1000) * 10 + pitch.in.pid_result - roll.in.pid_result - yaw_heading.pid_result;
 8009b22:	4b92      	ldr	r3, [pc, #584]	; (8009d6c <main+0xccc>)
 8009b24:	889b      	ldrh	r3, [r3, #4]
 8009b26:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8009b2a:	4613      	mov	r3, r2
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	4413      	add	r3, r2
 8009b30:	005b      	lsls	r3, r3, #1
 8009b32:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8009b36:	3338      	adds	r3, #56	; 0x38
 8009b38:	ee07 3a90 	vmov	s15, r3
 8009b3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009b40:	4b8b      	ldr	r3, [pc, #556]	; (8009d70 <main+0xcd0>)
 8009b42:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009b46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009b4a:	4b8a      	ldr	r3, [pc, #552]	; (8009d74 <main+0xcd4>)
 8009b4c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009b50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009b54:	4b84      	ldr	r3, [pc, #528]	; (8009d68 <main+0xcc8>)
 8009b56:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009b5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b62:	ee17 3a90 	vmov	r3, s15
 8009b66:	86bb      	strh	r3, [r7, #52]	; 0x34
			  ccr4 = 10500 + 500 + (iBus.LV - 1000) * 10 - pitch.in.pid_result - roll.in.pid_result + yaw_heading.pid_result;
 8009b68:	4b80      	ldr	r3, [pc, #512]	; (8009d6c <main+0xccc>)
 8009b6a:	889b      	ldrh	r3, [r3, #4]
 8009b6c:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8009b70:	4613      	mov	r3, r2
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	4413      	add	r3, r2
 8009b76:	005b      	lsls	r3, r3, #1
 8009b78:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8009b7c:	3338      	adds	r3, #56	; 0x38
 8009b7e:	ee07 3a90 	vmov	s15, r3
 8009b82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009b86:	4b7a      	ldr	r3, [pc, #488]	; (8009d70 <main+0xcd0>)
 8009b88:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009b8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009b90:	4b78      	ldr	r3, [pc, #480]	; (8009d74 <main+0xcd4>)
 8009b92:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009b96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009b9a:	4b73      	ldr	r3, [pc, #460]	; (8009d68 <main+0xcc8>)
 8009b9c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009ba0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ba4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ba8:	ee17 3a90 	vmov	r3, s15
 8009bac:	867b      	strh	r3, [r7, #50]	; 0x32
		  //printf("%f\t%f\n", BNO080_Pitch, ICM20602.gyro_x);
		  //printf("%f\t%f\n", BNO080_Roll, ICM20602.gyro_y);
		  //printf("%f\t%f\n", BNO080_Yaw, ICM20602.gyro_z);
	  }

	  if(iBus.SwA == 2000 && iBus_SwA_Prev != 2000)
 8009bae:	4b6f      	ldr	r3, [pc, #444]	; (8009d6c <main+0xccc>)
 8009bb0:	891b      	ldrh	r3, [r3, #8]
 8009bb2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009bb6:	d12e      	bne.n	8009c16 <main+0xb76>
 8009bb8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009bba:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009bbe:	d02a      	beq.n	8009c16 <main+0xb76>
	  {
		  if(iBus.LV < 1010)
 8009bc0:	4b6a      	ldr	r3, [pc, #424]	; (8009d6c <main+0xccc>)
 8009bc2:	889b      	ldrh	r3, [r3, #4]
 8009bc4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d81a      	bhi.n	8009c02 <main+0xb62>
		  {
			  motor_arming_flag = 1;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			  yaw_heading_reference = BNO080_Yaw;
 8009bd2:	4b63      	ldr	r3, [pc, #396]	; (8009d60 <main+0xcc0>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bd8:	e01d      	b.n	8009c16 <main+0xb76>
		  }
		  else
		  {
			  while(Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000)
			  {
				  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009bda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009bde:	4866      	ldr	r0, [pc, #408]	; (8009d78 <main+0xcd8>)
 8009be0:	f7ff f9a4 	bl	8008f2c <LL_TIM_CC_EnableChannel>

				  TIM3->PSC = 1000;
 8009be4:	4b64      	ldr	r3, [pc, #400]	; (8009d78 <main+0xcd8>)
 8009be6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009bea:	629a      	str	r2, [r3, #40]	; 0x28
				  HAL_Delay(70);
 8009bec:	2046      	movs	r0, #70	; 0x46
 8009bee:	f7f7 f9cf 	bl	8000f90 <HAL_Delay>
				  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009bf2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009bf6:	4860      	ldr	r0, [pc, #384]	; (8009d78 <main+0xcd8>)
 8009bf8:	f7ff f9a9 	bl	8008f4e <LL_TIM_CC_DisableChannel>
				  HAL_Delay(70);
 8009bfc:	2046      	movs	r0, #70	; 0x46
 8009bfe:	f7f7 f9c7 	bl	8000f90 <HAL_Delay>
			  while(Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000)
 8009c02:	f000 fe6b 	bl	800a8dc <Is_iBus_Throttle_Min>
 8009c06:	4603      	mov	r3, r0
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d0e6      	beq.n	8009bda <main+0xb3a>
 8009c0c:	4b57      	ldr	r3, [pc, #348]	; (8009d6c <main+0xccc>)
 8009c0e:	891b      	ldrh	r3, [r3, #8]
 8009c10:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009c14:	d0e1      	beq.n	8009bda <main+0xb3a>
			  }
		  }
	  }
	  iBus_SwA_Prev = iBus.SwA;
 8009c16:	4b55      	ldr	r3, [pc, #340]	; (8009d6c <main+0xccc>)
 8009c18:	891b      	ldrh	r3, [r3, #8]
 8009c1a:	87bb      	strh	r3, [r7, #60]	; 0x3c

	  if(iBus.SwA != 2000)
 8009c1c:	4b53      	ldr	r3, [pc, #332]	; (8009d6c <main+0xccc>)
 8009c1e:	891b      	ldrh	r3, [r3, #8]
 8009c20:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009c24:	d002      	beq.n	8009c2c <main+0xb8c>
	  {
		  motor_arming_flag = 0;
 8009c26:	2300      	movs	r3, #0
 8009c28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  }

	  if(motor_arming_flag == 1)
 8009c2c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d170      	bne.n	8009d16 <main+0xc76>
	  {
		  if(failsafe_flag == 0)
 8009c34:	4b51      	ldr	r3, [pc, #324]	; (8009d7c <main+0xcdc>)
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d15b      	bne.n	8009cf4 <main+0xc54>
		  {
			  if(iBus.LV > 1030)
 8009c3c:	4b4b      	ldr	r3, [pc, #300]	; (8009d6c <main+0xccc>)
 8009c3e:	889b      	ldrh	r3, [r3, #4]
 8009c40:	f240 4206 	movw	r2, #1030	; 0x406
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d944      	bls.n	8009cd2 <main+0xc32>
			  {
				  TIM5->CCR1 = ccr1 > 21000 ? 21000 : ccr1 < 11000 ? 11000 : ccr1;
 8009c48:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009c4a:	f245 2208 	movw	r2, #21000	; 0x5208
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d807      	bhi.n	8009c62 <main+0xbc2>
 8009c52:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009c54:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	bf38      	it	cc
 8009c5c:	4613      	movcc	r3, r2
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	e001      	b.n	8009c66 <main+0xbc6>
 8009c62:	f245 2308 	movw	r3, #21000	; 0x5208
 8009c66:	4a46      	ldr	r2, [pc, #280]	; (8009d80 <main+0xce0>)
 8009c68:	6353      	str	r3, [r2, #52]	; 0x34
				  TIM5->CCR2 = ccr2 > 21000 ? 21000 : ccr2 < 11000 ? 11000 : ccr2;
 8009c6a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009c6c:	f245 2208 	movw	r2, #21000	; 0x5208
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d807      	bhi.n	8009c84 <main+0xbe4>
 8009c74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009c76:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	bf38      	it	cc
 8009c7e:	4613      	movcc	r3, r2
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	e001      	b.n	8009c88 <main+0xbe8>
 8009c84:	f245 2308 	movw	r3, #21000	; 0x5208
 8009c88:	4a3d      	ldr	r2, [pc, #244]	; (8009d80 <main+0xce0>)
 8009c8a:	6393      	str	r3, [r2, #56]	; 0x38
				  TIM5->CCR3 = ccr3 > 21000 ? 21000 : ccr3 < 11000 ? 11000 : ccr3;
 8009c8c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009c8e:	f245 2208 	movw	r2, #21000	; 0x5208
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d807      	bhi.n	8009ca6 <main+0xc06>
 8009c96:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009c98:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	bf38      	it	cc
 8009ca0:	4613      	movcc	r3, r2
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	e001      	b.n	8009caa <main+0xc0a>
 8009ca6:	f245 2308 	movw	r3, #21000	; 0x5208
 8009caa:	4a35      	ldr	r2, [pc, #212]	; (8009d80 <main+0xce0>)
 8009cac:	63d3      	str	r3, [r2, #60]	; 0x3c
				  TIM5->CCR4 = ccr4 > 21000 ? 21000 : ccr4 < 11000 ? 11000 : ccr4;
 8009cae:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009cb0:	f245 2208 	movw	r2, #21000	; 0x5208
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d807      	bhi.n	8009cc8 <main+0xc28>
 8009cb8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009cba:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	bf38      	it	cc
 8009cc2:	4613      	movcc	r3, r2
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	e001      	b.n	8009ccc <main+0xc2c>
 8009cc8:	f245 2308 	movw	r3, #21000	; 0x5208
 8009ccc:	4a2c      	ldr	r2, [pc, #176]	; (8009d80 <main+0xce0>)
 8009cce:	6413      	str	r3, [r2, #64]	; 0x40
 8009cd0:	e031      	b.n	8009d36 <main+0xc96>
			  }
			  else
			  {
				  TIM5->CCR1 = 11000;
 8009cd2:	4b2b      	ldr	r3, [pc, #172]	; (8009d80 <main+0xce0>)
 8009cd4:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8009cd8:	635a      	str	r2, [r3, #52]	; 0x34
				  TIM5->CCR2 = 11000;
 8009cda:	4b29      	ldr	r3, [pc, #164]	; (8009d80 <main+0xce0>)
 8009cdc:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8009ce0:	639a      	str	r2, [r3, #56]	; 0x38
				  TIM5->CCR3 = 11000;
 8009ce2:	4b27      	ldr	r3, [pc, #156]	; (8009d80 <main+0xce0>)
 8009ce4:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8009ce8:	63da      	str	r2, [r3, #60]	; 0x3c
				  TIM5->CCR4 = 11000;
 8009cea:	4b25      	ldr	r3, [pc, #148]	; (8009d80 <main+0xce0>)
 8009cec:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8009cf0:	641a      	str	r2, [r3, #64]	; 0x40
 8009cf2:	e020      	b.n	8009d36 <main+0xc96>
			  }
		  }
		  else
		  {
			  TIM5->CCR1 = 10500;
 8009cf4:	4b22      	ldr	r3, [pc, #136]	; (8009d80 <main+0xce0>)
 8009cf6:	f642 1204 	movw	r2, #10500	; 0x2904
 8009cfa:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM5->CCR2 = 10500;
 8009cfc:	4b20      	ldr	r3, [pc, #128]	; (8009d80 <main+0xce0>)
 8009cfe:	f642 1204 	movw	r2, #10500	; 0x2904
 8009d02:	639a      	str	r2, [r3, #56]	; 0x38
			  TIM5->CCR3 = 10500;
 8009d04:	4b1e      	ldr	r3, [pc, #120]	; (8009d80 <main+0xce0>)
 8009d06:	f642 1204 	movw	r2, #10500	; 0x2904
 8009d0a:	63da      	str	r2, [r3, #60]	; 0x3c
			  TIM5->CCR4 = 10500;
 8009d0c:	4b1c      	ldr	r3, [pc, #112]	; (8009d80 <main+0xce0>)
 8009d0e:	f642 1204 	movw	r2, #10500	; 0x2904
 8009d12:	641a      	str	r2, [r3, #64]	; 0x40
 8009d14:	e00f      	b.n	8009d36 <main+0xc96>
		  }
	  }
	  else
	  {
		  TIM5->CCR1 = 10500;
 8009d16:	4b1a      	ldr	r3, [pc, #104]	; (8009d80 <main+0xce0>)
 8009d18:	f642 1204 	movw	r2, #10500	; 0x2904
 8009d1c:	635a      	str	r2, [r3, #52]	; 0x34
		  TIM5->CCR2 = 10500;
 8009d1e:	4b18      	ldr	r3, [pc, #96]	; (8009d80 <main+0xce0>)
 8009d20:	f642 1204 	movw	r2, #10500	; 0x2904
 8009d24:	639a      	str	r2, [r3, #56]	; 0x38
		  TIM5->CCR3 = 10500;
 8009d26:	4b16      	ldr	r3, [pc, #88]	; (8009d80 <main+0xce0>)
 8009d28:	f642 1204 	movw	r2, #10500	; 0x2904
 8009d2c:	63da      	str	r2, [r3, #60]	; 0x3c
		  TIM5->CCR4 = 10500;
 8009d2e:	4b14      	ldr	r3, [pc, #80]	; (8009d80 <main+0xce0>)
 8009d30:	f642 1204 	movw	r2, #10500	; 0x2904
 8009d34:	641a      	str	r2, [r3, #64]	; 0x40
	  }

	  if(telemetry_rx_cplt_flag == 1)
 8009d36:	4b13      	ldr	r3, [pc, #76]	; (8009d84 <main+0xce4>)
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	f040 839a 	bne.w	800a474 <main+0x13d4>
	  {
		  telemetry_rx_cplt_flag = 0;
 8009d40:	4b10      	ldr	r3, [pc, #64]	; (8009d84 <main+0xce4>)
 8009d42:	2200      	movs	r2, #0
 8009d44:	701a      	strb	r2, [r3, #0]

		  if(iBus.SwA == 1000)
 8009d46:	4b09      	ldr	r3, [pc, #36]	; (8009d6c <main+0xccc>)
 8009d48:	891b      	ldrh	r3, [r3, #8]
 8009d4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009d4e:	f040 8391 	bne.w	800a474 <main+0x13d4>
		  {
			  unsigned char chksum = 0xff;
 8009d52:	23ff      	movs	r3, #255	; 0xff
 8009d54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			  for(int i=0;i<19;i++) chksum = chksum - telemetry_rx_buf[i];
 8009d58:	2300      	movs	r3, #0
 8009d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8009d5c:	e020      	b.n	8009da0 <main+0xd00>
 8009d5e:	bf00      	nop
 8009d60:	200004a8 	.word	0x200004a8
 8009d64:	200002e4 	.word	0x200002e4
 8009d68:	20000430 	.word	0x20000430
 8009d6c:	200002cc 	.word	0x200002cc
 8009d70:	200003c0 	.word	0x200003c0
 8009d74:	20000350 	.word	0x20000350
 8009d78:	40000400 	.word	0x40000400
 8009d7c:	200005ec 	.word	0x200005ec
 8009d80:	40000c00 	.word	0x40000c00
 8009d84:	200005e4 	.word	0x200005e4
 8009d88:	4aac      	ldr	r2, [pc, #688]	; (800a03c <main+0xf9c>)
 8009d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8c:	4413      	add	r3, r2
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8009d94:	1ad3      	subs	r3, r2, r3
 8009d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8009da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da2:	2b12      	cmp	r3, #18
 8009da4:	ddf0      	ble.n	8009d88 <main+0xce8>

			  if(chksum == telemetry_rx_buf[19])
 8009da6:	4ba5      	ldr	r3, [pc, #660]	; (800a03c <main+0xf9c>)
 8009da8:	7cdb      	ldrb	r3, [r3, #19]
 8009daa:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8009dae:	429a      	cmp	r2, r3
 8009db0:	f040 8360 	bne.w	800a474 <main+0x13d4>
			  {
				  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009db4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009db8:	48a1      	ldr	r0, [pc, #644]	; (800a040 <main+0xfa0>)
 8009dba:	f7ff f8b7 	bl	8008f2c <LL_TIM_CC_EnableChannel>

				  TIM3->PSC = 1000;
 8009dbe:	4ba0      	ldr	r3, [pc, #640]	; (800a040 <main+0xfa0>)
 8009dc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009dc4:	629a      	str	r2, [r3, #40]	; 0x28
				  HAL_Delay(10);
 8009dc6:	200a      	movs	r0, #10
 8009dc8:	f7f7 f8e2 	bl	8000f90 <HAL_Delay>

				  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009dcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009dd0:	489b      	ldr	r0, [pc, #620]	; (800a040 <main+0xfa0>)
 8009dd2:	f7ff f8bc 	bl	8008f4e <LL_TIM_CC_DisableChannel>

				  switch(telemetry_rx_buf[2])
 8009dd6:	4b99      	ldr	r3, [pc, #612]	; (800a03c <main+0xf9c>)
 8009dd8:	789b      	ldrb	r3, [r3, #2]
 8009dda:	2b10      	cmp	r3, #16
 8009ddc:	f200 834d 	bhi.w	800a47a <main+0x13da>
 8009de0:	a201      	add	r2, pc, #4	; (adr r2, 8009de8 <main+0xd48>)
 8009de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de6:	bf00      	nop
 8009de8:	08009e2d 	.word	0x08009e2d
 8009dec:	08009eb1 	.word	0x08009eb1
 8009df0:	08009f35 	.word	0x08009f35
 8009df4:	08009fb9 	.word	0x08009fb9
 8009df8:	0800a089 	.word	0x0800a089
 8009dfc:	0800a10d 	.word	0x0800a10d
 8009e00:	0800a47b 	.word	0x0800a47b
 8009e04:	0800a47b 	.word	0x0800a47b
 8009e08:	0800a47b 	.word	0x0800a47b
 8009e0c:	0800a47b 	.word	0x0800a47b
 8009e10:	0800a47b 	.word	0x0800a47b
 8009e14:	0800a47b 	.word	0x0800a47b
 8009e18:	0800a47b 	.word	0x0800a47b
 8009e1c:	0800a47b 	.word	0x0800a47b
 8009e20:	0800a47b 	.word	0x0800a47b
 8009e24:	0800a47b 	.word	0x0800a47b
 8009e28:	0800a191 	.word	0x0800a191
				  {
				  case 0:
					  roll.in.kp = *(float*)&telemetry_rx_buf[3];
 8009e2c:	4b85      	ldr	r3, [pc, #532]	; (800a044 <main+0xfa4>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4a85      	ldr	r2, [pc, #532]	; (800a048 <main+0xfa8>)
 8009e32:	6013      	str	r3, [r2, #0]
					  roll.in.ki = *(float*)&telemetry_rx_buf[7];
 8009e34:	4b85      	ldr	r3, [pc, #532]	; (800a04c <main+0xfac>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4a83      	ldr	r2, [pc, #524]	; (800a048 <main+0xfa8>)
 8009e3a:	6053      	str	r3, [r2, #4]
					  roll.in.kd = *(float*)&telemetry_rx_buf[11];
 8009e3c:	4b84      	ldr	r3, [pc, #528]	; (800a050 <main+0xfb0>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4a81      	ldr	r2, [pc, #516]	; (800a048 <main+0xfa8>)
 8009e42:	6093      	str	r3, [r2, #8]
					  EP_PIDGain_Write(telemetry_rx_buf[2], roll.in.kp, roll.in.ki, roll.in.kd);
 8009e44:	4b7d      	ldr	r3, [pc, #500]	; (800a03c <main+0xf9c>)
 8009e46:	789b      	ldrb	r3, [r3, #2]
 8009e48:	4a7f      	ldr	r2, [pc, #508]	; (800a048 <main+0xfa8>)
 8009e4a:	edd2 7a00 	vldr	s15, [r2]
 8009e4e:	4a7e      	ldr	r2, [pc, #504]	; (800a048 <main+0xfa8>)
 8009e50:	ed92 7a01 	vldr	s14, [r2, #4]
 8009e54:	4a7c      	ldr	r2, [pc, #496]	; (800a048 <main+0xfa8>)
 8009e56:	edd2 6a02 	vldr	s13, [r2, #8]
 8009e5a:	eeb0 1a66 	vmov.f32	s2, s13
 8009e5e:	eef0 0a47 	vmov.f32	s1, s14
 8009e62:	eeb0 0a67 	vmov.f32	s0, s15
 8009e66:	4618      	mov	r0, r3
 8009e68:	f7fc f996 	bl	8006198 <EP_PIDGain_Write>
					  EP_PIDGain_Read(telemetry_rx_buf[2], &roll.in.kp, &roll.in.ki, &roll.in.kd);
 8009e6c:	4b73      	ldr	r3, [pc, #460]	; (800a03c <main+0xf9c>)
 8009e6e:	7898      	ldrb	r0, [r3, #2]
 8009e70:	4b78      	ldr	r3, [pc, #480]	; (800a054 <main+0xfb4>)
 8009e72:	4a79      	ldr	r2, [pc, #484]	; (800a058 <main+0xfb8>)
 8009e74:	4974      	ldr	r1, [pc, #464]	; (800a048 <main+0xfa8>)
 8009e76:	f7fc fa25 	bl	80062c4 <EP_PIDGain_Read>
					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], roll.in.kp, roll.in.ki, roll.in.kd);
 8009e7a:	4b70      	ldr	r3, [pc, #448]	; (800a03c <main+0xf9c>)
 8009e7c:	789b      	ldrb	r3, [r3, #2]
 8009e7e:	4a72      	ldr	r2, [pc, #456]	; (800a048 <main+0xfa8>)
 8009e80:	edd2 7a00 	vldr	s15, [r2]
 8009e84:	4a70      	ldr	r2, [pc, #448]	; (800a048 <main+0xfa8>)
 8009e86:	ed92 7a01 	vldr	s14, [r2, #4]
 8009e8a:	4a6f      	ldr	r2, [pc, #444]	; (800a048 <main+0xfa8>)
 8009e8c:	edd2 6a02 	vldr	s13, [r2, #8]
 8009e90:	eeb0 1a66 	vmov.f32	s2, s13
 8009e94:	eef0 0a47 	vmov.f32	s1, s14
 8009e98:	eeb0 0a67 	vmov.f32	s0, s15
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	486f      	ldr	r0, [pc, #444]	; (800a05c <main+0xfbc>)
 8009ea0:	f001 f9aa 	bl	800b1f8 <Encode_Msg_PID_Gain>
					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8009ea4:	2214      	movs	r2, #20
 8009ea6:	496d      	ldr	r1, [pc, #436]	; (800a05c <main+0xfbc>)
 8009ea8:	486d      	ldr	r0, [pc, #436]	; (800a060 <main+0xfc0>)
 8009eaa:	f7f9 fff9 	bl	8003ea0 <HAL_UART_Transmit_IT>
					  break;
 8009eae:	e2e4      	b.n	800a47a <main+0x13da>
				  case 1:
					  roll.out.kp = *(float*)&telemetry_rx_buf[3];
 8009eb0:	4b64      	ldr	r3, [pc, #400]	; (800a044 <main+0xfa4>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a64      	ldr	r2, [pc, #400]	; (800a048 <main+0xfa8>)
 8009eb6:	6393      	str	r3, [r2, #56]	; 0x38
					  roll.out.ki = *(float*)&telemetry_rx_buf[7];
 8009eb8:	4b64      	ldr	r3, [pc, #400]	; (800a04c <main+0xfac>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a62      	ldr	r2, [pc, #392]	; (800a048 <main+0xfa8>)
 8009ebe:	63d3      	str	r3, [r2, #60]	; 0x3c
					  roll.out.kd = *(float*)&telemetry_rx_buf[11];
 8009ec0:	4b63      	ldr	r3, [pc, #396]	; (800a050 <main+0xfb0>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4a60      	ldr	r2, [pc, #384]	; (800a048 <main+0xfa8>)
 8009ec6:	6413      	str	r3, [r2, #64]	; 0x40
					  EP_PIDGain_Write(telemetry_rx_buf[2], roll.out.kp, roll.out.ki, roll.out.kd);
 8009ec8:	4b5c      	ldr	r3, [pc, #368]	; (800a03c <main+0xf9c>)
 8009eca:	789b      	ldrb	r3, [r3, #2]
 8009ecc:	4a5e      	ldr	r2, [pc, #376]	; (800a048 <main+0xfa8>)
 8009ece:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8009ed2:	4a5d      	ldr	r2, [pc, #372]	; (800a048 <main+0xfa8>)
 8009ed4:	ed92 7a0f 	vldr	s14, [r2, #60]	; 0x3c
 8009ed8:	4a5b      	ldr	r2, [pc, #364]	; (800a048 <main+0xfa8>)
 8009eda:	edd2 6a10 	vldr	s13, [r2, #64]	; 0x40
 8009ede:	eeb0 1a66 	vmov.f32	s2, s13
 8009ee2:	eef0 0a47 	vmov.f32	s1, s14
 8009ee6:	eeb0 0a67 	vmov.f32	s0, s15
 8009eea:	4618      	mov	r0, r3
 8009eec:	f7fc f954 	bl	8006198 <EP_PIDGain_Write>
					  EP_PIDGain_Read(telemetry_rx_buf[2], &roll.out.kp, &roll.out.ki, &roll.out.kd);
 8009ef0:	4b52      	ldr	r3, [pc, #328]	; (800a03c <main+0xf9c>)
 8009ef2:	7898      	ldrb	r0, [r3, #2]
 8009ef4:	4b5b      	ldr	r3, [pc, #364]	; (800a064 <main+0xfc4>)
 8009ef6:	4a5c      	ldr	r2, [pc, #368]	; (800a068 <main+0xfc8>)
 8009ef8:	495c      	ldr	r1, [pc, #368]	; (800a06c <main+0xfcc>)
 8009efa:	f7fc f9e3 	bl	80062c4 <EP_PIDGain_Read>
					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], roll.out.kp, roll.out.ki, roll.out.kd);
 8009efe:	4b4f      	ldr	r3, [pc, #316]	; (800a03c <main+0xf9c>)
 8009f00:	789b      	ldrb	r3, [r3, #2]
 8009f02:	4a51      	ldr	r2, [pc, #324]	; (800a048 <main+0xfa8>)
 8009f04:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8009f08:	4a4f      	ldr	r2, [pc, #316]	; (800a048 <main+0xfa8>)
 8009f0a:	ed92 7a0f 	vldr	s14, [r2, #60]	; 0x3c
 8009f0e:	4a4e      	ldr	r2, [pc, #312]	; (800a048 <main+0xfa8>)
 8009f10:	edd2 6a10 	vldr	s13, [r2, #64]	; 0x40
 8009f14:	eeb0 1a66 	vmov.f32	s2, s13
 8009f18:	eef0 0a47 	vmov.f32	s1, s14
 8009f1c:	eeb0 0a67 	vmov.f32	s0, s15
 8009f20:	4619      	mov	r1, r3
 8009f22:	484e      	ldr	r0, [pc, #312]	; (800a05c <main+0xfbc>)
 8009f24:	f001 f968 	bl	800b1f8 <Encode_Msg_PID_Gain>
					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8009f28:	2214      	movs	r2, #20
 8009f2a:	494c      	ldr	r1, [pc, #304]	; (800a05c <main+0xfbc>)
 8009f2c:	484c      	ldr	r0, [pc, #304]	; (800a060 <main+0xfc0>)
 8009f2e:	f7f9 ffb7 	bl	8003ea0 <HAL_UART_Transmit_IT>
					  break;
 8009f32:	e2a2      	b.n	800a47a <main+0x13da>
				  case 2:
					  pitch.in.kp = *(float*)&telemetry_rx_buf[3];
 8009f34:	4b43      	ldr	r3, [pc, #268]	; (800a044 <main+0xfa4>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4a4d      	ldr	r2, [pc, #308]	; (800a070 <main+0xfd0>)
 8009f3a:	6013      	str	r3, [r2, #0]
					  pitch.in.ki = *(float*)&telemetry_rx_buf[7];
 8009f3c:	4b43      	ldr	r3, [pc, #268]	; (800a04c <main+0xfac>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	4a4b      	ldr	r2, [pc, #300]	; (800a070 <main+0xfd0>)
 8009f42:	6053      	str	r3, [r2, #4]
					  pitch.in.kd = *(float*)&telemetry_rx_buf[11];
 8009f44:	4b42      	ldr	r3, [pc, #264]	; (800a050 <main+0xfb0>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4a49      	ldr	r2, [pc, #292]	; (800a070 <main+0xfd0>)
 8009f4a:	6093      	str	r3, [r2, #8]
					  EP_PIDGain_Write(telemetry_rx_buf[2], pitch.in.kp, pitch.in.ki, pitch.in.kd);
 8009f4c:	4b3b      	ldr	r3, [pc, #236]	; (800a03c <main+0xf9c>)
 8009f4e:	789b      	ldrb	r3, [r3, #2]
 8009f50:	4a47      	ldr	r2, [pc, #284]	; (800a070 <main+0xfd0>)
 8009f52:	edd2 7a00 	vldr	s15, [r2]
 8009f56:	4a46      	ldr	r2, [pc, #280]	; (800a070 <main+0xfd0>)
 8009f58:	ed92 7a01 	vldr	s14, [r2, #4]
 8009f5c:	4a44      	ldr	r2, [pc, #272]	; (800a070 <main+0xfd0>)
 8009f5e:	edd2 6a02 	vldr	s13, [r2, #8]
 8009f62:	eeb0 1a66 	vmov.f32	s2, s13
 8009f66:	eef0 0a47 	vmov.f32	s1, s14
 8009f6a:	eeb0 0a67 	vmov.f32	s0, s15
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7fc f912 	bl	8006198 <EP_PIDGain_Write>
					  EP_PIDGain_Read(telemetry_rx_buf[2], &pitch.in.kp, &pitch.in.ki, &pitch.in.kd);
 8009f74:	4b31      	ldr	r3, [pc, #196]	; (800a03c <main+0xf9c>)
 8009f76:	7898      	ldrb	r0, [r3, #2]
 8009f78:	4b3e      	ldr	r3, [pc, #248]	; (800a074 <main+0xfd4>)
 8009f7a:	4a3f      	ldr	r2, [pc, #252]	; (800a078 <main+0xfd8>)
 8009f7c:	493c      	ldr	r1, [pc, #240]	; (800a070 <main+0xfd0>)
 8009f7e:	f7fc f9a1 	bl	80062c4 <EP_PIDGain_Read>
					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], pitch.in.kp, pitch.in.ki, pitch.in.kd);
 8009f82:	4b2e      	ldr	r3, [pc, #184]	; (800a03c <main+0xf9c>)
 8009f84:	789b      	ldrb	r3, [r3, #2]
 8009f86:	4a3a      	ldr	r2, [pc, #232]	; (800a070 <main+0xfd0>)
 8009f88:	edd2 7a00 	vldr	s15, [r2]
 8009f8c:	4a38      	ldr	r2, [pc, #224]	; (800a070 <main+0xfd0>)
 8009f8e:	ed92 7a01 	vldr	s14, [r2, #4]
 8009f92:	4a37      	ldr	r2, [pc, #220]	; (800a070 <main+0xfd0>)
 8009f94:	edd2 6a02 	vldr	s13, [r2, #8]
 8009f98:	eeb0 1a66 	vmov.f32	s2, s13
 8009f9c:	eef0 0a47 	vmov.f32	s1, s14
 8009fa0:	eeb0 0a67 	vmov.f32	s0, s15
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	482d      	ldr	r0, [pc, #180]	; (800a05c <main+0xfbc>)
 8009fa8:	f001 f926 	bl	800b1f8 <Encode_Msg_PID_Gain>
					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8009fac:	2214      	movs	r2, #20
 8009fae:	492b      	ldr	r1, [pc, #172]	; (800a05c <main+0xfbc>)
 8009fb0:	482b      	ldr	r0, [pc, #172]	; (800a060 <main+0xfc0>)
 8009fb2:	f7f9 ff75 	bl	8003ea0 <HAL_UART_Transmit_IT>
					  break;
 8009fb6:	e260      	b.n	800a47a <main+0x13da>
				  case 3:
					  pitch.out.kp = *(float*)&telemetry_rx_buf[3];
 8009fb8:	4b22      	ldr	r3, [pc, #136]	; (800a044 <main+0xfa4>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a2c      	ldr	r2, [pc, #176]	; (800a070 <main+0xfd0>)
 8009fbe:	6393      	str	r3, [r2, #56]	; 0x38
					  pitch.out.ki = *(float*)&telemetry_rx_buf[7];
 8009fc0:	4b22      	ldr	r3, [pc, #136]	; (800a04c <main+0xfac>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4a2a      	ldr	r2, [pc, #168]	; (800a070 <main+0xfd0>)
 8009fc6:	63d3      	str	r3, [r2, #60]	; 0x3c
					  pitch.out.kd = *(float*)&telemetry_rx_buf[11];
 8009fc8:	4b21      	ldr	r3, [pc, #132]	; (800a050 <main+0xfb0>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4a28      	ldr	r2, [pc, #160]	; (800a070 <main+0xfd0>)
 8009fce:	6413      	str	r3, [r2, #64]	; 0x40
					  EP_PIDGain_Write(telemetry_rx_buf[2], pitch.out.kp, pitch.out.ki, pitch.out.kd);
 8009fd0:	4b1a      	ldr	r3, [pc, #104]	; (800a03c <main+0xf9c>)
 8009fd2:	789b      	ldrb	r3, [r3, #2]
 8009fd4:	4a26      	ldr	r2, [pc, #152]	; (800a070 <main+0xfd0>)
 8009fd6:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8009fda:	4a25      	ldr	r2, [pc, #148]	; (800a070 <main+0xfd0>)
 8009fdc:	ed92 7a0f 	vldr	s14, [r2, #60]	; 0x3c
 8009fe0:	4a23      	ldr	r2, [pc, #140]	; (800a070 <main+0xfd0>)
 8009fe2:	edd2 6a10 	vldr	s13, [r2, #64]	; 0x40
 8009fe6:	eeb0 1a66 	vmov.f32	s2, s13
 8009fea:	eef0 0a47 	vmov.f32	s1, s14
 8009fee:	eeb0 0a67 	vmov.f32	s0, s15
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f7fc f8d0 	bl	8006198 <EP_PIDGain_Write>
					  EP_PIDGain_Read(telemetry_rx_buf[2], &pitch.out.kp, &pitch.out.ki, &pitch.out.kd);
 8009ff8:	4b10      	ldr	r3, [pc, #64]	; (800a03c <main+0xf9c>)
 8009ffa:	7898      	ldrb	r0, [r3, #2]
 8009ffc:	4b1f      	ldr	r3, [pc, #124]	; (800a07c <main+0xfdc>)
 8009ffe:	4a20      	ldr	r2, [pc, #128]	; (800a080 <main+0xfe0>)
 800a000:	4920      	ldr	r1, [pc, #128]	; (800a084 <main+0xfe4>)
 800a002:	f7fc f95f 	bl	80062c4 <EP_PIDGain_Read>
					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], pitch.out.kp, pitch.out.ki, pitch.out.kd);
 800a006:	4b0d      	ldr	r3, [pc, #52]	; (800a03c <main+0xf9c>)
 800a008:	789b      	ldrb	r3, [r3, #2]
 800a00a:	4a19      	ldr	r2, [pc, #100]	; (800a070 <main+0xfd0>)
 800a00c:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800a010:	4a17      	ldr	r2, [pc, #92]	; (800a070 <main+0xfd0>)
 800a012:	ed92 7a0f 	vldr	s14, [r2, #60]	; 0x3c
 800a016:	4a16      	ldr	r2, [pc, #88]	; (800a070 <main+0xfd0>)
 800a018:	edd2 6a10 	vldr	s13, [r2, #64]	; 0x40
 800a01c:	eeb0 1a66 	vmov.f32	s2, s13
 800a020:	eef0 0a47 	vmov.f32	s1, s14
 800a024:	eeb0 0a67 	vmov.f32	s0, s15
 800a028:	4619      	mov	r1, r3
 800a02a:	480c      	ldr	r0, [pc, #48]	; (800a05c <main+0xfbc>)
 800a02c:	f001 f8e4 	bl	800b1f8 <Encode_Msg_PID_Gain>
					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 800a030:	2214      	movs	r2, #20
 800a032:	490a      	ldr	r1, [pc, #40]	; (800a05c <main+0xfbc>)
 800a034:	480a      	ldr	r0, [pc, #40]	; (800a060 <main+0xfc0>)
 800a036:	f7f9 ff33 	bl	8003ea0 <HAL_UART_Transmit_IT>
					  break;
 800a03a:	e21e      	b.n	800a47a <main+0x13da>
 800a03c:	200005d0 	.word	0x200005d0
 800a040:	40000400 	.word	0x40000400
 800a044:	200005d3 	.word	0x200005d3
 800a048:	20000350 	.word	0x20000350
 800a04c:	200005d7 	.word	0x200005d7
 800a050:	200005db 	.word	0x200005db
 800a054:	20000358 	.word	0x20000358
 800a058:	20000354 	.word	0x20000354
 800a05c:	200005a8 	.word	0x200005a8
 800a060:	20000654 	.word	0x20000654
 800a064:	20000390 	.word	0x20000390
 800a068:	2000038c 	.word	0x2000038c
 800a06c:	20000388 	.word	0x20000388
 800a070:	200003c0 	.word	0x200003c0
 800a074:	200003c8 	.word	0x200003c8
 800a078:	200003c4 	.word	0x200003c4
 800a07c:	20000400 	.word	0x20000400
 800a080:	200003fc 	.word	0x200003fc
 800a084:	200003f8 	.word	0x200003f8
				  case 4:
					  yaw_heading.kp = *(float*)&telemetry_rx_buf[3];
 800a088:	4ba0      	ldr	r3, [pc, #640]	; (800a30c <main+0x126c>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4aa0      	ldr	r2, [pc, #640]	; (800a310 <main+0x1270>)
 800a08e:	6013      	str	r3, [r2, #0]
					  yaw_heading.ki = *(float*)&telemetry_rx_buf[7];
 800a090:	4ba0      	ldr	r3, [pc, #640]	; (800a314 <main+0x1274>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4a9e      	ldr	r2, [pc, #632]	; (800a310 <main+0x1270>)
 800a096:	6053      	str	r3, [r2, #4]
					  yaw_heading.kd = *(float*)&telemetry_rx_buf[11];
 800a098:	4b9f      	ldr	r3, [pc, #636]	; (800a318 <main+0x1278>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4a9c      	ldr	r2, [pc, #624]	; (800a310 <main+0x1270>)
 800a09e:	6093      	str	r3, [r2, #8]
					  EP_PIDGain_Write(telemetry_rx_buf[2], yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 800a0a0:	4b9e      	ldr	r3, [pc, #632]	; (800a31c <main+0x127c>)
 800a0a2:	789b      	ldrb	r3, [r3, #2]
 800a0a4:	4a9a      	ldr	r2, [pc, #616]	; (800a310 <main+0x1270>)
 800a0a6:	edd2 7a00 	vldr	s15, [r2]
 800a0aa:	4a99      	ldr	r2, [pc, #612]	; (800a310 <main+0x1270>)
 800a0ac:	ed92 7a01 	vldr	s14, [r2, #4]
 800a0b0:	4a97      	ldr	r2, [pc, #604]	; (800a310 <main+0x1270>)
 800a0b2:	edd2 6a02 	vldr	s13, [r2, #8]
 800a0b6:	eeb0 1a66 	vmov.f32	s2, s13
 800a0ba:	eef0 0a47 	vmov.f32	s1, s14
 800a0be:	eeb0 0a67 	vmov.f32	s0, s15
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f7fc f868 	bl	8006198 <EP_PIDGain_Write>
					  EP_PIDGain_Read(telemetry_rx_buf[2], &yaw_heading.kp, &yaw_heading.ki, &yaw_heading.kd);
 800a0c8:	4b94      	ldr	r3, [pc, #592]	; (800a31c <main+0x127c>)
 800a0ca:	7898      	ldrb	r0, [r3, #2]
 800a0cc:	4b94      	ldr	r3, [pc, #592]	; (800a320 <main+0x1280>)
 800a0ce:	4a95      	ldr	r2, [pc, #596]	; (800a324 <main+0x1284>)
 800a0d0:	498f      	ldr	r1, [pc, #572]	; (800a310 <main+0x1270>)
 800a0d2:	f7fc f8f7 	bl	80062c4 <EP_PIDGain_Read>
					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 800a0d6:	4b91      	ldr	r3, [pc, #580]	; (800a31c <main+0x127c>)
 800a0d8:	789b      	ldrb	r3, [r3, #2]
 800a0da:	4a8d      	ldr	r2, [pc, #564]	; (800a310 <main+0x1270>)
 800a0dc:	edd2 7a00 	vldr	s15, [r2]
 800a0e0:	4a8b      	ldr	r2, [pc, #556]	; (800a310 <main+0x1270>)
 800a0e2:	ed92 7a01 	vldr	s14, [r2, #4]
 800a0e6:	4a8a      	ldr	r2, [pc, #552]	; (800a310 <main+0x1270>)
 800a0e8:	edd2 6a02 	vldr	s13, [r2, #8]
 800a0ec:	eeb0 1a66 	vmov.f32	s2, s13
 800a0f0:	eef0 0a47 	vmov.f32	s1, s14
 800a0f4:	eeb0 0a67 	vmov.f32	s0, s15
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	488b      	ldr	r0, [pc, #556]	; (800a328 <main+0x1288>)
 800a0fc:	f001 f87c 	bl	800b1f8 <Encode_Msg_PID_Gain>
					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 800a100:	2214      	movs	r2, #20
 800a102:	4989      	ldr	r1, [pc, #548]	; (800a328 <main+0x1288>)
 800a104:	4889      	ldr	r0, [pc, #548]	; (800a32c <main+0x128c>)
 800a106:	f7f9 fecb 	bl	8003ea0 <HAL_UART_Transmit_IT>
					  break;
 800a10a:	e1b6      	b.n	800a47a <main+0x13da>
				  case 5:
					  yaw_rate.kp = *(float*)&telemetry_rx_buf[3];
 800a10c:	4b7f      	ldr	r3, [pc, #508]	; (800a30c <main+0x126c>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4a87      	ldr	r2, [pc, #540]	; (800a330 <main+0x1290>)
 800a112:	6013      	str	r3, [r2, #0]
					  yaw_rate.ki = *(float*)&telemetry_rx_buf[7];
 800a114:	4b7f      	ldr	r3, [pc, #508]	; (800a314 <main+0x1274>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a85      	ldr	r2, [pc, #532]	; (800a330 <main+0x1290>)
 800a11a:	6053      	str	r3, [r2, #4]
					  yaw_rate.kd = *(float*)&telemetry_rx_buf[11];
 800a11c:	4b7e      	ldr	r3, [pc, #504]	; (800a318 <main+0x1278>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a83      	ldr	r2, [pc, #524]	; (800a330 <main+0x1290>)
 800a122:	6093      	str	r3, [r2, #8]
					  EP_PIDGain_Write(telemetry_rx_buf[2], yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 800a124:	4b7d      	ldr	r3, [pc, #500]	; (800a31c <main+0x127c>)
 800a126:	789b      	ldrb	r3, [r3, #2]
 800a128:	4a81      	ldr	r2, [pc, #516]	; (800a330 <main+0x1290>)
 800a12a:	edd2 7a00 	vldr	s15, [r2]
 800a12e:	4a80      	ldr	r2, [pc, #512]	; (800a330 <main+0x1290>)
 800a130:	ed92 7a01 	vldr	s14, [r2, #4]
 800a134:	4a7e      	ldr	r2, [pc, #504]	; (800a330 <main+0x1290>)
 800a136:	edd2 6a02 	vldr	s13, [r2, #8]
 800a13a:	eeb0 1a66 	vmov.f32	s2, s13
 800a13e:	eef0 0a47 	vmov.f32	s1, s14
 800a142:	eeb0 0a67 	vmov.f32	s0, s15
 800a146:	4618      	mov	r0, r3
 800a148:	f7fc f826 	bl	8006198 <EP_PIDGain_Write>
					  EP_PIDGain_Read(telemetry_rx_buf[2], &yaw_rate.kp, &yaw_rate.ki, &yaw_rate.kd);
 800a14c:	4b73      	ldr	r3, [pc, #460]	; (800a31c <main+0x127c>)
 800a14e:	7898      	ldrb	r0, [r3, #2]
 800a150:	4b78      	ldr	r3, [pc, #480]	; (800a334 <main+0x1294>)
 800a152:	4a79      	ldr	r2, [pc, #484]	; (800a338 <main+0x1298>)
 800a154:	4976      	ldr	r1, [pc, #472]	; (800a330 <main+0x1290>)
 800a156:	f7fc f8b5 	bl	80062c4 <EP_PIDGain_Read>
					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 800a15a:	4b70      	ldr	r3, [pc, #448]	; (800a31c <main+0x127c>)
 800a15c:	789b      	ldrb	r3, [r3, #2]
 800a15e:	4a74      	ldr	r2, [pc, #464]	; (800a330 <main+0x1290>)
 800a160:	edd2 7a00 	vldr	s15, [r2]
 800a164:	4a72      	ldr	r2, [pc, #456]	; (800a330 <main+0x1290>)
 800a166:	ed92 7a01 	vldr	s14, [r2, #4]
 800a16a:	4a71      	ldr	r2, [pc, #452]	; (800a330 <main+0x1290>)
 800a16c:	edd2 6a02 	vldr	s13, [r2, #8]
 800a170:	eeb0 1a66 	vmov.f32	s2, s13
 800a174:	eef0 0a47 	vmov.f32	s1, s14
 800a178:	eeb0 0a67 	vmov.f32	s0, s15
 800a17c:	4619      	mov	r1, r3
 800a17e:	486a      	ldr	r0, [pc, #424]	; (800a328 <main+0x1288>)
 800a180:	f001 f83a 	bl	800b1f8 <Encode_Msg_PID_Gain>
					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 800a184:	2214      	movs	r2, #20
 800a186:	4968      	ldr	r1, [pc, #416]	; (800a328 <main+0x1288>)
 800a188:	4868      	ldr	r0, [pc, #416]	; (800a32c <main+0x128c>)
 800a18a:	f7f9 fe89 	bl	8003ea0 <HAL_UART_Transmit_IT>
					  break;
 800a18e:	e174      	b.n	800a47a <main+0x13da>
				  case 0x10:
					  switch(telemetry_rx_buf[3])
 800a190:	4b62      	ldr	r3, [pc, #392]	; (800a31c <main+0x127c>)
 800a192:	78db      	ldrb	r3, [r3, #3]
 800a194:	2b06      	cmp	r3, #6
 800a196:	f200 816f 	bhi.w	800a478 <main+0x13d8>
 800a19a:	a201      	add	r2, pc, #4	; (adr r2, 800a1a0 <main+0x1100>)
 800a19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1a0:	0800a1bd 	.word	0x0800a1bd
 800a1a4:	0800a1f5 	.word	0x0800a1f5
 800a1a8:	0800a22d 	.word	0x0800a22d
 800a1ac:	0800a265 	.word	0x0800a265
 800a1b0:	0800a29d 	.word	0x0800a29d
 800a1b4:	0800a2d5 	.word	0x0800a2d5
 800a1b8:	0800a345 	.word	0x0800a345
					  {
					  case 0:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], roll.in.kp, roll.in.ki, roll.in.kd);
 800a1bc:	4b57      	ldr	r3, [pc, #348]	; (800a31c <main+0x127c>)
 800a1be:	78db      	ldrb	r3, [r3, #3]
 800a1c0:	4a5e      	ldr	r2, [pc, #376]	; (800a33c <main+0x129c>)
 800a1c2:	edd2 7a00 	vldr	s15, [r2]
 800a1c6:	4a5d      	ldr	r2, [pc, #372]	; (800a33c <main+0x129c>)
 800a1c8:	ed92 7a01 	vldr	s14, [r2, #4]
 800a1cc:	4a5b      	ldr	r2, [pc, #364]	; (800a33c <main+0x129c>)
 800a1ce:	edd2 6a02 	vldr	s13, [r2, #8]
 800a1d2:	eeb0 1a66 	vmov.f32	s2, s13
 800a1d6:	eef0 0a47 	vmov.f32	s1, s14
 800a1da:	eeb0 0a67 	vmov.f32	s0, s15
 800a1de:	4619      	mov	r1, r3
 800a1e0:	4851      	ldr	r0, [pc, #324]	; (800a328 <main+0x1288>)
 800a1e2:	f001 f809 	bl	800b1f8 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800a1e6:	230a      	movs	r3, #10
 800a1e8:	2214      	movs	r2, #20
 800a1ea:	494f      	ldr	r1, [pc, #316]	; (800a328 <main+0x1288>)
 800a1ec:	484f      	ldr	r0, [pc, #316]	; (800a32c <main+0x128c>)
 800a1ee:	f7f9 fdbe 	bl	8003d6e <HAL_UART_Transmit>
						  break;
 800a1f2:	e13e      	b.n	800a472 <main+0x13d2>
					  case 1:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], roll.out.kp, roll.out.ki, roll.out.kd);
 800a1f4:	4b49      	ldr	r3, [pc, #292]	; (800a31c <main+0x127c>)
 800a1f6:	78db      	ldrb	r3, [r3, #3]
 800a1f8:	4a50      	ldr	r2, [pc, #320]	; (800a33c <main+0x129c>)
 800a1fa:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800a1fe:	4a4f      	ldr	r2, [pc, #316]	; (800a33c <main+0x129c>)
 800a200:	ed92 7a0f 	vldr	s14, [r2, #60]	; 0x3c
 800a204:	4a4d      	ldr	r2, [pc, #308]	; (800a33c <main+0x129c>)
 800a206:	edd2 6a10 	vldr	s13, [r2, #64]	; 0x40
 800a20a:	eeb0 1a66 	vmov.f32	s2, s13
 800a20e:	eef0 0a47 	vmov.f32	s1, s14
 800a212:	eeb0 0a67 	vmov.f32	s0, s15
 800a216:	4619      	mov	r1, r3
 800a218:	4843      	ldr	r0, [pc, #268]	; (800a328 <main+0x1288>)
 800a21a:	f000 ffed 	bl	800b1f8 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800a21e:	230a      	movs	r3, #10
 800a220:	2214      	movs	r2, #20
 800a222:	4941      	ldr	r1, [pc, #260]	; (800a328 <main+0x1288>)
 800a224:	4841      	ldr	r0, [pc, #260]	; (800a32c <main+0x128c>)
 800a226:	f7f9 fda2 	bl	8003d6e <HAL_UART_Transmit>
						  break;
 800a22a:	e122      	b.n	800a472 <main+0x13d2>
					  case 2:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], pitch.in.kp, pitch.in.ki, pitch.in.kd);
 800a22c:	4b3b      	ldr	r3, [pc, #236]	; (800a31c <main+0x127c>)
 800a22e:	78db      	ldrb	r3, [r3, #3]
 800a230:	4a43      	ldr	r2, [pc, #268]	; (800a340 <main+0x12a0>)
 800a232:	edd2 7a00 	vldr	s15, [r2]
 800a236:	4a42      	ldr	r2, [pc, #264]	; (800a340 <main+0x12a0>)
 800a238:	ed92 7a01 	vldr	s14, [r2, #4]
 800a23c:	4a40      	ldr	r2, [pc, #256]	; (800a340 <main+0x12a0>)
 800a23e:	edd2 6a02 	vldr	s13, [r2, #8]
 800a242:	eeb0 1a66 	vmov.f32	s2, s13
 800a246:	eef0 0a47 	vmov.f32	s1, s14
 800a24a:	eeb0 0a67 	vmov.f32	s0, s15
 800a24e:	4619      	mov	r1, r3
 800a250:	4835      	ldr	r0, [pc, #212]	; (800a328 <main+0x1288>)
 800a252:	f000 ffd1 	bl	800b1f8 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800a256:	230a      	movs	r3, #10
 800a258:	2214      	movs	r2, #20
 800a25a:	4933      	ldr	r1, [pc, #204]	; (800a328 <main+0x1288>)
 800a25c:	4833      	ldr	r0, [pc, #204]	; (800a32c <main+0x128c>)
 800a25e:	f7f9 fd86 	bl	8003d6e <HAL_UART_Transmit>
						  break;
 800a262:	e106      	b.n	800a472 <main+0x13d2>
					  case 3:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], pitch.out.kp, pitch.out.ki, pitch.out.kd);
 800a264:	4b2d      	ldr	r3, [pc, #180]	; (800a31c <main+0x127c>)
 800a266:	78db      	ldrb	r3, [r3, #3]
 800a268:	4a35      	ldr	r2, [pc, #212]	; (800a340 <main+0x12a0>)
 800a26a:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800a26e:	4a34      	ldr	r2, [pc, #208]	; (800a340 <main+0x12a0>)
 800a270:	ed92 7a0f 	vldr	s14, [r2, #60]	; 0x3c
 800a274:	4a32      	ldr	r2, [pc, #200]	; (800a340 <main+0x12a0>)
 800a276:	edd2 6a10 	vldr	s13, [r2, #64]	; 0x40
 800a27a:	eeb0 1a66 	vmov.f32	s2, s13
 800a27e:	eef0 0a47 	vmov.f32	s1, s14
 800a282:	eeb0 0a67 	vmov.f32	s0, s15
 800a286:	4619      	mov	r1, r3
 800a288:	4827      	ldr	r0, [pc, #156]	; (800a328 <main+0x1288>)
 800a28a:	f000 ffb5 	bl	800b1f8 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800a28e:	230a      	movs	r3, #10
 800a290:	2214      	movs	r2, #20
 800a292:	4925      	ldr	r1, [pc, #148]	; (800a328 <main+0x1288>)
 800a294:	4825      	ldr	r0, [pc, #148]	; (800a32c <main+0x128c>)
 800a296:	f7f9 fd6a 	bl	8003d6e <HAL_UART_Transmit>
						  break;
 800a29a:	e0ea      	b.n	800a472 <main+0x13d2>
					  case 4:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 800a29c:	4b1f      	ldr	r3, [pc, #124]	; (800a31c <main+0x127c>)
 800a29e:	78db      	ldrb	r3, [r3, #3]
 800a2a0:	4a1b      	ldr	r2, [pc, #108]	; (800a310 <main+0x1270>)
 800a2a2:	edd2 7a00 	vldr	s15, [r2]
 800a2a6:	4a1a      	ldr	r2, [pc, #104]	; (800a310 <main+0x1270>)
 800a2a8:	ed92 7a01 	vldr	s14, [r2, #4]
 800a2ac:	4a18      	ldr	r2, [pc, #96]	; (800a310 <main+0x1270>)
 800a2ae:	edd2 6a02 	vldr	s13, [r2, #8]
 800a2b2:	eeb0 1a66 	vmov.f32	s2, s13
 800a2b6:	eef0 0a47 	vmov.f32	s1, s14
 800a2ba:	eeb0 0a67 	vmov.f32	s0, s15
 800a2be:	4619      	mov	r1, r3
 800a2c0:	4819      	ldr	r0, [pc, #100]	; (800a328 <main+0x1288>)
 800a2c2:	f000 ff99 	bl	800b1f8 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800a2c6:	230a      	movs	r3, #10
 800a2c8:	2214      	movs	r2, #20
 800a2ca:	4917      	ldr	r1, [pc, #92]	; (800a328 <main+0x1288>)
 800a2cc:	4817      	ldr	r0, [pc, #92]	; (800a32c <main+0x128c>)
 800a2ce:	f7f9 fd4e 	bl	8003d6e <HAL_UART_Transmit>
						  break;
 800a2d2:	e0ce      	b.n	800a472 <main+0x13d2>
					  case 5:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 800a2d4:	4b11      	ldr	r3, [pc, #68]	; (800a31c <main+0x127c>)
 800a2d6:	78db      	ldrb	r3, [r3, #3]
 800a2d8:	4a15      	ldr	r2, [pc, #84]	; (800a330 <main+0x1290>)
 800a2da:	edd2 7a00 	vldr	s15, [r2]
 800a2de:	4a14      	ldr	r2, [pc, #80]	; (800a330 <main+0x1290>)
 800a2e0:	ed92 7a01 	vldr	s14, [r2, #4]
 800a2e4:	4a12      	ldr	r2, [pc, #72]	; (800a330 <main+0x1290>)
 800a2e6:	edd2 6a02 	vldr	s13, [r2, #8]
 800a2ea:	eeb0 1a66 	vmov.f32	s2, s13
 800a2ee:	eef0 0a47 	vmov.f32	s1, s14
 800a2f2:	eeb0 0a67 	vmov.f32	s0, s15
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	480b      	ldr	r0, [pc, #44]	; (800a328 <main+0x1288>)
 800a2fa:	f000 ff7d 	bl	800b1f8 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800a2fe:	230a      	movs	r3, #10
 800a300:	2214      	movs	r2, #20
 800a302:	4909      	ldr	r1, [pc, #36]	; (800a328 <main+0x1288>)
 800a304:	4809      	ldr	r0, [pc, #36]	; (800a32c <main+0x128c>)
 800a306:	f7f9 fd32 	bl	8003d6e <HAL_UART_Transmit>
						  break;
 800a30a:	e0b2      	b.n	800a472 <main+0x13d2>
 800a30c:	200005d3 	.word	0x200005d3
 800a310:	20000430 	.word	0x20000430
 800a314:	200005d7 	.word	0x200005d7
 800a318:	200005db 	.word	0x200005db
 800a31c:	200005d0 	.word	0x200005d0
 800a320:	20000438 	.word	0x20000438
 800a324:	20000434 	.word	0x20000434
 800a328:	200005a8 	.word	0x200005a8
 800a32c:	20000654 	.word	0x20000654
 800a330:	20000468 	.word	0x20000468
 800a334:	20000470 	.word	0x20000470
 800a338:	2000046c 	.word	0x2000046c
 800a33c:	20000350 	.word	0x20000350
 800a340:	200003c0 	.word	0x200003c0
					  case 6:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 0, roll.in.kp, roll.in.ki, roll.in.kd);
 800a344:	4b70      	ldr	r3, [pc, #448]	; (800a508 <main+0x1468>)
 800a346:	edd3 7a00 	vldr	s15, [r3]
 800a34a:	4b6f      	ldr	r3, [pc, #444]	; (800a508 <main+0x1468>)
 800a34c:	ed93 7a01 	vldr	s14, [r3, #4]
 800a350:	4b6d      	ldr	r3, [pc, #436]	; (800a508 <main+0x1468>)
 800a352:	edd3 6a02 	vldr	s13, [r3, #8]
 800a356:	eeb0 1a66 	vmov.f32	s2, s13
 800a35a:	eef0 0a47 	vmov.f32	s1, s14
 800a35e:	eeb0 0a67 	vmov.f32	s0, s15
 800a362:	2100      	movs	r1, #0
 800a364:	4869      	ldr	r0, [pc, #420]	; (800a50c <main+0x146c>)
 800a366:	f000 ff47 	bl	800b1f8 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800a36a:	230a      	movs	r3, #10
 800a36c:	2214      	movs	r2, #20
 800a36e:	4967      	ldr	r1, [pc, #412]	; (800a50c <main+0x146c>)
 800a370:	4867      	ldr	r0, [pc, #412]	; (800a510 <main+0x1470>)
 800a372:	f7f9 fcfc 	bl	8003d6e <HAL_UART_Transmit>
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 1, roll.out.kp, roll.out.ki, roll.out.kd);
 800a376:	4b64      	ldr	r3, [pc, #400]	; (800a508 <main+0x1468>)
 800a378:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800a37c:	4b62      	ldr	r3, [pc, #392]	; (800a508 <main+0x1468>)
 800a37e:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800a382:	4b61      	ldr	r3, [pc, #388]	; (800a508 <main+0x1468>)
 800a384:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 800a388:	eeb0 1a66 	vmov.f32	s2, s13
 800a38c:	eef0 0a47 	vmov.f32	s1, s14
 800a390:	eeb0 0a67 	vmov.f32	s0, s15
 800a394:	2101      	movs	r1, #1
 800a396:	485d      	ldr	r0, [pc, #372]	; (800a50c <main+0x146c>)
 800a398:	f000 ff2e 	bl	800b1f8 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800a39c:	230a      	movs	r3, #10
 800a39e:	2214      	movs	r2, #20
 800a3a0:	495a      	ldr	r1, [pc, #360]	; (800a50c <main+0x146c>)
 800a3a2:	485b      	ldr	r0, [pc, #364]	; (800a510 <main+0x1470>)
 800a3a4:	f7f9 fce3 	bl	8003d6e <HAL_UART_Transmit>
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 2, pitch.in.kp, pitch.in.ki, pitch.in.kd);
 800a3a8:	4b5a      	ldr	r3, [pc, #360]	; (800a514 <main+0x1474>)
 800a3aa:	edd3 7a00 	vldr	s15, [r3]
 800a3ae:	4b59      	ldr	r3, [pc, #356]	; (800a514 <main+0x1474>)
 800a3b0:	ed93 7a01 	vldr	s14, [r3, #4]
 800a3b4:	4b57      	ldr	r3, [pc, #348]	; (800a514 <main+0x1474>)
 800a3b6:	edd3 6a02 	vldr	s13, [r3, #8]
 800a3ba:	eeb0 1a66 	vmov.f32	s2, s13
 800a3be:	eef0 0a47 	vmov.f32	s1, s14
 800a3c2:	eeb0 0a67 	vmov.f32	s0, s15
 800a3c6:	2102      	movs	r1, #2
 800a3c8:	4850      	ldr	r0, [pc, #320]	; (800a50c <main+0x146c>)
 800a3ca:	f000 ff15 	bl	800b1f8 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800a3ce:	230a      	movs	r3, #10
 800a3d0:	2214      	movs	r2, #20
 800a3d2:	494e      	ldr	r1, [pc, #312]	; (800a50c <main+0x146c>)
 800a3d4:	484e      	ldr	r0, [pc, #312]	; (800a510 <main+0x1470>)
 800a3d6:	f7f9 fcca 	bl	8003d6e <HAL_UART_Transmit>
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 3, pitch.out.kp, pitch.out.ki, pitch.out.kd);
 800a3da:	4b4e      	ldr	r3, [pc, #312]	; (800a514 <main+0x1474>)
 800a3dc:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800a3e0:	4b4c      	ldr	r3, [pc, #304]	; (800a514 <main+0x1474>)
 800a3e2:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800a3e6:	4b4b      	ldr	r3, [pc, #300]	; (800a514 <main+0x1474>)
 800a3e8:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 800a3ec:	eeb0 1a66 	vmov.f32	s2, s13
 800a3f0:	eef0 0a47 	vmov.f32	s1, s14
 800a3f4:	eeb0 0a67 	vmov.f32	s0, s15
 800a3f8:	2103      	movs	r1, #3
 800a3fa:	4844      	ldr	r0, [pc, #272]	; (800a50c <main+0x146c>)
 800a3fc:	f000 fefc 	bl	800b1f8 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800a400:	230a      	movs	r3, #10
 800a402:	2214      	movs	r2, #20
 800a404:	4941      	ldr	r1, [pc, #260]	; (800a50c <main+0x146c>)
 800a406:	4842      	ldr	r0, [pc, #264]	; (800a510 <main+0x1470>)
 800a408:	f7f9 fcb1 	bl	8003d6e <HAL_UART_Transmit>
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 4, yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 800a40c:	4b42      	ldr	r3, [pc, #264]	; (800a518 <main+0x1478>)
 800a40e:	edd3 7a00 	vldr	s15, [r3]
 800a412:	4b41      	ldr	r3, [pc, #260]	; (800a518 <main+0x1478>)
 800a414:	ed93 7a01 	vldr	s14, [r3, #4]
 800a418:	4b3f      	ldr	r3, [pc, #252]	; (800a518 <main+0x1478>)
 800a41a:	edd3 6a02 	vldr	s13, [r3, #8]
 800a41e:	eeb0 1a66 	vmov.f32	s2, s13
 800a422:	eef0 0a47 	vmov.f32	s1, s14
 800a426:	eeb0 0a67 	vmov.f32	s0, s15
 800a42a:	2104      	movs	r1, #4
 800a42c:	4837      	ldr	r0, [pc, #220]	; (800a50c <main+0x146c>)
 800a42e:	f000 fee3 	bl	800b1f8 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800a432:	230a      	movs	r3, #10
 800a434:	2214      	movs	r2, #20
 800a436:	4935      	ldr	r1, [pc, #212]	; (800a50c <main+0x146c>)
 800a438:	4835      	ldr	r0, [pc, #212]	; (800a510 <main+0x1470>)
 800a43a:	f7f9 fc98 	bl	8003d6e <HAL_UART_Transmit>
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 5, yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 800a43e:	4b37      	ldr	r3, [pc, #220]	; (800a51c <main+0x147c>)
 800a440:	edd3 7a00 	vldr	s15, [r3]
 800a444:	4b35      	ldr	r3, [pc, #212]	; (800a51c <main+0x147c>)
 800a446:	ed93 7a01 	vldr	s14, [r3, #4]
 800a44a:	4b34      	ldr	r3, [pc, #208]	; (800a51c <main+0x147c>)
 800a44c:	edd3 6a02 	vldr	s13, [r3, #8]
 800a450:	eeb0 1a66 	vmov.f32	s2, s13
 800a454:	eef0 0a47 	vmov.f32	s1, s14
 800a458:	eeb0 0a67 	vmov.f32	s0, s15
 800a45c:	2105      	movs	r1, #5
 800a45e:	482b      	ldr	r0, [pc, #172]	; (800a50c <main+0x146c>)
 800a460:	f000 feca 	bl	800b1f8 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800a464:	230a      	movs	r3, #10
 800a466:	2214      	movs	r2, #20
 800a468:	4928      	ldr	r1, [pc, #160]	; (800a50c <main+0x146c>)
 800a46a:	4829      	ldr	r0, [pc, #164]	; (800a510 <main+0x1470>)
 800a46c:	f7f9 fc7f 	bl	8003d6e <HAL_UART_Transmit>
						  break;
 800a470:	bf00      	nop
					  }
					  break;
 800a472:	e001      	b.n	800a478 <main+0x13d8>

				  }
			  }
 800a474:	bf00      	nop
 800a476:	e000      	b.n	800a47a <main+0x13da>
					  break;
 800a478:	bf00      	nop
		  }
	  }

	  if(tim7_20ms_flag == 1 && tim7_100ms_flag != 1)
 800a47a:	4b29      	ldr	r3, [pc, #164]	; (800a520 <main+0x1480>)
 800a47c:	781b      	ldrb	r3, [r3, #0]
 800a47e:	2b01      	cmp	r3, #1
 800a480:	d10f      	bne.n	800a4a2 <main+0x1402>
 800a482:	4b28      	ldr	r3, [pc, #160]	; (800a524 <main+0x1484>)
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	2b01      	cmp	r3, #1
 800a488:	d00b      	beq.n	800a4a2 <main+0x1402>
	  {
		  tim7_20ms_flag = 0;
 800a48a:	4b25      	ldr	r3, [pc, #148]	; (800a520 <main+0x1480>)
 800a48c:	2200      	movs	r2, #0
 800a48e:	701a      	strb	r2, [r3, #0]

		  Encode_Msg_AHRS(&telemetry_tx_buf[0]);
 800a490:	481e      	ldr	r0, [pc, #120]	; (800a50c <main+0x146c>)
 800a492:	f000 fc75 	bl	800ad80 <Encode_Msg_AHRS>

		  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 800a496:	2214      	movs	r2, #20
 800a498:	491c      	ldr	r1, [pc, #112]	; (800a50c <main+0x146c>)
 800a49a:	481d      	ldr	r0, [pc, #116]	; (800a510 <main+0x1470>)
 800a49c:	f7f9 fd00 	bl	8003ea0 <HAL_UART_Transmit_IT>
 800a4a0:	e018      	b.n	800a4d4 <main+0x1434>
	  }

	  else if(tim7_20ms_flag == 1 && tim7_100ms_flag == 1)
 800a4a2:	4b1f      	ldr	r3, [pc, #124]	; (800a520 <main+0x1480>)
 800a4a4:	781b      	ldrb	r3, [r3, #0]
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	d114      	bne.n	800a4d4 <main+0x1434>
 800a4aa:	4b1e      	ldr	r3, [pc, #120]	; (800a524 <main+0x1484>)
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d110      	bne.n	800a4d4 <main+0x1434>
	  {
		  tim7_20ms_flag = 0;
 800a4b2:	4b1b      	ldr	r3, [pc, #108]	; (800a520 <main+0x1480>)
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	701a      	strb	r2, [r3, #0]
		  tim7_100ms_flag = 0;
 800a4b8:	4b1a      	ldr	r3, [pc, #104]	; (800a524 <main+0x1484>)
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	701a      	strb	r2, [r3, #0]

		  Encode_Msg_AHRS(&telemetry_tx_buf[0]);
 800a4be:	4813      	ldr	r0, [pc, #76]	; (800a50c <main+0x146c>)
 800a4c0:	f000 fc5e 	bl	800ad80 <Encode_Msg_AHRS>
		  Encode_Msg_GPS(&telemetry_tx_buf[20]);
 800a4c4:	4818      	ldr	r0, [pc, #96]	; (800a528 <main+0x1488>)
 800a4c6:	f000 fdd7 	bl	800b078 <Encode_Msg_GPS>

		  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 40);
 800a4ca:	2228      	movs	r2, #40	; 0x28
 800a4cc:	490f      	ldr	r1, [pc, #60]	; (800a50c <main+0x146c>)
 800a4ce:	4810      	ldr	r0, [pc, #64]	; (800a510 <main+0x1470>)
 800a4d0:	f7f9 fce6 	bl	8003ea0 <HAL_UART_Transmit_IT>
	  }


	  batVolt = adcVal * 0.003619f;
 800a4d4:	88fb      	ldrh	r3, [r7, #6]
 800a4d6:	ee07 3a90 	vmov	s15, r3
 800a4da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4de:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800a52c <main+0x148c>
 800a4e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a4e6:	4b12      	ldr	r3, [pc, #72]	; (800a530 <main+0x1490>)
 800a4e8:	edc3 7a00 	vstr	s15, [r3]
	  //printf("%d\t%.2f\n", adcVal, batVolt);
	  if(batVolt < 10.0f)
 800a4ec:	4b10      	ldr	r3, [pc, #64]	; (800a530 <main+0x1490>)
 800a4ee:	edd3 7a00 	vldr	s15, [r3]
 800a4f2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800a4f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a4fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4fe:	d51b      	bpl.n	800a538 <main+0x1498>
	  {
		  low_bat_flag = 1;
 800a500:	4b0c      	ldr	r3, [pc, #48]	; (800a534 <main+0x1494>)
 800a502:	2201      	movs	r2, #1
 800a504:	701a      	strb	r2, [r3, #0]
 800a506:	e01a      	b.n	800a53e <main+0x149e>
 800a508:	20000350 	.word	0x20000350
 800a50c:	200005a8 	.word	0x200005a8
 800a510:	20000654 	.word	0x20000654
 800a514:	200003c0 	.word	0x200003c0
 800a518:	20000430 	.word	0x20000430
 800a51c:	20000468 	.word	0x20000468
 800a520:	20000643 	.word	0x20000643
 800a524:	20000644 	.word	0x20000644
 800a528:	200005bc 	.word	0x200005bc
 800a52c:	3b6d2cbf 	.word	0x3b6d2cbf
 800a530:	200005e8 	.word	0x200005e8
 800a534:	200005ed 	.word	0x200005ed
	  }
	  else
	  {
		  low_bat_flag = 0;
 800a538:	4b9c      	ldr	r3, [pc, #624]	; (800a7ac <main+0x170c>)
 800a53a:	2200      	movs	r2, #0
 800a53c:	701a      	strb	r2, [r3, #0]
	  }

	  if(BNO080_dataAvailable() == 1)
 800a53e:	f7fc f977 	bl	8006830 <BNO080_dataAvailable>
 800a542:	4603      	mov	r3, r0
 800a544:	2b01      	cmp	r3, #1
 800a546:	d134      	bne.n	800a5b2 <main+0x1512>
	  {
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0);
 800a548:	2101      	movs	r1, #1
 800a54a:	4899      	ldr	r0, [pc, #612]	; (800a7b0 <main+0x1710>)
 800a54c:	f7fe fd70 	bl	8009030 <LL_GPIO_TogglePin>

		  q[0] = BNO080_getQuatI();
 800a550:	f7fc fb28 	bl	8006ba4 <BNO080_getQuatI>
 800a554:	eef0 7a40 	vmov.f32	s15, s0
 800a558:	edc7 7a02 	vstr	s15, [r7, #8]
		  q[1] = BNO080_getQuatJ();
 800a55c:	f7fc fb38 	bl	8006bd0 <BNO080_getQuatJ>
 800a560:	eef0 7a40 	vmov.f32	s15, s0
 800a564:	edc7 7a03 	vstr	s15, [r7, #12]
		  q[2] = BNO080_getQuatK();
 800a568:	f7fc fb48 	bl	8006bfc <BNO080_getQuatK>
 800a56c:	eef0 7a40 	vmov.f32	s15, s0
 800a570:	edc7 7a04 	vstr	s15, [r7, #16]
		  q[3] = BNO080_getQuatReal();
 800a574:	f7fc fb58 	bl	8006c28 <BNO080_getQuatReal>
 800a578:	eef0 7a40 	vmov.f32	s15, s0
 800a57c:	edc7 7a05 	vstr	s15, [r7, #20]
		  quatRadianAccuracy = BNO080_getQuatRadianAccuracy();
 800a580:	f7fc fb68 	bl	8006c54 <BNO080_getQuatRadianAccuracy>
 800a584:	ed87 0a06 	vstr	s0, [r7, #24]

		  Quaternion_Update(&q[0]);
 800a588:	f107 0308 	add.w	r3, r7, #8
 800a58c:	4618      	mov	r0, r3
 800a58e:	f7fe f92b 	bl	80087e8 <Quaternion_Update>

		  BNO080_Roll = -BNO080_Roll;
 800a592:	4b88      	ldr	r3, [pc, #544]	; (800a7b4 <main+0x1714>)
 800a594:	edd3 7a00 	vldr	s15, [r3]
 800a598:	eef1 7a67 	vneg.f32	s15, s15
 800a59c:	4b85      	ldr	r3, [pc, #532]	; (800a7b4 <main+0x1714>)
 800a59e:	edc3 7a00 	vstr	s15, [r3]
		  BNO080_Pitch = -BNO080_Pitch;
 800a5a2:	4b85      	ldr	r3, [pc, #532]	; (800a7b8 <main+0x1718>)
 800a5a4:	edd3 7a00 	vldr	s15, [r3]
 800a5a8:	eef1 7a67 	vneg.f32	s15, s15
 800a5ac:	4b82      	ldr	r3, [pc, #520]	; (800a7b8 <main+0x1718>)
 800a5ae:	edc3 7a00 	vstr	s15, [r3]

		  //printf("%.2f\t%.2f\n", BNO080_Roll, BNO080_Pitch);
		  //printf("%.2f\n", BNO080_Yaw);
	  }

	  if(ICM20602_DataReady() == 1)
 800a5b2:	f7fd f931 	bl	8007818 <ICM20602_DataReady>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d14c      	bne.n	800a656 <main+0x15b6>
	  {
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_1);
 800a5bc:	2102      	movs	r1, #2
 800a5be:	487c      	ldr	r0, [pc, #496]	; (800a7b0 <main+0x1710>)
 800a5c0:	f7fe fd36 	bl	8009030 <LL_GPIO_TogglePin>

		  ICM20602_Get3AxisGyroRawData(&ICM20602.gyro_x_raw);
 800a5c4:	487d      	ldr	r0, [pc, #500]	; (800a7bc <main+0x171c>)
 800a5c6:	f7fd f8fb 	bl	80077c0 <ICM20602_Get3AxisGyroRawData>

		  ICM20602.gyro_x = ICM20602.gyro_x_raw * 2000.f / 32768.f;
 800a5ca:	4b7d      	ldr	r3, [pc, #500]	; (800a7c0 <main+0x1720>)
 800a5cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a5d0:	ee07 3a90 	vmov	s15, r3
 800a5d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5d8:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 800a7c4 <main+0x1724>
 800a5dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a5e0:	eddf 6a79 	vldr	s13, [pc, #484]	; 800a7c8 <main+0x1728>
 800a5e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a5e8:	4b75      	ldr	r3, [pc, #468]	; (800a7c0 <main+0x1720>)
 800a5ea:	edc3 7a07 	vstr	s15, [r3, #28]
		  ICM20602.gyro_y = ICM20602.gyro_y_raw * 2000.f / 32768.f;
 800a5ee:	4b74      	ldr	r3, [pc, #464]	; (800a7c0 <main+0x1720>)
 800a5f0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800a5f4:	ee07 3a90 	vmov	s15, r3
 800a5f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5fc:	ed9f 7a71 	vldr	s14, [pc, #452]	; 800a7c4 <main+0x1724>
 800a600:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a604:	eddf 6a70 	vldr	s13, [pc, #448]	; 800a7c8 <main+0x1728>
 800a608:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a60c:	4b6c      	ldr	r3, [pc, #432]	; (800a7c0 <main+0x1720>)
 800a60e:	edc3 7a08 	vstr	s15, [r3, #32]
		  ICM20602.gyro_z = ICM20602.gyro_z_raw * 2000.f / 32768.f;
 800a612:	4b6b      	ldr	r3, [pc, #428]	; (800a7c0 <main+0x1720>)
 800a614:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800a618:	ee07 3a90 	vmov	s15, r3
 800a61c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a620:	ed9f 7a68 	vldr	s14, [pc, #416]	; 800a7c4 <main+0x1724>
 800a624:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a628:	eddf 6a67 	vldr	s13, [pc, #412]	; 800a7c8 <main+0x1728>
 800a62c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a630:	4b63      	ldr	r3, [pc, #396]	; (800a7c0 <main+0x1720>)
 800a632:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

		  ICM20602.gyro_x = -ICM20602.gyro_x;
 800a636:	4b62      	ldr	r3, [pc, #392]	; (800a7c0 <main+0x1720>)
 800a638:	edd3 7a07 	vldr	s15, [r3, #28]
 800a63c:	eef1 7a67 	vneg.f32	s15, s15
 800a640:	4b5f      	ldr	r3, [pc, #380]	; (800a7c0 <main+0x1720>)
 800a642:	edc3 7a07 	vstr	s15, [r3, #28]
		  ICM20602.gyro_z = -ICM20602.gyro_z;
 800a646:	4b5e      	ldr	r3, [pc, #376]	; (800a7c0 <main+0x1720>)
 800a648:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800a64c:	eef1 7a67 	vneg.f32	s15, s15
 800a650:	4b5b      	ldr	r3, [pc, #364]	; (800a7c0 <main+0x1720>)
 800a652:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

		  //printf("%d,%d,%d\n", ICM20602.gyro_x_raw, ICM20602.gyro_y_raw, ICM20602.gyro_z_raw);
		  //printf("%d,%d,%d\n", (int)(ICM20602.gyro_x*100), (int)(ICM20602.gyro_y*100), (int)(ICM20602.gyro_z*100));
	  }

	  if(LPS22HH_DataReady() == 1)
 800a656:	f7fd fb4f 	bl	8007cf8 <LPS22HH_DataReady>
 800a65a:	4603      	mov	r3, r0
 800a65c:	2b01      	cmp	r3, #1
 800a65e:	d138      	bne.n	800a6d2 <main+0x1632>
	  {
		  LPS22HH_GetPressure(&LPS22HH.pressure_raw);
 800a660:	485a      	ldr	r0, [pc, #360]	; (800a7cc <main+0x172c>)
 800a662:	f7fd fb55 	bl	8007d10 <LPS22HH_GetPressure>
		  LPS22HH_GetTemperature(&LPS22HH.temperature_raw);
 800a666:	485a      	ldr	r0, [pc, #360]	; (800a7d0 <main+0x1730>)
 800a668:	f7fd fb5f 	bl	8007d2a <LPS22HH_GetTemperature>

		  LPS22HH.baroAlt = getAltitude2(LPS22HH.pressure_raw/4096.f, LPS22HH.temperature_raw/100.f);
 800a66c:	4b57      	ldr	r3, [pc, #348]	; (800a7cc <main+0x172c>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	ee07 3a90 	vmov	s15, r3
 800a674:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a678:	eddf 6a56 	vldr	s13, [pc, #344]	; 800a7d4 <main+0x1734>
 800a67c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a680:	4b52      	ldr	r3, [pc, #328]	; (800a7cc <main+0x172c>)
 800a682:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a686:	ee07 3a90 	vmov	s15, r3
 800a68a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a68e:	ed9f 6a52 	vldr	s12, [pc, #328]	; 800a7d8 <main+0x1738>
 800a692:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800a696:	eef0 0a66 	vmov.f32	s1, s13
 800a69a:	eeb0 0a47 	vmov.f32	s0, s14
 800a69e:	f7fd fb51 	bl	8007d44 <getAltitude2>
 800a6a2:	eef0 7a40 	vmov.f32	s15, s0
 800a6a6:	4b49      	ldr	r3, [pc, #292]	; (800a7cc <main+0x172c>)
 800a6a8:	edc3 7a02 	vstr	s15, [r3, #8]

#define X 0.90f
		  LPS22HH.baroAltFilt = LPS22HH.baroAltFilt * X + LPS22HH.baroAlt * (1.0f - X);
 800a6ac:	4b47      	ldr	r3, [pc, #284]	; (800a7cc <main+0x172c>)
 800a6ae:	edd3 7a03 	vldr	s15, [r3, #12]
 800a6b2:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800a7dc <main+0x173c>
 800a6b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a6ba:	4b44      	ldr	r3, [pc, #272]	; (800a7cc <main+0x172c>)
 800a6bc:	edd3 7a02 	vldr	s15, [r3, #8]
 800a6c0:	eddf 6a47 	vldr	s13, [pc, #284]	; 800a7e0 <main+0x1740>
 800a6c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a6c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6cc:	4b3f      	ldr	r3, [pc, #252]	; (800a7cc <main+0x172c>)
 800a6ce:	edc3 7a03 	vstr	s15, [r3, #12]

		  //printf("%d,%d\n", (int)(LPS22HH.baroAlt*100), (int)(LPS22HH.baroAltFilt*100));
	  }

	  if(m8n_rx_cplt_flag == 1)
 800a6d2:	4b44      	ldr	r3, [pc, #272]	; (800a7e4 <main+0x1744>)
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d111      	bne.n	800a6fe <main+0x165e>
	  {
		  m8n_rx_cplt_flag = 0;
 800a6da:	4b42      	ldr	r3, [pc, #264]	; (800a7e4 <main+0x1744>)
 800a6dc:	2200      	movs	r2, #0
 800a6de:	701a      	strb	r2, [r3, #0]

		  if(M8N_UBX_CHKSUM_Check(&m8n_rx_buf[0], 36) == 1)
 800a6e0:	2124      	movs	r1, #36	; 0x24
 800a6e2:	4841      	ldr	r0, [pc, #260]	; (800a7e8 <main+0x1748>)
 800a6e4:	f7fd fd14 	bl	8008110 <M8N_UBX_CHKSUM_Check>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	d107      	bne.n	800a6fe <main+0x165e>
		  {
			  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 800a6ee:	2104      	movs	r1, #4
 800a6f0:	482f      	ldr	r0, [pc, #188]	; (800a7b0 <main+0x1710>)
 800a6f2:	f7fe fc9d 	bl	8009030 <LL_GPIO_TogglePin>
			  M8N_UBX_NAV_POSLLH_Parsing(&m8n_rx_buf[0], &posllh);
 800a6f6:	493d      	ldr	r1, [pc, #244]	; (800a7ec <main+0x174c>)
 800a6f8:	483b      	ldr	r0, [pc, #236]	; (800a7e8 <main+0x1748>)
 800a6fa:	f7fd fd43 	bl	8008184 <M8N_UBX_NAV_POSLLH_Parsing>

			  //printf("LAT: %ld\tLON: %ld\tHeight: %ld\n", posllh.lat, posllh.lon, posllh.height);
		  }
	  }

	  if(ibus_rx_cplt_flag == 1)
 800a6fe:	4b3c      	ldr	r3, [pc, #240]	; (800a7f0 <main+0x1750>)
 800a700:	781b      	ldrb	r3, [r3, #0]
 800a702:	2b01      	cmp	r3, #1
 800a704:	d123      	bne.n	800a74e <main+0x16ae>
	  {
		  ibus_rx_cplt_flag = 0;
 800a706:	4b3a      	ldr	r3, [pc, #232]	; (800a7f0 <main+0x1750>)
 800a708:	2200      	movs	r2, #0
 800a70a:	701a      	strb	r2, [r3, #0]
		  if(iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1)
 800a70c:	2120      	movs	r1, #32
 800a70e:	4839      	ldr	r0, [pc, #228]	; (800a7f4 <main+0x1754>)
 800a710:	f7fc fd40 	bl	8007194 <iBus_Check_CHKSUM>
 800a714:	4603      	mov	r3, r0
 800a716:	2b01      	cmp	r3, #1
 800a718:	d119      	bne.n	800a74e <main+0x16ae>
		  {
			  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 800a71a:	2104      	movs	r1, #4
 800a71c:	4824      	ldr	r0, [pc, #144]	; (800a7b0 <main+0x1710>)
 800a71e:	f7fe fc87 	bl	8009030 <LL_GPIO_TogglePin>

			  iBus_Parsing(&ibus_rx_buf[0], &iBus);
 800a722:	4935      	ldr	r1, [pc, #212]	; (800a7f8 <main+0x1758>)
 800a724:	4833      	ldr	r0, [pc, #204]	; (800a7f4 <main+0x1754>)
 800a726:	f7fc fd6b 	bl	8007200 <iBus_Parsing>
			  iBus_rx_cnt++;
 800a72a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a72e:	3301      	adds	r3, #1
 800a730:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

			  if(iBus_isActiveFailsafe(&iBus) == 1)
 800a734:	4830      	ldr	r0, [pc, #192]	; (800a7f8 <main+0x1758>)
 800a736:	f7fc fddb 	bl	80072f0 <iBus_isActiveFailsafe>
 800a73a:	4603      	mov	r3, r0
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d103      	bne.n	800a748 <main+0x16a8>
			  {
				  failsafe_flag = 1;
 800a740:	4b2e      	ldr	r3, [pc, #184]	; (800a7fc <main+0x175c>)
 800a742:	2201      	movs	r2, #1
 800a744:	701a      	strb	r2, [r3, #0]
 800a746:	e002      	b.n	800a74e <main+0x16ae>
			  }
			  else
			  {
				  failsafe_flag = 0;
 800a748:	4b2c      	ldr	r3, [pc, #176]	; (800a7fc <main+0x175c>)
 800a74a:	2200      	movs	r2, #0
 800a74c:	701a      	strb	r2, [r3, #0]
//					  iBus.RH, iBus.RV, iBus.LV, iBus.LH, iBus.SwA, iBus.SwC);
//			  HAL_Delay(100);
		  }
	  }

	  if(tim7_1000ms_flag == 1)
 800a74e:	4b2c      	ldr	r3, [pc, #176]	; (800a800 <main+0x1760>)
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	2b01      	cmp	r3, #1
 800a754:	d10c      	bne.n	800a770 <main+0x16d0>
	  {
		  tim7_1000ms_flag = 0;
 800a756:	4b2a      	ldr	r3, [pc, #168]	; (800a800 <main+0x1760>)
 800a758:	2200      	movs	r2, #0
 800a75a:	701a      	strb	r2, [r3, #0]
		  if(iBus_rx_cnt == 0)
 800a75c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a760:	2b00      	cmp	r3, #0
 800a762:	d102      	bne.n	800a76a <main+0x16ca>
		  {
			  failsafe_flag = 2;
 800a764:	4b25      	ldr	r3, [pc, #148]	; (800a7fc <main+0x175c>)
 800a766:	2202      	movs	r2, #2
 800a768:	701a      	strb	r2, [r3, #0]
		  }
		  iBus_rx_cnt = 0;
 800a76a:	2300      	movs	r3, #0
 800a76c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	  }

	  if(failsafe_flag == 1 || failsafe_flag == 2 || low_bat_flag == 1 || iBus.SwC == 2000)
 800a770:	4b22      	ldr	r3, [pc, #136]	; (800a7fc <main+0x175c>)
 800a772:	781b      	ldrb	r3, [r3, #0]
 800a774:	2b01      	cmp	r3, #1
 800a776:	d00c      	beq.n	800a792 <main+0x16f2>
 800a778:	4b20      	ldr	r3, [pc, #128]	; (800a7fc <main+0x175c>)
 800a77a:	781b      	ldrb	r3, [r3, #0]
 800a77c:	2b02      	cmp	r3, #2
 800a77e:	d008      	beq.n	800a792 <main+0x16f2>
 800a780:	4b0a      	ldr	r3, [pc, #40]	; (800a7ac <main+0x170c>)
 800a782:	781b      	ldrb	r3, [r3, #0]
 800a784:	2b01      	cmp	r3, #1
 800a786:	d004      	beq.n	800a792 <main+0x16f2>
 800a788:	4b1b      	ldr	r3, [pc, #108]	; (800a7f8 <main+0x1758>)
 800a78a:	899b      	ldrh	r3, [r3, #12]
 800a78c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a790:	d105      	bne.n	800a79e <main+0x16fe>
	  {
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800a792:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a796:	481b      	ldr	r0, [pc, #108]	; (800a804 <main+0x1764>)
 800a798:	f7fe fbc8 	bl	8008f2c <LL_TIM_CC_EnableChannel>
 800a79c:	e004      	b.n	800a7a8 <main+0x1708>
	  }
	  else
	  {
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800a79e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a7a2:	4818      	ldr	r0, [pc, #96]	; (800a804 <main+0x1764>)
 800a7a4:	f7fe fbd3 	bl	8008f4e <LL_TIM_CC_DisableChannel>
	  if(tim7_1ms_flag == 1)
 800a7a8:	f7ff b854 	b.w	8009854 <main+0x7b4>
 800a7ac:	200005ed 	.word	0x200005ed
 800a7b0:	40020800 	.word	0x40020800
 800a7b4:	200004a0 	.word	0x200004a0
 800a7b8:	200004a4 	.word	0x200004a4
 800a7bc:	200002ec 	.word	0x200002ec
 800a7c0:	200002e4 	.word	0x200002e4
 800a7c4:	44fa0000 	.word	0x44fa0000
 800a7c8:	47000000 	.word	0x47000000
 800a7cc:	2000030c 	.word	0x2000030c
 800a7d0:	20000310 	.word	0x20000310
 800a7d4:	45800000 	.word	0x45800000
 800a7d8:	42c80000 	.word	0x42c80000
 800a7dc:	3f666666 	.word	0x3f666666
 800a7e0:	3dccccd0 	.word	0x3dccccd0
 800a7e4:	2000061c 	.word	0x2000061c
 800a7e8:	200005f8 	.word	0x200005f8
 800a7ec:	20000320 	.word	0x20000320
 800a7f0:	20000640 	.word	0x20000640
 800a7f4:	20000620 	.word	0x20000620
 800a7f8:	200002cc 	.word	0x200002cc
 800a7fc:	200005ec 	.word	0x200005ec
 800a800:	20000645 	.word	0x20000645
 800a804:	40000400 	.word	0x40000400

0800a808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b094      	sub	sp, #80	; 0x50
 800a80c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a80e:	f107 0320 	add.w	r3, r7, #32
 800a812:	2230      	movs	r2, #48	; 0x30
 800a814:	2100      	movs	r1, #0
 800a816:	4618      	mov	r0, r3
 800a818:	f001 ff76 	bl	800c708 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a81c:	f107 030c 	add.w	r3, r7, #12
 800a820:	2200      	movs	r2, #0
 800a822:	601a      	str	r2, [r3, #0]
 800a824:	605a      	str	r2, [r3, #4]
 800a826:	609a      	str	r2, [r3, #8]
 800a828:	60da      	str	r2, [r3, #12]
 800a82a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a82c:	2300      	movs	r3, #0
 800a82e:	60bb      	str	r3, [r7, #8]
 800a830:	4b28      	ldr	r3, [pc, #160]	; (800a8d4 <SystemClock_Config+0xcc>)
 800a832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a834:	4a27      	ldr	r2, [pc, #156]	; (800a8d4 <SystemClock_Config+0xcc>)
 800a836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a83a:	6413      	str	r3, [r2, #64]	; 0x40
 800a83c:	4b25      	ldr	r3, [pc, #148]	; (800a8d4 <SystemClock_Config+0xcc>)
 800a83e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a844:	60bb      	str	r3, [r7, #8]
 800a846:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a848:	2300      	movs	r3, #0
 800a84a:	607b      	str	r3, [r7, #4]
 800a84c:	4b22      	ldr	r3, [pc, #136]	; (800a8d8 <SystemClock_Config+0xd0>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a21      	ldr	r2, [pc, #132]	; (800a8d8 <SystemClock_Config+0xd0>)
 800a852:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a856:	6013      	str	r3, [r2, #0]
 800a858:	4b1f      	ldr	r3, [pc, #124]	; (800a8d8 <SystemClock_Config+0xd0>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a860:	607b      	str	r3, [r7, #4]
 800a862:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a864:	2301      	movs	r3, #1
 800a866:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a868:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a86c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a86e:	2302      	movs	r3, #2
 800a870:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a872:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a876:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800a878:	2304      	movs	r3, #4
 800a87a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800a87c:	23a8      	movs	r3, #168	; 0xa8
 800a87e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a880:	2302      	movs	r3, #2
 800a882:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800a884:	2304      	movs	r3, #4
 800a886:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a888:	f107 0320 	add.w	r3, r7, #32
 800a88c:	4618      	mov	r0, r3
 800a88e:	f7f8 fd93 	bl	80033b8 <HAL_RCC_OscConfig>
 800a892:	4603      	mov	r3, r0
 800a894:	2b00      	cmp	r3, #0
 800a896:	d001      	beq.n	800a89c <SystemClock_Config+0x94>
  {
    Error_Handler();
 800a898:	f000 fd01 	bl	800b29e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a89c:	230f      	movs	r3, #15
 800a89e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a8a0:	2302      	movs	r3, #2
 800a8a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a8a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a8ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a8ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a8b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800a8b4:	f107 030c 	add.w	r3, r7, #12
 800a8b8:	2105      	movs	r1, #5
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f7f8 ffea 	bl	8003894 <HAL_RCC_ClockConfig>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d001      	beq.n	800a8ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800a8c6:	f000 fcea 	bl	800b29e <Error_Handler>
  }
}
 800a8ca:	bf00      	nop
 800a8cc:	3750      	adds	r7, #80	; 0x50
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
 800a8d2:	bf00      	nop
 800a8d4:	40023800 	.word	0x40023800
 800a8d8:	40007000 	.word	0x40007000

0800a8dc <Is_iBus_Throttle_Min>:

/* USER CODE BEGIN 4 */
int Is_iBus_Throttle_Min(void)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	af00      	add	r7, sp, #0
	if(ibus_rx_cplt_flag == 1)
 800a8e0:	4b0e      	ldr	r3, [pc, #56]	; (800a91c <Is_iBus_Throttle_Min+0x40>)
 800a8e2:	781b      	ldrb	r3, [r3, #0]
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d115      	bne.n	800a914 <Is_iBus_Throttle_Min+0x38>
	{
		ibus_rx_cplt_flag = 0;
 800a8e8:	4b0c      	ldr	r3, [pc, #48]	; (800a91c <Is_iBus_Throttle_Min+0x40>)
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	701a      	strb	r2, [r3, #0]
		if(iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1)
 800a8ee:	2120      	movs	r1, #32
 800a8f0:	480b      	ldr	r0, [pc, #44]	; (800a920 <Is_iBus_Throttle_Min+0x44>)
 800a8f2:	f7fc fc4f 	bl	8007194 <iBus_Check_CHKSUM>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d10b      	bne.n	800a914 <Is_iBus_Throttle_Min+0x38>
		{
			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 800a8fc:	4909      	ldr	r1, [pc, #36]	; (800a924 <Is_iBus_Throttle_Min+0x48>)
 800a8fe:	4808      	ldr	r0, [pc, #32]	; (800a920 <Is_iBus_Throttle_Min+0x44>)
 800a900:	f7fc fc7e 	bl	8007200 <iBus_Parsing>
			if(iBus.LV < 1010) return 1;
 800a904:	4b07      	ldr	r3, [pc, #28]	; (800a924 <Is_iBus_Throttle_Min+0x48>)
 800a906:	889b      	ldrh	r3, [r3, #4]
 800a908:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d801      	bhi.n	800a914 <Is_iBus_Throttle_Min+0x38>
 800a910:	2301      	movs	r3, #1
 800a912:	e000      	b.n	800a916 <Is_iBus_Throttle_Min+0x3a>
		}
	}

	return 0;
 800a914:	2300      	movs	r3, #0
}
 800a916:	4618      	mov	r0, r3
 800a918:	bd80      	pop	{r7, pc}
 800a91a:	bf00      	nop
 800a91c:	20000640 	.word	0x20000640
 800a920:	20000620 	.word	0x20000620
 800a924:	200002cc 	.word	0x200002cc

0800a928 <ESC_Calibration>:

void ESC_Calibration(void)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	af00      	add	r7, sp, #0
	  TIM5->CCR1 = 21000;
 800a92c:	4b14      	ldr	r3, [pc, #80]	; (800a980 <ESC_Calibration+0x58>)
 800a92e:	f245 2208 	movw	r2, #21000	; 0x5208
 800a932:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM5->CCR2 = 21000;
 800a934:	4b12      	ldr	r3, [pc, #72]	; (800a980 <ESC_Calibration+0x58>)
 800a936:	f245 2208 	movw	r2, #21000	; 0x5208
 800a93a:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM5->CCR3 = 21000;
 800a93c:	4b10      	ldr	r3, [pc, #64]	; (800a980 <ESC_Calibration+0x58>)
 800a93e:	f245 2208 	movw	r2, #21000	; 0x5208
 800a942:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM5->CCR4 = 21000;
 800a944:	4b0e      	ldr	r3, [pc, #56]	; (800a980 <ESC_Calibration+0x58>)
 800a946:	f245 2208 	movw	r2, #21000	; 0x5208
 800a94a:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_Delay(7000);
 800a94c:	f641 3058 	movw	r0, #7000	; 0x1b58
 800a950:	f7f6 fb1e 	bl	8000f90 <HAL_Delay>
	  TIM5->CCR1 = 10500;
 800a954:	4b0a      	ldr	r3, [pc, #40]	; (800a980 <ESC_Calibration+0x58>)
 800a956:	f642 1204 	movw	r2, #10500	; 0x2904
 800a95a:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM5->CCR2 = 10500;
 800a95c:	4b08      	ldr	r3, [pc, #32]	; (800a980 <ESC_Calibration+0x58>)
 800a95e:	f642 1204 	movw	r2, #10500	; 0x2904
 800a962:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM5->CCR3 = 10500;
 800a964:	4b06      	ldr	r3, [pc, #24]	; (800a980 <ESC_Calibration+0x58>)
 800a966:	f642 1204 	movw	r2, #10500	; 0x2904
 800a96a:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM5->CCR4 = 10500;
 800a96c:	4b04      	ldr	r3, [pc, #16]	; (800a980 <ESC_Calibration+0x58>)
 800a96e:	f642 1204 	movw	r2, #10500	; 0x2904
 800a972:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_Delay(8000);
 800a974:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800a978:	f7f6 fb0a 	bl	8000f90 <HAL_Delay>
}
 800a97c:	bf00      	nop
 800a97e:	bd80      	pop	{r7, pc}
 800a980:	40000c00 	.word	0x40000c00

0800a984 <Is_iBus_Received>:

int Is_iBus_Received(void)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	af00      	add	r7, sp, #0
	if(ibus_rx_cplt_flag == 1)
 800a988:	4b0b      	ldr	r3, [pc, #44]	; (800a9b8 <Is_iBus_Received+0x34>)
 800a98a:	781b      	ldrb	r3, [r3, #0]
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d10f      	bne.n	800a9b0 <Is_iBus_Received+0x2c>
	{
		ibus_rx_cplt_flag = 0;
 800a990:	4b09      	ldr	r3, [pc, #36]	; (800a9b8 <Is_iBus_Received+0x34>)
 800a992:	2200      	movs	r2, #0
 800a994:	701a      	strb	r2, [r3, #0]
		if(iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1)
 800a996:	2120      	movs	r1, #32
 800a998:	4808      	ldr	r0, [pc, #32]	; (800a9bc <Is_iBus_Received+0x38>)
 800a99a:	f7fc fbfb 	bl	8007194 <iBus_Check_CHKSUM>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	2b01      	cmp	r3, #1
 800a9a2:	d105      	bne.n	800a9b0 <Is_iBus_Received+0x2c>
		{
			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 800a9a4:	4906      	ldr	r1, [pc, #24]	; (800a9c0 <Is_iBus_Received+0x3c>)
 800a9a6:	4805      	ldr	r0, [pc, #20]	; (800a9bc <Is_iBus_Received+0x38>)
 800a9a8:	f7fc fc2a 	bl	8007200 <iBus_Parsing>
			return 1;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	e000      	b.n	800a9b2 <Is_iBus_Received+0x2e>
		}
	}

	return 0;
 800a9b0:	2300      	movs	r3, #0
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	20000640 	.word	0x20000640
 800a9bc:	20000620 	.word	0x20000620
 800a9c0:	200002cc 	.word	0x200002cc

0800a9c4 <BNO080_Calibration>:

void BNO080_Calibration(void)
{
 800a9c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a9c8:	b090      	sub	sp, #64	; 0x40
 800a9ca:	af06      	add	r7, sp, #24
	//Resets BNO080 to disable All output
	BNO080_Initialization();
 800a9cc:	f7fb fe9a 	bl	8006704 <BNO080_Initialization>

	//BNO080/BNO085 Configuration
	//Enable dynamic calibration for accelerometer, gyroscope, and magnetometer
	//Enable Game Rotation Vector output
	//Enable Magnetic Field output
	BNO080_calibrateAll(); //Turn on cal for Accel, Gyro, and Mag
 800a9d0:	f7fc f9f5 	bl	8006dbe <BNO080_calibrateAll>
	BNO080_enableGameRotationVector(20000); //Send data update every 20ms (50Hz)
 800a9d4:	f644 6020 	movw	r0, #20000	; 0x4e20
 800a9d8:	f7fc f9d3 	bl	8006d82 <BNO080_enableGameRotationVector>
	BNO080_enableMagnetometer(20000); //Send data update every 20ms (50Hz)
 800a9dc:	f644 6020 	movw	r0, #20000	; 0x4e20
 800a9e0:	f7fc f9de 	bl	8006da0 <BNO080_enableMagnetometer>

	//Once magnetic field is 2 or 3, run the Save DCD Now command
  	printf("Calibrating BNO080. Pull up FS-i6 SWC to end calibration and save to flash\n");
 800a9e4:	489d      	ldr	r0, [pc, #628]	; (800ac5c <BNO080_Calibration+0x298>)
 800a9e6:	f002 fb87 	bl	800d0f8 <puts>
  	printf("Output in form x, y, z, in uTesla\n\n");
 800a9ea:	489d      	ldr	r0, [pc, #628]	; (800ac60 <BNO080_Calibration+0x29c>)
 800a9ec:	f002 fb84 	bl	800d0f8 <puts>

	//while loop for calibration procedure
	//Iterates until iBus.SwC is mid point (1500)
	//Calibration procedure should be done while this loop is in iteration.
	while(iBus.SwC == 1500)
 800a9f0:	e0b8      	b.n	800ab64 <BNO080_Calibration+0x1a0>
	{
		if(BNO080_dataAvailable() == 1)
 800a9f2:	f7fb ff1d 	bl	8006830 <BNO080_dataAvailable>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	2b01      	cmp	r3, #1
 800a9fa:	f040 80ae 	bne.w	800ab5a <BNO080_Calibration+0x196>
		{
			//Observing the status bit of the magnetic field output
			float x = BNO080_getMagX();
 800a9fe:	f7fc f94b 	bl	8006c98 <BNO080_getMagX>
 800aa02:	ed87 0a08 	vstr	s0, [r7, #32]
			float y = BNO080_getMagY();
 800aa06:	f7fc f95d 	bl	8006cc4 <BNO080_getMagY>
 800aa0a:	ed87 0a07 	vstr	s0, [r7, #28]
			float z = BNO080_getMagZ();
 800aa0e:	f7fc f96f 	bl	8006cf0 <BNO080_getMagZ>
 800aa12:	ed87 0a06 	vstr	s0, [r7, #24]
			unsigned char accuracy = BNO080_getMagAccuracy();
 800aa16:	f7fc f981 	bl	8006d1c <BNO080_getMagAccuracy>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	75fb      	strb	r3, [r7, #23]

			float quatI = BNO080_getQuatI();
 800aa1e:	f7fc f8c1 	bl	8006ba4 <BNO080_getQuatI>
 800aa22:	ed87 0a04 	vstr	s0, [r7, #16]
			float quatJ = BNO080_getQuatJ();
 800aa26:	f7fc f8d3 	bl	8006bd0 <BNO080_getQuatJ>
 800aa2a:	ed87 0a03 	vstr	s0, [r7, #12]
			float quatK = BNO080_getQuatK();
 800aa2e:	f7fc f8e5 	bl	8006bfc <BNO080_getQuatK>
 800aa32:	ed87 0a02 	vstr	s0, [r7, #8]
			float quatReal = BNO080_getQuatReal();
 800aa36:	f7fc f8f7 	bl	8006c28 <BNO080_getQuatReal>
 800aa3a:	ed87 0a01 	vstr	s0, [r7, #4]
			unsigned char sensorAccuracy = BNO080_getQuatAccuracy();
 800aa3e:	f7fc f91f 	bl	8006c80 <BNO080_getQuatAccuracy>
 800aa42:	4603      	mov	r3, r0
 800aa44:	70fb      	strb	r3, [r7, #3]

			printf("%f,%f,%f,", x, y, z);
 800aa46:	6a38      	ldr	r0, [r7, #32]
 800aa48:	f7f5 fd7e 	bl	8000548 <__aeabi_f2d>
 800aa4c:	4680      	mov	r8, r0
 800aa4e:	4689      	mov	r9, r1
 800aa50:	69f8      	ldr	r0, [r7, #28]
 800aa52:	f7f5 fd79 	bl	8000548 <__aeabi_f2d>
 800aa56:	4604      	mov	r4, r0
 800aa58:	460d      	mov	r5, r1
 800aa5a:	69b8      	ldr	r0, [r7, #24]
 800aa5c:	f7f5 fd74 	bl	8000548 <__aeabi_f2d>
 800aa60:	4602      	mov	r2, r0
 800aa62:	460b      	mov	r3, r1
 800aa64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aa68:	e9cd 4500 	strd	r4, r5, [sp]
 800aa6c:	4642      	mov	r2, r8
 800aa6e:	464b      	mov	r3, r9
 800aa70:	487c      	ldr	r0, [pc, #496]	; (800ac64 <BNO080_Calibration+0x2a0>)
 800aa72:	f002 fabb 	bl	800cfec <iprintf>
			if (accuracy == 0) printf("Unreliable\t");
 800aa76:	7dfb      	ldrb	r3, [r7, #23]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d103      	bne.n	800aa84 <BNO080_Calibration+0xc0>
 800aa7c:	487a      	ldr	r0, [pc, #488]	; (800ac68 <BNO080_Calibration+0x2a4>)
 800aa7e:	f002 fab5 	bl	800cfec <iprintf>
 800aa82:	e013      	b.n	800aaac <BNO080_Calibration+0xe8>
			else if (accuracy == 1) printf("Low\t");
 800aa84:	7dfb      	ldrb	r3, [r7, #23]
 800aa86:	2b01      	cmp	r3, #1
 800aa88:	d103      	bne.n	800aa92 <BNO080_Calibration+0xce>
 800aa8a:	4878      	ldr	r0, [pc, #480]	; (800ac6c <BNO080_Calibration+0x2a8>)
 800aa8c:	f002 faae 	bl	800cfec <iprintf>
 800aa90:	e00c      	b.n	800aaac <BNO080_Calibration+0xe8>
			else if (accuracy == 2) printf("Medium\t");
 800aa92:	7dfb      	ldrb	r3, [r7, #23]
 800aa94:	2b02      	cmp	r3, #2
 800aa96:	d103      	bne.n	800aaa0 <BNO080_Calibration+0xdc>
 800aa98:	4875      	ldr	r0, [pc, #468]	; (800ac70 <BNO080_Calibration+0x2ac>)
 800aa9a:	f002 faa7 	bl	800cfec <iprintf>
 800aa9e:	e005      	b.n	800aaac <BNO080_Calibration+0xe8>
			else if (accuracy == 3) printf("High\t");
 800aaa0:	7dfb      	ldrb	r3, [r7, #23]
 800aaa2:	2b03      	cmp	r3, #3
 800aaa4:	d102      	bne.n	800aaac <BNO080_Calibration+0xe8>
 800aaa6:	4873      	ldr	r0, [pc, #460]	; (800ac74 <BNO080_Calibration+0x2b0>)
 800aaa8:	f002 faa0 	bl	800cfec <iprintf>

			printf("\t%f,%f,%f,%f,", quatI, quatI, quatI, quatReal);
 800aaac:	6938      	ldr	r0, [r7, #16]
 800aaae:	f7f5 fd4b 	bl	8000548 <__aeabi_f2d>
 800aab2:	4682      	mov	sl, r0
 800aab4:	468b      	mov	fp, r1
 800aab6:	6938      	ldr	r0, [r7, #16]
 800aab8:	f7f5 fd46 	bl	8000548 <__aeabi_f2d>
 800aabc:	4604      	mov	r4, r0
 800aabe:	460d      	mov	r5, r1
 800aac0:	6938      	ldr	r0, [r7, #16]
 800aac2:	f7f5 fd41 	bl	8000548 <__aeabi_f2d>
 800aac6:	4680      	mov	r8, r0
 800aac8:	4689      	mov	r9, r1
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f7f5 fd3c 	bl	8000548 <__aeabi_f2d>
 800aad0:	4602      	mov	r2, r0
 800aad2:	460b      	mov	r3, r1
 800aad4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aad8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800aadc:	e9cd 4500 	strd	r4, r5, [sp]
 800aae0:	4652      	mov	r2, sl
 800aae2:	465b      	mov	r3, fp
 800aae4:	4864      	ldr	r0, [pc, #400]	; (800ac78 <BNO080_Calibration+0x2b4>)
 800aae6:	f002 fa81 	bl	800cfec <iprintf>
			if (sensorAccuracy == 0) printf("Unreliable\n");
 800aaea:	78fb      	ldrb	r3, [r7, #3]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d103      	bne.n	800aaf8 <BNO080_Calibration+0x134>
 800aaf0:	4862      	ldr	r0, [pc, #392]	; (800ac7c <BNO080_Calibration+0x2b8>)
 800aaf2:	f002 fb01 	bl	800d0f8 <puts>
 800aaf6:	e013      	b.n	800ab20 <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 1) printf("Low\n");
 800aaf8:	78fb      	ldrb	r3, [r7, #3]
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	d103      	bne.n	800ab06 <BNO080_Calibration+0x142>
 800aafe:	4860      	ldr	r0, [pc, #384]	; (800ac80 <BNO080_Calibration+0x2bc>)
 800ab00:	f002 fafa 	bl	800d0f8 <puts>
 800ab04:	e00c      	b.n	800ab20 <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 2) printf("Medium\n");
 800ab06:	78fb      	ldrb	r3, [r7, #3]
 800ab08:	2b02      	cmp	r3, #2
 800ab0a:	d103      	bne.n	800ab14 <BNO080_Calibration+0x150>
 800ab0c:	485d      	ldr	r0, [pc, #372]	; (800ac84 <BNO080_Calibration+0x2c0>)
 800ab0e:	f002 faf3 	bl	800d0f8 <puts>
 800ab12:	e005      	b.n	800ab20 <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 3) printf("High\n");
 800ab14:	78fb      	ldrb	r3, [r7, #3]
 800ab16:	2b03      	cmp	r3, #3
 800ab18:	d102      	bne.n	800ab20 <BNO080_Calibration+0x15c>
 800ab1a:	485b      	ldr	r0, [pc, #364]	; (800ac88 <BNO080_Calibration+0x2c4>)
 800ab1c:	f002 faec 	bl	800d0f8 <puts>

			//Turn the LED and buzzer on when both accuracy and sensorAccuracy is high
			if(accuracy == 3 && sensorAccuracy == 3)
 800ab20:	7dfb      	ldrb	r3, [r7, #23]
 800ab22:	2b03      	cmp	r3, #3
 800ab24:	d110      	bne.n	800ab48 <BNO080_Calibration+0x184>
 800ab26:	78fb      	ldrb	r3, [r7, #3]
 800ab28:	2b03      	cmp	r3, #3
 800ab2a:	d10d      	bne.n	800ab48 <BNO080_Calibration+0x184>
			{
				LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 800ab2c:	2107      	movs	r1, #7
 800ab2e:	4857      	ldr	r0, [pc, #348]	; (800ac8c <BNO080_Calibration+0x2c8>)
 800ab30:	f7fe fa61 	bl	8008ff6 <LL_GPIO_SetOutputPin>
				TIM3->PSC = 65000; //Very low frequency
 800ab34:	4b56      	ldr	r3, [pc, #344]	; (800ac90 <BNO080_Calibration+0x2cc>)
 800ab36:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 800ab3a:	629a      	str	r2, [r3, #40]	; 0x28
				LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800ab3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ab40:	4853      	ldr	r0, [pc, #332]	; (800ac90 <BNO080_Calibration+0x2cc>)
 800ab42:	f7fe f9f3 	bl	8008f2c <LL_TIM_CC_EnableChannel>
 800ab46:	e008      	b.n	800ab5a <BNO080_Calibration+0x196>
			}
			else
			{
				LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 800ab48:	2107      	movs	r1, #7
 800ab4a:	4850      	ldr	r0, [pc, #320]	; (800ac8c <BNO080_Calibration+0x2c8>)
 800ab4c:	f7fe fa61 	bl	8009012 <LL_GPIO_ResetOutputPin>
				LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800ab50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ab54:	484e      	ldr	r0, [pc, #312]	; (800ac90 <BNO080_Calibration+0x2cc>)
 800ab56:	f7fe f9fa 	bl	8008f4e <LL_TIM_CC_DisableChannel>
			}
		}

		Is_iBus_Received(); //Refreshes iBus Data for iBus.SwC
 800ab5a:	f7ff ff13 	bl	800a984 <Is_iBus_Received>
		HAL_Delay(100);
 800ab5e:	2064      	movs	r0, #100	; 0x64
 800ab60:	f7f6 fa16 	bl	8000f90 <HAL_Delay>
	while(iBus.SwC == 1500)
 800ab64:	4b4b      	ldr	r3, [pc, #300]	; (800ac94 <BNO080_Calibration+0x2d0>)
 800ab66:	899b      	ldrh	r3, [r3, #12]
 800ab68:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	f43f af40 	beq.w	800a9f2 <BNO080_Calibration+0x2e>
	}

	//Ends the loop when iBus.SwC is not mid point
	//Turn the LED and buzzer off
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 800ab72:	2107      	movs	r1, #7
 800ab74:	4845      	ldr	r0, [pc, #276]	; (800ac8c <BNO080_Calibration+0x2c8>)
 800ab76:	f7fe fa4c 	bl	8009012 <LL_GPIO_ResetOutputPin>
	LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800ab7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ab7e:	4844      	ldr	r0, [pc, #272]	; (800ac90 <BNO080_Calibration+0x2cc>)
 800ab80:	f7fe f9e5 	bl	8008f4e <LL_TIM_CC_DisableChannel>

	//Saves the current dynamic calibration data (DCD) to memory
	//Sends command to get the latest calibration status
	BNO080_saveCalibration();
 800ab84:	f7fc fa08 	bl	8006f98 <BNO080_saveCalibration>
	BNO080_requestCalibrationStatus();
 800ab88:	f7fc f9ea 	bl	8006f60 <BNO080_requestCalibrationStatus>

	//Wait for calibration response, timeout if no response
	int counter = 100;
 800ab8c:	2364      	movs	r3, #100	; 0x64
 800ab8e:	627b      	str	r3, [r7, #36]	; 0x24
	while(1)
	{
		if(--counter == 0) break;
 800ab90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab92:	3b01      	subs	r3, #1
 800ab94:	627b      	str	r3, [r7, #36]	; 0x24
 800ab96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d02f      	beq.n	800abfc <BNO080_Calibration+0x238>
		if(BNO080_dataAvailable())
 800ab9c:	f7fb fe48 	bl	8006830 <BNO080_dataAvailable>
 800aba0:	4603      	mov	r3, r0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d026      	beq.n	800abf4 <BNO080_Calibration+0x230>
		{
			//The IMU can report many different things. We must wait
			//for the ME Calibration Response Status byte to go to zero
			if(BNO080_calibrationComplete() == 1)
 800aba6:	f7fc f911 	bl	8006dcc <BNO080_calibrationComplete>
 800abaa:	4603      	mov	r3, r0
 800abac:	2b01      	cmp	r3, #1
 800abae:	d121      	bne.n	800abf4 <BNO080_Calibration+0x230>
			{
				printf("\nCalibration data successfully stored\n");
 800abb0:	4839      	ldr	r0, [pc, #228]	; (800ac98 <BNO080_Calibration+0x2d4>)
 800abb2:	f002 faa1 	bl	800d0f8 <puts>
				LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800abb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800abba:	4835      	ldr	r0, [pc, #212]	; (800ac90 <BNO080_Calibration+0x2cc>)
 800abbc:	f7fe f9b6 	bl	8008f2c <LL_TIM_CC_EnableChannel>
				TIM3->PSC = 2000;
 800abc0:	4b33      	ldr	r3, [pc, #204]	; (800ac90 <BNO080_Calibration+0x2cc>)
 800abc2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800abc6:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_Delay(300);
 800abc8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800abcc:	f7f6 f9e0 	bl	8000f90 <HAL_Delay>
				TIM3->PSC = 1500;
 800abd0:	4b2f      	ldr	r3, [pc, #188]	; (800ac90 <BNO080_Calibration+0x2cc>)
 800abd2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800abd6:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_Delay(300);
 800abd8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800abdc:	f7f6 f9d8 	bl	8000f90 <HAL_Delay>
				LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800abe0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800abe4:	482a      	ldr	r0, [pc, #168]	; (800ac90 <BNO080_Calibration+0x2cc>)
 800abe6:	f7fe f9b2 	bl	8008f4e <LL_TIM_CC_DisableChannel>
				HAL_Delay(1000);
 800abea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800abee:	f7f6 f9cf 	bl	8000f90 <HAL_Delay>
				break;
 800abf2:	e004      	b.n	800abfe <BNO080_Calibration+0x23a>
			}
		}
		HAL_Delay(10);
 800abf4:	200a      	movs	r0, #10
 800abf6:	f7f6 f9cb 	bl	8000f90 <HAL_Delay>
		if(--counter == 0) break;
 800abfa:	e7c9      	b.n	800ab90 <BNO080_Calibration+0x1cc>
 800abfc:	bf00      	nop
	}
	if(counter == 0)
 800abfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d120      	bne.n	800ac46 <BNO080_Calibration+0x282>
	{
		printf("\nCalibration data failed to store. Please try again.\n");
 800ac04:	4825      	ldr	r0, [pc, #148]	; (800ac9c <BNO080_Calibration+0x2d8>)
 800ac06:	f002 fa77 	bl	800d0f8 <puts>
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800ac0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ac0e:	4820      	ldr	r0, [pc, #128]	; (800ac90 <BNO080_Calibration+0x2cc>)
 800ac10:	f7fe f98c 	bl	8008f2c <LL_TIM_CC_EnableChannel>
		TIM3->PSC = 1500;
 800ac14:	4b1e      	ldr	r3, [pc, #120]	; (800ac90 <BNO080_Calibration+0x2cc>)
 800ac16:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ac1a:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(300);
 800ac1c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ac20:	f7f6 f9b6 	bl	8000f90 <HAL_Delay>
		TIM3->PSC = 2000;
 800ac24:	4b1a      	ldr	r3, [pc, #104]	; (800ac90 <BNO080_Calibration+0x2cc>)
 800ac26:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800ac2a:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(300);
 800ac2c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ac30:	f7f6 f9ae 	bl	8000f90 <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800ac34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ac38:	4815      	ldr	r0, [pc, #84]	; (800ac90 <BNO080_Calibration+0x2cc>)
 800ac3a:	f7fe f988 	bl	8008f4e <LL_TIM_CC_DisableChannel>
		HAL_Delay(1000);
 800ac3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ac42:	f7f6 f9a5 	bl	8000f90 <HAL_Delay>
	//In general, calibration should be left on at all times. The BNO080
	//auto-calibrates and auto-records cal data roughly every 5 minutes

	//Resets BNO080 to disable Game Rotation Vector and Magnetometer
	//Enables Rotation Vector
	BNO080_Initialization();
 800ac46:	f7fb fd5d 	bl	8006704 <BNO080_Initialization>
	//BNO080_enableRotationVector(2500); //Send data update every 2.5ms (400Hz)
	BNO080_enableGameRotationVector(2500);
 800ac4a:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800ac4e:	f7fc f898 	bl	8006d82 <BNO080_enableGameRotationVector>
}
 800ac52:	bf00      	nop
 800ac54:	3728      	adds	r7, #40	; 0x28
 800ac56:	46bd      	mov	sp, r7
 800ac58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac5c:	080101b0 	.word	0x080101b0
 800ac60:	080101fc 	.word	0x080101fc
 800ac64:	08010220 	.word	0x08010220
 800ac68:	0801022c 	.word	0x0801022c
 800ac6c:	08010238 	.word	0x08010238
 800ac70:	08010240 	.word	0x08010240
 800ac74:	08010248 	.word	0x08010248
 800ac78:	08010250 	.word	0x08010250
 800ac7c:	08010260 	.word	0x08010260
 800ac80:	0801026c 	.word	0x0801026c
 800ac84:	08010270 	.word	0x08010270
 800ac88:	08010278 	.word	0x08010278
 800ac8c:	40020800 	.word	0x40020800
 800ac90:	40000400 	.word	0x40000400
 800ac94:	200002cc 	.word	0x200002cc
 800ac98:	08010280 	.word	0x08010280
 800ac9c:	080102a8 	.word	0x080102a8

0800aca0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b082      	sub	sp, #8
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
	static unsigned char cnt = 0;

	if(huart->Instance == USART1)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	4a2e      	ldr	r2, [pc, #184]	; (800ad68 <HAL_UART_RxCpltCallback+0xc8>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d153      	bne.n	800ad5a <HAL_UART_RxCpltCallback+0xba>
	{
		HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 800acb2:	2201      	movs	r2, #1
 800acb4:	492d      	ldr	r1, [pc, #180]	; (800ad6c <HAL_UART_RxCpltCallback+0xcc>)
 800acb6:	482e      	ldr	r0, [pc, #184]	; (800ad70 <HAL_UART_RxCpltCallback+0xd0>)
 800acb8:	f7f9 f937 	bl	8003f2a <HAL_UART_Receive_IT>

		switch(cnt)
 800acbc:	4b2d      	ldr	r3, [pc, #180]	; (800ad74 <HAL_UART_RxCpltCallback+0xd4>)
 800acbe:	781b      	ldrb	r3, [r3, #0]
 800acc0:	2b13      	cmp	r3, #19
 800acc2:	d02e      	beq.n	800ad22 <HAL_UART_RxCpltCallback+0x82>
 800acc4:	2b13      	cmp	r3, #19
 800acc6:	dc3a      	bgt.n	800ad3e <HAL_UART_RxCpltCallback+0x9e>
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d002      	beq.n	800acd2 <HAL_UART_RxCpltCallback+0x32>
 800accc:	2b01      	cmp	r3, #1
 800acce:	d012      	beq.n	800acf6 <HAL_UART_RxCpltCallback+0x56>
 800acd0:	e035      	b.n	800ad3e <HAL_UART_RxCpltCallback+0x9e>
		{
		case 0:
			if(uart1_rx_data == 0x47)
 800acd2:	4b26      	ldr	r3, [pc, #152]	; (800ad6c <HAL_UART_RxCpltCallback+0xcc>)
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	2b47      	cmp	r3, #71	; 0x47
 800acd8:	d141      	bne.n	800ad5e <HAL_UART_RxCpltCallback+0xbe>
			{
				telemetry_rx_buf[cnt] = uart1_rx_data;
 800acda:	4b26      	ldr	r3, [pc, #152]	; (800ad74 <HAL_UART_RxCpltCallback+0xd4>)
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	461a      	mov	r2, r3
 800ace0:	4b22      	ldr	r3, [pc, #136]	; (800ad6c <HAL_UART_RxCpltCallback+0xcc>)
 800ace2:	7819      	ldrb	r1, [r3, #0]
 800ace4:	4b24      	ldr	r3, [pc, #144]	; (800ad78 <HAL_UART_RxCpltCallback+0xd8>)
 800ace6:	5499      	strb	r1, [r3, r2]
				cnt++;
 800ace8:	4b22      	ldr	r3, [pc, #136]	; (800ad74 <HAL_UART_RxCpltCallback+0xd4>)
 800acea:	781b      	ldrb	r3, [r3, #0]
 800acec:	3301      	adds	r3, #1
 800acee:	b2da      	uxtb	r2, r3
 800acf0:	4b20      	ldr	r3, [pc, #128]	; (800ad74 <HAL_UART_RxCpltCallback+0xd4>)
 800acf2:	701a      	strb	r2, [r3, #0]
			}
			break;
 800acf4:	e033      	b.n	800ad5e <HAL_UART_RxCpltCallback+0xbe>
		case 1:
			if(uart1_rx_data == 0x53)
 800acf6:	4b1d      	ldr	r3, [pc, #116]	; (800ad6c <HAL_UART_RxCpltCallback+0xcc>)
 800acf8:	781b      	ldrb	r3, [r3, #0]
 800acfa:	2b53      	cmp	r3, #83	; 0x53
 800acfc:	d10d      	bne.n	800ad1a <HAL_UART_RxCpltCallback+0x7a>
			{
				telemetry_rx_buf[cnt] = uart1_rx_data;
 800acfe:	4b1d      	ldr	r3, [pc, #116]	; (800ad74 <HAL_UART_RxCpltCallback+0xd4>)
 800ad00:	781b      	ldrb	r3, [r3, #0]
 800ad02:	461a      	mov	r2, r3
 800ad04:	4b19      	ldr	r3, [pc, #100]	; (800ad6c <HAL_UART_RxCpltCallback+0xcc>)
 800ad06:	7819      	ldrb	r1, [r3, #0]
 800ad08:	4b1b      	ldr	r3, [pc, #108]	; (800ad78 <HAL_UART_RxCpltCallback+0xd8>)
 800ad0a:	5499      	strb	r1, [r3, r2]
				cnt++;
 800ad0c:	4b19      	ldr	r3, [pc, #100]	; (800ad74 <HAL_UART_RxCpltCallback+0xd4>)
 800ad0e:	781b      	ldrb	r3, [r3, #0]
 800ad10:	3301      	adds	r3, #1
 800ad12:	b2da      	uxtb	r2, r3
 800ad14:	4b17      	ldr	r3, [pc, #92]	; (800ad74 <HAL_UART_RxCpltCallback+0xd4>)
 800ad16:	701a      	strb	r2, [r3, #0]
			}
			else
				cnt = 0;
			break;
 800ad18:	e022      	b.n	800ad60 <HAL_UART_RxCpltCallback+0xc0>
				cnt = 0;
 800ad1a:	4b16      	ldr	r3, [pc, #88]	; (800ad74 <HAL_UART_RxCpltCallback+0xd4>)
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	701a      	strb	r2, [r3, #0]
			break;
 800ad20:	e01e      	b.n	800ad60 <HAL_UART_RxCpltCallback+0xc0>
		case 19:
			telemetry_rx_buf[cnt] = uart1_rx_data;
 800ad22:	4b14      	ldr	r3, [pc, #80]	; (800ad74 <HAL_UART_RxCpltCallback+0xd4>)
 800ad24:	781b      	ldrb	r3, [r3, #0]
 800ad26:	461a      	mov	r2, r3
 800ad28:	4b10      	ldr	r3, [pc, #64]	; (800ad6c <HAL_UART_RxCpltCallback+0xcc>)
 800ad2a:	7819      	ldrb	r1, [r3, #0]
 800ad2c:	4b12      	ldr	r3, [pc, #72]	; (800ad78 <HAL_UART_RxCpltCallback+0xd8>)
 800ad2e:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 800ad30:	4b10      	ldr	r3, [pc, #64]	; (800ad74 <HAL_UART_RxCpltCallback+0xd4>)
 800ad32:	2200      	movs	r2, #0
 800ad34:	701a      	strb	r2, [r3, #0]
			telemetry_rx_cplt_flag = 1;
 800ad36:	4b11      	ldr	r3, [pc, #68]	; (800ad7c <HAL_UART_RxCpltCallback+0xdc>)
 800ad38:	2201      	movs	r2, #1
 800ad3a:	701a      	strb	r2, [r3, #0]
			break;
 800ad3c:	e010      	b.n	800ad60 <HAL_UART_RxCpltCallback+0xc0>
		default:
			telemetry_rx_buf[cnt] = uart1_rx_data;
 800ad3e:	4b0d      	ldr	r3, [pc, #52]	; (800ad74 <HAL_UART_RxCpltCallback+0xd4>)
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	461a      	mov	r2, r3
 800ad44:	4b09      	ldr	r3, [pc, #36]	; (800ad6c <HAL_UART_RxCpltCallback+0xcc>)
 800ad46:	7819      	ldrb	r1, [r3, #0]
 800ad48:	4b0b      	ldr	r3, [pc, #44]	; (800ad78 <HAL_UART_RxCpltCallback+0xd8>)
 800ad4a:	5499      	strb	r1, [r3, r2]
			cnt++;
 800ad4c:	4b09      	ldr	r3, [pc, #36]	; (800ad74 <HAL_UART_RxCpltCallback+0xd4>)
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	3301      	adds	r3, #1
 800ad52:	b2da      	uxtb	r2, r3
 800ad54:	4b07      	ldr	r3, [pc, #28]	; (800ad74 <HAL_UART_RxCpltCallback+0xd4>)
 800ad56:	701a      	strb	r2, [r3, #0]
			break;
 800ad58:	e002      	b.n	800ad60 <HAL_UART_RxCpltCallback+0xc0>
		}
	}
 800ad5a:	bf00      	nop
 800ad5c:	e000      	b.n	800ad60 <HAL_UART_RxCpltCallback+0xc0>
			break;
 800ad5e:	bf00      	nop
}
 800ad60:	bf00      	nop
 800ad62:	3708      	adds	r7, #8
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}
 800ad68:	40011000 	.word	0x40011000
 800ad6c:	20000641 	.word	0x20000641
 800ad70:	20000654 	.word	0x20000654
 800ad74:	200005ee 	.word	0x200005ee
 800ad78:	200005d0 	.word	0x200005d0
 800ad7c:	200005e4 	.word	0x200005e4

0800ad80 <Encode_Msg_AHRS>:

void Encode_Msg_AHRS(unsigned char* telemetry_tx_buf)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b085      	sub	sp, #20
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
	  telemetry_tx_buf[0] = 0x46;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2246      	movs	r2, #70	; 0x46
 800ad8c:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[1] = 0x43;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	3301      	adds	r3, #1
 800ad92:	2243      	movs	r2, #67	; 0x43
 800ad94:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[2] = 0x10;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	3302      	adds	r3, #2
 800ad9a:	2210      	movs	r2, #16
 800ad9c:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[3] = (short)(BNO080_Roll*100);
 800ad9e:	4bae      	ldr	r3, [pc, #696]	; (800b058 <Encode_Msg_AHRS+0x2d8>)
 800ada0:	edd3 7a00 	vldr	s15, [r3]
 800ada4:	ed9f 7aad 	vldr	s14, [pc, #692]	; 800b05c <Encode_Msg_AHRS+0x2dc>
 800ada8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800adac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800adb0:	ee17 3a90 	vmov	r3, s15
 800adb4:	b21a      	sxth	r2, r3
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	3303      	adds	r3, #3
 800adba:	b2d2      	uxtb	r2, r2
 800adbc:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[4] = ((short)(BNO080_Roll*100))>>8;
 800adbe:	4ba6      	ldr	r3, [pc, #664]	; (800b058 <Encode_Msg_AHRS+0x2d8>)
 800adc0:	edd3 7a00 	vldr	s15, [r3]
 800adc4:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 800b05c <Encode_Msg_AHRS+0x2dc>
 800adc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800adcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800add0:	ee17 3a90 	vmov	r3, s15
 800add4:	b21b      	sxth	r3, r3
 800add6:	121b      	asrs	r3, r3, #8
 800add8:	b21a      	sxth	r2, r3
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	3304      	adds	r3, #4
 800adde:	b2d2      	uxtb	r2, r2
 800ade0:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[5] = (short)(BNO080_Pitch*100);
 800ade2:	4b9f      	ldr	r3, [pc, #636]	; (800b060 <Encode_Msg_AHRS+0x2e0>)
 800ade4:	edd3 7a00 	vldr	s15, [r3]
 800ade8:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 800b05c <Encode_Msg_AHRS+0x2dc>
 800adec:	ee67 7a87 	vmul.f32	s15, s15, s14
 800adf0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800adf4:	ee17 3a90 	vmov	r3, s15
 800adf8:	b21a      	sxth	r2, r3
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	3305      	adds	r3, #5
 800adfe:	b2d2      	uxtb	r2, r2
 800ae00:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[6] = ((short)(BNO080_Pitch*100))>>8;
 800ae02:	4b97      	ldr	r3, [pc, #604]	; (800b060 <Encode_Msg_AHRS+0x2e0>)
 800ae04:	edd3 7a00 	vldr	s15, [r3]
 800ae08:	ed9f 7a94 	vldr	s14, [pc, #592]	; 800b05c <Encode_Msg_AHRS+0x2dc>
 800ae0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ae10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ae14:	ee17 3a90 	vmov	r3, s15
 800ae18:	b21b      	sxth	r3, r3
 800ae1a:	121b      	asrs	r3, r3, #8
 800ae1c:	b21a      	sxth	r2, r3
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	3306      	adds	r3, #6
 800ae22:	b2d2      	uxtb	r2, r2
 800ae24:	701a      	strb	r2, [r3, #0]

//	  telemetry_tx_buf[5] = (short)(ICM20602.gyro_x*100);
//	  telemetry_tx_buf[6] = ((short)(ICM20602.gyro_x*100))>>8;

	  telemetry_tx_buf[7] = (unsigned short)(BNO080_Yaw*100);
 800ae26:	4b8f      	ldr	r3, [pc, #572]	; (800b064 <Encode_Msg_AHRS+0x2e4>)
 800ae28:	edd3 7a00 	vldr	s15, [r3]
 800ae2c:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800b05c <Encode_Msg_AHRS+0x2dc>
 800ae30:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ae34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae38:	ee17 3a90 	vmov	r3, s15
 800ae3c:	b29a      	uxth	r2, r3
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	3307      	adds	r3, #7
 800ae42:	b2d2      	uxtb	r2, r2
 800ae44:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[8] = ((unsigned short)(BNO080_Yaw*100))>>8;
 800ae46:	4b87      	ldr	r3, [pc, #540]	; (800b064 <Encode_Msg_AHRS+0x2e4>)
 800ae48:	edd3 7a00 	vldr	s15, [r3]
 800ae4c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800b05c <Encode_Msg_AHRS+0x2dc>
 800ae50:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ae54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae58:	ee17 3a90 	vmov	r3, s15
 800ae5c:	b29b      	uxth	r3, r3
 800ae5e:	0a1b      	lsrs	r3, r3, #8
 800ae60:	b29a      	uxth	r2, r3
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	3308      	adds	r3, #8
 800ae66:	b2d2      	uxtb	r2, r2
 800ae68:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[9] = (short)(LPS22HH.baroAltFilt*10);
 800ae6a:	4b7f      	ldr	r3, [pc, #508]	; (800b068 <Encode_Msg_AHRS+0x2e8>)
 800ae6c:	edd3 7a03 	vldr	s15, [r3, #12]
 800ae70:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800ae74:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ae78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ae7c:	ee17 3a90 	vmov	r3, s15
 800ae80:	b21a      	sxth	r2, r3
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	3309      	adds	r3, #9
 800ae86:	b2d2      	uxtb	r2, r2
 800ae88:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[10] = ((short)(LPS22HH.baroAltFilt*10))>>8;
 800ae8a:	4b77      	ldr	r3, [pc, #476]	; (800b068 <Encode_Msg_AHRS+0x2e8>)
 800ae8c:	edd3 7a03 	vldr	s15, [r3, #12]
 800ae90:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800ae94:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ae98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ae9c:	ee17 3a90 	vmov	r3, s15
 800aea0:	b21b      	sxth	r3, r3
 800aea2:	121b      	asrs	r3, r3, #8
 800aea4:	b21a      	sxth	r2, r3
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	330a      	adds	r3, #10
 800aeaa:	b2d2      	uxtb	r2, r2
 800aeac:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[11] = (short)((iBus.RH-1500)*0.1f*100);
 800aeae:	4b6f      	ldr	r3, [pc, #444]	; (800b06c <Encode_Msg_AHRS+0x2ec>)
 800aeb0:	881b      	ldrh	r3, [r3, #0]
 800aeb2:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800aeb6:	ee07 3a90 	vmov	s15, r3
 800aeba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aebe:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 800b070 <Encode_Msg_AHRS+0x2f0>
 800aec2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aec6:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800b05c <Encode_Msg_AHRS+0x2dc>
 800aeca:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aece:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aed2:	ee17 3a90 	vmov	r3, s15
 800aed6:	b21a      	sxth	r2, r3
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	330b      	adds	r3, #11
 800aedc:	b2d2      	uxtb	r2, r2
 800aede:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[12] = ((short)((iBus.RH-1500)*0.1f*100))>>8;
 800aee0:	4b62      	ldr	r3, [pc, #392]	; (800b06c <Encode_Msg_AHRS+0x2ec>)
 800aee2:	881b      	ldrh	r3, [r3, #0]
 800aee4:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800aee8:	ee07 3a90 	vmov	s15, r3
 800aeec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aef0:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800b070 <Encode_Msg_AHRS+0x2f0>
 800aef4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aef8:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800b05c <Encode_Msg_AHRS+0x2dc>
 800aefc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800af04:	ee17 3a90 	vmov	r3, s15
 800af08:	b21b      	sxth	r3, r3
 800af0a:	121b      	asrs	r3, r3, #8
 800af0c:	b21a      	sxth	r2, r3
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	330c      	adds	r3, #12
 800af12:	b2d2      	uxtb	r2, r2
 800af14:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[13] = (short)((iBus.RV-1500)*0.1f*100);
 800af16:	4b55      	ldr	r3, [pc, #340]	; (800b06c <Encode_Msg_AHRS+0x2ec>)
 800af18:	885b      	ldrh	r3, [r3, #2]
 800af1a:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800af1e:	ee07 3a90 	vmov	s15, r3
 800af22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af26:	ed9f 7a52 	vldr	s14, [pc, #328]	; 800b070 <Encode_Msg_AHRS+0x2f0>
 800af2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af2e:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800b05c <Encode_Msg_AHRS+0x2dc>
 800af32:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800af3a:	ee17 3a90 	vmov	r3, s15
 800af3e:	b21a      	sxth	r2, r3
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	330d      	adds	r3, #13
 800af44:	b2d2      	uxtb	r2, r2
 800af46:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[14] = ((short)((iBus.RV-1500)*0.1f*100))>>8;
 800af48:	4b48      	ldr	r3, [pc, #288]	; (800b06c <Encode_Msg_AHRS+0x2ec>)
 800af4a:	885b      	ldrh	r3, [r3, #2]
 800af4c:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800af50:	ee07 3a90 	vmov	s15, r3
 800af54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af58:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800b070 <Encode_Msg_AHRS+0x2f0>
 800af5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af60:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800b05c <Encode_Msg_AHRS+0x2dc>
 800af64:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800af6c:	ee17 3a90 	vmov	r3, s15
 800af70:	b21b      	sxth	r3, r3
 800af72:	121b      	asrs	r3, r3, #8
 800af74:	b21a      	sxth	r2, r3
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	330e      	adds	r3, #14
 800af7a:	b2d2      	uxtb	r2, r2
 800af7c:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[15] = (unsigned short)((iBus.LH-1000)*0.36f*100);
 800af7e:	4b3b      	ldr	r3, [pc, #236]	; (800b06c <Encode_Msg_AHRS+0x2ec>)
 800af80:	88db      	ldrh	r3, [r3, #6]
 800af82:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800af86:	ee07 3a90 	vmov	s15, r3
 800af8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af8e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800b074 <Encode_Msg_AHRS+0x2f4>
 800af92:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af96:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800b05c <Encode_Msg_AHRS+0x2dc>
 800af9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afa2:	ee17 3a90 	vmov	r3, s15
 800afa6:	b29a      	uxth	r2, r3
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	330f      	adds	r3, #15
 800afac:	b2d2      	uxtb	r2, r2
 800afae:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[16] = ((unsigned short)((iBus.LH-1000)*0.36f*100))>>8;
 800afb0:	4b2e      	ldr	r3, [pc, #184]	; (800b06c <Encode_Msg_AHRS+0x2ec>)
 800afb2:	88db      	ldrh	r3, [r3, #6]
 800afb4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800afb8:	ee07 3a90 	vmov	s15, r3
 800afbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800afc0:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800b074 <Encode_Msg_AHRS+0x2f4>
 800afc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800afc8:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800b05c <Encode_Msg_AHRS+0x2dc>
 800afcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800afd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afd4:	ee17 3a90 	vmov	r3, s15
 800afd8:	b29b      	uxth	r3, r3
 800afda:	0a1b      	lsrs	r3, r3, #8
 800afdc:	b29a      	uxth	r2, r3
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	3310      	adds	r3, #16
 800afe2:	b2d2      	uxtb	r2, r2
 800afe4:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[17] = (short)(iBus.LV*10);
 800afe6:	4b21      	ldr	r3, [pc, #132]	; (800b06c <Encode_Msg_AHRS+0x2ec>)
 800afe8:	889b      	ldrh	r3, [r3, #4]
 800afea:	b2da      	uxtb	r2, r3
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	3311      	adds	r3, #17
 800aff0:	4611      	mov	r1, r2
 800aff2:	0089      	lsls	r1, r1, #2
 800aff4:	440a      	add	r2, r1
 800aff6:	0052      	lsls	r2, r2, #1
 800aff8:	b2d2      	uxtb	r2, r2
 800affa:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[18] = ((short)(iBus.LV*10))>>8;
 800affc:	4b1b      	ldr	r3, [pc, #108]	; (800b06c <Encode_Msg_AHRS+0x2ec>)
 800affe:	889b      	ldrh	r3, [r3, #4]
 800b000:	461a      	mov	r2, r3
 800b002:	0092      	lsls	r2, r2, #2
 800b004:	4413      	add	r3, r2
 800b006:	005b      	lsls	r3, r3, #1
 800b008:	b29b      	uxth	r3, r3
 800b00a:	b21b      	sxth	r3, r3
 800b00c:	121b      	asrs	r3, r3, #8
 800b00e:	b21a      	sxth	r2, r3
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	3312      	adds	r3, #18
 800b014:	b2d2      	uxtb	r2, r2
 800b016:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[19] = 0xff;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	3313      	adds	r3, #19
 800b01c:	22ff      	movs	r2, #255	; 0xff
 800b01e:	701a      	strb	r2, [r3, #0]

	  for(int i=0;i<19;i++) telemetry_tx_buf[19] = telemetry_tx_buf[19] - telemetry_tx_buf[i];
 800b020:	2300      	movs	r3, #0
 800b022:	60fb      	str	r3, [r7, #12]
 800b024:	e00e      	b.n	800b044 <Encode_Msg_AHRS+0x2c4>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	3313      	adds	r3, #19
 800b02a:	7819      	ldrb	r1, [r3, #0]
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	687a      	ldr	r2, [r7, #4]
 800b030:	4413      	add	r3, r2
 800b032:	781a      	ldrb	r2, [r3, #0]
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	3313      	adds	r3, #19
 800b038:	1a8a      	subs	r2, r1, r2
 800b03a:	b2d2      	uxtb	r2, r2
 800b03c:	701a      	strb	r2, [r3, #0]
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	3301      	adds	r3, #1
 800b042:	60fb      	str	r3, [r7, #12]
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	2b12      	cmp	r3, #18
 800b048:	dded      	ble.n	800b026 <Encode_Msg_AHRS+0x2a6>
}
 800b04a:	bf00      	nop
 800b04c:	bf00      	nop
 800b04e:	3714      	adds	r7, #20
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr
 800b058:	200004a0 	.word	0x200004a0
 800b05c:	42c80000 	.word	0x42c80000
 800b060:	200004a4 	.word	0x200004a4
 800b064:	200004a8 	.word	0x200004a8
 800b068:	2000030c 	.word	0x2000030c
 800b06c:	200002cc 	.word	0x200002cc
 800b070:	3dcccccd 	.word	0x3dcccccd
 800b074:	3eb851ec 	.word	0x3eb851ec

0800b078 <Encode_Msg_GPS>:

void Encode_Msg_GPS(unsigned char* telemetry_tx_buf)
{
 800b078:	b480      	push	{r7}
 800b07a:	b085      	sub	sp, #20
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
	  telemetry_tx_buf[0] = 0x46;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2246      	movs	r2, #70	; 0x46
 800b084:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[1] = 0x43;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	3301      	adds	r3, #1
 800b08a:	2243      	movs	r2, #67	; 0x43
 800b08c:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[2] = 0x11;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	3302      	adds	r3, #2
 800b092:	2211      	movs	r2, #17
 800b094:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[3] = posllh.lat;
 800b096:	4b53      	ldr	r3, [pc, #332]	; (800b1e4 <Encode_Msg_GPS+0x16c>)
 800b098:	68da      	ldr	r2, [r3, #12]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	3303      	adds	r3, #3
 800b09e:	b2d2      	uxtb	r2, r2
 800b0a0:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[4] = posllh.lat>>8;
 800b0a2:	4b50      	ldr	r3, [pc, #320]	; (800b1e4 <Encode_Msg_GPS+0x16c>)
 800b0a4:	68db      	ldr	r3, [r3, #12]
 800b0a6:	121a      	asrs	r2, r3, #8
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	3304      	adds	r3, #4
 800b0ac:	b2d2      	uxtb	r2, r2
 800b0ae:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[5] = posllh.lat>>16;
 800b0b0:	4b4c      	ldr	r3, [pc, #304]	; (800b1e4 <Encode_Msg_GPS+0x16c>)
 800b0b2:	68db      	ldr	r3, [r3, #12]
 800b0b4:	141a      	asrs	r2, r3, #16
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	3305      	adds	r3, #5
 800b0ba:	b2d2      	uxtb	r2, r2
 800b0bc:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[6] = posllh.lat>>24;
 800b0be:	4b49      	ldr	r3, [pc, #292]	; (800b1e4 <Encode_Msg_GPS+0x16c>)
 800b0c0:	68db      	ldr	r3, [r3, #12]
 800b0c2:	161a      	asrs	r2, r3, #24
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	3306      	adds	r3, #6
 800b0c8:	b2d2      	uxtb	r2, r2
 800b0ca:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[7] = posllh.lon;
 800b0cc:	4b45      	ldr	r3, [pc, #276]	; (800b1e4 <Encode_Msg_GPS+0x16c>)
 800b0ce:	689a      	ldr	r2, [r3, #8]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	3307      	adds	r3, #7
 800b0d4:	b2d2      	uxtb	r2, r2
 800b0d6:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[8] = posllh.lon>>8;
 800b0d8:	4b42      	ldr	r3, [pc, #264]	; (800b1e4 <Encode_Msg_GPS+0x16c>)
 800b0da:	689b      	ldr	r3, [r3, #8]
 800b0dc:	121a      	asrs	r2, r3, #8
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	3308      	adds	r3, #8
 800b0e2:	b2d2      	uxtb	r2, r2
 800b0e4:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[9] = posllh.lon>>16;
 800b0e6:	4b3f      	ldr	r3, [pc, #252]	; (800b1e4 <Encode_Msg_GPS+0x16c>)
 800b0e8:	689b      	ldr	r3, [r3, #8]
 800b0ea:	141a      	asrs	r2, r3, #16
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	3309      	adds	r3, #9
 800b0f0:	b2d2      	uxtb	r2, r2
 800b0f2:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[10] = posllh.lon>>24;
 800b0f4:	4b3b      	ldr	r3, [pc, #236]	; (800b1e4 <Encode_Msg_GPS+0x16c>)
 800b0f6:	689b      	ldr	r3, [r3, #8]
 800b0f8:	161a      	asrs	r2, r3, #24
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	330a      	adds	r3, #10
 800b0fe:	b2d2      	uxtb	r2, r2
 800b100:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[11] = (unsigned short)(batVolt*100);
 800b102:	4b39      	ldr	r3, [pc, #228]	; (800b1e8 <Encode_Msg_GPS+0x170>)
 800b104:	edd3 7a00 	vldr	s15, [r3]
 800b108:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800b1ec <Encode_Msg_GPS+0x174>
 800b10c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b110:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b114:	ee17 3a90 	vmov	r3, s15
 800b118:	b29a      	uxth	r2, r3
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	330b      	adds	r3, #11
 800b11e:	b2d2      	uxtb	r2, r2
 800b120:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[12] = ((unsigned short)(batVolt*100))>>8;
 800b122:	4b31      	ldr	r3, [pc, #196]	; (800b1e8 <Encode_Msg_GPS+0x170>)
 800b124:	edd3 7a00 	vldr	s15, [r3]
 800b128:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800b1ec <Encode_Msg_GPS+0x174>
 800b12c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b134:	ee17 3a90 	vmov	r3, s15
 800b138:	b29b      	uxth	r3, r3
 800b13a:	0a1b      	lsrs	r3, r3, #8
 800b13c:	b29a      	uxth	r2, r3
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	330c      	adds	r3, #12
 800b142:	b2d2      	uxtb	r2, r2
 800b144:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[13] = iBus.SwA == 1000 ? 0 : 1;
 800b146:	4b2a      	ldr	r3, [pc, #168]	; (800b1f0 <Encode_Msg_GPS+0x178>)
 800b148:	891b      	ldrh	r3, [r3, #8]
 800b14a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b14e:	bf14      	ite	ne
 800b150:	2301      	movne	r3, #1
 800b152:	2300      	moveq	r3, #0
 800b154:	b2da      	uxtb	r2, r3
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	330d      	adds	r3, #13
 800b15a:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[14] = iBus.SwC == 1000 ? 0 : iBus.SwC == 1500 ? 1 : 2;
 800b15c:	4b24      	ldr	r3, [pc, #144]	; (800b1f0 <Encode_Msg_GPS+0x178>)
 800b15e:	899b      	ldrh	r3, [r3, #12]
 800b160:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b164:	d009      	beq.n	800b17a <Encode_Msg_GPS+0x102>
 800b166:	4b22      	ldr	r3, [pc, #136]	; (800b1f0 <Encode_Msg_GPS+0x178>)
 800b168:	899b      	ldrh	r3, [r3, #12]
 800b16a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800b16e:	4293      	cmp	r3, r2
 800b170:	d101      	bne.n	800b176 <Encode_Msg_GPS+0xfe>
 800b172:	2301      	movs	r3, #1
 800b174:	e002      	b.n	800b17c <Encode_Msg_GPS+0x104>
 800b176:	2302      	movs	r3, #2
 800b178:	e000      	b.n	800b17c <Encode_Msg_GPS+0x104>
 800b17a:	2300      	movs	r3, #0
 800b17c:	687a      	ldr	r2, [r7, #4]
 800b17e:	320e      	adds	r2, #14
 800b180:	7013      	strb	r3, [r2, #0]

	  telemetry_tx_buf[15] = failsafe_flag;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	330f      	adds	r3, #15
 800b186:	4a1b      	ldr	r2, [pc, #108]	; (800b1f4 <Encode_Msg_GPS+0x17c>)
 800b188:	7812      	ldrb	r2, [r2, #0]
 800b18a:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[16] = 0x00;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	3310      	adds	r3, #16
 800b190:	2200      	movs	r2, #0
 800b192:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[17] = 0x00;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	3311      	adds	r3, #17
 800b198:	2200      	movs	r2, #0
 800b19a:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[18] = 0x00;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	3312      	adds	r3, #18
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[19] = 0xff;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	3313      	adds	r3, #19
 800b1a8:	22ff      	movs	r2, #255	; 0xff
 800b1aa:	701a      	strb	r2, [r3, #0]

	  for(int i=0;i<19;i++) telemetry_tx_buf[19] = telemetry_tx_buf[19] - telemetry_tx_buf[i];
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	60fb      	str	r3, [r7, #12]
 800b1b0:	e00e      	b.n	800b1d0 <Encode_Msg_GPS+0x158>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	3313      	adds	r3, #19
 800b1b6:	7819      	ldrb	r1, [r3, #0]
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	687a      	ldr	r2, [r7, #4]
 800b1bc:	4413      	add	r3, r2
 800b1be:	781a      	ldrb	r2, [r3, #0]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	3313      	adds	r3, #19
 800b1c4:	1a8a      	subs	r2, r1, r2
 800b1c6:	b2d2      	uxtb	r2, r2
 800b1c8:	701a      	strb	r2, [r3, #0]
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	3301      	adds	r3, #1
 800b1ce:	60fb      	str	r3, [r7, #12]
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2b12      	cmp	r3, #18
 800b1d4:	dded      	ble.n	800b1b2 <Encode_Msg_GPS+0x13a>
}
 800b1d6:	bf00      	nop
 800b1d8:	bf00      	nop
 800b1da:	3714      	adds	r7, #20
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr
 800b1e4:	20000320 	.word	0x20000320
 800b1e8:	200005e8 	.word	0x200005e8
 800b1ec:	42c80000 	.word	0x42c80000
 800b1f0:	200002cc 	.word	0x200002cc
 800b1f4:	200005ec 	.word	0x200005ec

0800b1f8 <Encode_Msg_PID_Gain>:

void Encode_Msg_PID_Gain(unsigned char* telemetry_tx_buf, unsigned char id, float p, float i, float d)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b089      	sub	sp, #36	; 0x24
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6178      	str	r0, [r7, #20]
 800b200:	460b      	mov	r3, r1
 800b202:	ed87 0a03 	vstr	s0, [r7, #12]
 800b206:	edc7 0a02 	vstr	s1, [r7, #8]
 800b20a:	ed87 1a01 	vstr	s2, [r7, #4]
 800b20e:	74fb      	strb	r3, [r7, #19]
	  telemetry_tx_buf[0] = 0x46;
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	2246      	movs	r2, #70	; 0x46
 800b214:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[1] = 0x43;
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	3301      	adds	r3, #1
 800b21a:	2243      	movs	r2, #67	; 0x43
 800b21c:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[2] = id;
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	3302      	adds	r3, #2
 800b222:	7cfa      	ldrb	r2, [r7, #19]
 800b224:	701a      	strb	r2, [r3, #0]

//	  memcpy(&telemetry_tx_buf[3], &p, 4);
//	  memcpy(&telemetry_tx_buf[7], &i, 4);
//	  memcpy(&telemetry_tx_buf[11], &d, 4);

	  *(float*)&telemetry_tx_buf[3] = p;
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	3303      	adds	r3, #3
 800b22a:	68fa      	ldr	r2, [r7, #12]
 800b22c:	601a      	str	r2, [r3, #0]
	  *(float*)&telemetry_tx_buf[7] = i;
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	3307      	adds	r3, #7
 800b232:	68ba      	ldr	r2, [r7, #8]
 800b234:	601a      	str	r2, [r3, #0]
	  *(float*)&telemetry_tx_buf[11] = d;
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	330b      	adds	r3, #11
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	601a      	str	r2, [r3, #0]

	  telemetry_tx_buf[15] = 0x00;
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	330f      	adds	r3, #15
 800b242:	2200      	movs	r2, #0
 800b244:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[16] = 0x00;
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	3310      	adds	r3, #16
 800b24a:	2200      	movs	r2, #0
 800b24c:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[17] = 0x00;
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	3311      	adds	r3, #17
 800b252:	2200      	movs	r2, #0
 800b254:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[18] = 0x00;
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	3312      	adds	r3, #18
 800b25a:	2200      	movs	r2, #0
 800b25c:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[19] = 0xff;
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	3313      	adds	r3, #19
 800b262:	22ff      	movs	r2, #255	; 0xff
 800b264:	701a      	strb	r2, [r3, #0]

	  for(int i=0;i<19;i++) telemetry_tx_buf[19] = telemetry_tx_buf[19] - telemetry_tx_buf[i];
 800b266:	2300      	movs	r3, #0
 800b268:	61fb      	str	r3, [r7, #28]
 800b26a:	e00e      	b.n	800b28a <Encode_Msg_PID_Gain+0x92>
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	3313      	adds	r3, #19
 800b270:	7819      	ldrb	r1, [r3, #0]
 800b272:	69fb      	ldr	r3, [r7, #28]
 800b274:	697a      	ldr	r2, [r7, #20]
 800b276:	4413      	add	r3, r2
 800b278:	781a      	ldrb	r2, [r3, #0]
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	3313      	adds	r3, #19
 800b27e:	1a8a      	subs	r2, r1, r2
 800b280:	b2d2      	uxtb	r2, r2
 800b282:	701a      	strb	r2, [r3, #0]
 800b284:	69fb      	ldr	r3, [r7, #28]
 800b286:	3301      	adds	r3, #1
 800b288:	61fb      	str	r3, [r7, #28]
 800b28a:	69fb      	ldr	r3, [r7, #28]
 800b28c:	2b12      	cmp	r3, #18
 800b28e:	dded      	ble.n	800b26c <Encode_Msg_PID_Gain+0x74>
}
 800b290:	bf00      	nop
 800b292:	bf00      	nop
 800b294:	3724      	adds	r7, #36	; 0x24
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr

0800b29e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800b29e:	b480      	push	{r7}
 800b2a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800b2a2:	bf00      	nop
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr

0800b2ac <LL_SPI_SetStandard>:
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b083      	sub	sp, #12
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
 800b2b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	f023 0210 	bic.w	r2, r3, #16
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	431a      	orrs	r2, r3
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	605a      	str	r2, [r3, #4]
}
 800b2c6:	bf00      	nop
 800b2c8:	370c      	adds	r7, #12
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d0:	4770      	bx	lr
	...

0800b2d4 <LL_AHB1_GRP1_EnableClock>:
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b085      	sub	sp, #20
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800b2dc:	4b08      	ldr	r3, [pc, #32]	; (800b300 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800b2de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b2e0:	4907      	ldr	r1, [pc, #28]	; (800b300 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	4313      	orrs	r3, r2
 800b2e6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800b2e8:	4b05      	ldr	r3, [pc, #20]	; (800b300 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800b2ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	4013      	ands	r3, r2
 800b2f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
}
 800b2f4:	bf00      	nop
 800b2f6:	3714      	adds	r7, #20
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr
 800b300:	40023800 	.word	0x40023800

0800b304 <LL_APB1_GRP1_EnableClock>:
{
 800b304:	b480      	push	{r7}
 800b306:	b085      	sub	sp, #20
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800b30c:	4b08      	ldr	r3, [pc, #32]	; (800b330 <LL_APB1_GRP1_EnableClock+0x2c>)
 800b30e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b310:	4907      	ldr	r1, [pc, #28]	; (800b330 <LL_APB1_GRP1_EnableClock+0x2c>)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	4313      	orrs	r3, r2
 800b316:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800b318:	4b05      	ldr	r3, [pc, #20]	; (800b330 <LL_APB1_GRP1_EnableClock+0x2c>)
 800b31a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	4013      	ands	r3, r2
 800b320:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b322:	68fb      	ldr	r3, [r7, #12]
}
 800b324:	bf00      	nop
 800b326:	3714      	adds	r7, #20
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr
 800b330:	40023800 	.word	0x40023800

0800b334 <LL_APB2_GRP1_EnableClock>:
{
 800b334:	b480      	push	{r7}
 800b336:	b085      	sub	sp, #20
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800b33c:	4b08      	ldr	r3, [pc, #32]	; (800b360 <LL_APB2_GRP1_EnableClock+0x2c>)
 800b33e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b340:	4907      	ldr	r1, [pc, #28]	; (800b360 <LL_APB2_GRP1_EnableClock+0x2c>)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	4313      	orrs	r3, r2
 800b346:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800b348:	4b05      	ldr	r3, [pc, #20]	; (800b360 <LL_APB2_GRP1_EnableClock+0x2c>)
 800b34a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	4013      	ands	r3, r2
 800b350:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b352:	68fb      	ldr	r3, [r7, #12]
}
 800b354:	bf00      	nop
 800b356:	3714      	adds	r7, #20
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr
 800b360:	40023800 	.word	0x40023800

0800b364 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b090      	sub	sp, #64	; 0x40
 800b368:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800b36a:	f107 0318 	add.w	r3, r7, #24
 800b36e:	2228      	movs	r2, #40	; 0x28
 800b370:	2100      	movs	r1, #0
 800b372:	4618      	mov	r0, r3
 800b374:	f001 f9c8 	bl	800c708 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b378:	463b      	mov	r3, r7
 800b37a:	2200      	movs	r2, #0
 800b37c:	601a      	str	r2, [r3, #0]
 800b37e:	605a      	str	r2, [r3, #4]
 800b380:	609a      	str	r2, [r3, #8]
 800b382:	60da      	str	r2, [r3, #12]
 800b384:	611a      	str	r2, [r3, #16]
 800b386:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 800b388:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b38c:	f7ff ffd2 	bl	800b334 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800b390:	2001      	movs	r0, #1
 800b392:	f7ff ff9f 	bl	800b2d4 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration  
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800b396:	23e0      	movs	r3, #224	; 0xe0
 800b398:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800b39a:	2302      	movs	r3, #2
 800b39c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800b39e:	2303      	movs	r3, #3
 800b3a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800b3aa:	2305      	movs	r3, #5
 800b3ac:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b3ae:	463b      	mov	r3, r7
 800b3b0:	4619      	mov	r1, r3
 800b3b2:	4813      	ldr	r0, [pc, #76]	; (800b400 <MX_SPI1_Init+0x9c>)
 800b3b4:	f7f9 fe76 	bl	80050a4 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800b3bc:	f44f 7382 	mov.w	r3, #260	; 0x104
 800b3c0:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800b3c6:	2302      	movs	r3, #2
 800b3c8:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800b3ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 800b3d4:	2310      	movs	r3, #16
 800b3d6:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 800b3e0:	230a      	movs	r3, #10
 800b3e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 800b3e4:	f107 0318 	add.w	r3, r7, #24
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	4806      	ldr	r0, [pc, #24]	; (800b404 <MX_SPI1_Init+0xa0>)
 800b3ec:	f7fa f82b 	bl	8005446 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 800b3f0:	2100      	movs	r1, #0
 800b3f2:	4804      	ldr	r0, [pc, #16]	; (800b404 <MX_SPI1_Init+0xa0>)
 800b3f4:	f7ff ff5a 	bl	800b2ac <LL_SPI_SetStandard>

}
 800b3f8:	bf00      	nop
 800b3fa:	3740      	adds	r7, #64	; 0x40
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}
 800b400:	40020000 	.word	0x40020000
 800b404:	40013000 	.word	0x40013000

0800b408 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b090      	sub	sp, #64	; 0x40
 800b40c:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800b40e:	f107 0318 	add.w	r3, r7, #24
 800b412:	2228      	movs	r2, #40	; 0x28
 800b414:	2100      	movs	r1, #0
 800b416:	4618      	mov	r0, r3
 800b418:	f001 f976 	bl	800c708 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b41c:	463b      	mov	r3, r7
 800b41e:	2200      	movs	r2, #0
 800b420:	601a      	str	r2, [r3, #0]
 800b422:	605a      	str	r2, [r3, #4]
 800b424:	609a      	str	r2, [r3, #8]
 800b426:	60da      	str	r2, [r3, #12]
 800b428:	611a      	str	r2, [r3, #16]
 800b42a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 800b42c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b430:	f7ff ff68 	bl	800b304 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800b434:	2002      	movs	r0, #2
 800b436:	f7ff ff4d 	bl	800b2d4 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration  
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 800b43a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800b43e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800b440:	2302      	movs	r3, #2
 800b442:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800b444:	2303      	movs	r3, #3
 800b446:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800b448:	2300      	movs	r3, #0
 800b44a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800b44c:	2300      	movs	r3, #0
 800b44e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800b450:	2305      	movs	r3, #5
 800b452:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b454:	463b      	mov	r3, r7
 800b456:	4619      	mov	r1, r3
 800b458:	4813      	ldr	r0, [pc, #76]	; (800b4a8 <MX_SPI2_Init+0xa0>)
 800b45a:	f7f9 fe23 	bl	80050a4 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800b45e:	2300      	movs	r3, #0
 800b460:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800b462:	f44f 7382 	mov.w	r3, #260	; 0x104
 800b466:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800b468:	2300      	movs	r3, #0
 800b46a:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800b46c:	2302      	movs	r3, #2
 800b46e:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800b470:	2301      	movs	r3, #1
 800b472:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800b474:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b478:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 800b47a:	2318      	movs	r3, #24
 800b47c:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800b47e:	2300      	movs	r3, #0
 800b480:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800b482:	2300      	movs	r3, #0
 800b484:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 800b486:	230a      	movs	r3, #10
 800b488:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 800b48a:	f107 0318 	add.w	r3, r7, #24
 800b48e:	4619      	mov	r1, r3
 800b490:	4806      	ldr	r0, [pc, #24]	; (800b4ac <MX_SPI2_Init+0xa4>)
 800b492:	f7f9 ffd8 	bl	8005446 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 800b496:	2100      	movs	r1, #0
 800b498:	4804      	ldr	r0, [pc, #16]	; (800b4ac <MX_SPI2_Init+0xa4>)
 800b49a:	f7ff ff07 	bl	800b2ac <LL_SPI_SetStandard>

}
 800b49e:	bf00      	nop
 800b4a0:	3740      	adds	r7, #64	; 0x40
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
 800b4a6:	bf00      	nop
 800b4a8:	40020400 	.word	0x40020400
 800b4ac:	40003800 	.word	0x40003800

0800b4b0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b090      	sub	sp, #64	; 0x40
 800b4b4:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800b4b6:	f107 0318 	add.w	r3, r7, #24
 800b4ba:	2228      	movs	r2, #40	; 0x28
 800b4bc:	2100      	movs	r1, #0
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f001 f922 	bl	800c708 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b4c4:	463b      	mov	r3, r7
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	601a      	str	r2, [r3, #0]
 800b4ca:	605a      	str	r2, [r3, #4]
 800b4cc:	609a      	str	r2, [r3, #8]
 800b4ce:	60da      	str	r2, [r3, #12]
 800b4d0:	611a      	str	r2, [r3, #16]
 800b4d2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 800b4d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800b4d8:	f7ff ff14 	bl	800b304 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800b4dc:	2002      	movs	r0, #2
 800b4de:	f7ff fef9 	bl	800b2d4 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration  
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 800b4e2:	2338      	movs	r3, #56	; 0x38
 800b4e4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800b4e6:	2302      	movs	r3, #2
 800b4e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800b4ea:	2303      	movs	r3, #3
 800b4ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800b4f6:	2306      	movs	r3, #6
 800b4f8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b4fa:	463b      	mov	r3, r7
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	4813      	ldr	r0, [pc, #76]	; (800b54c <MX_SPI3_Init+0x9c>)
 800b500:	f7f9 fdd0 	bl	80050a4 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800b504:	2300      	movs	r3, #0
 800b506:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800b508:	f44f 7382 	mov.w	r3, #260	; 0x104
 800b50c:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800b50e:	2300      	movs	r3, #0
 800b510:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800b512:	2302      	movs	r3, #2
 800b514:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800b516:	2301      	movs	r3, #1
 800b518:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800b51a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b51e:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 800b520:	2308      	movs	r3, #8
 800b522:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800b524:	2300      	movs	r3, #0
 800b526:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800b528:	2300      	movs	r3, #0
 800b52a:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 800b52c:	230a      	movs	r3, #10
 800b52e:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 800b530:	f107 0318 	add.w	r3, r7, #24
 800b534:	4619      	mov	r1, r3
 800b536:	4806      	ldr	r0, [pc, #24]	; (800b550 <MX_SPI3_Init+0xa0>)
 800b538:	f7f9 ff85 	bl	8005446 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 800b53c:	2100      	movs	r1, #0
 800b53e:	4804      	ldr	r0, [pc, #16]	; (800b550 <MX_SPI3_Init+0xa0>)
 800b540:	f7ff feb4 	bl	800b2ac <LL_SPI_SetStandard>

}
 800b544:	bf00      	nop
 800b546:	3740      	adds	r7, #64	; 0x40
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}
 800b54c:	40020400 	.word	0x40020400
 800b550:	40003c00 	.word	0x40003c00

0800b554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b554:	b480      	push	{r7}
 800b556:	b083      	sub	sp, #12
 800b558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b55a:	2300      	movs	r3, #0
 800b55c:	607b      	str	r3, [r7, #4]
 800b55e:	4b10      	ldr	r3, [pc, #64]	; (800b5a0 <HAL_MspInit+0x4c>)
 800b560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b562:	4a0f      	ldr	r2, [pc, #60]	; (800b5a0 <HAL_MspInit+0x4c>)
 800b564:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b568:	6453      	str	r3, [r2, #68]	; 0x44
 800b56a:	4b0d      	ldr	r3, [pc, #52]	; (800b5a0 <HAL_MspInit+0x4c>)
 800b56c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b56e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b572:	607b      	str	r3, [r7, #4]
 800b574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b576:	2300      	movs	r3, #0
 800b578:	603b      	str	r3, [r7, #0]
 800b57a:	4b09      	ldr	r3, [pc, #36]	; (800b5a0 <HAL_MspInit+0x4c>)
 800b57c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b57e:	4a08      	ldr	r2, [pc, #32]	; (800b5a0 <HAL_MspInit+0x4c>)
 800b580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b584:	6413      	str	r3, [r2, #64]	; 0x40
 800b586:	4b06      	ldr	r3, [pc, #24]	; (800b5a0 <HAL_MspInit+0x4c>)
 800b588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b58a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b58e:	603b      	str	r3, [r7, #0]
 800b590:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b592:	bf00      	nop
 800b594:	370c      	adds	r7, #12
 800b596:	46bd      	mov	sp, r7
 800b598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59c:	4770      	bx	lr
 800b59e:	bf00      	nop
 800b5a0:	40023800 	.word	0x40023800

0800b5a4 <LL_TIM_ClearFlag_UPDATE>:
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b083      	sub	sp, #12
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f06f 0201 	mvn.w	r2, #1
 800b5b2:	611a      	str	r2, [r3, #16]
}
 800b5b4:	bf00      	nop
 800b5b6:	370c      	adds	r7, #12
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr

0800b5c0 <LL_TIM_IsActiveFlag_UPDATE>:
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b083      	sub	sp, #12
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	691b      	ldr	r3, [r3, #16]
 800b5cc:	f003 0301 	and.w	r3, r3, #1
 800b5d0:	2b01      	cmp	r3, #1
 800b5d2:	d101      	bne.n	800b5d8 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	e000      	b.n	800b5da <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800b5d8:	2300      	movs	r3, #0
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	370c      	adds	r7, #12
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e4:	4770      	bx	lr

0800b5e6 <LL_USART_IsActiveFlag_RXNE>:
{
 800b5e6:	b480      	push	{r7}
 800b5e8:	b083      	sub	sp, #12
 800b5ea:	af00      	add	r7, sp, #0
 800b5ec:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f003 0320 	and.w	r3, r3, #32
 800b5f6:	2b20      	cmp	r3, #32
 800b5f8:	bf0c      	ite	eq
 800b5fa:	2301      	moveq	r3, #1
 800b5fc:	2300      	movne	r3, #0
 800b5fe:	b2db      	uxtb	r3, r3
}
 800b600:	4618      	mov	r0, r3
 800b602:	370c      	adds	r7, #12
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr

0800b60c <LL_USART_ClearFlag_RXNE>:
{
 800b60c:	b480      	push	{r7}
 800b60e:	b083      	sub	sp, #12
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f06f 0220 	mvn.w	r2, #32
 800b61a:	601a      	str	r2, [r3, #0]
}
 800b61c:	bf00      	nop
 800b61e:	370c      	adds	r7, #12
 800b620:	46bd      	mov	sp, r7
 800b622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b626:	4770      	bx	lr

0800b628 <LL_USART_ReceiveData8>:
{
 800b628:	b480      	push	{r7}
 800b62a:	b083      	sub	sp, #12
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	685b      	ldr	r3, [r3, #4]
 800b634:	b2db      	uxtb	r3, r3
}
 800b636:	4618      	mov	r0, r3
 800b638:	370c      	adds	r7, #12
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr

0800b642 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b642:	b480      	push	{r7}
 800b644:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b646:	bf00      	nop
 800b648:	46bd      	mov	sp, r7
 800b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64e:	4770      	bx	lr

0800b650 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b650:	b480      	push	{r7}
 800b652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b654:	e7fe      	b.n	800b654 <HardFault_Handler+0x4>

0800b656 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b656:	b480      	push	{r7}
 800b658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b65a:	e7fe      	b.n	800b65a <MemManage_Handler+0x4>

0800b65c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b65c:	b480      	push	{r7}
 800b65e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b660:	e7fe      	b.n	800b660 <BusFault_Handler+0x4>

0800b662 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b662:	b480      	push	{r7}
 800b664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b666:	e7fe      	b.n	800b666 <UsageFault_Handler+0x4>

0800b668 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b668:	b480      	push	{r7}
 800b66a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b66c:	bf00      	nop
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr

0800b676 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b676:	b480      	push	{r7}
 800b678:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b67a:	bf00      	nop
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr

0800b684 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b684:	b480      	push	{r7}
 800b686:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b688:	bf00      	nop
 800b68a:	46bd      	mov	sp, r7
 800b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b690:	4770      	bx	lr

0800b692 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b692:	b580      	push	{r7, lr}
 800b694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b696:	f7f5 fc5b 	bl	8000f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b69a:	bf00      	nop
 800b69c:	bd80      	pop	{r7, pc}
	...

0800b6a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800b6a4:	4802      	ldr	r0, [pc, #8]	; (800b6b0 <USART1_IRQHandler+0x10>)
 800b6a6:	f7f8 fc95 	bl	8003fd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800b6aa:	bf00      	nop
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	20000654 	.word	0x20000654

0800b6b4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	static unsigned char cnt = 0;

	if(LL_USART_IsActiveFlag_RXNE(UART4))
 800b6b8:	4833      	ldr	r0, [pc, #204]	; (800b788 <UART4_IRQHandler+0xd4>)
 800b6ba:	f7ff ff94 	bl	800b5e6 <LL_USART_IsActiveFlag_RXNE>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d05b      	beq.n	800b77c <UART4_IRQHandler+0xc8>
	{
		LL_USART_ClearFlag_RXNE(UART4);
 800b6c4:	4830      	ldr	r0, [pc, #192]	; (800b788 <UART4_IRQHandler+0xd4>)
 800b6c6:	f7ff ffa1 	bl	800b60c <LL_USART_ClearFlag_RXNE>
		uart4_rx_data = LL_USART_ReceiveData8(UART4);
 800b6ca:	482f      	ldr	r0, [pc, #188]	; (800b788 <UART4_IRQHandler+0xd4>)
 800b6cc:	f7ff ffac 	bl	800b628 <LL_USART_ReceiveData8>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	461a      	mov	r2, r3
 800b6d4:	4b2d      	ldr	r3, [pc, #180]	; (800b78c <UART4_IRQHandler+0xd8>)
 800b6d6:	701a      	strb	r2, [r3, #0]
		uart4_rx_flag = 1;
 800b6d8:	4b2d      	ldr	r3, [pc, #180]	; (800b790 <UART4_IRQHandler+0xdc>)
 800b6da:	2201      	movs	r2, #1
 800b6dc:	701a      	strb	r2, [r3, #0]

		//LL_USART_TransmitData8(USART6, uart4_rx_data);

		switch(cnt)
 800b6de:	4b2d      	ldr	r3, [pc, #180]	; (800b794 <UART4_IRQHandler+0xe0>)
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	2b23      	cmp	r3, #35	; 0x23
 800b6e4:	d02e      	beq.n	800b744 <UART4_IRQHandler+0x90>
 800b6e6:	2b23      	cmp	r3, #35	; 0x23
 800b6e8:	dc3a      	bgt.n	800b760 <UART4_IRQHandler+0xac>
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d002      	beq.n	800b6f4 <UART4_IRQHandler+0x40>
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	d012      	beq.n	800b718 <UART4_IRQHandler+0x64>
 800b6f2:	e035      	b.n	800b760 <UART4_IRQHandler+0xac>
		{
		case 0:
			if(uart4_rx_data == 0xb5)
 800b6f4:	4b25      	ldr	r3, [pc, #148]	; (800b78c <UART4_IRQHandler+0xd8>)
 800b6f6:	781b      	ldrb	r3, [r3, #0]
 800b6f8:	2bb5      	cmp	r3, #181	; 0xb5
 800b6fa:	d141      	bne.n	800b780 <UART4_IRQHandler+0xcc>
			{
				m8n_rx_buf[cnt] = uart4_rx_data;
 800b6fc:	4b25      	ldr	r3, [pc, #148]	; (800b794 <UART4_IRQHandler+0xe0>)
 800b6fe:	781b      	ldrb	r3, [r3, #0]
 800b700:	461a      	mov	r2, r3
 800b702:	4b22      	ldr	r3, [pc, #136]	; (800b78c <UART4_IRQHandler+0xd8>)
 800b704:	7819      	ldrb	r1, [r3, #0]
 800b706:	4b24      	ldr	r3, [pc, #144]	; (800b798 <UART4_IRQHandler+0xe4>)
 800b708:	5499      	strb	r1, [r3, r2]
				cnt++;
 800b70a:	4b22      	ldr	r3, [pc, #136]	; (800b794 <UART4_IRQHandler+0xe0>)
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	3301      	adds	r3, #1
 800b710:	b2da      	uxtb	r2, r3
 800b712:	4b20      	ldr	r3, [pc, #128]	; (800b794 <UART4_IRQHandler+0xe0>)
 800b714:	701a      	strb	r2, [r3, #0]
			}
			break;
 800b716:	e033      	b.n	800b780 <UART4_IRQHandler+0xcc>
		case 1:
			if(uart4_rx_data == 0x62)
 800b718:	4b1c      	ldr	r3, [pc, #112]	; (800b78c <UART4_IRQHandler+0xd8>)
 800b71a:	781b      	ldrb	r3, [r3, #0]
 800b71c:	2b62      	cmp	r3, #98	; 0x62
 800b71e:	d10d      	bne.n	800b73c <UART4_IRQHandler+0x88>
			{
				m8n_rx_buf[cnt] = uart4_rx_data;
 800b720:	4b1c      	ldr	r3, [pc, #112]	; (800b794 <UART4_IRQHandler+0xe0>)
 800b722:	781b      	ldrb	r3, [r3, #0]
 800b724:	461a      	mov	r2, r3
 800b726:	4b19      	ldr	r3, [pc, #100]	; (800b78c <UART4_IRQHandler+0xd8>)
 800b728:	7819      	ldrb	r1, [r3, #0]
 800b72a:	4b1b      	ldr	r3, [pc, #108]	; (800b798 <UART4_IRQHandler+0xe4>)
 800b72c:	5499      	strb	r1, [r3, r2]
				cnt++;
 800b72e:	4b19      	ldr	r3, [pc, #100]	; (800b794 <UART4_IRQHandler+0xe0>)
 800b730:	781b      	ldrb	r3, [r3, #0]
 800b732:	3301      	adds	r3, #1
 800b734:	b2da      	uxtb	r2, r3
 800b736:	4b17      	ldr	r3, [pc, #92]	; (800b794 <UART4_IRQHandler+0xe0>)
 800b738:	701a      	strb	r2, [r3, #0]
			}
			else
				cnt = 0;
			break;
 800b73a:	e022      	b.n	800b782 <UART4_IRQHandler+0xce>
				cnt = 0;
 800b73c:	4b15      	ldr	r3, [pc, #84]	; (800b794 <UART4_IRQHandler+0xe0>)
 800b73e:	2200      	movs	r2, #0
 800b740:	701a      	strb	r2, [r3, #0]
			break;
 800b742:	e01e      	b.n	800b782 <UART4_IRQHandler+0xce>
		case 35:
			m8n_rx_buf[cnt] = uart4_rx_data;
 800b744:	4b13      	ldr	r3, [pc, #76]	; (800b794 <UART4_IRQHandler+0xe0>)
 800b746:	781b      	ldrb	r3, [r3, #0]
 800b748:	461a      	mov	r2, r3
 800b74a:	4b10      	ldr	r3, [pc, #64]	; (800b78c <UART4_IRQHandler+0xd8>)
 800b74c:	7819      	ldrb	r1, [r3, #0]
 800b74e:	4b12      	ldr	r3, [pc, #72]	; (800b798 <UART4_IRQHandler+0xe4>)
 800b750:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 800b752:	4b10      	ldr	r3, [pc, #64]	; (800b794 <UART4_IRQHandler+0xe0>)
 800b754:	2200      	movs	r2, #0
 800b756:	701a      	strb	r2, [r3, #0]
			m8n_rx_cplt_flag = 1;
 800b758:	4b10      	ldr	r3, [pc, #64]	; (800b79c <UART4_IRQHandler+0xe8>)
 800b75a:	2201      	movs	r2, #1
 800b75c:	701a      	strb	r2, [r3, #0]
			break;
 800b75e:	e010      	b.n	800b782 <UART4_IRQHandler+0xce>
		default:
			m8n_rx_buf[cnt] = uart4_rx_data;
 800b760:	4b0c      	ldr	r3, [pc, #48]	; (800b794 <UART4_IRQHandler+0xe0>)
 800b762:	781b      	ldrb	r3, [r3, #0]
 800b764:	461a      	mov	r2, r3
 800b766:	4b09      	ldr	r3, [pc, #36]	; (800b78c <UART4_IRQHandler+0xd8>)
 800b768:	7819      	ldrb	r1, [r3, #0]
 800b76a:	4b0b      	ldr	r3, [pc, #44]	; (800b798 <UART4_IRQHandler+0xe4>)
 800b76c:	5499      	strb	r1, [r3, r2]
			cnt++;
 800b76e:	4b09      	ldr	r3, [pc, #36]	; (800b794 <UART4_IRQHandler+0xe0>)
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	3301      	adds	r3, #1
 800b774:	b2da      	uxtb	r2, r3
 800b776:	4b07      	ldr	r3, [pc, #28]	; (800b794 <UART4_IRQHandler+0xe0>)
 800b778:	701a      	strb	r2, [r3, #0]
			break;
 800b77a:	e002      	b.n	800b782 <UART4_IRQHandler+0xce>
		}
	}
 800b77c:	bf00      	nop
 800b77e:	e000      	b.n	800b782 <UART4_IRQHandler+0xce>
			break;
 800b780:	bf00      	nop
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800b782:	bf00      	nop
 800b784:	bd80      	pop	{r7, pc}
 800b786:	bf00      	nop
 800b788:	40004c00 	.word	0x40004c00
 800b78c:	200005f2 	.word	0x200005f2
 800b790:	200005f1 	.word	0x200005f1
 800b794:	20000646 	.word	0x20000646
 800b798:	200005f8 	.word	0x200005f8
 800b79c:	2000061c 	.word	0x2000061c

0800b7a0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	static unsigned char cnt = 0;
	if(LL_USART_IsActiveFlag_RXNE(UART5))
 800b7a4:	4833      	ldr	r0, [pc, #204]	; (800b874 <UART5_IRQHandler+0xd4>)
 800b7a6:	f7ff ff1e 	bl	800b5e6 <LL_USART_IsActiveFlag_RXNE>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d05b      	beq.n	800b868 <UART5_IRQHandler+0xc8>
	{
		LL_USART_ClearFlag_RXNE(UART5);
 800b7b0:	4830      	ldr	r0, [pc, #192]	; (800b874 <UART5_IRQHandler+0xd4>)
 800b7b2:	f7ff ff2b 	bl	800b60c <LL_USART_ClearFlag_RXNE>
		uart5_rx_data = LL_USART_ReceiveData8(UART5);
 800b7b6:	482f      	ldr	r0, [pc, #188]	; (800b874 <UART5_IRQHandler+0xd4>)
 800b7b8:	f7ff ff36 	bl	800b628 <LL_USART_ReceiveData8>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	461a      	mov	r2, r3
 800b7c0:	4b2d      	ldr	r3, [pc, #180]	; (800b878 <UART5_IRQHandler+0xd8>)
 800b7c2:	701a      	strb	r2, [r3, #0]
		uart5_rx_flag = 1;
 800b7c4:	4b2d      	ldr	r3, [pc, #180]	; (800b87c <UART5_IRQHandler+0xdc>)
 800b7c6:	2201      	movs	r2, #1
 800b7c8:	701a      	strb	r2, [r3, #0]

		switch(cnt)
 800b7ca:	4b2d      	ldr	r3, [pc, #180]	; (800b880 <UART5_IRQHandler+0xe0>)
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	2b1f      	cmp	r3, #31
 800b7d0:	d02e      	beq.n	800b830 <UART5_IRQHandler+0x90>
 800b7d2:	2b1f      	cmp	r3, #31
 800b7d4:	dc3a      	bgt.n	800b84c <UART5_IRQHandler+0xac>
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d002      	beq.n	800b7e0 <UART5_IRQHandler+0x40>
 800b7da:	2b01      	cmp	r3, #1
 800b7dc:	d012      	beq.n	800b804 <UART5_IRQHandler+0x64>
 800b7de:	e035      	b.n	800b84c <UART5_IRQHandler+0xac>
		{
		case 0:
			if(uart5_rx_data == 0x20)
 800b7e0:	4b25      	ldr	r3, [pc, #148]	; (800b878 <UART5_IRQHandler+0xd8>)
 800b7e2:	781b      	ldrb	r3, [r3, #0]
 800b7e4:	2b20      	cmp	r3, #32
 800b7e6:	d141      	bne.n	800b86c <UART5_IRQHandler+0xcc>
			{
				ibus_rx_buf[cnt] = uart5_rx_data;
 800b7e8:	4b25      	ldr	r3, [pc, #148]	; (800b880 <UART5_IRQHandler+0xe0>)
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	461a      	mov	r2, r3
 800b7ee:	4b22      	ldr	r3, [pc, #136]	; (800b878 <UART5_IRQHandler+0xd8>)
 800b7f0:	7819      	ldrb	r1, [r3, #0]
 800b7f2:	4b24      	ldr	r3, [pc, #144]	; (800b884 <UART5_IRQHandler+0xe4>)
 800b7f4:	5499      	strb	r1, [r3, r2]
				cnt++;
 800b7f6:	4b22      	ldr	r3, [pc, #136]	; (800b880 <UART5_IRQHandler+0xe0>)
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	3301      	adds	r3, #1
 800b7fc:	b2da      	uxtb	r2, r3
 800b7fe:	4b20      	ldr	r3, [pc, #128]	; (800b880 <UART5_IRQHandler+0xe0>)
 800b800:	701a      	strb	r2, [r3, #0]
			}
			break;
 800b802:	e033      	b.n	800b86c <UART5_IRQHandler+0xcc>
		case 1:
			if(uart5_rx_data == 0x40)
 800b804:	4b1c      	ldr	r3, [pc, #112]	; (800b878 <UART5_IRQHandler+0xd8>)
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	2b40      	cmp	r3, #64	; 0x40
 800b80a:	d10d      	bne.n	800b828 <UART5_IRQHandler+0x88>
			{
				ibus_rx_buf[cnt] = uart5_rx_data;
 800b80c:	4b1c      	ldr	r3, [pc, #112]	; (800b880 <UART5_IRQHandler+0xe0>)
 800b80e:	781b      	ldrb	r3, [r3, #0]
 800b810:	461a      	mov	r2, r3
 800b812:	4b19      	ldr	r3, [pc, #100]	; (800b878 <UART5_IRQHandler+0xd8>)
 800b814:	7819      	ldrb	r1, [r3, #0]
 800b816:	4b1b      	ldr	r3, [pc, #108]	; (800b884 <UART5_IRQHandler+0xe4>)
 800b818:	5499      	strb	r1, [r3, r2]
				cnt++;
 800b81a:	4b19      	ldr	r3, [pc, #100]	; (800b880 <UART5_IRQHandler+0xe0>)
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	3301      	adds	r3, #1
 800b820:	b2da      	uxtb	r2, r3
 800b822:	4b17      	ldr	r3, [pc, #92]	; (800b880 <UART5_IRQHandler+0xe0>)
 800b824:	701a      	strb	r2, [r3, #0]
			}
			else
				cnt = 0;
			break;
 800b826:	e022      	b.n	800b86e <UART5_IRQHandler+0xce>
				cnt = 0;
 800b828:	4b15      	ldr	r3, [pc, #84]	; (800b880 <UART5_IRQHandler+0xe0>)
 800b82a:	2200      	movs	r2, #0
 800b82c:	701a      	strb	r2, [r3, #0]
			break;
 800b82e:	e01e      	b.n	800b86e <UART5_IRQHandler+0xce>
		case 31:
			ibus_rx_buf[cnt] = uart5_rx_data;
 800b830:	4b13      	ldr	r3, [pc, #76]	; (800b880 <UART5_IRQHandler+0xe0>)
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	461a      	mov	r2, r3
 800b836:	4b10      	ldr	r3, [pc, #64]	; (800b878 <UART5_IRQHandler+0xd8>)
 800b838:	7819      	ldrb	r1, [r3, #0]
 800b83a:	4b12      	ldr	r3, [pc, #72]	; (800b884 <UART5_IRQHandler+0xe4>)
 800b83c:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 800b83e:	4b10      	ldr	r3, [pc, #64]	; (800b880 <UART5_IRQHandler+0xe0>)
 800b840:	2200      	movs	r2, #0
 800b842:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 800b844:	4b10      	ldr	r3, [pc, #64]	; (800b888 <UART5_IRQHandler+0xe8>)
 800b846:	2201      	movs	r2, #1
 800b848:	701a      	strb	r2, [r3, #0]
			break;
 800b84a:	e010      	b.n	800b86e <UART5_IRQHandler+0xce>
		default:
			ibus_rx_buf[cnt] = uart5_rx_data;
 800b84c:	4b0c      	ldr	r3, [pc, #48]	; (800b880 <UART5_IRQHandler+0xe0>)
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	461a      	mov	r2, r3
 800b852:	4b09      	ldr	r3, [pc, #36]	; (800b878 <UART5_IRQHandler+0xd8>)
 800b854:	7819      	ldrb	r1, [r3, #0]
 800b856:	4b0b      	ldr	r3, [pc, #44]	; (800b884 <UART5_IRQHandler+0xe4>)
 800b858:	5499      	strb	r1, [r3, r2]
			cnt++;
 800b85a:	4b09      	ldr	r3, [pc, #36]	; (800b880 <UART5_IRQHandler+0xe0>)
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	3301      	adds	r3, #1
 800b860:	b2da      	uxtb	r2, r3
 800b862:	4b07      	ldr	r3, [pc, #28]	; (800b880 <UART5_IRQHandler+0xe0>)
 800b864:	701a      	strb	r2, [r3, #0]
			break;
 800b866:	e002      	b.n	800b86e <UART5_IRQHandler+0xce>
		}

//		while(!LL_USART_IsActiveFlag_TXE(USART6));
//		LL_USART_TransmitData8(USART6, uart5_rx_data);
	}
 800b868:	bf00      	nop
 800b86a:	e000      	b.n	800b86e <UART5_IRQHandler+0xce>
			break;
 800b86c:	bf00      	nop
  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800b86e:	bf00      	nop
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop
 800b874:	40005000 	.word	0x40005000
 800b878:	200005f4 	.word	0x200005f4
 800b87c:	200005f3 	.word	0x200005f3
 800b880:	20000647 	.word	0x20000647
 800b884:	20000620 	.word	0x20000620
 800b888:	20000640 	.word	0x20000640

0800b88c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	static unsigned char tim7_1ms_count = 0;
	static unsigned char tim7_20ms_count = 0;
	static unsigned char tim7_100ms_count = 0;
	static unsigned short tim7_1000ms_count = 0;
	if(LL_TIM_IsActiveFlag_UPDATE(TIM7))
 800b890:	4825      	ldr	r0, [pc, #148]	; (800b928 <TIM7_IRQHandler+0x9c>)
 800b892:	f7ff fe95 	bl	800b5c0 <LL_TIM_IsActiveFlag_UPDATE>
 800b896:	4603      	mov	r3, r0
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d043      	beq.n	800b924 <TIM7_IRQHandler+0x98>
	{
		LL_TIM_ClearFlag_UPDATE(TIM7);
 800b89c:	4822      	ldr	r0, [pc, #136]	; (800b928 <TIM7_IRQHandler+0x9c>)
 800b89e:	f7ff fe81 	bl	800b5a4 <LL_TIM_ClearFlag_UPDATE>

		tim7_1ms_count++;
 800b8a2:	4b22      	ldr	r3, [pc, #136]	; (800b92c <TIM7_IRQHandler+0xa0>)
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	b2da      	uxtb	r2, r3
 800b8aa:	4b20      	ldr	r3, [pc, #128]	; (800b92c <TIM7_IRQHandler+0xa0>)
 800b8ac:	701a      	strb	r2, [r3, #0]
		if(tim7_1ms_count == 1)
 800b8ae:	4b1f      	ldr	r3, [pc, #124]	; (800b92c <TIM7_IRQHandler+0xa0>)
 800b8b0:	781b      	ldrb	r3, [r3, #0]
 800b8b2:	2b01      	cmp	r3, #1
 800b8b4:	d105      	bne.n	800b8c2 <TIM7_IRQHandler+0x36>
		{
			tim7_1ms_count = 0;
 800b8b6:	4b1d      	ldr	r3, [pc, #116]	; (800b92c <TIM7_IRQHandler+0xa0>)
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	701a      	strb	r2, [r3, #0]
			tim7_1ms_flag = 1;
 800b8bc:	4b1c      	ldr	r3, [pc, #112]	; (800b930 <TIM7_IRQHandler+0xa4>)
 800b8be:	2201      	movs	r2, #1
 800b8c0:	701a      	strb	r2, [r3, #0]
		}

		tim7_20ms_count++;
 800b8c2:	4b1c      	ldr	r3, [pc, #112]	; (800b934 <TIM7_IRQHandler+0xa8>)
 800b8c4:	781b      	ldrb	r3, [r3, #0]
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	b2da      	uxtb	r2, r3
 800b8ca:	4b1a      	ldr	r3, [pc, #104]	; (800b934 <TIM7_IRQHandler+0xa8>)
 800b8cc:	701a      	strb	r2, [r3, #0]
		if(tim7_20ms_count == 20)
 800b8ce:	4b19      	ldr	r3, [pc, #100]	; (800b934 <TIM7_IRQHandler+0xa8>)
 800b8d0:	781b      	ldrb	r3, [r3, #0]
 800b8d2:	2b14      	cmp	r3, #20
 800b8d4:	d105      	bne.n	800b8e2 <TIM7_IRQHandler+0x56>
		{
			tim7_20ms_count = 0;
 800b8d6:	4b17      	ldr	r3, [pc, #92]	; (800b934 <TIM7_IRQHandler+0xa8>)
 800b8d8:	2200      	movs	r2, #0
 800b8da:	701a      	strb	r2, [r3, #0]
			tim7_20ms_flag = 1;
 800b8dc:	4b16      	ldr	r3, [pc, #88]	; (800b938 <TIM7_IRQHandler+0xac>)
 800b8de:	2201      	movs	r2, #1
 800b8e0:	701a      	strb	r2, [r3, #0]
		}

		tim7_100ms_count++;
 800b8e2:	4b16      	ldr	r3, [pc, #88]	; (800b93c <TIM7_IRQHandler+0xb0>)
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	b2da      	uxtb	r2, r3
 800b8ea:	4b14      	ldr	r3, [pc, #80]	; (800b93c <TIM7_IRQHandler+0xb0>)
 800b8ec:	701a      	strb	r2, [r3, #0]
		if(tim7_100ms_count == 100)
 800b8ee:	4b13      	ldr	r3, [pc, #76]	; (800b93c <TIM7_IRQHandler+0xb0>)
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	2b64      	cmp	r3, #100	; 0x64
 800b8f4:	d105      	bne.n	800b902 <TIM7_IRQHandler+0x76>
		{
			tim7_100ms_count = 0;
 800b8f6:	4b11      	ldr	r3, [pc, #68]	; (800b93c <TIM7_IRQHandler+0xb0>)
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	701a      	strb	r2, [r3, #0]
			tim7_100ms_flag = 1;
 800b8fc:	4b10      	ldr	r3, [pc, #64]	; (800b940 <TIM7_IRQHandler+0xb4>)
 800b8fe:	2201      	movs	r2, #1
 800b900:	701a      	strb	r2, [r3, #0]
		}

		tim7_1000ms_count++;
 800b902:	4b10      	ldr	r3, [pc, #64]	; (800b944 <TIM7_IRQHandler+0xb8>)
 800b904:	881b      	ldrh	r3, [r3, #0]
 800b906:	3301      	adds	r3, #1
 800b908:	b29a      	uxth	r2, r3
 800b90a:	4b0e      	ldr	r3, [pc, #56]	; (800b944 <TIM7_IRQHandler+0xb8>)
 800b90c:	801a      	strh	r2, [r3, #0]
		if(tim7_1000ms_count == 1000)
 800b90e:	4b0d      	ldr	r3, [pc, #52]	; (800b944 <TIM7_IRQHandler+0xb8>)
 800b910:	881b      	ldrh	r3, [r3, #0]
 800b912:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b916:	d105      	bne.n	800b924 <TIM7_IRQHandler+0x98>
		{
			tim7_1000ms_count = 0;
 800b918:	4b0a      	ldr	r3, [pc, #40]	; (800b944 <TIM7_IRQHandler+0xb8>)
 800b91a:	2200      	movs	r2, #0
 800b91c:	801a      	strh	r2, [r3, #0]
			tim7_1000ms_flag = 1;
 800b91e:	4b0a      	ldr	r3, [pc, #40]	; (800b948 <TIM7_IRQHandler+0xbc>)
 800b920:	2201      	movs	r2, #1
 800b922:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM7_IRQn 0 */
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800b924:	bf00      	nop
 800b926:	bd80      	pop	{r7, pc}
 800b928:	40001400 	.word	0x40001400
 800b92c:	20000648 	.word	0x20000648
 800b930:	20000642 	.word	0x20000642
 800b934:	20000649 	.word	0x20000649
 800b938:	20000643 	.word	0x20000643
 800b93c:	2000064a 	.word	0x2000064a
 800b940:	20000644 	.word	0x20000644
 800b944:	2000064c 	.word	0x2000064c
 800b948:	20000645 	.word	0x20000645

0800b94c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800b950:	4802      	ldr	r0, [pc, #8]	; (800b95c <DMA2_Stream0_IRQHandler+0x10>)
 800b952:	f7f6 f96f 	bl	8001c34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800b956:	bf00      	nop
 800b958:	bd80      	pop	{r7, pc}
 800b95a:	bf00      	nop
 800b95c:	200004f4 	.word	0x200004f4

0800b960 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART6))
 800b964:	480a      	ldr	r0, [pc, #40]	; (800b990 <USART6_IRQHandler+0x30>)
 800b966:	f7ff fe3e 	bl	800b5e6 <LL_USART_IsActiveFlag_RXNE>
 800b96a:	4603      	mov	r3, r0
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d00c      	beq.n	800b98a <USART6_IRQHandler+0x2a>
	{
		LL_USART_ClearFlag_RXNE(USART6);
 800b970:	4807      	ldr	r0, [pc, #28]	; (800b990 <USART6_IRQHandler+0x30>)
 800b972:	f7ff fe4b 	bl	800b60c <LL_USART_ClearFlag_RXNE>
		uart6_rx_data = LL_USART_ReceiveData8(USART6);
 800b976:	4806      	ldr	r0, [pc, #24]	; (800b990 <USART6_IRQHandler+0x30>)
 800b978:	f7ff fe56 	bl	800b628 <LL_USART_ReceiveData8>
 800b97c:	4603      	mov	r3, r0
 800b97e:	461a      	mov	r2, r3
 800b980:	4b04      	ldr	r3, [pc, #16]	; (800b994 <USART6_IRQHandler+0x34>)
 800b982:	701a      	strb	r2, [r3, #0]
		uart6_rx_flag = 1;
 800b984:	4b04      	ldr	r3, [pc, #16]	; (800b998 <USART6_IRQHandler+0x38>)
 800b986:	2201      	movs	r2, #1
 800b988:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800b98a:	bf00      	nop
 800b98c:	bd80      	pop	{r7, pc}
 800b98e:	bf00      	nop
 800b990:	40011400 	.word	0x40011400
 800b994:	200005f0 	.word	0x200005f0
 800b998:	200005ef 	.word	0x200005ef

0800b99c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b99c:	b480      	push	{r7}
 800b99e:	af00      	add	r7, sp, #0
	return 1;
 800b9a0:	2301      	movs	r3, #1
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr

0800b9ac <_kill>:

int _kill(int pid, int sig)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b082      	sub	sp, #8
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800b9b6:	f000 fe7d 	bl	800c6b4 <__errno>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	2216      	movs	r2, #22
 800b9be:	601a      	str	r2, [r3, #0]
	return -1;
 800b9c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3708      	adds	r7, #8
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <_exit>:

void _exit (int status)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b082      	sub	sp, #8
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800b9d4:	f04f 31ff 	mov.w	r1, #4294967295
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f7ff ffe7 	bl	800b9ac <_kill>
	while (1) {}		/* Make sure we hang here */
 800b9de:	e7fe      	b.n	800b9de <_exit+0x12>

0800b9e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b086      	sub	sp, #24
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	60f8      	str	r0, [r7, #12]
 800b9e8:	60b9      	str	r1, [r7, #8]
 800b9ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	617b      	str	r3, [r7, #20]
 800b9f0:	e00a      	b.n	800ba08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800b9f2:	f3af 8000 	nop.w
 800b9f6:	4601      	mov	r1, r0
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	1c5a      	adds	r2, r3, #1
 800b9fc:	60ba      	str	r2, [r7, #8]
 800b9fe:	b2ca      	uxtb	r2, r1
 800ba00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	3301      	adds	r3, #1
 800ba06:	617b      	str	r3, [r7, #20]
 800ba08:	697a      	ldr	r2, [r7, #20]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	dbf0      	blt.n	800b9f2 <_read+0x12>
	}

return len;
 800ba10:	687b      	ldr	r3, [r7, #4]
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3718      	adds	r7, #24
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}

0800ba1a <_close>:
	}
	return len;
}

int _close(int file)
{
 800ba1a:	b480      	push	{r7}
 800ba1c:	b083      	sub	sp, #12
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	6078      	str	r0, [r7, #4]
	return -1;
 800ba22:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	370c      	adds	r7, #12
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba30:	4770      	bx	lr

0800ba32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800ba32:	b480      	push	{r7}
 800ba34:	b083      	sub	sp, #12
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	6078      	str	r0, [r7, #4]
 800ba3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ba42:	605a      	str	r2, [r3, #4]
	return 0;
 800ba44:	2300      	movs	r3, #0
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	370c      	adds	r7, #12
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr

0800ba52 <_isatty>:

int _isatty(int file)
{
 800ba52:	b480      	push	{r7}
 800ba54:	b083      	sub	sp, #12
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	6078      	str	r0, [r7, #4]
	return 1;
 800ba5a:	2301      	movs	r3, #1
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	370c      	adds	r7, #12
 800ba60:	46bd      	mov	sp, r7
 800ba62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba66:	4770      	bx	lr

0800ba68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b085      	sub	sp, #20
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	60f8      	str	r0, [r7, #12]
 800ba70:	60b9      	str	r1, [r7, #8]
 800ba72:	607a      	str	r2, [r7, #4]
	return 0;
 800ba74:	2300      	movs	r3, #0
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3714      	adds	r7, #20
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba80:	4770      	bx	lr
	...

0800ba84 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b084      	sub	sp, #16
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800ba8c:	4b11      	ldr	r3, [pc, #68]	; (800bad4 <_sbrk+0x50>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d102      	bne.n	800ba9a <_sbrk+0x16>
		heap_end = &end;
 800ba94:	4b0f      	ldr	r3, [pc, #60]	; (800bad4 <_sbrk+0x50>)
 800ba96:	4a10      	ldr	r2, [pc, #64]	; (800bad8 <_sbrk+0x54>)
 800ba98:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800ba9a:	4b0e      	ldr	r3, [pc, #56]	; (800bad4 <_sbrk+0x50>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800baa0:	4b0c      	ldr	r3, [pc, #48]	; (800bad4 <_sbrk+0x50>)
 800baa2:	681a      	ldr	r2, [r3, #0]
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	4413      	add	r3, r2
 800baa8:	466a      	mov	r2, sp
 800baaa:	4293      	cmp	r3, r2
 800baac:	d907      	bls.n	800babe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800baae:	f000 fe01 	bl	800c6b4 <__errno>
 800bab2:	4603      	mov	r3, r0
 800bab4:	220c      	movs	r2, #12
 800bab6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800bab8:	f04f 33ff 	mov.w	r3, #4294967295
 800babc:	e006      	b.n	800bacc <_sbrk+0x48>
	}

	heap_end += incr;
 800babe:	4b05      	ldr	r3, [pc, #20]	; (800bad4 <_sbrk+0x50>)
 800bac0:	681a      	ldr	r2, [r3, #0]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	4413      	add	r3, r2
 800bac6:	4a03      	ldr	r2, [pc, #12]	; (800bad4 <_sbrk+0x50>)
 800bac8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800baca:	68fb      	ldr	r3, [r7, #12]
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3710      	adds	r7, #16
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}
 800bad4:	20000650 	.word	0x20000650
 800bad8:	200006a8 	.word	0x200006a8

0800badc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800badc:	b480      	push	{r7}
 800bade:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800bae0:	4b16      	ldr	r3, [pc, #88]	; (800bb3c <SystemInit+0x60>)
 800bae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bae6:	4a15      	ldr	r2, [pc, #84]	; (800bb3c <SystemInit+0x60>)
 800bae8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800baec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800baf0:	4b13      	ldr	r3, [pc, #76]	; (800bb40 <SystemInit+0x64>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	4a12      	ldr	r2, [pc, #72]	; (800bb40 <SystemInit+0x64>)
 800baf6:	f043 0301 	orr.w	r3, r3, #1
 800bafa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800bafc:	4b10      	ldr	r3, [pc, #64]	; (800bb40 <SystemInit+0x64>)
 800bafe:	2200      	movs	r2, #0
 800bb00:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800bb02:	4b0f      	ldr	r3, [pc, #60]	; (800bb40 <SystemInit+0x64>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	4a0e      	ldr	r2, [pc, #56]	; (800bb40 <SystemInit+0x64>)
 800bb08:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800bb0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb10:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800bb12:	4b0b      	ldr	r3, [pc, #44]	; (800bb40 <SystemInit+0x64>)
 800bb14:	4a0b      	ldr	r2, [pc, #44]	; (800bb44 <SystemInit+0x68>)
 800bb16:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800bb18:	4b09      	ldr	r3, [pc, #36]	; (800bb40 <SystemInit+0x64>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	4a08      	ldr	r2, [pc, #32]	; (800bb40 <SystemInit+0x64>)
 800bb1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bb22:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800bb24:	4b06      	ldr	r3, [pc, #24]	; (800bb40 <SystemInit+0x64>)
 800bb26:	2200      	movs	r2, #0
 800bb28:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800bb2a:	4b04      	ldr	r3, [pc, #16]	; (800bb3c <SystemInit+0x60>)
 800bb2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800bb30:	609a      	str	r2, [r3, #8]
#endif
}
 800bb32:	bf00      	nop
 800bb34:	46bd      	mov	sp, r7
 800bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3a:	4770      	bx	lr
 800bb3c:	e000ed00 	.word	0xe000ed00
 800bb40:	40023800 	.word	0x40023800
 800bb44:	24003010 	.word	0x24003010

0800bb48 <__NVIC_GetPriorityGrouping>:
{
 800bb48:	b480      	push	{r7}
 800bb4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bb4c:	4b04      	ldr	r3, [pc, #16]	; (800bb60 <__NVIC_GetPriorityGrouping+0x18>)
 800bb4e:	68db      	ldr	r3, [r3, #12]
 800bb50:	0a1b      	lsrs	r3, r3, #8
 800bb52:	f003 0307 	and.w	r3, r3, #7
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr
 800bb60:	e000ed00 	.word	0xe000ed00

0800bb64 <__NVIC_EnableIRQ>:
{
 800bb64:	b480      	push	{r7}
 800bb66:	b083      	sub	sp, #12
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bb6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	db0b      	blt.n	800bb8e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bb76:	79fb      	ldrb	r3, [r7, #7]
 800bb78:	f003 021f 	and.w	r2, r3, #31
 800bb7c:	4907      	ldr	r1, [pc, #28]	; (800bb9c <__NVIC_EnableIRQ+0x38>)
 800bb7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb82:	095b      	lsrs	r3, r3, #5
 800bb84:	2001      	movs	r0, #1
 800bb86:	fa00 f202 	lsl.w	r2, r0, r2
 800bb8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800bb8e:	bf00      	nop
 800bb90:	370c      	adds	r7, #12
 800bb92:	46bd      	mov	sp, r7
 800bb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb98:	4770      	bx	lr
 800bb9a:	bf00      	nop
 800bb9c:	e000e100 	.word	0xe000e100

0800bba0 <__NVIC_SetPriority>:
{
 800bba0:	b480      	push	{r7}
 800bba2:	b083      	sub	sp, #12
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	4603      	mov	r3, r0
 800bba8:	6039      	str	r1, [r7, #0]
 800bbaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bbac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	db0a      	blt.n	800bbca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	b2da      	uxtb	r2, r3
 800bbb8:	490c      	ldr	r1, [pc, #48]	; (800bbec <__NVIC_SetPriority+0x4c>)
 800bbba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bbbe:	0112      	lsls	r2, r2, #4
 800bbc0:	b2d2      	uxtb	r2, r2
 800bbc2:	440b      	add	r3, r1
 800bbc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800bbc8:	e00a      	b.n	800bbe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	b2da      	uxtb	r2, r3
 800bbce:	4908      	ldr	r1, [pc, #32]	; (800bbf0 <__NVIC_SetPriority+0x50>)
 800bbd0:	79fb      	ldrb	r3, [r7, #7]
 800bbd2:	f003 030f 	and.w	r3, r3, #15
 800bbd6:	3b04      	subs	r3, #4
 800bbd8:	0112      	lsls	r2, r2, #4
 800bbda:	b2d2      	uxtb	r2, r2
 800bbdc:	440b      	add	r3, r1
 800bbde:	761a      	strb	r2, [r3, #24]
}
 800bbe0:	bf00      	nop
 800bbe2:	370c      	adds	r7, #12
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbea:	4770      	bx	lr
 800bbec:	e000e100 	.word	0xe000e100
 800bbf0:	e000ed00 	.word	0xe000ed00

0800bbf4 <NVIC_EncodePriority>:
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b089      	sub	sp, #36	; 0x24
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	60f8      	str	r0, [r7, #12]
 800bbfc:	60b9      	str	r1, [r7, #8]
 800bbfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f003 0307 	and.w	r3, r3, #7
 800bc06:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bc08:	69fb      	ldr	r3, [r7, #28]
 800bc0a:	f1c3 0307 	rsb	r3, r3, #7
 800bc0e:	2b04      	cmp	r3, #4
 800bc10:	bf28      	it	cs
 800bc12:	2304      	movcs	r3, #4
 800bc14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800bc16:	69fb      	ldr	r3, [r7, #28]
 800bc18:	3304      	adds	r3, #4
 800bc1a:	2b06      	cmp	r3, #6
 800bc1c:	d902      	bls.n	800bc24 <NVIC_EncodePriority+0x30>
 800bc1e:	69fb      	ldr	r3, [r7, #28]
 800bc20:	3b03      	subs	r3, #3
 800bc22:	e000      	b.n	800bc26 <NVIC_EncodePriority+0x32>
 800bc24:	2300      	movs	r3, #0
 800bc26:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bc28:	f04f 32ff 	mov.w	r2, #4294967295
 800bc2c:	69bb      	ldr	r3, [r7, #24]
 800bc2e:	fa02 f303 	lsl.w	r3, r2, r3
 800bc32:	43da      	mvns	r2, r3
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	401a      	ands	r2, r3
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800bc3c:	f04f 31ff 	mov.w	r1, #4294967295
 800bc40:	697b      	ldr	r3, [r7, #20]
 800bc42:	fa01 f303 	lsl.w	r3, r1, r3
 800bc46:	43d9      	mvns	r1, r3
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bc4c:	4313      	orrs	r3, r2
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3724      	adds	r7, #36	; 0x24
 800bc52:	46bd      	mov	sp, r7
 800bc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc58:	4770      	bx	lr

0800bc5a <LL_TIM_EnableARRPreload>:
{
 800bc5a:	b480      	push	{r7}
 800bc5c:	b083      	sub	sp, #12
 800bc5e:	af00      	add	r7, sp, #0
 800bc60:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	601a      	str	r2, [r3, #0]
}
 800bc6e:	bf00      	nop
 800bc70:	370c      	adds	r7, #12
 800bc72:	46bd      	mov	sp, r7
 800bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc78:	4770      	bx	lr
	...

0800bc7c <LL_TIM_OC_EnableFast>:
{
 800bc7c:	b4b0      	push	{r4, r5, r7}
 800bc7e:	b083      	sub	sp, #12
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	2b01      	cmp	r3, #1
 800bc8a:	d01c      	beq.n	800bcc6 <LL_TIM_OC_EnableFast+0x4a>
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	2b04      	cmp	r3, #4
 800bc90:	d017      	beq.n	800bcc2 <LL_TIM_OC_EnableFast+0x46>
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	2b10      	cmp	r3, #16
 800bc96:	d012      	beq.n	800bcbe <LL_TIM_OC_EnableFast+0x42>
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	2b40      	cmp	r3, #64	; 0x40
 800bc9c:	d00d      	beq.n	800bcba <LL_TIM_OC_EnableFast+0x3e>
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bca4:	d007      	beq.n	800bcb6 <LL_TIM_OC_EnableFast+0x3a>
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bcac:	d101      	bne.n	800bcb2 <LL_TIM_OC_EnableFast+0x36>
 800bcae:	2305      	movs	r3, #5
 800bcb0:	e00a      	b.n	800bcc8 <LL_TIM_OC_EnableFast+0x4c>
 800bcb2:	2306      	movs	r3, #6
 800bcb4:	e008      	b.n	800bcc8 <LL_TIM_OC_EnableFast+0x4c>
 800bcb6:	2304      	movs	r3, #4
 800bcb8:	e006      	b.n	800bcc8 <LL_TIM_OC_EnableFast+0x4c>
 800bcba:	2303      	movs	r3, #3
 800bcbc:	e004      	b.n	800bcc8 <LL_TIM_OC_EnableFast+0x4c>
 800bcbe:	2302      	movs	r3, #2
 800bcc0:	e002      	b.n	800bcc8 <LL_TIM_OC_EnableFast+0x4c>
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	e000      	b.n	800bcc8 <LL_TIM_OC_EnableFast+0x4c>
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	3318      	adds	r3, #24
 800bcce:	461a      	mov	r2, r3
 800bcd0:	4629      	mov	r1, r5
 800bcd2:	4b09      	ldr	r3, [pc, #36]	; (800bcf8 <LL_TIM_OC_EnableFast+0x7c>)
 800bcd4:	5c5b      	ldrb	r3, [r3, r1]
 800bcd6:	4413      	add	r3, r2
 800bcd8:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800bcda:	6822      	ldr	r2, [r4, #0]
 800bcdc:	4629      	mov	r1, r5
 800bcde:	4b07      	ldr	r3, [pc, #28]	; (800bcfc <LL_TIM_OC_EnableFast+0x80>)
 800bce0:	5c5b      	ldrb	r3, [r3, r1]
 800bce2:	4619      	mov	r1, r3
 800bce4:	2304      	movs	r3, #4
 800bce6:	408b      	lsls	r3, r1
 800bce8:	4313      	orrs	r3, r2
 800bcea:	6023      	str	r3, [r4, #0]
}
 800bcec:	bf00      	nop
 800bcee:	370c      	adds	r7, #12
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bcb0      	pop	{r4, r5, r7}
 800bcf4:	4770      	bx	lr
 800bcf6:	bf00      	nop
 800bcf8:	08010354 	.word	0x08010354
 800bcfc:	0801035c 	.word	0x0801035c

0800bd00 <LL_TIM_OC_EnablePreload>:
{
 800bd00:	b4b0      	push	{r4, r5, r7}
 800bd02:	b083      	sub	sp, #12
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
 800bd08:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	2b01      	cmp	r3, #1
 800bd0e:	d01c      	beq.n	800bd4a <LL_TIM_OC_EnablePreload+0x4a>
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	2b04      	cmp	r3, #4
 800bd14:	d017      	beq.n	800bd46 <LL_TIM_OC_EnablePreload+0x46>
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	2b10      	cmp	r3, #16
 800bd1a:	d012      	beq.n	800bd42 <LL_TIM_OC_EnablePreload+0x42>
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	2b40      	cmp	r3, #64	; 0x40
 800bd20:	d00d      	beq.n	800bd3e <LL_TIM_OC_EnablePreload+0x3e>
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd28:	d007      	beq.n	800bd3a <LL_TIM_OC_EnablePreload+0x3a>
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd30:	d101      	bne.n	800bd36 <LL_TIM_OC_EnablePreload+0x36>
 800bd32:	2305      	movs	r3, #5
 800bd34:	e00a      	b.n	800bd4c <LL_TIM_OC_EnablePreload+0x4c>
 800bd36:	2306      	movs	r3, #6
 800bd38:	e008      	b.n	800bd4c <LL_TIM_OC_EnablePreload+0x4c>
 800bd3a:	2304      	movs	r3, #4
 800bd3c:	e006      	b.n	800bd4c <LL_TIM_OC_EnablePreload+0x4c>
 800bd3e:	2303      	movs	r3, #3
 800bd40:	e004      	b.n	800bd4c <LL_TIM_OC_EnablePreload+0x4c>
 800bd42:	2302      	movs	r3, #2
 800bd44:	e002      	b.n	800bd4c <LL_TIM_OC_EnablePreload+0x4c>
 800bd46:	2301      	movs	r3, #1
 800bd48:	e000      	b.n	800bd4c <LL_TIM_OC_EnablePreload+0x4c>
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	3318      	adds	r3, #24
 800bd52:	461a      	mov	r2, r3
 800bd54:	4629      	mov	r1, r5
 800bd56:	4b09      	ldr	r3, [pc, #36]	; (800bd7c <LL_TIM_OC_EnablePreload+0x7c>)
 800bd58:	5c5b      	ldrb	r3, [r3, r1]
 800bd5a:	4413      	add	r3, r2
 800bd5c:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800bd5e:	6822      	ldr	r2, [r4, #0]
 800bd60:	4629      	mov	r1, r5
 800bd62:	4b07      	ldr	r3, [pc, #28]	; (800bd80 <LL_TIM_OC_EnablePreload+0x80>)
 800bd64:	5c5b      	ldrb	r3, [r3, r1]
 800bd66:	4619      	mov	r1, r3
 800bd68:	2308      	movs	r3, #8
 800bd6a:	408b      	lsls	r3, r1
 800bd6c:	4313      	orrs	r3, r2
 800bd6e:	6023      	str	r3, [r4, #0]
}
 800bd70:	bf00      	nop
 800bd72:	370c      	adds	r7, #12
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bcb0      	pop	{r4, r5, r7}
 800bd78:	4770      	bx	lr
 800bd7a:	bf00      	nop
 800bd7c:	08010354 	.word	0x08010354
 800bd80:	0801035c 	.word	0x0801035c

0800bd84 <LL_TIM_SetClockSource>:
{
 800bd84:	b480      	push	{r7}
 800bd86:	b083      	sub	sp, #12
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	689b      	ldr	r3, [r3, #8]
 800bd92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bd96:	f023 0307 	bic.w	r3, r3, #7
 800bd9a:	683a      	ldr	r2, [r7, #0]
 800bd9c:	431a      	orrs	r2, r3
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	609a      	str	r2, [r3, #8]
}
 800bda2:	bf00      	nop
 800bda4:	370c      	adds	r7, #12
 800bda6:	46bd      	mov	sp, r7
 800bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdac:	4770      	bx	lr

0800bdae <LL_TIM_SetTriggerOutput>:
{
 800bdae:	b480      	push	{r7}
 800bdb0:	b083      	sub	sp, #12
 800bdb2:	af00      	add	r7, sp, #0
 800bdb4:	6078      	str	r0, [r7, #4]
 800bdb6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	685b      	ldr	r3, [r3, #4]
 800bdbc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	431a      	orrs	r2, r3
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	605a      	str	r2, [r3, #4]
}
 800bdc8:	bf00      	nop
 800bdca:	370c      	adds	r7, #12
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr

0800bdd4 <LL_TIM_DisableMasterSlaveMode>:
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b083      	sub	sp, #12
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	689b      	ldr	r3, [r3, #8]
 800bde0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	609a      	str	r2, [r3, #8]
}
 800bde8:	bf00      	nop
 800bdea:	370c      	adds	r7, #12
 800bdec:	46bd      	mov	sp, r7
 800bdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf2:	4770      	bx	lr

0800bdf4 <LL_AHB1_GRP1_EnableClock>:
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b085      	sub	sp, #20
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800bdfc:	4b08      	ldr	r3, [pc, #32]	; (800be20 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800bdfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be00:	4907      	ldr	r1, [pc, #28]	; (800be20 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	4313      	orrs	r3, r2
 800be06:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800be08:	4b05      	ldr	r3, [pc, #20]	; (800be20 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800be0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	4013      	ands	r3, r2
 800be10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800be12:	68fb      	ldr	r3, [r7, #12]
}
 800be14:	bf00      	nop
 800be16:	3714      	adds	r7, #20
 800be18:	46bd      	mov	sp, r7
 800be1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1e:	4770      	bx	lr
 800be20:	40023800 	.word	0x40023800

0800be24 <LL_APB1_GRP1_EnableClock>:
{
 800be24:	b480      	push	{r7}
 800be26:	b085      	sub	sp, #20
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800be2c:	4b08      	ldr	r3, [pc, #32]	; (800be50 <LL_APB1_GRP1_EnableClock+0x2c>)
 800be2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800be30:	4907      	ldr	r1, [pc, #28]	; (800be50 <LL_APB1_GRP1_EnableClock+0x2c>)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	4313      	orrs	r3, r2
 800be36:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800be38:	4b05      	ldr	r3, [pc, #20]	; (800be50 <LL_APB1_GRP1_EnableClock+0x2c>)
 800be3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	4013      	ands	r3, r2
 800be40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800be42:	68fb      	ldr	r3, [r7, #12]
}
 800be44:	bf00      	nop
 800be46:	3714      	adds	r7, #20
 800be48:	46bd      	mov	sp, r7
 800be4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4e:	4770      	bx	lr
 800be50:	40023800 	.word	0x40023800

0800be54 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b094      	sub	sp, #80	; 0x50
 800be58:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800be5a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800be5e:	2200      	movs	r2, #0
 800be60:	601a      	str	r2, [r3, #0]
 800be62:	605a      	str	r2, [r3, #4]
 800be64:	609a      	str	r2, [r3, #8]
 800be66:	60da      	str	r2, [r3, #12]
 800be68:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800be6a:	f107 031c 	add.w	r3, r7, #28
 800be6e:	2220      	movs	r2, #32
 800be70:	2100      	movs	r1, #0
 800be72:	4618      	mov	r0, r3
 800be74:	f000 fc48 	bl	800c708 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be78:	1d3b      	adds	r3, r7, #4
 800be7a:	2200      	movs	r2, #0
 800be7c:	601a      	str	r2, [r3, #0]
 800be7e:	605a      	str	r2, [r3, #4]
 800be80:	609a      	str	r2, [r3, #8]
 800be82:	60da      	str	r2, [r3, #12]
 800be84:	611a      	str	r2, [r3, #16]
 800be86:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 800be88:	2002      	movs	r0, #2
 800be8a:	f7ff ffcb 	bl	800be24 <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 999;
 800be8e:	f240 33e7 	movw	r3, #999	; 0x3e7
 800be92:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800be94:	2300      	movs	r3, #0
 800be96:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 20;
 800be98:	2314      	movs	r3, #20
 800be9a:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800be9c:	2300      	movs	r3, #0
 800be9e:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800bea0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bea4:	4619      	mov	r1, r3
 800bea6:	4822      	ldr	r0, [pc, #136]	; (800bf30 <MX_TIM3_Init+0xdc>)
 800bea8:	f7f9 fb92 	bl	80055d0 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 800beac:	4820      	ldr	r0, [pc, #128]	; (800bf30 <MX_TIM3_Init+0xdc>)
 800beae:	f7ff fed4 	bl	800bc5a <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 800beb2:	2100      	movs	r1, #0
 800beb4:	481e      	ldr	r0, [pc, #120]	; (800bf30 <MX_TIM3_Init+0xdc>)
 800beb6:	f7ff ff65 	bl	800bd84 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 800beba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bebe:	481c      	ldr	r0, [pc, #112]	; (800bf30 <MX_TIM3_Init+0xdc>)
 800bec0:	f7ff ff1e 	bl	800bd00 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800bec4:	2360      	movs	r3, #96	; 0x60
 800bec6:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800bec8:	2300      	movs	r3, #0
 800beca:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800becc:	2300      	movs	r3, #0
 800bece:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 800bed0:	230a      	movs	r3, #10
 800bed2:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800bed4:	2300      	movs	r3, #0
 800bed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 800bed8:	f107 031c 	add.w	r3, r7, #28
 800bedc:	461a      	mov	r2, r3
 800bede:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bee2:	4813      	ldr	r0, [pc, #76]	; (800bf30 <MX_TIM3_Init+0xdc>)
 800bee4:	f7f9 fc0e 	bl	8005704 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 800bee8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800beec:	4810      	ldr	r0, [pc, #64]	; (800bf30 <MX_TIM3_Init+0xdc>)
 800beee:	f7ff fec5 	bl	800bc7c <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 800bef2:	2100      	movs	r1, #0
 800bef4:	480e      	ldr	r0, [pc, #56]	; (800bf30 <MX_TIM3_Init+0xdc>)
 800bef6:	f7ff ff5a 	bl	800bdae <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 800befa:	480d      	ldr	r0, [pc, #52]	; (800bf30 <MX_TIM3_Init+0xdc>)
 800befc:	f7ff ff6a 	bl	800bdd4 <LL_TIM_DisableMasterSlaveMode>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800bf00:	2002      	movs	r0, #2
 800bf02:	f7ff ff77 	bl	800bdf4 <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration    
    PB1     ------> TIM3_CH4 
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 800bf06:	2302      	movs	r3, #2
 800bf08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800bf0a:	2302      	movs	r3, #2
 800bf0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800bf12:	2300      	movs	r3, #0
 800bf14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800bf16:	2300      	movs	r3, #0
 800bf18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800bf1a:	2302      	movs	r3, #2
 800bf1c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bf1e:	1d3b      	adds	r3, r7, #4
 800bf20:	4619      	mov	r1, r3
 800bf22:	4804      	ldr	r0, [pc, #16]	; (800bf34 <MX_TIM3_Init+0xe0>)
 800bf24:	f7f9 f8be 	bl	80050a4 <LL_GPIO_Init>

}
 800bf28:	bf00      	nop
 800bf2a:	3750      	adds	r7, #80	; 0x50
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}
 800bf30:	40000400 	.word	0x40000400
 800bf34:	40020400 	.word	0x40020400

0800bf38 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b094      	sub	sp, #80	; 0x50
 800bf3c:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800bf3e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bf42:	2200      	movs	r2, #0
 800bf44:	601a      	str	r2, [r3, #0]
 800bf46:	605a      	str	r2, [r3, #4]
 800bf48:	609a      	str	r2, [r3, #8]
 800bf4a:	60da      	str	r2, [r3, #12]
 800bf4c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800bf4e:	f107 031c 	add.w	r3, r7, #28
 800bf52:	2220      	movs	r2, #32
 800bf54:	2100      	movs	r1, #0
 800bf56:	4618      	mov	r0, r3
 800bf58:	f000 fbd6 	bl	800c708 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf5c:	1d3b      	adds	r3, r7, #4
 800bf5e:	2200      	movs	r2, #0
 800bf60:	601a      	str	r2, [r3, #0]
 800bf62:	605a      	str	r2, [r3, #4]
 800bf64:	609a      	str	r2, [r3, #8]
 800bf66:	60da      	str	r2, [r3, #12]
 800bf68:	611a      	str	r2, [r3, #16]
 800bf6a:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 800bf6c:	2008      	movs	r0, #8
 800bf6e:	f7ff ff59 	bl	800be24 <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 0;
 800bf72:	2300      	movs	r3, #0
 800bf74:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800bf76:	2300      	movs	r3, #0
 800bf78:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 41999;
 800bf7a:	f24a 430f 	movw	r3, #41999	; 0xa40f
 800bf7e:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800bf80:	2300      	movs	r3, #0
 800bf82:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 800bf84:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bf88:	4619      	mov	r1, r3
 800bf8a:	4840      	ldr	r0, [pc, #256]	; (800c08c <MX_TIM5_Init+0x154>)
 800bf8c:	f7f9 fb20 	bl	80055d0 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM5);
 800bf90:	483e      	ldr	r0, [pc, #248]	; (800c08c <MX_TIM5_Init+0x154>)
 800bf92:	f7ff fe62 	bl	800bc5a <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 800bf96:	2100      	movs	r1, #0
 800bf98:	483c      	ldr	r0, [pc, #240]	; (800c08c <MX_TIM5_Init+0x154>)
 800bf9a:	f7ff fef3 	bl	800bd84 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH1);
 800bf9e:	2101      	movs	r1, #1
 800bfa0:	483a      	ldr	r0, [pc, #232]	; (800c08c <MX_TIM5_Init+0x154>)
 800bfa2:	f7ff fead 	bl	800bd00 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800bfa6:	2360      	movs	r3, #96	; 0x60
 800bfa8:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800bfba:	f107 031c 	add.w	r3, r7, #28
 800bfbe:	461a      	mov	r2, r3
 800bfc0:	2101      	movs	r1, #1
 800bfc2:	4832      	ldr	r0, [pc, #200]	; (800c08c <MX_TIM5_Init+0x154>)
 800bfc4:	f7f9 fb9e 	bl	8005704 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH1);
 800bfc8:	2101      	movs	r1, #1
 800bfca:	4830      	ldr	r0, [pc, #192]	; (800c08c <MX_TIM5_Init+0x154>)
 800bfcc:	f7ff fe56 	bl	800bc7c <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH2);
 800bfd0:	2110      	movs	r1, #16
 800bfd2:	482e      	ldr	r0, [pc, #184]	; (800c08c <MX_TIM5_Init+0x154>)
 800bfd4:	f7ff fe94 	bl	800bd00 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 800bfe0:	f107 031c 	add.w	r3, r7, #28
 800bfe4:	461a      	mov	r2, r3
 800bfe6:	2110      	movs	r1, #16
 800bfe8:	4828      	ldr	r0, [pc, #160]	; (800c08c <MX_TIM5_Init+0x154>)
 800bfea:	f7f9 fb8b 	bl	8005704 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH2);
 800bfee:	2110      	movs	r1, #16
 800bff0:	4826      	ldr	r0, [pc, #152]	; (800c08c <MX_TIM5_Init+0x154>)
 800bff2:	f7ff fe43 	bl	800bc7c <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH3);
 800bff6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bffa:	4824      	ldr	r0, [pc, #144]	; (800c08c <MX_TIM5_Init+0x154>)
 800bffc:	f7ff fe80 	bl	800bd00 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800c000:	2300      	movs	r3, #0
 800c002:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800c004:	2300      	movs	r3, #0
 800c006:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 800c008:	f107 031c 	add.w	r3, r7, #28
 800c00c:	461a      	mov	r2, r3
 800c00e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c012:	481e      	ldr	r0, [pc, #120]	; (800c08c <MX_TIM5_Init+0x154>)
 800c014:	f7f9 fb76 	bl	8005704 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH3);
 800c018:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c01c:	481b      	ldr	r0, [pc, #108]	; (800c08c <MX_TIM5_Init+0x154>)
 800c01e:	f7ff fe2d 	bl	800bc7c <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH4);
 800c022:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c026:	4819      	ldr	r0, [pc, #100]	; (800c08c <MX_TIM5_Init+0x154>)
 800c028:	f7ff fe6a 	bl	800bd00 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800c02c:	2300      	movs	r3, #0
 800c02e:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800c030:	2300      	movs	r3, #0
 800c032:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 800c034:	f107 031c 	add.w	r3, r7, #28
 800c038:	461a      	mov	r2, r3
 800c03a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c03e:	4813      	ldr	r0, [pc, #76]	; (800c08c <MX_TIM5_Init+0x154>)
 800c040:	f7f9 fb60 	bl	8005704 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH4);
 800c044:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c048:	4810      	ldr	r0, [pc, #64]	; (800c08c <MX_TIM5_Init+0x154>)
 800c04a:	f7ff fe17 	bl	800bc7c <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 800c04e:	2100      	movs	r1, #0
 800c050:	480e      	ldr	r0, [pc, #56]	; (800c08c <MX_TIM5_Init+0x154>)
 800c052:	f7ff feac 	bl	800bdae <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 800c056:	480d      	ldr	r0, [pc, #52]	; (800c08c <MX_TIM5_Init+0x154>)
 800c058:	f7ff febc 	bl	800bdd4 <LL_TIM_DisableMasterSlaveMode>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800c05c:	2001      	movs	r0, #1
 800c05e:	f7ff fec9 	bl	800bdf4 <LL_AHB1_GRP1_EnableClock>
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4 
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 800c062:	230f      	movs	r3, #15
 800c064:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800c066:	2302      	movs	r3, #2
 800c068:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800c06a:	2300      	movs	r3, #0
 800c06c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800c06e:	2300      	movs	r3, #0
 800c070:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800c072:	2300      	movs	r3, #0
 800c074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800c076:	2302      	movs	r3, #2
 800c078:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c07a:	1d3b      	adds	r3, r7, #4
 800c07c:	4619      	mov	r1, r3
 800c07e:	4804      	ldr	r0, [pc, #16]	; (800c090 <MX_TIM5_Init+0x158>)
 800c080:	f7f9 f810 	bl	80050a4 <LL_GPIO_Init>

}
 800c084:	bf00      	nop
 800c086:	3750      	adds	r7, #80	; 0x50
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}
 800c08c:	40000c00 	.word	0x40000c00
 800c090:	40020000 	.word	0x40020000

0800c094 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b086      	sub	sp, #24
 800c098:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800c09a:	1d3b      	adds	r3, r7, #4
 800c09c:	2200      	movs	r2, #0
 800c09e:	601a      	str	r2, [r3, #0]
 800c0a0:	605a      	str	r2, [r3, #4]
 800c0a2:	609a      	str	r2, [r3, #8]
 800c0a4:	60da      	str	r2, [r3, #12]
 800c0a6:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 800c0a8:	2020      	movs	r0, #32
 800c0aa:	f7ff febb 	bl	800be24 <LL_APB1_GRP1_EnableClock>

  /* TIM7 interrupt Init */
  NVIC_SetPriority(TIM7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800c0ae:	f7ff fd4b 	bl	800bb48 <__NVIC_GetPriorityGrouping>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	2100      	movs	r1, #0
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f7ff fd9b 	bl	800bbf4 <NVIC_EncodePriority>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	2037      	movs	r0, #55	; 0x37
 800c0c4:	f7ff fd6c 	bl	800bba0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM7_IRQn);
 800c0c8:	2037      	movs	r0, #55	; 0x37
 800c0ca:	f7ff fd4b 	bl	800bb64 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 41999;
 800c0ce:	f24a 430f 	movw	r3, #41999	; 0xa40f
 800c0d2:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 1;
 800c0d8:	2301      	movs	r3, #1
 800c0da:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 800c0dc:	1d3b      	adds	r3, r7, #4
 800c0de:	4619      	mov	r1, r3
 800c0e0:	4808      	ldr	r0, [pc, #32]	; (800c104 <MX_TIM7_Init+0x70>)
 800c0e2:	f7f9 fa75 	bl	80055d0 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM7);
 800c0e6:	4807      	ldr	r0, [pc, #28]	; (800c104 <MX_TIM7_Init+0x70>)
 800c0e8:	f7ff fdb7 	bl	800bc5a <LL_TIM_EnableARRPreload>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 800c0ec:	2100      	movs	r1, #0
 800c0ee:	4805      	ldr	r0, [pc, #20]	; (800c104 <MX_TIM7_Init+0x70>)
 800c0f0:	f7ff fe5d 	bl	800bdae <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 800c0f4:	4803      	ldr	r0, [pc, #12]	; (800c104 <MX_TIM7_Init+0x70>)
 800c0f6:	f7ff fe6d 	bl	800bdd4 <LL_TIM_DisableMasterSlaveMode>

}
 800c0fa:	bf00      	nop
 800c0fc:	3718      	adds	r7, #24
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}
 800c102:	bf00      	nop
 800c104:	40001400 	.word	0x40001400

0800c108 <__NVIC_GetPriorityGrouping>:
{
 800c108:	b480      	push	{r7}
 800c10a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c10c:	4b04      	ldr	r3, [pc, #16]	; (800c120 <__NVIC_GetPriorityGrouping+0x18>)
 800c10e:	68db      	ldr	r3, [r3, #12]
 800c110:	0a1b      	lsrs	r3, r3, #8
 800c112:	f003 0307 	and.w	r3, r3, #7
}
 800c116:	4618      	mov	r0, r3
 800c118:	46bd      	mov	sp, r7
 800c11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11e:	4770      	bx	lr
 800c120:	e000ed00 	.word	0xe000ed00

0800c124 <__NVIC_EnableIRQ>:
{
 800c124:	b480      	push	{r7}
 800c126:	b083      	sub	sp, #12
 800c128:	af00      	add	r7, sp, #0
 800c12a:	4603      	mov	r3, r0
 800c12c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c12e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c132:	2b00      	cmp	r3, #0
 800c134:	db0b      	blt.n	800c14e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c136:	79fb      	ldrb	r3, [r7, #7]
 800c138:	f003 021f 	and.w	r2, r3, #31
 800c13c:	4907      	ldr	r1, [pc, #28]	; (800c15c <__NVIC_EnableIRQ+0x38>)
 800c13e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c142:	095b      	lsrs	r3, r3, #5
 800c144:	2001      	movs	r0, #1
 800c146:	fa00 f202 	lsl.w	r2, r0, r2
 800c14a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c14e:	bf00      	nop
 800c150:	370c      	adds	r7, #12
 800c152:	46bd      	mov	sp, r7
 800c154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c158:	4770      	bx	lr
 800c15a:	bf00      	nop
 800c15c:	e000e100 	.word	0xe000e100

0800c160 <__NVIC_SetPriority>:
{
 800c160:	b480      	push	{r7}
 800c162:	b083      	sub	sp, #12
 800c164:	af00      	add	r7, sp, #0
 800c166:	4603      	mov	r3, r0
 800c168:	6039      	str	r1, [r7, #0]
 800c16a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c16c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c170:	2b00      	cmp	r3, #0
 800c172:	db0a      	blt.n	800c18a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	b2da      	uxtb	r2, r3
 800c178:	490c      	ldr	r1, [pc, #48]	; (800c1ac <__NVIC_SetPriority+0x4c>)
 800c17a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c17e:	0112      	lsls	r2, r2, #4
 800c180:	b2d2      	uxtb	r2, r2
 800c182:	440b      	add	r3, r1
 800c184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c188:	e00a      	b.n	800c1a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	b2da      	uxtb	r2, r3
 800c18e:	4908      	ldr	r1, [pc, #32]	; (800c1b0 <__NVIC_SetPriority+0x50>)
 800c190:	79fb      	ldrb	r3, [r7, #7]
 800c192:	f003 030f 	and.w	r3, r3, #15
 800c196:	3b04      	subs	r3, #4
 800c198:	0112      	lsls	r2, r2, #4
 800c19a:	b2d2      	uxtb	r2, r2
 800c19c:	440b      	add	r3, r1
 800c19e:	761a      	strb	r2, [r3, #24]
}
 800c1a0:	bf00      	nop
 800c1a2:	370c      	adds	r7, #12
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1aa:	4770      	bx	lr
 800c1ac:	e000e100 	.word	0xe000e100
 800c1b0:	e000ed00 	.word	0xe000ed00

0800c1b4 <NVIC_EncodePriority>:
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b089      	sub	sp, #36	; 0x24
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	60f8      	str	r0, [r7, #12]
 800c1bc:	60b9      	str	r1, [r7, #8]
 800c1be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	f003 0307 	and.w	r3, r3, #7
 800c1c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c1c8:	69fb      	ldr	r3, [r7, #28]
 800c1ca:	f1c3 0307 	rsb	r3, r3, #7
 800c1ce:	2b04      	cmp	r3, #4
 800c1d0:	bf28      	it	cs
 800c1d2:	2304      	movcs	r3, #4
 800c1d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c1d6:	69fb      	ldr	r3, [r7, #28]
 800c1d8:	3304      	adds	r3, #4
 800c1da:	2b06      	cmp	r3, #6
 800c1dc:	d902      	bls.n	800c1e4 <NVIC_EncodePriority+0x30>
 800c1de:	69fb      	ldr	r3, [r7, #28]
 800c1e0:	3b03      	subs	r3, #3
 800c1e2:	e000      	b.n	800c1e6 <NVIC_EncodePriority+0x32>
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c1e8:	f04f 32ff 	mov.w	r2, #4294967295
 800c1ec:	69bb      	ldr	r3, [r7, #24]
 800c1ee:	fa02 f303 	lsl.w	r3, r2, r3
 800c1f2:	43da      	mvns	r2, r3
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	401a      	ands	r2, r3
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c1fc:	f04f 31ff 	mov.w	r1, #4294967295
 800c200:	697b      	ldr	r3, [r7, #20]
 800c202:	fa01 f303 	lsl.w	r3, r1, r3
 800c206:	43d9      	mvns	r1, r3
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c20c:	4313      	orrs	r3, r2
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3724      	adds	r7, #36	; 0x24
 800c212:	46bd      	mov	sp, r7
 800c214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c218:	4770      	bx	lr

0800c21a <LL_USART_Enable>:
{
 800c21a:	b480      	push	{r7}
 800c21c:	b083      	sub	sp, #12
 800c21e:	af00      	add	r7, sp, #0
 800c220:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	68db      	ldr	r3, [r3, #12]
 800c226:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	60da      	str	r2, [r3, #12]
}
 800c22e:	bf00      	nop
 800c230:	370c      	adds	r7, #12
 800c232:	46bd      	mov	sp, r7
 800c234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c238:	4770      	bx	lr

0800c23a <LL_USART_ConfigAsyncMode>:
{
 800c23a:	b480      	push	{r7}
 800c23c:	b083      	sub	sp, #12
 800c23e:	af00      	add	r7, sp, #0
 800c240:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	691b      	ldr	r3, [r3, #16]
 800c246:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	695b      	ldr	r3, [r3, #20]
 800c252:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	615a      	str	r2, [r3, #20]
}
 800c25a:	bf00      	nop
 800c25c:	370c      	adds	r7, #12
 800c25e:	46bd      	mov	sp, r7
 800c260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c264:	4770      	bx	lr
	...

0800c268 <LL_AHB1_GRP1_EnableClock>:
{
 800c268:	b480      	push	{r7}
 800c26a:	b085      	sub	sp, #20
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800c270:	4b08      	ldr	r3, [pc, #32]	; (800c294 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800c272:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c274:	4907      	ldr	r1, [pc, #28]	; (800c294 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	4313      	orrs	r3, r2
 800c27a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800c27c:	4b05      	ldr	r3, [pc, #20]	; (800c294 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800c27e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	4013      	ands	r3, r2
 800c284:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c286:	68fb      	ldr	r3, [r7, #12]
}
 800c288:	bf00      	nop
 800c28a:	3714      	adds	r7, #20
 800c28c:	46bd      	mov	sp, r7
 800c28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c292:	4770      	bx	lr
 800c294:	40023800 	.word	0x40023800

0800c298 <LL_APB1_GRP1_EnableClock>:
{
 800c298:	b480      	push	{r7}
 800c29a:	b085      	sub	sp, #20
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800c2a0:	4b08      	ldr	r3, [pc, #32]	; (800c2c4 <LL_APB1_GRP1_EnableClock+0x2c>)
 800c2a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c2a4:	4907      	ldr	r1, [pc, #28]	; (800c2c4 <LL_APB1_GRP1_EnableClock+0x2c>)
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	4313      	orrs	r3, r2
 800c2aa:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800c2ac:	4b05      	ldr	r3, [pc, #20]	; (800c2c4 <LL_APB1_GRP1_EnableClock+0x2c>)
 800c2ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	4013      	ands	r3, r2
 800c2b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
}
 800c2b8:	bf00      	nop
 800c2ba:	3714      	adds	r7, #20
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c2:	4770      	bx	lr
 800c2c4:	40023800 	.word	0x40023800

0800c2c8 <LL_APB2_GRP1_EnableClock>:
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	b085      	sub	sp, #20
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800c2d0:	4b08      	ldr	r3, [pc, #32]	; (800c2f4 <LL_APB2_GRP1_EnableClock+0x2c>)
 800c2d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c2d4:	4907      	ldr	r1, [pc, #28]	; (800c2f4 <LL_APB2_GRP1_EnableClock+0x2c>)
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	4313      	orrs	r3, r2
 800c2da:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800c2dc:	4b05      	ldr	r3, [pc, #20]	; (800c2f4 <LL_APB2_GRP1_EnableClock+0x2c>)
 800c2de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	4013      	ands	r3, r2
 800c2e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
}
 800c2e8:	bf00      	nop
 800c2ea:	3714      	adds	r7, #20
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f2:	4770      	bx	lr
 800c2f4:	40023800 	.word	0x40023800

0800c2f8 <MX_UART4_Init>:

UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b08e      	sub	sp, #56	; 0x38
 800c2fc:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800c2fe:	f107 031c 	add.w	r3, r7, #28
 800c302:	2200      	movs	r2, #0
 800c304:	601a      	str	r2, [r3, #0]
 800c306:	605a      	str	r2, [r3, #4]
 800c308:	609a      	str	r2, [r3, #8]
 800c30a:	60da      	str	r2, [r3, #12]
 800c30c:	611a      	str	r2, [r3, #16]
 800c30e:	615a      	str	r2, [r3, #20]
 800c310:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c312:	1d3b      	adds	r3, r7, #4
 800c314:	2200      	movs	r2, #0
 800c316:	601a      	str	r2, [r3, #0]
 800c318:	605a      	str	r2, [r3, #4]
 800c31a:	609a      	str	r2, [r3, #8]
 800c31c:	60da      	str	r2, [r3, #12]
 800c31e:	611a      	str	r2, [r3, #16]
 800c320:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 800c322:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c326:	f7ff ffb7 	bl	800c298 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800c32a:	2004      	movs	r0, #4
 800c32c:	f7ff ff9c 	bl	800c268 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration  
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX 
  */
  GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 800c330:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800c334:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800c336:	2302      	movs	r3, #2
 800c338:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800c33a:	2303      	movs	r3, #3
 800c33c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800c33e:	2300      	movs	r3, #0
 800c340:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800c342:	2301      	movs	r3, #1
 800c344:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800c346:	2308      	movs	r3, #8
 800c348:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c34a:	1d3b      	adds	r3, r7, #4
 800c34c:	4619      	mov	r1, r3
 800c34e:	4819      	ldr	r0, [pc, #100]	; (800c3b4 <MX_UART4_Init+0xbc>)
 800c350:	f7f8 fea8 	bl	80050a4 <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800c354:	f7ff fed8 	bl	800c108 <__NVIC_GetPriorityGrouping>
 800c358:	4603      	mov	r3, r0
 800c35a:	2200      	movs	r2, #0
 800c35c:	2100      	movs	r1, #0
 800c35e:	4618      	mov	r0, r3
 800c360:	f7ff ff28 	bl	800c1b4 <NVIC_EncodePriority>
 800c364:	4603      	mov	r3, r0
 800c366:	4619      	mov	r1, r3
 800c368:	2034      	movs	r0, #52	; 0x34
 800c36a:	f7ff fef9 	bl	800c160 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 800c36e:	2034      	movs	r0, #52	; 0x34
 800c370:	f7ff fed8 	bl	800c124 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 9600;
 800c374:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800c378:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800c37a:	2300      	movs	r3, #0
 800c37c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800c37e:	2300      	movs	r3, #0
 800c380:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800c382:	2300      	movs	r3, #0
 800c384:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800c386:	230c      	movs	r3, #12
 800c388:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800c38a:	2300      	movs	r3, #0
 800c38c:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800c38e:	2300      	movs	r3, #0
 800c390:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 800c392:	f107 031c 	add.w	r3, r7, #28
 800c396:	4619      	mov	r1, r3
 800c398:	4807      	ldr	r0, [pc, #28]	; (800c3b8 <MX_UART4_Init+0xc0>)
 800c39a:	f7f9 fdff 	bl	8005f9c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 800c39e:	4806      	ldr	r0, [pc, #24]	; (800c3b8 <MX_UART4_Init+0xc0>)
 800c3a0:	f7ff ff4b 	bl	800c23a <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 800c3a4:	4804      	ldr	r0, [pc, #16]	; (800c3b8 <MX_UART4_Init+0xc0>)
 800c3a6:	f7ff ff38 	bl	800c21a <LL_USART_Enable>

}
 800c3aa:	bf00      	nop
 800c3ac:	3738      	adds	r7, #56	; 0x38
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}
 800c3b2:	bf00      	nop
 800c3b4:	40020800 	.word	0x40020800
 800c3b8:	40004c00 	.word	0x40004c00

0800c3bc <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b08e      	sub	sp, #56	; 0x38
 800c3c0:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800c3c2:	f107 031c 	add.w	r3, r7, #28
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	601a      	str	r2, [r3, #0]
 800c3ca:	605a      	str	r2, [r3, #4]
 800c3cc:	609a      	str	r2, [r3, #8]
 800c3ce:	60da      	str	r2, [r3, #12]
 800c3d0:	611a      	str	r2, [r3, #16]
 800c3d2:	615a      	str	r2, [r3, #20]
 800c3d4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c3d6:	1d3b      	adds	r3, r7, #4
 800c3d8:	2200      	movs	r2, #0
 800c3da:	601a      	str	r2, [r3, #0]
 800c3dc:	605a      	str	r2, [r3, #4]
 800c3de:	609a      	str	r2, [r3, #8]
 800c3e0:	60da      	str	r2, [r3, #12]
 800c3e2:	611a      	str	r2, [r3, #16]
 800c3e4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 800c3e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c3ea:	f7ff ff55 	bl	800c298 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800c3ee:	2004      	movs	r0, #4
 800c3f0:	f7ff ff3a 	bl	800c268 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800c3f4:	2008      	movs	r0, #8
 800c3f6:	f7ff ff37 	bl	800c268 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration  
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 800c3fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c3fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800c400:	2302      	movs	r3, #2
 800c402:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800c404:	2303      	movs	r3, #3
 800c406:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800c408:	2300      	movs	r3, #0
 800c40a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800c40c:	2301      	movs	r3, #1
 800c40e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800c410:	2308      	movs	r3, #8
 800c412:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c414:	1d3b      	adds	r3, r7, #4
 800c416:	4619      	mov	r1, r3
 800c418:	4821      	ldr	r0, [pc, #132]	; (800c4a0 <MX_UART5_Init+0xe4>)
 800c41a:	f7f8 fe43 	bl	80050a4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800c41e:	2304      	movs	r3, #4
 800c420:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800c422:	2302      	movs	r3, #2
 800c424:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800c426:	2303      	movs	r3, #3
 800c428:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800c42a:	2300      	movs	r3, #0
 800c42c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800c42e:	2301      	movs	r3, #1
 800c430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800c432:	2308      	movs	r3, #8
 800c434:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c436:	1d3b      	adds	r3, r7, #4
 800c438:	4619      	mov	r1, r3
 800c43a:	481a      	ldr	r0, [pc, #104]	; (800c4a4 <MX_UART5_Init+0xe8>)
 800c43c:	f7f8 fe32 	bl	80050a4 <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800c440:	f7ff fe62 	bl	800c108 <__NVIC_GetPriorityGrouping>
 800c444:	4603      	mov	r3, r0
 800c446:	2200      	movs	r2, #0
 800c448:	2100      	movs	r1, #0
 800c44a:	4618      	mov	r0, r3
 800c44c:	f7ff feb2 	bl	800c1b4 <NVIC_EncodePriority>
 800c450:	4603      	mov	r3, r0
 800c452:	4619      	mov	r1, r3
 800c454:	2035      	movs	r0, #53	; 0x35
 800c456:	f7ff fe83 	bl	800c160 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 800c45a:	2035      	movs	r0, #53	; 0x35
 800c45c:	f7ff fe62 	bl	800c124 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 800c460:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800c464:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800c466:	2300      	movs	r3, #0
 800c468:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800c46a:	2300      	movs	r3, #0
 800c46c:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800c46e:	2300      	movs	r3, #0
 800c470:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 800c472:	2304      	movs	r3, #4
 800c474:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800c476:	2300      	movs	r3, #0
 800c478:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800c47a:	2300      	movs	r3, #0
 800c47c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 800c47e:	f107 031c 	add.w	r3, r7, #28
 800c482:	4619      	mov	r1, r3
 800c484:	4808      	ldr	r0, [pc, #32]	; (800c4a8 <MX_UART5_Init+0xec>)
 800c486:	f7f9 fd89 	bl	8005f9c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 800c48a:	4807      	ldr	r0, [pc, #28]	; (800c4a8 <MX_UART5_Init+0xec>)
 800c48c:	f7ff fed5 	bl	800c23a <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 800c490:	4805      	ldr	r0, [pc, #20]	; (800c4a8 <MX_UART5_Init+0xec>)
 800c492:	f7ff fec2 	bl	800c21a <LL_USART_Enable>

}
 800c496:	bf00      	nop
 800c498:	3738      	adds	r7, #56	; 0x38
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}
 800c49e:	bf00      	nop
 800c4a0:	40020800 	.word	0x40020800
 800c4a4:	40020c00 	.word	0x40020c00
 800c4a8:	40005000 	.word	0x40005000

0800c4ac <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800c4b0:	4b11      	ldr	r3, [pc, #68]	; (800c4f8 <MX_USART1_UART_Init+0x4c>)
 800c4b2:	4a12      	ldr	r2, [pc, #72]	; (800c4fc <MX_USART1_UART_Init+0x50>)
 800c4b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800c4b6:	4b10      	ldr	r3, [pc, #64]	; (800c4f8 <MX_USART1_UART_Init+0x4c>)
 800c4b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800c4bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c4be:	4b0e      	ldr	r3, [pc, #56]	; (800c4f8 <MX_USART1_UART_Init+0x4c>)
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800c4c4:	4b0c      	ldr	r3, [pc, #48]	; (800c4f8 <MX_USART1_UART_Init+0x4c>)
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800c4ca:	4b0b      	ldr	r3, [pc, #44]	; (800c4f8 <MX_USART1_UART_Init+0x4c>)
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c4d0:	4b09      	ldr	r3, [pc, #36]	; (800c4f8 <MX_USART1_UART_Init+0x4c>)
 800c4d2:	220c      	movs	r2, #12
 800c4d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c4d6:	4b08      	ldr	r3, [pc, #32]	; (800c4f8 <MX_USART1_UART_Init+0x4c>)
 800c4d8:	2200      	movs	r2, #0
 800c4da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c4dc:	4b06      	ldr	r3, [pc, #24]	; (800c4f8 <MX_USART1_UART_Init+0x4c>)
 800c4de:	2200      	movs	r2, #0
 800c4e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c4e2:	4805      	ldr	r0, [pc, #20]	; (800c4f8 <MX_USART1_UART_Init+0x4c>)
 800c4e4:	f7f7 fbf6 	bl	8003cd4 <HAL_UART_Init>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d001      	beq.n	800c4f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800c4ee:	f7fe fed6 	bl	800b29e <Error_Handler>
  }

}
 800c4f2:	bf00      	nop
 800c4f4:	bd80      	pop	{r7, pc}
 800c4f6:	bf00      	nop
 800c4f8:	20000654 	.word	0x20000654
 800c4fc:	40011000 	.word	0x40011000

0800c500 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b08e      	sub	sp, #56	; 0x38
 800c504:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800c506:	f107 031c 	add.w	r3, r7, #28
 800c50a:	2200      	movs	r2, #0
 800c50c:	601a      	str	r2, [r3, #0]
 800c50e:	605a      	str	r2, [r3, #4]
 800c510:	609a      	str	r2, [r3, #8]
 800c512:	60da      	str	r2, [r3, #12]
 800c514:	611a      	str	r2, [r3, #16]
 800c516:	615a      	str	r2, [r3, #20]
 800c518:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c51a:	1d3b      	adds	r3, r7, #4
 800c51c:	2200      	movs	r2, #0
 800c51e:	601a      	str	r2, [r3, #0]
 800c520:	605a      	str	r2, [r3, #4]
 800c522:	609a      	str	r2, [r3, #8]
 800c524:	60da      	str	r2, [r3, #12]
 800c526:	611a      	str	r2, [r3, #16]
 800c528:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 800c52a:	2020      	movs	r0, #32
 800c52c:	f7ff fecc 	bl	800c2c8 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800c530:	2004      	movs	r0, #4
 800c532:	f7ff fe99 	bl	800c268 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration  
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800c536:	23c0      	movs	r3, #192	; 0xc0
 800c538:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800c53a:	2302      	movs	r3, #2
 800c53c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800c53e:	2303      	movs	r3, #3
 800c540:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800c542:	2300      	movs	r3, #0
 800c544:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800c546:	2301      	movs	r3, #1
 800c548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800c54a:	2308      	movs	r3, #8
 800c54c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c54e:	1d3b      	adds	r3, r7, #4
 800c550:	4619      	mov	r1, r3
 800c552:	4819      	ldr	r0, [pc, #100]	; (800c5b8 <MX_USART6_UART_Init+0xb8>)
 800c554:	f7f8 fda6 	bl	80050a4 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800c558:	f7ff fdd6 	bl	800c108 <__NVIC_GetPriorityGrouping>
 800c55c:	4603      	mov	r3, r0
 800c55e:	2200      	movs	r2, #0
 800c560:	2100      	movs	r1, #0
 800c562:	4618      	mov	r0, r3
 800c564:	f7ff fe26 	bl	800c1b4 <NVIC_EncodePriority>
 800c568:	4603      	mov	r3, r0
 800c56a:	4619      	mov	r1, r3
 800c56c:	2047      	movs	r0, #71	; 0x47
 800c56e:	f7ff fdf7 	bl	800c160 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 800c572:	2047      	movs	r0, #71	; 0x47
 800c574:	f7ff fdd6 	bl	800c124 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 800c578:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800c57c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800c57e:	2300      	movs	r3, #0
 800c580:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800c582:	2300      	movs	r3, #0
 800c584:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800c586:	2300      	movs	r3, #0
 800c588:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800c58a:	230c      	movs	r3, #12
 800c58c:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800c58e:	2300      	movs	r3, #0
 800c590:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800c592:	2300      	movs	r3, #0
 800c594:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 800c596:	f107 031c 	add.w	r3, r7, #28
 800c59a:	4619      	mov	r1, r3
 800c59c:	4807      	ldr	r0, [pc, #28]	; (800c5bc <MX_USART6_UART_Init+0xbc>)
 800c59e:	f7f9 fcfd 	bl	8005f9c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 800c5a2:	4806      	ldr	r0, [pc, #24]	; (800c5bc <MX_USART6_UART_Init+0xbc>)
 800c5a4:	f7ff fe49 	bl	800c23a <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 800c5a8:	4804      	ldr	r0, [pc, #16]	; (800c5bc <MX_USART6_UART_Init+0xbc>)
 800c5aa:	f7ff fe36 	bl	800c21a <LL_USART_Enable>

}
 800c5ae:	bf00      	nop
 800c5b0:	3738      	adds	r7, #56	; 0x38
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}
 800c5b6:	bf00      	nop
 800c5b8:	40020800 	.word	0x40020800
 800c5bc:	40011400 	.word	0x40011400

0800c5c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b08a      	sub	sp, #40	; 0x28
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c5c8:	f107 0314 	add.w	r3, r7, #20
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	601a      	str	r2, [r3, #0]
 800c5d0:	605a      	str	r2, [r3, #4]
 800c5d2:	609a      	str	r2, [r3, #8]
 800c5d4:	60da      	str	r2, [r3, #12]
 800c5d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	4a1d      	ldr	r2, [pc, #116]	; (800c654 <HAL_UART_MspInit+0x94>)
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	d134      	bne.n	800c64c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	613b      	str	r3, [r7, #16]
 800c5e6:	4b1c      	ldr	r3, [pc, #112]	; (800c658 <HAL_UART_MspInit+0x98>)
 800c5e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5ea:	4a1b      	ldr	r2, [pc, #108]	; (800c658 <HAL_UART_MspInit+0x98>)
 800c5ec:	f043 0310 	orr.w	r3, r3, #16
 800c5f0:	6453      	str	r3, [r2, #68]	; 0x44
 800c5f2:	4b19      	ldr	r3, [pc, #100]	; (800c658 <HAL_UART_MspInit+0x98>)
 800c5f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5f6:	f003 0310 	and.w	r3, r3, #16
 800c5fa:	613b      	str	r3, [r7, #16]
 800c5fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c5fe:	2300      	movs	r3, #0
 800c600:	60fb      	str	r3, [r7, #12]
 800c602:	4b15      	ldr	r3, [pc, #84]	; (800c658 <HAL_UART_MspInit+0x98>)
 800c604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c606:	4a14      	ldr	r2, [pc, #80]	; (800c658 <HAL_UART_MspInit+0x98>)
 800c608:	f043 0301 	orr.w	r3, r3, #1
 800c60c:	6313      	str	r3, [r2, #48]	; 0x30
 800c60e:	4b12      	ldr	r3, [pc, #72]	; (800c658 <HAL_UART_MspInit+0x98>)
 800c610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c612:	f003 0301 	and.w	r3, r3, #1
 800c616:	60fb      	str	r3, [r7, #12]
 800c618:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800c61a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800c61e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c620:	2302      	movs	r3, #2
 800c622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c624:	2301      	movs	r3, #1
 800c626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c628:	2303      	movs	r3, #3
 800c62a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800c62c:	2307      	movs	r3, #7
 800c62e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c630:	f107 0314 	add.w	r3, r7, #20
 800c634:	4619      	mov	r1, r3
 800c636:	4809      	ldr	r0, [pc, #36]	; (800c65c <HAL_UART_MspInit+0x9c>)
 800c638:	f7f5 fd66 	bl	8002108 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800c63c:	2200      	movs	r2, #0
 800c63e:	2100      	movs	r1, #0
 800c640:	2025      	movs	r0, #37	; 0x25
 800c642:	f7f5 f998 	bl	8001976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800c646:	2025      	movs	r0, #37	; 0x25
 800c648:	f7f5 f9b1 	bl	80019ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800c64c:	bf00      	nop
 800c64e:	3728      	adds	r7, #40	; 0x28
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}
 800c654:	40011000 	.word	0x40011000
 800c658:	40023800 	.word	0x40023800
 800c65c:	40020000 	.word	0x40020000

0800c660 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800c660:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c698 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800c664:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800c666:	e003      	b.n	800c670 <LoopCopyDataInit>

0800c668 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800c668:	4b0c      	ldr	r3, [pc, #48]	; (800c69c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800c66a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800c66c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800c66e:	3104      	adds	r1, #4

0800c670 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800c670:	480b      	ldr	r0, [pc, #44]	; (800c6a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800c672:	4b0c      	ldr	r3, [pc, #48]	; (800c6a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800c674:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800c676:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800c678:	d3f6      	bcc.n	800c668 <CopyDataInit>
  ldr  r2, =_sbss
 800c67a:	4a0b      	ldr	r2, [pc, #44]	; (800c6a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800c67c:	e002      	b.n	800c684 <LoopFillZerobss>

0800c67e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800c67e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800c680:	f842 3b04 	str.w	r3, [r2], #4

0800c684 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800c684:	4b09      	ldr	r3, [pc, #36]	; (800c6ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800c686:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800c688:	d3f9      	bcc.n	800c67e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800c68a:	f7ff fa27 	bl	800badc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c68e:	f000 f817 	bl	800c6c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c692:	f7fc fd05 	bl	80090a0 <main>
  bx  lr    
 800c696:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800c698:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800c69c:	0801079c 	.word	0x0801079c
  ldr  r0, =_sdata
 800c6a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800c6a4:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 800c6a8:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 800c6ac:	200006a4 	.word	0x200006a4

0800c6b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c6b0:	e7fe      	b.n	800c6b0 <ADC_IRQHandler>
	...

0800c6b4 <__errno>:
 800c6b4:	4b01      	ldr	r3, [pc, #4]	; (800c6bc <__errno+0x8>)
 800c6b6:	6818      	ldr	r0, [r3, #0]
 800c6b8:	4770      	bx	lr
 800c6ba:	bf00      	nop
 800c6bc:	20000010 	.word	0x20000010

0800c6c0 <__libc_init_array>:
 800c6c0:	b570      	push	{r4, r5, r6, lr}
 800c6c2:	4d0d      	ldr	r5, [pc, #52]	; (800c6f8 <__libc_init_array+0x38>)
 800c6c4:	4c0d      	ldr	r4, [pc, #52]	; (800c6fc <__libc_init_array+0x3c>)
 800c6c6:	1b64      	subs	r4, r4, r5
 800c6c8:	10a4      	asrs	r4, r4, #2
 800c6ca:	2600      	movs	r6, #0
 800c6cc:	42a6      	cmp	r6, r4
 800c6ce:	d109      	bne.n	800c6e4 <__libc_init_array+0x24>
 800c6d0:	4d0b      	ldr	r5, [pc, #44]	; (800c700 <__libc_init_array+0x40>)
 800c6d2:	4c0c      	ldr	r4, [pc, #48]	; (800c704 <__libc_init_array+0x44>)
 800c6d4:	f003 fc22 	bl	800ff1c <_init>
 800c6d8:	1b64      	subs	r4, r4, r5
 800c6da:	10a4      	asrs	r4, r4, #2
 800c6dc:	2600      	movs	r6, #0
 800c6de:	42a6      	cmp	r6, r4
 800c6e0:	d105      	bne.n	800c6ee <__libc_init_array+0x2e>
 800c6e2:	bd70      	pop	{r4, r5, r6, pc}
 800c6e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6e8:	4798      	blx	r3
 800c6ea:	3601      	adds	r6, #1
 800c6ec:	e7ee      	b.n	800c6cc <__libc_init_array+0xc>
 800c6ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6f2:	4798      	blx	r3
 800c6f4:	3601      	adds	r6, #1
 800c6f6:	e7f2      	b.n	800c6de <__libc_init_array+0x1e>
 800c6f8:	08010794 	.word	0x08010794
 800c6fc:	08010794 	.word	0x08010794
 800c700:	08010794 	.word	0x08010794
 800c704:	08010798 	.word	0x08010798

0800c708 <memset>:
 800c708:	4402      	add	r2, r0
 800c70a:	4603      	mov	r3, r0
 800c70c:	4293      	cmp	r3, r2
 800c70e:	d100      	bne.n	800c712 <memset+0xa>
 800c710:	4770      	bx	lr
 800c712:	f803 1b01 	strb.w	r1, [r3], #1
 800c716:	e7f9      	b.n	800c70c <memset+0x4>

0800c718 <__cvt>:
 800c718:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c71c:	ec55 4b10 	vmov	r4, r5, d0
 800c720:	2d00      	cmp	r5, #0
 800c722:	460e      	mov	r6, r1
 800c724:	4619      	mov	r1, r3
 800c726:	462b      	mov	r3, r5
 800c728:	bfbb      	ittet	lt
 800c72a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c72e:	461d      	movlt	r5, r3
 800c730:	2300      	movge	r3, #0
 800c732:	232d      	movlt	r3, #45	; 0x2d
 800c734:	700b      	strb	r3, [r1, #0]
 800c736:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c738:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c73c:	4691      	mov	r9, r2
 800c73e:	f023 0820 	bic.w	r8, r3, #32
 800c742:	bfbc      	itt	lt
 800c744:	4622      	movlt	r2, r4
 800c746:	4614      	movlt	r4, r2
 800c748:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c74c:	d005      	beq.n	800c75a <__cvt+0x42>
 800c74e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c752:	d100      	bne.n	800c756 <__cvt+0x3e>
 800c754:	3601      	adds	r6, #1
 800c756:	2102      	movs	r1, #2
 800c758:	e000      	b.n	800c75c <__cvt+0x44>
 800c75a:	2103      	movs	r1, #3
 800c75c:	ab03      	add	r3, sp, #12
 800c75e:	9301      	str	r3, [sp, #4]
 800c760:	ab02      	add	r3, sp, #8
 800c762:	9300      	str	r3, [sp, #0]
 800c764:	ec45 4b10 	vmov	d0, r4, r5
 800c768:	4653      	mov	r3, sl
 800c76a:	4632      	mov	r2, r6
 800c76c:	f000 fe18 	bl	800d3a0 <_dtoa_r>
 800c770:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c774:	4607      	mov	r7, r0
 800c776:	d102      	bne.n	800c77e <__cvt+0x66>
 800c778:	f019 0f01 	tst.w	r9, #1
 800c77c:	d022      	beq.n	800c7c4 <__cvt+0xac>
 800c77e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c782:	eb07 0906 	add.w	r9, r7, r6
 800c786:	d110      	bne.n	800c7aa <__cvt+0x92>
 800c788:	783b      	ldrb	r3, [r7, #0]
 800c78a:	2b30      	cmp	r3, #48	; 0x30
 800c78c:	d10a      	bne.n	800c7a4 <__cvt+0x8c>
 800c78e:	2200      	movs	r2, #0
 800c790:	2300      	movs	r3, #0
 800c792:	4620      	mov	r0, r4
 800c794:	4629      	mov	r1, r5
 800c796:	f7f4 f997 	bl	8000ac8 <__aeabi_dcmpeq>
 800c79a:	b918      	cbnz	r0, 800c7a4 <__cvt+0x8c>
 800c79c:	f1c6 0601 	rsb	r6, r6, #1
 800c7a0:	f8ca 6000 	str.w	r6, [sl]
 800c7a4:	f8da 3000 	ldr.w	r3, [sl]
 800c7a8:	4499      	add	r9, r3
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	4620      	mov	r0, r4
 800c7b0:	4629      	mov	r1, r5
 800c7b2:	f7f4 f989 	bl	8000ac8 <__aeabi_dcmpeq>
 800c7b6:	b108      	cbz	r0, 800c7bc <__cvt+0xa4>
 800c7b8:	f8cd 900c 	str.w	r9, [sp, #12]
 800c7bc:	2230      	movs	r2, #48	; 0x30
 800c7be:	9b03      	ldr	r3, [sp, #12]
 800c7c0:	454b      	cmp	r3, r9
 800c7c2:	d307      	bcc.n	800c7d4 <__cvt+0xbc>
 800c7c4:	9b03      	ldr	r3, [sp, #12]
 800c7c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c7c8:	1bdb      	subs	r3, r3, r7
 800c7ca:	4638      	mov	r0, r7
 800c7cc:	6013      	str	r3, [r2, #0]
 800c7ce:	b004      	add	sp, #16
 800c7d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7d4:	1c59      	adds	r1, r3, #1
 800c7d6:	9103      	str	r1, [sp, #12]
 800c7d8:	701a      	strb	r2, [r3, #0]
 800c7da:	e7f0      	b.n	800c7be <__cvt+0xa6>

0800c7dc <__exponent>:
 800c7dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c7de:	4603      	mov	r3, r0
 800c7e0:	2900      	cmp	r1, #0
 800c7e2:	bfb8      	it	lt
 800c7e4:	4249      	neglt	r1, r1
 800c7e6:	f803 2b02 	strb.w	r2, [r3], #2
 800c7ea:	bfb4      	ite	lt
 800c7ec:	222d      	movlt	r2, #45	; 0x2d
 800c7ee:	222b      	movge	r2, #43	; 0x2b
 800c7f0:	2909      	cmp	r1, #9
 800c7f2:	7042      	strb	r2, [r0, #1]
 800c7f4:	dd2a      	ble.n	800c84c <__exponent+0x70>
 800c7f6:	f10d 0407 	add.w	r4, sp, #7
 800c7fa:	46a4      	mov	ip, r4
 800c7fc:	270a      	movs	r7, #10
 800c7fe:	46a6      	mov	lr, r4
 800c800:	460a      	mov	r2, r1
 800c802:	fb91 f6f7 	sdiv	r6, r1, r7
 800c806:	fb07 1516 	mls	r5, r7, r6, r1
 800c80a:	3530      	adds	r5, #48	; 0x30
 800c80c:	2a63      	cmp	r2, #99	; 0x63
 800c80e:	f104 34ff 	add.w	r4, r4, #4294967295
 800c812:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c816:	4631      	mov	r1, r6
 800c818:	dcf1      	bgt.n	800c7fe <__exponent+0x22>
 800c81a:	3130      	adds	r1, #48	; 0x30
 800c81c:	f1ae 0502 	sub.w	r5, lr, #2
 800c820:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c824:	1c44      	adds	r4, r0, #1
 800c826:	4629      	mov	r1, r5
 800c828:	4561      	cmp	r1, ip
 800c82a:	d30a      	bcc.n	800c842 <__exponent+0x66>
 800c82c:	f10d 0209 	add.w	r2, sp, #9
 800c830:	eba2 020e 	sub.w	r2, r2, lr
 800c834:	4565      	cmp	r5, ip
 800c836:	bf88      	it	hi
 800c838:	2200      	movhi	r2, #0
 800c83a:	4413      	add	r3, r2
 800c83c:	1a18      	subs	r0, r3, r0
 800c83e:	b003      	add	sp, #12
 800c840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c842:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c846:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c84a:	e7ed      	b.n	800c828 <__exponent+0x4c>
 800c84c:	2330      	movs	r3, #48	; 0x30
 800c84e:	3130      	adds	r1, #48	; 0x30
 800c850:	7083      	strb	r3, [r0, #2]
 800c852:	70c1      	strb	r1, [r0, #3]
 800c854:	1d03      	adds	r3, r0, #4
 800c856:	e7f1      	b.n	800c83c <__exponent+0x60>

0800c858 <_printf_float>:
 800c858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c85c:	ed2d 8b02 	vpush	{d8}
 800c860:	b08d      	sub	sp, #52	; 0x34
 800c862:	460c      	mov	r4, r1
 800c864:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c868:	4616      	mov	r6, r2
 800c86a:	461f      	mov	r7, r3
 800c86c:	4605      	mov	r5, r0
 800c86e:	f001 fd3d 	bl	800e2ec <_localeconv_r>
 800c872:	f8d0 a000 	ldr.w	sl, [r0]
 800c876:	4650      	mov	r0, sl
 800c878:	f7f3 fcaa 	bl	80001d0 <strlen>
 800c87c:	2300      	movs	r3, #0
 800c87e:	930a      	str	r3, [sp, #40]	; 0x28
 800c880:	6823      	ldr	r3, [r4, #0]
 800c882:	9305      	str	r3, [sp, #20]
 800c884:	f8d8 3000 	ldr.w	r3, [r8]
 800c888:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c88c:	3307      	adds	r3, #7
 800c88e:	f023 0307 	bic.w	r3, r3, #7
 800c892:	f103 0208 	add.w	r2, r3, #8
 800c896:	f8c8 2000 	str.w	r2, [r8]
 800c89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c89e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c8a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c8a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c8aa:	9307      	str	r3, [sp, #28]
 800c8ac:	f8cd 8018 	str.w	r8, [sp, #24]
 800c8b0:	ee08 0a10 	vmov	s16, r0
 800c8b4:	4b9f      	ldr	r3, [pc, #636]	; (800cb34 <_printf_float+0x2dc>)
 800c8b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c8ba:	f04f 32ff 	mov.w	r2, #4294967295
 800c8be:	f7f4 f935 	bl	8000b2c <__aeabi_dcmpun>
 800c8c2:	bb88      	cbnz	r0, 800c928 <_printf_float+0xd0>
 800c8c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c8c8:	4b9a      	ldr	r3, [pc, #616]	; (800cb34 <_printf_float+0x2dc>)
 800c8ca:	f04f 32ff 	mov.w	r2, #4294967295
 800c8ce:	f7f4 f90f 	bl	8000af0 <__aeabi_dcmple>
 800c8d2:	bb48      	cbnz	r0, 800c928 <_printf_float+0xd0>
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	4640      	mov	r0, r8
 800c8da:	4649      	mov	r1, r9
 800c8dc:	f7f4 f8fe 	bl	8000adc <__aeabi_dcmplt>
 800c8e0:	b110      	cbz	r0, 800c8e8 <_printf_float+0x90>
 800c8e2:	232d      	movs	r3, #45	; 0x2d
 800c8e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8e8:	4b93      	ldr	r3, [pc, #588]	; (800cb38 <_printf_float+0x2e0>)
 800c8ea:	4894      	ldr	r0, [pc, #592]	; (800cb3c <_printf_float+0x2e4>)
 800c8ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c8f0:	bf94      	ite	ls
 800c8f2:	4698      	movls	r8, r3
 800c8f4:	4680      	movhi	r8, r0
 800c8f6:	2303      	movs	r3, #3
 800c8f8:	6123      	str	r3, [r4, #16]
 800c8fa:	9b05      	ldr	r3, [sp, #20]
 800c8fc:	f023 0204 	bic.w	r2, r3, #4
 800c900:	6022      	str	r2, [r4, #0]
 800c902:	f04f 0900 	mov.w	r9, #0
 800c906:	9700      	str	r7, [sp, #0]
 800c908:	4633      	mov	r3, r6
 800c90a:	aa0b      	add	r2, sp, #44	; 0x2c
 800c90c:	4621      	mov	r1, r4
 800c90e:	4628      	mov	r0, r5
 800c910:	f000 f9d8 	bl	800ccc4 <_printf_common>
 800c914:	3001      	adds	r0, #1
 800c916:	f040 8090 	bne.w	800ca3a <_printf_float+0x1e2>
 800c91a:	f04f 30ff 	mov.w	r0, #4294967295
 800c91e:	b00d      	add	sp, #52	; 0x34
 800c920:	ecbd 8b02 	vpop	{d8}
 800c924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c928:	4642      	mov	r2, r8
 800c92a:	464b      	mov	r3, r9
 800c92c:	4640      	mov	r0, r8
 800c92e:	4649      	mov	r1, r9
 800c930:	f7f4 f8fc 	bl	8000b2c <__aeabi_dcmpun>
 800c934:	b140      	cbz	r0, 800c948 <_printf_float+0xf0>
 800c936:	464b      	mov	r3, r9
 800c938:	2b00      	cmp	r3, #0
 800c93a:	bfbc      	itt	lt
 800c93c:	232d      	movlt	r3, #45	; 0x2d
 800c93e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c942:	487f      	ldr	r0, [pc, #508]	; (800cb40 <_printf_float+0x2e8>)
 800c944:	4b7f      	ldr	r3, [pc, #508]	; (800cb44 <_printf_float+0x2ec>)
 800c946:	e7d1      	b.n	800c8ec <_printf_float+0x94>
 800c948:	6863      	ldr	r3, [r4, #4]
 800c94a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c94e:	9206      	str	r2, [sp, #24]
 800c950:	1c5a      	adds	r2, r3, #1
 800c952:	d13f      	bne.n	800c9d4 <_printf_float+0x17c>
 800c954:	2306      	movs	r3, #6
 800c956:	6063      	str	r3, [r4, #4]
 800c958:	9b05      	ldr	r3, [sp, #20]
 800c95a:	6861      	ldr	r1, [r4, #4]
 800c95c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c960:	2300      	movs	r3, #0
 800c962:	9303      	str	r3, [sp, #12]
 800c964:	ab0a      	add	r3, sp, #40	; 0x28
 800c966:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c96a:	ab09      	add	r3, sp, #36	; 0x24
 800c96c:	ec49 8b10 	vmov	d0, r8, r9
 800c970:	9300      	str	r3, [sp, #0]
 800c972:	6022      	str	r2, [r4, #0]
 800c974:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c978:	4628      	mov	r0, r5
 800c97a:	f7ff fecd 	bl	800c718 <__cvt>
 800c97e:	9b06      	ldr	r3, [sp, #24]
 800c980:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c982:	2b47      	cmp	r3, #71	; 0x47
 800c984:	4680      	mov	r8, r0
 800c986:	d108      	bne.n	800c99a <_printf_float+0x142>
 800c988:	1cc8      	adds	r0, r1, #3
 800c98a:	db02      	blt.n	800c992 <_printf_float+0x13a>
 800c98c:	6863      	ldr	r3, [r4, #4]
 800c98e:	4299      	cmp	r1, r3
 800c990:	dd41      	ble.n	800ca16 <_printf_float+0x1be>
 800c992:	f1ab 0b02 	sub.w	fp, fp, #2
 800c996:	fa5f fb8b 	uxtb.w	fp, fp
 800c99a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c99e:	d820      	bhi.n	800c9e2 <_printf_float+0x18a>
 800c9a0:	3901      	subs	r1, #1
 800c9a2:	465a      	mov	r2, fp
 800c9a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c9a8:	9109      	str	r1, [sp, #36]	; 0x24
 800c9aa:	f7ff ff17 	bl	800c7dc <__exponent>
 800c9ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c9b0:	1813      	adds	r3, r2, r0
 800c9b2:	2a01      	cmp	r2, #1
 800c9b4:	4681      	mov	r9, r0
 800c9b6:	6123      	str	r3, [r4, #16]
 800c9b8:	dc02      	bgt.n	800c9c0 <_printf_float+0x168>
 800c9ba:	6822      	ldr	r2, [r4, #0]
 800c9bc:	07d2      	lsls	r2, r2, #31
 800c9be:	d501      	bpl.n	800c9c4 <_printf_float+0x16c>
 800c9c0:	3301      	adds	r3, #1
 800c9c2:	6123      	str	r3, [r4, #16]
 800c9c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d09c      	beq.n	800c906 <_printf_float+0xae>
 800c9cc:	232d      	movs	r3, #45	; 0x2d
 800c9ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9d2:	e798      	b.n	800c906 <_printf_float+0xae>
 800c9d4:	9a06      	ldr	r2, [sp, #24]
 800c9d6:	2a47      	cmp	r2, #71	; 0x47
 800c9d8:	d1be      	bne.n	800c958 <_printf_float+0x100>
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d1bc      	bne.n	800c958 <_printf_float+0x100>
 800c9de:	2301      	movs	r3, #1
 800c9e0:	e7b9      	b.n	800c956 <_printf_float+0xfe>
 800c9e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c9e6:	d118      	bne.n	800ca1a <_printf_float+0x1c2>
 800c9e8:	2900      	cmp	r1, #0
 800c9ea:	6863      	ldr	r3, [r4, #4]
 800c9ec:	dd0b      	ble.n	800ca06 <_printf_float+0x1ae>
 800c9ee:	6121      	str	r1, [r4, #16]
 800c9f0:	b913      	cbnz	r3, 800c9f8 <_printf_float+0x1a0>
 800c9f2:	6822      	ldr	r2, [r4, #0]
 800c9f4:	07d0      	lsls	r0, r2, #31
 800c9f6:	d502      	bpl.n	800c9fe <_printf_float+0x1a6>
 800c9f8:	3301      	adds	r3, #1
 800c9fa:	440b      	add	r3, r1
 800c9fc:	6123      	str	r3, [r4, #16]
 800c9fe:	65a1      	str	r1, [r4, #88]	; 0x58
 800ca00:	f04f 0900 	mov.w	r9, #0
 800ca04:	e7de      	b.n	800c9c4 <_printf_float+0x16c>
 800ca06:	b913      	cbnz	r3, 800ca0e <_printf_float+0x1b6>
 800ca08:	6822      	ldr	r2, [r4, #0]
 800ca0a:	07d2      	lsls	r2, r2, #31
 800ca0c:	d501      	bpl.n	800ca12 <_printf_float+0x1ba>
 800ca0e:	3302      	adds	r3, #2
 800ca10:	e7f4      	b.n	800c9fc <_printf_float+0x1a4>
 800ca12:	2301      	movs	r3, #1
 800ca14:	e7f2      	b.n	800c9fc <_printf_float+0x1a4>
 800ca16:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ca1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca1c:	4299      	cmp	r1, r3
 800ca1e:	db05      	blt.n	800ca2c <_printf_float+0x1d4>
 800ca20:	6823      	ldr	r3, [r4, #0]
 800ca22:	6121      	str	r1, [r4, #16]
 800ca24:	07d8      	lsls	r0, r3, #31
 800ca26:	d5ea      	bpl.n	800c9fe <_printf_float+0x1a6>
 800ca28:	1c4b      	adds	r3, r1, #1
 800ca2a:	e7e7      	b.n	800c9fc <_printf_float+0x1a4>
 800ca2c:	2900      	cmp	r1, #0
 800ca2e:	bfd4      	ite	le
 800ca30:	f1c1 0202 	rsble	r2, r1, #2
 800ca34:	2201      	movgt	r2, #1
 800ca36:	4413      	add	r3, r2
 800ca38:	e7e0      	b.n	800c9fc <_printf_float+0x1a4>
 800ca3a:	6823      	ldr	r3, [r4, #0]
 800ca3c:	055a      	lsls	r2, r3, #21
 800ca3e:	d407      	bmi.n	800ca50 <_printf_float+0x1f8>
 800ca40:	6923      	ldr	r3, [r4, #16]
 800ca42:	4642      	mov	r2, r8
 800ca44:	4631      	mov	r1, r6
 800ca46:	4628      	mov	r0, r5
 800ca48:	47b8      	blx	r7
 800ca4a:	3001      	adds	r0, #1
 800ca4c:	d12c      	bne.n	800caa8 <_printf_float+0x250>
 800ca4e:	e764      	b.n	800c91a <_printf_float+0xc2>
 800ca50:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ca54:	f240 80e0 	bls.w	800cc18 <_printf_float+0x3c0>
 800ca58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	2300      	movs	r3, #0
 800ca60:	f7f4 f832 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca64:	2800      	cmp	r0, #0
 800ca66:	d034      	beq.n	800cad2 <_printf_float+0x27a>
 800ca68:	4a37      	ldr	r2, [pc, #220]	; (800cb48 <_printf_float+0x2f0>)
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	4631      	mov	r1, r6
 800ca6e:	4628      	mov	r0, r5
 800ca70:	47b8      	blx	r7
 800ca72:	3001      	adds	r0, #1
 800ca74:	f43f af51 	beq.w	800c91a <_printf_float+0xc2>
 800ca78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca7c:	429a      	cmp	r2, r3
 800ca7e:	db02      	blt.n	800ca86 <_printf_float+0x22e>
 800ca80:	6823      	ldr	r3, [r4, #0]
 800ca82:	07d8      	lsls	r0, r3, #31
 800ca84:	d510      	bpl.n	800caa8 <_printf_float+0x250>
 800ca86:	ee18 3a10 	vmov	r3, s16
 800ca8a:	4652      	mov	r2, sl
 800ca8c:	4631      	mov	r1, r6
 800ca8e:	4628      	mov	r0, r5
 800ca90:	47b8      	blx	r7
 800ca92:	3001      	adds	r0, #1
 800ca94:	f43f af41 	beq.w	800c91a <_printf_float+0xc2>
 800ca98:	f04f 0800 	mov.w	r8, #0
 800ca9c:	f104 091a 	add.w	r9, r4, #26
 800caa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800caa2:	3b01      	subs	r3, #1
 800caa4:	4543      	cmp	r3, r8
 800caa6:	dc09      	bgt.n	800cabc <_printf_float+0x264>
 800caa8:	6823      	ldr	r3, [r4, #0]
 800caaa:	079b      	lsls	r3, r3, #30
 800caac:	f100 8105 	bmi.w	800ccba <_printf_float+0x462>
 800cab0:	68e0      	ldr	r0, [r4, #12]
 800cab2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cab4:	4298      	cmp	r0, r3
 800cab6:	bfb8      	it	lt
 800cab8:	4618      	movlt	r0, r3
 800caba:	e730      	b.n	800c91e <_printf_float+0xc6>
 800cabc:	2301      	movs	r3, #1
 800cabe:	464a      	mov	r2, r9
 800cac0:	4631      	mov	r1, r6
 800cac2:	4628      	mov	r0, r5
 800cac4:	47b8      	blx	r7
 800cac6:	3001      	adds	r0, #1
 800cac8:	f43f af27 	beq.w	800c91a <_printf_float+0xc2>
 800cacc:	f108 0801 	add.w	r8, r8, #1
 800cad0:	e7e6      	b.n	800caa0 <_printf_float+0x248>
 800cad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	dc39      	bgt.n	800cb4c <_printf_float+0x2f4>
 800cad8:	4a1b      	ldr	r2, [pc, #108]	; (800cb48 <_printf_float+0x2f0>)
 800cada:	2301      	movs	r3, #1
 800cadc:	4631      	mov	r1, r6
 800cade:	4628      	mov	r0, r5
 800cae0:	47b8      	blx	r7
 800cae2:	3001      	adds	r0, #1
 800cae4:	f43f af19 	beq.w	800c91a <_printf_float+0xc2>
 800cae8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800caec:	4313      	orrs	r3, r2
 800caee:	d102      	bne.n	800caf6 <_printf_float+0x29e>
 800caf0:	6823      	ldr	r3, [r4, #0]
 800caf2:	07d9      	lsls	r1, r3, #31
 800caf4:	d5d8      	bpl.n	800caa8 <_printf_float+0x250>
 800caf6:	ee18 3a10 	vmov	r3, s16
 800cafa:	4652      	mov	r2, sl
 800cafc:	4631      	mov	r1, r6
 800cafe:	4628      	mov	r0, r5
 800cb00:	47b8      	blx	r7
 800cb02:	3001      	adds	r0, #1
 800cb04:	f43f af09 	beq.w	800c91a <_printf_float+0xc2>
 800cb08:	f04f 0900 	mov.w	r9, #0
 800cb0c:	f104 0a1a 	add.w	sl, r4, #26
 800cb10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb12:	425b      	negs	r3, r3
 800cb14:	454b      	cmp	r3, r9
 800cb16:	dc01      	bgt.n	800cb1c <_printf_float+0x2c4>
 800cb18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb1a:	e792      	b.n	800ca42 <_printf_float+0x1ea>
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	4652      	mov	r2, sl
 800cb20:	4631      	mov	r1, r6
 800cb22:	4628      	mov	r0, r5
 800cb24:	47b8      	blx	r7
 800cb26:	3001      	adds	r0, #1
 800cb28:	f43f aef7 	beq.w	800c91a <_printf_float+0xc2>
 800cb2c:	f109 0901 	add.w	r9, r9, #1
 800cb30:	e7ee      	b.n	800cb10 <_printf_float+0x2b8>
 800cb32:	bf00      	nop
 800cb34:	7fefffff 	.word	0x7fefffff
 800cb38:	08010368 	.word	0x08010368
 800cb3c:	0801036c 	.word	0x0801036c
 800cb40:	08010374 	.word	0x08010374
 800cb44:	08010370 	.word	0x08010370
 800cb48:	08010378 	.word	0x08010378
 800cb4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cb50:	429a      	cmp	r2, r3
 800cb52:	bfa8      	it	ge
 800cb54:	461a      	movge	r2, r3
 800cb56:	2a00      	cmp	r2, #0
 800cb58:	4691      	mov	r9, r2
 800cb5a:	dc37      	bgt.n	800cbcc <_printf_float+0x374>
 800cb5c:	f04f 0b00 	mov.w	fp, #0
 800cb60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cb64:	f104 021a 	add.w	r2, r4, #26
 800cb68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cb6a:	9305      	str	r3, [sp, #20]
 800cb6c:	eba3 0309 	sub.w	r3, r3, r9
 800cb70:	455b      	cmp	r3, fp
 800cb72:	dc33      	bgt.n	800cbdc <_printf_float+0x384>
 800cb74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	db3b      	blt.n	800cbf4 <_printf_float+0x39c>
 800cb7c:	6823      	ldr	r3, [r4, #0]
 800cb7e:	07da      	lsls	r2, r3, #31
 800cb80:	d438      	bmi.n	800cbf4 <_printf_float+0x39c>
 800cb82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb84:	9a05      	ldr	r2, [sp, #20]
 800cb86:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cb88:	1a9a      	subs	r2, r3, r2
 800cb8a:	eba3 0901 	sub.w	r9, r3, r1
 800cb8e:	4591      	cmp	r9, r2
 800cb90:	bfa8      	it	ge
 800cb92:	4691      	movge	r9, r2
 800cb94:	f1b9 0f00 	cmp.w	r9, #0
 800cb98:	dc35      	bgt.n	800cc06 <_printf_float+0x3ae>
 800cb9a:	f04f 0800 	mov.w	r8, #0
 800cb9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cba2:	f104 0a1a 	add.w	sl, r4, #26
 800cba6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cbaa:	1a9b      	subs	r3, r3, r2
 800cbac:	eba3 0309 	sub.w	r3, r3, r9
 800cbb0:	4543      	cmp	r3, r8
 800cbb2:	f77f af79 	ble.w	800caa8 <_printf_float+0x250>
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	4652      	mov	r2, sl
 800cbba:	4631      	mov	r1, r6
 800cbbc:	4628      	mov	r0, r5
 800cbbe:	47b8      	blx	r7
 800cbc0:	3001      	adds	r0, #1
 800cbc2:	f43f aeaa 	beq.w	800c91a <_printf_float+0xc2>
 800cbc6:	f108 0801 	add.w	r8, r8, #1
 800cbca:	e7ec      	b.n	800cba6 <_printf_float+0x34e>
 800cbcc:	4613      	mov	r3, r2
 800cbce:	4631      	mov	r1, r6
 800cbd0:	4642      	mov	r2, r8
 800cbd2:	4628      	mov	r0, r5
 800cbd4:	47b8      	blx	r7
 800cbd6:	3001      	adds	r0, #1
 800cbd8:	d1c0      	bne.n	800cb5c <_printf_float+0x304>
 800cbda:	e69e      	b.n	800c91a <_printf_float+0xc2>
 800cbdc:	2301      	movs	r3, #1
 800cbde:	4631      	mov	r1, r6
 800cbe0:	4628      	mov	r0, r5
 800cbe2:	9205      	str	r2, [sp, #20]
 800cbe4:	47b8      	blx	r7
 800cbe6:	3001      	adds	r0, #1
 800cbe8:	f43f ae97 	beq.w	800c91a <_printf_float+0xc2>
 800cbec:	9a05      	ldr	r2, [sp, #20]
 800cbee:	f10b 0b01 	add.w	fp, fp, #1
 800cbf2:	e7b9      	b.n	800cb68 <_printf_float+0x310>
 800cbf4:	ee18 3a10 	vmov	r3, s16
 800cbf8:	4652      	mov	r2, sl
 800cbfa:	4631      	mov	r1, r6
 800cbfc:	4628      	mov	r0, r5
 800cbfe:	47b8      	blx	r7
 800cc00:	3001      	adds	r0, #1
 800cc02:	d1be      	bne.n	800cb82 <_printf_float+0x32a>
 800cc04:	e689      	b.n	800c91a <_printf_float+0xc2>
 800cc06:	9a05      	ldr	r2, [sp, #20]
 800cc08:	464b      	mov	r3, r9
 800cc0a:	4442      	add	r2, r8
 800cc0c:	4631      	mov	r1, r6
 800cc0e:	4628      	mov	r0, r5
 800cc10:	47b8      	blx	r7
 800cc12:	3001      	adds	r0, #1
 800cc14:	d1c1      	bne.n	800cb9a <_printf_float+0x342>
 800cc16:	e680      	b.n	800c91a <_printf_float+0xc2>
 800cc18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc1a:	2a01      	cmp	r2, #1
 800cc1c:	dc01      	bgt.n	800cc22 <_printf_float+0x3ca>
 800cc1e:	07db      	lsls	r3, r3, #31
 800cc20:	d538      	bpl.n	800cc94 <_printf_float+0x43c>
 800cc22:	2301      	movs	r3, #1
 800cc24:	4642      	mov	r2, r8
 800cc26:	4631      	mov	r1, r6
 800cc28:	4628      	mov	r0, r5
 800cc2a:	47b8      	blx	r7
 800cc2c:	3001      	adds	r0, #1
 800cc2e:	f43f ae74 	beq.w	800c91a <_printf_float+0xc2>
 800cc32:	ee18 3a10 	vmov	r3, s16
 800cc36:	4652      	mov	r2, sl
 800cc38:	4631      	mov	r1, r6
 800cc3a:	4628      	mov	r0, r5
 800cc3c:	47b8      	blx	r7
 800cc3e:	3001      	adds	r0, #1
 800cc40:	f43f ae6b 	beq.w	800c91a <_printf_float+0xc2>
 800cc44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cc48:	2200      	movs	r2, #0
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	f7f3 ff3c 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc50:	b9d8      	cbnz	r0, 800cc8a <_printf_float+0x432>
 800cc52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc54:	f108 0201 	add.w	r2, r8, #1
 800cc58:	3b01      	subs	r3, #1
 800cc5a:	4631      	mov	r1, r6
 800cc5c:	4628      	mov	r0, r5
 800cc5e:	47b8      	blx	r7
 800cc60:	3001      	adds	r0, #1
 800cc62:	d10e      	bne.n	800cc82 <_printf_float+0x42a>
 800cc64:	e659      	b.n	800c91a <_printf_float+0xc2>
 800cc66:	2301      	movs	r3, #1
 800cc68:	4652      	mov	r2, sl
 800cc6a:	4631      	mov	r1, r6
 800cc6c:	4628      	mov	r0, r5
 800cc6e:	47b8      	blx	r7
 800cc70:	3001      	adds	r0, #1
 800cc72:	f43f ae52 	beq.w	800c91a <_printf_float+0xc2>
 800cc76:	f108 0801 	add.w	r8, r8, #1
 800cc7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc7c:	3b01      	subs	r3, #1
 800cc7e:	4543      	cmp	r3, r8
 800cc80:	dcf1      	bgt.n	800cc66 <_printf_float+0x40e>
 800cc82:	464b      	mov	r3, r9
 800cc84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cc88:	e6dc      	b.n	800ca44 <_printf_float+0x1ec>
 800cc8a:	f04f 0800 	mov.w	r8, #0
 800cc8e:	f104 0a1a 	add.w	sl, r4, #26
 800cc92:	e7f2      	b.n	800cc7a <_printf_float+0x422>
 800cc94:	2301      	movs	r3, #1
 800cc96:	4642      	mov	r2, r8
 800cc98:	e7df      	b.n	800cc5a <_printf_float+0x402>
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	464a      	mov	r2, r9
 800cc9e:	4631      	mov	r1, r6
 800cca0:	4628      	mov	r0, r5
 800cca2:	47b8      	blx	r7
 800cca4:	3001      	adds	r0, #1
 800cca6:	f43f ae38 	beq.w	800c91a <_printf_float+0xc2>
 800ccaa:	f108 0801 	add.w	r8, r8, #1
 800ccae:	68e3      	ldr	r3, [r4, #12]
 800ccb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ccb2:	1a5b      	subs	r3, r3, r1
 800ccb4:	4543      	cmp	r3, r8
 800ccb6:	dcf0      	bgt.n	800cc9a <_printf_float+0x442>
 800ccb8:	e6fa      	b.n	800cab0 <_printf_float+0x258>
 800ccba:	f04f 0800 	mov.w	r8, #0
 800ccbe:	f104 0919 	add.w	r9, r4, #25
 800ccc2:	e7f4      	b.n	800ccae <_printf_float+0x456>

0800ccc4 <_printf_common>:
 800ccc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccc8:	4616      	mov	r6, r2
 800ccca:	4699      	mov	r9, r3
 800cccc:	688a      	ldr	r2, [r1, #8]
 800ccce:	690b      	ldr	r3, [r1, #16]
 800ccd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ccd4:	4293      	cmp	r3, r2
 800ccd6:	bfb8      	it	lt
 800ccd8:	4613      	movlt	r3, r2
 800ccda:	6033      	str	r3, [r6, #0]
 800ccdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cce0:	4607      	mov	r7, r0
 800cce2:	460c      	mov	r4, r1
 800cce4:	b10a      	cbz	r2, 800ccea <_printf_common+0x26>
 800cce6:	3301      	adds	r3, #1
 800cce8:	6033      	str	r3, [r6, #0]
 800ccea:	6823      	ldr	r3, [r4, #0]
 800ccec:	0699      	lsls	r1, r3, #26
 800ccee:	bf42      	ittt	mi
 800ccf0:	6833      	ldrmi	r3, [r6, #0]
 800ccf2:	3302      	addmi	r3, #2
 800ccf4:	6033      	strmi	r3, [r6, #0]
 800ccf6:	6825      	ldr	r5, [r4, #0]
 800ccf8:	f015 0506 	ands.w	r5, r5, #6
 800ccfc:	d106      	bne.n	800cd0c <_printf_common+0x48>
 800ccfe:	f104 0a19 	add.w	sl, r4, #25
 800cd02:	68e3      	ldr	r3, [r4, #12]
 800cd04:	6832      	ldr	r2, [r6, #0]
 800cd06:	1a9b      	subs	r3, r3, r2
 800cd08:	42ab      	cmp	r3, r5
 800cd0a:	dc26      	bgt.n	800cd5a <_printf_common+0x96>
 800cd0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cd10:	1e13      	subs	r3, r2, #0
 800cd12:	6822      	ldr	r2, [r4, #0]
 800cd14:	bf18      	it	ne
 800cd16:	2301      	movne	r3, #1
 800cd18:	0692      	lsls	r2, r2, #26
 800cd1a:	d42b      	bmi.n	800cd74 <_printf_common+0xb0>
 800cd1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd20:	4649      	mov	r1, r9
 800cd22:	4638      	mov	r0, r7
 800cd24:	47c0      	blx	r8
 800cd26:	3001      	adds	r0, #1
 800cd28:	d01e      	beq.n	800cd68 <_printf_common+0xa4>
 800cd2a:	6823      	ldr	r3, [r4, #0]
 800cd2c:	68e5      	ldr	r5, [r4, #12]
 800cd2e:	6832      	ldr	r2, [r6, #0]
 800cd30:	f003 0306 	and.w	r3, r3, #6
 800cd34:	2b04      	cmp	r3, #4
 800cd36:	bf08      	it	eq
 800cd38:	1aad      	subeq	r5, r5, r2
 800cd3a:	68a3      	ldr	r3, [r4, #8]
 800cd3c:	6922      	ldr	r2, [r4, #16]
 800cd3e:	bf0c      	ite	eq
 800cd40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd44:	2500      	movne	r5, #0
 800cd46:	4293      	cmp	r3, r2
 800cd48:	bfc4      	itt	gt
 800cd4a:	1a9b      	subgt	r3, r3, r2
 800cd4c:	18ed      	addgt	r5, r5, r3
 800cd4e:	2600      	movs	r6, #0
 800cd50:	341a      	adds	r4, #26
 800cd52:	42b5      	cmp	r5, r6
 800cd54:	d11a      	bne.n	800cd8c <_printf_common+0xc8>
 800cd56:	2000      	movs	r0, #0
 800cd58:	e008      	b.n	800cd6c <_printf_common+0xa8>
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	4652      	mov	r2, sl
 800cd5e:	4649      	mov	r1, r9
 800cd60:	4638      	mov	r0, r7
 800cd62:	47c0      	blx	r8
 800cd64:	3001      	adds	r0, #1
 800cd66:	d103      	bne.n	800cd70 <_printf_common+0xac>
 800cd68:	f04f 30ff 	mov.w	r0, #4294967295
 800cd6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd70:	3501      	adds	r5, #1
 800cd72:	e7c6      	b.n	800cd02 <_printf_common+0x3e>
 800cd74:	18e1      	adds	r1, r4, r3
 800cd76:	1c5a      	adds	r2, r3, #1
 800cd78:	2030      	movs	r0, #48	; 0x30
 800cd7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cd7e:	4422      	add	r2, r4
 800cd80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cd84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cd88:	3302      	adds	r3, #2
 800cd8a:	e7c7      	b.n	800cd1c <_printf_common+0x58>
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	4622      	mov	r2, r4
 800cd90:	4649      	mov	r1, r9
 800cd92:	4638      	mov	r0, r7
 800cd94:	47c0      	blx	r8
 800cd96:	3001      	adds	r0, #1
 800cd98:	d0e6      	beq.n	800cd68 <_printf_common+0xa4>
 800cd9a:	3601      	adds	r6, #1
 800cd9c:	e7d9      	b.n	800cd52 <_printf_common+0x8e>
	...

0800cda0 <_printf_i>:
 800cda0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cda4:	7e0f      	ldrb	r7, [r1, #24]
 800cda6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cda8:	2f78      	cmp	r7, #120	; 0x78
 800cdaa:	4691      	mov	r9, r2
 800cdac:	4680      	mov	r8, r0
 800cdae:	460c      	mov	r4, r1
 800cdb0:	469a      	mov	sl, r3
 800cdb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cdb6:	d807      	bhi.n	800cdc8 <_printf_i+0x28>
 800cdb8:	2f62      	cmp	r7, #98	; 0x62
 800cdba:	d80a      	bhi.n	800cdd2 <_printf_i+0x32>
 800cdbc:	2f00      	cmp	r7, #0
 800cdbe:	f000 80d8 	beq.w	800cf72 <_printf_i+0x1d2>
 800cdc2:	2f58      	cmp	r7, #88	; 0x58
 800cdc4:	f000 80a3 	beq.w	800cf0e <_printf_i+0x16e>
 800cdc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cdcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cdd0:	e03a      	b.n	800ce48 <_printf_i+0xa8>
 800cdd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cdd6:	2b15      	cmp	r3, #21
 800cdd8:	d8f6      	bhi.n	800cdc8 <_printf_i+0x28>
 800cdda:	a101      	add	r1, pc, #4	; (adr r1, 800cde0 <_printf_i+0x40>)
 800cddc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cde0:	0800ce39 	.word	0x0800ce39
 800cde4:	0800ce4d 	.word	0x0800ce4d
 800cde8:	0800cdc9 	.word	0x0800cdc9
 800cdec:	0800cdc9 	.word	0x0800cdc9
 800cdf0:	0800cdc9 	.word	0x0800cdc9
 800cdf4:	0800cdc9 	.word	0x0800cdc9
 800cdf8:	0800ce4d 	.word	0x0800ce4d
 800cdfc:	0800cdc9 	.word	0x0800cdc9
 800ce00:	0800cdc9 	.word	0x0800cdc9
 800ce04:	0800cdc9 	.word	0x0800cdc9
 800ce08:	0800cdc9 	.word	0x0800cdc9
 800ce0c:	0800cf59 	.word	0x0800cf59
 800ce10:	0800ce7d 	.word	0x0800ce7d
 800ce14:	0800cf3b 	.word	0x0800cf3b
 800ce18:	0800cdc9 	.word	0x0800cdc9
 800ce1c:	0800cdc9 	.word	0x0800cdc9
 800ce20:	0800cf7b 	.word	0x0800cf7b
 800ce24:	0800cdc9 	.word	0x0800cdc9
 800ce28:	0800ce7d 	.word	0x0800ce7d
 800ce2c:	0800cdc9 	.word	0x0800cdc9
 800ce30:	0800cdc9 	.word	0x0800cdc9
 800ce34:	0800cf43 	.word	0x0800cf43
 800ce38:	682b      	ldr	r3, [r5, #0]
 800ce3a:	1d1a      	adds	r2, r3, #4
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	602a      	str	r2, [r5, #0]
 800ce40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce48:	2301      	movs	r3, #1
 800ce4a:	e0a3      	b.n	800cf94 <_printf_i+0x1f4>
 800ce4c:	6820      	ldr	r0, [r4, #0]
 800ce4e:	6829      	ldr	r1, [r5, #0]
 800ce50:	0606      	lsls	r6, r0, #24
 800ce52:	f101 0304 	add.w	r3, r1, #4
 800ce56:	d50a      	bpl.n	800ce6e <_printf_i+0xce>
 800ce58:	680e      	ldr	r6, [r1, #0]
 800ce5a:	602b      	str	r3, [r5, #0]
 800ce5c:	2e00      	cmp	r6, #0
 800ce5e:	da03      	bge.n	800ce68 <_printf_i+0xc8>
 800ce60:	232d      	movs	r3, #45	; 0x2d
 800ce62:	4276      	negs	r6, r6
 800ce64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce68:	485e      	ldr	r0, [pc, #376]	; (800cfe4 <_printf_i+0x244>)
 800ce6a:	230a      	movs	r3, #10
 800ce6c:	e019      	b.n	800cea2 <_printf_i+0x102>
 800ce6e:	680e      	ldr	r6, [r1, #0]
 800ce70:	602b      	str	r3, [r5, #0]
 800ce72:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ce76:	bf18      	it	ne
 800ce78:	b236      	sxthne	r6, r6
 800ce7a:	e7ef      	b.n	800ce5c <_printf_i+0xbc>
 800ce7c:	682b      	ldr	r3, [r5, #0]
 800ce7e:	6820      	ldr	r0, [r4, #0]
 800ce80:	1d19      	adds	r1, r3, #4
 800ce82:	6029      	str	r1, [r5, #0]
 800ce84:	0601      	lsls	r1, r0, #24
 800ce86:	d501      	bpl.n	800ce8c <_printf_i+0xec>
 800ce88:	681e      	ldr	r6, [r3, #0]
 800ce8a:	e002      	b.n	800ce92 <_printf_i+0xf2>
 800ce8c:	0646      	lsls	r6, r0, #25
 800ce8e:	d5fb      	bpl.n	800ce88 <_printf_i+0xe8>
 800ce90:	881e      	ldrh	r6, [r3, #0]
 800ce92:	4854      	ldr	r0, [pc, #336]	; (800cfe4 <_printf_i+0x244>)
 800ce94:	2f6f      	cmp	r7, #111	; 0x6f
 800ce96:	bf0c      	ite	eq
 800ce98:	2308      	moveq	r3, #8
 800ce9a:	230a      	movne	r3, #10
 800ce9c:	2100      	movs	r1, #0
 800ce9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cea2:	6865      	ldr	r5, [r4, #4]
 800cea4:	60a5      	str	r5, [r4, #8]
 800cea6:	2d00      	cmp	r5, #0
 800cea8:	bfa2      	ittt	ge
 800ceaa:	6821      	ldrge	r1, [r4, #0]
 800ceac:	f021 0104 	bicge.w	r1, r1, #4
 800ceb0:	6021      	strge	r1, [r4, #0]
 800ceb2:	b90e      	cbnz	r6, 800ceb8 <_printf_i+0x118>
 800ceb4:	2d00      	cmp	r5, #0
 800ceb6:	d04d      	beq.n	800cf54 <_printf_i+0x1b4>
 800ceb8:	4615      	mov	r5, r2
 800ceba:	fbb6 f1f3 	udiv	r1, r6, r3
 800cebe:	fb03 6711 	mls	r7, r3, r1, r6
 800cec2:	5dc7      	ldrb	r7, [r0, r7]
 800cec4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cec8:	4637      	mov	r7, r6
 800ceca:	42bb      	cmp	r3, r7
 800cecc:	460e      	mov	r6, r1
 800cece:	d9f4      	bls.n	800ceba <_printf_i+0x11a>
 800ced0:	2b08      	cmp	r3, #8
 800ced2:	d10b      	bne.n	800ceec <_printf_i+0x14c>
 800ced4:	6823      	ldr	r3, [r4, #0]
 800ced6:	07de      	lsls	r6, r3, #31
 800ced8:	d508      	bpl.n	800ceec <_printf_i+0x14c>
 800ceda:	6923      	ldr	r3, [r4, #16]
 800cedc:	6861      	ldr	r1, [r4, #4]
 800cede:	4299      	cmp	r1, r3
 800cee0:	bfde      	ittt	le
 800cee2:	2330      	movle	r3, #48	; 0x30
 800cee4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cee8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ceec:	1b52      	subs	r2, r2, r5
 800ceee:	6122      	str	r2, [r4, #16]
 800cef0:	f8cd a000 	str.w	sl, [sp]
 800cef4:	464b      	mov	r3, r9
 800cef6:	aa03      	add	r2, sp, #12
 800cef8:	4621      	mov	r1, r4
 800cefa:	4640      	mov	r0, r8
 800cefc:	f7ff fee2 	bl	800ccc4 <_printf_common>
 800cf00:	3001      	adds	r0, #1
 800cf02:	d14c      	bne.n	800cf9e <_printf_i+0x1fe>
 800cf04:	f04f 30ff 	mov.w	r0, #4294967295
 800cf08:	b004      	add	sp, #16
 800cf0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf0e:	4835      	ldr	r0, [pc, #212]	; (800cfe4 <_printf_i+0x244>)
 800cf10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cf14:	6829      	ldr	r1, [r5, #0]
 800cf16:	6823      	ldr	r3, [r4, #0]
 800cf18:	f851 6b04 	ldr.w	r6, [r1], #4
 800cf1c:	6029      	str	r1, [r5, #0]
 800cf1e:	061d      	lsls	r5, r3, #24
 800cf20:	d514      	bpl.n	800cf4c <_printf_i+0x1ac>
 800cf22:	07df      	lsls	r7, r3, #31
 800cf24:	bf44      	itt	mi
 800cf26:	f043 0320 	orrmi.w	r3, r3, #32
 800cf2a:	6023      	strmi	r3, [r4, #0]
 800cf2c:	b91e      	cbnz	r6, 800cf36 <_printf_i+0x196>
 800cf2e:	6823      	ldr	r3, [r4, #0]
 800cf30:	f023 0320 	bic.w	r3, r3, #32
 800cf34:	6023      	str	r3, [r4, #0]
 800cf36:	2310      	movs	r3, #16
 800cf38:	e7b0      	b.n	800ce9c <_printf_i+0xfc>
 800cf3a:	6823      	ldr	r3, [r4, #0]
 800cf3c:	f043 0320 	orr.w	r3, r3, #32
 800cf40:	6023      	str	r3, [r4, #0]
 800cf42:	2378      	movs	r3, #120	; 0x78
 800cf44:	4828      	ldr	r0, [pc, #160]	; (800cfe8 <_printf_i+0x248>)
 800cf46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cf4a:	e7e3      	b.n	800cf14 <_printf_i+0x174>
 800cf4c:	0659      	lsls	r1, r3, #25
 800cf4e:	bf48      	it	mi
 800cf50:	b2b6      	uxthmi	r6, r6
 800cf52:	e7e6      	b.n	800cf22 <_printf_i+0x182>
 800cf54:	4615      	mov	r5, r2
 800cf56:	e7bb      	b.n	800ced0 <_printf_i+0x130>
 800cf58:	682b      	ldr	r3, [r5, #0]
 800cf5a:	6826      	ldr	r6, [r4, #0]
 800cf5c:	6961      	ldr	r1, [r4, #20]
 800cf5e:	1d18      	adds	r0, r3, #4
 800cf60:	6028      	str	r0, [r5, #0]
 800cf62:	0635      	lsls	r5, r6, #24
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	d501      	bpl.n	800cf6c <_printf_i+0x1cc>
 800cf68:	6019      	str	r1, [r3, #0]
 800cf6a:	e002      	b.n	800cf72 <_printf_i+0x1d2>
 800cf6c:	0670      	lsls	r0, r6, #25
 800cf6e:	d5fb      	bpl.n	800cf68 <_printf_i+0x1c8>
 800cf70:	8019      	strh	r1, [r3, #0]
 800cf72:	2300      	movs	r3, #0
 800cf74:	6123      	str	r3, [r4, #16]
 800cf76:	4615      	mov	r5, r2
 800cf78:	e7ba      	b.n	800cef0 <_printf_i+0x150>
 800cf7a:	682b      	ldr	r3, [r5, #0]
 800cf7c:	1d1a      	adds	r2, r3, #4
 800cf7e:	602a      	str	r2, [r5, #0]
 800cf80:	681d      	ldr	r5, [r3, #0]
 800cf82:	6862      	ldr	r2, [r4, #4]
 800cf84:	2100      	movs	r1, #0
 800cf86:	4628      	mov	r0, r5
 800cf88:	f7f3 f92a 	bl	80001e0 <memchr>
 800cf8c:	b108      	cbz	r0, 800cf92 <_printf_i+0x1f2>
 800cf8e:	1b40      	subs	r0, r0, r5
 800cf90:	6060      	str	r0, [r4, #4]
 800cf92:	6863      	ldr	r3, [r4, #4]
 800cf94:	6123      	str	r3, [r4, #16]
 800cf96:	2300      	movs	r3, #0
 800cf98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf9c:	e7a8      	b.n	800cef0 <_printf_i+0x150>
 800cf9e:	6923      	ldr	r3, [r4, #16]
 800cfa0:	462a      	mov	r2, r5
 800cfa2:	4649      	mov	r1, r9
 800cfa4:	4640      	mov	r0, r8
 800cfa6:	47d0      	blx	sl
 800cfa8:	3001      	adds	r0, #1
 800cfaa:	d0ab      	beq.n	800cf04 <_printf_i+0x164>
 800cfac:	6823      	ldr	r3, [r4, #0]
 800cfae:	079b      	lsls	r3, r3, #30
 800cfb0:	d413      	bmi.n	800cfda <_printf_i+0x23a>
 800cfb2:	68e0      	ldr	r0, [r4, #12]
 800cfb4:	9b03      	ldr	r3, [sp, #12]
 800cfb6:	4298      	cmp	r0, r3
 800cfb8:	bfb8      	it	lt
 800cfba:	4618      	movlt	r0, r3
 800cfbc:	e7a4      	b.n	800cf08 <_printf_i+0x168>
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	4632      	mov	r2, r6
 800cfc2:	4649      	mov	r1, r9
 800cfc4:	4640      	mov	r0, r8
 800cfc6:	47d0      	blx	sl
 800cfc8:	3001      	adds	r0, #1
 800cfca:	d09b      	beq.n	800cf04 <_printf_i+0x164>
 800cfcc:	3501      	adds	r5, #1
 800cfce:	68e3      	ldr	r3, [r4, #12]
 800cfd0:	9903      	ldr	r1, [sp, #12]
 800cfd2:	1a5b      	subs	r3, r3, r1
 800cfd4:	42ab      	cmp	r3, r5
 800cfd6:	dcf2      	bgt.n	800cfbe <_printf_i+0x21e>
 800cfd8:	e7eb      	b.n	800cfb2 <_printf_i+0x212>
 800cfda:	2500      	movs	r5, #0
 800cfdc:	f104 0619 	add.w	r6, r4, #25
 800cfe0:	e7f5      	b.n	800cfce <_printf_i+0x22e>
 800cfe2:	bf00      	nop
 800cfe4:	0801037a 	.word	0x0801037a
 800cfe8:	0801038b 	.word	0x0801038b

0800cfec <iprintf>:
 800cfec:	b40f      	push	{r0, r1, r2, r3}
 800cfee:	4b0a      	ldr	r3, [pc, #40]	; (800d018 <iprintf+0x2c>)
 800cff0:	b513      	push	{r0, r1, r4, lr}
 800cff2:	681c      	ldr	r4, [r3, #0]
 800cff4:	b124      	cbz	r4, 800d000 <iprintf+0x14>
 800cff6:	69a3      	ldr	r3, [r4, #24]
 800cff8:	b913      	cbnz	r3, 800d000 <iprintf+0x14>
 800cffa:	4620      	mov	r0, r4
 800cffc:	f001 f8d8 	bl	800e1b0 <__sinit>
 800d000:	ab05      	add	r3, sp, #20
 800d002:	9a04      	ldr	r2, [sp, #16]
 800d004:	68a1      	ldr	r1, [r4, #8]
 800d006:	9301      	str	r3, [sp, #4]
 800d008:	4620      	mov	r0, r4
 800d00a:	f001 fe95 	bl	800ed38 <_vfiprintf_r>
 800d00e:	b002      	add	sp, #8
 800d010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d014:	b004      	add	sp, #16
 800d016:	4770      	bx	lr
 800d018:	20000010 	.word	0x20000010

0800d01c <_puts_r>:
 800d01c:	b570      	push	{r4, r5, r6, lr}
 800d01e:	460e      	mov	r6, r1
 800d020:	4605      	mov	r5, r0
 800d022:	b118      	cbz	r0, 800d02c <_puts_r+0x10>
 800d024:	6983      	ldr	r3, [r0, #24]
 800d026:	b90b      	cbnz	r3, 800d02c <_puts_r+0x10>
 800d028:	f001 f8c2 	bl	800e1b0 <__sinit>
 800d02c:	69ab      	ldr	r3, [r5, #24]
 800d02e:	68ac      	ldr	r4, [r5, #8]
 800d030:	b913      	cbnz	r3, 800d038 <_puts_r+0x1c>
 800d032:	4628      	mov	r0, r5
 800d034:	f001 f8bc 	bl	800e1b0 <__sinit>
 800d038:	4b2c      	ldr	r3, [pc, #176]	; (800d0ec <_puts_r+0xd0>)
 800d03a:	429c      	cmp	r4, r3
 800d03c:	d120      	bne.n	800d080 <_puts_r+0x64>
 800d03e:	686c      	ldr	r4, [r5, #4]
 800d040:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d042:	07db      	lsls	r3, r3, #31
 800d044:	d405      	bmi.n	800d052 <_puts_r+0x36>
 800d046:	89a3      	ldrh	r3, [r4, #12]
 800d048:	0598      	lsls	r0, r3, #22
 800d04a:	d402      	bmi.n	800d052 <_puts_r+0x36>
 800d04c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d04e:	f001 f952 	bl	800e2f6 <__retarget_lock_acquire_recursive>
 800d052:	89a3      	ldrh	r3, [r4, #12]
 800d054:	0719      	lsls	r1, r3, #28
 800d056:	d51d      	bpl.n	800d094 <_puts_r+0x78>
 800d058:	6923      	ldr	r3, [r4, #16]
 800d05a:	b1db      	cbz	r3, 800d094 <_puts_r+0x78>
 800d05c:	3e01      	subs	r6, #1
 800d05e:	68a3      	ldr	r3, [r4, #8]
 800d060:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d064:	3b01      	subs	r3, #1
 800d066:	60a3      	str	r3, [r4, #8]
 800d068:	bb39      	cbnz	r1, 800d0ba <_puts_r+0x9e>
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	da38      	bge.n	800d0e0 <_puts_r+0xc4>
 800d06e:	4622      	mov	r2, r4
 800d070:	210a      	movs	r1, #10
 800d072:	4628      	mov	r0, r5
 800d074:	f000 f848 	bl	800d108 <__swbuf_r>
 800d078:	3001      	adds	r0, #1
 800d07a:	d011      	beq.n	800d0a0 <_puts_r+0x84>
 800d07c:	250a      	movs	r5, #10
 800d07e:	e011      	b.n	800d0a4 <_puts_r+0x88>
 800d080:	4b1b      	ldr	r3, [pc, #108]	; (800d0f0 <_puts_r+0xd4>)
 800d082:	429c      	cmp	r4, r3
 800d084:	d101      	bne.n	800d08a <_puts_r+0x6e>
 800d086:	68ac      	ldr	r4, [r5, #8]
 800d088:	e7da      	b.n	800d040 <_puts_r+0x24>
 800d08a:	4b1a      	ldr	r3, [pc, #104]	; (800d0f4 <_puts_r+0xd8>)
 800d08c:	429c      	cmp	r4, r3
 800d08e:	bf08      	it	eq
 800d090:	68ec      	ldreq	r4, [r5, #12]
 800d092:	e7d5      	b.n	800d040 <_puts_r+0x24>
 800d094:	4621      	mov	r1, r4
 800d096:	4628      	mov	r0, r5
 800d098:	f000 f888 	bl	800d1ac <__swsetup_r>
 800d09c:	2800      	cmp	r0, #0
 800d09e:	d0dd      	beq.n	800d05c <_puts_r+0x40>
 800d0a0:	f04f 35ff 	mov.w	r5, #4294967295
 800d0a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d0a6:	07da      	lsls	r2, r3, #31
 800d0a8:	d405      	bmi.n	800d0b6 <_puts_r+0x9a>
 800d0aa:	89a3      	ldrh	r3, [r4, #12]
 800d0ac:	059b      	lsls	r3, r3, #22
 800d0ae:	d402      	bmi.n	800d0b6 <_puts_r+0x9a>
 800d0b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d0b2:	f001 f921 	bl	800e2f8 <__retarget_lock_release_recursive>
 800d0b6:	4628      	mov	r0, r5
 800d0b8:	bd70      	pop	{r4, r5, r6, pc}
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	da04      	bge.n	800d0c8 <_puts_r+0xac>
 800d0be:	69a2      	ldr	r2, [r4, #24]
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	dc06      	bgt.n	800d0d2 <_puts_r+0xb6>
 800d0c4:	290a      	cmp	r1, #10
 800d0c6:	d004      	beq.n	800d0d2 <_puts_r+0xb6>
 800d0c8:	6823      	ldr	r3, [r4, #0]
 800d0ca:	1c5a      	adds	r2, r3, #1
 800d0cc:	6022      	str	r2, [r4, #0]
 800d0ce:	7019      	strb	r1, [r3, #0]
 800d0d0:	e7c5      	b.n	800d05e <_puts_r+0x42>
 800d0d2:	4622      	mov	r2, r4
 800d0d4:	4628      	mov	r0, r5
 800d0d6:	f000 f817 	bl	800d108 <__swbuf_r>
 800d0da:	3001      	adds	r0, #1
 800d0dc:	d1bf      	bne.n	800d05e <_puts_r+0x42>
 800d0de:	e7df      	b.n	800d0a0 <_puts_r+0x84>
 800d0e0:	6823      	ldr	r3, [r4, #0]
 800d0e2:	250a      	movs	r5, #10
 800d0e4:	1c5a      	adds	r2, r3, #1
 800d0e6:	6022      	str	r2, [r4, #0]
 800d0e8:	701d      	strb	r5, [r3, #0]
 800d0ea:	e7db      	b.n	800d0a4 <_puts_r+0x88>
 800d0ec:	0801044c 	.word	0x0801044c
 800d0f0:	0801046c 	.word	0x0801046c
 800d0f4:	0801042c 	.word	0x0801042c

0800d0f8 <puts>:
 800d0f8:	4b02      	ldr	r3, [pc, #8]	; (800d104 <puts+0xc>)
 800d0fa:	4601      	mov	r1, r0
 800d0fc:	6818      	ldr	r0, [r3, #0]
 800d0fe:	f7ff bf8d 	b.w	800d01c <_puts_r>
 800d102:	bf00      	nop
 800d104:	20000010 	.word	0x20000010

0800d108 <__swbuf_r>:
 800d108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d10a:	460e      	mov	r6, r1
 800d10c:	4614      	mov	r4, r2
 800d10e:	4605      	mov	r5, r0
 800d110:	b118      	cbz	r0, 800d11a <__swbuf_r+0x12>
 800d112:	6983      	ldr	r3, [r0, #24]
 800d114:	b90b      	cbnz	r3, 800d11a <__swbuf_r+0x12>
 800d116:	f001 f84b 	bl	800e1b0 <__sinit>
 800d11a:	4b21      	ldr	r3, [pc, #132]	; (800d1a0 <__swbuf_r+0x98>)
 800d11c:	429c      	cmp	r4, r3
 800d11e:	d12b      	bne.n	800d178 <__swbuf_r+0x70>
 800d120:	686c      	ldr	r4, [r5, #4]
 800d122:	69a3      	ldr	r3, [r4, #24]
 800d124:	60a3      	str	r3, [r4, #8]
 800d126:	89a3      	ldrh	r3, [r4, #12]
 800d128:	071a      	lsls	r2, r3, #28
 800d12a:	d52f      	bpl.n	800d18c <__swbuf_r+0x84>
 800d12c:	6923      	ldr	r3, [r4, #16]
 800d12e:	b36b      	cbz	r3, 800d18c <__swbuf_r+0x84>
 800d130:	6923      	ldr	r3, [r4, #16]
 800d132:	6820      	ldr	r0, [r4, #0]
 800d134:	1ac0      	subs	r0, r0, r3
 800d136:	6963      	ldr	r3, [r4, #20]
 800d138:	b2f6      	uxtb	r6, r6
 800d13a:	4283      	cmp	r3, r0
 800d13c:	4637      	mov	r7, r6
 800d13e:	dc04      	bgt.n	800d14a <__swbuf_r+0x42>
 800d140:	4621      	mov	r1, r4
 800d142:	4628      	mov	r0, r5
 800d144:	f000 ffa0 	bl	800e088 <_fflush_r>
 800d148:	bb30      	cbnz	r0, 800d198 <__swbuf_r+0x90>
 800d14a:	68a3      	ldr	r3, [r4, #8]
 800d14c:	3b01      	subs	r3, #1
 800d14e:	60a3      	str	r3, [r4, #8]
 800d150:	6823      	ldr	r3, [r4, #0]
 800d152:	1c5a      	adds	r2, r3, #1
 800d154:	6022      	str	r2, [r4, #0]
 800d156:	701e      	strb	r6, [r3, #0]
 800d158:	6963      	ldr	r3, [r4, #20]
 800d15a:	3001      	adds	r0, #1
 800d15c:	4283      	cmp	r3, r0
 800d15e:	d004      	beq.n	800d16a <__swbuf_r+0x62>
 800d160:	89a3      	ldrh	r3, [r4, #12]
 800d162:	07db      	lsls	r3, r3, #31
 800d164:	d506      	bpl.n	800d174 <__swbuf_r+0x6c>
 800d166:	2e0a      	cmp	r6, #10
 800d168:	d104      	bne.n	800d174 <__swbuf_r+0x6c>
 800d16a:	4621      	mov	r1, r4
 800d16c:	4628      	mov	r0, r5
 800d16e:	f000 ff8b 	bl	800e088 <_fflush_r>
 800d172:	b988      	cbnz	r0, 800d198 <__swbuf_r+0x90>
 800d174:	4638      	mov	r0, r7
 800d176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d178:	4b0a      	ldr	r3, [pc, #40]	; (800d1a4 <__swbuf_r+0x9c>)
 800d17a:	429c      	cmp	r4, r3
 800d17c:	d101      	bne.n	800d182 <__swbuf_r+0x7a>
 800d17e:	68ac      	ldr	r4, [r5, #8]
 800d180:	e7cf      	b.n	800d122 <__swbuf_r+0x1a>
 800d182:	4b09      	ldr	r3, [pc, #36]	; (800d1a8 <__swbuf_r+0xa0>)
 800d184:	429c      	cmp	r4, r3
 800d186:	bf08      	it	eq
 800d188:	68ec      	ldreq	r4, [r5, #12]
 800d18a:	e7ca      	b.n	800d122 <__swbuf_r+0x1a>
 800d18c:	4621      	mov	r1, r4
 800d18e:	4628      	mov	r0, r5
 800d190:	f000 f80c 	bl	800d1ac <__swsetup_r>
 800d194:	2800      	cmp	r0, #0
 800d196:	d0cb      	beq.n	800d130 <__swbuf_r+0x28>
 800d198:	f04f 37ff 	mov.w	r7, #4294967295
 800d19c:	e7ea      	b.n	800d174 <__swbuf_r+0x6c>
 800d19e:	bf00      	nop
 800d1a0:	0801044c 	.word	0x0801044c
 800d1a4:	0801046c 	.word	0x0801046c
 800d1a8:	0801042c 	.word	0x0801042c

0800d1ac <__swsetup_r>:
 800d1ac:	4b32      	ldr	r3, [pc, #200]	; (800d278 <__swsetup_r+0xcc>)
 800d1ae:	b570      	push	{r4, r5, r6, lr}
 800d1b0:	681d      	ldr	r5, [r3, #0]
 800d1b2:	4606      	mov	r6, r0
 800d1b4:	460c      	mov	r4, r1
 800d1b6:	b125      	cbz	r5, 800d1c2 <__swsetup_r+0x16>
 800d1b8:	69ab      	ldr	r3, [r5, #24]
 800d1ba:	b913      	cbnz	r3, 800d1c2 <__swsetup_r+0x16>
 800d1bc:	4628      	mov	r0, r5
 800d1be:	f000 fff7 	bl	800e1b0 <__sinit>
 800d1c2:	4b2e      	ldr	r3, [pc, #184]	; (800d27c <__swsetup_r+0xd0>)
 800d1c4:	429c      	cmp	r4, r3
 800d1c6:	d10f      	bne.n	800d1e8 <__swsetup_r+0x3c>
 800d1c8:	686c      	ldr	r4, [r5, #4]
 800d1ca:	89a3      	ldrh	r3, [r4, #12]
 800d1cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d1d0:	0719      	lsls	r1, r3, #28
 800d1d2:	d42c      	bmi.n	800d22e <__swsetup_r+0x82>
 800d1d4:	06dd      	lsls	r5, r3, #27
 800d1d6:	d411      	bmi.n	800d1fc <__swsetup_r+0x50>
 800d1d8:	2309      	movs	r3, #9
 800d1da:	6033      	str	r3, [r6, #0]
 800d1dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d1e0:	81a3      	strh	r3, [r4, #12]
 800d1e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d1e6:	e03e      	b.n	800d266 <__swsetup_r+0xba>
 800d1e8:	4b25      	ldr	r3, [pc, #148]	; (800d280 <__swsetup_r+0xd4>)
 800d1ea:	429c      	cmp	r4, r3
 800d1ec:	d101      	bne.n	800d1f2 <__swsetup_r+0x46>
 800d1ee:	68ac      	ldr	r4, [r5, #8]
 800d1f0:	e7eb      	b.n	800d1ca <__swsetup_r+0x1e>
 800d1f2:	4b24      	ldr	r3, [pc, #144]	; (800d284 <__swsetup_r+0xd8>)
 800d1f4:	429c      	cmp	r4, r3
 800d1f6:	bf08      	it	eq
 800d1f8:	68ec      	ldreq	r4, [r5, #12]
 800d1fa:	e7e6      	b.n	800d1ca <__swsetup_r+0x1e>
 800d1fc:	0758      	lsls	r0, r3, #29
 800d1fe:	d512      	bpl.n	800d226 <__swsetup_r+0x7a>
 800d200:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d202:	b141      	cbz	r1, 800d216 <__swsetup_r+0x6a>
 800d204:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d208:	4299      	cmp	r1, r3
 800d20a:	d002      	beq.n	800d212 <__swsetup_r+0x66>
 800d20c:	4630      	mov	r0, r6
 800d20e:	f001 fc89 	bl	800eb24 <_free_r>
 800d212:	2300      	movs	r3, #0
 800d214:	6363      	str	r3, [r4, #52]	; 0x34
 800d216:	89a3      	ldrh	r3, [r4, #12]
 800d218:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d21c:	81a3      	strh	r3, [r4, #12]
 800d21e:	2300      	movs	r3, #0
 800d220:	6063      	str	r3, [r4, #4]
 800d222:	6923      	ldr	r3, [r4, #16]
 800d224:	6023      	str	r3, [r4, #0]
 800d226:	89a3      	ldrh	r3, [r4, #12]
 800d228:	f043 0308 	orr.w	r3, r3, #8
 800d22c:	81a3      	strh	r3, [r4, #12]
 800d22e:	6923      	ldr	r3, [r4, #16]
 800d230:	b94b      	cbnz	r3, 800d246 <__swsetup_r+0x9a>
 800d232:	89a3      	ldrh	r3, [r4, #12]
 800d234:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d23c:	d003      	beq.n	800d246 <__swsetup_r+0x9a>
 800d23e:	4621      	mov	r1, r4
 800d240:	4630      	mov	r0, r6
 800d242:	f001 f87f 	bl	800e344 <__smakebuf_r>
 800d246:	89a0      	ldrh	r0, [r4, #12]
 800d248:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d24c:	f010 0301 	ands.w	r3, r0, #1
 800d250:	d00a      	beq.n	800d268 <__swsetup_r+0xbc>
 800d252:	2300      	movs	r3, #0
 800d254:	60a3      	str	r3, [r4, #8]
 800d256:	6963      	ldr	r3, [r4, #20]
 800d258:	425b      	negs	r3, r3
 800d25a:	61a3      	str	r3, [r4, #24]
 800d25c:	6923      	ldr	r3, [r4, #16]
 800d25e:	b943      	cbnz	r3, 800d272 <__swsetup_r+0xc6>
 800d260:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d264:	d1ba      	bne.n	800d1dc <__swsetup_r+0x30>
 800d266:	bd70      	pop	{r4, r5, r6, pc}
 800d268:	0781      	lsls	r1, r0, #30
 800d26a:	bf58      	it	pl
 800d26c:	6963      	ldrpl	r3, [r4, #20]
 800d26e:	60a3      	str	r3, [r4, #8]
 800d270:	e7f4      	b.n	800d25c <__swsetup_r+0xb0>
 800d272:	2000      	movs	r0, #0
 800d274:	e7f7      	b.n	800d266 <__swsetup_r+0xba>
 800d276:	bf00      	nop
 800d278:	20000010 	.word	0x20000010
 800d27c:	0801044c 	.word	0x0801044c
 800d280:	0801046c 	.word	0x0801046c
 800d284:	0801042c 	.word	0x0801042c

0800d288 <quorem>:
 800d288:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d28c:	6903      	ldr	r3, [r0, #16]
 800d28e:	690c      	ldr	r4, [r1, #16]
 800d290:	42a3      	cmp	r3, r4
 800d292:	4607      	mov	r7, r0
 800d294:	f2c0 8081 	blt.w	800d39a <quorem+0x112>
 800d298:	3c01      	subs	r4, #1
 800d29a:	f101 0814 	add.w	r8, r1, #20
 800d29e:	f100 0514 	add.w	r5, r0, #20
 800d2a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d2a6:	9301      	str	r3, [sp, #4]
 800d2a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d2ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d2b0:	3301      	adds	r3, #1
 800d2b2:	429a      	cmp	r2, r3
 800d2b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d2b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d2bc:	fbb2 f6f3 	udiv	r6, r2, r3
 800d2c0:	d331      	bcc.n	800d326 <quorem+0x9e>
 800d2c2:	f04f 0e00 	mov.w	lr, #0
 800d2c6:	4640      	mov	r0, r8
 800d2c8:	46ac      	mov	ip, r5
 800d2ca:	46f2      	mov	sl, lr
 800d2cc:	f850 2b04 	ldr.w	r2, [r0], #4
 800d2d0:	b293      	uxth	r3, r2
 800d2d2:	fb06 e303 	mla	r3, r6, r3, lr
 800d2d6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d2da:	b29b      	uxth	r3, r3
 800d2dc:	ebaa 0303 	sub.w	r3, sl, r3
 800d2e0:	f8dc a000 	ldr.w	sl, [ip]
 800d2e4:	0c12      	lsrs	r2, r2, #16
 800d2e6:	fa13 f38a 	uxtah	r3, r3, sl
 800d2ea:	fb06 e202 	mla	r2, r6, r2, lr
 800d2ee:	9300      	str	r3, [sp, #0]
 800d2f0:	9b00      	ldr	r3, [sp, #0]
 800d2f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d2f6:	b292      	uxth	r2, r2
 800d2f8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d2fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d300:	f8bd 3000 	ldrh.w	r3, [sp]
 800d304:	4581      	cmp	r9, r0
 800d306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d30a:	f84c 3b04 	str.w	r3, [ip], #4
 800d30e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d312:	d2db      	bcs.n	800d2cc <quorem+0x44>
 800d314:	f855 300b 	ldr.w	r3, [r5, fp]
 800d318:	b92b      	cbnz	r3, 800d326 <quorem+0x9e>
 800d31a:	9b01      	ldr	r3, [sp, #4]
 800d31c:	3b04      	subs	r3, #4
 800d31e:	429d      	cmp	r5, r3
 800d320:	461a      	mov	r2, r3
 800d322:	d32e      	bcc.n	800d382 <quorem+0xfa>
 800d324:	613c      	str	r4, [r7, #16]
 800d326:	4638      	mov	r0, r7
 800d328:	f001 fae4 	bl	800e8f4 <__mcmp>
 800d32c:	2800      	cmp	r0, #0
 800d32e:	db24      	blt.n	800d37a <quorem+0xf2>
 800d330:	3601      	adds	r6, #1
 800d332:	4628      	mov	r0, r5
 800d334:	f04f 0c00 	mov.w	ip, #0
 800d338:	f858 2b04 	ldr.w	r2, [r8], #4
 800d33c:	f8d0 e000 	ldr.w	lr, [r0]
 800d340:	b293      	uxth	r3, r2
 800d342:	ebac 0303 	sub.w	r3, ip, r3
 800d346:	0c12      	lsrs	r2, r2, #16
 800d348:	fa13 f38e 	uxtah	r3, r3, lr
 800d34c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d350:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d354:	b29b      	uxth	r3, r3
 800d356:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d35a:	45c1      	cmp	r9, r8
 800d35c:	f840 3b04 	str.w	r3, [r0], #4
 800d360:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d364:	d2e8      	bcs.n	800d338 <quorem+0xb0>
 800d366:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d36a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d36e:	b922      	cbnz	r2, 800d37a <quorem+0xf2>
 800d370:	3b04      	subs	r3, #4
 800d372:	429d      	cmp	r5, r3
 800d374:	461a      	mov	r2, r3
 800d376:	d30a      	bcc.n	800d38e <quorem+0x106>
 800d378:	613c      	str	r4, [r7, #16]
 800d37a:	4630      	mov	r0, r6
 800d37c:	b003      	add	sp, #12
 800d37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d382:	6812      	ldr	r2, [r2, #0]
 800d384:	3b04      	subs	r3, #4
 800d386:	2a00      	cmp	r2, #0
 800d388:	d1cc      	bne.n	800d324 <quorem+0x9c>
 800d38a:	3c01      	subs	r4, #1
 800d38c:	e7c7      	b.n	800d31e <quorem+0x96>
 800d38e:	6812      	ldr	r2, [r2, #0]
 800d390:	3b04      	subs	r3, #4
 800d392:	2a00      	cmp	r2, #0
 800d394:	d1f0      	bne.n	800d378 <quorem+0xf0>
 800d396:	3c01      	subs	r4, #1
 800d398:	e7eb      	b.n	800d372 <quorem+0xea>
 800d39a:	2000      	movs	r0, #0
 800d39c:	e7ee      	b.n	800d37c <quorem+0xf4>
	...

0800d3a0 <_dtoa_r>:
 800d3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3a4:	ed2d 8b04 	vpush	{d8-d9}
 800d3a8:	ec57 6b10 	vmov	r6, r7, d0
 800d3ac:	b093      	sub	sp, #76	; 0x4c
 800d3ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d3b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d3b4:	9106      	str	r1, [sp, #24]
 800d3b6:	ee10 aa10 	vmov	sl, s0
 800d3ba:	4604      	mov	r4, r0
 800d3bc:	9209      	str	r2, [sp, #36]	; 0x24
 800d3be:	930c      	str	r3, [sp, #48]	; 0x30
 800d3c0:	46bb      	mov	fp, r7
 800d3c2:	b975      	cbnz	r5, 800d3e2 <_dtoa_r+0x42>
 800d3c4:	2010      	movs	r0, #16
 800d3c6:	f000 fffd 	bl	800e3c4 <malloc>
 800d3ca:	4602      	mov	r2, r0
 800d3cc:	6260      	str	r0, [r4, #36]	; 0x24
 800d3ce:	b920      	cbnz	r0, 800d3da <_dtoa_r+0x3a>
 800d3d0:	4ba7      	ldr	r3, [pc, #668]	; (800d670 <_dtoa_r+0x2d0>)
 800d3d2:	21ea      	movs	r1, #234	; 0xea
 800d3d4:	48a7      	ldr	r0, [pc, #668]	; (800d674 <_dtoa_r+0x2d4>)
 800d3d6:	f001 fe45 	bl	800f064 <__assert_func>
 800d3da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d3de:	6005      	str	r5, [r0, #0]
 800d3e0:	60c5      	str	r5, [r0, #12]
 800d3e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3e4:	6819      	ldr	r1, [r3, #0]
 800d3e6:	b151      	cbz	r1, 800d3fe <_dtoa_r+0x5e>
 800d3e8:	685a      	ldr	r2, [r3, #4]
 800d3ea:	604a      	str	r2, [r1, #4]
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	4093      	lsls	r3, r2
 800d3f0:	608b      	str	r3, [r1, #8]
 800d3f2:	4620      	mov	r0, r4
 800d3f4:	f001 f83c 	bl	800e470 <_Bfree>
 800d3f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	601a      	str	r2, [r3, #0]
 800d3fe:	1e3b      	subs	r3, r7, #0
 800d400:	bfaa      	itet	ge
 800d402:	2300      	movge	r3, #0
 800d404:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d408:	f8c8 3000 	strge.w	r3, [r8]
 800d40c:	4b9a      	ldr	r3, [pc, #616]	; (800d678 <_dtoa_r+0x2d8>)
 800d40e:	bfbc      	itt	lt
 800d410:	2201      	movlt	r2, #1
 800d412:	f8c8 2000 	strlt.w	r2, [r8]
 800d416:	ea33 030b 	bics.w	r3, r3, fp
 800d41a:	d11b      	bne.n	800d454 <_dtoa_r+0xb4>
 800d41c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d41e:	f242 730f 	movw	r3, #9999	; 0x270f
 800d422:	6013      	str	r3, [r2, #0]
 800d424:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d428:	4333      	orrs	r3, r6
 800d42a:	f000 8592 	beq.w	800df52 <_dtoa_r+0xbb2>
 800d42e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d430:	b963      	cbnz	r3, 800d44c <_dtoa_r+0xac>
 800d432:	4b92      	ldr	r3, [pc, #584]	; (800d67c <_dtoa_r+0x2dc>)
 800d434:	e022      	b.n	800d47c <_dtoa_r+0xdc>
 800d436:	4b92      	ldr	r3, [pc, #584]	; (800d680 <_dtoa_r+0x2e0>)
 800d438:	9301      	str	r3, [sp, #4]
 800d43a:	3308      	adds	r3, #8
 800d43c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d43e:	6013      	str	r3, [r2, #0]
 800d440:	9801      	ldr	r0, [sp, #4]
 800d442:	b013      	add	sp, #76	; 0x4c
 800d444:	ecbd 8b04 	vpop	{d8-d9}
 800d448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d44c:	4b8b      	ldr	r3, [pc, #556]	; (800d67c <_dtoa_r+0x2dc>)
 800d44e:	9301      	str	r3, [sp, #4]
 800d450:	3303      	adds	r3, #3
 800d452:	e7f3      	b.n	800d43c <_dtoa_r+0x9c>
 800d454:	2200      	movs	r2, #0
 800d456:	2300      	movs	r3, #0
 800d458:	4650      	mov	r0, sl
 800d45a:	4659      	mov	r1, fp
 800d45c:	f7f3 fb34 	bl	8000ac8 <__aeabi_dcmpeq>
 800d460:	ec4b ab19 	vmov	d9, sl, fp
 800d464:	4680      	mov	r8, r0
 800d466:	b158      	cbz	r0, 800d480 <_dtoa_r+0xe0>
 800d468:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d46a:	2301      	movs	r3, #1
 800d46c:	6013      	str	r3, [r2, #0]
 800d46e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d470:	2b00      	cmp	r3, #0
 800d472:	f000 856b 	beq.w	800df4c <_dtoa_r+0xbac>
 800d476:	4883      	ldr	r0, [pc, #524]	; (800d684 <_dtoa_r+0x2e4>)
 800d478:	6018      	str	r0, [r3, #0]
 800d47a:	1e43      	subs	r3, r0, #1
 800d47c:	9301      	str	r3, [sp, #4]
 800d47e:	e7df      	b.n	800d440 <_dtoa_r+0xa0>
 800d480:	ec4b ab10 	vmov	d0, sl, fp
 800d484:	aa10      	add	r2, sp, #64	; 0x40
 800d486:	a911      	add	r1, sp, #68	; 0x44
 800d488:	4620      	mov	r0, r4
 800d48a:	f001 fad9 	bl	800ea40 <__d2b>
 800d48e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d492:	ee08 0a10 	vmov	s16, r0
 800d496:	2d00      	cmp	r5, #0
 800d498:	f000 8084 	beq.w	800d5a4 <_dtoa_r+0x204>
 800d49c:	ee19 3a90 	vmov	r3, s19
 800d4a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d4a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d4a8:	4656      	mov	r6, sl
 800d4aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d4ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d4b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d4b6:	4b74      	ldr	r3, [pc, #464]	; (800d688 <_dtoa_r+0x2e8>)
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	4630      	mov	r0, r6
 800d4bc:	4639      	mov	r1, r7
 800d4be:	f7f2 fee3 	bl	8000288 <__aeabi_dsub>
 800d4c2:	a365      	add	r3, pc, #404	; (adr r3, 800d658 <_dtoa_r+0x2b8>)
 800d4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c8:	f7f3 f896 	bl	80005f8 <__aeabi_dmul>
 800d4cc:	a364      	add	r3, pc, #400	; (adr r3, 800d660 <_dtoa_r+0x2c0>)
 800d4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d2:	f7f2 fedb 	bl	800028c <__adddf3>
 800d4d6:	4606      	mov	r6, r0
 800d4d8:	4628      	mov	r0, r5
 800d4da:	460f      	mov	r7, r1
 800d4dc:	f7f3 f822 	bl	8000524 <__aeabi_i2d>
 800d4e0:	a361      	add	r3, pc, #388	; (adr r3, 800d668 <_dtoa_r+0x2c8>)
 800d4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4e6:	f7f3 f887 	bl	80005f8 <__aeabi_dmul>
 800d4ea:	4602      	mov	r2, r0
 800d4ec:	460b      	mov	r3, r1
 800d4ee:	4630      	mov	r0, r6
 800d4f0:	4639      	mov	r1, r7
 800d4f2:	f7f2 fecb 	bl	800028c <__adddf3>
 800d4f6:	4606      	mov	r6, r0
 800d4f8:	460f      	mov	r7, r1
 800d4fa:	f7f3 fb2d 	bl	8000b58 <__aeabi_d2iz>
 800d4fe:	2200      	movs	r2, #0
 800d500:	9000      	str	r0, [sp, #0]
 800d502:	2300      	movs	r3, #0
 800d504:	4630      	mov	r0, r6
 800d506:	4639      	mov	r1, r7
 800d508:	f7f3 fae8 	bl	8000adc <__aeabi_dcmplt>
 800d50c:	b150      	cbz	r0, 800d524 <_dtoa_r+0x184>
 800d50e:	9800      	ldr	r0, [sp, #0]
 800d510:	f7f3 f808 	bl	8000524 <__aeabi_i2d>
 800d514:	4632      	mov	r2, r6
 800d516:	463b      	mov	r3, r7
 800d518:	f7f3 fad6 	bl	8000ac8 <__aeabi_dcmpeq>
 800d51c:	b910      	cbnz	r0, 800d524 <_dtoa_r+0x184>
 800d51e:	9b00      	ldr	r3, [sp, #0]
 800d520:	3b01      	subs	r3, #1
 800d522:	9300      	str	r3, [sp, #0]
 800d524:	9b00      	ldr	r3, [sp, #0]
 800d526:	2b16      	cmp	r3, #22
 800d528:	d85a      	bhi.n	800d5e0 <_dtoa_r+0x240>
 800d52a:	9a00      	ldr	r2, [sp, #0]
 800d52c:	4b57      	ldr	r3, [pc, #348]	; (800d68c <_dtoa_r+0x2ec>)
 800d52e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d536:	ec51 0b19 	vmov	r0, r1, d9
 800d53a:	f7f3 facf 	bl	8000adc <__aeabi_dcmplt>
 800d53e:	2800      	cmp	r0, #0
 800d540:	d050      	beq.n	800d5e4 <_dtoa_r+0x244>
 800d542:	9b00      	ldr	r3, [sp, #0]
 800d544:	3b01      	subs	r3, #1
 800d546:	9300      	str	r3, [sp, #0]
 800d548:	2300      	movs	r3, #0
 800d54a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d54c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d54e:	1b5d      	subs	r5, r3, r5
 800d550:	1e6b      	subs	r3, r5, #1
 800d552:	9305      	str	r3, [sp, #20]
 800d554:	bf45      	ittet	mi
 800d556:	f1c5 0301 	rsbmi	r3, r5, #1
 800d55a:	9304      	strmi	r3, [sp, #16]
 800d55c:	2300      	movpl	r3, #0
 800d55e:	2300      	movmi	r3, #0
 800d560:	bf4c      	ite	mi
 800d562:	9305      	strmi	r3, [sp, #20]
 800d564:	9304      	strpl	r3, [sp, #16]
 800d566:	9b00      	ldr	r3, [sp, #0]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	db3d      	blt.n	800d5e8 <_dtoa_r+0x248>
 800d56c:	9b05      	ldr	r3, [sp, #20]
 800d56e:	9a00      	ldr	r2, [sp, #0]
 800d570:	920a      	str	r2, [sp, #40]	; 0x28
 800d572:	4413      	add	r3, r2
 800d574:	9305      	str	r3, [sp, #20]
 800d576:	2300      	movs	r3, #0
 800d578:	9307      	str	r3, [sp, #28]
 800d57a:	9b06      	ldr	r3, [sp, #24]
 800d57c:	2b09      	cmp	r3, #9
 800d57e:	f200 8089 	bhi.w	800d694 <_dtoa_r+0x2f4>
 800d582:	2b05      	cmp	r3, #5
 800d584:	bfc4      	itt	gt
 800d586:	3b04      	subgt	r3, #4
 800d588:	9306      	strgt	r3, [sp, #24]
 800d58a:	9b06      	ldr	r3, [sp, #24]
 800d58c:	f1a3 0302 	sub.w	r3, r3, #2
 800d590:	bfcc      	ite	gt
 800d592:	2500      	movgt	r5, #0
 800d594:	2501      	movle	r5, #1
 800d596:	2b03      	cmp	r3, #3
 800d598:	f200 8087 	bhi.w	800d6aa <_dtoa_r+0x30a>
 800d59c:	e8df f003 	tbb	[pc, r3]
 800d5a0:	59383a2d 	.word	0x59383a2d
 800d5a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d5a8:	441d      	add	r5, r3
 800d5aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d5ae:	2b20      	cmp	r3, #32
 800d5b0:	bfc1      	itttt	gt
 800d5b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d5b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d5ba:	fa0b f303 	lslgt.w	r3, fp, r3
 800d5be:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d5c2:	bfda      	itte	le
 800d5c4:	f1c3 0320 	rsble	r3, r3, #32
 800d5c8:	fa06 f003 	lslle.w	r0, r6, r3
 800d5cc:	4318      	orrgt	r0, r3
 800d5ce:	f7f2 ff99 	bl	8000504 <__aeabi_ui2d>
 800d5d2:	2301      	movs	r3, #1
 800d5d4:	4606      	mov	r6, r0
 800d5d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d5da:	3d01      	subs	r5, #1
 800d5dc:	930e      	str	r3, [sp, #56]	; 0x38
 800d5de:	e76a      	b.n	800d4b6 <_dtoa_r+0x116>
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	e7b2      	b.n	800d54a <_dtoa_r+0x1aa>
 800d5e4:	900b      	str	r0, [sp, #44]	; 0x2c
 800d5e6:	e7b1      	b.n	800d54c <_dtoa_r+0x1ac>
 800d5e8:	9b04      	ldr	r3, [sp, #16]
 800d5ea:	9a00      	ldr	r2, [sp, #0]
 800d5ec:	1a9b      	subs	r3, r3, r2
 800d5ee:	9304      	str	r3, [sp, #16]
 800d5f0:	4253      	negs	r3, r2
 800d5f2:	9307      	str	r3, [sp, #28]
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	930a      	str	r3, [sp, #40]	; 0x28
 800d5f8:	e7bf      	b.n	800d57a <_dtoa_r+0x1da>
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	9308      	str	r3, [sp, #32]
 800d5fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d600:	2b00      	cmp	r3, #0
 800d602:	dc55      	bgt.n	800d6b0 <_dtoa_r+0x310>
 800d604:	2301      	movs	r3, #1
 800d606:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d60a:	461a      	mov	r2, r3
 800d60c:	9209      	str	r2, [sp, #36]	; 0x24
 800d60e:	e00c      	b.n	800d62a <_dtoa_r+0x28a>
 800d610:	2301      	movs	r3, #1
 800d612:	e7f3      	b.n	800d5fc <_dtoa_r+0x25c>
 800d614:	2300      	movs	r3, #0
 800d616:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d618:	9308      	str	r3, [sp, #32]
 800d61a:	9b00      	ldr	r3, [sp, #0]
 800d61c:	4413      	add	r3, r2
 800d61e:	9302      	str	r3, [sp, #8]
 800d620:	3301      	adds	r3, #1
 800d622:	2b01      	cmp	r3, #1
 800d624:	9303      	str	r3, [sp, #12]
 800d626:	bfb8      	it	lt
 800d628:	2301      	movlt	r3, #1
 800d62a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d62c:	2200      	movs	r2, #0
 800d62e:	6042      	str	r2, [r0, #4]
 800d630:	2204      	movs	r2, #4
 800d632:	f102 0614 	add.w	r6, r2, #20
 800d636:	429e      	cmp	r6, r3
 800d638:	6841      	ldr	r1, [r0, #4]
 800d63a:	d93d      	bls.n	800d6b8 <_dtoa_r+0x318>
 800d63c:	4620      	mov	r0, r4
 800d63e:	f000 fed7 	bl	800e3f0 <_Balloc>
 800d642:	9001      	str	r0, [sp, #4]
 800d644:	2800      	cmp	r0, #0
 800d646:	d13b      	bne.n	800d6c0 <_dtoa_r+0x320>
 800d648:	4b11      	ldr	r3, [pc, #68]	; (800d690 <_dtoa_r+0x2f0>)
 800d64a:	4602      	mov	r2, r0
 800d64c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d650:	e6c0      	b.n	800d3d4 <_dtoa_r+0x34>
 800d652:	2301      	movs	r3, #1
 800d654:	e7df      	b.n	800d616 <_dtoa_r+0x276>
 800d656:	bf00      	nop
 800d658:	636f4361 	.word	0x636f4361
 800d65c:	3fd287a7 	.word	0x3fd287a7
 800d660:	8b60c8b3 	.word	0x8b60c8b3
 800d664:	3fc68a28 	.word	0x3fc68a28
 800d668:	509f79fb 	.word	0x509f79fb
 800d66c:	3fd34413 	.word	0x3fd34413
 800d670:	080103a9 	.word	0x080103a9
 800d674:	080103c0 	.word	0x080103c0
 800d678:	7ff00000 	.word	0x7ff00000
 800d67c:	080103a5 	.word	0x080103a5
 800d680:	0801039c 	.word	0x0801039c
 800d684:	08010379 	.word	0x08010379
 800d688:	3ff80000 	.word	0x3ff80000
 800d68c:	08010510 	.word	0x08010510
 800d690:	0801041b 	.word	0x0801041b
 800d694:	2501      	movs	r5, #1
 800d696:	2300      	movs	r3, #0
 800d698:	9306      	str	r3, [sp, #24]
 800d69a:	9508      	str	r5, [sp, #32]
 800d69c:	f04f 33ff 	mov.w	r3, #4294967295
 800d6a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	2312      	movs	r3, #18
 800d6a8:	e7b0      	b.n	800d60c <_dtoa_r+0x26c>
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	9308      	str	r3, [sp, #32]
 800d6ae:	e7f5      	b.n	800d69c <_dtoa_r+0x2fc>
 800d6b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d6b6:	e7b8      	b.n	800d62a <_dtoa_r+0x28a>
 800d6b8:	3101      	adds	r1, #1
 800d6ba:	6041      	str	r1, [r0, #4]
 800d6bc:	0052      	lsls	r2, r2, #1
 800d6be:	e7b8      	b.n	800d632 <_dtoa_r+0x292>
 800d6c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d6c2:	9a01      	ldr	r2, [sp, #4]
 800d6c4:	601a      	str	r2, [r3, #0]
 800d6c6:	9b03      	ldr	r3, [sp, #12]
 800d6c8:	2b0e      	cmp	r3, #14
 800d6ca:	f200 809d 	bhi.w	800d808 <_dtoa_r+0x468>
 800d6ce:	2d00      	cmp	r5, #0
 800d6d0:	f000 809a 	beq.w	800d808 <_dtoa_r+0x468>
 800d6d4:	9b00      	ldr	r3, [sp, #0]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	dd32      	ble.n	800d740 <_dtoa_r+0x3a0>
 800d6da:	4ab7      	ldr	r2, [pc, #732]	; (800d9b8 <_dtoa_r+0x618>)
 800d6dc:	f003 030f 	and.w	r3, r3, #15
 800d6e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d6e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d6e8:	9b00      	ldr	r3, [sp, #0]
 800d6ea:	05d8      	lsls	r0, r3, #23
 800d6ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d6f0:	d516      	bpl.n	800d720 <_dtoa_r+0x380>
 800d6f2:	4bb2      	ldr	r3, [pc, #712]	; (800d9bc <_dtoa_r+0x61c>)
 800d6f4:	ec51 0b19 	vmov	r0, r1, d9
 800d6f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d6fc:	f7f3 f8a6 	bl	800084c <__aeabi_ddiv>
 800d700:	f007 070f 	and.w	r7, r7, #15
 800d704:	4682      	mov	sl, r0
 800d706:	468b      	mov	fp, r1
 800d708:	2503      	movs	r5, #3
 800d70a:	4eac      	ldr	r6, [pc, #688]	; (800d9bc <_dtoa_r+0x61c>)
 800d70c:	b957      	cbnz	r7, 800d724 <_dtoa_r+0x384>
 800d70e:	4642      	mov	r2, r8
 800d710:	464b      	mov	r3, r9
 800d712:	4650      	mov	r0, sl
 800d714:	4659      	mov	r1, fp
 800d716:	f7f3 f899 	bl	800084c <__aeabi_ddiv>
 800d71a:	4682      	mov	sl, r0
 800d71c:	468b      	mov	fp, r1
 800d71e:	e028      	b.n	800d772 <_dtoa_r+0x3d2>
 800d720:	2502      	movs	r5, #2
 800d722:	e7f2      	b.n	800d70a <_dtoa_r+0x36a>
 800d724:	07f9      	lsls	r1, r7, #31
 800d726:	d508      	bpl.n	800d73a <_dtoa_r+0x39a>
 800d728:	4640      	mov	r0, r8
 800d72a:	4649      	mov	r1, r9
 800d72c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d730:	f7f2 ff62 	bl	80005f8 <__aeabi_dmul>
 800d734:	3501      	adds	r5, #1
 800d736:	4680      	mov	r8, r0
 800d738:	4689      	mov	r9, r1
 800d73a:	107f      	asrs	r7, r7, #1
 800d73c:	3608      	adds	r6, #8
 800d73e:	e7e5      	b.n	800d70c <_dtoa_r+0x36c>
 800d740:	f000 809b 	beq.w	800d87a <_dtoa_r+0x4da>
 800d744:	9b00      	ldr	r3, [sp, #0]
 800d746:	4f9d      	ldr	r7, [pc, #628]	; (800d9bc <_dtoa_r+0x61c>)
 800d748:	425e      	negs	r6, r3
 800d74a:	4b9b      	ldr	r3, [pc, #620]	; (800d9b8 <_dtoa_r+0x618>)
 800d74c:	f006 020f 	and.w	r2, r6, #15
 800d750:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d758:	ec51 0b19 	vmov	r0, r1, d9
 800d75c:	f7f2 ff4c 	bl	80005f8 <__aeabi_dmul>
 800d760:	1136      	asrs	r6, r6, #4
 800d762:	4682      	mov	sl, r0
 800d764:	468b      	mov	fp, r1
 800d766:	2300      	movs	r3, #0
 800d768:	2502      	movs	r5, #2
 800d76a:	2e00      	cmp	r6, #0
 800d76c:	d17a      	bne.n	800d864 <_dtoa_r+0x4c4>
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d1d3      	bne.n	800d71a <_dtoa_r+0x37a>
 800d772:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d774:	2b00      	cmp	r3, #0
 800d776:	f000 8082 	beq.w	800d87e <_dtoa_r+0x4de>
 800d77a:	4b91      	ldr	r3, [pc, #580]	; (800d9c0 <_dtoa_r+0x620>)
 800d77c:	2200      	movs	r2, #0
 800d77e:	4650      	mov	r0, sl
 800d780:	4659      	mov	r1, fp
 800d782:	f7f3 f9ab 	bl	8000adc <__aeabi_dcmplt>
 800d786:	2800      	cmp	r0, #0
 800d788:	d079      	beq.n	800d87e <_dtoa_r+0x4de>
 800d78a:	9b03      	ldr	r3, [sp, #12]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d076      	beq.n	800d87e <_dtoa_r+0x4de>
 800d790:	9b02      	ldr	r3, [sp, #8]
 800d792:	2b00      	cmp	r3, #0
 800d794:	dd36      	ble.n	800d804 <_dtoa_r+0x464>
 800d796:	9b00      	ldr	r3, [sp, #0]
 800d798:	4650      	mov	r0, sl
 800d79a:	4659      	mov	r1, fp
 800d79c:	1e5f      	subs	r7, r3, #1
 800d79e:	2200      	movs	r2, #0
 800d7a0:	4b88      	ldr	r3, [pc, #544]	; (800d9c4 <_dtoa_r+0x624>)
 800d7a2:	f7f2 ff29 	bl	80005f8 <__aeabi_dmul>
 800d7a6:	9e02      	ldr	r6, [sp, #8]
 800d7a8:	4682      	mov	sl, r0
 800d7aa:	468b      	mov	fp, r1
 800d7ac:	3501      	adds	r5, #1
 800d7ae:	4628      	mov	r0, r5
 800d7b0:	f7f2 feb8 	bl	8000524 <__aeabi_i2d>
 800d7b4:	4652      	mov	r2, sl
 800d7b6:	465b      	mov	r3, fp
 800d7b8:	f7f2 ff1e 	bl	80005f8 <__aeabi_dmul>
 800d7bc:	4b82      	ldr	r3, [pc, #520]	; (800d9c8 <_dtoa_r+0x628>)
 800d7be:	2200      	movs	r2, #0
 800d7c0:	f7f2 fd64 	bl	800028c <__adddf3>
 800d7c4:	46d0      	mov	r8, sl
 800d7c6:	46d9      	mov	r9, fp
 800d7c8:	4682      	mov	sl, r0
 800d7ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d7ce:	2e00      	cmp	r6, #0
 800d7d0:	d158      	bne.n	800d884 <_dtoa_r+0x4e4>
 800d7d2:	4b7e      	ldr	r3, [pc, #504]	; (800d9cc <_dtoa_r+0x62c>)
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	4640      	mov	r0, r8
 800d7d8:	4649      	mov	r1, r9
 800d7da:	f7f2 fd55 	bl	8000288 <__aeabi_dsub>
 800d7de:	4652      	mov	r2, sl
 800d7e0:	465b      	mov	r3, fp
 800d7e2:	4680      	mov	r8, r0
 800d7e4:	4689      	mov	r9, r1
 800d7e6:	f7f3 f997 	bl	8000b18 <__aeabi_dcmpgt>
 800d7ea:	2800      	cmp	r0, #0
 800d7ec:	f040 8295 	bne.w	800dd1a <_dtoa_r+0x97a>
 800d7f0:	4652      	mov	r2, sl
 800d7f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d7f6:	4640      	mov	r0, r8
 800d7f8:	4649      	mov	r1, r9
 800d7fa:	f7f3 f96f 	bl	8000adc <__aeabi_dcmplt>
 800d7fe:	2800      	cmp	r0, #0
 800d800:	f040 8289 	bne.w	800dd16 <_dtoa_r+0x976>
 800d804:	ec5b ab19 	vmov	sl, fp, d9
 800d808:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	f2c0 8148 	blt.w	800daa0 <_dtoa_r+0x700>
 800d810:	9a00      	ldr	r2, [sp, #0]
 800d812:	2a0e      	cmp	r2, #14
 800d814:	f300 8144 	bgt.w	800daa0 <_dtoa_r+0x700>
 800d818:	4b67      	ldr	r3, [pc, #412]	; (800d9b8 <_dtoa_r+0x618>)
 800d81a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d81e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d824:	2b00      	cmp	r3, #0
 800d826:	f280 80d5 	bge.w	800d9d4 <_dtoa_r+0x634>
 800d82a:	9b03      	ldr	r3, [sp, #12]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	f300 80d1 	bgt.w	800d9d4 <_dtoa_r+0x634>
 800d832:	f040 826f 	bne.w	800dd14 <_dtoa_r+0x974>
 800d836:	4b65      	ldr	r3, [pc, #404]	; (800d9cc <_dtoa_r+0x62c>)
 800d838:	2200      	movs	r2, #0
 800d83a:	4640      	mov	r0, r8
 800d83c:	4649      	mov	r1, r9
 800d83e:	f7f2 fedb 	bl	80005f8 <__aeabi_dmul>
 800d842:	4652      	mov	r2, sl
 800d844:	465b      	mov	r3, fp
 800d846:	f7f3 f95d 	bl	8000b04 <__aeabi_dcmpge>
 800d84a:	9e03      	ldr	r6, [sp, #12]
 800d84c:	4637      	mov	r7, r6
 800d84e:	2800      	cmp	r0, #0
 800d850:	f040 8245 	bne.w	800dcde <_dtoa_r+0x93e>
 800d854:	9d01      	ldr	r5, [sp, #4]
 800d856:	2331      	movs	r3, #49	; 0x31
 800d858:	f805 3b01 	strb.w	r3, [r5], #1
 800d85c:	9b00      	ldr	r3, [sp, #0]
 800d85e:	3301      	adds	r3, #1
 800d860:	9300      	str	r3, [sp, #0]
 800d862:	e240      	b.n	800dce6 <_dtoa_r+0x946>
 800d864:	07f2      	lsls	r2, r6, #31
 800d866:	d505      	bpl.n	800d874 <_dtoa_r+0x4d4>
 800d868:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d86c:	f7f2 fec4 	bl	80005f8 <__aeabi_dmul>
 800d870:	3501      	adds	r5, #1
 800d872:	2301      	movs	r3, #1
 800d874:	1076      	asrs	r6, r6, #1
 800d876:	3708      	adds	r7, #8
 800d878:	e777      	b.n	800d76a <_dtoa_r+0x3ca>
 800d87a:	2502      	movs	r5, #2
 800d87c:	e779      	b.n	800d772 <_dtoa_r+0x3d2>
 800d87e:	9f00      	ldr	r7, [sp, #0]
 800d880:	9e03      	ldr	r6, [sp, #12]
 800d882:	e794      	b.n	800d7ae <_dtoa_r+0x40e>
 800d884:	9901      	ldr	r1, [sp, #4]
 800d886:	4b4c      	ldr	r3, [pc, #304]	; (800d9b8 <_dtoa_r+0x618>)
 800d888:	4431      	add	r1, r6
 800d88a:	910d      	str	r1, [sp, #52]	; 0x34
 800d88c:	9908      	ldr	r1, [sp, #32]
 800d88e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d892:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d896:	2900      	cmp	r1, #0
 800d898:	d043      	beq.n	800d922 <_dtoa_r+0x582>
 800d89a:	494d      	ldr	r1, [pc, #308]	; (800d9d0 <_dtoa_r+0x630>)
 800d89c:	2000      	movs	r0, #0
 800d89e:	f7f2 ffd5 	bl	800084c <__aeabi_ddiv>
 800d8a2:	4652      	mov	r2, sl
 800d8a4:	465b      	mov	r3, fp
 800d8a6:	f7f2 fcef 	bl	8000288 <__aeabi_dsub>
 800d8aa:	9d01      	ldr	r5, [sp, #4]
 800d8ac:	4682      	mov	sl, r0
 800d8ae:	468b      	mov	fp, r1
 800d8b0:	4649      	mov	r1, r9
 800d8b2:	4640      	mov	r0, r8
 800d8b4:	f7f3 f950 	bl	8000b58 <__aeabi_d2iz>
 800d8b8:	4606      	mov	r6, r0
 800d8ba:	f7f2 fe33 	bl	8000524 <__aeabi_i2d>
 800d8be:	4602      	mov	r2, r0
 800d8c0:	460b      	mov	r3, r1
 800d8c2:	4640      	mov	r0, r8
 800d8c4:	4649      	mov	r1, r9
 800d8c6:	f7f2 fcdf 	bl	8000288 <__aeabi_dsub>
 800d8ca:	3630      	adds	r6, #48	; 0x30
 800d8cc:	f805 6b01 	strb.w	r6, [r5], #1
 800d8d0:	4652      	mov	r2, sl
 800d8d2:	465b      	mov	r3, fp
 800d8d4:	4680      	mov	r8, r0
 800d8d6:	4689      	mov	r9, r1
 800d8d8:	f7f3 f900 	bl	8000adc <__aeabi_dcmplt>
 800d8dc:	2800      	cmp	r0, #0
 800d8de:	d163      	bne.n	800d9a8 <_dtoa_r+0x608>
 800d8e0:	4642      	mov	r2, r8
 800d8e2:	464b      	mov	r3, r9
 800d8e4:	4936      	ldr	r1, [pc, #216]	; (800d9c0 <_dtoa_r+0x620>)
 800d8e6:	2000      	movs	r0, #0
 800d8e8:	f7f2 fcce 	bl	8000288 <__aeabi_dsub>
 800d8ec:	4652      	mov	r2, sl
 800d8ee:	465b      	mov	r3, fp
 800d8f0:	f7f3 f8f4 	bl	8000adc <__aeabi_dcmplt>
 800d8f4:	2800      	cmp	r0, #0
 800d8f6:	f040 80b5 	bne.w	800da64 <_dtoa_r+0x6c4>
 800d8fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d8fc:	429d      	cmp	r5, r3
 800d8fe:	d081      	beq.n	800d804 <_dtoa_r+0x464>
 800d900:	4b30      	ldr	r3, [pc, #192]	; (800d9c4 <_dtoa_r+0x624>)
 800d902:	2200      	movs	r2, #0
 800d904:	4650      	mov	r0, sl
 800d906:	4659      	mov	r1, fp
 800d908:	f7f2 fe76 	bl	80005f8 <__aeabi_dmul>
 800d90c:	4b2d      	ldr	r3, [pc, #180]	; (800d9c4 <_dtoa_r+0x624>)
 800d90e:	4682      	mov	sl, r0
 800d910:	468b      	mov	fp, r1
 800d912:	4640      	mov	r0, r8
 800d914:	4649      	mov	r1, r9
 800d916:	2200      	movs	r2, #0
 800d918:	f7f2 fe6e 	bl	80005f8 <__aeabi_dmul>
 800d91c:	4680      	mov	r8, r0
 800d91e:	4689      	mov	r9, r1
 800d920:	e7c6      	b.n	800d8b0 <_dtoa_r+0x510>
 800d922:	4650      	mov	r0, sl
 800d924:	4659      	mov	r1, fp
 800d926:	f7f2 fe67 	bl	80005f8 <__aeabi_dmul>
 800d92a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d92c:	9d01      	ldr	r5, [sp, #4]
 800d92e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d930:	4682      	mov	sl, r0
 800d932:	468b      	mov	fp, r1
 800d934:	4649      	mov	r1, r9
 800d936:	4640      	mov	r0, r8
 800d938:	f7f3 f90e 	bl	8000b58 <__aeabi_d2iz>
 800d93c:	4606      	mov	r6, r0
 800d93e:	f7f2 fdf1 	bl	8000524 <__aeabi_i2d>
 800d942:	3630      	adds	r6, #48	; 0x30
 800d944:	4602      	mov	r2, r0
 800d946:	460b      	mov	r3, r1
 800d948:	4640      	mov	r0, r8
 800d94a:	4649      	mov	r1, r9
 800d94c:	f7f2 fc9c 	bl	8000288 <__aeabi_dsub>
 800d950:	f805 6b01 	strb.w	r6, [r5], #1
 800d954:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d956:	429d      	cmp	r5, r3
 800d958:	4680      	mov	r8, r0
 800d95a:	4689      	mov	r9, r1
 800d95c:	f04f 0200 	mov.w	r2, #0
 800d960:	d124      	bne.n	800d9ac <_dtoa_r+0x60c>
 800d962:	4b1b      	ldr	r3, [pc, #108]	; (800d9d0 <_dtoa_r+0x630>)
 800d964:	4650      	mov	r0, sl
 800d966:	4659      	mov	r1, fp
 800d968:	f7f2 fc90 	bl	800028c <__adddf3>
 800d96c:	4602      	mov	r2, r0
 800d96e:	460b      	mov	r3, r1
 800d970:	4640      	mov	r0, r8
 800d972:	4649      	mov	r1, r9
 800d974:	f7f3 f8d0 	bl	8000b18 <__aeabi_dcmpgt>
 800d978:	2800      	cmp	r0, #0
 800d97a:	d173      	bne.n	800da64 <_dtoa_r+0x6c4>
 800d97c:	4652      	mov	r2, sl
 800d97e:	465b      	mov	r3, fp
 800d980:	4913      	ldr	r1, [pc, #76]	; (800d9d0 <_dtoa_r+0x630>)
 800d982:	2000      	movs	r0, #0
 800d984:	f7f2 fc80 	bl	8000288 <__aeabi_dsub>
 800d988:	4602      	mov	r2, r0
 800d98a:	460b      	mov	r3, r1
 800d98c:	4640      	mov	r0, r8
 800d98e:	4649      	mov	r1, r9
 800d990:	f7f3 f8a4 	bl	8000adc <__aeabi_dcmplt>
 800d994:	2800      	cmp	r0, #0
 800d996:	f43f af35 	beq.w	800d804 <_dtoa_r+0x464>
 800d99a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d99c:	1e6b      	subs	r3, r5, #1
 800d99e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d9a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d9a4:	2b30      	cmp	r3, #48	; 0x30
 800d9a6:	d0f8      	beq.n	800d99a <_dtoa_r+0x5fa>
 800d9a8:	9700      	str	r7, [sp, #0]
 800d9aa:	e049      	b.n	800da40 <_dtoa_r+0x6a0>
 800d9ac:	4b05      	ldr	r3, [pc, #20]	; (800d9c4 <_dtoa_r+0x624>)
 800d9ae:	f7f2 fe23 	bl	80005f8 <__aeabi_dmul>
 800d9b2:	4680      	mov	r8, r0
 800d9b4:	4689      	mov	r9, r1
 800d9b6:	e7bd      	b.n	800d934 <_dtoa_r+0x594>
 800d9b8:	08010510 	.word	0x08010510
 800d9bc:	080104e8 	.word	0x080104e8
 800d9c0:	3ff00000 	.word	0x3ff00000
 800d9c4:	40240000 	.word	0x40240000
 800d9c8:	401c0000 	.word	0x401c0000
 800d9cc:	40140000 	.word	0x40140000
 800d9d0:	3fe00000 	.word	0x3fe00000
 800d9d4:	9d01      	ldr	r5, [sp, #4]
 800d9d6:	4656      	mov	r6, sl
 800d9d8:	465f      	mov	r7, fp
 800d9da:	4642      	mov	r2, r8
 800d9dc:	464b      	mov	r3, r9
 800d9de:	4630      	mov	r0, r6
 800d9e0:	4639      	mov	r1, r7
 800d9e2:	f7f2 ff33 	bl	800084c <__aeabi_ddiv>
 800d9e6:	f7f3 f8b7 	bl	8000b58 <__aeabi_d2iz>
 800d9ea:	4682      	mov	sl, r0
 800d9ec:	f7f2 fd9a 	bl	8000524 <__aeabi_i2d>
 800d9f0:	4642      	mov	r2, r8
 800d9f2:	464b      	mov	r3, r9
 800d9f4:	f7f2 fe00 	bl	80005f8 <__aeabi_dmul>
 800d9f8:	4602      	mov	r2, r0
 800d9fa:	460b      	mov	r3, r1
 800d9fc:	4630      	mov	r0, r6
 800d9fe:	4639      	mov	r1, r7
 800da00:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800da04:	f7f2 fc40 	bl	8000288 <__aeabi_dsub>
 800da08:	f805 6b01 	strb.w	r6, [r5], #1
 800da0c:	9e01      	ldr	r6, [sp, #4]
 800da0e:	9f03      	ldr	r7, [sp, #12]
 800da10:	1bae      	subs	r6, r5, r6
 800da12:	42b7      	cmp	r7, r6
 800da14:	4602      	mov	r2, r0
 800da16:	460b      	mov	r3, r1
 800da18:	d135      	bne.n	800da86 <_dtoa_r+0x6e6>
 800da1a:	f7f2 fc37 	bl	800028c <__adddf3>
 800da1e:	4642      	mov	r2, r8
 800da20:	464b      	mov	r3, r9
 800da22:	4606      	mov	r6, r0
 800da24:	460f      	mov	r7, r1
 800da26:	f7f3 f877 	bl	8000b18 <__aeabi_dcmpgt>
 800da2a:	b9d0      	cbnz	r0, 800da62 <_dtoa_r+0x6c2>
 800da2c:	4642      	mov	r2, r8
 800da2e:	464b      	mov	r3, r9
 800da30:	4630      	mov	r0, r6
 800da32:	4639      	mov	r1, r7
 800da34:	f7f3 f848 	bl	8000ac8 <__aeabi_dcmpeq>
 800da38:	b110      	cbz	r0, 800da40 <_dtoa_r+0x6a0>
 800da3a:	f01a 0f01 	tst.w	sl, #1
 800da3e:	d110      	bne.n	800da62 <_dtoa_r+0x6c2>
 800da40:	4620      	mov	r0, r4
 800da42:	ee18 1a10 	vmov	r1, s16
 800da46:	f000 fd13 	bl	800e470 <_Bfree>
 800da4a:	2300      	movs	r3, #0
 800da4c:	9800      	ldr	r0, [sp, #0]
 800da4e:	702b      	strb	r3, [r5, #0]
 800da50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da52:	3001      	adds	r0, #1
 800da54:	6018      	str	r0, [r3, #0]
 800da56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800da58:	2b00      	cmp	r3, #0
 800da5a:	f43f acf1 	beq.w	800d440 <_dtoa_r+0xa0>
 800da5e:	601d      	str	r5, [r3, #0]
 800da60:	e4ee      	b.n	800d440 <_dtoa_r+0xa0>
 800da62:	9f00      	ldr	r7, [sp, #0]
 800da64:	462b      	mov	r3, r5
 800da66:	461d      	mov	r5, r3
 800da68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800da6c:	2a39      	cmp	r2, #57	; 0x39
 800da6e:	d106      	bne.n	800da7e <_dtoa_r+0x6de>
 800da70:	9a01      	ldr	r2, [sp, #4]
 800da72:	429a      	cmp	r2, r3
 800da74:	d1f7      	bne.n	800da66 <_dtoa_r+0x6c6>
 800da76:	9901      	ldr	r1, [sp, #4]
 800da78:	2230      	movs	r2, #48	; 0x30
 800da7a:	3701      	adds	r7, #1
 800da7c:	700a      	strb	r2, [r1, #0]
 800da7e:	781a      	ldrb	r2, [r3, #0]
 800da80:	3201      	adds	r2, #1
 800da82:	701a      	strb	r2, [r3, #0]
 800da84:	e790      	b.n	800d9a8 <_dtoa_r+0x608>
 800da86:	4ba6      	ldr	r3, [pc, #664]	; (800dd20 <_dtoa_r+0x980>)
 800da88:	2200      	movs	r2, #0
 800da8a:	f7f2 fdb5 	bl	80005f8 <__aeabi_dmul>
 800da8e:	2200      	movs	r2, #0
 800da90:	2300      	movs	r3, #0
 800da92:	4606      	mov	r6, r0
 800da94:	460f      	mov	r7, r1
 800da96:	f7f3 f817 	bl	8000ac8 <__aeabi_dcmpeq>
 800da9a:	2800      	cmp	r0, #0
 800da9c:	d09d      	beq.n	800d9da <_dtoa_r+0x63a>
 800da9e:	e7cf      	b.n	800da40 <_dtoa_r+0x6a0>
 800daa0:	9a08      	ldr	r2, [sp, #32]
 800daa2:	2a00      	cmp	r2, #0
 800daa4:	f000 80d7 	beq.w	800dc56 <_dtoa_r+0x8b6>
 800daa8:	9a06      	ldr	r2, [sp, #24]
 800daaa:	2a01      	cmp	r2, #1
 800daac:	f300 80ba 	bgt.w	800dc24 <_dtoa_r+0x884>
 800dab0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dab2:	2a00      	cmp	r2, #0
 800dab4:	f000 80b2 	beq.w	800dc1c <_dtoa_r+0x87c>
 800dab8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dabc:	9e07      	ldr	r6, [sp, #28]
 800dabe:	9d04      	ldr	r5, [sp, #16]
 800dac0:	9a04      	ldr	r2, [sp, #16]
 800dac2:	441a      	add	r2, r3
 800dac4:	9204      	str	r2, [sp, #16]
 800dac6:	9a05      	ldr	r2, [sp, #20]
 800dac8:	2101      	movs	r1, #1
 800daca:	441a      	add	r2, r3
 800dacc:	4620      	mov	r0, r4
 800dace:	9205      	str	r2, [sp, #20]
 800dad0:	f000 fd86 	bl	800e5e0 <__i2b>
 800dad4:	4607      	mov	r7, r0
 800dad6:	2d00      	cmp	r5, #0
 800dad8:	dd0c      	ble.n	800daf4 <_dtoa_r+0x754>
 800dada:	9b05      	ldr	r3, [sp, #20]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	dd09      	ble.n	800daf4 <_dtoa_r+0x754>
 800dae0:	42ab      	cmp	r3, r5
 800dae2:	9a04      	ldr	r2, [sp, #16]
 800dae4:	bfa8      	it	ge
 800dae6:	462b      	movge	r3, r5
 800dae8:	1ad2      	subs	r2, r2, r3
 800daea:	9204      	str	r2, [sp, #16]
 800daec:	9a05      	ldr	r2, [sp, #20]
 800daee:	1aed      	subs	r5, r5, r3
 800daf0:	1ad3      	subs	r3, r2, r3
 800daf2:	9305      	str	r3, [sp, #20]
 800daf4:	9b07      	ldr	r3, [sp, #28]
 800daf6:	b31b      	cbz	r3, 800db40 <_dtoa_r+0x7a0>
 800daf8:	9b08      	ldr	r3, [sp, #32]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	f000 80af 	beq.w	800dc5e <_dtoa_r+0x8be>
 800db00:	2e00      	cmp	r6, #0
 800db02:	dd13      	ble.n	800db2c <_dtoa_r+0x78c>
 800db04:	4639      	mov	r1, r7
 800db06:	4632      	mov	r2, r6
 800db08:	4620      	mov	r0, r4
 800db0a:	f000 fe29 	bl	800e760 <__pow5mult>
 800db0e:	ee18 2a10 	vmov	r2, s16
 800db12:	4601      	mov	r1, r0
 800db14:	4607      	mov	r7, r0
 800db16:	4620      	mov	r0, r4
 800db18:	f000 fd78 	bl	800e60c <__multiply>
 800db1c:	ee18 1a10 	vmov	r1, s16
 800db20:	4680      	mov	r8, r0
 800db22:	4620      	mov	r0, r4
 800db24:	f000 fca4 	bl	800e470 <_Bfree>
 800db28:	ee08 8a10 	vmov	s16, r8
 800db2c:	9b07      	ldr	r3, [sp, #28]
 800db2e:	1b9a      	subs	r2, r3, r6
 800db30:	d006      	beq.n	800db40 <_dtoa_r+0x7a0>
 800db32:	ee18 1a10 	vmov	r1, s16
 800db36:	4620      	mov	r0, r4
 800db38:	f000 fe12 	bl	800e760 <__pow5mult>
 800db3c:	ee08 0a10 	vmov	s16, r0
 800db40:	2101      	movs	r1, #1
 800db42:	4620      	mov	r0, r4
 800db44:	f000 fd4c 	bl	800e5e0 <__i2b>
 800db48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	4606      	mov	r6, r0
 800db4e:	f340 8088 	ble.w	800dc62 <_dtoa_r+0x8c2>
 800db52:	461a      	mov	r2, r3
 800db54:	4601      	mov	r1, r0
 800db56:	4620      	mov	r0, r4
 800db58:	f000 fe02 	bl	800e760 <__pow5mult>
 800db5c:	9b06      	ldr	r3, [sp, #24]
 800db5e:	2b01      	cmp	r3, #1
 800db60:	4606      	mov	r6, r0
 800db62:	f340 8081 	ble.w	800dc68 <_dtoa_r+0x8c8>
 800db66:	f04f 0800 	mov.w	r8, #0
 800db6a:	6933      	ldr	r3, [r6, #16]
 800db6c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800db70:	6918      	ldr	r0, [r3, #16]
 800db72:	f000 fce5 	bl	800e540 <__hi0bits>
 800db76:	f1c0 0020 	rsb	r0, r0, #32
 800db7a:	9b05      	ldr	r3, [sp, #20]
 800db7c:	4418      	add	r0, r3
 800db7e:	f010 001f 	ands.w	r0, r0, #31
 800db82:	f000 8092 	beq.w	800dcaa <_dtoa_r+0x90a>
 800db86:	f1c0 0320 	rsb	r3, r0, #32
 800db8a:	2b04      	cmp	r3, #4
 800db8c:	f340 808a 	ble.w	800dca4 <_dtoa_r+0x904>
 800db90:	f1c0 001c 	rsb	r0, r0, #28
 800db94:	9b04      	ldr	r3, [sp, #16]
 800db96:	4403      	add	r3, r0
 800db98:	9304      	str	r3, [sp, #16]
 800db9a:	9b05      	ldr	r3, [sp, #20]
 800db9c:	4403      	add	r3, r0
 800db9e:	4405      	add	r5, r0
 800dba0:	9305      	str	r3, [sp, #20]
 800dba2:	9b04      	ldr	r3, [sp, #16]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	dd07      	ble.n	800dbb8 <_dtoa_r+0x818>
 800dba8:	ee18 1a10 	vmov	r1, s16
 800dbac:	461a      	mov	r2, r3
 800dbae:	4620      	mov	r0, r4
 800dbb0:	f000 fe30 	bl	800e814 <__lshift>
 800dbb4:	ee08 0a10 	vmov	s16, r0
 800dbb8:	9b05      	ldr	r3, [sp, #20]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	dd05      	ble.n	800dbca <_dtoa_r+0x82a>
 800dbbe:	4631      	mov	r1, r6
 800dbc0:	461a      	mov	r2, r3
 800dbc2:	4620      	mov	r0, r4
 800dbc4:	f000 fe26 	bl	800e814 <__lshift>
 800dbc8:	4606      	mov	r6, r0
 800dbca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d06e      	beq.n	800dcae <_dtoa_r+0x90e>
 800dbd0:	ee18 0a10 	vmov	r0, s16
 800dbd4:	4631      	mov	r1, r6
 800dbd6:	f000 fe8d 	bl	800e8f4 <__mcmp>
 800dbda:	2800      	cmp	r0, #0
 800dbdc:	da67      	bge.n	800dcae <_dtoa_r+0x90e>
 800dbde:	9b00      	ldr	r3, [sp, #0]
 800dbe0:	3b01      	subs	r3, #1
 800dbe2:	ee18 1a10 	vmov	r1, s16
 800dbe6:	9300      	str	r3, [sp, #0]
 800dbe8:	220a      	movs	r2, #10
 800dbea:	2300      	movs	r3, #0
 800dbec:	4620      	mov	r0, r4
 800dbee:	f000 fc61 	bl	800e4b4 <__multadd>
 800dbf2:	9b08      	ldr	r3, [sp, #32]
 800dbf4:	ee08 0a10 	vmov	s16, r0
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	f000 81b1 	beq.w	800df60 <_dtoa_r+0xbc0>
 800dbfe:	2300      	movs	r3, #0
 800dc00:	4639      	mov	r1, r7
 800dc02:	220a      	movs	r2, #10
 800dc04:	4620      	mov	r0, r4
 800dc06:	f000 fc55 	bl	800e4b4 <__multadd>
 800dc0a:	9b02      	ldr	r3, [sp, #8]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	4607      	mov	r7, r0
 800dc10:	f300 808e 	bgt.w	800dd30 <_dtoa_r+0x990>
 800dc14:	9b06      	ldr	r3, [sp, #24]
 800dc16:	2b02      	cmp	r3, #2
 800dc18:	dc51      	bgt.n	800dcbe <_dtoa_r+0x91e>
 800dc1a:	e089      	b.n	800dd30 <_dtoa_r+0x990>
 800dc1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dc22:	e74b      	b.n	800dabc <_dtoa_r+0x71c>
 800dc24:	9b03      	ldr	r3, [sp, #12]
 800dc26:	1e5e      	subs	r6, r3, #1
 800dc28:	9b07      	ldr	r3, [sp, #28]
 800dc2a:	42b3      	cmp	r3, r6
 800dc2c:	bfbf      	itttt	lt
 800dc2e:	9b07      	ldrlt	r3, [sp, #28]
 800dc30:	9607      	strlt	r6, [sp, #28]
 800dc32:	1af2      	sublt	r2, r6, r3
 800dc34:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800dc36:	bfb6      	itet	lt
 800dc38:	189b      	addlt	r3, r3, r2
 800dc3a:	1b9e      	subge	r6, r3, r6
 800dc3c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800dc3e:	9b03      	ldr	r3, [sp, #12]
 800dc40:	bfb8      	it	lt
 800dc42:	2600      	movlt	r6, #0
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	bfb7      	itett	lt
 800dc48:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800dc4c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800dc50:	1a9d      	sublt	r5, r3, r2
 800dc52:	2300      	movlt	r3, #0
 800dc54:	e734      	b.n	800dac0 <_dtoa_r+0x720>
 800dc56:	9e07      	ldr	r6, [sp, #28]
 800dc58:	9d04      	ldr	r5, [sp, #16]
 800dc5a:	9f08      	ldr	r7, [sp, #32]
 800dc5c:	e73b      	b.n	800dad6 <_dtoa_r+0x736>
 800dc5e:	9a07      	ldr	r2, [sp, #28]
 800dc60:	e767      	b.n	800db32 <_dtoa_r+0x792>
 800dc62:	9b06      	ldr	r3, [sp, #24]
 800dc64:	2b01      	cmp	r3, #1
 800dc66:	dc18      	bgt.n	800dc9a <_dtoa_r+0x8fa>
 800dc68:	f1ba 0f00 	cmp.w	sl, #0
 800dc6c:	d115      	bne.n	800dc9a <_dtoa_r+0x8fa>
 800dc6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dc72:	b993      	cbnz	r3, 800dc9a <_dtoa_r+0x8fa>
 800dc74:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dc78:	0d1b      	lsrs	r3, r3, #20
 800dc7a:	051b      	lsls	r3, r3, #20
 800dc7c:	b183      	cbz	r3, 800dca0 <_dtoa_r+0x900>
 800dc7e:	9b04      	ldr	r3, [sp, #16]
 800dc80:	3301      	adds	r3, #1
 800dc82:	9304      	str	r3, [sp, #16]
 800dc84:	9b05      	ldr	r3, [sp, #20]
 800dc86:	3301      	adds	r3, #1
 800dc88:	9305      	str	r3, [sp, #20]
 800dc8a:	f04f 0801 	mov.w	r8, #1
 800dc8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	f47f af6a 	bne.w	800db6a <_dtoa_r+0x7ca>
 800dc96:	2001      	movs	r0, #1
 800dc98:	e76f      	b.n	800db7a <_dtoa_r+0x7da>
 800dc9a:	f04f 0800 	mov.w	r8, #0
 800dc9e:	e7f6      	b.n	800dc8e <_dtoa_r+0x8ee>
 800dca0:	4698      	mov	r8, r3
 800dca2:	e7f4      	b.n	800dc8e <_dtoa_r+0x8ee>
 800dca4:	f43f af7d 	beq.w	800dba2 <_dtoa_r+0x802>
 800dca8:	4618      	mov	r0, r3
 800dcaa:	301c      	adds	r0, #28
 800dcac:	e772      	b.n	800db94 <_dtoa_r+0x7f4>
 800dcae:	9b03      	ldr	r3, [sp, #12]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	dc37      	bgt.n	800dd24 <_dtoa_r+0x984>
 800dcb4:	9b06      	ldr	r3, [sp, #24]
 800dcb6:	2b02      	cmp	r3, #2
 800dcb8:	dd34      	ble.n	800dd24 <_dtoa_r+0x984>
 800dcba:	9b03      	ldr	r3, [sp, #12]
 800dcbc:	9302      	str	r3, [sp, #8]
 800dcbe:	9b02      	ldr	r3, [sp, #8]
 800dcc0:	b96b      	cbnz	r3, 800dcde <_dtoa_r+0x93e>
 800dcc2:	4631      	mov	r1, r6
 800dcc4:	2205      	movs	r2, #5
 800dcc6:	4620      	mov	r0, r4
 800dcc8:	f000 fbf4 	bl	800e4b4 <__multadd>
 800dccc:	4601      	mov	r1, r0
 800dcce:	4606      	mov	r6, r0
 800dcd0:	ee18 0a10 	vmov	r0, s16
 800dcd4:	f000 fe0e 	bl	800e8f4 <__mcmp>
 800dcd8:	2800      	cmp	r0, #0
 800dcda:	f73f adbb 	bgt.w	800d854 <_dtoa_r+0x4b4>
 800dcde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dce0:	9d01      	ldr	r5, [sp, #4]
 800dce2:	43db      	mvns	r3, r3
 800dce4:	9300      	str	r3, [sp, #0]
 800dce6:	f04f 0800 	mov.w	r8, #0
 800dcea:	4631      	mov	r1, r6
 800dcec:	4620      	mov	r0, r4
 800dcee:	f000 fbbf 	bl	800e470 <_Bfree>
 800dcf2:	2f00      	cmp	r7, #0
 800dcf4:	f43f aea4 	beq.w	800da40 <_dtoa_r+0x6a0>
 800dcf8:	f1b8 0f00 	cmp.w	r8, #0
 800dcfc:	d005      	beq.n	800dd0a <_dtoa_r+0x96a>
 800dcfe:	45b8      	cmp	r8, r7
 800dd00:	d003      	beq.n	800dd0a <_dtoa_r+0x96a>
 800dd02:	4641      	mov	r1, r8
 800dd04:	4620      	mov	r0, r4
 800dd06:	f000 fbb3 	bl	800e470 <_Bfree>
 800dd0a:	4639      	mov	r1, r7
 800dd0c:	4620      	mov	r0, r4
 800dd0e:	f000 fbaf 	bl	800e470 <_Bfree>
 800dd12:	e695      	b.n	800da40 <_dtoa_r+0x6a0>
 800dd14:	2600      	movs	r6, #0
 800dd16:	4637      	mov	r7, r6
 800dd18:	e7e1      	b.n	800dcde <_dtoa_r+0x93e>
 800dd1a:	9700      	str	r7, [sp, #0]
 800dd1c:	4637      	mov	r7, r6
 800dd1e:	e599      	b.n	800d854 <_dtoa_r+0x4b4>
 800dd20:	40240000 	.word	0x40240000
 800dd24:	9b08      	ldr	r3, [sp, #32]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	f000 80ca 	beq.w	800dec0 <_dtoa_r+0xb20>
 800dd2c:	9b03      	ldr	r3, [sp, #12]
 800dd2e:	9302      	str	r3, [sp, #8]
 800dd30:	2d00      	cmp	r5, #0
 800dd32:	dd05      	ble.n	800dd40 <_dtoa_r+0x9a0>
 800dd34:	4639      	mov	r1, r7
 800dd36:	462a      	mov	r2, r5
 800dd38:	4620      	mov	r0, r4
 800dd3a:	f000 fd6b 	bl	800e814 <__lshift>
 800dd3e:	4607      	mov	r7, r0
 800dd40:	f1b8 0f00 	cmp.w	r8, #0
 800dd44:	d05b      	beq.n	800ddfe <_dtoa_r+0xa5e>
 800dd46:	6879      	ldr	r1, [r7, #4]
 800dd48:	4620      	mov	r0, r4
 800dd4a:	f000 fb51 	bl	800e3f0 <_Balloc>
 800dd4e:	4605      	mov	r5, r0
 800dd50:	b928      	cbnz	r0, 800dd5e <_dtoa_r+0x9be>
 800dd52:	4b87      	ldr	r3, [pc, #540]	; (800df70 <_dtoa_r+0xbd0>)
 800dd54:	4602      	mov	r2, r0
 800dd56:	f240 21ea 	movw	r1, #746	; 0x2ea
 800dd5a:	f7ff bb3b 	b.w	800d3d4 <_dtoa_r+0x34>
 800dd5e:	693a      	ldr	r2, [r7, #16]
 800dd60:	3202      	adds	r2, #2
 800dd62:	0092      	lsls	r2, r2, #2
 800dd64:	f107 010c 	add.w	r1, r7, #12
 800dd68:	300c      	adds	r0, #12
 800dd6a:	f000 fb33 	bl	800e3d4 <memcpy>
 800dd6e:	2201      	movs	r2, #1
 800dd70:	4629      	mov	r1, r5
 800dd72:	4620      	mov	r0, r4
 800dd74:	f000 fd4e 	bl	800e814 <__lshift>
 800dd78:	9b01      	ldr	r3, [sp, #4]
 800dd7a:	f103 0901 	add.w	r9, r3, #1
 800dd7e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800dd82:	4413      	add	r3, r2
 800dd84:	9305      	str	r3, [sp, #20]
 800dd86:	f00a 0301 	and.w	r3, sl, #1
 800dd8a:	46b8      	mov	r8, r7
 800dd8c:	9304      	str	r3, [sp, #16]
 800dd8e:	4607      	mov	r7, r0
 800dd90:	4631      	mov	r1, r6
 800dd92:	ee18 0a10 	vmov	r0, s16
 800dd96:	f7ff fa77 	bl	800d288 <quorem>
 800dd9a:	4641      	mov	r1, r8
 800dd9c:	9002      	str	r0, [sp, #8]
 800dd9e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800dda2:	ee18 0a10 	vmov	r0, s16
 800dda6:	f000 fda5 	bl	800e8f4 <__mcmp>
 800ddaa:	463a      	mov	r2, r7
 800ddac:	9003      	str	r0, [sp, #12]
 800ddae:	4631      	mov	r1, r6
 800ddb0:	4620      	mov	r0, r4
 800ddb2:	f000 fdbb 	bl	800e92c <__mdiff>
 800ddb6:	68c2      	ldr	r2, [r0, #12]
 800ddb8:	f109 3bff 	add.w	fp, r9, #4294967295
 800ddbc:	4605      	mov	r5, r0
 800ddbe:	bb02      	cbnz	r2, 800de02 <_dtoa_r+0xa62>
 800ddc0:	4601      	mov	r1, r0
 800ddc2:	ee18 0a10 	vmov	r0, s16
 800ddc6:	f000 fd95 	bl	800e8f4 <__mcmp>
 800ddca:	4602      	mov	r2, r0
 800ddcc:	4629      	mov	r1, r5
 800ddce:	4620      	mov	r0, r4
 800ddd0:	9207      	str	r2, [sp, #28]
 800ddd2:	f000 fb4d 	bl	800e470 <_Bfree>
 800ddd6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ddda:	ea43 0102 	orr.w	r1, r3, r2
 800ddde:	9b04      	ldr	r3, [sp, #16]
 800dde0:	430b      	orrs	r3, r1
 800dde2:	464d      	mov	r5, r9
 800dde4:	d10f      	bne.n	800de06 <_dtoa_r+0xa66>
 800dde6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ddea:	d02a      	beq.n	800de42 <_dtoa_r+0xaa2>
 800ddec:	9b03      	ldr	r3, [sp, #12]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	dd02      	ble.n	800ddf8 <_dtoa_r+0xa58>
 800ddf2:	9b02      	ldr	r3, [sp, #8]
 800ddf4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ddf8:	f88b a000 	strb.w	sl, [fp]
 800ddfc:	e775      	b.n	800dcea <_dtoa_r+0x94a>
 800ddfe:	4638      	mov	r0, r7
 800de00:	e7ba      	b.n	800dd78 <_dtoa_r+0x9d8>
 800de02:	2201      	movs	r2, #1
 800de04:	e7e2      	b.n	800ddcc <_dtoa_r+0xa2c>
 800de06:	9b03      	ldr	r3, [sp, #12]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	db04      	blt.n	800de16 <_dtoa_r+0xa76>
 800de0c:	9906      	ldr	r1, [sp, #24]
 800de0e:	430b      	orrs	r3, r1
 800de10:	9904      	ldr	r1, [sp, #16]
 800de12:	430b      	orrs	r3, r1
 800de14:	d122      	bne.n	800de5c <_dtoa_r+0xabc>
 800de16:	2a00      	cmp	r2, #0
 800de18:	ddee      	ble.n	800ddf8 <_dtoa_r+0xa58>
 800de1a:	ee18 1a10 	vmov	r1, s16
 800de1e:	2201      	movs	r2, #1
 800de20:	4620      	mov	r0, r4
 800de22:	f000 fcf7 	bl	800e814 <__lshift>
 800de26:	4631      	mov	r1, r6
 800de28:	ee08 0a10 	vmov	s16, r0
 800de2c:	f000 fd62 	bl	800e8f4 <__mcmp>
 800de30:	2800      	cmp	r0, #0
 800de32:	dc03      	bgt.n	800de3c <_dtoa_r+0xa9c>
 800de34:	d1e0      	bne.n	800ddf8 <_dtoa_r+0xa58>
 800de36:	f01a 0f01 	tst.w	sl, #1
 800de3a:	d0dd      	beq.n	800ddf8 <_dtoa_r+0xa58>
 800de3c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800de40:	d1d7      	bne.n	800ddf2 <_dtoa_r+0xa52>
 800de42:	2339      	movs	r3, #57	; 0x39
 800de44:	f88b 3000 	strb.w	r3, [fp]
 800de48:	462b      	mov	r3, r5
 800de4a:	461d      	mov	r5, r3
 800de4c:	3b01      	subs	r3, #1
 800de4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800de52:	2a39      	cmp	r2, #57	; 0x39
 800de54:	d071      	beq.n	800df3a <_dtoa_r+0xb9a>
 800de56:	3201      	adds	r2, #1
 800de58:	701a      	strb	r2, [r3, #0]
 800de5a:	e746      	b.n	800dcea <_dtoa_r+0x94a>
 800de5c:	2a00      	cmp	r2, #0
 800de5e:	dd07      	ble.n	800de70 <_dtoa_r+0xad0>
 800de60:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800de64:	d0ed      	beq.n	800de42 <_dtoa_r+0xaa2>
 800de66:	f10a 0301 	add.w	r3, sl, #1
 800de6a:	f88b 3000 	strb.w	r3, [fp]
 800de6e:	e73c      	b.n	800dcea <_dtoa_r+0x94a>
 800de70:	9b05      	ldr	r3, [sp, #20]
 800de72:	f809 ac01 	strb.w	sl, [r9, #-1]
 800de76:	4599      	cmp	r9, r3
 800de78:	d047      	beq.n	800df0a <_dtoa_r+0xb6a>
 800de7a:	ee18 1a10 	vmov	r1, s16
 800de7e:	2300      	movs	r3, #0
 800de80:	220a      	movs	r2, #10
 800de82:	4620      	mov	r0, r4
 800de84:	f000 fb16 	bl	800e4b4 <__multadd>
 800de88:	45b8      	cmp	r8, r7
 800de8a:	ee08 0a10 	vmov	s16, r0
 800de8e:	f04f 0300 	mov.w	r3, #0
 800de92:	f04f 020a 	mov.w	r2, #10
 800de96:	4641      	mov	r1, r8
 800de98:	4620      	mov	r0, r4
 800de9a:	d106      	bne.n	800deaa <_dtoa_r+0xb0a>
 800de9c:	f000 fb0a 	bl	800e4b4 <__multadd>
 800dea0:	4680      	mov	r8, r0
 800dea2:	4607      	mov	r7, r0
 800dea4:	f109 0901 	add.w	r9, r9, #1
 800dea8:	e772      	b.n	800dd90 <_dtoa_r+0x9f0>
 800deaa:	f000 fb03 	bl	800e4b4 <__multadd>
 800deae:	4639      	mov	r1, r7
 800deb0:	4680      	mov	r8, r0
 800deb2:	2300      	movs	r3, #0
 800deb4:	220a      	movs	r2, #10
 800deb6:	4620      	mov	r0, r4
 800deb8:	f000 fafc 	bl	800e4b4 <__multadd>
 800debc:	4607      	mov	r7, r0
 800debe:	e7f1      	b.n	800dea4 <_dtoa_r+0xb04>
 800dec0:	9b03      	ldr	r3, [sp, #12]
 800dec2:	9302      	str	r3, [sp, #8]
 800dec4:	9d01      	ldr	r5, [sp, #4]
 800dec6:	ee18 0a10 	vmov	r0, s16
 800deca:	4631      	mov	r1, r6
 800decc:	f7ff f9dc 	bl	800d288 <quorem>
 800ded0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ded4:	9b01      	ldr	r3, [sp, #4]
 800ded6:	f805 ab01 	strb.w	sl, [r5], #1
 800deda:	1aea      	subs	r2, r5, r3
 800dedc:	9b02      	ldr	r3, [sp, #8]
 800dede:	4293      	cmp	r3, r2
 800dee0:	dd09      	ble.n	800def6 <_dtoa_r+0xb56>
 800dee2:	ee18 1a10 	vmov	r1, s16
 800dee6:	2300      	movs	r3, #0
 800dee8:	220a      	movs	r2, #10
 800deea:	4620      	mov	r0, r4
 800deec:	f000 fae2 	bl	800e4b4 <__multadd>
 800def0:	ee08 0a10 	vmov	s16, r0
 800def4:	e7e7      	b.n	800dec6 <_dtoa_r+0xb26>
 800def6:	9b02      	ldr	r3, [sp, #8]
 800def8:	2b00      	cmp	r3, #0
 800defa:	bfc8      	it	gt
 800defc:	461d      	movgt	r5, r3
 800defe:	9b01      	ldr	r3, [sp, #4]
 800df00:	bfd8      	it	le
 800df02:	2501      	movle	r5, #1
 800df04:	441d      	add	r5, r3
 800df06:	f04f 0800 	mov.w	r8, #0
 800df0a:	ee18 1a10 	vmov	r1, s16
 800df0e:	2201      	movs	r2, #1
 800df10:	4620      	mov	r0, r4
 800df12:	f000 fc7f 	bl	800e814 <__lshift>
 800df16:	4631      	mov	r1, r6
 800df18:	ee08 0a10 	vmov	s16, r0
 800df1c:	f000 fcea 	bl	800e8f4 <__mcmp>
 800df20:	2800      	cmp	r0, #0
 800df22:	dc91      	bgt.n	800de48 <_dtoa_r+0xaa8>
 800df24:	d102      	bne.n	800df2c <_dtoa_r+0xb8c>
 800df26:	f01a 0f01 	tst.w	sl, #1
 800df2a:	d18d      	bne.n	800de48 <_dtoa_r+0xaa8>
 800df2c:	462b      	mov	r3, r5
 800df2e:	461d      	mov	r5, r3
 800df30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800df34:	2a30      	cmp	r2, #48	; 0x30
 800df36:	d0fa      	beq.n	800df2e <_dtoa_r+0xb8e>
 800df38:	e6d7      	b.n	800dcea <_dtoa_r+0x94a>
 800df3a:	9a01      	ldr	r2, [sp, #4]
 800df3c:	429a      	cmp	r2, r3
 800df3e:	d184      	bne.n	800de4a <_dtoa_r+0xaaa>
 800df40:	9b00      	ldr	r3, [sp, #0]
 800df42:	3301      	adds	r3, #1
 800df44:	9300      	str	r3, [sp, #0]
 800df46:	2331      	movs	r3, #49	; 0x31
 800df48:	7013      	strb	r3, [r2, #0]
 800df4a:	e6ce      	b.n	800dcea <_dtoa_r+0x94a>
 800df4c:	4b09      	ldr	r3, [pc, #36]	; (800df74 <_dtoa_r+0xbd4>)
 800df4e:	f7ff ba95 	b.w	800d47c <_dtoa_r+0xdc>
 800df52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df54:	2b00      	cmp	r3, #0
 800df56:	f47f aa6e 	bne.w	800d436 <_dtoa_r+0x96>
 800df5a:	4b07      	ldr	r3, [pc, #28]	; (800df78 <_dtoa_r+0xbd8>)
 800df5c:	f7ff ba8e 	b.w	800d47c <_dtoa_r+0xdc>
 800df60:	9b02      	ldr	r3, [sp, #8]
 800df62:	2b00      	cmp	r3, #0
 800df64:	dcae      	bgt.n	800dec4 <_dtoa_r+0xb24>
 800df66:	9b06      	ldr	r3, [sp, #24]
 800df68:	2b02      	cmp	r3, #2
 800df6a:	f73f aea8 	bgt.w	800dcbe <_dtoa_r+0x91e>
 800df6e:	e7a9      	b.n	800dec4 <_dtoa_r+0xb24>
 800df70:	0801041b 	.word	0x0801041b
 800df74:	08010378 	.word	0x08010378
 800df78:	0801039c 	.word	0x0801039c

0800df7c <__sflush_r>:
 800df7c:	898a      	ldrh	r2, [r1, #12]
 800df7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df82:	4605      	mov	r5, r0
 800df84:	0710      	lsls	r0, r2, #28
 800df86:	460c      	mov	r4, r1
 800df88:	d458      	bmi.n	800e03c <__sflush_r+0xc0>
 800df8a:	684b      	ldr	r3, [r1, #4]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	dc05      	bgt.n	800df9c <__sflush_r+0x20>
 800df90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800df92:	2b00      	cmp	r3, #0
 800df94:	dc02      	bgt.n	800df9c <__sflush_r+0x20>
 800df96:	2000      	movs	r0, #0
 800df98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800df9e:	2e00      	cmp	r6, #0
 800dfa0:	d0f9      	beq.n	800df96 <__sflush_r+0x1a>
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dfa8:	682f      	ldr	r7, [r5, #0]
 800dfaa:	602b      	str	r3, [r5, #0]
 800dfac:	d032      	beq.n	800e014 <__sflush_r+0x98>
 800dfae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dfb0:	89a3      	ldrh	r3, [r4, #12]
 800dfb2:	075a      	lsls	r2, r3, #29
 800dfb4:	d505      	bpl.n	800dfc2 <__sflush_r+0x46>
 800dfb6:	6863      	ldr	r3, [r4, #4]
 800dfb8:	1ac0      	subs	r0, r0, r3
 800dfba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dfbc:	b10b      	cbz	r3, 800dfc2 <__sflush_r+0x46>
 800dfbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dfc0:	1ac0      	subs	r0, r0, r3
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	4602      	mov	r2, r0
 800dfc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dfc8:	6a21      	ldr	r1, [r4, #32]
 800dfca:	4628      	mov	r0, r5
 800dfcc:	47b0      	blx	r6
 800dfce:	1c43      	adds	r3, r0, #1
 800dfd0:	89a3      	ldrh	r3, [r4, #12]
 800dfd2:	d106      	bne.n	800dfe2 <__sflush_r+0x66>
 800dfd4:	6829      	ldr	r1, [r5, #0]
 800dfd6:	291d      	cmp	r1, #29
 800dfd8:	d82c      	bhi.n	800e034 <__sflush_r+0xb8>
 800dfda:	4a2a      	ldr	r2, [pc, #168]	; (800e084 <__sflush_r+0x108>)
 800dfdc:	40ca      	lsrs	r2, r1
 800dfde:	07d6      	lsls	r6, r2, #31
 800dfe0:	d528      	bpl.n	800e034 <__sflush_r+0xb8>
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	6062      	str	r2, [r4, #4]
 800dfe6:	04d9      	lsls	r1, r3, #19
 800dfe8:	6922      	ldr	r2, [r4, #16]
 800dfea:	6022      	str	r2, [r4, #0]
 800dfec:	d504      	bpl.n	800dff8 <__sflush_r+0x7c>
 800dfee:	1c42      	adds	r2, r0, #1
 800dff0:	d101      	bne.n	800dff6 <__sflush_r+0x7a>
 800dff2:	682b      	ldr	r3, [r5, #0]
 800dff4:	b903      	cbnz	r3, 800dff8 <__sflush_r+0x7c>
 800dff6:	6560      	str	r0, [r4, #84]	; 0x54
 800dff8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dffa:	602f      	str	r7, [r5, #0]
 800dffc:	2900      	cmp	r1, #0
 800dffe:	d0ca      	beq.n	800df96 <__sflush_r+0x1a>
 800e000:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e004:	4299      	cmp	r1, r3
 800e006:	d002      	beq.n	800e00e <__sflush_r+0x92>
 800e008:	4628      	mov	r0, r5
 800e00a:	f000 fd8b 	bl	800eb24 <_free_r>
 800e00e:	2000      	movs	r0, #0
 800e010:	6360      	str	r0, [r4, #52]	; 0x34
 800e012:	e7c1      	b.n	800df98 <__sflush_r+0x1c>
 800e014:	6a21      	ldr	r1, [r4, #32]
 800e016:	2301      	movs	r3, #1
 800e018:	4628      	mov	r0, r5
 800e01a:	47b0      	blx	r6
 800e01c:	1c41      	adds	r1, r0, #1
 800e01e:	d1c7      	bne.n	800dfb0 <__sflush_r+0x34>
 800e020:	682b      	ldr	r3, [r5, #0]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d0c4      	beq.n	800dfb0 <__sflush_r+0x34>
 800e026:	2b1d      	cmp	r3, #29
 800e028:	d001      	beq.n	800e02e <__sflush_r+0xb2>
 800e02a:	2b16      	cmp	r3, #22
 800e02c:	d101      	bne.n	800e032 <__sflush_r+0xb6>
 800e02e:	602f      	str	r7, [r5, #0]
 800e030:	e7b1      	b.n	800df96 <__sflush_r+0x1a>
 800e032:	89a3      	ldrh	r3, [r4, #12]
 800e034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e038:	81a3      	strh	r3, [r4, #12]
 800e03a:	e7ad      	b.n	800df98 <__sflush_r+0x1c>
 800e03c:	690f      	ldr	r7, [r1, #16]
 800e03e:	2f00      	cmp	r7, #0
 800e040:	d0a9      	beq.n	800df96 <__sflush_r+0x1a>
 800e042:	0793      	lsls	r3, r2, #30
 800e044:	680e      	ldr	r6, [r1, #0]
 800e046:	bf08      	it	eq
 800e048:	694b      	ldreq	r3, [r1, #20]
 800e04a:	600f      	str	r7, [r1, #0]
 800e04c:	bf18      	it	ne
 800e04e:	2300      	movne	r3, #0
 800e050:	eba6 0807 	sub.w	r8, r6, r7
 800e054:	608b      	str	r3, [r1, #8]
 800e056:	f1b8 0f00 	cmp.w	r8, #0
 800e05a:	dd9c      	ble.n	800df96 <__sflush_r+0x1a>
 800e05c:	6a21      	ldr	r1, [r4, #32]
 800e05e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e060:	4643      	mov	r3, r8
 800e062:	463a      	mov	r2, r7
 800e064:	4628      	mov	r0, r5
 800e066:	47b0      	blx	r6
 800e068:	2800      	cmp	r0, #0
 800e06a:	dc06      	bgt.n	800e07a <__sflush_r+0xfe>
 800e06c:	89a3      	ldrh	r3, [r4, #12]
 800e06e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e072:	81a3      	strh	r3, [r4, #12]
 800e074:	f04f 30ff 	mov.w	r0, #4294967295
 800e078:	e78e      	b.n	800df98 <__sflush_r+0x1c>
 800e07a:	4407      	add	r7, r0
 800e07c:	eba8 0800 	sub.w	r8, r8, r0
 800e080:	e7e9      	b.n	800e056 <__sflush_r+0xda>
 800e082:	bf00      	nop
 800e084:	20400001 	.word	0x20400001

0800e088 <_fflush_r>:
 800e088:	b538      	push	{r3, r4, r5, lr}
 800e08a:	690b      	ldr	r3, [r1, #16]
 800e08c:	4605      	mov	r5, r0
 800e08e:	460c      	mov	r4, r1
 800e090:	b913      	cbnz	r3, 800e098 <_fflush_r+0x10>
 800e092:	2500      	movs	r5, #0
 800e094:	4628      	mov	r0, r5
 800e096:	bd38      	pop	{r3, r4, r5, pc}
 800e098:	b118      	cbz	r0, 800e0a2 <_fflush_r+0x1a>
 800e09a:	6983      	ldr	r3, [r0, #24]
 800e09c:	b90b      	cbnz	r3, 800e0a2 <_fflush_r+0x1a>
 800e09e:	f000 f887 	bl	800e1b0 <__sinit>
 800e0a2:	4b14      	ldr	r3, [pc, #80]	; (800e0f4 <_fflush_r+0x6c>)
 800e0a4:	429c      	cmp	r4, r3
 800e0a6:	d11b      	bne.n	800e0e0 <_fflush_r+0x58>
 800e0a8:	686c      	ldr	r4, [r5, #4]
 800e0aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d0ef      	beq.n	800e092 <_fflush_r+0xa>
 800e0b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e0b4:	07d0      	lsls	r0, r2, #31
 800e0b6:	d404      	bmi.n	800e0c2 <_fflush_r+0x3a>
 800e0b8:	0599      	lsls	r1, r3, #22
 800e0ba:	d402      	bmi.n	800e0c2 <_fflush_r+0x3a>
 800e0bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0be:	f000 f91a 	bl	800e2f6 <__retarget_lock_acquire_recursive>
 800e0c2:	4628      	mov	r0, r5
 800e0c4:	4621      	mov	r1, r4
 800e0c6:	f7ff ff59 	bl	800df7c <__sflush_r>
 800e0ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e0cc:	07da      	lsls	r2, r3, #31
 800e0ce:	4605      	mov	r5, r0
 800e0d0:	d4e0      	bmi.n	800e094 <_fflush_r+0xc>
 800e0d2:	89a3      	ldrh	r3, [r4, #12]
 800e0d4:	059b      	lsls	r3, r3, #22
 800e0d6:	d4dd      	bmi.n	800e094 <_fflush_r+0xc>
 800e0d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0da:	f000 f90d 	bl	800e2f8 <__retarget_lock_release_recursive>
 800e0de:	e7d9      	b.n	800e094 <_fflush_r+0xc>
 800e0e0:	4b05      	ldr	r3, [pc, #20]	; (800e0f8 <_fflush_r+0x70>)
 800e0e2:	429c      	cmp	r4, r3
 800e0e4:	d101      	bne.n	800e0ea <_fflush_r+0x62>
 800e0e6:	68ac      	ldr	r4, [r5, #8]
 800e0e8:	e7df      	b.n	800e0aa <_fflush_r+0x22>
 800e0ea:	4b04      	ldr	r3, [pc, #16]	; (800e0fc <_fflush_r+0x74>)
 800e0ec:	429c      	cmp	r4, r3
 800e0ee:	bf08      	it	eq
 800e0f0:	68ec      	ldreq	r4, [r5, #12]
 800e0f2:	e7da      	b.n	800e0aa <_fflush_r+0x22>
 800e0f4:	0801044c 	.word	0x0801044c
 800e0f8:	0801046c 	.word	0x0801046c
 800e0fc:	0801042c 	.word	0x0801042c

0800e100 <std>:
 800e100:	2300      	movs	r3, #0
 800e102:	b510      	push	{r4, lr}
 800e104:	4604      	mov	r4, r0
 800e106:	e9c0 3300 	strd	r3, r3, [r0]
 800e10a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e10e:	6083      	str	r3, [r0, #8]
 800e110:	8181      	strh	r1, [r0, #12]
 800e112:	6643      	str	r3, [r0, #100]	; 0x64
 800e114:	81c2      	strh	r2, [r0, #14]
 800e116:	6183      	str	r3, [r0, #24]
 800e118:	4619      	mov	r1, r3
 800e11a:	2208      	movs	r2, #8
 800e11c:	305c      	adds	r0, #92	; 0x5c
 800e11e:	f7fe faf3 	bl	800c708 <memset>
 800e122:	4b05      	ldr	r3, [pc, #20]	; (800e138 <std+0x38>)
 800e124:	6263      	str	r3, [r4, #36]	; 0x24
 800e126:	4b05      	ldr	r3, [pc, #20]	; (800e13c <std+0x3c>)
 800e128:	62a3      	str	r3, [r4, #40]	; 0x28
 800e12a:	4b05      	ldr	r3, [pc, #20]	; (800e140 <std+0x40>)
 800e12c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e12e:	4b05      	ldr	r3, [pc, #20]	; (800e144 <std+0x44>)
 800e130:	6224      	str	r4, [r4, #32]
 800e132:	6323      	str	r3, [r4, #48]	; 0x30
 800e134:	bd10      	pop	{r4, pc}
 800e136:	bf00      	nop
 800e138:	0800efb9 	.word	0x0800efb9
 800e13c:	0800efdb 	.word	0x0800efdb
 800e140:	0800f013 	.word	0x0800f013
 800e144:	0800f037 	.word	0x0800f037

0800e148 <_cleanup_r>:
 800e148:	4901      	ldr	r1, [pc, #4]	; (800e150 <_cleanup_r+0x8>)
 800e14a:	f000 b8af 	b.w	800e2ac <_fwalk_reent>
 800e14e:	bf00      	nop
 800e150:	0800e089 	.word	0x0800e089

0800e154 <__sfmoreglue>:
 800e154:	b570      	push	{r4, r5, r6, lr}
 800e156:	2268      	movs	r2, #104	; 0x68
 800e158:	1e4d      	subs	r5, r1, #1
 800e15a:	4355      	muls	r5, r2
 800e15c:	460e      	mov	r6, r1
 800e15e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e162:	f000 fd4b 	bl	800ebfc <_malloc_r>
 800e166:	4604      	mov	r4, r0
 800e168:	b140      	cbz	r0, 800e17c <__sfmoreglue+0x28>
 800e16a:	2100      	movs	r1, #0
 800e16c:	e9c0 1600 	strd	r1, r6, [r0]
 800e170:	300c      	adds	r0, #12
 800e172:	60a0      	str	r0, [r4, #8]
 800e174:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e178:	f7fe fac6 	bl	800c708 <memset>
 800e17c:	4620      	mov	r0, r4
 800e17e:	bd70      	pop	{r4, r5, r6, pc}

0800e180 <__sfp_lock_acquire>:
 800e180:	4801      	ldr	r0, [pc, #4]	; (800e188 <__sfp_lock_acquire+0x8>)
 800e182:	f000 b8b8 	b.w	800e2f6 <__retarget_lock_acquire_recursive>
 800e186:	bf00      	nop
 800e188:	20000695 	.word	0x20000695

0800e18c <__sfp_lock_release>:
 800e18c:	4801      	ldr	r0, [pc, #4]	; (800e194 <__sfp_lock_release+0x8>)
 800e18e:	f000 b8b3 	b.w	800e2f8 <__retarget_lock_release_recursive>
 800e192:	bf00      	nop
 800e194:	20000695 	.word	0x20000695

0800e198 <__sinit_lock_acquire>:
 800e198:	4801      	ldr	r0, [pc, #4]	; (800e1a0 <__sinit_lock_acquire+0x8>)
 800e19a:	f000 b8ac 	b.w	800e2f6 <__retarget_lock_acquire_recursive>
 800e19e:	bf00      	nop
 800e1a0:	20000696 	.word	0x20000696

0800e1a4 <__sinit_lock_release>:
 800e1a4:	4801      	ldr	r0, [pc, #4]	; (800e1ac <__sinit_lock_release+0x8>)
 800e1a6:	f000 b8a7 	b.w	800e2f8 <__retarget_lock_release_recursive>
 800e1aa:	bf00      	nop
 800e1ac:	20000696 	.word	0x20000696

0800e1b0 <__sinit>:
 800e1b0:	b510      	push	{r4, lr}
 800e1b2:	4604      	mov	r4, r0
 800e1b4:	f7ff fff0 	bl	800e198 <__sinit_lock_acquire>
 800e1b8:	69a3      	ldr	r3, [r4, #24]
 800e1ba:	b11b      	cbz	r3, 800e1c4 <__sinit+0x14>
 800e1bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1c0:	f7ff bff0 	b.w	800e1a4 <__sinit_lock_release>
 800e1c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e1c8:	6523      	str	r3, [r4, #80]	; 0x50
 800e1ca:	4b13      	ldr	r3, [pc, #76]	; (800e218 <__sinit+0x68>)
 800e1cc:	4a13      	ldr	r2, [pc, #76]	; (800e21c <__sinit+0x6c>)
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	62a2      	str	r2, [r4, #40]	; 0x28
 800e1d2:	42a3      	cmp	r3, r4
 800e1d4:	bf04      	itt	eq
 800e1d6:	2301      	moveq	r3, #1
 800e1d8:	61a3      	streq	r3, [r4, #24]
 800e1da:	4620      	mov	r0, r4
 800e1dc:	f000 f820 	bl	800e220 <__sfp>
 800e1e0:	6060      	str	r0, [r4, #4]
 800e1e2:	4620      	mov	r0, r4
 800e1e4:	f000 f81c 	bl	800e220 <__sfp>
 800e1e8:	60a0      	str	r0, [r4, #8]
 800e1ea:	4620      	mov	r0, r4
 800e1ec:	f000 f818 	bl	800e220 <__sfp>
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	60e0      	str	r0, [r4, #12]
 800e1f4:	2104      	movs	r1, #4
 800e1f6:	6860      	ldr	r0, [r4, #4]
 800e1f8:	f7ff ff82 	bl	800e100 <std>
 800e1fc:	68a0      	ldr	r0, [r4, #8]
 800e1fe:	2201      	movs	r2, #1
 800e200:	2109      	movs	r1, #9
 800e202:	f7ff ff7d 	bl	800e100 <std>
 800e206:	68e0      	ldr	r0, [r4, #12]
 800e208:	2202      	movs	r2, #2
 800e20a:	2112      	movs	r1, #18
 800e20c:	f7ff ff78 	bl	800e100 <std>
 800e210:	2301      	movs	r3, #1
 800e212:	61a3      	str	r3, [r4, #24]
 800e214:	e7d2      	b.n	800e1bc <__sinit+0xc>
 800e216:	bf00      	nop
 800e218:	08010364 	.word	0x08010364
 800e21c:	0800e149 	.word	0x0800e149

0800e220 <__sfp>:
 800e220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e222:	4607      	mov	r7, r0
 800e224:	f7ff ffac 	bl	800e180 <__sfp_lock_acquire>
 800e228:	4b1e      	ldr	r3, [pc, #120]	; (800e2a4 <__sfp+0x84>)
 800e22a:	681e      	ldr	r6, [r3, #0]
 800e22c:	69b3      	ldr	r3, [r6, #24]
 800e22e:	b913      	cbnz	r3, 800e236 <__sfp+0x16>
 800e230:	4630      	mov	r0, r6
 800e232:	f7ff ffbd 	bl	800e1b0 <__sinit>
 800e236:	3648      	adds	r6, #72	; 0x48
 800e238:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e23c:	3b01      	subs	r3, #1
 800e23e:	d503      	bpl.n	800e248 <__sfp+0x28>
 800e240:	6833      	ldr	r3, [r6, #0]
 800e242:	b30b      	cbz	r3, 800e288 <__sfp+0x68>
 800e244:	6836      	ldr	r6, [r6, #0]
 800e246:	e7f7      	b.n	800e238 <__sfp+0x18>
 800e248:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e24c:	b9d5      	cbnz	r5, 800e284 <__sfp+0x64>
 800e24e:	4b16      	ldr	r3, [pc, #88]	; (800e2a8 <__sfp+0x88>)
 800e250:	60e3      	str	r3, [r4, #12]
 800e252:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e256:	6665      	str	r5, [r4, #100]	; 0x64
 800e258:	f000 f84c 	bl	800e2f4 <__retarget_lock_init_recursive>
 800e25c:	f7ff ff96 	bl	800e18c <__sfp_lock_release>
 800e260:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e264:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e268:	6025      	str	r5, [r4, #0]
 800e26a:	61a5      	str	r5, [r4, #24]
 800e26c:	2208      	movs	r2, #8
 800e26e:	4629      	mov	r1, r5
 800e270:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e274:	f7fe fa48 	bl	800c708 <memset>
 800e278:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e27c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e280:	4620      	mov	r0, r4
 800e282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e284:	3468      	adds	r4, #104	; 0x68
 800e286:	e7d9      	b.n	800e23c <__sfp+0x1c>
 800e288:	2104      	movs	r1, #4
 800e28a:	4638      	mov	r0, r7
 800e28c:	f7ff ff62 	bl	800e154 <__sfmoreglue>
 800e290:	4604      	mov	r4, r0
 800e292:	6030      	str	r0, [r6, #0]
 800e294:	2800      	cmp	r0, #0
 800e296:	d1d5      	bne.n	800e244 <__sfp+0x24>
 800e298:	f7ff ff78 	bl	800e18c <__sfp_lock_release>
 800e29c:	230c      	movs	r3, #12
 800e29e:	603b      	str	r3, [r7, #0]
 800e2a0:	e7ee      	b.n	800e280 <__sfp+0x60>
 800e2a2:	bf00      	nop
 800e2a4:	08010364 	.word	0x08010364
 800e2a8:	ffff0001 	.word	0xffff0001

0800e2ac <_fwalk_reent>:
 800e2ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2b0:	4606      	mov	r6, r0
 800e2b2:	4688      	mov	r8, r1
 800e2b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e2b8:	2700      	movs	r7, #0
 800e2ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e2be:	f1b9 0901 	subs.w	r9, r9, #1
 800e2c2:	d505      	bpl.n	800e2d0 <_fwalk_reent+0x24>
 800e2c4:	6824      	ldr	r4, [r4, #0]
 800e2c6:	2c00      	cmp	r4, #0
 800e2c8:	d1f7      	bne.n	800e2ba <_fwalk_reent+0xe>
 800e2ca:	4638      	mov	r0, r7
 800e2cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2d0:	89ab      	ldrh	r3, [r5, #12]
 800e2d2:	2b01      	cmp	r3, #1
 800e2d4:	d907      	bls.n	800e2e6 <_fwalk_reent+0x3a>
 800e2d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e2da:	3301      	adds	r3, #1
 800e2dc:	d003      	beq.n	800e2e6 <_fwalk_reent+0x3a>
 800e2de:	4629      	mov	r1, r5
 800e2e0:	4630      	mov	r0, r6
 800e2e2:	47c0      	blx	r8
 800e2e4:	4307      	orrs	r7, r0
 800e2e6:	3568      	adds	r5, #104	; 0x68
 800e2e8:	e7e9      	b.n	800e2be <_fwalk_reent+0x12>
	...

0800e2ec <_localeconv_r>:
 800e2ec:	4800      	ldr	r0, [pc, #0]	; (800e2f0 <_localeconv_r+0x4>)
 800e2ee:	4770      	bx	lr
 800e2f0:	20000164 	.word	0x20000164

0800e2f4 <__retarget_lock_init_recursive>:
 800e2f4:	4770      	bx	lr

0800e2f6 <__retarget_lock_acquire_recursive>:
 800e2f6:	4770      	bx	lr

0800e2f8 <__retarget_lock_release_recursive>:
 800e2f8:	4770      	bx	lr

0800e2fa <__swhatbuf_r>:
 800e2fa:	b570      	push	{r4, r5, r6, lr}
 800e2fc:	460e      	mov	r6, r1
 800e2fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e302:	2900      	cmp	r1, #0
 800e304:	b096      	sub	sp, #88	; 0x58
 800e306:	4614      	mov	r4, r2
 800e308:	461d      	mov	r5, r3
 800e30a:	da08      	bge.n	800e31e <__swhatbuf_r+0x24>
 800e30c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e310:	2200      	movs	r2, #0
 800e312:	602a      	str	r2, [r5, #0]
 800e314:	061a      	lsls	r2, r3, #24
 800e316:	d410      	bmi.n	800e33a <__swhatbuf_r+0x40>
 800e318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e31c:	e00e      	b.n	800e33c <__swhatbuf_r+0x42>
 800e31e:	466a      	mov	r2, sp
 800e320:	f000 fee0 	bl	800f0e4 <_fstat_r>
 800e324:	2800      	cmp	r0, #0
 800e326:	dbf1      	blt.n	800e30c <__swhatbuf_r+0x12>
 800e328:	9a01      	ldr	r2, [sp, #4]
 800e32a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e32e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e332:	425a      	negs	r2, r3
 800e334:	415a      	adcs	r2, r3
 800e336:	602a      	str	r2, [r5, #0]
 800e338:	e7ee      	b.n	800e318 <__swhatbuf_r+0x1e>
 800e33a:	2340      	movs	r3, #64	; 0x40
 800e33c:	2000      	movs	r0, #0
 800e33e:	6023      	str	r3, [r4, #0]
 800e340:	b016      	add	sp, #88	; 0x58
 800e342:	bd70      	pop	{r4, r5, r6, pc}

0800e344 <__smakebuf_r>:
 800e344:	898b      	ldrh	r3, [r1, #12]
 800e346:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e348:	079d      	lsls	r5, r3, #30
 800e34a:	4606      	mov	r6, r0
 800e34c:	460c      	mov	r4, r1
 800e34e:	d507      	bpl.n	800e360 <__smakebuf_r+0x1c>
 800e350:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e354:	6023      	str	r3, [r4, #0]
 800e356:	6123      	str	r3, [r4, #16]
 800e358:	2301      	movs	r3, #1
 800e35a:	6163      	str	r3, [r4, #20]
 800e35c:	b002      	add	sp, #8
 800e35e:	bd70      	pop	{r4, r5, r6, pc}
 800e360:	ab01      	add	r3, sp, #4
 800e362:	466a      	mov	r2, sp
 800e364:	f7ff ffc9 	bl	800e2fa <__swhatbuf_r>
 800e368:	9900      	ldr	r1, [sp, #0]
 800e36a:	4605      	mov	r5, r0
 800e36c:	4630      	mov	r0, r6
 800e36e:	f000 fc45 	bl	800ebfc <_malloc_r>
 800e372:	b948      	cbnz	r0, 800e388 <__smakebuf_r+0x44>
 800e374:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e378:	059a      	lsls	r2, r3, #22
 800e37a:	d4ef      	bmi.n	800e35c <__smakebuf_r+0x18>
 800e37c:	f023 0303 	bic.w	r3, r3, #3
 800e380:	f043 0302 	orr.w	r3, r3, #2
 800e384:	81a3      	strh	r3, [r4, #12]
 800e386:	e7e3      	b.n	800e350 <__smakebuf_r+0xc>
 800e388:	4b0d      	ldr	r3, [pc, #52]	; (800e3c0 <__smakebuf_r+0x7c>)
 800e38a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e38c:	89a3      	ldrh	r3, [r4, #12]
 800e38e:	6020      	str	r0, [r4, #0]
 800e390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e394:	81a3      	strh	r3, [r4, #12]
 800e396:	9b00      	ldr	r3, [sp, #0]
 800e398:	6163      	str	r3, [r4, #20]
 800e39a:	9b01      	ldr	r3, [sp, #4]
 800e39c:	6120      	str	r0, [r4, #16]
 800e39e:	b15b      	cbz	r3, 800e3b8 <__smakebuf_r+0x74>
 800e3a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e3a4:	4630      	mov	r0, r6
 800e3a6:	f000 feaf 	bl	800f108 <_isatty_r>
 800e3aa:	b128      	cbz	r0, 800e3b8 <__smakebuf_r+0x74>
 800e3ac:	89a3      	ldrh	r3, [r4, #12]
 800e3ae:	f023 0303 	bic.w	r3, r3, #3
 800e3b2:	f043 0301 	orr.w	r3, r3, #1
 800e3b6:	81a3      	strh	r3, [r4, #12]
 800e3b8:	89a0      	ldrh	r0, [r4, #12]
 800e3ba:	4305      	orrs	r5, r0
 800e3bc:	81a5      	strh	r5, [r4, #12]
 800e3be:	e7cd      	b.n	800e35c <__smakebuf_r+0x18>
 800e3c0:	0800e149 	.word	0x0800e149

0800e3c4 <malloc>:
 800e3c4:	4b02      	ldr	r3, [pc, #8]	; (800e3d0 <malloc+0xc>)
 800e3c6:	4601      	mov	r1, r0
 800e3c8:	6818      	ldr	r0, [r3, #0]
 800e3ca:	f000 bc17 	b.w	800ebfc <_malloc_r>
 800e3ce:	bf00      	nop
 800e3d0:	20000010 	.word	0x20000010

0800e3d4 <memcpy>:
 800e3d4:	440a      	add	r2, r1
 800e3d6:	4291      	cmp	r1, r2
 800e3d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800e3dc:	d100      	bne.n	800e3e0 <memcpy+0xc>
 800e3de:	4770      	bx	lr
 800e3e0:	b510      	push	{r4, lr}
 800e3e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e3e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e3ea:	4291      	cmp	r1, r2
 800e3ec:	d1f9      	bne.n	800e3e2 <memcpy+0xe>
 800e3ee:	bd10      	pop	{r4, pc}

0800e3f0 <_Balloc>:
 800e3f0:	b570      	push	{r4, r5, r6, lr}
 800e3f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e3f4:	4604      	mov	r4, r0
 800e3f6:	460d      	mov	r5, r1
 800e3f8:	b976      	cbnz	r6, 800e418 <_Balloc+0x28>
 800e3fa:	2010      	movs	r0, #16
 800e3fc:	f7ff ffe2 	bl	800e3c4 <malloc>
 800e400:	4602      	mov	r2, r0
 800e402:	6260      	str	r0, [r4, #36]	; 0x24
 800e404:	b920      	cbnz	r0, 800e410 <_Balloc+0x20>
 800e406:	4b18      	ldr	r3, [pc, #96]	; (800e468 <_Balloc+0x78>)
 800e408:	4818      	ldr	r0, [pc, #96]	; (800e46c <_Balloc+0x7c>)
 800e40a:	2166      	movs	r1, #102	; 0x66
 800e40c:	f000 fe2a 	bl	800f064 <__assert_func>
 800e410:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e414:	6006      	str	r6, [r0, #0]
 800e416:	60c6      	str	r6, [r0, #12]
 800e418:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e41a:	68f3      	ldr	r3, [r6, #12]
 800e41c:	b183      	cbz	r3, 800e440 <_Balloc+0x50>
 800e41e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e420:	68db      	ldr	r3, [r3, #12]
 800e422:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e426:	b9b8      	cbnz	r0, 800e458 <_Balloc+0x68>
 800e428:	2101      	movs	r1, #1
 800e42a:	fa01 f605 	lsl.w	r6, r1, r5
 800e42e:	1d72      	adds	r2, r6, #5
 800e430:	0092      	lsls	r2, r2, #2
 800e432:	4620      	mov	r0, r4
 800e434:	f000 fb60 	bl	800eaf8 <_calloc_r>
 800e438:	b160      	cbz	r0, 800e454 <_Balloc+0x64>
 800e43a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e43e:	e00e      	b.n	800e45e <_Balloc+0x6e>
 800e440:	2221      	movs	r2, #33	; 0x21
 800e442:	2104      	movs	r1, #4
 800e444:	4620      	mov	r0, r4
 800e446:	f000 fb57 	bl	800eaf8 <_calloc_r>
 800e44a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e44c:	60f0      	str	r0, [r6, #12]
 800e44e:	68db      	ldr	r3, [r3, #12]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d1e4      	bne.n	800e41e <_Balloc+0x2e>
 800e454:	2000      	movs	r0, #0
 800e456:	bd70      	pop	{r4, r5, r6, pc}
 800e458:	6802      	ldr	r2, [r0, #0]
 800e45a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e45e:	2300      	movs	r3, #0
 800e460:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e464:	e7f7      	b.n	800e456 <_Balloc+0x66>
 800e466:	bf00      	nop
 800e468:	080103a9 	.word	0x080103a9
 800e46c:	0801048c 	.word	0x0801048c

0800e470 <_Bfree>:
 800e470:	b570      	push	{r4, r5, r6, lr}
 800e472:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e474:	4605      	mov	r5, r0
 800e476:	460c      	mov	r4, r1
 800e478:	b976      	cbnz	r6, 800e498 <_Bfree+0x28>
 800e47a:	2010      	movs	r0, #16
 800e47c:	f7ff ffa2 	bl	800e3c4 <malloc>
 800e480:	4602      	mov	r2, r0
 800e482:	6268      	str	r0, [r5, #36]	; 0x24
 800e484:	b920      	cbnz	r0, 800e490 <_Bfree+0x20>
 800e486:	4b09      	ldr	r3, [pc, #36]	; (800e4ac <_Bfree+0x3c>)
 800e488:	4809      	ldr	r0, [pc, #36]	; (800e4b0 <_Bfree+0x40>)
 800e48a:	218a      	movs	r1, #138	; 0x8a
 800e48c:	f000 fdea 	bl	800f064 <__assert_func>
 800e490:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e494:	6006      	str	r6, [r0, #0]
 800e496:	60c6      	str	r6, [r0, #12]
 800e498:	b13c      	cbz	r4, 800e4aa <_Bfree+0x3a>
 800e49a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e49c:	6862      	ldr	r2, [r4, #4]
 800e49e:	68db      	ldr	r3, [r3, #12]
 800e4a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e4a4:	6021      	str	r1, [r4, #0]
 800e4a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e4aa:	bd70      	pop	{r4, r5, r6, pc}
 800e4ac:	080103a9 	.word	0x080103a9
 800e4b0:	0801048c 	.word	0x0801048c

0800e4b4 <__multadd>:
 800e4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4b8:	690d      	ldr	r5, [r1, #16]
 800e4ba:	4607      	mov	r7, r0
 800e4bc:	460c      	mov	r4, r1
 800e4be:	461e      	mov	r6, r3
 800e4c0:	f101 0c14 	add.w	ip, r1, #20
 800e4c4:	2000      	movs	r0, #0
 800e4c6:	f8dc 3000 	ldr.w	r3, [ip]
 800e4ca:	b299      	uxth	r1, r3
 800e4cc:	fb02 6101 	mla	r1, r2, r1, r6
 800e4d0:	0c1e      	lsrs	r6, r3, #16
 800e4d2:	0c0b      	lsrs	r3, r1, #16
 800e4d4:	fb02 3306 	mla	r3, r2, r6, r3
 800e4d8:	b289      	uxth	r1, r1
 800e4da:	3001      	adds	r0, #1
 800e4dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e4e0:	4285      	cmp	r5, r0
 800e4e2:	f84c 1b04 	str.w	r1, [ip], #4
 800e4e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e4ea:	dcec      	bgt.n	800e4c6 <__multadd+0x12>
 800e4ec:	b30e      	cbz	r6, 800e532 <__multadd+0x7e>
 800e4ee:	68a3      	ldr	r3, [r4, #8]
 800e4f0:	42ab      	cmp	r3, r5
 800e4f2:	dc19      	bgt.n	800e528 <__multadd+0x74>
 800e4f4:	6861      	ldr	r1, [r4, #4]
 800e4f6:	4638      	mov	r0, r7
 800e4f8:	3101      	adds	r1, #1
 800e4fa:	f7ff ff79 	bl	800e3f0 <_Balloc>
 800e4fe:	4680      	mov	r8, r0
 800e500:	b928      	cbnz	r0, 800e50e <__multadd+0x5a>
 800e502:	4602      	mov	r2, r0
 800e504:	4b0c      	ldr	r3, [pc, #48]	; (800e538 <__multadd+0x84>)
 800e506:	480d      	ldr	r0, [pc, #52]	; (800e53c <__multadd+0x88>)
 800e508:	21b5      	movs	r1, #181	; 0xb5
 800e50a:	f000 fdab 	bl	800f064 <__assert_func>
 800e50e:	6922      	ldr	r2, [r4, #16]
 800e510:	3202      	adds	r2, #2
 800e512:	f104 010c 	add.w	r1, r4, #12
 800e516:	0092      	lsls	r2, r2, #2
 800e518:	300c      	adds	r0, #12
 800e51a:	f7ff ff5b 	bl	800e3d4 <memcpy>
 800e51e:	4621      	mov	r1, r4
 800e520:	4638      	mov	r0, r7
 800e522:	f7ff ffa5 	bl	800e470 <_Bfree>
 800e526:	4644      	mov	r4, r8
 800e528:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e52c:	3501      	adds	r5, #1
 800e52e:	615e      	str	r6, [r3, #20]
 800e530:	6125      	str	r5, [r4, #16]
 800e532:	4620      	mov	r0, r4
 800e534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e538:	0801041b 	.word	0x0801041b
 800e53c:	0801048c 	.word	0x0801048c

0800e540 <__hi0bits>:
 800e540:	0c03      	lsrs	r3, r0, #16
 800e542:	041b      	lsls	r3, r3, #16
 800e544:	b9d3      	cbnz	r3, 800e57c <__hi0bits+0x3c>
 800e546:	0400      	lsls	r0, r0, #16
 800e548:	2310      	movs	r3, #16
 800e54a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e54e:	bf04      	itt	eq
 800e550:	0200      	lsleq	r0, r0, #8
 800e552:	3308      	addeq	r3, #8
 800e554:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e558:	bf04      	itt	eq
 800e55a:	0100      	lsleq	r0, r0, #4
 800e55c:	3304      	addeq	r3, #4
 800e55e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e562:	bf04      	itt	eq
 800e564:	0080      	lsleq	r0, r0, #2
 800e566:	3302      	addeq	r3, #2
 800e568:	2800      	cmp	r0, #0
 800e56a:	db05      	blt.n	800e578 <__hi0bits+0x38>
 800e56c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e570:	f103 0301 	add.w	r3, r3, #1
 800e574:	bf08      	it	eq
 800e576:	2320      	moveq	r3, #32
 800e578:	4618      	mov	r0, r3
 800e57a:	4770      	bx	lr
 800e57c:	2300      	movs	r3, #0
 800e57e:	e7e4      	b.n	800e54a <__hi0bits+0xa>

0800e580 <__lo0bits>:
 800e580:	6803      	ldr	r3, [r0, #0]
 800e582:	f013 0207 	ands.w	r2, r3, #7
 800e586:	4601      	mov	r1, r0
 800e588:	d00b      	beq.n	800e5a2 <__lo0bits+0x22>
 800e58a:	07da      	lsls	r2, r3, #31
 800e58c:	d423      	bmi.n	800e5d6 <__lo0bits+0x56>
 800e58e:	0798      	lsls	r0, r3, #30
 800e590:	bf49      	itett	mi
 800e592:	085b      	lsrmi	r3, r3, #1
 800e594:	089b      	lsrpl	r3, r3, #2
 800e596:	2001      	movmi	r0, #1
 800e598:	600b      	strmi	r3, [r1, #0]
 800e59a:	bf5c      	itt	pl
 800e59c:	600b      	strpl	r3, [r1, #0]
 800e59e:	2002      	movpl	r0, #2
 800e5a0:	4770      	bx	lr
 800e5a2:	b298      	uxth	r0, r3
 800e5a4:	b9a8      	cbnz	r0, 800e5d2 <__lo0bits+0x52>
 800e5a6:	0c1b      	lsrs	r3, r3, #16
 800e5a8:	2010      	movs	r0, #16
 800e5aa:	b2da      	uxtb	r2, r3
 800e5ac:	b90a      	cbnz	r2, 800e5b2 <__lo0bits+0x32>
 800e5ae:	3008      	adds	r0, #8
 800e5b0:	0a1b      	lsrs	r3, r3, #8
 800e5b2:	071a      	lsls	r2, r3, #28
 800e5b4:	bf04      	itt	eq
 800e5b6:	091b      	lsreq	r3, r3, #4
 800e5b8:	3004      	addeq	r0, #4
 800e5ba:	079a      	lsls	r2, r3, #30
 800e5bc:	bf04      	itt	eq
 800e5be:	089b      	lsreq	r3, r3, #2
 800e5c0:	3002      	addeq	r0, #2
 800e5c2:	07da      	lsls	r2, r3, #31
 800e5c4:	d403      	bmi.n	800e5ce <__lo0bits+0x4e>
 800e5c6:	085b      	lsrs	r3, r3, #1
 800e5c8:	f100 0001 	add.w	r0, r0, #1
 800e5cc:	d005      	beq.n	800e5da <__lo0bits+0x5a>
 800e5ce:	600b      	str	r3, [r1, #0]
 800e5d0:	4770      	bx	lr
 800e5d2:	4610      	mov	r0, r2
 800e5d4:	e7e9      	b.n	800e5aa <__lo0bits+0x2a>
 800e5d6:	2000      	movs	r0, #0
 800e5d8:	4770      	bx	lr
 800e5da:	2020      	movs	r0, #32
 800e5dc:	4770      	bx	lr
	...

0800e5e0 <__i2b>:
 800e5e0:	b510      	push	{r4, lr}
 800e5e2:	460c      	mov	r4, r1
 800e5e4:	2101      	movs	r1, #1
 800e5e6:	f7ff ff03 	bl	800e3f0 <_Balloc>
 800e5ea:	4602      	mov	r2, r0
 800e5ec:	b928      	cbnz	r0, 800e5fa <__i2b+0x1a>
 800e5ee:	4b05      	ldr	r3, [pc, #20]	; (800e604 <__i2b+0x24>)
 800e5f0:	4805      	ldr	r0, [pc, #20]	; (800e608 <__i2b+0x28>)
 800e5f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e5f6:	f000 fd35 	bl	800f064 <__assert_func>
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	6144      	str	r4, [r0, #20]
 800e5fe:	6103      	str	r3, [r0, #16]
 800e600:	bd10      	pop	{r4, pc}
 800e602:	bf00      	nop
 800e604:	0801041b 	.word	0x0801041b
 800e608:	0801048c 	.word	0x0801048c

0800e60c <__multiply>:
 800e60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e610:	4691      	mov	r9, r2
 800e612:	690a      	ldr	r2, [r1, #16]
 800e614:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e618:	429a      	cmp	r2, r3
 800e61a:	bfb8      	it	lt
 800e61c:	460b      	movlt	r3, r1
 800e61e:	460c      	mov	r4, r1
 800e620:	bfbc      	itt	lt
 800e622:	464c      	movlt	r4, r9
 800e624:	4699      	movlt	r9, r3
 800e626:	6927      	ldr	r7, [r4, #16]
 800e628:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e62c:	68a3      	ldr	r3, [r4, #8]
 800e62e:	6861      	ldr	r1, [r4, #4]
 800e630:	eb07 060a 	add.w	r6, r7, sl
 800e634:	42b3      	cmp	r3, r6
 800e636:	b085      	sub	sp, #20
 800e638:	bfb8      	it	lt
 800e63a:	3101      	addlt	r1, #1
 800e63c:	f7ff fed8 	bl	800e3f0 <_Balloc>
 800e640:	b930      	cbnz	r0, 800e650 <__multiply+0x44>
 800e642:	4602      	mov	r2, r0
 800e644:	4b44      	ldr	r3, [pc, #272]	; (800e758 <__multiply+0x14c>)
 800e646:	4845      	ldr	r0, [pc, #276]	; (800e75c <__multiply+0x150>)
 800e648:	f240 115d 	movw	r1, #349	; 0x15d
 800e64c:	f000 fd0a 	bl	800f064 <__assert_func>
 800e650:	f100 0514 	add.w	r5, r0, #20
 800e654:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e658:	462b      	mov	r3, r5
 800e65a:	2200      	movs	r2, #0
 800e65c:	4543      	cmp	r3, r8
 800e65e:	d321      	bcc.n	800e6a4 <__multiply+0x98>
 800e660:	f104 0314 	add.w	r3, r4, #20
 800e664:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e668:	f109 0314 	add.w	r3, r9, #20
 800e66c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e670:	9202      	str	r2, [sp, #8]
 800e672:	1b3a      	subs	r2, r7, r4
 800e674:	3a15      	subs	r2, #21
 800e676:	f022 0203 	bic.w	r2, r2, #3
 800e67a:	3204      	adds	r2, #4
 800e67c:	f104 0115 	add.w	r1, r4, #21
 800e680:	428f      	cmp	r7, r1
 800e682:	bf38      	it	cc
 800e684:	2204      	movcc	r2, #4
 800e686:	9201      	str	r2, [sp, #4]
 800e688:	9a02      	ldr	r2, [sp, #8]
 800e68a:	9303      	str	r3, [sp, #12]
 800e68c:	429a      	cmp	r2, r3
 800e68e:	d80c      	bhi.n	800e6aa <__multiply+0x9e>
 800e690:	2e00      	cmp	r6, #0
 800e692:	dd03      	ble.n	800e69c <__multiply+0x90>
 800e694:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d05a      	beq.n	800e752 <__multiply+0x146>
 800e69c:	6106      	str	r6, [r0, #16]
 800e69e:	b005      	add	sp, #20
 800e6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6a4:	f843 2b04 	str.w	r2, [r3], #4
 800e6a8:	e7d8      	b.n	800e65c <__multiply+0x50>
 800e6aa:	f8b3 a000 	ldrh.w	sl, [r3]
 800e6ae:	f1ba 0f00 	cmp.w	sl, #0
 800e6b2:	d024      	beq.n	800e6fe <__multiply+0xf2>
 800e6b4:	f104 0e14 	add.w	lr, r4, #20
 800e6b8:	46a9      	mov	r9, r5
 800e6ba:	f04f 0c00 	mov.w	ip, #0
 800e6be:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e6c2:	f8d9 1000 	ldr.w	r1, [r9]
 800e6c6:	fa1f fb82 	uxth.w	fp, r2
 800e6ca:	b289      	uxth	r1, r1
 800e6cc:	fb0a 110b 	mla	r1, sl, fp, r1
 800e6d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e6d4:	f8d9 2000 	ldr.w	r2, [r9]
 800e6d8:	4461      	add	r1, ip
 800e6da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e6de:	fb0a c20b 	mla	r2, sl, fp, ip
 800e6e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e6e6:	b289      	uxth	r1, r1
 800e6e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e6ec:	4577      	cmp	r7, lr
 800e6ee:	f849 1b04 	str.w	r1, [r9], #4
 800e6f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e6f6:	d8e2      	bhi.n	800e6be <__multiply+0xb2>
 800e6f8:	9a01      	ldr	r2, [sp, #4]
 800e6fa:	f845 c002 	str.w	ip, [r5, r2]
 800e6fe:	9a03      	ldr	r2, [sp, #12]
 800e700:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e704:	3304      	adds	r3, #4
 800e706:	f1b9 0f00 	cmp.w	r9, #0
 800e70a:	d020      	beq.n	800e74e <__multiply+0x142>
 800e70c:	6829      	ldr	r1, [r5, #0]
 800e70e:	f104 0c14 	add.w	ip, r4, #20
 800e712:	46ae      	mov	lr, r5
 800e714:	f04f 0a00 	mov.w	sl, #0
 800e718:	f8bc b000 	ldrh.w	fp, [ip]
 800e71c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e720:	fb09 220b 	mla	r2, r9, fp, r2
 800e724:	4492      	add	sl, r2
 800e726:	b289      	uxth	r1, r1
 800e728:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e72c:	f84e 1b04 	str.w	r1, [lr], #4
 800e730:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e734:	f8be 1000 	ldrh.w	r1, [lr]
 800e738:	0c12      	lsrs	r2, r2, #16
 800e73a:	fb09 1102 	mla	r1, r9, r2, r1
 800e73e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e742:	4567      	cmp	r7, ip
 800e744:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e748:	d8e6      	bhi.n	800e718 <__multiply+0x10c>
 800e74a:	9a01      	ldr	r2, [sp, #4]
 800e74c:	50a9      	str	r1, [r5, r2]
 800e74e:	3504      	adds	r5, #4
 800e750:	e79a      	b.n	800e688 <__multiply+0x7c>
 800e752:	3e01      	subs	r6, #1
 800e754:	e79c      	b.n	800e690 <__multiply+0x84>
 800e756:	bf00      	nop
 800e758:	0801041b 	.word	0x0801041b
 800e75c:	0801048c 	.word	0x0801048c

0800e760 <__pow5mult>:
 800e760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e764:	4615      	mov	r5, r2
 800e766:	f012 0203 	ands.w	r2, r2, #3
 800e76a:	4606      	mov	r6, r0
 800e76c:	460f      	mov	r7, r1
 800e76e:	d007      	beq.n	800e780 <__pow5mult+0x20>
 800e770:	4c25      	ldr	r4, [pc, #148]	; (800e808 <__pow5mult+0xa8>)
 800e772:	3a01      	subs	r2, #1
 800e774:	2300      	movs	r3, #0
 800e776:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e77a:	f7ff fe9b 	bl	800e4b4 <__multadd>
 800e77e:	4607      	mov	r7, r0
 800e780:	10ad      	asrs	r5, r5, #2
 800e782:	d03d      	beq.n	800e800 <__pow5mult+0xa0>
 800e784:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e786:	b97c      	cbnz	r4, 800e7a8 <__pow5mult+0x48>
 800e788:	2010      	movs	r0, #16
 800e78a:	f7ff fe1b 	bl	800e3c4 <malloc>
 800e78e:	4602      	mov	r2, r0
 800e790:	6270      	str	r0, [r6, #36]	; 0x24
 800e792:	b928      	cbnz	r0, 800e7a0 <__pow5mult+0x40>
 800e794:	4b1d      	ldr	r3, [pc, #116]	; (800e80c <__pow5mult+0xac>)
 800e796:	481e      	ldr	r0, [pc, #120]	; (800e810 <__pow5mult+0xb0>)
 800e798:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e79c:	f000 fc62 	bl	800f064 <__assert_func>
 800e7a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e7a4:	6004      	str	r4, [r0, #0]
 800e7a6:	60c4      	str	r4, [r0, #12]
 800e7a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e7ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e7b0:	b94c      	cbnz	r4, 800e7c6 <__pow5mult+0x66>
 800e7b2:	f240 2171 	movw	r1, #625	; 0x271
 800e7b6:	4630      	mov	r0, r6
 800e7b8:	f7ff ff12 	bl	800e5e0 <__i2b>
 800e7bc:	2300      	movs	r3, #0
 800e7be:	f8c8 0008 	str.w	r0, [r8, #8]
 800e7c2:	4604      	mov	r4, r0
 800e7c4:	6003      	str	r3, [r0, #0]
 800e7c6:	f04f 0900 	mov.w	r9, #0
 800e7ca:	07eb      	lsls	r3, r5, #31
 800e7cc:	d50a      	bpl.n	800e7e4 <__pow5mult+0x84>
 800e7ce:	4639      	mov	r1, r7
 800e7d0:	4622      	mov	r2, r4
 800e7d2:	4630      	mov	r0, r6
 800e7d4:	f7ff ff1a 	bl	800e60c <__multiply>
 800e7d8:	4639      	mov	r1, r7
 800e7da:	4680      	mov	r8, r0
 800e7dc:	4630      	mov	r0, r6
 800e7de:	f7ff fe47 	bl	800e470 <_Bfree>
 800e7e2:	4647      	mov	r7, r8
 800e7e4:	106d      	asrs	r5, r5, #1
 800e7e6:	d00b      	beq.n	800e800 <__pow5mult+0xa0>
 800e7e8:	6820      	ldr	r0, [r4, #0]
 800e7ea:	b938      	cbnz	r0, 800e7fc <__pow5mult+0x9c>
 800e7ec:	4622      	mov	r2, r4
 800e7ee:	4621      	mov	r1, r4
 800e7f0:	4630      	mov	r0, r6
 800e7f2:	f7ff ff0b 	bl	800e60c <__multiply>
 800e7f6:	6020      	str	r0, [r4, #0]
 800e7f8:	f8c0 9000 	str.w	r9, [r0]
 800e7fc:	4604      	mov	r4, r0
 800e7fe:	e7e4      	b.n	800e7ca <__pow5mult+0x6a>
 800e800:	4638      	mov	r0, r7
 800e802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e806:	bf00      	nop
 800e808:	080105d8 	.word	0x080105d8
 800e80c:	080103a9 	.word	0x080103a9
 800e810:	0801048c 	.word	0x0801048c

0800e814 <__lshift>:
 800e814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e818:	460c      	mov	r4, r1
 800e81a:	6849      	ldr	r1, [r1, #4]
 800e81c:	6923      	ldr	r3, [r4, #16]
 800e81e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e822:	68a3      	ldr	r3, [r4, #8]
 800e824:	4607      	mov	r7, r0
 800e826:	4691      	mov	r9, r2
 800e828:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e82c:	f108 0601 	add.w	r6, r8, #1
 800e830:	42b3      	cmp	r3, r6
 800e832:	db0b      	blt.n	800e84c <__lshift+0x38>
 800e834:	4638      	mov	r0, r7
 800e836:	f7ff fddb 	bl	800e3f0 <_Balloc>
 800e83a:	4605      	mov	r5, r0
 800e83c:	b948      	cbnz	r0, 800e852 <__lshift+0x3e>
 800e83e:	4602      	mov	r2, r0
 800e840:	4b2a      	ldr	r3, [pc, #168]	; (800e8ec <__lshift+0xd8>)
 800e842:	482b      	ldr	r0, [pc, #172]	; (800e8f0 <__lshift+0xdc>)
 800e844:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e848:	f000 fc0c 	bl	800f064 <__assert_func>
 800e84c:	3101      	adds	r1, #1
 800e84e:	005b      	lsls	r3, r3, #1
 800e850:	e7ee      	b.n	800e830 <__lshift+0x1c>
 800e852:	2300      	movs	r3, #0
 800e854:	f100 0114 	add.w	r1, r0, #20
 800e858:	f100 0210 	add.w	r2, r0, #16
 800e85c:	4618      	mov	r0, r3
 800e85e:	4553      	cmp	r3, sl
 800e860:	db37      	blt.n	800e8d2 <__lshift+0xbe>
 800e862:	6920      	ldr	r0, [r4, #16]
 800e864:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e868:	f104 0314 	add.w	r3, r4, #20
 800e86c:	f019 091f 	ands.w	r9, r9, #31
 800e870:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e874:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e878:	d02f      	beq.n	800e8da <__lshift+0xc6>
 800e87a:	f1c9 0e20 	rsb	lr, r9, #32
 800e87e:	468a      	mov	sl, r1
 800e880:	f04f 0c00 	mov.w	ip, #0
 800e884:	681a      	ldr	r2, [r3, #0]
 800e886:	fa02 f209 	lsl.w	r2, r2, r9
 800e88a:	ea42 020c 	orr.w	r2, r2, ip
 800e88e:	f84a 2b04 	str.w	r2, [sl], #4
 800e892:	f853 2b04 	ldr.w	r2, [r3], #4
 800e896:	4298      	cmp	r0, r3
 800e898:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e89c:	d8f2      	bhi.n	800e884 <__lshift+0x70>
 800e89e:	1b03      	subs	r3, r0, r4
 800e8a0:	3b15      	subs	r3, #21
 800e8a2:	f023 0303 	bic.w	r3, r3, #3
 800e8a6:	3304      	adds	r3, #4
 800e8a8:	f104 0215 	add.w	r2, r4, #21
 800e8ac:	4290      	cmp	r0, r2
 800e8ae:	bf38      	it	cc
 800e8b0:	2304      	movcc	r3, #4
 800e8b2:	f841 c003 	str.w	ip, [r1, r3]
 800e8b6:	f1bc 0f00 	cmp.w	ip, #0
 800e8ba:	d001      	beq.n	800e8c0 <__lshift+0xac>
 800e8bc:	f108 0602 	add.w	r6, r8, #2
 800e8c0:	3e01      	subs	r6, #1
 800e8c2:	4638      	mov	r0, r7
 800e8c4:	612e      	str	r6, [r5, #16]
 800e8c6:	4621      	mov	r1, r4
 800e8c8:	f7ff fdd2 	bl	800e470 <_Bfree>
 800e8cc:	4628      	mov	r0, r5
 800e8ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800e8d6:	3301      	adds	r3, #1
 800e8d8:	e7c1      	b.n	800e85e <__lshift+0x4a>
 800e8da:	3904      	subs	r1, #4
 800e8dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8e0:	f841 2f04 	str.w	r2, [r1, #4]!
 800e8e4:	4298      	cmp	r0, r3
 800e8e6:	d8f9      	bhi.n	800e8dc <__lshift+0xc8>
 800e8e8:	e7ea      	b.n	800e8c0 <__lshift+0xac>
 800e8ea:	bf00      	nop
 800e8ec:	0801041b 	.word	0x0801041b
 800e8f0:	0801048c 	.word	0x0801048c

0800e8f4 <__mcmp>:
 800e8f4:	b530      	push	{r4, r5, lr}
 800e8f6:	6902      	ldr	r2, [r0, #16]
 800e8f8:	690c      	ldr	r4, [r1, #16]
 800e8fa:	1b12      	subs	r2, r2, r4
 800e8fc:	d10e      	bne.n	800e91c <__mcmp+0x28>
 800e8fe:	f100 0314 	add.w	r3, r0, #20
 800e902:	3114      	adds	r1, #20
 800e904:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e908:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e90c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e910:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e914:	42a5      	cmp	r5, r4
 800e916:	d003      	beq.n	800e920 <__mcmp+0x2c>
 800e918:	d305      	bcc.n	800e926 <__mcmp+0x32>
 800e91a:	2201      	movs	r2, #1
 800e91c:	4610      	mov	r0, r2
 800e91e:	bd30      	pop	{r4, r5, pc}
 800e920:	4283      	cmp	r3, r0
 800e922:	d3f3      	bcc.n	800e90c <__mcmp+0x18>
 800e924:	e7fa      	b.n	800e91c <__mcmp+0x28>
 800e926:	f04f 32ff 	mov.w	r2, #4294967295
 800e92a:	e7f7      	b.n	800e91c <__mcmp+0x28>

0800e92c <__mdiff>:
 800e92c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e930:	460c      	mov	r4, r1
 800e932:	4606      	mov	r6, r0
 800e934:	4611      	mov	r1, r2
 800e936:	4620      	mov	r0, r4
 800e938:	4690      	mov	r8, r2
 800e93a:	f7ff ffdb 	bl	800e8f4 <__mcmp>
 800e93e:	1e05      	subs	r5, r0, #0
 800e940:	d110      	bne.n	800e964 <__mdiff+0x38>
 800e942:	4629      	mov	r1, r5
 800e944:	4630      	mov	r0, r6
 800e946:	f7ff fd53 	bl	800e3f0 <_Balloc>
 800e94a:	b930      	cbnz	r0, 800e95a <__mdiff+0x2e>
 800e94c:	4b3a      	ldr	r3, [pc, #232]	; (800ea38 <__mdiff+0x10c>)
 800e94e:	4602      	mov	r2, r0
 800e950:	f240 2132 	movw	r1, #562	; 0x232
 800e954:	4839      	ldr	r0, [pc, #228]	; (800ea3c <__mdiff+0x110>)
 800e956:	f000 fb85 	bl	800f064 <__assert_func>
 800e95a:	2301      	movs	r3, #1
 800e95c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e960:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e964:	bfa4      	itt	ge
 800e966:	4643      	movge	r3, r8
 800e968:	46a0      	movge	r8, r4
 800e96a:	4630      	mov	r0, r6
 800e96c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e970:	bfa6      	itte	ge
 800e972:	461c      	movge	r4, r3
 800e974:	2500      	movge	r5, #0
 800e976:	2501      	movlt	r5, #1
 800e978:	f7ff fd3a 	bl	800e3f0 <_Balloc>
 800e97c:	b920      	cbnz	r0, 800e988 <__mdiff+0x5c>
 800e97e:	4b2e      	ldr	r3, [pc, #184]	; (800ea38 <__mdiff+0x10c>)
 800e980:	4602      	mov	r2, r0
 800e982:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e986:	e7e5      	b.n	800e954 <__mdiff+0x28>
 800e988:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e98c:	6926      	ldr	r6, [r4, #16]
 800e98e:	60c5      	str	r5, [r0, #12]
 800e990:	f104 0914 	add.w	r9, r4, #20
 800e994:	f108 0514 	add.w	r5, r8, #20
 800e998:	f100 0e14 	add.w	lr, r0, #20
 800e99c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e9a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e9a4:	f108 0210 	add.w	r2, r8, #16
 800e9a8:	46f2      	mov	sl, lr
 800e9aa:	2100      	movs	r1, #0
 800e9ac:	f859 3b04 	ldr.w	r3, [r9], #4
 800e9b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e9b4:	fa1f f883 	uxth.w	r8, r3
 800e9b8:	fa11 f18b 	uxtah	r1, r1, fp
 800e9bc:	0c1b      	lsrs	r3, r3, #16
 800e9be:	eba1 0808 	sub.w	r8, r1, r8
 800e9c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e9c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e9ca:	fa1f f888 	uxth.w	r8, r8
 800e9ce:	1419      	asrs	r1, r3, #16
 800e9d0:	454e      	cmp	r6, r9
 800e9d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e9d6:	f84a 3b04 	str.w	r3, [sl], #4
 800e9da:	d8e7      	bhi.n	800e9ac <__mdiff+0x80>
 800e9dc:	1b33      	subs	r3, r6, r4
 800e9de:	3b15      	subs	r3, #21
 800e9e0:	f023 0303 	bic.w	r3, r3, #3
 800e9e4:	3304      	adds	r3, #4
 800e9e6:	3415      	adds	r4, #21
 800e9e8:	42a6      	cmp	r6, r4
 800e9ea:	bf38      	it	cc
 800e9ec:	2304      	movcc	r3, #4
 800e9ee:	441d      	add	r5, r3
 800e9f0:	4473      	add	r3, lr
 800e9f2:	469e      	mov	lr, r3
 800e9f4:	462e      	mov	r6, r5
 800e9f6:	4566      	cmp	r6, ip
 800e9f8:	d30e      	bcc.n	800ea18 <__mdiff+0xec>
 800e9fa:	f10c 0203 	add.w	r2, ip, #3
 800e9fe:	1b52      	subs	r2, r2, r5
 800ea00:	f022 0203 	bic.w	r2, r2, #3
 800ea04:	3d03      	subs	r5, #3
 800ea06:	45ac      	cmp	ip, r5
 800ea08:	bf38      	it	cc
 800ea0a:	2200      	movcc	r2, #0
 800ea0c:	441a      	add	r2, r3
 800ea0e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ea12:	b17b      	cbz	r3, 800ea34 <__mdiff+0x108>
 800ea14:	6107      	str	r7, [r0, #16]
 800ea16:	e7a3      	b.n	800e960 <__mdiff+0x34>
 800ea18:	f856 8b04 	ldr.w	r8, [r6], #4
 800ea1c:	fa11 f288 	uxtah	r2, r1, r8
 800ea20:	1414      	asrs	r4, r2, #16
 800ea22:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ea26:	b292      	uxth	r2, r2
 800ea28:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ea2c:	f84e 2b04 	str.w	r2, [lr], #4
 800ea30:	1421      	asrs	r1, r4, #16
 800ea32:	e7e0      	b.n	800e9f6 <__mdiff+0xca>
 800ea34:	3f01      	subs	r7, #1
 800ea36:	e7ea      	b.n	800ea0e <__mdiff+0xe2>
 800ea38:	0801041b 	.word	0x0801041b
 800ea3c:	0801048c 	.word	0x0801048c

0800ea40 <__d2b>:
 800ea40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ea44:	4689      	mov	r9, r1
 800ea46:	2101      	movs	r1, #1
 800ea48:	ec57 6b10 	vmov	r6, r7, d0
 800ea4c:	4690      	mov	r8, r2
 800ea4e:	f7ff fccf 	bl	800e3f0 <_Balloc>
 800ea52:	4604      	mov	r4, r0
 800ea54:	b930      	cbnz	r0, 800ea64 <__d2b+0x24>
 800ea56:	4602      	mov	r2, r0
 800ea58:	4b25      	ldr	r3, [pc, #148]	; (800eaf0 <__d2b+0xb0>)
 800ea5a:	4826      	ldr	r0, [pc, #152]	; (800eaf4 <__d2b+0xb4>)
 800ea5c:	f240 310a 	movw	r1, #778	; 0x30a
 800ea60:	f000 fb00 	bl	800f064 <__assert_func>
 800ea64:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ea68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ea6c:	bb35      	cbnz	r5, 800eabc <__d2b+0x7c>
 800ea6e:	2e00      	cmp	r6, #0
 800ea70:	9301      	str	r3, [sp, #4]
 800ea72:	d028      	beq.n	800eac6 <__d2b+0x86>
 800ea74:	4668      	mov	r0, sp
 800ea76:	9600      	str	r6, [sp, #0]
 800ea78:	f7ff fd82 	bl	800e580 <__lo0bits>
 800ea7c:	9900      	ldr	r1, [sp, #0]
 800ea7e:	b300      	cbz	r0, 800eac2 <__d2b+0x82>
 800ea80:	9a01      	ldr	r2, [sp, #4]
 800ea82:	f1c0 0320 	rsb	r3, r0, #32
 800ea86:	fa02 f303 	lsl.w	r3, r2, r3
 800ea8a:	430b      	orrs	r3, r1
 800ea8c:	40c2      	lsrs	r2, r0
 800ea8e:	6163      	str	r3, [r4, #20]
 800ea90:	9201      	str	r2, [sp, #4]
 800ea92:	9b01      	ldr	r3, [sp, #4]
 800ea94:	61a3      	str	r3, [r4, #24]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	bf14      	ite	ne
 800ea9a:	2202      	movne	r2, #2
 800ea9c:	2201      	moveq	r2, #1
 800ea9e:	6122      	str	r2, [r4, #16]
 800eaa0:	b1d5      	cbz	r5, 800ead8 <__d2b+0x98>
 800eaa2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800eaa6:	4405      	add	r5, r0
 800eaa8:	f8c9 5000 	str.w	r5, [r9]
 800eaac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800eab0:	f8c8 0000 	str.w	r0, [r8]
 800eab4:	4620      	mov	r0, r4
 800eab6:	b003      	add	sp, #12
 800eab8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eabc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eac0:	e7d5      	b.n	800ea6e <__d2b+0x2e>
 800eac2:	6161      	str	r1, [r4, #20]
 800eac4:	e7e5      	b.n	800ea92 <__d2b+0x52>
 800eac6:	a801      	add	r0, sp, #4
 800eac8:	f7ff fd5a 	bl	800e580 <__lo0bits>
 800eacc:	9b01      	ldr	r3, [sp, #4]
 800eace:	6163      	str	r3, [r4, #20]
 800ead0:	2201      	movs	r2, #1
 800ead2:	6122      	str	r2, [r4, #16]
 800ead4:	3020      	adds	r0, #32
 800ead6:	e7e3      	b.n	800eaa0 <__d2b+0x60>
 800ead8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eadc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800eae0:	f8c9 0000 	str.w	r0, [r9]
 800eae4:	6918      	ldr	r0, [r3, #16]
 800eae6:	f7ff fd2b 	bl	800e540 <__hi0bits>
 800eaea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eaee:	e7df      	b.n	800eab0 <__d2b+0x70>
 800eaf0:	0801041b 	.word	0x0801041b
 800eaf4:	0801048c 	.word	0x0801048c

0800eaf8 <_calloc_r>:
 800eaf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eafa:	fba1 2402 	umull	r2, r4, r1, r2
 800eafe:	b94c      	cbnz	r4, 800eb14 <_calloc_r+0x1c>
 800eb00:	4611      	mov	r1, r2
 800eb02:	9201      	str	r2, [sp, #4]
 800eb04:	f000 f87a 	bl	800ebfc <_malloc_r>
 800eb08:	9a01      	ldr	r2, [sp, #4]
 800eb0a:	4605      	mov	r5, r0
 800eb0c:	b930      	cbnz	r0, 800eb1c <_calloc_r+0x24>
 800eb0e:	4628      	mov	r0, r5
 800eb10:	b003      	add	sp, #12
 800eb12:	bd30      	pop	{r4, r5, pc}
 800eb14:	220c      	movs	r2, #12
 800eb16:	6002      	str	r2, [r0, #0]
 800eb18:	2500      	movs	r5, #0
 800eb1a:	e7f8      	b.n	800eb0e <_calloc_r+0x16>
 800eb1c:	4621      	mov	r1, r4
 800eb1e:	f7fd fdf3 	bl	800c708 <memset>
 800eb22:	e7f4      	b.n	800eb0e <_calloc_r+0x16>

0800eb24 <_free_r>:
 800eb24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eb26:	2900      	cmp	r1, #0
 800eb28:	d044      	beq.n	800ebb4 <_free_r+0x90>
 800eb2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb2e:	9001      	str	r0, [sp, #4]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	f1a1 0404 	sub.w	r4, r1, #4
 800eb36:	bfb8      	it	lt
 800eb38:	18e4      	addlt	r4, r4, r3
 800eb3a:	f000 fb19 	bl	800f170 <__malloc_lock>
 800eb3e:	4a1e      	ldr	r2, [pc, #120]	; (800ebb8 <_free_r+0x94>)
 800eb40:	9801      	ldr	r0, [sp, #4]
 800eb42:	6813      	ldr	r3, [r2, #0]
 800eb44:	b933      	cbnz	r3, 800eb54 <_free_r+0x30>
 800eb46:	6063      	str	r3, [r4, #4]
 800eb48:	6014      	str	r4, [r2, #0]
 800eb4a:	b003      	add	sp, #12
 800eb4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eb50:	f000 bb14 	b.w	800f17c <__malloc_unlock>
 800eb54:	42a3      	cmp	r3, r4
 800eb56:	d908      	bls.n	800eb6a <_free_r+0x46>
 800eb58:	6825      	ldr	r5, [r4, #0]
 800eb5a:	1961      	adds	r1, r4, r5
 800eb5c:	428b      	cmp	r3, r1
 800eb5e:	bf01      	itttt	eq
 800eb60:	6819      	ldreq	r1, [r3, #0]
 800eb62:	685b      	ldreq	r3, [r3, #4]
 800eb64:	1949      	addeq	r1, r1, r5
 800eb66:	6021      	streq	r1, [r4, #0]
 800eb68:	e7ed      	b.n	800eb46 <_free_r+0x22>
 800eb6a:	461a      	mov	r2, r3
 800eb6c:	685b      	ldr	r3, [r3, #4]
 800eb6e:	b10b      	cbz	r3, 800eb74 <_free_r+0x50>
 800eb70:	42a3      	cmp	r3, r4
 800eb72:	d9fa      	bls.n	800eb6a <_free_r+0x46>
 800eb74:	6811      	ldr	r1, [r2, #0]
 800eb76:	1855      	adds	r5, r2, r1
 800eb78:	42a5      	cmp	r5, r4
 800eb7a:	d10b      	bne.n	800eb94 <_free_r+0x70>
 800eb7c:	6824      	ldr	r4, [r4, #0]
 800eb7e:	4421      	add	r1, r4
 800eb80:	1854      	adds	r4, r2, r1
 800eb82:	42a3      	cmp	r3, r4
 800eb84:	6011      	str	r1, [r2, #0]
 800eb86:	d1e0      	bne.n	800eb4a <_free_r+0x26>
 800eb88:	681c      	ldr	r4, [r3, #0]
 800eb8a:	685b      	ldr	r3, [r3, #4]
 800eb8c:	6053      	str	r3, [r2, #4]
 800eb8e:	4421      	add	r1, r4
 800eb90:	6011      	str	r1, [r2, #0]
 800eb92:	e7da      	b.n	800eb4a <_free_r+0x26>
 800eb94:	d902      	bls.n	800eb9c <_free_r+0x78>
 800eb96:	230c      	movs	r3, #12
 800eb98:	6003      	str	r3, [r0, #0]
 800eb9a:	e7d6      	b.n	800eb4a <_free_r+0x26>
 800eb9c:	6825      	ldr	r5, [r4, #0]
 800eb9e:	1961      	adds	r1, r4, r5
 800eba0:	428b      	cmp	r3, r1
 800eba2:	bf04      	itt	eq
 800eba4:	6819      	ldreq	r1, [r3, #0]
 800eba6:	685b      	ldreq	r3, [r3, #4]
 800eba8:	6063      	str	r3, [r4, #4]
 800ebaa:	bf04      	itt	eq
 800ebac:	1949      	addeq	r1, r1, r5
 800ebae:	6021      	streq	r1, [r4, #0]
 800ebb0:	6054      	str	r4, [r2, #4]
 800ebb2:	e7ca      	b.n	800eb4a <_free_r+0x26>
 800ebb4:	b003      	add	sp, #12
 800ebb6:	bd30      	pop	{r4, r5, pc}
 800ebb8:	20000698 	.word	0x20000698

0800ebbc <sbrk_aligned>:
 800ebbc:	b570      	push	{r4, r5, r6, lr}
 800ebbe:	4e0e      	ldr	r6, [pc, #56]	; (800ebf8 <sbrk_aligned+0x3c>)
 800ebc0:	460c      	mov	r4, r1
 800ebc2:	6831      	ldr	r1, [r6, #0]
 800ebc4:	4605      	mov	r5, r0
 800ebc6:	b911      	cbnz	r1, 800ebce <sbrk_aligned+0x12>
 800ebc8:	f000 f9e6 	bl	800ef98 <_sbrk_r>
 800ebcc:	6030      	str	r0, [r6, #0]
 800ebce:	4621      	mov	r1, r4
 800ebd0:	4628      	mov	r0, r5
 800ebd2:	f000 f9e1 	bl	800ef98 <_sbrk_r>
 800ebd6:	1c43      	adds	r3, r0, #1
 800ebd8:	d00a      	beq.n	800ebf0 <sbrk_aligned+0x34>
 800ebda:	1cc4      	adds	r4, r0, #3
 800ebdc:	f024 0403 	bic.w	r4, r4, #3
 800ebe0:	42a0      	cmp	r0, r4
 800ebe2:	d007      	beq.n	800ebf4 <sbrk_aligned+0x38>
 800ebe4:	1a21      	subs	r1, r4, r0
 800ebe6:	4628      	mov	r0, r5
 800ebe8:	f000 f9d6 	bl	800ef98 <_sbrk_r>
 800ebec:	3001      	adds	r0, #1
 800ebee:	d101      	bne.n	800ebf4 <sbrk_aligned+0x38>
 800ebf0:	f04f 34ff 	mov.w	r4, #4294967295
 800ebf4:	4620      	mov	r0, r4
 800ebf6:	bd70      	pop	{r4, r5, r6, pc}
 800ebf8:	2000069c 	.word	0x2000069c

0800ebfc <_malloc_r>:
 800ebfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec00:	1ccd      	adds	r5, r1, #3
 800ec02:	f025 0503 	bic.w	r5, r5, #3
 800ec06:	3508      	adds	r5, #8
 800ec08:	2d0c      	cmp	r5, #12
 800ec0a:	bf38      	it	cc
 800ec0c:	250c      	movcc	r5, #12
 800ec0e:	2d00      	cmp	r5, #0
 800ec10:	4607      	mov	r7, r0
 800ec12:	db01      	blt.n	800ec18 <_malloc_r+0x1c>
 800ec14:	42a9      	cmp	r1, r5
 800ec16:	d905      	bls.n	800ec24 <_malloc_r+0x28>
 800ec18:	230c      	movs	r3, #12
 800ec1a:	603b      	str	r3, [r7, #0]
 800ec1c:	2600      	movs	r6, #0
 800ec1e:	4630      	mov	r0, r6
 800ec20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec24:	4e2e      	ldr	r6, [pc, #184]	; (800ece0 <_malloc_r+0xe4>)
 800ec26:	f000 faa3 	bl	800f170 <__malloc_lock>
 800ec2a:	6833      	ldr	r3, [r6, #0]
 800ec2c:	461c      	mov	r4, r3
 800ec2e:	bb34      	cbnz	r4, 800ec7e <_malloc_r+0x82>
 800ec30:	4629      	mov	r1, r5
 800ec32:	4638      	mov	r0, r7
 800ec34:	f7ff ffc2 	bl	800ebbc <sbrk_aligned>
 800ec38:	1c43      	adds	r3, r0, #1
 800ec3a:	4604      	mov	r4, r0
 800ec3c:	d14d      	bne.n	800ecda <_malloc_r+0xde>
 800ec3e:	6834      	ldr	r4, [r6, #0]
 800ec40:	4626      	mov	r6, r4
 800ec42:	2e00      	cmp	r6, #0
 800ec44:	d140      	bne.n	800ecc8 <_malloc_r+0xcc>
 800ec46:	6823      	ldr	r3, [r4, #0]
 800ec48:	4631      	mov	r1, r6
 800ec4a:	4638      	mov	r0, r7
 800ec4c:	eb04 0803 	add.w	r8, r4, r3
 800ec50:	f000 f9a2 	bl	800ef98 <_sbrk_r>
 800ec54:	4580      	cmp	r8, r0
 800ec56:	d13a      	bne.n	800ecce <_malloc_r+0xd2>
 800ec58:	6821      	ldr	r1, [r4, #0]
 800ec5a:	3503      	adds	r5, #3
 800ec5c:	1a6d      	subs	r5, r5, r1
 800ec5e:	f025 0503 	bic.w	r5, r5, #3
 800ec62:	3508      	adds	r5, #8
 800ec64:	2d0c      	cmp	r5, #12
 800ec66:	bf38      	it	cc
 800ec68:	250c      	movcc	r5, #12
 800ec6a:	4629      	mov	r1, r5
 800ec6c:	4638      	mov	r0, r7
 800ec6e:	f7ff ffa5 	bl	800ebbc <sbrk_aligned>
 800ec72:	3001      	adds	r0, #1
 800ec74:	d02b      	beq.n	800ecce <_malloc_r+0xd2>
 800ec76:	6823      	ldr	r3, [r4, #0]
 800ec78:	442b      	add	r3, r5
 800ec7a:	6023      	str	r3, [r4, #0]
 800ec7c:	e00e      	b.n	800ec9c <_malloc_r+0xa0>
 800ec7e:	6822      	ldr	r2, [r4, #0]
 800ec80:	1b52      	subs	r2, r2, r5
 800ec82:	d41e      	bmi.n	800ecc2 <_malloc_r+0xc6>
 800ec84:	2a0b      	cmp	r2, #11
 800ec86:	d916      	bls.n	800ecb6 <_malloc_r+0xba>
 800ec88:	1961      	adds	r1, r4, r5
 800ec8a:	42a3      	cmp	r3, r4
 800ec8c:	6025      	str	r5, [r4, #0]
 800ec8e:	bf18      	it	ne
 800ec90:	6059      	strne	r1, [r3, #4]
 800ec92:	6863      	ldr	r3, [r4, #4]
 800ec94:	bf08      	it	eq
 800ec96:	6031      	streq	r1, [r6, #0]
 800ec98:	5162      	str	r2, [r4, r5]
 800ec9a:	604b      	str	r3, [r1, #4]
 800ec9c:	4638      	mov	r0, r7
 800ec9e:	f104 060b 	add.w	r6, r4, #11
 800eca2:	f000 fa6b 	bl	800f17c <__malloc_unlock>
 800eca6:	f026 0607 	bic.w	r6, r6, #7
 800ecaa:	1d23      	adds	r3, r4, #4
 800ecac:	1af2      	subs	r2, r6, r3
 800ecae:	d0b6      	beq.n	800ec1e <_malloc_r+0x22>
 800ecb0:	1b9b      	subs	r3, r3, r6
 800ecb2:	50a3      	str	r3, [r4, r2]
 800ecb4:	e7b3      	b.n	800ec1e <_malloc_r+0x22>
 800ecb6:	6862      	ldr	r2, [r4, #4]
 800ecb8:	42a3      	cmp	r3, r4
 800ecba:	bf0c      	ite	eq
 800ecbc:	6032      	streq	r2, [r6, #0]
 800ecbe:	605a      	strne	r2, [r3, #4]
 800ecc0:	e7ec      	b.n	800ec9c <_malloc_r+0xa0>
 800ecc2:	4623      	mov	r3, r4
 800ecc4:	6864      	ldr	r4, [r4, #4]
 800ecc6:	e7b2      	b.n	800ec2e <_malloc_r+0x32>
 800ecc8:	4634      	mov	r4, r6
 800ecca:	6876      	ldr	r6, [r6, #4]
 800eccc:	e7b9      	b.n	800ec42 <_malloc_r+0x46>
 800ecce:	230c      	movs	r3, #12
 800ecd0:	603b      	str	r3, [r7, #0]
 800ecd2:	4638      	mov	r0, r7
 800ecd4:	f000 fa52 	bl	800f17c <__malloc_unlock>
 800ecd8:	e7a1      	b.n	800ec1e <_malloc_r+0x22>
 800ecda:	6025      	str	r5, [r4, #0]
 800ecdc:	e7de      	b.n	800ec9c <_malloc_r+0xa0>
 800ecde:	bf00      	nop
 800ece0:	20000698 	.word	0x20000698

0800ece4 <__sfputc_r>:
 800ece4:	6893      	ldr	r3, [r2, #8]
 800ece6:	3b01      	subs	r3, #1
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	b410      	push	{r4}
 800ecec:	6093      	str	r3, [r2, #8]
 800ecee:	da08      	bge.n	800ed02 <__sfputc_r+0x1e>
 800ecf0:	6994      	ldr	r4, [r2, #24]
 800ecf2:	42a3      	cmp	r3, r4
 800ecf4:	db01      	blt.n	800ecfa <__sfputc_r+0x16>
 800ecf6:	290a      	cmp	r1, #10
 800ecf8:	d103      	bne.n	800ed02 <__sfputc_r+0x1e>
 800ecfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecfe:	f7fe ba03 	b.w	800d108 <__swbuf_r>
 800ed02:	6813      	ldr	r3, [r2, #0]
 800ed04:	1c58      	adds	r0, r3, #1
 800ed06:	6010      	str	r0, [r2, #0]
 800ed08:	7019      	strb	r1, [r3, #0]
 800ed0a:	4608      	mov	r0, r1
 800ed0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed10:	4770      	bx	lr

0800ed12 <__sfputs_r>:
 800ed12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed14:	4606      	mov	r6, r0
 800ed16:	460f      	mov	r7, r1
 800ed18:	4614      	mov	r4, r2
 800ed1a:	18d5      	adds	r5, r2, r3
 800ed1c:	42ac      	cmp	r4, r5
 800ed1e:	d101      	bne.n	800ed24 <__sfputs_r+0x12>
 800ed20:	2000      	movs	r0, #0
 800ed22:	e007      	b.n	800ed34 <__sfputs_r+0x22>
 800ed24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed28:	463a      	mov	r2, r7
 800ed2a:	4630      	mov	r0, r6
 800ed2c:	f7ff ffda 	bl	800ece4 <__sfputc_r>
 800ed30:	1c43      	adds	r3, r0, #1
 800ed32:	d1f3      	bne.n	800ed1c <__sfputs_r+0xa>
 800ed34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ed38 <_vfiprintf_r>:
 800ed38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed3c:	460d      	mov	r5, r1
 800ed3e:	b09d      	sub	sp, #116	; 0x74
 800ed40:	4614      	mov	r4, r2
 800ed42:	4698      	mov	r8, r3
 800ed44:	4606      	mov	r6, r0
 800ed46:	b118      	cbz	r0, 800ed50 <_vfiprintf_r+0x18>
 800ed48:	6983      	ldr	r3, [r0, #24]
 800ed4a:	b90b      	cbnz	r3, 800ed50 <_vfiprintf_r+0x18>
 800ed4c:	f7ff fa30 	bl	800e1b0 <__sinit>
 800ed50:	4b89      	ldr	r3, [pc, #548]	; (800ef78 <_vfiprintf_r+0x240>)
 800ed52:	429d      	cmp	r5, r3
 800ed54:	d11b      	bne.n	800ed8e <_vfiprintf_r+0x56>
 800ed56:	6875      	ldr	r5, [r6, #4]
 800ed58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed5a:	07d9      	lsls	r1, r3, #31
 800ed5c:	d405      	bmi.n	800ed6a <_vfiprintf_r+0x32>
 800ed5e:	89ab      	ldrh	r3, [r5, #12]
 800ed60:	059a      	lsls	r2, r3, #22
 800ed62:	d402      	bmi.n	800ed6a <_vfiprintf_r+0x32>
 800ed64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed66:	f7ff fac6 	bl	800e2f6 <__retarget_lock_acquire_recursive>
 800ed6a:	89ab      	ldrh	r3, [r5, #12]
 800ed6c:	071b      	lsls	r3, r3, #28
 800ed6e:	d501      	bpl.n	800ed74 <_vfiprintf_r+0x3c>
 800ed70:	692b      	ldr	r3, [r5, #16]
 800ed72:	b9eb      	cbnz	r3, 800edb0 <_vfiprintf_r+0x78>
 800ed74:	4629      	mov	r1, r5
 800ed76:	4630      	mov	r0, r6
 800ed78:	f7fe fa18 	bl	800d1ac <__swsetup_r>
 800ed7c:	b1c0      	cbz	r0, 800edb0 <_vfiprintf_r+0x78>
 800ed7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed80:	07dc      	lsls	r4, r3, #31
 800ed82:	d50e      	bpl.n	800eda2 <_vfiprintf_r+0x6a>
 800ed84:	f04f 30ff 	mov.w	r0, #4294967295
 800ed88:	b01d      	add	sp, #116	; 0x74
 800ed8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed8e:	4b7b      	ldr	r3, [pc, #492]	; (800ef7c <_vfiprintf_r+0x244>)
 800ed90:	429d      	cmp	r5, r3
 800ed92:	d101      	bne.n	800ed98 <_vfiprintf_r+0x60>
 800ed94:	68b5      	ldr	r5, [r6, #8]
 800ed96:	e7df      	b.n	800ed58 <_vfiprintf_r+0x20>
 800ed98:	4b79      	ldr	r3, [pc, #484]	; (800ef80 <_vfiprintf_r+0x248>)
 800ed9a:	429d      	cmp	r5, r3
 800ed9c:	bf08      	it	eq
 800ed9e:	68f5      	ldreq	r5, [r6, #12]
 800eda0:	e7da      	b.n	800ed58 <_vfiprintf_r+0x20>
 800eda2:	89ab      	ldrh	r3, [r5, #12]
 800eda4:	0598      	lsls	r0, r3, #22
 800eda6:	d4ed      	bmi.n	800ed84 <_vfiprintf_r+0x4c>
 800eda8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800edaa:	f7ff faa5 	bl	800e2f8 <__retarget_lock_release_recursive>
 800edae:	e7e9      	b.n	800ed84 <_vfiprintf_r+0x4c>
 800edb0:	2300      	movs	r3, #0
 800edb2:	9309      	str	r3, [sp, #36]	; 0x24
 800edb4:	2320      	movs	r3, #32
 800edb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800edba:	f8cd 800c 	str.w	r8, [sp, #12]
 800edbe:	2330      	movs	r3, #48	; 0x30
 800edc0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ef84 <_vfiprintf_r+0x24c>
 800edc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800edc8:	f04f 0901 	mov.w	r9, #1
 800edcc:	4623      	mov	r3, r4
 800edce:	469a      	mov	sl, r3
 800edd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800edd4:	b10a      	cbz	r2, 800edda <_vfiprintf_r+0xa2>
 800edd6:	2a25      	cmp	r2, #37	; 0x25
 800edd8:	d1f9      	bne.n	800edce <_vfiprintf_r+0x96>
 800edda:	ebba 0b04 	subs.w	fp, sl, r4
 800edde:	d00b      	beq.n	800edf8 <_vfiprintf_r+0xc0>
 800ede0:	465b      	mov	r3, fp
 800ede2:	4622      	mov	r2, r4
 800ede4:	4629      	mov	r1, r5
 800ede6:	4630      	mov	r0, r6
 800ede8:	f7ff ff93 	bl	800ed12 <__sfputs_r>
 800edec:	3001      	adds	r0, #1
 800edee:	f000 80aa 	beq.w	800ef46 <_vfiprintf_r+0x20e>
 800edf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800edf4:	445a      	add	r2, fp
 800edf6:	9209      	str	r2, [sp, #36]	; 0x24
 800edf8:	f89a 3000 	ldrb.w	r3, [sl]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	f000 80a2 	beq.w	800ef46 <_vfiprintf_r+0x20e>
 800ee02:	2300      	movs	r3, #0
 800ee04:	f04f 32ff 	mov.w	r2, #4294967295
 800ee08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee0c:	f10a 0a01 	add.w	sl, sl, #1
 800ee10:	9304      	str	r3, [sp, #16]
 800ee12:	9307      	str	r3, [sp, #28]
 800ee14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ee18:	931a      	str	r3, [sp, #104]	; 0x68
 800ee1a:	4654      	mov	r4, sl
 800ee1c:	2205      	movs	r2, #5
 800ee1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee22:	4858      	ldr	r0, [pc, #352]	; (800ef84 <_vfiprintf_r+0x24c>)
 800ee24:	f7f1 f9dc 	bl	80001e0 <memchr>
 800ee28:	9a04      	ldr	r2, [sp, #16]
 800ee2a:	b9d8      	cbnz	r0, 800ee64 <_vfiprintf_r+0x12c>
 800ee2c:	06d1      	lsls	r1, r2, #27
 800ee2e:	bf44      	itt	mi
 800ee30:	2320      	movmi	r3, #32
 800ee32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee36:	0713      	lsls	r3, r2, #28
 800ee38:	bf44      	itt	mi
 800ee3a:	232b      	movmi	r3, #43	; 0x2b
 800ee3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee40:	f89a 3000 	ldrb.w	r3, [sl]
 800ee44:	2b2a      	cmp	r3, #42	; 0x2a
 800ee46:	d015      	beq.n	800ee74 <_vfiprintf_r+0x13c>
 800ee48:	9a07      	ldr	r2, [sp, #28]
 800ee4a:	4654      	mov	r4, sl
 800ee4c:	2000      	movs	r0, #0
 800ee4e:	f04f 0c0a 	mov.w	ip, #10
 800ee52:	4621      	mov	r1, r4
 800ee54:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee58:	3b30      	subs	r3, #48	; 0x30
 800ee5a:	2b09      	cmp	r3, #9
 800ee5c:	d94e      	bls.n	800eefc <_vfiprintf_r+0x1c4>
 800ee5e:	b1b0      	cbz	r0, 800ee8e <_vfiprintf_r+0x156>
 800ee60:	9207      	str	r2, [sp, #28]
 800ee62:	e014      	b.n	800ee8e <_vfiprintf_r+0x156>
 800ee64:	eba0 0308 	sub.w	r3, r0, r8
 800ee68:	fa09 f303 	lsl.w	r3, r9, r3
 800ee6c:	4313      	orrs	r3, r2
 800ee6e:	9304      	str	r3, [sp, #16]
 800ee70:	46a2      	mov	sl, r4
 800ee72:	e7d2      	b.n	800ee1a <_vfiprintf_r+0xe2>
 800ee74:	9b03      	ldr	r3, [sp, #12]
 800ee76:	1d19      	adds	r1, r3, #4
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	9103      	str	r1, [sp, #12]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	bfbb      	ittet	lt
 800ee80:	425b      	neglt	r3, r3
 800ee82:	f042 0202 	orrlt.w	r2, r2, #2
 800ee86:	9307      	strge	r3, [sp, #28]
 800ee88:	9307      	strlt	r3, [sp, #28]
 800ee8a:	bfb8      	it	lt
 800ee8c:	9204      	strlt	r2, [sp, #16]
 800ee8e:	7823      	ldrb	r3, [r4, #0]
 800ee90:	2b2e      	cmp	r3, #46	; 0x2e
 800ee92:	d10c      	bne.n	800eeae <_vfiprintf_r+0x176>
 800ee94:	7863      	ldrb	r3, [r4, #1]
 800ee96:	2b2a      	cmp	r3, #42	; 0x2a
 800ee98:	d135      	bne.n	800ef06 <_vfiprintf_r+0x1ce>
 800ee9a:	9b03      	ldr	r3, [sp, #12]
 800ee9c:	1d1a      	adds	r2, r3, #4
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	9203      	str	r2, [sp, #12]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	bfb8      	it	lt
 800eea6:	f04f 33ff 	movlt.w	r3, #4294967295
 800eeaa:	3402      	adds	r4, #2
 800eeac:	9305      	str	r3, [sp, #20]
 800eeae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ef94 <_vfiprintf_r+0x25c>
 800eeb2:	7821      	ldrb	r1, [r4, #0]
 800eeb4:	2203      	movs	r2, #3
 800eeb6:	4650      	mov	r0, sl
 800eeb8:	f7f1 f992 	bl	80001e0 <memchr>
 800eebc:	b140      	cbz	r0, 800eed0 <_vfiprintf_r+0x198>
 800eebe:	2340      	movs	r3, #64	; 0x40
 800eec0:	eba0 000a 	sub.w	r0, r0, sl
 800eec4:	fa03 f000 	lsl.w	r0, r3, r0
 800eec8:	9b04      	ldr	r3, [sp, #16]
 800eeca:	4303      	orrs	r3, r0
 800eecc:	3401      	adds	r4, #1
 800eece:	9304      	str	r3, [sp, #16]
 800eed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eed4:	482c      	ldr	r0, [pc, #176]	; (800ef88 <_vfiprintf_r+0x250>)
 800eed6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eeda:	2206      	movs	r2, #6
 800eedc:	f7f1 f980 	bl	80001e0 <memchr>
 800eee0:	2800      	cmp	r0, #0
 800eee2:	d03f      	beq.n	800ef64 <_vfiprintf_r+0x22c>
 800eee4:	4b29      	ldr	r3, [pc, #164]	; (800ef8c <_vfiprintf_r+0x254>)
 800eee6:	bb1b      	cbnz	r3, 800ef30 <_vfiprintf_r+0x1f8>
 800eee8:	9b03      	ldr	r3, [sp, #12]
 800eeea:	3307      	adds	r3, #7
 800eeec:	f023 0307 	bic.w	r3, r3, #7
 800eef0:	3308      	adds	r3, #8
 800eef2:	9303      	str	r3, [sp, #12]
 800eef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eef6:	443b      	add	r3, r7
 800eef8:	9309      	str	r3, [sp, #36]	; 0x24
 800eefa:	e767      	b.n	800edcc <_vfiprintf_r+0x94>
 800eefc:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef00:	460c      	mov	r4, r1
 800ef02:	2001      	movs	r0, #1
 800ef04:	e7a5      	b.n	800ee52 <_vfiprintf_r+0x11a>
 800ef06:	2300      	movs	r3, #0
 800ef08:	3401      	adds	r4, #1
 800ef0a:	9305      	str	r3, [sp, #20]
 800ef0c:	4619      	mov	r1, r3
 800ef0e:	f04f 0c0a 	mov.w	ip, #10
 800ef12:	4620      	mov	r0, r4
 800ef14:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef18:	3a30      	subs	r2, #48	; 0x30
 800ef1a:	2a09      	cmp	r2, #9
 800ef1c:	d903      	bls.n	800ef26 <_vfiprintf_r+0x1ee>
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d0c5      	beq.n	800eeae <_vfiprintf_r+0x176>
 800ef22:	9105      	str	r1, [sp, #20]
 800ef24:	e7c3      	b.n	800eeae <_vfiprintf_r+0x176>
 800ef26:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef2a:	4604      	mov	r4, r0
 800ef2c:	2301      	movs	r3, #1
 800ef2e:	e7f0      	b.n	800ef12 <_vfiprintf_r+0x1da>
 800ef30:	ab03      	add	r3, sp, #12
 800ef32:	9300      	str	r3, [sp, #0]
 800ef34:	462a      	mov	r2, r5
 800ef36:	4b16      	ldr	r3, [pc, #88]	; (800ef90 <_vfiprintf_r+0x258>)
 800ef38:	a904      	add	r1, sp, #16
 800ef3a:	4630      	mov	r0, r6
 800ef3c:	f7fd fc8c 	bl	800c858 <_printf_float>
 800ef40:	4607      	mov	r7, r0
 800ef42:	1c78      	adds	r0, r7, #1
 800ef44:	d1d6      	bne.n	800eef4 <_vfiprintf_r+0x1bc>
 800ef46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef48:	07d9      	lsls	r1, r3, #31
 800ef4a:	d405      	bmi.n	800ef58 <_vfiprintf_r+0x220>
 800ef4c:	89ab      	ldrh	r3, [r5, #12]
 800ef4e:	059a      	lsls	r2, r3, #22
 800ef50:	d402      	bmi.n	800ef58 <_vfiprintf_r+0x220>
 800ef52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef54:	f7ff f9d0 	bl	800e2f8 <__retarget_lock_release_recursive>
 800ef58:	89ab      	ldrh	r3, [r5, #12]
 800ef5a:	065b      	lsls	r3, r3, #25
 800ef5c:	f53f af12 	bmi.w	800ed84 <_vfiprintf_r+0x4c>
 800ef60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef62:	e711      	b.n	800ed88 <_vfiprintf_r+0x50>
 800ef64:	ab03      	add	r3, sp, #12
 800ef66:	9300      	str	r3, [sp, #0]
 800ef68:	462a      	mov	r2, r5
 800ef6a:	4b09      	ldr	r3, [pc, #36]	; (800ef90 <_vfiprintf_r+0x258>)
 800ef6c:	a904      	add	r1, sp, #16
 800ef6e:	4630      	mov	r0, r6
 800ef70:	f7fd ff16 	bl	800cda0 <_printf_i>
 800ef74:	e7e4      	b.n	800ef40 <_vfiprintf_r+0x208>
 800ef76:	bf00      	nop
 800ef78:	0801044c 	.word	0x0801044c
 800ef7c:	0801046c 	.word	0x0801046c
 800ef80:	0801042c 	.word	0x0801042c
 800ef84:	080105e4 	.word	0x080105e4
 800ef88:	080105ee 	.word	0x080105ee
 800ef8c:	0800c859 	.word	0x0800c859
 800ef90:	0800ed13 	.word	0x0800ed13
 800ef94:	080105ea 	.word	0x080105ea

0800ef98 <_sbrk_r>:
 800ef98:	b538      	push	{r3, r4, r5, lr}
 800ef9a:	4d06      	ldr	r5, [pc, #24]	; (800efb4 <_sbrk_r+0x1c>)
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	4604      	mov	r4, r0
 800efa0:	4608      	mov	r0, r1
 800efa2:	602b      	str	r3, [r5, #0]
 800efa4:	f7fc fd6e 	bl	800ba84 <_sbrk>
 800efa8:	1c43      	adds	r3, r0, #1
 800efaa:	d102      	bne.n	800efb2 <_sbrk_r+0x1a>
 800efac:	682b      	ldr	r3, [r5, #0]
 800efae:	b103      	cbz	r3, 800efb2 <_sbrk_r+0x1a>
 800efb0:	6023      	str	r3, [r4, #0]
 800efb2:	bd38      	pop	{r3, r4, r5, pc}
 800efb4:	200006a0 	.word	0x200006a0

0800efb8 <__sread>:
 800efb8:	b510      	push	{r4, lr}
 800efba:	460c      	mov	r4, r1
 800efbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efc0:	f000 f8e2 	bl	800f188 <_read_r>
 800efc4:	2800      	cmp	r0, #0
 800efc6:	bfab      	itete	ge
 800efc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800efca:	89a3      	ldrhlt	r3, [r4, #12]
 800efcc:	181b      	addge	r3, r3, r0
 800efce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800efd2:	bfac      	ite	ge
 800efd4:	6563      	strge	r3, [r4, #84]	; 0x54
 800efd6:	81a3      	strhlt	r3, [r4, #12]
 800efd8:	bd10      	pop	{r4, pc}

0800efda <__swrite>:
 800efda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efde:	461f      	mov	r7, r3
 800efe0:	898b      	ldrh	r3, [r1, #12]
 800efe2:	05db      	lsls	r3, r3, #23
 800efe4:	4605      	mov	r5, r0
 800efe6:	460c      	mov	r4, r1
 800efe8:	4616      	mov	r6, r2
 800efea:	d505      	bpl.n	800eff8 <__swrite+0x1e>
 800efec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eff0:	2302      	movs	r3, #2
 800eff2:	2200      	movs	r2, #0
 800eff4:	f000 f898 	bl	800f128 <_lseek_r>
 800eff8:	89a3      	ldrh	r3, [r4, #12]
 800effa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800effe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f002:	81a3      	strh	r3, [r4, #12]
 800f004:	4632      	mov	r2, r6
 800f006:	463b      	mov	r3, r7
 800f008:	4628      	mov	r0, r5
 800f00a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f00e:	f000 b817 	b.w	800f040 <_write_r>

0800f012 <__sseek>:
 800f012:	b510      	push	{r4, lr}
 800f014:	460c      	mov	r4, r1
 800f016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f01a:	f000 f885 	bl	800f128 <_lseek_r>
 800f01e:	1c43      	adds	r3, r0, #1
 800f020:	89a3      	ldrh	r3, [r4, #12]
 800f022:	bf15      	itete	ne
 800f024:	6560      	strne	r0, [r4, #84]	; 0x54
 800f026:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f02a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f02e:	81a3      	strheq	r3, [r4, #12]
 800f030:	bf18      	it	ne
 800f032:	81a3      	strhne	r3, [r4, #12]
 800f034:	bd10      	pop	{r4, pc}

0800f036 <__sclose>:
 800f036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f03a:	f000 b831 	b.w	800f0a0 <_close_r>
	...

0800f040 <_write_r>:
 800f040:	b538      	push	{r3, r4, r5, lr}
 800f042:	4d07      	ldr	r5, [pc, #28]	; (800f060 <_write_r+0x20>)
 800f044:	4604      	mov	r4, r0
 800f046:	4608      	mov	r0, r1
 800f048:	4611      	mov	r1, r2
 800f04a:	2200      	movs	r2, #0
 800f04c:	602a      	str	r2, [r5, #0]
 800f04e:	461a      	mov	r2, r3
 800f050:	f7fa f800 	bl	8009054 <_write>
 800f054:	1c43      	adds	r3, r0, #1
 800f056:	d102      	bne.n	800f05e <_write_r+0x1e>
 800f058:	682b      	ldr	r3, [r5, #0]
 800f05a:	b103      	cbz	r3, 800f05e <_write_r+0x1e>
 800f05c:	6023      	str	r3, [r4, #0]
 800f05e:	bd38      	pop	{r3, r4, r5, pc}
 800f060:	200006a0 	.word	0x200006a0

0800f064 <__assert_func>:
 800f064:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f066:	4614      	mov	r4, r2
 800f068:	461a      	mov	r2, r3
 800f06a:	4b09      	ldr	r3, [pc, #36]	; (800f090 <__assert_func+0x2c>)
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	4605      	mov	r5, r0
 800f070:	68d8      	ldr	r0, [r3, #12]
 800f072:	b14c      	cbz	r4, 800f088 <__assert_func+0x24>
 800f074:	4b07      	ldr	r3, [pc, #28]	; (800f094 <__assert_func+0x30>)
 800f076:	9100      	str	r1, [sp, #0]
 800f078:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f07c:	4906      	ldr	r1, [pc, #24]	; (800f098 <__assert_func+0x34>)
 800f07e:	462b      	mov	r3, r5
 800f080:	f000 f81e 	bl	800f0c0 <fiprintf>
 800f084:	f000 f89f 	bl	800f1c6 <abort>
 800f088:	4b04      	ldr	r3, [pc, #16]	; (800f09c <__assert_func+0x38>)
 800f08a:	461c      	mov	r4, r3
 800f08c:	e7f3      	b.n	800f076 <__assert_func+0x12>
 800f08e:	bf00      	nop
 800f090:	20000010 	.word	0x20000010
 800f094:	080105f5 	.word	0x080105f5
 800f098:	08010602 	.word	0x08010602
 800f09c:	08010630 	.word	0x08010630

0800f0a0 <_close_r>:
 800f0a0:	b538      	push	{r3, r4, r5, lr}
 800f0a2:	4d06      	ldr	r5, [pc, #24]	; (800f0bc <_close_r+0x1c>)
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	4604      	mov	r4, r0
 800f0a8:	4608      	mov	r0, r1
 800f0aa:	602b      	str	r3, [r5, #0]
 800f0ac:	f7fc fcb5 	bl	800ba1a <_close>
 800f0b0:	1c43      	adds	r3, r0, #1
 800f0b2:	d102      	bne.n	800f0ba <_close_r+0x1a>
 800f0b4:	682b      	ldr	r3, [r5, #0]
 800f0b6:	b103      	cbz	r3, 800f0ba <_close_r+0x1a>
 800f0b8:	6023      	str	r3, [r4, #0]
 800f0ba:	bd38      	pop	{r3, r4, r5, pc}
 800f0bc:	200006a0 	.word	0x200006a0

0800f0c0 <fiprintf>:
 800f0c0:	b40e      	push	{r1, r2, r3}
 800f0c2:	b503      	push	{r0, r1, lr}
 800f0c4:	4601      	mov	r1, r0
 800f0c6:	ab03      	add	r3, sp, #12
 800f0c8:	4805      	ldr	r0, [pc, #20]	; (800f0e0 <fiprintf+0x20>)
 800f0ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0ce:	6800      	ldr	r0, [r0, #0]
 800f0d0:	9301      	str	r3, [sp, #4]
 800f0d2:	f7ff fe31 	bl	800ed38 <_vfiprintf_r>
 800f0d6:	b002      	add	sp, #8
 800f0d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f0dc:	b003      	add	sp, #12
 800f0de:	4770      	bx	lr
 800f0e0:	20000010 	.word	0x20000010

0800f0e4 <_fstat_r>:
 800f0e4:	b538      	push	{r3, r4, r5, lr}
 800f0e6:	4d07      	ldr	r5, [pc, #28]	; (800f104 <_fstat_r+0x20>)
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	4604      	mov	r4, r0
 800f0ec:	4608      	mov	r0, r1
 800f0ee:	4611      	mov	r1, r2
 800f0f0:	602b      	str	r3, [r5, #0]
 800f0f2:	f7fc fc9e 	bl	800ba32 <_fstat>
 800f0f6:	1c43      	adds	r3, r0, #1
 800f0f8:	d102      	bne.n	800f100 <_fstat_r+0x1c>
 800f0fa:	682b      	ldr	r3, [r5, #0]
 800f0fc:	b103      	cbz	r3, 800f100 <_fstat_r+0x1c>
 800f0fe:	6023      	str	r3, [r4, #0]
 800f100:	bd38      	pop	{r3, r4, r5, pc}
 800f102:	bf00      	nop
 800f104:	200006a0 	.word	0x200006a0

0800f108 <_isatty_r>:
 800f108:	b538      	push	{r3, r4, r5, lr}
 800f10a:	4d06      	ldr	r5, [pc, #24]	; (800f124 <_isatty_r+0x1c>)
 800f10c:	2300      	movs	r3, #0
 800f10e:	4604      	mov	r4, r0
 800f110:	4608      	mov	r0, r1
 800f112:	602b      	str	r3, [r5, #0]
 800f114:	f7fc fc9d 	bl	800ba52 <_isatty>
 800f118:	1c43      	adds	r3, r0, #1
 800f11a:	d102      	bne.n	800f122 <_isatty_r+0x1a>
 800f11c:	682b      	ldr	r3, [r5, #0]
 800f11e:	b103      	cbz	r3, 800f122 <_isatty_r+0x1a>
 800f120:	6023      	str	r3, [r4, #0]
 800f122:	bd38      	pop	{r3, r4, r5, pc}
 800f124:	200006a0 	.word	0x200006a0

0800f128 <_lseek_r>:
 800f128:	b538      	push	{r3, r4, r5, lr}
 800f12a:	4d07      	ldr	r5, [pc, #28]	; (800f148 <_lseek_r+0x20>)
 800f12c:	4604      	mov	r4, r0
 800f12e:	4608      	mov	r0, r1
 800f130:	4611      	mov	r1, r2
 800f132:	2200      	movs	r2, #0
 800f134:	602a      	str	r2, [r5, #0]
 800f136:	461a      	mov	r2, r3
 800f138:	f7fc fc96 	bl	800ba68 <_lseek>
 800f13c:	1c43      	adds	r3, r0, #1
 800f13e:	d102      	bne.n	800f146 <_lseek_r+0x1e>
 800f140:	682b      	ldr	r3, [r5, #0]
 800f142:	b103      	cbz	r3, 800f146 <_lseek_r+0x1e>
 800f144:	6023      	str	r3, [r4, #0]
 800f146:	bd38      	pop	{r3, r4, r5, pc}
 800f148:	200006a0 	.word	0x200006a0

0800f14c <__ascii_mbtowc>:
 800f14c:	b082      	sub	sp, #8
 800f14e:	b901      	cbnz	r1, 800f152 <__ascii_mbtowc+0x6>
 800f150:	a901      	add	r1, sp, #4
 800f152:	b142      	cbz	r2, 800f166 <__ascii_mbtowc+0x1a>
 800f154:	b14b      	cbz	r3, 800f16a <__ascii_mbtowc+0x1e>
 800f156:	7813      	ldrb	r3, [r2, #0]
 800f158:	600b      	str	r3, [r1, #0]
 800f15a:	7812      	ldrb	r2, [r2, #0]
 800f15c:	1e10      	subs	r0, r2, #0
 800f15e:	bf18      	it	ne
 800f160:	2001      	movne	r0, #1
 800f162:	b002      	add	sp, #8
 800f164:	4770      	bx	lr
 800f166:	4610      	mov	r0, r2
 800f168:	e7fb      	b.n	800f162 <__ascii_mbtowc+0x16>
 800f16a:	f06f 0001 	mvn.w	r0, #1
 800f16e:	e7f8      	b.n	800f162 <__ascii_mbtowc+0x16>

0800f170 <__malloc_lock>:
 800f170:	4801      	ldr	r0, [pc, #4]	; (800f178 <__malloc_lock+0x8>)
 800f172:	f7ff b8c0 	b.w	800e2f6 <__retarget_lock_acquire_recursive>
 800f176:	bf00      	nop
 800f178:	20000694 	.word	0x20000694

0800f17c <__malloc_unlock>:
 800f17c:	4801      	ldr	r0, [pc, #4]	; (800f184 <__malloc_unlock+0x8>)
 800f17e:	f7ff b8bb 	b.w	800e2f8 <__retarget_lock_release_recursive>
 800f182:	bf00      	nop
 800f184:	20000694 	.word	0x20000694

0800f188 <_read_r>:
 800f188:	b538      	push	{r3, r4, r5, lr}
 800f18a:	4d07      	ldr	r5, [pc, #28]	; (800f1a8 <_read_r+0x20>)
 800f18c:	4604      	mov	r4, r0
 800f18e:	4608      	mov	r0, r1
 800f190:	4611      	mov	r1, r2
 800f192:	2200      	movs	r2, #0
 800f194:	602a      	str	r2, [r5, #0]
 800f196:	461a      	mov	r2, r3
 800f198:	f7fc fc22 	bl	800b9e0 <_read>
 800f19c:	1c43      	adds	r3, r0, #1
 800f19e:	d102      	bne.n	800f1a6 <_read_r+0x1e>
 800f1a0:	682b      	ldr	r3, [r5, #0]
 800f1a2:	b103      	cbz	r3, 800f1a6 <_read_r+0x1e>
 800f1a4:	6023      	str	r3, [r4, #0]
 800f1a6:	bd38      	pop	{r3, r4, r5, pc}
 800f1a8:	200006a0 	.word	0x200006a0

0800f1ac <__ascii_wctomb>:
 800f1ac:	b149      	cbz	r1, 800f1c2 <__ascii_wctomb+0x16>
 800f1ae:	2aff      	cmp	r2, #255	; 0xff
 800f1b0:	bf85      	ittet	hi
 800f1b2:	238a      	movhi	r3, #138	; 0x8a
 800f1b4:	6003      	strhi	r3, [r0, #0]
 800f1b6:	700a      	strbls	r2, [r1, #0]
 800f1b8:	f04f 30ff 	movhi.w	r0, #4294967295
 800f1bc:	bf98      	it	ls
 800f1be:	2001      	movls	r0, #1
 800f1c0:	4770      	bx	lr
 800f1c2:	4608      	mov	r0, r1
 800f1c4:	4770      	bx	lr

0800f1c6 <abort>:
 800f1c6:	b508      	push	{r3, lr}
 800f1c8:	2006      	movs	r0, #6
 800f1ca:	f000 f82b 	bl	800f224 <raise>
 800f1ce:	2001      	movs	r0, #1
 800f1d0:	f7fc fbfc 	bl	800b9cc <_exit>

0800f1d4 <_raise_r>:
 800f1d4:	291f      	cmp	r1, #31
 800f1d6:	b538      	push	{r3, r4, r5, lr}
 800f1d8:	4604      	mov	r4, r0
 800f1da:	460d      	mov	r5, r1
 800f1dc:	d904      	bls.n	800f1e8 <_raise_r+0x14>
 800f1de:	2316      	movs	r3, #22
 800f1e0:	6003      	str	r3, [r0, #0]
 800f1e2:	f04f 30ff 	mov.w	r0, #4294967295
 800f1e6:	bd38      	pop	{r3, r4, r5, pc}
 800f1e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f1ea:	b112      	cbz	r2, 800f1f2 <_raise_r+0x1e>
 800f1ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f1f0:	b94b      	cbnz	r3, 800f206 <_raise_r+0x32>
 800f1f2:	4620      	mov	r0, r4
 800f1f4:	f000 f830 	bl	800f258 <_getpid_r>
 800f1f8:	462a      	mov	r2, r5
 800f1fa:	4601      	mov	r1, r0
 800f1fc:	4620      	mov	r0, r4
 800f1fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f202:	f000 b817 	b.w	800f234 <_kill_r>
 800f206:	2b01      	cmp	r3, #1
 800f208:	d00a      	beq.n	800f220 <_raise_r+0x4c>
 800f20a:	1c59      	adds	r1, r3, #1
 800f20c:	d103      	bne.n	800f216 <_raise_r+0x42>
 800f20e:	2316      	movs	r3, #22
 800f210:	6003      	str	r3, [r0, #0]
 800f212:	2001      	movs	r0, #1
 800f214:	e7e7      	b.n	800f1e6 <_raise_r+0x12>
 800f216:	2400      	movs	r4, #0
 800f218:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f21c:	4628      	mov	r0, r5
 800f21e:	4798      	blx	r3
 800f220:	2000      	movs	r0, #0
 800f222:	e7e0      	b.n	800f1e6 <_raise_r+0x12>

0800f224 <raise>:
 800f224:	4b02      	ldr	r3, [pc, #8]	; (800f230 <raise+0xc>)
 800f226:	4601      	mov	r1, r0
 800f228:	6818      	ldr	r0, [r3, #0]
 800f22a:	f7ff bfd3 	b.w	800f1d4 <_raise_r>
 800f22e:	bf00      	nop
 800f230:	20000010 	.word	0x20000010

0800f234 <_kill_r>:
 800f234:	b538      	push	{r3, r4, r5, lr}
 800f236:	4d07      	ldr	r5, [pc, #28]	; (800f254 <_kill_r+0x20>)
 800f238:	2300      	movs	r3, #0
 800f23a:	4604      	mov	r4, r0
 800f23c:	4608      	mov	r0, r1
 800f23e:	4611      	mov	r1, r2
 800f240:	602b      	str	r3, [r5, #0]
 800f242:	f7fc fbb3 	bl	800b9ac <_kill>
 800f246:	1c43      	adds	r3, r0, #1
 800f248:	d102      	bne.n	800f250 <_kill_r+0x1c>
 800f24a:	682b      	ldr	r3, [r5, #0]
 800f24c:	b103      	cbz	r3, 800f250 <_kill_r+0x1c>
 800f24e:	6023      	str	r3, [r4, #0]
 800f250:	bd38      	pop	{r3, r4, r5, pc}
 800f252:	bf00      	nop
 800f254:	200006a0 	.word	0x200006a0

0800f258 <_getpid_r>:
 800f258:	f7fc bba0 	b.w	800b99c <_getpid>

0800f25c <asinf>:
 800f25c:	b508      	push	{r3, lr}
 800f25e:	ed2d 8b02 	vpush	{d8}
 800f262:	eeb0 8a40 	vmov.f32	s16, s0
 800f266:	f000 f87f 	bl	800f368 <__ieee754_asinf>
 800f26a:	eeb4 8a48 	vcmp.f32	s16, s16
 800f26e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f272:	eef0 8a40 	vmov.f32	s17, s0
 800f276:	d615      	bvs.n	800f2a4 <asinf+0x48>
 800f278:	eeb0 0a48 	vmov.f32	s0, s16
 800f27c:	f000 fdc2 	bl	800fe04 <fabsf>
 800f280:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f284:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f28c:	dd0a      	ble.n	800f2a4 <asinf+0x48>
 800f28e:	f7fd fa11 	bl	800c6b4 <__errno>
 800f292:	ecbd 8b02 	vpop	{d8}
 800f296:	2321      	movs	r3, #33	; 0x21
 800f298:	6003      	str	r3, [r0, #0]
 800f29a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f29e:	4804      	ldr	r0, [pc, #16]	; (800f2b0 <asinf+0x54>)
 800f2a0:	f000 bdc4 	b.w	800fe2c <nanf>
 800f2a4:	eeb0 0a68 	vmov.f32	s0, s17
 800f2a8:	ecbd 8b02 	vpop	{d8}
 800f2ac:	bd08      	pop	{r3, pc}
 800f2ae:	bf00      	nop
 800f2b0:	08010630 	.word	0x08010630

0800f2b4 <atan2f>:
 800f2b4:	f000 b93e 	b.w	800f534 <__ieee754_atan2f>

0800f2b8 <powf>:
 800f2b8:	b508      	push	{r3, lr}
 800f2ba:	ed2d 8b04 	vpush	{d8-d9}
 800f2be:	eeb0 8a60 	vmov.f32	s16, s1
 800f2c2:	eeb0 9a40 	vmov.f32	s18, s0
 800f2c6:	f000 f9d5 	bl	800f674 <__ieee754_powf>
 800f2ca:	eeb4 8a48 	vcmp.f32	s16, s16
 800f2ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2d2:	eef0 8a40 	vmov.f32	s17, s0
 800f2d6:	d63e      	bvs.n	800f356 <powf+0x9e>
 800f2d8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800f2dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2e0:	d112      	bne.n	800f308 <powf+0x50>
 800f2e2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f2e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2ea:	d039      	beq.n	800f360 <powf+0xa8>
 800f2ec:	eeb0 0a48 	vmov.f32	s0, s16
 800f2f0:	f000 fd8f 	bl	800fe12 <finitef>
 800f2f4:	b378      	cbz	r0, 800f356 <powf+0x9e>
 800f2f6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f2fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2fe:	d52a      	bpl.n	800f356 <powf+0x9e>
 800f300:	f7fd f9d8 	bl	800c6b4 <__errno>
 800f304:	2322      	movs	r3, #34	; 0x22
 800f306:	e014      	b.n	800f332 <powf+0x7a>
 800f308:	f000 fd83 	bl	800fe12 <finitef>
 800f30c:	b998      	cbnz	r0, 800f336 <powf+0x7e>
 800f30e:	eeb0 0a49 	vmov.f32	s0, s18
 800f312:	f000 fd7e 	bl	800fe12 <finitef>
 800f316:	b170      	cbz	r0, 800f336 <powf+0x7e>
 800f318:	eeb0 0a48 	vmov.f32	s0, s16
 800f31c:	f000 fd79 	bl	800fe12 <finitef>
 800f320:	b148      	cbz	r0, 800f336 <powf+0x7e>
 800f322:	eef4 8a68 	vcmp.f32	s17, s17
 800f326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f32a:	d7e9      	bvc.n	800f300 <powf+0x48>
 800f32c:	f7fd f9c2 	bl	800c6b4 <__errno>
 800f330:	2321      	movs	r3, #33	; 0x21
 800f332:	6003      	str	r3, [r0, #0]
 800f334:	e00f      	b.n	800f356 <powf+0x9e>
 800f336:	eef5 8a40 	vcmp.f32	s17, #0.0
 800f33a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f33e:	d10a      	bne.n	800f356 <powf+0x9e>
 800f340:	eeb0 0a49 	vmov.f32	s0, s18
 800f344:	f000 fd65 	bl	800fe12 <finitef>
 800f348:	b128      	cbz	r0, 800f356 <powf+0x9e>
 800f34a:	eeb0 0a48 	vmov.f32	s0, s16
 800f34e:	f000 fd60 	bl	800fe12 <finitef>
 800f352:	2800      	cmp	r0, #0
 800f354:	d1d4      	bne.n	800f300 <powf+0x48>
 800f356:	eeb0 0a68 	vmov.f32	s0, s17
 800f35a:	ecbd 8b04 	vpop	{d8-d9}
 800f35e:	bd08      	pop	{r3, pc}
 800f360:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800f364:	e7f7      	b.n	800f356 <powf+0x9e>
	...

0800f368 <__ieee754_asinf>:
 800f368:	b538      	push	{r3, r4, r5, lr}
 800f36a:	ee10 5a10 	vmov	r5, s0
 800f36e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800f372:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800f376:	ed2d 8b04 	vpush	{d8-d9}
 800f37a:	d10c      	bne.n	800f396 <__ieee754_asinf+0x2e>
 800f37c:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800f4f4 <__ieee754_asinf+0x18c>
 800f380:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800f4f8 <__ieee754_asinf+0x190>
 800f384:	ee60 7a27 	vmul.f32	s15, s0, s15
 800f388:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f38c:	eeb0 0a67 	vmov.f32	s0, s15
 800f390:	ecbd 8b04 	vpop	{d8-d9}
 800f394:	bd38      	pop	{r3, r4, r5, pc}
 800f396:	dd04      	ble.n	800f3a2 <__ieee754_asinf+0x3a>
 800f398:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f39c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800f3a0:	e7f6      	b.n	800f390 <__ieee754_asinf+0x28>
 800f3a2:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800f3a6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800f3aa:	da0b      	bge.n	800f3c4 <__ieee754_asinf+0x5c>
 800f3ac:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800f3b0:	da52      	bge.n	800f458 <__ieee754_asinf+0xf0>
 800f3b2:	eddf 7a52 	vldr	s15, [pc, #328]	; 800f4fc <__ieee754_asinf+0x194>
 800f3b6:	ee70 7a27 	vadd.f32	s15, s0, s15
 800f3ba:	eef4 7ae8 	vcmpe.f32	s15, s17
 800f3be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3c2:	dce5      	bgt.n	800f390 <__ieee754_asinf+0x28>
 800f3c4:	f000 fd1e 	bl	800fe04 <fabsf>
 800f3c8:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800f3cc:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800f3d0:	ee20 8a08 	vmul.f32	s16, s0, s16
 800f3d4:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800f500 <__ieee754_asinf+0x198>
 800f3d8:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800f504 <__ieee754_asinf+0x19c>
 800f3dc:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800f508 <__ieee754_asinf+0x1a0>
 800f3e0:	eea8 7a27 	vfma.f32	s14, s16, s15
 800f3e4:	eddf 7a49 	vldr	s15, [pc, #292]	; 800f50c <__ieee754_asinf+0x1a4>
 800f3e8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800f3ec:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800f510 <__ieee754_asinf+0x1a8>
 800f3f0:	eea7 7a88 	vfma.f32	s14, s15, s16
 800f3f4:	eddf 7a47 	vldr	s15, [pc, #284]	; 800f514 <__ieee754_asinf+0x1ac>
 800f3f8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800f3fc:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800f518 <__ieee754_asinf+0x1b0>
 800f400:	eea7 9a88 	vfma.f32	s18, s15, s16
 800f404:	eddf 7a45 	vldr	s15, [pc, #276]	; 800f51c <__ieee754_asinf+0x1b4>
 800f408:	eee8 7a07 	vfma.f32	s15, s16, s14
 800f40c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800f520 <__ieee754_asinf+0x1b8>
 800f410:	eea7 7a88 	vfma.f32	s14, s15, s16
 800f414:	eddf 7a43 	vldr	s15, [pc, #268]	; 800f524 <__ieee754_asinf+0x1bc>
 800f418:	eee7 7a08 	vfma.f32	s15, s14, s16
 800f41c:	eeb0 0a48 	vmov.f32	s0, s16
 800f420:	eee7 8a88 	vfma.f32	s17, s15, s16
 800f424:	f000 fbf4 	bl	800fc10 <__ieee754_sqrtf>
 800f428:	4b3f      	ldr	r3, [pc, #252]	; (800f528 <__ieee754_asinf+0x1c0>)
 800f42a:	ee29 9a08 	vmul.f32	s18, s18, s16
 800f42e:	429c      	cmp	r4, r3
 800f430:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800f434:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800f438:	dd3d      	ble.n	800f4b6 <__ieee754_asinf+0x14e>
 800f43a:	eea0 0a06 	vfma.f32	s0, s0, s12
 800f43e:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800f52c <__ieee754_asinf+0x1c4>
 800f442:	eee0 7a26 	vfma.f32	s15, s0, s13
 800f446:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800f4f8 <__ieee754_asinf+0x190>
 800f44a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f44e:	2d00      	cmp	r5, #0
 800f450:	bfd8      	it	le
 800f452:	eeb1 0a40 	vnegle.f32	s0, s0
 800f456:	e79b      	b.n	800f390 <__ieee754_asinf+0x28>
 800f458:	ee60 7a00 	vmul.f32	s15, s0, s0
 800f45c:	eddf 6a28 	vldr	s13, [pc, #160]	; 800f500 <__ieee754_asinf+0x198>
 800f460:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800f504 <__ieee754_asinf+0x19c>
 800f464:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800f518 <__ieee754_asinf+0x1b0>
 800f468:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800f46c:	eddf 6a27 	vldr	s13, [pc, #156]	; 800f50c <__ieee754_asinf+0x1a4>
 800f470:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f474:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800f510 <__ieee754_asinf+0x1a8>
 800f478:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f47c:	eddf 6a25 	vldr	s13, [pc, #148]	; 800f514 <__ieee754_asinf+0x1ac>
 800f480:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f484:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800f508 <__ieee754_asinf+0x1a0>
 800f488:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f48c:	eddf 6a23 	vldr	s13, [pc, #140]	; 800f51c <__ieee754_asinf+0x1b4>
 800f490:	eee7 6a86 	vfma.f32	s13, s15, s12
 800f494:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800f520 <__ieee754_asinf+0x1b8>
 800f498:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800f49c:	eddf 6a21 	vldr	s13, [pc, #132]	; 800f524 <__ieee754_asinf+0x1bc>
 800f4a0:	eee6 6a27 	vfma.f32	s13, s12, s15
 800f4a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f4a8:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800f4ac:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800f4b0:	eea0 0a27 	vfma.f32	s0, s0, s15
 800f4b4:	e76c      	b.n	800f390 <__ieee754_asinf+0x28>
 800f4b6:	ee10 3a10 	vmov	r3, s0
 800f4ba:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f4be:	f023 030f 	bic.w	r3, r3, #15
 800f4c2:	ee07 3a10 	vmov	s14, r3
 800f4c6:	eea7 8a47 	vfms.f32	s16, s14, s14
 800f4ca:	ee70 7a07 	vadd.f32	s15, s0, s14
 800f4ce:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f4d2:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800f4d6:	eddf 7a07 	vldr	s15, [pc, #28]	; 800f4f4 <__ieee754_asinf+0x18c>
 800f4da:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800f4de:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800f4e2:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800f530 <__ieee754_asinf+0x1c8>
 800f4e6:	eeb0 6a40 	vmov.f32	s12, s0
 800f4ea:	eea7 6a66 	vfms.f32	s12, s14, s13
 800f4ee:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800f4f2:	e7aa      	b.n	800f44a <__ieee754_asinf+0xe2>
 800f4f4:	b33bbd2e 	.word	0xb33bbd2e
 800f4f8:	3fc90fdb 	.word	0x3fc90fdb
 800f4fc:	7149f2ca 	.word	0x7149f2ca
 800f500:	3811ef08 	.word	0x3811ef08
 800f504:	3a4f7f04 	.word	0x3a4f7f04
 800f508:	3e2aaaab 	.word	0x3e2aaaab
 800f50c:	bd241146 	.word	0xbd241146
 800f510:	3e4e0aa8 	.word	0x3e4e0aa8
 800f514:	bea6b090 	.word	0xbea6b090
 800f518:	3d9dc62e 	.word	0x3d9dc62e
 800f51c:	bf303361 	.word	0xbf303361
 800f520:	4001572d 	.word	0x4001572d
 800f524:	c019d139 	.word	0xc019d139
 800f528:	3f799999 	.word	0x3f799999
 800f52c:	333bbd2e 	.word	0x333bbd2e
 800f530:	3f490fdb 	.word	0x3f490fdb

0800f534 <__ieee754_atan2f>:
 800f534:	ee10 2a90 	vmov	r2, s1
 800f538:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800f53c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f540:	b510      	push	{r4, lr}
 800f542:	eef0 7a40 	vmov.f32	s15, s0
 800f546:	dc06      	bgt.n	800f556 <__ieee754_atan2f+0x22>
 800f548:	ee10 0a10 	vmov	r0, s0
 800f54c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800f550:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f554:	dd04      	ble.n	800f560 <__ieee754_atan2f+0x2c>
 800f556:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800f55a:	eeb0 0a67 	vmov.f32	s0, s15
 800f55e:	bd10      	pop	{r4, pc}
 800f560:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800f564:	d103      	bne.n	800f56e <__ieee754_atan2f+0x3a>
 800f566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f56a:	f000 bb77 	b.w	800fc5c <atanf>
 800f56e:	1794      	asrs	r4, r2, #30
 800f570:	f004 0402 	and.w	r4, r4, #2
 800f574:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800f578:	b943      	cbnz	r3, 800f58c <__ieee754_atan2f+0x58>
 800f57a:	2c02      	cmp	r4, #2
 800f57c:	d05e      	beq.n	800f63c <__ieee754_atan2f+0x108>
 800f57e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800f650 <__ieee754_atan2f+0x11c>
 800f582:	2c03      	cmp	r4, #3
 800f584:	bf08      	it	eq
 800f586:	eef0 7a47 	vmoveq.f32	s15, s14
 800f58a:	e7e6      	b.n	800f55a <__ieee754_atan2f+0x26>
 800f58c:	b941      	cbnz	r1, 800f5a0 <__ieee754_atan2f+0x6c>
 800f58e:	eddf 7a31 	vldr	s15, [pc, #196]	; 800f654 <__ieee754_atan2f+0x120>
 800f592:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800f658 <__ieee754_atan2f+0x124>
 800f596:	2800      	cmp	r0, #0
 800f598:	bfb8      	it	lt
 800f59a:	eef0 7a40 	vmovlt.f32	s15, s0
 800f59e:	e7dc      	b.n	800f55a <__ieee754_atan2f+0x26>
 800f5a0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f5a4:	d110      	bne.n	800f5c8 <__ieee754_atan2f+0x94>
 800f5a6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f5aa:	f104 34ff 	add.w	r4, r4, #4294967295
 800f5ae:	d107      	bne.n	800f5c0 <__ieee754_atan2f+0x8c>
 800f5b0:	2c02      	cmp	r4, #2
 800f5b2:	d846      	bhi.n	800f642 <__ieee754_atan2f+0x10e>
 800f5b4:	4b29      	ldr	r3, [pc, #164]	; (800f65c <__ieee754_atan2f+0x128>)
 800f5b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f5ba:	edd4 7a00 	vldr	s15, [r4]
 800f5be:	e7cc      	b.n	800f55a <__ieee754_atan2f+0x26>
 800f5c0:	2c02      	cmp	r4, #2
 800f5c2:	d841      	bhi.n	800f648 <__ieee754_atan2f+0x114>
 800f5c4:	4b26      	ldr	r3, [pc, #152]	; (800f660 <__ieee754_atan2f+0x12c>)
 800f5c6:	e7f6      	b.n	800f5b6 <__ieee754_atan2f+0x82>
 800f5c8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f5cc:	d0df      	beq.n	800f58e <__ieee754_atan2f+0x5a>
 800f5ce:	1a5b      	subs	r3, r3, r1
 800f5d0:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800f5d4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800f5d8:	da1a      	bge.n	800f610 <__ieee754_atan2f+0xdc>
 800f5da:	2a00      	cmp	r2, #0
 800f5dc:	da01      	bge.n	800f5e2 <__ieee754_atan2f+0xae>
 800f5de:	313c      	adds	r1, #60	; 0x3c
 800f5e0:	db19      	blt.n	800f616 <__ieee754_atan2f+0xe2>
 800f5e2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800f5e6:	f000 fc0d 	bl	800fe04 <fabsf>
 800f5ea:	f000 fb37 	bl	800fc5c <atanf>
 800f5ee:	eef0 7a40 	vmov.f32	s15, s0
 800f5f2:	2c01      	cmp	r4, #1
 800f5f4:	d012      	beq.n	800f61c <__ieee754_atan2f+0xe8>
 800f5f6:	2c02      	cmp	r4, #2
 800f5f8:	d017      	beq.n	800f62a <__ieee754_atan2f+0xf6>
 800f5fa:	2c00      	cmp	r4, #0
 800f5fc:	d0ad      	beq.n	800f55a <__ieee754_atan2f+0x26>
 800f5fe:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800f664 <__ieee754_atan2f+0x130>
 800f602:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f606:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800f668 <__ieee754_atan2f+0x134>
 800f60a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f60e:	e7a4      	b.n	800f55a <__ieee754_atan2f+0x26>
 800f610:	eddf 7a10 	vldr	s15, [pc, #64]	; 800f654 <__ieee754_atan2f+0x120>
 800f614:	e7ed      	b.n	800f5f2 <__ieee754_atan2f+0xbe>
 800f616:	eddf 7a15 	vldr	s15, [pc, #84]	; 800f66c <__ieee754_atan2f+0x138>
 800f61a:	e7ea      	b.n	800f5f2 <__ieee754_atan2f+0xbe>
 800f61c:	ee17 3a90 	vmov	r3, s15
 800f620:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f624:	ee07 3a90 	vmov	s15, r3
 800f628:	e797      	b.n	800f55a <__ieee754_atan2f+0x26>
 800f62a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800f664 <__ieee754_atan2f+0x130>
 800f62e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f632:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800f668 <__ieee754_atan2f+0x134>
 800f636:	ee70 7a67 	vsub.f32	s15, s0, s15
 800f63a:	e78e      	b.n	800f55a <__ieee754_atan2f+0x26>
 800f63c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800f668 <__ieee754_atan2f+0x134>
 800f640:	e78b      	b.n	800f55a <__ieee754_atan2f+0x26>
 800f642:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800f670 <__ieee754_atan2f+0x13c>
 800f646:	e788      	b.n	800f55a <__ieee754_atan2f+0x26>
 800f648:	eddf 7a08 	vldr	s15, [pc, #32]	; 800f66c <__ieee754_atan2f+0x138>
 800f64c:	e785      	b.n	800f55a <__ieee754_atan2f+0x26>
 800f64e:	bf00      	nop
 800f650:	c0490fdb 	.word	0xc0490fdb
 800f654:	3fc90fdb 	.word	0x3fc90fdb
 800f658:	bfc90fdb 	.word	0xbfc90fdb
 800f65c:	0801073c 	.word	0x0801073c
 800f660:	08010748 	.word	0x08010748
 800f664:	33bbbd2e 	.word	0x33bbbd2e
 800f668:	40490fdb 	.word	0x40490fdb
 800f66c:	00000000 	.word	0x00000000
 800f670:	3f490fdb 	.word	0x3f490fdb

0800f674 <__ieee754_powf>:
 800f674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f678:	ee10 4a90 	vmov	r4, s1
 800f67c:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800f680:	ed2d 8b02 	vpush	{d8}
 800f684:	ee10 6a10 	vmov	r6, s0
 800f688:	eeb0 8a40 	vmov.f32	s16, s0
 800f68c:	eef0 8a60 	vmov.f32	s17, s1
 800f690:	d10c      	bne.n	800f6ac <__ieee754_powf+0x38>
 800f692:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800f696:	0076      	lsls	r6, r6, #1
 800f698:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800f69c:	f240 8296 	bls.w	800fbcc <__ieee754_powf+0x558>
 800f6a0:	ee38 0a28 	vadd.f32	s0, s16, s17
 800f6a4:	ecbd 8b02 	vpop	{d8}
 800f6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6ac:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800f6b0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800f6b4:	dcf4      	bgt.n	800f6a0 <__ieee754_powf+0x2c>
 800f6b6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800f6ba:	dd08      	ble.n	800f6ce <__ieee754_powf+0x5a>
 800f6bc:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800f6c0:	d1ee      	bne.n	800f6a0 <__ieee754_powf+0x2c>
 800f6c2:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800f6c6:	0064      	lsls	r4, r4, #1
 800f6c8:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800f6cc:	e7e6      	b.n	800f69c <__ieee754_powf+0x28>
 800f6ce:	2e00      	cmp	r6, #0
 800f6d0:	da20      	bge.n	800f714 <__ieee754_powf+0xa0>
 800f6d2:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800f6d6:	da2d      	bge.n	800f734 <__ieee754_powf+0xc0>
 800f6d8:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800f6dc:	f2c0 827f 	blt.w	800fbde <__ieee754_powf+0x56a>
 800f6e0:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800f6e4:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800f6e8:	fa48 f703 	asr.w	r7, r8, r3
 800f6ec:	fa07 f303 	lsl.w	r3, r7, r3
 800f6f0:	4543      	cmp	r3, r8
 800f6f2:	f040 8274 	bne.w	800fbde <__ieee754_powf+0x56a>
 800f6f6:	f007 0701 	and.w	r7, r7, #1
 800f6fa:	f1c7 0702 	rsb	r7, r7, #2
 800f6fe:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800f702:	d11f      	bne.n	800f744 <__ieee754_powf+0xd0>
 800f704:	2c00      	cmp	r4, #0
 800f706:	f280 8267 	bge.w	800fbd8 <__ieee754_powf+0x564>
 800f70a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f70e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800f712:	e7c7      	b.n	800f6a4 <__ieee754_powf+0x30>
 800f714:	2700      	movs	r7, #0
 800f716:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800f71a:	d1f0      	bne.n	800f6fe <__ieee754_powf+0x8a>
 800f71c:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800f720:	f000 8254 	beq.w	800fbcc <__ieee754_powf+0x558>
 800f724:	dd08      	ble.n	800f738 <__ieee754_powf+0xc4>
 800f726:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800fa30 <__ieee754_powf+0x3bc>
 800f72a:	2c00      	cmp	r4, #0
 800f72c:	bfa8      	it	ge
 800f72e:	eeb0 0a68 	vmovge.f32	s0, s17
 800f732:	e7b7      	b.n	800f6a4 <__ieee754_powf+0x30>
 800f734:	2702      	movs	r7, #2
 800f736:	e7ee      	b.n	800f716 <__ieee754_powf+0xa2>
 800f738:	2c00      	cmp	r4, #0
 800f73a:	f280 824a 	bge.w	800fbd2 <__ieee754_powf+0x55e>
 800f73e:	eeb1 0a68 	vneg.f32	s0, s17
 800f742:	e7af      	b.n	800f6a4 <__ieee754_powf+0x30>
 800f744:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800f748:	d102      	bne.n	800f750 <__ieee754_powf+0xdc>
 800f74a:	ee28 0a08 	vmul.f32	s0, s16, s16
 800f74e:	e7a9      	b.n	800f6a4 <__ieee754_powf+0x30>
 800f750:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800f754:	eeb0 0a48 	vmov.f32	s0, s16
 800f758:	d107      	bne.n	800f76a <__ieee754_powf+0xf6>
 800f75a:	2e00      	cmp	r6, #0
 800f75c:	db05      	blt.n	800f76a <__ieee754_powf+0xf6>
 800f75e:	ecbd 8b02 	vpop	{d8}
 800f762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f766:	f000 ba53 	b.w	800fc10 <__ieee754_sqrtf>
 800f76a:	f000 fb4b 	bl	800fe04 <fabsf>
 800f76e:	b125      	cbz	r5, 800f77a <__ieee754_powf+0x106>
 800f770:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 800f774:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800f778:	d116      	bne.n	800f7a8 <__ieee754_powf+0x134>
 800f77a:	2c00      	cmp	r4, #0
 800f77c:	bfbc      	itt	lt
 800f77e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800f782:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800f786:	2e00      	cmp	r6, #0
 800f788:	da8c      	bge.n	800f6a4 <__ieee754_powf+0x30>
 800f78a:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800f78e:	ea55 0307 	orrs.w	r3, r5, r7
 800f792:	d104      	bne.n	800f79e <__ieee754_powf+0x12a>
 800f794:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f798:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800f79c:	e782      	b.n	800f6a4 <__ieee754_powf+0x30>
 800f79e:	2f01      	cmp	r7, #1
 800f7a0:	d180      	bne.n	800f6a4 <__ieee754_powf+0x30>
 800f7a2:	eeb1 0a40 	vneg.f32	s0, s0
 800f7a6:	e77d      	b.n	800f6a4 <__ieee754_powf+0x30>
 800f7a8:	0ff0      	lsrs	r0, r6, #31
 800f7aa:	3801      	subs	r0, #1
 800f7ac:	ea57 0300 	orrs.w	r3, r7, r0
 800f7b0:	d104      	bne.n	800f7bc <__ieee754_powf+0x148>
 800f7b2:	ee38 8a48 	vsub.f32	s16, s16, s16
 800f7b6:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800f7ba:	e773      	b.n	800f6a4 <__ieee754_powf+0x30>
 800f7bc:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800f7c0:	dd74      	ble.n	800f8ac <__ieee754_powf+0x238>
 800f7c2:	4b9c      	ldr	r3, [pc, #624]	; (800fa34 <__ieee754_powf+0x3c0>)
 800f7c4:	429d      	cmp	r5, r3
 800f7c6:	dc08      	bgt.n	800f7da <__ieee754_powf+0x166>
 800f7c8:	2c00      	cmp	r4, #0
 800f7ca:	da0b      	bge.n	800f7e4 <__ieee754_powf+0x170>
 800f7cc:	2000      	movs	r0, #0
 800f7ce:	ecbd 8b02 	vpop	{d8}
 800f7d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f7d6:	f000 ba3b 	b.w	800fc50 <__math_oflowf>
 800f7da:	4b97      	ldr	r3, [pc, #604]	; (800fa38 <__ieee754_powf+0x3c4>)
 800f7dc:	429d      	cmp	r5, r3
 800f7de:	dd08      	ble.n	800f7f2 <__ieee754_powf+0x17e>
 800f7e0:	2c00      	cmp	r4, #0
 800f7e2:	dcf3      	bgt.n	800f7cc <__ieee754_powf+0x158>
 800f7e4:	2000      	movs	r0, #0
 800f7e6:	ecbd 8b02 	vpop	{d8}
 800f7ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f7ee:	f000 ba29 	b.w	800fc44 <__math_uflowf>
 800f7f2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f7f6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f7fa:	eddf 6a90 	vldr	s13, [pc, #576]	; 800fa3c <__ieee754_powf+0x3c8>
 800f7fe:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800f802:	eee0 6a67 	vfms.f32	s13, s0, s15
 800f806:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f80a:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800f80e:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f812:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f816:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800fa40 <__ieee754_powf+0x3cc>
 800f81a:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800f81e:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800fa44 <__ieee754_powf+0x3d0>
 800f822:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f826:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800fa48 <__ieee754_powf+0x3d4>
 800f82a:	eef0 6a67 	vmov.f32	s13, s15
 800f82e:	eee0 6a07 	vfma.f32	s13, s0, s14
 800f832:	ee16 3a90 	vmov	r3, s13
 800f836:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f83a:	f023 030f 	bic.w	r3, r3, #15
 800f83e:	ee00 3a90 	vmov	s1, r3
 800f842:	eee0 0a47 	vfms.f32	s1, s0, s14
 800f846:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800f84a:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800f84e:	f024 040f 	bic.w	r4, r4, #15
 800f852:	ee07 4a10 	vmov	s14, r4
 800f856:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800f85a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800f85e:	ee07 3a90 	vmov	s15, r3
 800f862:	eee7 0a27 	vfma.f32	s1, s14, s15
 800f866:	3f01      	subs	r7, #1
 800f868:	ea57 0200 	orrs.w	r2, r7, r0
 800f86c:	ee07 4a10 	vmov	s14, r4
 800f870:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f874:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800f878:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800f87c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800f880:	ee17 4a10 	vmov	r4, s14
 800f884:	bf08      	it	eq
 800f886:	eeb0 8a40 	vmoveq.f32	s16, s0
 800f88a:	2c00      	cmp	r4, #0
 800f88c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f890:	f340 817e 	ble.w	800fb90 <__ieee754_powf+0x51c>
 800f894:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800f898:	f340 80f8 	ble.w	800fa8c <__ieee754_powf+0x418>
 800f89c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f8a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8a4:	bf4c      	ite	mi
 800f8a6:	2001      	movmi	r0, #1
 800f8a8:	2000      	movpl	r0, #0
 800f8aa:	e790      	b.n	800f7ce <__ieee754_powf+0x15a>
 800f8ac:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800f8b0:	bf01      	itttt	eq
 800f8b2:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800fa4c <__ieee754_powf+0x3d8>
 800f8b6:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800f8ba:	f06f 0217 	mvneq.w	r2, #23
 800f8be:	ee17 5a90 	vmoveq	r5, s15
 800f8c2:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800f8c6:	bf18      	it	ne
 800f8c8:	2200      	movne	r2, #0
 800f8ca:	3b7f      	subs	r3, #127	; 0x7f
 800f8cc:	4413      	add	r3, r2
 800f8ce:	4a60      	ldr	r2, [pc, #384]	; (800fa50 <__ieee754_powf+0x3dc>)
 800f8d0:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800f8d4:	4295      	cmp	r5, r2
 800f8d6:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800f8da:	dd06      	ble.n	800f8ea <__ieee754_powf+0x276>
 800f8dc:	4a5d      	ldr	r2, [pc, #372]	; (800fa54 <__ieee754_powf+0x3e0>)
 800f8de:	4295      	cmp	r5, r2
 800f8e0:	f340 80a4 	ble.w	800fa2c <__ieee754_powf+0x3b8>
 800f8e4:	3301      	adds	r3, #1
 800f8e6:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800f8ea:	2500      	movs	r5, #0
 800f8ec:	4a5a      	ldr	r2, [pc, #360]	; (800fa58 <__ieee754_powf+0x3e4>)
 800f8ee:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800f8f2:	ee07 1a90 	vmov	s15, r1
 800f8f6:	ed92 7a00 	vldr	s14, [r2]
 800f8fa:	4a58      	ldr	r2, [pc, #352]	; (800fa5c <__ieee754_powf+0x3e8>)
 800f8fc:	ee37 6a27 	vadd.f32	s12, s14, s15
 800f900:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800f904:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800f908:	1049      	asrs	r1, r1, #1
 800f90a:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800f90e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800f912:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800f916:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800f91a:	ee06 1a10 	vmov	s12, r1
 800f91e:	ee65 4a26 	vmul.f32	s9, s10, s13
 800f922:	ee36 7a47 	vsub.f32	s14, s12, s14
 800f926:	ee14 6a90 	vmov	r6, s9
 800f92a:	4016      	ands	r6, r2
 800f92c:	ee05 6a90 	vmov	s11, r6
 800f930:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800f934:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f938:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800fa60 <__ieee754_powf+0x3ec>
 800f93c:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800f940:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800f944:	ee25 6a26 	vmul.f32	s12, s10, s13
 800f948:	eddf 6a46 	vldr	s13, [pc, #280]	; 800fa64 <__ieee754_powf+0x3f0>
 800f94c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800f950:	eddf 6a45 	vldr	s13, [pc, #276]	; 800fa68 <__ieee754_powf+0x3f4>
 800f954:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f958:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800fa3c <__ieee754_powf+0x3c8>
 800f95c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f960:	eddf 6a42 	vldr	s13, [pc, #264]	; 800fa6c <__ieee754_powf+0x3f8>
 800f964:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f968:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800fa70 <__ieee754_powf+0x3fc>
 800f96c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f970:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800f974:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800f978:	ee66 6a86 	vmul.f32	s13, s13, s12
 800f97c:	eee5 6a07 	vfma.f32	s13, s10, s14
 800f980:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800f984:	eef0 7a45 	vmov.f32	s15, s10
 800f988:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800f98c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f990:	ee17 1a90 	vmov	r1, s15
 800f994:	4011      	ands	r1, r2
 800f996:	ee07 1a90 	vmov	s15, r1
 800f99a:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800f99e:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800f9a2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800f9a6:	ee27 7a24 	vmul.f32	s14, s14, s9
 800f9aa:	eea6 7a27 	vfma.f32	s14, s12, s15
 800f9ae:	eeb0 6a47 	vmov.f32	s12, s14
 800f9b2:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800f9b6:	ee16 1a10 	vmov	r1, s12
 800f9ba:	4011      	ands	r1, r2
 800f9bc:	ee06 1a90 	vmov	s13, r1
 800f9c0:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800f9c4:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800fa74 <__ieee754_powf+0x400>
 800f9c8:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800fa78 <__ieee754_powf+0x404>
 800f9cc:	ee37 7a66 	vsub.f32	s14, s14, s13
 800f9d0:	ee06 1a10 	vmov	s12, r1
 800f9d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f9d8:	eddf 7a28 	vldr	s15, [pc, #160]	; 800fa7c <__ieee754_powf+0x408>
 800f9dc:	4928      	ldr	r1, [pc, #160]	; (800fa80 <__ieee754_powf+0x40c>)
 800f9de:	eea6 7a27 	vfma.f32	s14, s12, s15
 800f9e2:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800f9e6:	edd1 7a00 	vldr	s15, [r1]
 800f9ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f9ee:	ee07 3a90 	vmov	s15, r3
 800f9f2:	4b24      	ldr	r3, [pc, #144]	; (800fa84 <__ieee754_powf+0x410>)
 800f9f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f9f8:	eef0 7a47 	vmov.f32	s15, s14
 800f9fc:	eee6 7a25 	vfma.f32	s15, s12, s11
 800fa00:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800fa04:	edd5 0a00 	vldr	s1, [r5]
 800fa08:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800fa0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fa10:	ee17 3a90 	vmov	r3, s15
 800fa14:	4013      	ands	r3, r2
 800fa16:	ee07 3a90 	vmov	s15, r3
 800fa1a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800fa1e:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800fa22:	eee6 6a65 	vfms.f32	s13, s12, s11
 800fa26:	ee77 7a66 	vsub.f32	s15, s14, s13
 800fa2a:	e70e      	b.n	800f84a <__ieee754_powf+0x1d6>
 800fa2c:	2501      	movs	r5, #1
 800fa2e:	e75d      	b.n	800f8ec <__ieee754_powf+0x278>
 800fa30:	00000000 	.word	0x00000000
 800fa34:	3f7ffff3 	.word	0x3f7ffff3
 800fa38:	3f800007 	.word	0x3f800007
 800fa3c:	3eaaaaab 	.word	0x3eaaaaab
 800fa40:	3fb8aa3b 	.word	0x3fb8aa3b
 800fa44:	36eca570 	.word	0x36eca570
 800fa48:	3fb8aa00 	.word	0x3fb8aa00
 800fa4c:	4b800000 	.word	0x4b800000
 800fa50:	001cc471 	.word	0x001cc471
 800fa54:	005db3d6 	.word	0x005db3d6
 800fa58:	08010754 	.word	0x08010754
 800fa5c:	fffff000 	.word	0xfffff000
 800fa60:	3e6c3255 	.word	0x3e6c3255
 800fa64:	3e53f142 	.word	0x3e53f142
 800fa68:	3e8ba305 	.word	0x3e8ba305
 800fa6c:	3edb6db7 	.word	0x3edb6db7
 800fa70:	3f19999a 	.word	0x3f19999a
 800fa74:	3f76384f 	.word	0x3f76384f
 800fa78:	3f763800 	.word	0x3f763800
 800fa7c:	369dc3a0 	.word	0x369dc3a0
 800fa80:	08010764 	.word	0x08010764
 800fa84:	0801075c 	.word	0x0801075c
 800fa88:	3338aa3c 	.word	0x3338aa3c
 800fa8c:	f040 8095 	bne.w	800fbba <__ieee754_powf+0x546>
 800fa90:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800fa88 <__ieee754_powf+0x414>
 800fa94:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fa98:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800fa9c:	eef4 6ac7 	vcmpe.f32	s13, s14
 800faa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faa4:	f73f aefa 	bgt.w	800f89c <__ieee754_powf+0x228>
 800faa8:	15db      	asrs	r3, r3, #23
 800faaa:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800faae:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800fab2:	4103      	asrs	r3, r0
 800fab4:	4423      	add	r3, r4
 800fab6:	494b      	ldr	r1, [pc, #300]	; (800fbe4 <__ieee754_powf+0x570>)
 800fab8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fabc:	3a7f      	subs	r2, #127	; 0x7f
 800fabe:	4111      	asrs	r1, r2
 800fac0:	ea23 0101 	bic.w	r1, r3, r1
 800fac4:	ee07 1a10 	vmov	s14, r1
 800fac8:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800facc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800fad0:	f1c2 0217 	rsb	r2, r2, #23
 800fad4:	4110      	asrs	r0, r2
 800fad6:	2c00      	cmp	r4, #0
 800fad8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fadc:	bfb8      	it	lt
 800fade:	4240      	neglt	r0, r0
 800fae0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800fae4:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800fbe8 <__ieee754_powf+0x574>
 800fae8:	eddf 6a40 	vldr	s13, [pc, #256]	; 800fbec <__ieee754_powf+0x578>
 800faec:	ee17 3a10 	vmov	r3, s14
 800faf0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800faf4:	f023 030f 	bic.w	r3, r3, #15
 800faf8:	ee07 3a10 	vmov	s14, r3
 800fafc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fb00:	ee27 0a00 	vmul.f32	s0, s14, s0
 800fb04:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800fb08:	eddf 7a39 	vldr	s15, [pc, #228]	; 800fbf0 <__ieee754_powf+0x57c>
 800fb0c:	eea0 0aa7 	vfma.f32	s0, s1, s15
 800fb10:	eef0 7a40 	vmov.f32	s15, s0
 800fb14:	eee7 7a26 	vfma.f32	s15, s14, s13
 800fb18:	eeb0 6a67 	vmov.f32	s12, s15
 800fb1c:	eea7 6a66 	vfms.f32	s12, s14, s13
 800fb20:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800fb24:	ee30 0a46 	vsub.f32	s0, s0, s12
 800fb28:	eddf 6a32 	vldr	s13, [pc, #200]	; 800fbf4 <__ieee754_powf+0x580>
 800fb2c:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800fbf8 <__ieee754_powf+0x584>
 800fb30:	eee7 6a06 	vfma.f32	s13, s14, s12
 800fb34:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800fbfc <__ieee754_powf+0x588>
 800fb38:	eea6 6a87 	vfma.f32	s12, s13, s14
 800fb3c:	eddf 6a30 	vldr	s13, [pc, #192]	; 800fc00 <__ieee754_powf+0x58c>
 800fb40:	eee6 6a07 	vfma.f32	s13, s12, s14
 800fb44:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800fc04 <__ieee754_powf+0x590>
 800fb48:	eea6 6a87 	vfma.f32	s12, s13, s14
 800fb4c:	eef0 6a67 	vmov.f32	s13, s15
 800fb50:	eee6 6a47 	vfms.f32	s13, s12, s14
 800fb54:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800fb58:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800fb5c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800fb60:	eea7 0a80 	vfma.f32	s0, s15, s0
 800fb64:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800fb68:	ee37 0a40 	vsub.f32	s0, s14, s0
 800fb6c:	ee70 7a67 	vsub.f32	s15, s0, s15
 800fb70:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fb74:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fb78:	ee10 3a10 	vmov	r3, s0
 800fb7c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800fb80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800fb84:	da1f      	bge.n	800fbc6 <__ieee754_powf+0x552>
 800fb86:	f000 f957 	bl	800fe38 <scalbnf>
 800fb8a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800fb8e:	e589      	b.n	800f6a4 <__ieee754_powf+0x30>
 800fb90:	4a1d      	ldr	r2, [pc, #116]	; (800fc08 <__ieee754_powf+0x594>)
 800fb92:	4293      	cmp	r3, r2
 800fb94:	dd07      	ble.n	800fba6 <__ieee754_powf+0x532>
 800fb96:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800fb9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb9e:	bf4c      	ite	mi
 800fba0:	2001      	movmi	r0, #1
 800fba2:	2000      	movpl	r0, #0
 800fba4:	e61f      	b.n	800f7e6 <__ieee754_powf+0x172>
 800fba6:	d108      	bne.n	800fbba <__ieee754_powf+0x546>
 800fba8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fbac:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800fbb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbb4:	f6ff af78 	blt.w	800faa8 <__ieee754_powf+0x434>
 800fbb8:	e7ed      	b.n	800fb96 <__ieee754_powf+0x522>
 800fbba:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800fbbe:	f73f af73 	bgt.w	800faa8 <__ieee754_powf+0x434>
 800fbc2:	2000      	movs	r0, #0
 800fbc4:	e78c      	b.n	800fae0 <__ieee754_powf+0x46c>
 800fbc6:	ee00 3a10 	vmov	s0, r3
 800fbca:	e7de      	b.n	800fb8a <__ieee754_powf+0x516>
 800fbcc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fbd0:	e568      	b.n	800f6a4 <__ieee754_powf+0x30>
 800fbd2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800fc0c <__ieee754_powf+0x598>
 800fbd6:	e565      	b.n	800f6a4 <__ieee754_powf+0x30>
 800fbd8:	eeb0 0a48 	vmov.f32	s0, s16
 800fbdc:	e562      	b.n	800f6a4 <__ieee754_powf+0x30>
 800fbde:	2700      	movs	r7, #0
 800fbe0:	e58d      	b.n	800f6fe <__ieee754_powf+0x8a>
 800fbe2:	bf00      	nop
 800fbe4:	007fffff 	.word	0x007fffff
 800fbe8:	35bfbe8c 	.word	0x35bfbe8c
 800fbec:	3f317200 	.word	0x3f317200
 800fbf0:	3f317218 	.word	0x3f317218
 800fbf4:	b5ddea0e 	.word	0xb5ddea0e
 800fbf8:	3331bb4c 	.word	0x3331bb4c
 800fbfc:	388ab355 	.word	0x388ab355
 800fc00:	bb360b61 	.word	0xbb360b61
 800fc04:	3e2aaaab 	.word	0x3e2aaaab
 800fc08:	43160000 	.word	0x43160000
 800fc0c:	00000000 	.word	0x00000000

0800fc10 <__ieee754_sqrtf>:
 800fc10:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800fc14:	4770      	bx	lr

0800fc16 <with_errnof>:
 800fc16:	b513      	push	{r0, r1, r4, lr}
 800fc18:	4604      	mov	r4, r0
 800fc1a:	ed8d 0a01 	vstr	s0, [sp, #4]
 800fc1e:	f7fc fd49 	bl	800c6b4 <__errno>
 800fc22:	ed9d 0a01 	vldr	s0, [sp, #4]
 800fc26:	6004      	str	r4, [r0, #0]
 800fc28:	b002      	add	sp, #8
 800fc2a:	bd10      	pop	{r4, pc}

0800fc2c <xflowf>:
 800fc2c:	b130      	cbz	r0, 800fc3c <xflowf+0x10>
 800fc2e:	eef1 7a40 	vneg.f32	s15, s0
 800fc32:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fc36:	2022      	movs	r0, #34	; 0x22
 800fc38:	f7ff bfed 	b.w	800fc16 <with_errnof>
 800fc3c:	eef0 7a40 	vmov.f32	s15, s0
 800fc40:	e7f7      	b.n	800fc32 <xflowf+0x6>
	...

0800fc44 <__math_uflowf>:
 800fc44:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fc4c <__math_uflowf+0x8>
 800fc48:	f7ff bff0 	b.w	800fc2c <xflowf>
 800fc4c:	10000000 	.word	0x10000000

0800fc50 <__math_oflowf>:
 800fc50:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fc58 <__math_oflowf+0x8>
 800fc54:	f7ff bfea 	b.w	800fc2c <xflowf>
 800fc58:	70000000 	.word	0x70000000

0800fc5c <atanf>:
 800fc5c:	b538      	push	{r3, r4, r5, lr}
 800fc5e:	ee10 5a10 	vmov	r5, s0
 800fc62:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800fc66:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800fc6a:	eef0 7a40 	vmov.f32	s15, s0
 800fc6e:	db10      	blt.n	800fc92 <atanf+0x36>
 800fc70:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800fc74:	dd04      	ble.n	800fc80 <atanf+0x24>
 800fc76:	ee70 7a00 	vadd.f32	s15, s0, s0
 800fc7a:	eeb0 0a67 	vmov.f32	s0, s15
 800fc7e:	bd38      	pop	{r3, r4, r5, pc}
 800fc80:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800fdb8 <atanf+0x15c>
 800fc84:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800fdbc <atanf+0x160>
 800fc88:	2d00      	cmp	r5, #0
 800fc8a:	bfd8      	it	le
 800fc8c:	eef0 7a40 	vmovle.f32	s15, s0
 800fc90:	e7f3      	b.n	800fc7a <atanf+0x1e>
 800fc92:	4b4b      	ldr	r3, [pc, #300]	; (800fdc0 <atanf+0x164>)
 800fc94:	429c      	cmp	r4, r3
 800fc96:	dc10      	bgt.n	800fcba <atanf+0x5e>
 800fc98:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800fc9c:	da0a      	bge.n	800fcb4 <atanf+0x58>
 800fc9e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800fdc4 <atanf+0x168>
 800fca2:	ee30 7a07 	vadd.f32	s14, s0, s14
 800fca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fcaa:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800fcae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcb2:	dce2      	bgt.n	800fc7a <atanf+0x1e>
 800fcb4:	f04f 33ff 	mov.w	r3, #4294967295
 800fcb8:	e013      	b.n	800fce2 <atanf+0x86>
 800fcba:	f000 f8a3 	bl	800fe04 <fabsf>
 800fcbe:	4b42      	ldr	r3, [pc, #264]	; (800fdc8 <atanf+0x16c>)
 800fcc0:	429c      	cmp	r4, r3
 800fcc2:	dc4f      	bgt.n	800fd64 <atanf+0x108>
 800fcc4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800fcc8:	429c      	cmp	r4, r3
 800fcca:	dc41      	bgt.n	800fd50 <atanf+0xf4>
 800fccc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800fcd0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800fcd4:	eea0 7a27 	vfma.f32	s14, s0, s15
 800fcd8:	2300      	movs	r3, #0
 800fcda:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fcde:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fce2:	1c5a      	adds	r2, r3, #1
 800fce4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800fce8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800fdcc <atanf+0x170>
 800fcec:	eddf 5a38 	vldr	s11, [pc, #224]	; 800fdd0 <atanf+0x174>
 800fcf0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800fdd4 <atanf+0x178>
 800fcf4:	ee66 6a06 	vmul.f32	s13, s12, s12
 800fcf8:	eee6 5a87 	vfma.f32	s11, s13, s14
 800fcfc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800fdd8 <atanf+0x17c>
 800fd00:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800fd04:	eddf 5a35 	vldr	s11, [pc, #212]	; 800fddc <atanf+0x180>
 800fd08:	eee7 5a26 	vfma.f32	s11, s14, s13
 800fd0c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800fde0 <atanf+0x184>
 800fd10:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800fd14:	eddf 5a33 	vldr	s11, [pc, #204]	; 800fde4 <atanf+0x188>
 800fd18:	eee7 5a26 	vfma.f32	s11, s14, s13
 800fd1c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800fde8 <atanf+0x18c>
 800fd20:	eea6 5a87 	vfma.f32	s10, s13, s14
 800fd24:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800fdec <atanf+0x190>
 800fd28:	eea5 7a26 	vfma.f32	s14, s10, s13
 800fd2c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800fdf0 <atanf+0x194>
 800fd30:	eea7 5a26 	vfma.f32	s10, s14, s13
 800fd34:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800fdf4 <atanf+0x198>
 800fd38:	eea5 7a26 	vfma.f32	s14, s10, s13
 800fd3c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800fd40:	eea5 7a86 	vfma.f32	s14, s11, s12
 800fd44:	ee27 7a87 	vmul.f32	s14, s15, s14
 800fd48:	d121      	bne.n	800fd8e <atanf+0x132>
 800fd4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fd4e:	e794      	b.n	800fc7a <atanf+0x1e>
 800fd50:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fd54:	ee30 7a67 	vsub.f32	s14, s0, s15
 800fd58:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fd5c:	2301      	movs	r3, #1
 800fd5e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fd62:	e7be      	b.n	800fce2 <atanf+0x86>
 800fd64:	4b24      	ldr	r3, [pc, #144]	; (800fdf8 <atanf+0x19c>)
 800fd66:	429c      	cmp	r4, r3
 800fd68:	dc0b      	bgt.n	800fd82 <atanf+0x126>
 800fd6a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800fd6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fd72:	eea0 7a27 	vfma.f32	s14, s0, s15
 800fd76:	2302      	movs	r3, #2
 800fd78:	ee70 6a67 	vsub.f32	s13, s0, s15
 800fd7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fd80:	e7af      	b.n	800fce2 <atanf+0x86>
 800fd82:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800fd86:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fd8a:	2303      	movs	r3, #3
 800fd8c:	e7a9      	b.n	800fce2 <atanf+0x86>
 800fd8e:	4a1b      	ldr	r2, [pc, #108]	; (800fdfc <atanf+0x1a0>)
 800fd90:	491b      	ldr	r1, [pc, #108]	; (800fe00 <atanf+0x1a4>)
 800fd92:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800fd96:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800fd9a:	ed93 0a00 	vldr	s0, [r3]
 800fd9e:	ee37 7a40 	vsub.f32	s14, s14, s0
 800fda2:	ed92 0a00 	vldr	s0, [r2]
 800fda6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fdaa:	2d00      	cmp	r5, #0
 800fdac:	ee70 7a67 	vsub.f32	s15, s0, s15
 800fdb0:	bfb8      	it	lt
 800fdb2:	eef1 7a67 	vneglt.f32	s15, s15
 800fdb6:	e760      	b.n	800fc7a <atanf+0x1e>
 800fdb8:	3fc90fdb 	.word	0x3fc90fdb
 800fdbc:	bfc90fdb 	.word	0xbfc90fdb
 800fdc0:	3edfffff 	.word	0x3edfffff
 800fdc4:	7149f2ca 	.word	0x7149f2ca
 800fdc8:	3f97ffff 	.word	0x3f97ffff
 800fdcc:	3c8569d7 	.word	0x3c8569d7
 800fdd0:	3d4bda59 	.word	0x3d4bda59
 800fdd4:	bd6ef16b 	.word	0xbd6ef16b
 800fdd8:	3d886b35 	.word	0x3d886b35
 800fddc:	3dba2e6e 	.word	0x3dba2e6e
 800fde0:	3e124925 	.word	0x3e124925
 800fde4:	3eaaaaab 	.word	0x3eaaaaab
 800fde8:	bd15a221 	.word	0xbd15a221
 800fdec:	bd9d8795 	.word	0xbd9d8795
 800fdf0:	bde38e38 	.word	0xbde38e38
 800fdf4:	be4ccccd 	.word	0xbe4ccccd
 800fdf8:	401bffff 	.word	0x401bffff
 800fdfc:	0801076c 	.word	0x0801076c
 800fe00:	0801077c 	.word	0x0801077c

0800fe04 <fabsf>:
 800fe04:	ee10 3a10 	vmov	r3, s0
 800fe08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fe0c:	ee00 3a10 	vmov	s0, r3
 800fe10:	4770      	bx	lr

0800fe12 <finitef>:
 800fe12:	b082      	sub	sp, #8
 800fe14:	ed8d 0a01 	vstr	s0, [sp, #4]
 800fe18:	9801      	ldr	r0, [sp, #4]
 800fe1a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800fe1e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800fe22:	bfac      	ite	ge
 800fe24:	2000      	movge	r0, #0
 800fe26:	2001      	movlt	r0, #1
 800fe28:	b002      	add	sp, #8
 800fe2a:	4770      	bx	lr

0800fe2c <nanf>:
 800fe2c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fe34 <nanf+0x8>
 800fe30:	4770      	bx	lr
 800fe32:	bf00      	nop
 800fe34:	7fc00000 	.word	0x7fc00000

0800fe38 <scalbnf>:
 800fe38:	ee10 3a10 	vmov	r3, s0
 800fe3c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800fe40:	d025      	beq.n	800fe8e <scalbnf+0x56>
 800fe42:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800fe46:	d302      	bcc.n	800fe4e <scalbnf+0x16>
 800fe48:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fe4c:	4770      	bx	lr
 800fe4e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800fe52:	d122      	bne.n	800fe9a <scalbnf+0x62>
 800fe54:	4b2a      	ldr	r3, [pc, #168]	; (800ff00 <scalbnf+0xc8>)
 800fe56:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800ff04 <scalbnf+0xcc>
 800fe5a:	4298      	cmp	r0, r3
 800fe5c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fe60:	db16      	blt.n	800fe90 <scalbnf+0x58>
 800fe62:	ee10 3a10 	vmov	r3, s0
 800fe66:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fe6a:	3a19      	subs	r2, #25
 800fe6c:	4402      	add	r2, r0
 800fe6e:	2afe      	cmp	r2, #254	; 0xfe
 800fe70:	dd15      	ble.n	800fe9e <scalbnf+0x66>
 800fe72:	ee10 3a10 	vmov	r3, s0
 800fe76:	eddf 7a24 	vldr	s15, [pc, #144]	; 800ff08 <scalbnf+0xd0>
 800fe7a:	eddf 6a24 	vldr	s13, [pc, #144]	; 800ff0c <scalbnf+0xd4>
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	eeb0 7a67 	vmov.f32	s14, s15
 800fe84:	bfb8      	it	lt
 800fe86:	eef0 7a66 	vmovlt.f32	s15, s13
 800fe8a:	ee27 0a27 	vmul.f32	s0, s14, s15
 800fe8e:	4770      	bx	lr
 800fe90:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800ff10 <scalbnf+0xd8>
 800fe94:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fe98:	4770      	bx	lr
 800fe9a:	0dd2      	lsrs	r2, r2, #23
 800fe9c:	e7e6      	b.n	800fe6c <scalbnf+0x34>
 800fe9e:	2a00      	cmp	r2, #0
 800fea0:	dd06      	ble.n	800feb0 <scalbnf+0x78>
 800fea2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fea6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800feaa:	ee00 3a10 	vmov	s0, r3
 800feae:	4770      	bx	lr
 800feb0:	f112 0f16 	cmn.w	r2, #22
 800feb4:	da1a      	bge.n	800feec <scalbnf+0xb4>
 800feb6:	f24c 3350 	movw	r3, #50000	; 0xc350
 800feba:	4298      	cmp	r0, r3
 800febc:	ee10 3a10 	vmov	r3, s0
 800fec0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fec4:	dd0a      	ble.n	800fedc <scalbnf+0xa4>
 800fec6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800ff08 <scalbnf+0xd0>
 800feca:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800ff0c <scalbnf+0xd4>
 800fece:	eef0 7a40 	vmov.f32	s15, s0
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	bf18      	it	ne
 800fed6:	eeb0 0a47 	vmovne.f32	s0, s14
 800feda:	e7db      	b.n	800fe94 <scalbnf+0x5c>
 800fedc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800ff10 <scalbnf+0xd8>
 800fee0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800ff14 <scalbnf+0xdc>
 800fee4:	eef0 7a40 	vmov.f32	s15, s0
 800fee8:	2b00      	cmp	r3, #0
 800feea:	e7f3      	b.n	800fed4 <scalbnf+0x9c>
 800feec:	3219      	adds	r2, #25
 800feee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fef2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800fef6:	eddf 7a08 	vldr	s15, [pc, #32]	; 800ff18 <scalbnf+0xe0>
 800fefa:	ee07 3a10 	vmov	s14, r3
 800fefe:	e7c4      	b.n	800fe8a <scalbnf+0x52>
 800ff00:	ffff3cb0 	.word	0xffff3cb0
 800ff04:	4c000000 	.word	0x4c000000
 800ff08:	7149f2ca 	.word	0x7149f2ca
 800ff0c:	f149f2ca 	.word	0xf149f2ca
 800ff10:	0da24260 	.word	0x0da24260
 800ff14:	8da24260 	.word	0x8da24260
 800ff18:	33000000 	.word	0x33000000

0800ff1c <_init>:
 800ff1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff1e:	bf00      	nop
 800ff20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff22:	bc08      	pop	{r3}
 800ff24:	469e      	mov	lr, r3
 800ff26:	4770      	bx	lr

0800ff28 <_fini>:
 800ff28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff2a:	bf00      	nop
 800ff2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff2e:	bc08      	pop	{r3}
 800ff30:	469e      	mov	lr, r3
 800ff32:	4770      	bx	lr
