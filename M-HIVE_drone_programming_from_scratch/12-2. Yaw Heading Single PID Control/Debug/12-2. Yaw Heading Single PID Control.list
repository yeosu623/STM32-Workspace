
12-2. Yaw Heading Single PID Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000febc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000854  08010050  08010050  00020050  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080108a4  080108a4  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  080108a4  080108a4  000208a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080108ac  080108ac  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080108ac  080108ac  000208ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080108b0  080108b0  000208b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080108b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c8  200001e0  08010a94  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200006a8  08010a94  000306a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a7e7  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004763  00000000  00000000  0004a9f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001778  00000000  00000000  0004f160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015b0  00000000  00000000  000508d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027471  00000000  00000000  00051e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ccba  00000000  00000000  000792f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc750  00000000  00000000  00095fb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00172703  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073ac  00000000  00000000  00172754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010034 	.word	0x08010034

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08010034 	.word	0x08010034

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <HAL_Init+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0d      	ldr	r2, [pc, #52]	; (8000eec <HAL_Init+0x40>)
 8000eb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <HAL_Init+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <HAL_Init+0x40>)
 8000ec2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ec6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a07      	ldr	r2, [pc, #28]	; (8000eec <HAL_Init+0x40>)
 8000ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed4:	2003      	movs	r0, #3
 8000ed6:	f000 fd61 	bl	800199c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eda:	2000      	movs	r0, #0
 8000edc:	f000 f808 	bl	8000ef0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee0:	f00a fbca 	bl	800b678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40023c00 	.word	0x40023c00

08000ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <HAL_InitTick+0x54>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <HAL_InitTick+0x58>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4619      	mov	r1, r3
 8000f02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 fd79 	bl	8001a06 <HAL_SYSTICK_Config>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e00e      	b.n	8000f3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b0f      	cmp	r3, #15
 8000f22:	d80a      	bhi.n	8000f3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f24:	2200      	movs	r2, #0
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	f000 fd41 	bl	80019b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f30:	4a06      	ldr	r2, [pc, #24]	; (8000f4c <HAL_InitTick+0x5c>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	e000      	b.n	8000f3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	2000000c 	.word	0x2000000c
 8000f48:	20000004 	.word	0x20000004
 8000f4c:	20000000 	.word	0x20000000

08000f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_IncTick+0x20>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_IncTick+0x24>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <HAL_IncTick+0x24>)
 8000f62:	6013      	str	r3, [r2, #0]
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000004 	.word	0x20000004
 8000f74:	200001fc 	.word	0x200001fc

08000f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <HAL_GetTick+0x14>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	200001fc 	.word	0x200001fc

08000f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f98:	f7ff ffee 	bl	8000f78 <HAL_GetTick>
 8000f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa8:	d005      	beq.n	8000fb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <HAL_Delay+0x44>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fb6:	bf00      	nop
 8000fb8:	f7ff ffde 	bl	8000f78 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d8f7      	bhi.n	8000fb8 <HAL_Delay+0x28>
  {
  }
}
 8000fc8:	bf00      	nop
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000004 	.word	0x20000004

08000fd8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d101      	bne.n	8000fee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e033      	b.n	8001056 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d109      	bne.n	800100a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f007 fe3e 	bl	8008c78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	f003 0310 	and.w	r3, r3, #16
 8001012:	2b00      	cmp	r3, #0
 8001014:	d118      	bne.n	8001048 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800101e:	f023 0302 	bic.w	r3, r3, #2
 8001022:	f043 0202 	orr.w	r2, r3, #2
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f000 fa68 	bl	8001500 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	f023 0303 	bic.w	r3, r3, #3
 800103e:	f043 0201 	orr.w	r2, r3, #1
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	641a      	str	r2, [r3, #64]	; 0x40
 8001046:	e001      	b.n	800104c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001054:	7bfb      	ldrb	r3, [r7, #15]
}
 8001056:	4618      	mov	r0, r3
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800106c:	2300      	movs	r3, #0
 800106e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001076:	2b01      	cmp	r3, #1
 8001078:	d101      	bne.n	800107e <HAL_ADC_Start_DMA+0x1e>
 800107a:	2302      	movs	r3, #2
 800107c:	e0e9      	b.n	8001252 <HAL_ADC_Start_DMA+0x1f2>
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2201      	movs	r2, #1
 8001082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	2b01      	cmp	r3, #1
 8001092:	d018      	beq.n	80010c6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	689a      	ldr	r2, [r3, #8]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f042 0201 	orr.w	r2, r2, #1
 80010a2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010a4:	4b6d      	ldr	r3, [pc, #436]	; (800125c <HAL_ADC_Start_DMA+0x1fc>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a6d      	ldr	r2, [pc, #436]	; (8001260 <HAL_ADC_Start_DMA+0x200>)
 80010aa:	fba2 2303 	umull	r2, r3, r2, r3
 80010ae:	0c9a      	lsrs	r2, r3, #18
 80010b0:	4613      	mov	r3, r2
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	4413      	add	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80010b8:	e002      	b.n	80010c0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	3b01      	subs	r3, #1
 80010be:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1f9      	bne.n	80010ba <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010d4:	d107      	bne.n	80010e6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	689a      	ldr	r2, [r3, #8]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	f040 80a1 	bne.w	8001238 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010fe:	f023 0301 	bic.w	r3, r3, #1
 8001102:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001114:	2b00      	cmp	r3, #0
 8001116:	d007      	beq.n	8001128 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001120:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001134:	d106      	bne.n	8001144 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113a:	f023 0206 	bic.w	r2, r3, #6
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	645a      	str	r2, [r3, #68]	; 0x44
 8001142:	e002      	b.n	800114a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2200      	movs	r2, #0
 8001148:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001152:	4b44      	ldr	r3, [pc, #272]	; (8001264 <HAL_ADC_Start_DMA+0x204>)
 8001154:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800115a:	4a43      	ldr	r2, [pc, #268]	; (8001268 <HAL_ADC_Start_DMA+0x208>)
 800115c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001162:	4a42      	ldr	r2, [pc, #264]	; (800126c <HAL_ADC_Start_DMA+0x20c>)
 8001164:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800116a:	4a41      	ldr	r2, [pc, #260]	; (8001270 <HAL_ADC_Start_DMA+0x210>)
 800116c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001176:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001186:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001196:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	334c      	adds	r3, #76	; 0x4c
 80011a2:	4619      	mov	r1, r3
 80011a4:	68ba      	ldr	r2, [r7, #8]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f000 fce8 	bl	8001b7c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 031f 	and.w	r3, r3, #31
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d12a      	bne.n	800120e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a2d      	ldr	r2, [pc, #180]	; (8001274 <HAL_ADC_Start_DMA+0x214>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d015      	beq.n	80011ee <HAL_ADC_Start_DMA+0x18e>
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a2c      	ldr	r2, [pc, #176]	; (8001278 <HAL_ADC_Start_DMA+0x218>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d105      	bne.n	80011d8 <HAL_ADC_Start_DMA+0x178>
 80011cc:	4b25      	ldr	r3, [pc, #148]	; (8001264 <HAL_ADC_Start_DMA+0x204>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 031f 	and.w	r3, r3, #31
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d00a      	beq.n	80011ee <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a27      	ldr	r2, [pc, #156]	; (800127c <HAL_ADC_Start_DMA+0x21c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d136      	bne.n	8001250 <HAL_ADC_Start_DMA+0x1f0>
 80011e2:	4b20      	ldr	r3, [pc, #128]	; (8001264 <HAL_ADC_Start_DMA+0x204>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 0310 	and.w	r3, r3, #16
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d130      	bne.n	8001250 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d129      	bne.n	8001250 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	689a      	ldr	r2, [r3, #8]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	e020      	b.n	8001250 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a18      	ldr	r2, [pc, #96]	; (8001274 <HAL_ADC_Start_DMA+0x214>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d11b      	bne.n	8001250 <HAL_ADC_Start_DMA+0x1f0>
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d114      	bne.n	8001250 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	e00b      	b.n	8001250 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	f043 0210 	orr.w	r2, r3, #16
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001248:	f043 0201 	orr.w	r2, r3, #1
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	2000000c 	.word	0x2000000c
 8001260:	431bde83 	.word	0x431bde83
 8001264:	40012300 	.word	0x40012300
 8001268:	080016f9 	.word	0x080016f9
 800126c:	080017b3 	.word	0x080017b3
 8001270:	080017cf 	.word	0x080017cf
 8001274:	40012000 	.word	0x40012000
 8001278:	40012100 	.word	0x40012100
 800127c:	40012200 	.word	0x40012200

08001280 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d101      	bne.n	80012d8 <HAL_ADC_ConfigChannel+0x1c>
 80012d4:	2302      	movs	r3, #2
 80012d6:	e105      	b.n	80014e4 <HAL_ADC_ConfigChannel+0x228>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2201      	movs	r2, #1
 80012dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b09      	cmp	r3, #9
 80012e6:	d925      	bls.n	8001334 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	68d9      	ldr	r1, [r3, #12]
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	461a      	mov	r2, r3
 80012f6:	4613      	mov	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4413      	add	r3, r2
 80012fc:	3b1e      	subs	r3, #30
 80012fe:	2207      	movs	r2, #7
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43da      	mvns	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	400a      	ands	r2, r1
 800130c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	68d9      	ldr	r1, [r3, #12]
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	b29b      	uxth	r3, r3
 800131e:	4618      	mov	r0, r3
 8001320:	4603      	mov	r3, r0
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	4403      	add	r3, r0
 8001326:	3b1e      	subs	r3, #30
 8001328:	409a      	lsls	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	430a      	orrs	r2, r1
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	e022      	b.n	800137a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6919      	ldr	r1, [r3, #16]
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	b29b      	uxth	r3, r3
 8001340:	461a      	mov	r2, r3
 8001342:	4613      	mov	r3, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	4413      	add	r3, r2
 8001348:	2207      	movs	r2, #7
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43da      	mvns	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	400a      	ands	r2, r1
 8001356:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6919      	ldr	r1, [r3, #16]
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	b29b      	uxth	r3, r3
 8001368:	4618      	mov	r0, r3
 800136a:	4603      	mov	r3, r0
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	4403      	add	r3, r0
 8001370:	409a      	lsls	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	430a      	orrs	r2, r1
 8001378:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b06      	cmp	r3, #6
 8001380:	d824      	bhi.n	80013cc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685a      	ldr	r2, [r3, #4]
 800138c:	4613      	mov	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	3b05      	subs	r3, #5
 8001394:	221f      	movs	r2, #31
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43da      	mvns	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	400a      	ands	r2, r1
 80013a2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	4618      	mov	r0, r3
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685a      	ldr	r2, [r3, #4]
 80013b6:	4613      	mov	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	4413      	add	r3, r2
 80013bc:	3b05      	subs	r3, #5
 80013be:	fa00 f203 	lsl.w	r2, r0, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	430a      	orrs	r2, r1
 80013c8:	635a      	str	r2, [r3, #52]	; 0x34
 80013ca:	e04c      	b.n	8001466 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	2b0c      	cmp	r3, #12
 80013d2:	d824      	bhi.n	800141e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685a      	ldr	r2, [r3, #4]
 80013de:	4613      	mov	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	3b23      	subs	r3, #35	; 0x23
 80013e6:	221f      	movs	r2, #31
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43da      	mvns	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	400a      	ands	r2, r1
 80013f4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	b29b      	uxth	r3, r3
 8001402:	4618      	mov	r0, r3
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	4613      	mov	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	3b23      	subs	r3, #35	; 0x23
 8001410:	fa00 f203 	lsl.w	r2, r0, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	430a      	orrs	r2, r1
 800141a:	631a      	str	r2, [r3, #48]	; 0x30
 800141c:	e023      	b.n	8001466 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	4613      	mov	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	3b41      	subs	r3, #65	; 0x41
 8001430:	221f      	movs	r2, #31
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43da      	mvns	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	400a      	ands	r2, r1
 800143e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	b29b      	uxth	r3, r3
 800144c:	4618      	mov	r0, r3
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	4613      	mov	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	3b41      	subs	r3, #65	; 0x41
 800145a:	fa00 f203 	lsl.w	r2, r0, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	430a      	orrs	r2, r1
 8001464:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001466:	4b22      	ldr	r3, [pc, #136]	; (80014f0 <HAL_ADC_ConfigChannel+0x234>)
 8001468:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a21      	ldr	r2, [pc, #132]	; (80014f4 <HAL_ADC_ConfigChannel+0x238>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d109      	bne.n	8001488 <HAL_ADC_ConfigChannel+0x1cc>
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b12      	cmp	r3, #18
 800147a:	d105      	bne.n	8001488 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a19      	ldr	r2, [pc, #100]	; (80014f4 <HAL_ADC_ConfigChannel+0x238>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d123      	bne.n	80014da <HAL_ADC_ConfigChannel+0x21e>
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2b10      	cmp	r3, #16
 8001498:	d003      	beq.n	80014a2 <HAL_ADC_ConfigChannel+0x1e6>
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2b11      	cmp	r3, #17
 80014a0:	d11b      	bne.n	80014da <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2b10      	cmp	r3, #16
 80014b4:	d111      	bne.n	80014da <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <HAL_ADC_ConfigChannel+0x23c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a10      	ldr	r2, [pc, #64]	; (80014fc <HAL_ADC_ConfigChannel+0x240>)
 80014bc:	fba2 2303 	umull	r2, r3, r2, r3
 80014c0:	0c9a      	lsrs	r2, r3, #18
 80014c2:	4613      	mov	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014cc:	e002      	b.n	80014d4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	3b01      	subs	r3, #1
 80014d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1f9      	bne.n	80014ce <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	40012300 	.word	0x40012300
 80014f4:	40012000 	.word	0x40012000
 80014f8:	2000000c 	.word	0x2000000c
 80014fc:	431bde83 	.word	0x431bde83

08001500 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001508:	4b79      	ldr	r3, [pc, #484]	; (80016f0 <ADC_Init+0x1f0>)
 800150a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	431a      	orrs	r2, r3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	685a      	ldr	r2, [r3, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001534:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6859      	ldr	r1, [r3, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	021a      	lsls	r2, r3, #8
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	430a      	orrs	r2, r1
 8001548:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	685a      	ldr	r2, [r3, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001558:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6859      	ldr	r1, [r3, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	430a      	orrs	r2, r1
 800156a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689a      	ldr	r2, [r3, #8]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800157a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6899      	ldr	r1, [r3, #8]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68da      	ldr	r2, [r3, #12]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	430a      	orrs	r2, r1
 800158c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001592:	4a58      	ldr	r2, [pc, #352]	; (80016f4 <ADC_Init+0x1f4>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d022      	beq.n	80015de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6899      	ldr	r1, [r3, #8]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	430a      	orrs	r2, r1
 80015b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6899      	ldr	r1, [r3, #8]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	430a      	orrs	r2, r1
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	e00f      	b.n	80015fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 0202 	bic.w	r2, r2, #2
 800160c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6899      	ldr	r1, [r3, #8]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	7e1b      	ldrb	r3, [r3, #24]
 8001618:	005a      	lsls	r2, r3, #1
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	430a      	orrs	r2, r1
 8001620:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d01b      	beq.n	8001664 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	685a      	ldr	r2, [r3, #4]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800163a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800164a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6859      	ldr	r1, [r3, #4]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001656:	3b01      	subs	r3, #1
 8001658:	035a      	lsls	r2, r3, #13
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	e007      	b.n	8001674 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001672:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001682:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	3b01      	subs	r3, #1
 8001690:	051a      	lsls	r2, r3, #20
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	430a      	orrs	r2, r1
 8001698:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6899      	ldr	r1, [r3, #8]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016b6:	025a      	lsls	r2, r3, #9
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	430a      	orrs	r2, r1
 80016be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6899      	ldr	r1, [r3, #8]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	029a      	lsls	r2, r3, #10
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	430a      	orrs	r2, r1
 80016e2:	609a      	str	r2, [r3, #8]
}
 80016e4:	bf00      	nop
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	40012300 	.word	0x40012300
 80016f4:	0f000001 	.word	0x0f000001

080016f8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001704:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800170e:	2b00      	cmp	r3, #0
 8001710:	d13c      	bne.n	800178c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d12b      	bne.n	8001784 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001730:	2b00      	cmp	r3, #0
 8001732:	d127      	bne.n	8001784 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800173e:	2b00      	cmp	r3, #0
 8001740:	d006      	beq.n	8001750 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800174c:	2b00      	cmp	r3, #0
 800174e:	d119      	bne.n	8001784 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f022 0220 	bic.w	r2, r2, #32
 800175e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001770:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d105      	bne.n	8001784 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177c:	f043 0201 	orr.w	r2, r3, #1
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	f7ff fd7b 	bl	8001280 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800178a:	e00e      	b.n	80017aa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	f003 0310 	and.w	r3, r3, #16
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001798:	68f8      	ldr	r0, [r7, #12]
 800179a:	f7ff fd85 	bl	80012a8 <HAL_ADC_ErrorCallback>
}
 800179e:	e004      	b.n	80017aa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	4798      	blx	r3
}
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b084      	sub	sp, #16
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017be:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f7ff fd67 	bl	8001294 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b084      	sub	sp, #16
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017da:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2240      	movs	r2, #64	; 0x40
 80017e0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	f043 0204 	orr.w	r2, r3, #4
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	f7ff fd5a 	bl	80012a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017f4:	bf00      	nop
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800180c:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <__NVIC_SetPriorityGrouping+0x44>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001818:	4013      	ands	r3, r2
 800181a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001824:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800182c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800182e:	4a04      	ldr	r2, [pc, #16]	; (8001840 <__NVIC_SetPriorityGrouping+0x44>)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	60d3      	str	r3, [r2, #12]
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001848:	4b04      	ldr	r3, [pc, #16]	; (800185c <__NVIC_GetPriorityGrouping+0x18>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	0a1b      	lsrs	r3, r3, #8
 800184e:	f003 0307 	and.w	r3, r3, #7
}
 8001852:	4618      	mov	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	2b00      	cmp	r3, #0
 8001870:	db0b      	blt.n	800188a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	f003 021f 	and.w	r2, r3, #31
 8001878:	4907      	ldr	r1, [pc, #28]	; (8001898 <__NVIC_EnableIRQ+0x38>)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	095b      	lsrs	r3, r3, #5
 8001880:	2001      	movs	r0, #1
 8001882:	fa00 f202 	lsl.w	r2, r0, r2
 8001886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	e000e100 	.word	0xe000e100

0800189c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	6039      	str	r1, [r7, #0]
 80018a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	db0a      	blt.n	80018c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	490c      	ldr	r1, [pc, #48]	; (80018e8 <__NVIC_SetPriority+0x4c>)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	0112      	lsls	r2, r2, #4
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	440b      	add	r3, r1
 80018c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c4:	e00a      	b.n	80018dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	4908      	ldr	r1, [pc, #32]	; (80018ec <__NVIC_SetPriority+0x50>)
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	3b04      	subs	r3, #4
 80018d4:	0112      	lsls	r2, r2, #4
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	440b      	add	r3, r1
 80018da:	761a      	strb	r2, [r3, #24]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	e000e100 	.word	0xe000e100
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b089      	sub	sp, #36	; 0x24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f1c3 0307 	rsb	r3, r3, #7
 800190a:	2b04      	cmp	r3, #4
 800190c:	bf28      	it	cs
 800190e:	2304      	movcs	r3, #4
 8001910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3304      	adds	r3, #4
 8001916:	2b06      	cmp	r3, #6
 8001918:	d902      	bls.n	8001920 <NVIC_EncodePriority+0x30>
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	3b03      	subs	r3, #3
 800191e:	e000      	b.n	8001922 <NVIC_EncodePriority+0x32>
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001924:	f04f 32ff 	mov.w	r2, #4294967295
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43da      	mvns	r2, r3
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	401a      	ands	r2, r3
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001938:	f04f 31ff 	mov.w	r1, #4294967295
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	fa01 f303 	lsl.w	r3, r1, r3
 8001942:	43d9      	mvns	r1, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001948:	4313      	orrs	r3, r2
         );
}
 800194a:	4618      	mov	r0, r3
 800194c:	3724      	adds	r7, #36	; 0x24
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
	...

08001958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001968:	d301      	bcc.n	800196e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800196a:	2301      	movs	r3, #1
 800196c:	e00f      	b.n	800198e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800196e:	4a0a      	ldr	r2, [pc, #40]	; (8001998 <SysTick_Config+0x40>)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3b01      	subs	r3, #1
 8001974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001976:	210f      	movs	r1, #15
 8001978:	f04f 30ff 	mov.w	r0, #4294967295
 800197c:	f7ff ff8e 	bl	800189c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001980:	4b05      	ldr	r3, [pc, #20]	; (8001998 <SysTick_Config+0x40>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001986:	4b04      	ldr	r3, [pc, #16]	; (8001998 <SysTick_Config+0x40>)
 8001988:	2207      	movs	r2, #7
 800198a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	e000e010 	.word	0xe000e010

0800199c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff ff29 	bl	80017fc <__NVIC_SetPriorityGrouping>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b086      	sub	sp, #24
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	4603      	mov	r3, r0
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019c4:	f7ff ff3e 	bl	8001844 <__NVIC_GetPriorityGrouping>
 80019c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	6978      	ldr	r0, [r7, #20]
 80019d0:	f7ff ff8e 	bl	80018f0 <NVIC_EncodePriority>
 80019d4:	4602      	mov	r2, r0
 80019d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019da:	4611      	mov	r1, r2
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff5d 	bl	800189c <__NVIC_SetPriority>
}
 80019e2:	bf00      	nop
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	4603      	mov	r3, r0
 80019f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff31 	bl	8001860 <__NVIC_EnableIRQ>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ffa2 	bl	8001958 <SysTick_Config>
 8001a14:	4603      	mov	r3, r0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a2c:	f7ff faa4 	bl	8000f78 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e099      	b.n	8001b70 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2202      	movs	r2, #2
 8001a40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0201 	bic.w	r2, r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a5c:	e00f      	b.n	8001a7e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a5e:	f7ff fa8b 	bl	8000f78 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b05      	cmp	r3, #5
 8001a6a:	d908      	bls.n	8001a7e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2220      	movs	r2, #32
 8001a70:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2203      	movs	r2, #3
 8001a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e078      	b.n	8001b70 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1e8      	bne.n	8001a5e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	4b38      	ldr	r3, [pc, #224]	; (8001b78 <HAL_DMA_Init+0x158>)
 8001a98:	4013      	ands	r3, r2
 8001a9a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ab6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ac2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d107      	bne.n	8001ae8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	f023 0307 	bic.w	r3, r3, #7
 8001afe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d117      	bne.n	8001b42 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d00e      	beq.n	8001b42 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 fb01 	bl	800212c <DMA_CheckFifoParam>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d008      	beq.n	8001b42 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2240      	movs	r2, #64	; 0x40
 8001b34:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e016      	b.n	8001b70 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 fab8 	bl	80020c0 <DMA_CalcBaseAndBitshift>
 8001b50:	4603      	mov	r3, r0
 8001b52:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b58:	223f      	movs	r2, #63	; 0x3f
 8001b5a:	409a      	lsls	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	f010803f 	.word	0xf010803f

08001b7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
 8001b88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b92:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d101      	bne.n	8001ba2 <HAL_DMA_Start_IT+0x26>
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	e040      	b.n	8001c24 <HAL_DMA_Start_IT+0xa8>
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d12f      	bne.n	8001c16 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2202      	movs	r2, #2
 8001bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	68b9      	ldr	r1, [r7, #8]
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f000 fa4a 	bl	8002064 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd4:	223f      	movs	r2, #63	; 0x3f
 8001bd6:	409a      	lsls	r2, r3
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f042 0216 	orr.w	r2, r2, #22
 8001bea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d007      	beq.n	8001c04 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0208 	orr.w	r2, r2, #8
 8001c02:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0201 	orr.w	r2, r2, #1
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	e005      	b.n	8001c22 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c38:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c3a:	f7ff f99d 	bl	8000f78 <HAL_GetTick>
 8001c3e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d008      	beq.n	8001c5e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2280      	movs	r2, #128	; 0x80
 8001c50:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e052      	b.n	8001d04 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0216 	bic.w	r2, r2, #22
 8001c6c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	695a      	ldr	r2, [r3, #20]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c7c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d103      	bne.n	8001c8e <HAL_DMA_Abort+0x62>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d007      	beq.n	8001c9e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 0208 	bic.w	r2, r2, #8
 8001c9c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0201 	bic.w	r2, r2, #1
 8001cac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cae:	e013      	b.n	8001cd8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cb0:	f7ff f962 	bl	8000f78 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b05      	cmp	r3, #5
 8001cbc:	d90c      	bls.n	8001cd8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2220      	movs	r2, #32
 8001cc2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e015      	b.n	8001d04 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1e4      	bne.n	8001cb0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cea:	223f      	movs	r2, #63	; 0x3f
 8001cec:	409a      	lsls	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d004      	beq.n	8001d2a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2280      	movs	r2, #128	; 0x80
 8001d24:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e00c      	b.n	8001d44 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2205      	movs	r2, #5
 8001d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0201 	bic.w	r2, r2, #1
 8001d40:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d5c:	4b8e      	ldr	r3, [pc, #568]	; (8001f98 <HAL_DMA_IRQHandler+0x248>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a8e      	ldr	r2, [pc, #568]	; (8001f9c <HAL_DMA_IRQHandler+0x24c>)
 8001d62:	fba2 2303 	umull	r2, r3, r2, r3
 8001d66:	0a9b      	lsrs	r3, r3, #10
 8001d68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7a:	2208      	movs	r2, #8
 8001d7c:	409a      	lsls	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	4013      	ands	r3, r2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d01a      	beq.n	8001dbc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d013      	beq.n	8001dbc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0204 	bic.w	r2, r2, #4
 8001da2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da8:	2208      	movs	r2, #8
 8001daa:	409a      	lsls	r2, r3
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db4:	f043 0201 	orr.w	r2, r3, #1
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	409a      	lsls	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d012      	beq.n	8001df2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00b      	beq.n	8001df2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dde:	2201      	movs	r2, #1
 8001de0:	409a      	lsls	r2, r3
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dea:	f043 0202 	orr.w	r2, r3, #2
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df6:	2204      	movs	r2, #4
 8001df8:	409a      	lsls	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d012      	beq.n	8001e28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d00b      	beq.n	8001e28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e14:	2204      	movs	r2, #4
 8001e16:	409a      	lsls	r2, r3
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e20:	f043 0204 	orr.w	r2, r3, #4
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2c:	2210      	movs	r2, #16
 8001e2e:	409a      	lsls	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	4013      	ands	r3, r2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d043      	beq.n	8001ec0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d03c      	beq.n	8001ec0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4a:	2210      	movs	r2, #16
 8001e4c:	409a      	lsls	r2, r3
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d018      	beq.n	8001e92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d108      	bne.n	8001e80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d024      	beq.n	8001ec0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	4798      	blx	r3
 8001e7e:	e01f      	b.n	8001ec0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d01b      	beq.n	8001ec0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	4798      	blx	r3
 8001e90:	e016      	b.n	8001ec0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d107      	bne.n	8001eb0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 0208 	bic.w	r2, r2, #8
 8001eae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec4:	2220      	movs	r2, #32
 8001ec6:	409a      	lsls	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 808f 	beq.w	8001ff0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0310 	and.w	r3, r3, #16
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 8087 	beq.w	8001ff0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	409a      	lsls	r2, r3
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b05      	cmp	r3, #5
 8001ef8:	d136      	bne.n	8001f68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 0216 	bic.w	r2, r2, #22
 8001f08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	695a      	ldr	r2, [r3, #20]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d103      	bne.n	8001f2a <HAL_DMA_IRQHandler+0x1da>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d007      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 0208 	bic.w	r2, r2, #8
 8001f38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3e:	223f      	movs	r2, #63	; 0x3f
 8001f40:	409a      	lsls	r2, r3
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d07e      	beq.n	800205c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	4798      	blx	r3
        }
        return;
 8001f66:	e079      	b.n	800205c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d01d      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d10d      	bne.n	8001fa0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d031      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	4798      	blx	r3
 8001f94:	e02c      	b.n	8001ff0 <HAL_DMA_IRQHandler+0x2a0>
 8001f96:	bf00      	nop
 8001f98:	2000000c 	.word	0x2000000c
 8001f9c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d023      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	4798      	blx	r3
 8001fb0:	e01e      	b.n	8001ff0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10f      	bne.n	8001fe0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0210 	bic.w	r2, r2, #16
 8001fce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d032      	beq.n	800205e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b00      	cmp	r3, #0
 8002002:	d022      	beq.n	800204a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2205      	movs	r2, #5
 8002008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0201 	bic.w	r2, r2, #1
 800201a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	3301      	adds	r3, #1
 8002020:	60bb      	str	r3, [r7, #8]
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	429a      	cmp	r2, r3
 8002026:	d307      	bcc.n	8002038 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f2      	bne.n	800201c <HAL_DMA_IRQHandler+0x2cc>
 8002036:	e000      	b.n	800203a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002038:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204e:	2b00      	cmp	r3, #0
 8002050:	d005      	beq.n	800205e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	4798      	blx	r3
 800205a:	e000      	b.n	800205e <HAL_DMA_IRQHandler+0x30e>
        return;
 800205c:	bf00      	nop
    }
  }
}
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
 8002070:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002080:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	2b40      	cmp	r3, #64	; 0x40
 8002090:	d108      	bne.n	80020a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020a2:	e007      	b.n	80020b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	60da      	str	r2, [r3, #12]
}
 80020b4:	bf00      	nop
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	3b10      	subs	r3, #16
 80020d0:	4a14      	ldr	r2, [pc, #80]	; (8002124 <DMA_CalcBaseAndBitshift+0x64>)
 80020d2:	fba2 2303 	umull	r2, r3, r2, r3
 80020d6:	091b      	lsrs	r3, r3, #4
 80020d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020da:	4a13      	ldr	r2, [pc, #76]	; (8002128 <DMA_CalcBaseAndBitshift+0x68>)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4413      	add	r3, r2
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	461a      	mov	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	d909      	bls.n	8002102 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020f6:	f023 0303 	bic.w	r3, r3, #3
 80020fa:	1d1a      	adds	r2, r3, #4
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	659a      	str	r2, [r3, #88]	; 0x58
 8002100:	e007      	b.n	8002112 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800210a:	f023 0303 	bic.w	r3, r3, #3
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002116:	4618      	mov	r0, r3
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	aaaaaaab 	.word	0xaaaaaaab
 8002128:	080103f8 	.word	0x080103f8

0800212c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002134:	2300      	movs	r3, #0
 8002136:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d11f      	bne.n	8002186 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	2b03      	cmp	r3, #3
 800214a:	d856      	bhi.n	80021fa <DMA_CheckFifoParam+0xce>
 800214c:	a201      	add	r2, pc, #4	; (adr r2, 8002154 <DMA_CheckFifoParam+0x28>)
 800214e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002152:	bf00      	nop
 8002154:	08002165 	.word	0x08002165
 8002158:	08002177 	.word	0x08002177
 800215c:	08002165 	.word	0x08002165
 8002160:	080021fb 	.word	0x080021fb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002168:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d046      	beq.n	80021fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002174:	e043      	b.n	80021fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800217e:	d140      	bne.n	8002202 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002184:	e03d      	b.n	8002202 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800218e:	d121      	bne.n	80021d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2b03      	cmp	r3, #3
 8002194:	d837      	bhi.n	8002206 <DMA_CheckFifoParam+0xda>
 8002196:	a201      	add	r2, pc, #4	; (adr r2, 800219c <DMA_CheckFifoParam+0x70>)
 8002198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800219c:	080021ad 	.word	0x080021ad
 80021a0:	080021b3 	.word	0x080021b3
 80021a4:	080021ad 	.word	0x080021ad
 80021a8:	080021c5 	.word	0x080021c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	73fb      	strb	r3, [r7, #15]
      break;
 80021b0:	e030      	b.n	8002214 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d025      	beq.n	800220a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021c2:	e022      	b.n	800220a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021cc:	d11f      	bne.n	800220e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021d2:	e01c      	b.n	800220e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d903      	bls.n	80021e2 <DMA_CheckFifoParam+0xb6>
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	2b03      	cmp	r3, #3
 80021de:	d003      	beq.n	80021e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021e0:	e018      	b.n	8002214 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	73fb      	strb	r3, [r7, #15]
      break;
 80021e6:	e015      	b.n	8002214 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00e      	beq.n	8002212 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	73fb      	strb	r3, [r7, #15]
      break;
 80021f8:	e00b      	b.n	8002212 <DMA_CheckFifoParam+0xe6>
      break;
 80021fa:	bf00      	nop
 80021fc:	e00a      	b.n	8002214 <DMA_CheckFifoParam+0xe8>
      break;
 80021fe:	bf00      	nop
 8002200:	e008      	b.n	8002214 <DMA_CheckFifoParam+0xe8>
      break;
 8002202:	bf00      	nop
 8002204:	e006      	b.n	8002214 <DMA_CheckFifoParam+0xe8>
      break;
 8002206:	bf00      	nop
 8002208:	e004      	b.n	8002214 <DMA_CheckFifoParam+0xe8>
      break;
 800220a:	bf00      	nop
 800220c:	e002      	b.n	8002214 <DMA_CheckFifoParam+0xe8>
      break;   
 800220e:	bf00      	nop
 8002210:	e000      	b.n	8002214 <DMA_CheckFifoParam+0xe8>
      break;
 8002212:	bf00      	nop
    }
  } 
  
  return status; 
 8002214:	7bfb      	ldrb	r3, [r7, #15]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop

08002224 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002224:	b480      	push	{r7}
 8002226:	b089      	sub	sp, #36	; 0x24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002232:	2300      	movs	r3, #0
 8002234:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002236:	2300      	movs	r3, #0
 8002238:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800223a:	2300      	movs	r3, #0
 800223c:	61fb      	str	r3, [r7, #28]
 800223e:	e16b      	b.n	8002518 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002240:	2201      	movs	r2, #1
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	4013      	ands	r3, r2
 8002252:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	429a      	cmp	r2, r3
 800225a:	f040 815a 	bne.w	8002512 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	2b01      	cmp	r3, #1
 8002268:	d005      	beq.n	8002276 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002272:	2b02      	cmp	r3, #2
 8002274:	d130      	bne.n	80022d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	2203      	movs	r2, #3
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43db      	mvns	r3, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4013      	ands	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4313      	orrs	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022ac:	2201      	movs	r2, #1
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	091b      	lsrs	r3, r3, #4
 80022c2:	f003 0201 	and.w	r2, r3, #1
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 0303 	and.w	r3, r3, #3
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d017      	beq.n	8002314 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	2203      	movs	r2, #3
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d123      	bne.n	8002368 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	08da      	lsrs	r2, r3, #3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3208      	adds	r2, #8
 8002328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800232c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	220f      	movs	r2, #15
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	691a      	ldr	r2, [r3, #16]
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	08da      	lsrs	r2, r3, #3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3208      	adds	r2, #8
 8002362:	69b9      	ldr	r1, [r7, #24]
 8002364:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	2203      	movs	r2, #3
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 0203 	and.w	r2, r3, #3
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 80b4 	beq.w	8002512 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	4b60      	ldr	r3, [pc, #384]	; (8002530 <HAL_GPIO_Init+0x30c>)
 80023b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b2:	4a5f      	ldr	r2, [pc, #380]	; (8002530 <HAL_GPIO_Init+0x30c>)
 80023b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023b8:	6453      	str	r3, [r2, #68]	; 0x44
 80023ba:	4b5d      	ldr	r3, [pc, #372]	; (8002530 <HAL_GPIO_Init+0x30c>)
 80023bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023c6:	4a5b      	ldr	r2, [pc, #364]	; (8002534 <HAL_GPIO_Init+0x310>)
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	089b      	lsrs	r3, r3, #2
 80023cc:	3302      	adds	r3, #2
 80023ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f003 0303 	and.w	r3, r3, #3
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	220f      	movs	r2, #15
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43db      	mvns	r3, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4013      	ands	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a52      	ldr	r2, [pc, #328]	; (8002538 <HAL_GPIO_Init+0x314>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d02b      	beq.n	800244a <HAL_GPIO_Init+0x226>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a51      	ldr	r2, [pc, #324]	; (800253c <HAL_GPIO_Init+0x318>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d025      	beq.n	8002446 <HAL_GPIO_Init+0x222>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a50      	ldr	r2, [pc, #320]	; (8002540 <HAL_GPIO_Init+0x31c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d01f      	beq.n	8002442 <HAL_GPIO_Init+0x21e>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a4f      	ldr	r2, [pc, #316]	; (8002544 <HAL_GPIO_Init+0x320>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d019      	beq.n	800243e <HAL_GPIO_Init+0x21a>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a4e      	ldr	r2, [pc, #312]	; (8002548 <HAL_GPIO_Init+0x324>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d013      	beq.n	800243a <HAL_GPIO_Init+0x216>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a4d      	ldr	r2, [pc, #308]	; (800254c <HAL_GPIO_Init+0x328>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d00d      	beq.n	8002436 <HAL_GPIO_Init+0x212>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a4c      	ldr	r2, [pc, #304]	; (8002550 <HAL_GPIO_Init+0x32c>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d007      	beq.n	8002432 <HAL_GPIO_Init+0x20e>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a4b      	ldr	r2, [pc, #300]	; (8002554 <HAL_GPIO_Init+0x330>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d101      	bne.n	800242e <HAL_GPIO_Init+0x20a>
 800242a:	2307      	movs	r3, #7
 800242c:	e00e      	b.n	800244c <HAL_GPIO_Init+0x228>
 800242e:	2308      	movs	r3, #8
 8002430:	e00c      	b.n	800244c <HAL_GPIO_Init+0x228>
 8002432:	2306      	movs	r3, #6
 8002434:	e00a      	b.n	800244c <HAL_GPIO_Init+0x228>
 8002436:	2305      	movs	r3, #5
 8002438:	e008      	b.n	800244c <HAL_GPIO_Init+0x228>
 800243a:	2304      	movs	r3, #4
 800243c:	e006      	b.n	800244c <HAL_GPIO_Init+0x228>
 800243e:	2303      	movs	r3, #3
 8002440:	e004      	b.n	800244c <HAL_GPIO_Init+0x228>
 8002442:	2302      	movs	r3, #2
 8002444:	e002      	b.n	800244c <HAL_GPIO_Init+0x228>
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <HAL_GPIO_Init+0x228>
 800244a:	2300      	movs	r3, #0
 800244c:	69fa      	ldr	r2, [r7, #28]
 800244e:	f002 0203 	and.w	r2, r2, #3
 8002452:	0092      	lsls	r2, r2, #2
 8002454:	4093      	lsls	r3, r2
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4313      	orrs	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800245c:	4935      	ldr	r1, [pc, #212]	; (8002534 <HAL_GPIO_Init+0x310>)
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	089b      	lsrs	r3, r3, #2
 8002462:	3302      	adds	r3, #2
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800246a:	4b3b      	ldr	r3, [pc, #236]	; (8002558 <HAL_GPIO_Init+0x334>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	43db      	mvns	r3, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4013      	ands	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800248e:	4a32      	ldr	r2, [pc, #200]	; (8002558 <HAL_GPIO_Init+0x334>)
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002494:	4b30      	ldr	r3, [pc, #192]	; (8002558 <HAL_GPIO_Init+0x334>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	43db      	mvns	r3, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4013      	ands	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024b8:	4a27      	ldr	r2, [pc, #156]	; (8002558 <HAL_GPIO_Init+0x334>)
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024be:	4b26      	ldr	r3, [pc, #152]	; (8002558 <HAL_GPIO_Init+0x334>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	43db      	mvns	r3, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4013      	ands	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024e2:	4a1d      	ldr	r2, [pc, #116]	; (8002558 <HAL_GPIO_Init+0x334>)
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024e8:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <HAL_GPIO_Init+0x334>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800250c:	4a12      	ldr	r2, [pc, #72]	; (8002558 <HAL_GPIO_Init+0x334>)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3301      	adds	r3, #1
 8002516:	61fb      	str	r3, [r7, #28]
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	2b0f      	cmp	r3, #15
 800251c:	f67f ae90 	bls.w	8002240 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002520:	bf00      	nop
 8002522:	bf00      	nop
 8002524:	3724      	adds	r7, #36	; 0x24
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	40023800 	.word	0x40023800
 8002534:	40013800 	.word	0x40013800
 8002538:	40020000 	.word	0x40020000
 800253c:	40020400 	.word	0x40020400
 8002540:	40020800 	.word	0x40020800
 8002544:	40020c00 	.word	0x40020c00
 8002548:	40021000 	.word	0x40021000
 800254c:	40021400 	.word	0x40021400
 8002550:	40021800 	.word	0x40021800
 8002554:	40021c00 	.word	0x40021c00
 8002558:	40013c00 	.word	0x40013c00

0800255c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e12b      	b.n	80027c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d106      	bne.n	8002588 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f006 fcf2 	bl	8008f6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2224      	movs	r2, #36	; 0x24
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 0201 	bic.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025c0:	f001 fbfc 	bl	8003dbc <HAL_RCC_GetPCLK1Freq>
 80025c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	4a81      	ldr	r2, [pc, #516]	; (80027d0 <HAL_I2C_Init+0x274>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d807      	bhi.n	80025e0 <HAL_I2C_Init+0x84>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4a80      	ldr	r2, [pc, #512]	; (80027d4 <HAL_I2C_Init+0x278>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	bf94      	ite	ls
 80025d8:	2301      	movls	r3, #1
 80025da:	2300      	movhi	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	e006      	b.n	80025ee <HAL_I2C_Init+0x92>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4a7d      	ldr	r2, [pc, #500]	; (80027d8 <HAL_I2C_Init+0x27c>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	bf94      	ite	ls
 80025e8:	2301      	movls	r3, #1
 80025ea:	2300      	movhi	r3, #0
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e0e7      	b.n	80027c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	4a78      	ldr	r2, [pc, #480]	; (80027dc <HAL_I2C_Init+0x280>)
 80025fa:	fba2 2303 	umull	r2, r3, r2, r3
 80025fe:	0c9b      	lsrs	r3, r3, #18
 8002600:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68ba      	ldr	r2, [r7, #8]
 8002612:	430a      	orrs	r2, r1
 8002614:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	4a6a      	ldr	r2, [pc, #424]	; (80027d0 <HAL_I2C_Init+0x274>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d802      	bhi.n	8002630 <HAL_I2C_Init+0xd4>
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	3301      	adds	r3, #1
 800262e:	e009      	b.n	8002644 <HAL_I2C_Init+0xe8>
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002636:	fb02 f303 	mul.w	r3, r2, r3
 800263a:	4a69      	ldr	r2, [pc, #420]	; (80027e0 <HAL_I2C_Init+0x284>)
 800263c:	fba2 2303 	umull	r2, r3, r2, r3
 8002640:	099b      	lsrs	r3, r3, #6
 8002642:	3301      	adds	r3, #1
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6812      	ldr	r2, [r2, #0]
 8002648:	430b      	orrs	r3, r1
 800264a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002656:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	495c      	ldr	r1, [pc, #368]	; (80027d0 <HAL_I2C_Init+0x274>)
 8002660:	428b      	cmp	r3, r1
 8002662:	d819      	bhi.n	8002698 <HAL_I2C_Init+0x13c>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	1e59      	subs	r1, r3, #1
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002672:	1c59      	adds	r1, r3, #1
 8002674:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002678:	400b      	ands	r3, r1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00a      	beq.n	8002694 <HAL_I2C_Init+0x138>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	1e59      	subs	r1, r3, #1
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	fbb1 f3f3 	udiv	r3, r1, r3
 800268c:	3301      	adds	r3, #1
 800268e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002692:	e051      	b.n	8002738 <HAL_I2C_Init+0x1dc>
 8002694:	2304      	movs	r3, #4
 8002696:	e04f      	b.n	8002738 <HAL_I2C_Init+0x1dc>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d111      	bne.n	80026c4 <HAL_I2C_Init+0x168>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	1e58      	subs	r0, r3, #1
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6859      	ldr	r1, [r3, #4]
 80026a8:	460b      	mov	r3, r1
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	440b      	add	r3, r1
 80026ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80026b2:	3301      	adds	r3, #1
 80026b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	bf0c      	ite	eq
 80026bc:	2301      	moveq	r3, #1
 80026be:	2300      	movne	r3, #0
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	e012      	b.n	80026ea <HAL_I2C_Init+0x18e>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	1e58      	subs	r0, r3, #1
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6859      	ldr	r1, [r3, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	0099      	lsls	r1, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026da:	3301      	adds	r3, #1
 80026dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	bf0c      	ite	eq
 80026e4:	2301      	moveq	r3, #1
 80026e6:	2300      	movne	r3, #0
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <HAL_I2C_Init+0x196>
 80026ee:	2301      	movs	r3, #1
 80026f0:	e022      	b.n	8002738 <HAL_I2C_Init+0x1dc>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10e      	bne.n	8002718 <HAL_I2C_Init+0x1bc>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	1e58      	subs	r0, r3, #1
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6859      	ldr	r1, [r3, #4]
 8002702:	460b      	mov	r3, r1
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	440b      	add	r3, r1
 8002708:	fbb0 f3f3 	udiv	r3, r0, r3
 800270c:	3301      	adds	r3, #1
 800270e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002716:	e00f      	b.n	8002738 <HAL_I2C_Init+0x1dc>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	1e58      	subs	r0, r3, #1
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6859      	ldr	r1, [r3, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	0099      	lsls	r1, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	fbb0 f3f3 	udiv	r3, r0, r3
 800272e:	3301      	adds	r3, #1
 8002730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002734:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	6809      	ldr	r1, [r1, #0]
 800273c:	4313      	orrs	r3, r2
 800273e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69da      	ldr	r2, [r3, #28]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	431a      	orrs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002766:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6911      	ldr	r1, [r2, #16]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	68d2      	ldr	r2, [r2, #12]
 8002772:	4311      	orrs	r1, r2
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6812      	ldr	r2, [r2, #0]
 8002778:	430b      	orrs	r3, r1
 800277a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695a      	ldr	r2, [r3, #20]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	431a      	orrs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	430a      	orrs	r2, r1
 8002796:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f042 0201 	orr.w	r2, r2, #1
 80027a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2220      	movs	r2, #32
 80027b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	000186a0 	.word	0x000186a0
 80027d4:	001e847f 	.word	0x001e847f
 80027d8:	003d08ff 	.word	0x003d08ff
 80027dc:	431bde83 	.word	0x431bde83
 80027e0:	10624dd3 	.word	0x10624dd3

080027e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b088      	sub	sp, #32
 80027e8:	af02      	add	r7, sp, #8
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	4608      	mov	r0, r1
 80027ee:	4611      	mov	r1, r2
 80027f0:	461a      	mov	r2, r3
 80027f2:	4603      	mov	r3, r0
 80027f4:	817b      	strh	r3, [r7, #10]
 80027f6:	460b      	mov	r3, r1
 80027f8:	813b      	strh	r3, [r7, #8]
 80027fa:	4613      	mov	r3, r2
 80027fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027fe:	f7fe fbbb 	bl	8000f78 <HAL_GetTick>
 8002802:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b20      	cmp	r3, #32
 800280e:	f040 80d9 	bne.w	80029c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	2319      	movs	r3, #25
 8002818:	2201      	movs	r2, #1
 800281a:	496d      	ldr	r1, [pc, #436]	; (80029d0 <HAL_I2C_Mem_Write+0x1ec>)
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f000 fc7f 	bl	8003120 <I2C_WaitOnFlagUntilTimeout>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002828:	2302      	movs	r3, #2
 800282a:	e0cc      	b.n	80029c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002832:	2b01      	cmp	r3, #1
 8002834:	d101      	bne.n	800283a <HAL_I2C_Mem_Write+0x56>
 8002836:	2302      	movs	r3, #2
 8002838:	e0c5      	b.n	80029c6 <HAL_I2C_Mem_Write+0x1e2>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b01      	cmp	r3, #1
 800284e:	d007      	beq.n	8002860 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f042 0201 	orr.w	r2, r2, #1
 800285e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800286e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2221      	movs	r2, #33	; 0x21
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2240      	movs	r2, #64	; 0x40
 800287c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6a3a      	ldr	r2, [r7, #32]
 800288a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002890:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002896:	b29a      	uxth	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4a4d      	ldr	r2, [pc, #308]	; (80029d4 <HAL_I2C_Mem_Write+0x1f0>)
 80028a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028a2:	88f8      	ldrh	r0, [r7, #6]
 80028a4:	893a      	ldrh	r2, [r7, #8]
 80028a6:	8979      	ldrh	r1, [r7, #10]
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	9301      	str	r3, [sp, #4]
 80028ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	4603      	mov	r3, r0
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f000 fab6 	bl	8002e24 <I2C_RequestMemoryWrite>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d052      	beq.n	8002964 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e081      	b.n	80029c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 fd00 	bl	80032cc <I2C_WaitOnTXEFlagUntilTimeout>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00d      	beq.n	80028ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d107      	bne.n	80028ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e06b      	b.n	80029c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	781a      	ldrb	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	1c5a      	adds	r2, r3, #1
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002908:	3b01      	subs	r3, #1
 800290a:	b29a      	uxth	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002914:	b29b      	uxth	r3, r3
 8002916:	3b01      	subs	r3, #1
 8002918:	b29a      	uxth	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	2b04      	cmp	r3, #4
 800292a:	d11b      	bne.n	8002964 <HAL_I2C_Mem_Write+0x180>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002930:	2b00      	cmp	r3, #0
 8002932:	d017      	beq.n	8002964 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	781a      	ldrb	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	1c5a      	adds	r2, r3, #1
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294e:	3b01      	subs	r3, #1
 8002950:	b29a      	uxth	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800295a:	b29b      	uxth	r3, r3
 800295c:	3b01      	subs	r3, #1
 800295e:	b29a      	uxth	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1aa      	bne.n	80028c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f000 fcec 	bl	800334e <I2C_WaitOnBTFFlagUntilTimeout>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00d      	beq.n	8002998 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	2b04      	cmp	r3, #4
 8002982:	d107      	bne.n	8002994 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002992:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e016      	b.n	80029c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2220      	movs	r2, #32
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029c0:	2300      	movs	r3, #0
 80029c2:	e000      	b.n	80029c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80029c4:	2302      	movs	r3, #2
  }
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3718      	adds	r7, #24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	00100002 	.word	0x00100002
 80029d4:	ffff0000 	.word	0xffff0000

080029d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08c      	sub	sp, #48	; 0x30
 80029dc:	af02      	add	r7, sp, #8
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	4608      	mov	r0, r1
 80029e2:	4611      	mov	r1, r2
 80029e4:	461a      	mov	r2, r3
 80029e6:	4603      	mov	r3, r0
 80029e8:	817b      	strh	r3, [r7, #10]
 80029ea:	460b      	mov	r3, r1
 80029ec:	813b      	strh	r3, [r7, #8]
 80029ee:	4613      	mov	r3, r2
 80029f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029f2:	f7fe fac1 	bl	8000f78 <HAL_GetTick>
 80029f6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b20      	cmp	r3, #32
 8002a02:	f040 8208 	bne.w	8002e16 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	2319      	movs	r3, #25
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	497b      	ldr	r1, [pc, #492]	; (8002bfc <HAL_I2C_Mem_Read+0x224>)
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 fb85 	bl	8003120 <I2C_WaitOnFlagUntilTimeout>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e1fb      	b.n	8002e18 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d101      	bne.n	8002a2e <HAL_I2C_Mem_Read+0x56>
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	e1f4      	b.n	8002e18 <HAL_I2C_Mem_Read+0x440>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d007      	beq.n	8002a54 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0201 	orr.w	r2, r2, #1
 8002a52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2222      	movs	r2, #34	; 0x22
 8002a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2240      	movs	r2, #64	; 0x40
 8002a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002a84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4a5b      	ldr	r2, [pc, #364]	; (8002c00 <HAL_I2C_Mem_Read+0x228>)
 8002a94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a96:	88f8      	ldrh	r0, [r7, #6]
 8002a98:	893a      	ldrh	r2, [r7, #8]
 8002a9a:	8979      	ldrh	r1, [r7, #10]
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	9301      	str	r3, [sp, #4]
 8002aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 fa52 	bl	8002f50 <I2C_RequestMemoryRead>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e1b0      	b.n	8002e18 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d113      	bne.n	8002ae6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002abe:	2300      	movs	r3, #0
 8002ac0:	623b      	str	r3, [r7, #32]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	695b      	ldr	r3, [r3, #20]
 8002ac8:	623b      	str	r3, [r7, #32]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	623b      	str	r3, [r7, #32]
 8002ad2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	e184      	b.n	8002df0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d11b      	bne.n	8002b26 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002afc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002afe:	2300      	movs	r3, #0
 8002b00:	61fb      	str	r3, [r7, #28]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	61fb      	str	r3, [r7, #28]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	61fb      	str	r3, [r7, #28]
 8002b12:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	e164      	b.n	8002df0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d11b      	bne.n	8002b66 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b3c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61bb      	str	r3, [r7, #24]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	61bb      	str	r3, [r7, #24]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	61bb      	str	r3, [r7, #24]
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	e144      	b.n	8002df0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b66:	2300      	movs	r3, #0
 8002b68:	617b      	str	r3, [r7, #20]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	617b      	str	r3, [r7, #20]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	617b      	str	r3, [r7, #20]
 8002b7a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b7c:	e138      	b.n	8002df0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b82:	2b03      	cmp	r3, #3
 8002b84:	f200 80f1 	bhi.w	8002d6a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d123      	bne.n	8002bd8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 fc1b 	bl	80033d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e139      	b.n	8002e18 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691a      	ldr	r2, [r3, #16]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bd6:	e10b      	b.n	8002df0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d14e      	bne.n	8002c7e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be6:	2200      	movs	r2, #0
 8002be8:	4906      	ldr	r1, [pc, #24]	; (8002c04 <HAL_I2C_Mem_Read+0x22c>)
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 fa98 	bl	8003120 <I2C_WaitOnFlagUntilTimeout>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d008      	beq.n	8002c08 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e10e      	b.n	8002e18 <HAL_I2C_Mem_Read+0x440>
 8002bfa:	bf00      	nop
 8002bfc:	00100002 	.word	0x00100002
 8002c00:	ffff0000 	.word	0xffff0000
 8002c04:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	691a      	ldr	r2, [r3, #16]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	1c5a      	adds	r2, r3, #1
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c34:	3b01      	subs	r3, #1
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	691a      	ldr	r2, [r3, #16]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	1c5a      	adds	r2, r3, #1
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c66:	3b01      	subs	r3, #1
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	3b01      	subs	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c7c:	e0b8      	b.n	8002df0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c84:	2200      	movs	r2, #0
 8002c86:	4966      	ldr	r1, [pc, #408]	; (8002e20 <HAL_I2C_Mem_Read+0x448>)
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 fa49 	bl	8003120 <I2C_WaitOnFlagUntilTimeout>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e0bf      	b.n	8002e18 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ca6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	691a      	ldr	r2, [r3, #16]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	1c5a      	adds	r2, r3, #1
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	494f      	ldr	r1, [pc, #316]	; (8002e20 <HAL_I2C_Mem_Read+0x448>)
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 fa1b 	bl	8003120 <I2C_WaitOnFlagUntilTimeout>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e091      	b.n	8002e18 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	691a      	ldr	r2, [r3, #16]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	1c5a      	adds	r2, r3, #1
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	691a      	ldr	r2, [r3, #16]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	b2d2      	uxtb	r2, r2
 8002d42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	1c5a      	adds	r2, r3, #1
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d68:	e042      	b.n	8002df0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 fb2e 	bl	80033d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e04c      	b.n	8002e18 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	691a      	ldr	r2, [r3, #16]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	1c5a      	adds	r2, r3, #1
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d118      	bne.n	8002df0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	691a      	ldr	r2, [r3, #16]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd0:	1c5a      	adds	r2, r3, #1
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	3b01      	subs	r3, #1
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f47f aec2 	bne.w	8002b7e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	e000      	b.n	8002e18 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002e16:	2302      	movs	r3, #2
  }
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3728      	adds	r7, #40	; 0x28
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	00010004 	.word	0x00010004

08002e24 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b088      	sub	sp, #32
 8002e28:	af02      	add	r7, sp, #8
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	4608      	mov	r0, r1
 8002e2e:	4611      	mov	r1, r2
 8002e30:	461a      	mov	r2, r3
 8002e32:	4603      	mov	r3, r0
 8002e34:	817b      	strh	r3, [r7, #10]
 8002e36:	460b      	mov	r3, r1
 8002e38:	813b      	strh	r3, [r7, #8]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e4c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	6a3b      	ldr	r3, [r7, #32]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 f960 	bl	8003120 <I2C_WaitOnFlagUntilTimeout>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00d      	beq.n	8002e82 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e74:	d103      	bne.n	8002e7e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e7c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e05f      	b.n	8002f42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e82:	897b      	ldrh	r3, [r7, #10]
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	461a      	mov	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e90:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	6a3a      	ldr	r2, [r7, #32]
 8002e96:	492d      	ldr	r1, [pc, #180]	; (8002f4c <I2C_RequestMemoryWrite+0x128>)
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f000 f998 	bl	80031ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e04c      	b.n	8002f42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	617b      	str	r3, [r7, #20]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec0:	6a39      	ldr	r1, [r7, #32]
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 fa02 	bl	80032cc <I2C_WaitOnTXEFlagUntilTimeout>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00d      	beq.n	8002eea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	d107      	bne.n	8002ee6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ee4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e02b      	b.n	8002f42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002eea:	88fb      	ldrh	r3, [r7, #6]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d105      	bne.n	8002efc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ef0:	893b      	ldrh	r3, [r7, #8]
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	611a      	str	r2, [r3, #16]
 8002efa:	e021      	b.n	8002f40 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002efc:	893b      	ldrh	r3, [r7, #8]
 8002efe:	0a1b      	lsrs	r3, r3, #8
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f0c:	6a39      	ldr	r1, [r7, #32]
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 f9dc 	bl	80032cc <I2C_WaitOnTXEFlagUntilTimeout>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00d      	beq.n	8002f36 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d107      	bne.n	8002f32 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f30:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e005      	b.n	8002f42 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f36:	893b      	ldrh	r3, [r7, #8]
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3718      	adds	r7, #24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	00010002 	.word	0x00010002

08002f50 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b088      	sub	sp, #32
 8002f54:	af02      	add	r7, sp, #8
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	4608      	mov	r0, r1
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	4603      	mov	r3, r0
 8002f60:	817b      	strh	r3, [r7, #10]
 8002f62:	460b      	mov	r3, r1
 8002f64:	813b      	strh	r3, [r7, #8]
 8002f66:	4613      	mov	r3, r2
 8002f68:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f78:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 f8c2 	bl	8003120 <I2C_WaitOnFlagUntilTimeout>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00d      	beq.n	8002fbe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb0:	d103      	bne.n	8002fba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fb8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e0aa      	b.n	8003114 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fbe:	897b      	ldrh	r3, [r7, #10]
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fcc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	6a3a      	ldr	r2, [r7, #32]
 8002fd2:	4952      	ldr	r1, [pc, #328]	; (800311c <I2C_RequestMemoryRead+0x1cc>)
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f000 f8fa 	bl	80031ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e097      	b.n	8003114 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	617b      	str	r3, [r7, #20]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	617b      	str	r3, [r7, #20]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	617b      	str	r3, [r7, #20]
 8002ff8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ffc:	6a39      	ldr	r1, [r7, #32]
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 f964 	bl	80032cc <I2C_WaitOnTXEFlagUntilTimeout>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00d      	beq.n	8003026 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	2b04      	cmp	r3, #4
 8003010:	d107      	bne.n	8003022 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003020:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e076      	b.n	8003114 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003026:	88fb      	ldrh	r3, [r7, #6]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d105      	bne.n	8003038 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800302c:	893b      	ldrh	r3, [r7, #8]
 800302e:	b2da      	uxtb	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	611a      	str	r2, [r3, #16]
 8003036:	e021      	b.n	800307c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003038:	893b      	ldrh	r3, [r7, #8]
 800303a:	0a1b      	lsrs	r3, r3, #8
 800303c:	b29b      	uxth	r3, r3
 800303e:	b2da      	uxtb	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003048:	6a39      	ldr	r1, [r7, #32]
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 f93e 	bl	80032cc <I2C_WaitOnTXEFlagUntilTimeout>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00d      	beq.n	8003072 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	2b04      	cmp	r3, #4
 800305c:	d107      	bne.n	800306e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800306c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e050      	b.n	8003114 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003072:	893b      	ldrh	r3, [r7, #8]
 8003074:	b2da      	uxtb	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800307c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800307e:	6a39      	ldr	r1, [r7, #32]
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f000 f923 	bl	80032cc <I2C_WaitOnTXEFlagUntilTimeout>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00d      	beq.n	80030a8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	2b04      	cmp	r3, #4
 8003092:	d107      	bne.n	80030a4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e035      	b.n	8003114 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030b6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	6a3b      	ldr	r3, [r7, #32]
 80030be:	2200      	movs	r2, #0
 80030c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 f82b 	bl	8003120 <I2C_WaitOnFlagUntilTimeout>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00d      	beq.n	80030ec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030de:	d103      	bne.n	80030e8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e013      	b.n	8003114 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80030ec:	897b      	ldrh	r3, [r7, #10]
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	6a3a      	ldr	r2, [r7, #32]
 8003100:	4906      	ldr	r1, [pc, #24]	; (800311c <I2C_RequestMemoryRead+0x1cc>)
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 f863 	bl	80031ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	00010002 	.word	0x00010002

08003120 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	603b      	str	r3, [r7, #0]
 800312c:	4613      	mov	r3, r2
 800312e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003130:	e025      	b.n	800317e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003138:	d021      	beq.n	800317e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800313a:	f7fd ff1d 	bl	8000f78 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	429a      	cmp	r2, r3
 8003148:	d302      	bcc.n	8003150 <I2C_WaitOnFlagUntilTimeout+0x30>
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d116      	bne.n	800317e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2220      	movs	r2, #32
 800315a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	f043 0220 	orr.w	r2, r3, #32
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e023      	b.n	80031c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	0c1b      	lsrs	r3, r3, #16
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b01      	cmp	r3, #1
 8003186:	d10d      	bne.n	80031a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	43da      	mvns	r2, r3
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	4013      	ands	r3, r2
 8003194:	b29b      	uxth	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	bf0c      	ite	eq
 800319a:	2301      	moveq	r3, #1
 800319c:	2300      	movne	r3, #0
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	461a      	mov	r2, r3
 80031a2:	e00c      	b.n	80031be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	43da      	mvns	r2, r3
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	4013      	ands	r3, r2
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	bf0c      	ite	eq
 80031b6:	2301      	moveq	r3, #1
 80031b8:	2300      	movne	r3, #0
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	461a      	mov	r2, r3
 80031be:	79fb      	ldrb	r3, [r7, #7]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d0b6      	beq.n	8003132 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b084      	sub	sp, #16
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	60f8      	str	r0, [r7, #12]
 80031d6:	60b9      	str	r1, [r7, #8]
 80031d8:	607a      	str	r2, [r7, #4]
 80031da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031dc:	e051      	b.n	8003282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ec:	d123      	bne.n	8003236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003206:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2220      	movs	r2, #32
 8003212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f043 0204 	orr.w	r2, r3, #4
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e046      	b.n	80032c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323c:	d021      	beq.n	8003282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800323e:	f7fd fe9b 	bl	8000f78 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	429a      	cmp	r2, r3
 800324c:	d302      	bcc.n	8003254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d116      	bne.n	8003282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2220      	movs	r2, #32
 800325e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	f043 0220 	orr.w	r2, r3, #32
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e020      	b.n	80032c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	0c1b      	lsrs	r3, r3, #16
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b01      	cmp	r3, #1
 800328a:	d10c      	bne.n	80032a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	43da      	mvns	r2, r3
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	4013      	ands	r3, r2
 8003298:	b29b      	uxth	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	bf14      	ite	ne
 800329e:	2301      	movne	r3, #1
 80032a0:	2300      	moveq	r3, #0
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	e00b      	b.n	80032be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	43da      	mvns	r2, r3
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	4013      	ands	r3, r2
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	bf14      	ite	ne
 80032b8:	2301      	movne	r3, #1
 80032ba:	2300      	moveq	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d18d      	bne.n	80031de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032d8:	e02d      	b.n	8003336 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 f8ce 	bl	800347c <I2C_IsAcknowledgeFailed>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e02d      	b.n	8003346 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f0:	d021      	beq.n	8003336 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f2:	f7fd fe41 	bl	8000f78 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d302      	bcc.n	8003308 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d116      	bne.n	8003336 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2220      	movs	r2, #32
 8003312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	f043 0220 	orr.w	r2, r3, #32
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e007      	b.n	8003346 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003340:	2b80      	cmp	r3, #128	; 0x80
 8003342:	d1ca      	bne.n	80032da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b084      	sub	sp, #16
 8003352:	af00      	add	r7, sp, #0
 8003354:	60f8      	str	r0, [r7, #12]
 8003356:	60b9      	str	r1, [r7, #8]
 8003358:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800335a:	e02d      	b.n	80033b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f000 f88d 	bl	800347c <I2C_IsAcknowledgeFailed>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e02d      	b.n	80033c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003372:	d021      	beq.n	80033b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003374:	f7fd fe00 	bl	8000f78 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	429a      	cmp	r2, r3
 8003382:	d302      	bcc.n	800338a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d116      	bne.n	80033b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2220      	movs	r2, #32
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	f043 0220 	orr.w	r2, r3, #32
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e007      	b.n	80033c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	f003 0304 	and.w	r3, r3, #4
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d1ca      	bne.n	800335c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033dc:	e042      	b.n	8003464 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	f003 0310 	and.w	r3, r3, #16
 80033e8:	2b10      	cmp	r3, #16
 80033ea:	d119      	bne.n	8003420 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f06f 0210 	mvn.w	r2, #16
 80033f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e029      	b.n	8003474 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003420:	f7fd fdaa 	bl	8000f78 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	429a      	cmp	r2, r3
 800342e:	d302      	bcc.n	8003436 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d116      	bne.n	8003464 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2220      	movs	r2, #32
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	f043 0220 	orr.w	r2, r3, #32
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e007      	b.n	8003474 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346e:	2b40      	cmp	r3, #64	; 0x40
 8003470:	d1b5      	bne.n	80033de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003492:	d11b      	bne.n	80034cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800349c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b8:	f043 0204 	orr.w	r2, r3, #4
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e000      	b.n	80034ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
	...

080034dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e267      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d075      	beq.n	80035e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034fa:	4b88      	ldr	r3, [pc, #544]	; (800371c <HAL_RCC_OscConfig+0x240>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 030c 	and.w	r3, r3, #12
 8003502:	2b04      	cmp	r3, #4
 8003504:	d00c      	beq.n	8003520 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003506:	4b85      	ldr	r3, [pc, #532]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800350e:	2b08      	cmp	r3, #8
 8003510:	d112      	bne.n	8003538 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003512:	4b82      	ldr	r3, [pc, #520]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800351a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800351e:	d10b      	bne.n	8003538 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003520:	4b7e      	ldr	r3, [pc, #504]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d05b      	beq.n	80035e4 <HAL_RCC_OscConfig+0x108>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d157      	bne.n	80035e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e242      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003540:	d106      	bne.n	8003550 <HAL_RCC_OscConfig+0x74>
 8003542:	4b76      	ldr	r3, [pc, #472]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a75      	ldr	r2, [pc, #468]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	e01d      	b.n	800358c <HAL_RCC_OscConfig+0xb0>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003558:	d10c      	bne.n	8003574 <HAL_RCC_OscConfig+0x98>
 800355a:	4b70      	ldr	r3, [pc, #448]	; (800371c <HAL_RCC_OscConfig+0x240>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a6f      	ldr	r2, [pc, #444]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003560:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	4b6d      	ldr	r3, [pc, #436]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a6c      	ldr	r2, [pc, #432]	; (800371c <HAL_RCC_OscConfig+0x240>)
 800356c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	e00b      	b.n	800358c <HAL_RCC_OscConfig+0xb0>
 8003574:	4b69      	ldr	r3, [pc, #420]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a68      	ldr	r2, [pc, #416]	; (800371c <HAL_RCC_OscConfig+0x240>)
 800357a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800357e:	6013      	str	r3, [r2, #0]
 8003580:	4b66      	ldr	r3, [pc, #408]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a65      	ldr	r2, [pc, #404]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800358a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d013      	beq.n	80035bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003594:	f7fd fcf0 	bl	8000f78 <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800359c:	f7fd fcec 	bl	8000f78 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b64      	cmp	r3, #100	; 0x64
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e207      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ae:	4b5b      	ldr	r3, [pc, #364]	; (800371c <HAL_RCC_OscConfig+0x240>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d0f0      	beq.n	800359c <HAL_RCC_OscConfig+0xc0>
 80035ba:	e014      	b.n	80035e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035bc:	f7fd fcdc 	bl	8000f78 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035c4:	f7fd fcd8 	bl	8000f78 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b64      	cmp	r3, #100	; 0x64
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e1f3      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035d6:	4b51      	ldr	r3, [pc, #324]	; (800371c <HAL_RCC_OscConfig+0x240>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f0      	bne.n	80035c4 <HAL_RCC_OscConfig+0xe8>
 80035e2:	e000      	b.n	80035e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d063      	beq.n	80036ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035f2:	4b4a      	ldr	r3, [pc, #296]	; (800371c <HAL_RCC_OscConfig+0x240>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 030c 	and.w	r3, r3, #12
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00b      	beq.n	8003616 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035fe:	4b47      	ldr	r3, [pc, #284]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003606:	2b08      	cmp	r3, #8
 8003608:	d11c      	bne.n	8003644 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800360a:	4b44      	ldr	r3, [pc, #272]	; (800371c <HAL_RCC_OscConfig+0x240>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d116      	bne.n	8003644 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003616:	4b41      	ldr	r3, [pc, #260]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d005      	beq.n	800362e <HAL_RCC_OscConfig+0x152>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d001      	beq.n	800362e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e1c7      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800362e:	4b3b      	ldr	r3, [pc, #236]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	4937      	ldr	r1, [pc, #220]	; (800371c <HAL_RCC_OscConfig+0x240>)
 800363e:	4313      	orrs	r3, r2
 8003640:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003642:	e03a      	b.n	80036ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d020      	beq.n	800368e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800364c:	4b34      	ldr	r3, [pc, #208]	; (8003720 <HAL_RCC_OscConfig+0x244>)
 800364e:	2201      	movs	r2, #1
 8003650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003652:	f7fd fc91 	bl	8000f78 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800365a:	f7fd fc8d 	bl	8000f78 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e1a8      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800366c:	4b2b      	ldr	r3, [pc, #172]	; (800371c <HAL_RCC_OscConfig+0x240>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0f0      	beq.n	800365a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003678:	4b28      	ldr	r3, [pc, #160]	; (800371c <HAL_RCC_OscConfig+0x240>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	4925      	ldr	r1, [pc, #148]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003688:	4313      	orrs	r3, r2
 800368a:	600b      	str	r3, [r1, #0]
 800368c:	e015      	b.n	80036ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800368e:	4b24      	ldr	r3, [pc, #144]	; (8003720 <HAL_RCC_OscConfig+0x244>)
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003694:	f7fd fc70 	bl	8000f78 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800369c:	f7fd fc6c 	bl	8000f78 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e187      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ae:	4b1b      	ldr	r3, [pc, #108]	; (800371c <HAL_RCC_OscConfig+0x240>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f0      	bne.n	800369c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d036      	beq.n	8003734 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d016      	beq.n	80036fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ce:	4b15      	ldr	r3, [pc, #84]	; (8003724 <HAL_RCC_OscConfig+0x248>)
 80036d0:	2201      	movs	r2, #1
 80036d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d4:	f7fd fc50 	bl	8000f78 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036dc:	f7fd fc4c 	bl	8000f78 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e167      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ee:	4b0b      	ldr	r3, [pc, #44]	; (800371c <HAL_RCC_OscConfig+0x240>)
 80036f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0f0      	beq.n	80036dc <HAL_RCC_OscConfig+0x200>
 80036fa:	e01b      	b.n	8003734 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036fc:	4b09      	ldr	r3, [pc, #36]	; (8003724 <HAL_RCC_OscConfig+0x248>)
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003702:	f7fd fc39 	bl	8000f78 <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003708:	e00e      	b.n	8003728 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800370a:	f7fd fc35 	bl	8000f78 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d907      	bls.n	8003728 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e150      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
 800371c:	40023800 	.word	0x40023800
 8003720:	42470000 	.word	0x42470000
 8003724:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003728:	4b88      	ldr	r3, [pc, #544]	; (800394c <HAL_RCC_OscConfig+0x470>)
 800372a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1ea      	bne.n	800370a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 8097 	beq.w	8003870 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003742:	2300      	movs	r3, #0
 8003744:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003746:	4b81      	ldr	r3, [pc, #516]	; (800394c <HAL_RCC_OscConfig+0x470>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10f      	bne.n	8003772 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003752:	2300      	movs	r3, #0
 8003754:	60bb      	str	r3, [r7, #8]
 8003756:	4b7d      	ldr	r3, [pc, #500]	; (800394c <HAL_RCC_OscConfig+0x470>)
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	4a7c      	ldr	r2, [pc, #496]	; (800394c <HAL_RCC_OscConfig+0x470>)
 800375c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003760:	6413      	str	r3, [r2, #64]	; 0x40
 8003762:	4b7a      	ldr	r3, [pc, #488]	; (800394c <HAL_RCC_OscConfig+0x470>)
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376a:	60bb      	str	r3, [r7, #8]
 800376c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800376e:	2301      	movs	r3, #1
 8003770:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003772:	4b77      	ldr	r3, [pc, #476]	; (8003950 <HAL_RCC_OscConfig+0x474>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377a:	2b00      	cmp	r3, #0
 800377c:	d118      	bne.n	80037b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800377e:	4b74      	ldr	r3, [pc, #464]	; (8003950 <HAL_RCC_OscConfig+0x474>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a73      	ldr	r2, [pc, #460]	; (8003950 <HAL_RCC_OscConfig+0x474>)
 8003784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800378a:	f7fd fbf5 	bl	8000f78 <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003792:	f7fd fbf1 	bl	8000f78 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e10c      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a4:	4b6a      	ldr	r3, [pc, #424]	; (8003950 <HAL_RCC_OscConfig+0x474>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0f0      	beq.n	8003792 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d106      	bne.n	80037c6 <HAL_RCC_OscConfig+0x2ea>
 80037b8:	4b64      	ldr	r3, [pc, #400]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80037ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037bc:	4a63      	ldr	r2, [pc, #396]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80037be:	f043 0301 	orr.w	r3, r3, #1
 80037c2:	6713      	str	r3, [r2, #112]	; 0x70
 80037c4:	e01c      	b.n	8003800 <HAL_RCC_OscConfig+0x324>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	2b05      	cmp	r3, #5
 80037cc:	d10c      	bne.n	80037e8 <HAL_RCC_OscConfig+0x30c>
 80037ce:	4b5f      	ldr	r3, [pc, #380]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80037d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d2:	4a5e      	ldr	r2, [pc, #376]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80037d4:	f043 0304 	orr.w	r3, r3, #4
 80037d8:	6713      	str	r3, [r2, #112]	; 0x70
 80037da:	4b5c      	ldr	r3, [pc, #368]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80037dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037de:	4a5b      	ldr	r2, [pc, #364]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80037e0:	f043 0301 	orr.w	r3, r3, #1
 80037e4:	6713      	str	r3, [r2, #112]	; 0x70
 80037e6:	e00b      	b.n	8003800 <HAL_RCC_OscConfig+0x324>
 80037e8:	4b58      	ldr	r3, [pc, #352]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80037ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ec:	4a57      	ldr	r2, [pc, #348]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80037ee:	f023 0301 	bic.w	r3, r3, #1
 80037f2:	6713      	str	r3, [r2, #112]	; 0x70
 80037f4:	4b55      	ldr	r3, [pc, #340]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80037f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f8:	4a54      	ldr	r2, [pc, #336]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80037fa:	f023 0304 	bic.w	r3, r3, #4
 80037fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d015      	beq.n	8003834 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003808:	f7fd fbb6 	bl	8000f78 <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800380e:	e00a      	b.n	8003826 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003810:	f7fd fbb2 	bl	8000f78 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	f241 3288 	movw	r2, #5000	; 0x1388
 800381e:	4293      	cmp	r3, r2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e0cb      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003826:	4b49      	ldr	r3, [pc, #292]	; (800394c <HAL_RCC_OscConfig+0x470>)
 8003828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0ee      	beq.n	8003810 <HAL_RCC_OscConfig+0x334>
 8003832:	e014      	b.n	800385e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003834:	f7fd fba0 	bl	8000f78 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800383a:	e00a      	b.n	8003852 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800383c:	f7fd fb9c 	bl	8000f78 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	f241 3288 	movw	r2, #5000	; 0x1388
 800384a:	4293      	cmp	r3, r2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e0b5      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003852:	4b3e      	ldr	r3, [pc, #248]	; (800394c <HAL_RCC_OscConfig+0x470>)
 8003854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1ee      	bne.n	800383c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800385e:	7dfb      	ldrb	r3, [r7, #23]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d105      	bne.n	8003870 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003864:	4b39      	ldr	r3, [pc, #228]	; (800394c <HAL_RCC_OscConfig+0x470>)
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	4a38      	ldr	r2, [pc, #224]	; (800394c <HAL_RCC_OscConfig+0x470>)
 800386a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800386e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 80a1 	beq.w	80039bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800387a:	4b34      	ldr	r3, [pc, #208]	; (800394c <HAL_RCC_OscConfig+0x470>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 030c 	and.w	r3, r3, #12
 8003882:	2b08      	cmp	r3, #8
 8003884:	d05c      	beq.n	8003940 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	2b02      	cmp	r3, #2
 800388c:	d141      	bne.n	8003912 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800388e:	4b31      	ldr	r3, [pc, #196]	; (8003954 <HAL_RCC_OscConfig+0x478>)
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003894:	f7fd fb70 	bl	8000f78 <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800389c:	f7fd fb6c 	bl	8000f78 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e087      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ae:	4b27      	ldr	r3, [pc, #156]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1f0      	bne.n	800389c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69da      	ldr	r2, [r3, #28]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	019b      	lsls	r3, r3, #6
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d0:	085b      	lsrs	r3, r3, #1
 80038d2:	3b01      	subs	r3, #1
 80038d4:	041b      	lsls	r3, r3, #16
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038dc:	061b      	lsls	r3, r3, #24
 80038de:	491b      	ldr	r1, [pc, #108]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038e4:	4b1b      	ldr	r3, [pc, #108]	; (8003954 <HAL_RCC_OscConfig+0x478>)
 80038e6:	2201      	movs	r2, #1
 80038e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ea:	f7fd fb45 	bl	8000f78 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038f2:	f7fd fb41 	bl	8000f78 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e05c      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003904:	4b11      	ldr	r3, [pc, #68]	; (800394c <HAL_RCC_OscConfig+0x470>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0f0      	beq.n	80038f2 <HAL_RCC_OscConfig+0x416>
 8003910:	e054      	b.n	80039bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003912:	4b10      	ldr	r3, [pc, #64]	; (8003954 <HAL_RCC_OscConfig+0x478>)
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003918:	f7fd fb2e 	bl	8000f78 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003920:	f7fd fb2a 	bl	8000f78 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e045      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003932:	4b06      	ldr	r3, [pc, #24]	; (800394c <HAL_RCC_OscConfig+0x470>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1f0      	bne.n	8003920 <HAL_RCC_OscConfig+0x444>
 800393e:	e03d      	b.n	80039bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d107      	bne.n	8003958 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e038      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
 800394c:	40023800 	.word	0x40023800
 8003950:	40007000 	.word	0x40007000
 8003954:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003958:	4b1b      	ldr	r3, [pc, #108]	; (80039c8 <HAL_RCC_OscConfig+0x4ec>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d028      	beq.n	80039b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003970:	429a      	cmp	r2, r3
 8003972:	d121      	bne.n	80039b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800397e:	429a      	cmp	r2, r3
 8003980:	d11a      	bne.n	80039b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003988:	4013      	ands	r3, r2
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800398e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003990:	4293      	cmp	r3, r2
 8003992:	d111      	bne.n	80039b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399e:	085b      	lsrs	r3, r3, #1
 80039a0:	3b01      	subs	r3, #1
 80039a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d107      	bne.n	80039b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d001      	beq.n	80039bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e000      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3718      	adds	r7, #24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40023800 	.word	0x40023800

080039cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e0cc      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039e0:	4b68      	ldr	r3, [pc, #416]	; (8003b84 <HAL_RCC_ClockConfig+0x1b8>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d90c      	bls.n	8003a08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ee:	4b65      	ldr	r3, [pc, #404]	; (8003b84 <HAL_RCC_ClockConfig+0x1b8>)
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f6:	4b63      	ldr	r3, [pc, #396]	; (8003b84 <HAL_RCC_ClockConfig+0x1b8>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d001      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e0b8      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d020      	beq.n	8003a56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d005      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a20:	4b59      	ldr	r3, [pc, #356]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	4a58      	ldr	r2, [pc, #352]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d005      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a38:	4b53      	ldr	r3, [pc, #332]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	4a52      	ldr	r2, [pc, #328]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a44:	4b50      	ldr	r3, [pc, #320]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	494d      	ldr	r1, [pc, #308]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d044      	beq.n	8003aec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d107      	bne.n	8003a7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a6a:	4b47      	ldr	r3, [pc, #284]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d119      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e07f      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d003      	beq.n	8003a8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a86:	2b03      	cmp	r3, #3
 8003a88:	d107      	bne.n	8003a9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a8a:	4b3f      	ldr	r3, [pc, #252]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d109      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e06f      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a9a:	4b3b      	ldr	r3, [pc, #236]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e067      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aaa:	4b37      	ldr	r3, [pc, #220]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f023 0203 	bic.w	r2, r3, #3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	4934      	ldr	r1, [pc, #208]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003abc:	f7fd fa5c 	bl	8000f78 <HAL_GetTick>
 8003ac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac2:	e00a      	b.n	8003ada <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ac4:	f7fd fa58 	bl	8000f78 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e04f      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ada:	4b2b      	ldr	r3, [pc, #172]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 020c 	and.w	r2, r3, #12
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d1eb      	bne.n	8003ac4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003aec:	4b25      	ldr	r3, [pc, #148]	; (8003b84 <HAL_RCC_ClockConfig+0x1b8>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d20c      	bcs.n	8003b14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003afa:	4b22      	ldr	r3, [pc, #136]	; (8003b84 <HAL_RCC_ClockConfig+0x1b8>)
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	b2d2      	uxtb	r2, r2
 8003b00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b02:	4b20      	ldr	r3, [pc, #128]	; (8003b84 <HAL_RCC_ClockConfig+0x1b8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0307 	and.w	r3, r3, #7
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d001      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e032      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d008      	beq.n	8003b32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b20:	4b19      	ldr	r3, [pc, #100]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	4916      	ldr	r1, [pc, #88]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d009      	beq.n	8003b52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b3e:	4b12      	ldr	r3, [pc, #72]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	490e      	ldr	r1, [pc, #56]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b52:	f000 f821 	bl	8003b98 <HAL_RCC_GetSysClockFreq>
 8003b56:	4602      	mov	r2, r0
 8003b58:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	091b      	lsrs	r3, r3, #4
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	490a      	ldr	r1, [pc, #40]	; (8003b8c <HAL_RCC_ClockConfig+0x1c0>)
 8003b64:	5ccb      	ldrb	r3, [r1, r3]
 8003b66:	fa22 f303 	lsr.w	r3, r2, r3
 8003b6a:	4a09      	ldr	r2, [pc, #36]	; (8003b90 <HAL_RCC_ClockConfig+0x1c4>)
 8003b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b6e:	4b09      	ldr	r3, [pc, #36]	; (8003b94 <HAL_RCC_ClockConfig+0x1c8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fd f9bc 	bl	8000ef0 <HAL_InitTick>

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40023c00 	.word	0x40023c00
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	08010454 	.word	0x08010454
 8003b90:	2000000c 	.word	0x2000000c
 8003b94:	20000000 	.word	0x20000000

08003b98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b9c:	b094      	sub	sp, #80	; 0x50
 8003b9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ba8:	2300      	movs	r3, #0
 8003baa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bb0:	4b79      	ldr	r3, [pc, #484]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f003 030c 	and.w	r3, r3, #12
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d00d      	beq.n	8003bd8 <HAL_RCC_GetSysClockFreq+0x40>
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	f200 80e1 	bhi.w	8003d84 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d002      	beq.n	8003bcc <HAL_RCC_GetSysClockFreq+0x34>
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d003      	beq.n	8003bd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bca:	e0db      	b.n	8003d84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bcc:	4b73      	ldr	r3, [pc, #460]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x204>)
 8003bce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003bd0:	e0db      	b.n	8003d8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bd2:	4b73      	ldr	r3, [pc, #460]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003bd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bd6:	e0d8      	b.n	8003d8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bd8:	4b6f      	ldr	r3, [pc, #444]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003be0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003be2:	4b6d      	ldr	r3, [pc, #436]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d063      	beq.n	8003cb6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bee:	4b6a      	ldr	r3, [pc, #424]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	099b      	lsrs	r3, r3, #6
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bf8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c00:	633b      	str	r3, [r7, #48]	; 0x30
 8003c02:	2300      	movs	r3, #0
 8003c04:	637b      	str	r3, [r7, #52]	; 0x34
 8003c06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c0a:	4622      	mov	r2, r4
 8003c0c:	462b      	mov	r3, r5
 8003c0e:	f04f 0000 	mov.w	r0, #0
 8003c12:	f04f 0100 	mov.w	r1, #0
 8003c16:	0159      	lsls	r1, r3, #5
 8003c18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c1c:	0150      	lsls	r0, r2, #5
 8003c1e:	4602      	mov	r2, r0
 8003c20:	460b      	mov	r3, r1
 8003c22:	4621      	mov	r1, r4
 8003c24:	1a51      	subs	r1, r2, r1
 8003c26:	6139      	str	r1, [r7, #16]
 8003c28:	4629      	mov	r1, r5
 8003c2a:	eb63 0301 	sbc.w	r3, r3, r1
 8003c2e:	617b      	str	r3, [r7, #20]
 8003c30:	f04f 0200 	mov.w	r2, #0
 8003c34:	f04f 0300 	mov.w	r3, #0
 8003c38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c3c:	4659      	mov	r1, fp
 8003c3e:	018b      	lsls	r3, r1, #6
 8003c40:	4651      	mov	r1, sl
 8003c42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c46:	4651      	mov	r1, sl
 8003c48:	018a      	lsls	r2, r1, #6
 8003c4a:	4651      	mov	r1, sl
 8003c4c:	ebb2 0801 	subs.w	r8, r2, r1
 8003c50:	4659      	mov	r1, fp
 8003c52:	eb63 0901 	sbc.w	r9, r3, r1
 8003c56:	f04f 0200 	mov.w	r2, #0
 8003c5a:	f04f 0300 	mov.w	r3, #0
 8003c5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c6a:	4690      	mov	r8, r2
 8003c6c:	4699      	mov	r9, r3
 8003c6e:	4623      	mov	r3, r4
 8003c70:	eb18 0303 	adds.w	r3, r8, r3
 8003c74:	60bb      	str	r3, [r7, #8]
 8003c76:	462b      	mov	r3, r5
 8003c78:	eb49 0303 	adc.w	r3, r9, r3
 8003c7c:	60fb      	str	r3, [r7, #12]
 8003c7e:	f04f 0200 	mov.w	r2, #0
 8003c82:	f04f 0300 	mov.w	r3, #0
 8003c86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c8a:	4629      	mov	r1, r5
 8003c8c:	024b      	lsls	r3, r1, #9
 8003c8e:	4621      	mov	r1, r4
 8003c90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c94:	4621      	mov	r1, r4
 8003c96:	024a      	lsls	r2, r1, #9
 8003c98:	4610      	mov	r0, r2
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ca2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ca4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ca8:	f7fc ff7e 	bl	8000ba8 <__aeabi_uldivmod>
 8003cac:	4602      	mov	r2, r0
 8003cae:	460b      	mov	r3, r1
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cb4:	e058      	b.n	8003d68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cb6:	4b38      	ldr	r3, [pc, #224]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	099b      	lsrs	r3, r3, #6
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	4611      	mov	r1, r2
 8003cc2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cc6:	623b      	str	r3, [r7, #32]
 8003cc8:	2300      	movs	r3, #0
 8003cca:	627b      	str	r3, [r7, #36]	; 0x24
 8003ccc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003cd0:	4642      	mov	r2, r8
 8003cd2:	464b      	mov	r3, r9
 8003cd4:	f04f 0000 	mov.w	r0, #0
 8003cd8:	f04f 0100 	mov.w	r1, #0
 8003cdc:	0159      	lsls	r1, r3, #5
 8003cde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ce2:	0150      	lsls	r0, r2, #5
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4641      	mov	r1, r8
 8003cea:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cee:	4649      	mov	r1, r9
 8003cf0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d08:	ebb2 040a 	subs.w	r4, r2, sl
 8003d0c:	eb63 050b 	sbc.w	r5, r3, fp
 8003d10:	f04f 0200 	mov.w	r2, #0
 8003d14:	f04f 0300 	mov.w	r3, #0
 8003d18:	00eb      	lsls	r3, r5, #3
 8003d1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d1e:	00e2      	lsls	r2, r4, #3
 8003d20:	4614      	mov	r4, r2
 8003d22:	461d      	mov	r5, r3
 8003d24:	4643      	mov	r3, r8
 8003d26:	18e3      	adds	r3, r4, r3
 8003d28:	603b      	str	r3, [r7, #0]
 8003d2a:	464b      	mov	r3, r9
 8003d2c:	eb45 0303 	adc.w	r3, r5, r3
 8003d30:	607b      	str	r3, [r7, #4]
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	f04f 0300 	mov.w	r3, #0
 8003d3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d3e:	4629      	mov	r1, r5
 8003d40:	028b      	lsls	r3, r1, #10
 8003d42:	4621      	mov	r1, r4
 8003d44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d48:	4621      	mov	r1, r4
 8003d4a:	028a      	lsls	r2, r1, #10
 8003d4c:	4610      	mov	r0, r2
 8003d4e:	4619      	mov	r1, r3
 8003d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d52:	2200      	movs	r2, #0
 8003d54:	61bb      	str	r3, [r7, #24]
 8003d56:	61fa      	str	r2, [r7, #28]
 8003d58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d5c:	f7fc ff24 	bl	8000ba8 <__aeabi_uldivmod>
 8003d60:	4602      	mov	r2, r0
 8003d62:	460b      	mov	r3, r1
 8003d64:	4613      	mov	r3, r2
 8003d66:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d68:	4b0b      	ldr	r3, [pc, #44]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	0c1b      	lsrs	r3, r3, #16
 8003d6e:	f003 0303 	and.w	r3, r3, #3
 8003d72:	3301      	adds	r3, #1
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003d78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d82:	e002      	b.n	8003d8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d84:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x204>)
 8003d86:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3750      	adds	r7, #80	; 0x50
 8003d90:	46bd      	mov	sp, r7
 8003d92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d96:	bf00      	nop
 8003d98:	40023800 	.word	0x40023800
 8003d9c:	00f42400 	.word	0x00f42400
 8003da0:	007a1200 	.word	0x007a1200

08003da4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003da8:	4b03      	ldr	r3, [pc, #12]	; (8003db8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003daa:	681b      	ldr	r3, [r3, #0]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	2000000c 	.word	0x2000000c

08003dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003dc0:	f7ff fff0 	bl	8003da4 <HAL_RCC_GetHCLKFreq>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	4b05      	ldr	r3, [pc, #20]	; (8003ddc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	0a9b      	lsrs	r3, r3, #10
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	4903      	ldr	r1, [pc, #12]	; (8003de0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dd2:	5ccb      	ldrb	r3, [r1, r3]
 8003dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	08010464 	.word	0x08010464

08003de4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003de8:	f7ff ffdc 	bl	8003da4 <HAL_RCC_GetHCLKFreq>
 8003dec:	4602      	mov	r2, r0
 8003dee:	4b05      	ldr	r3, [pc, #20]	; (8003e04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	0b5b      	lsrs	r3, r3, #13
 8003df4:	f003 0307 	and.w	r3, r3, #7
 8003df8:	4903      	ldr	r1, [pc, #12]	; (8003e08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dfa:	5ccb      	ldrb	r3, [r1, r3]
 8003dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	40023800 	.word	0x40023800
 8003e08:	08010464 	.word	0x08010464

08003e0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e03f      	b.n	8003e9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d106      	bne.n	8003e38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f008 fc4e 	bl	800c6d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2224      	movs	r2, #36	; 0x24
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68da      	ldr	r2, [r3, #12]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 fe23 	bl	8004a9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	691a      	ldr	r2, [r3, #16]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	695a      	ldr	r2, [r3, #20]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2220      	movs	r2, #32
 8003e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b08a      	sub	sp, #40	; 0x28
 8003eaa:	af02      	add	r7, sp, #8
 8003eac:	60f8      	str	r0, [r7, #12]
 8003eae:	60b9      	str	r1, [r7, #8]
 8003eb0:	603b      	str	r3, [r7, #0]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b20      	cmp	r3, #32
 8003ec4:	d17c      	bne.n	8003fc0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d002      	beq.n	8003ed2 <HAL_UART_Transmit+0x2c>
 8003ecc:	88fb      	ldrh	r3, [r7, #6]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e075      	b.n	8003fc2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d101      	bne.n	8003ee4 <HAL_UART_Transmit+0x3e>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	e06e      	b.n	8003fc2 <HAL_UART_Transmit+0x11c>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2221      	movs	r2, #33	; 0x21
 8003ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003efa:	f7fd f83d 	bl	8000f78 <HAL_GetTick>
 8003efe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	88fa      	ldrh	r2, [r7, #6]
 8003f04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	88fa      	ldrh	r2, [r7, #6]
 8003f0a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f14:	d108      	bne.n	8003f28 <HAL_UART_Transmit+0x82>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d104      	bne.n	8003f28 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	61bb      	str	r3, [r7, #24]
 8003f26:	e003      	b.n	8003f30 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003f38:	e02a      	b.n	8003f90 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	2200      	movs	r2, #0
 8003f42:	2180      	movs	r1, #128	; 0x80
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f000 fb63 	bl	8004610 <UART_WaitOnFlagUntilTimeout>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e036      	b.n	8003fc2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10b      	bne.n	8003f72 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	881b      	ldrh	r3, [r3, #0]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	3302      	adds	r3, #2
 8003f6e:	61bb      	str	r3, [r7, #24]
 8003f70:	e007      	b.n	8003f82 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	781a      	ldrb	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1cf      	bne.n	8003f3a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	2140      	movs	r1, #64	; 0x40
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f000 fb33 	bl	8004610 <UART_WaitOnFlagUntilTimeout>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d001      	beq.n	8003fb4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e006      	b.n	8003fc2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	e000      	b.n	8003fc2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003fc0:	2302      	movs	r3, #2
  }
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3720      	adds	r7, #32
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b085      	sub	sp, #20
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	60f8      	str	r0, [r7, #12]
 8003fd2:	60b9      	str	r1, [r7, #8]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b20      	cmp	r3, #32
 8003fe2:	d130      	bne.n	8004046 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d002      	beq.n	8003ff0 <HAL_UART_Transmit_IT+0x26>
 8003fea:	88fb      	ldrh	r3, [r7, #6]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e029      	b.n	8004048 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d101      	bne.n	8004002 <HAL_UART_Transmit_IT+0x38>
 8003ffe:	2302      	movs	r3, #2
 8004000:	e022      	b.n	8004048 <HAL_UART_Transmit_IT+0x7e>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	88fa      	ldrh	r2, [r7, #6]
 8004014:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	88fa      	ldrh	r2, [r7, #6]
 800401a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2221      	movs	r2, #33	; 0x21
 8004026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68da      	ldr	r2, [r3, #12]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004040:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004042:	2300      	movs	r3, #0
 8004044:	e000      	b.n	8004048 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004046:	2302      	movs	r3, #2
  }
}
 8004048:	4618      	mov	r0, r3
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	4613      	mov	r3, r2
 8004060:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b20      	cmp	r3, #32
 800406c:	d11d      	bne.n	80040aa <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d002      	beq.n	800407a <HAL_UART_Receive_IT+0x26>
 8004074:	88fb      	ldrh	r3, [r7, #6]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e016      	b.n	80040ac <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004084:	2b01      	cmp	r3, #1
 8004086:	d101      	bne.n	800408c <HAL_UART_Receive_IT+0x38>
 8004088:	2302      	movs	r3, #2
 800408a:	e00f      	b.n	80040ac <HAL_UART_Receive_IT+0x58>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800409a:	88fb      	ldrh	r3, [r7, #6]
 800409c:	461a      	mov	r2, r3
 800409e:	68b9      	ldr	r1, [r7, #8]
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 fb23 	bl	80046ec <UART_Start_Receive_IT>
 80040a6:	4603      	mov	r3, r0
 80040a8:	e000      	b.n	80040ac <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80040aa:	2302      	movs	r3, #2
  }
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b0ba      	sub	sp, #232	; 0xe8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80040da:	2300      	movs	r3, #0
 80040dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80040e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ea:	f003 030f 	and.w	r3, r3, #15
 80040ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80040f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10f      	bne.n	800411a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040fe:	f003 0320 	and.w	r3, r3, #32
 8004102:	2b00      	cmp	r3, #0
 8004104:	d009      	beq.n	800411a <HAL_UART_IRQHandler+0x66>
 8004106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800410a:	f003 0320 	and.w	r3, r3, #32
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 fc07 	bl	8004926 <UART_Receive_IT>
      return;
 8004118:	e256      	b.n	80045c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800411a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 80de 	beq.w	80042e0 <HAL_UART_IRQHandler+0x22c>
 8004124:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b00      	cmp	r3, #0
 800412e:	d106      	bne.n	800413e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004134:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 80d1 	beq.w	80042e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800413e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00b      	beq.n	8004162 <HAL_UART_IRQHandler+0xae>
 800414a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800414e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004152:	2b00      	cmp	r3, #0
 8004154:	d005      	beq.n	8004162 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	f043 0201 	orr.w	r2, r3, #1
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004166:	f003 0304 	and.w	r3, r3, #4
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00b      	beq.n	8004186 <HAL_UART_IRQHandler+0xd2>
 800416e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d005      	beq.n	8004186 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	f043 0202 	orr.w	r2, r3, #2
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00b      	beq.n	80041aa <HAL_UART_IRQHandler+0xf6>
 8004192:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d005      	beq.n	80041aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a2:	f043 0204 	orr.w	r2, r3, #4
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80041aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ae:	f003 0308 	and.w	r3, r3, #8
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d011      	beq.n	80041da <HAL_UART_IRQHandler+0x126>
 80041b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041ba:	f003 0320 	and.w	r3, r3, #32
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d105      	bne.n	80041ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80041c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d005      	beq.n	80041da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	f043 0208 	orr.w	r2, r3, #8
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 81ed 	beq.w	80045be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e8:	f003 0320 	and.w	r3, r3, #32
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d008      	beq.n	8004202 <HAL_UART_IRQHandler+0x14e>
 80041f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041f4:	f003 0320 	and.w	r3, r3, #32
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d002      	beq.n	8004202 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 fb92 	bl	8004926 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420c:	2b40      	cmp	r3, #64	; 0x40
 800420e:	bf0c      	ite	eq
 8004210:	2301      	moveq	r3, #1
 8004212:	2300      	movne	r3, #0
 8004214:	b2db      	uxtb	r3, r3
 8004216:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	f003 0308 	and.w	r3, r3, #8
 8004222:	2b00      	cmp	r3, #0
 8004224:	d103      	bne.n	800422e <HAL_UART_IRQHandler+0x17a>
 8004226:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800422a:	2b00      	cmp	r3, #0
 800422c:	d04f      	beq.n	80042ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fa9a 	bl	8004768 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423e:	2b40      	cmp	r3, #64	; 0x40
 8004240:	d141      	bne.n	80042c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	3314      	adds	r3, #20
 8004248:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004250:	e853 3f00 	ldrex	r3, [r3]
 8004254:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004258:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800425c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004260:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	3314      	adds	r3, #20
 800426a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800426e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004272:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004276:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800427a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800427e:	e841 2300 	strex	r3, r2, [r1]
 8004282:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004286:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1d9      	bne.n	8004242 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004292:	2b00      	cmp	r3, #0
 8004294:	d013      	beq.n	80042be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429a:	4a7d      	ldr	r2, [pc, #500]	; (8004490 <HAL_UART_IRQHandler+0x3dc>)
 800429c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fd fd32 	bl	8001d0c <HAL_DMA_Abort_IT>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d016      	beq.n	80042dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042b8:	4610      	mov	r0, r2
 80042ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042bc:	e00e      	b.n	80042dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f990 	bl	80045e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042c4:	e00a      	b.n	80042dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f98c 	bl	80045e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042cc:	e006      	b.n	80042dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f988 	bl	80045e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80042da:	e170      	b.n	80045be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042dc:	bf00      	nop
    return;
 80042de:	e16e      	b.n	80045be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	f040 814a 	bne.w	800457e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80042ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ee:	f003 0310 	and.w	r3, r3, #16
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f000 8143 	beq.w	800457e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80042f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042fc:	f003 0310 	and.w	r3, r3, #16
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 813c 	beq.w	800457e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004306:	2300      	movs	r3, #0
 8004308:	60bb      	str	r3, [r7, #8]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	60bb      	str	r3, [r7, #8]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	60bb      	str	r3, [r7, #8]
 800431a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004326:	2b40      	cmp	r3, #64	; 0x40
 8004328:	f040 80b4 	bne.w	8004494 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004338:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800433c:	2b00      	cmp	r3, #0
 800433e:	f000 8140 	beq.w	80045c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004346:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800434a:	429a      	cmp	r2, r3
 800434c:	f080 8139 	bcs.w	80045c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004356:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004362:	f000 8088 	beq.w	8004476 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	330c      	adds	r3, #12
 800436c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004370:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004374:	e853 3f00 	ldrex	r3, [r3]
 8004378:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800437c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004384:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	330c      	adds	r3, #12
 800438e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004392:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004396:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800439e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80043a2:	e841 2300 	strex	r3, r2, [r1]
 80043a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80043aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1d9      	bne.n	8004366 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	3314      	adds	r3, #20
 80043b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043bc:	e853 3f00 	ldrex	r3, [r3]
 80043c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80043c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043c4:	f023 0301 	bic.w	r3, r3, #1
 80043c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	3314      	adds	r3, #20
 80043d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80043d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80043da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80043de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80043e2:	e841 2300 	strex	r3, r2, [r1]
 80043e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80043e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1e1      	bne.n	80043b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	3314      	adds	r3, #20
 80043f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043f8:	e853 3f00 	ldrex	r3, [r3]
 80043fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80043fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004400:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004404:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	3314      	adds	r3, #20
 800440e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004412:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004414:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004416:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004418:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800441a:	e841 2300 	strex	r3, r2, [r1]
 800441e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004420:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1e3      	bne.n	80043ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2220      	movs	r2, #32
 800442a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	330c      	adds	r3, #12
 800443a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800443e:	e853 3f00 	ldrex	r3, [r3]
 8004442:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004444:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004446:	f023 0310 	bic.w	r3, r3, #16
 800444a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	330c      	adds	r3, #12
 8004454:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004458:	65ba      	str	r2, [r7, #88]	; 0x58
 800445a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800445e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004460:	e841 2300 	strex	r3, r2, [r1]
 8004464:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1e3      	bne.n	8004434 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004470:	4618      	mov	r0, r3
 8004472:	f7fd fbdb 	bl	8001c2c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800447e:	b29b      	uxth	r3, r3
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	b29b      	uxth	r3, r3
 8004484:	4619      	mov	r1, r3
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f8b6 	bl	80045f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800448c:	e099      	b.n	80045c2 <HAL_UART_IRQHandler+0x50e>
 800448e:	bf00      	nop
 8004490:	0800482f 	.word	0x0800482f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800449c:	b29b      	uxth	r3, r3
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 808b 	beq.w	80045c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80044b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 8086 	beq.w	80045c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	330c      	adds	r3, #12
 80044c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c4:	e853 3f00 	ldrex	r3, [r3]
 80044c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	330c      	adds	r3, #12
 80044da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80044de:	647a      	str	r2, [r7, #68]	; 0x44
 80044e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044e6:	e841 2300 	strex	r3, r2, [r1]
 80044ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1e3      	bne.n	80044ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	3314      	adds	r3, #20
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	e853 3f00 	ldrex	r3, [r3]
 8004500:	623b      	str	r3, [r7, #32]
   return(result);
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	f023 0301 	bic.w	r3, r3, #1
 8004508:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	3314      	adds	r3, #20
 8004512:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004516:	633a      	str	r2, [r7, #48]	; 0x30
 8004518:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800451c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800451e:	e841 2300 	strex	r3, r2, [r1]
 8004522:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1e3      	bne.n	80044f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2220      	movs	r2, #32
 800452e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	330c      	adds	r3, #12
 800453e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	e853 3f00 	ldrex	r3, [r3]
 8004546:	60fb      	str	r3, [r7, #12]
   return(result);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f023 0310 	bic.w	r3, r3, #16
 800454e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	330c      	adds	r3, #12
 8004558:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800455c:	61fa      	str	r2, [r7, #28]
 800455e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004560:	69b9      	ldr	r1, [r7, #24]
 8004562:	69fa      	ldr	r2, [r7, #28]
 8004564:	e841 2300 	strex	r3, r2, [r1]
 8004568:	617b      	str	r3, [r7, #20]
   return(result);
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1e3      	bne.n	8004538 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004570:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004574:	4619      	mov	r1, r3
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f83e 	bl	80045f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800457c:	e023      	b.n	80045c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800457e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004586:	2b00      	cmp	r3, #0
 8004588:	d009      	beq.n	800459e <HAL_UART_IRQHandler+0x4ea>
 800458a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800458e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f95d 	bl	8004856 <UART_Transmit_IT>
    return;
 800459c:	e014      	b.n	80045c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800459e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00e      	beq.n	80045c8 <HAL_UART_IRQHandler+0x514>
 80045aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d008      	beq.n	80045c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f99d 	bl	80048f6 <UART_EndTransmit_IT>
    return;
 80045bc:	e004      	b.n	80045c8 <HAL_UART_IRQHandler+0x514>
    return;
 80045be:	bf00      	nop
 80045c0:	e002      	b.n	80045c8 <HAL_UART_IRQHandler+0x514>
      return;
 80045c2:	bf00      	nop
 80045c4:	e000      	b.n	80045c8 <HAL_UART_IRQHandler+0x514>
      return;
 80045c6:	bf00      	nop
  }
}
 80045c8:	37e8      	adds	r7, #232	; 0xe8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop

080045d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	460b      	mov	r3, r1
 8004602:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b090      	sub	sp, #64	; 0x40
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	603b      	str	r3, [r7, #0]
 800461c:	4613      	mov	r3, r2
 800461e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004620:	e050      	b.n	80046c4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004628:	d04c      	beq.n	80046c4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800462a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800462c:	2b00      	cmp	r3, #0
 800462e:	d007      	beq.n	8004640 <UART_WaitOnFlagUntilTimeout+0x30>
 8004630:	f7fc fca2 	bl	8000f78 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800463c:	429a      	cmp	r2, r3
 800463e:	d241      	bcs.n	80046c4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	330c      	adds	r3, #12
 8004646:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464a:	e853 3f00 	ldrex	r3, [r3]
 800464e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004656:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	330c      	adds	r3, #12
 800465e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004660:	637a      	str	r2, [r7, #52]	; 0x34
 8004662:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004664:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004666:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004668:	e841 2300 	strex	r3, r2, [r1]
 800466c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800466e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1e5      	bne.n	8004640 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	3314      	adds	r3, #20
 800467a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	e853 3f00 	ldrex	r3, [r3]
 8004682:	613b      	str	r3, [r7, #16]
   return(result);
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	f023 0301 	bic.w	r3, r3, #1
 800468a:	63bb      	str	r3, [r7, #56]	; 0x38
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	3314      	adds	r3, #20
 8004692:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004694:	623a      	str	r2, [r7, #32]
 8004696:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004698:	69f9      	ldr	r1, [r7, #28]
 800469a:	6a3a      	ldr	r2, [r7, #32]
 800469c:	e841 2300 	strex	r3, r2, [r1]
 80046a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1e5      	bne.n	8004674 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2220      	movs	r2, #32
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2220      	movs	r2, #32
 80046b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e00f      	b.n	80046e4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	4013      	ands	r3, r2
 80046ce:	68ba      	ldr	r2, [r7, #8]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	bf0c      	ite	eq
 80046d4:	2301      	moveq	r3, #1
 80046d6:	2300      	movne	r3, #0
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	461a      	mov	r2, r3
 80046dc:	79fb      	ldrb	r3, [r7, #7]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d09f      	beq.n	8004622 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3740      	adds	r7, #64	; 0x40
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	4613      	mov	r3, r2
 80046f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	88fa      	ldrh	r2, [r7, #6]
 8004704:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	88fa      	ldrh	r2, [r7, #6]
 800470a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2222      	movs	r2, #34	; 0x22
 8004716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d007      	beq.n	800473a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68da      	ldr	r2, [r3, #12]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004738:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	695a      	ldr	r2, [r3, #20]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f042 0201 	orr.w	r2, r2, #1
 8004748:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68da      	ldr	r2, [r3, #12]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f042 0220 	orr.w	r2, r2, #32
 8004758:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3714      	adds	r7, #20
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004768:	b480      	push	{r7}
 800476a:	b095      	sub	sp, #84	; 0x54
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	330c      	adds	r3, #12
 8004776:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800477a:	e853 3f00 	ldrex	r3, [r3]
 800477e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004782:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004786:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	330c      	adds	r3, #12
 800478e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004790:	643a      	str	r2, [r7, #64]	; 0x40
 8004792:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004794:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004796:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004798:	e841 2300 	strex	r3, r2, [r1]
 800479c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800479e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1e5      	bne.n	8004770 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	3314      	adds	r3, #20
 80047aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	e853 3f00 	ldrex	r3, [r3]
 80047b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	f023 0301 	bic.w	r3, r3, #1
 80047ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	3314      	adds	r3, #20
 80047c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047cc:	e841 2300 	strex	r3, r2, [r1]
 80047d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1e5      	bne.n	80047a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d119      	bne.n	8004814 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	330c      	adds	r3, #12
 80047e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	e853 3f00 	ldrex	r3, [r3]
 80047ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	f023 0310 	bic.w	r3, r3, #16
 80047f6:	647b      	str	r3, [r7, #68]	; 0x44
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	330c      	adds	r3, #12
 80047fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004800:	61ba      	str	r2, [r7, #24]
 8004802:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004804:	6979      	ldr	r1, [r7, #20]
 8004806:	69ba      	ldr	r2, [r7, #24]
 8004808:	e841 2300 	strex	r3, r2, [r1]
 800480c:	613b      	str	r3, [r7, #16]
   return(result);
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1e5      	bne.n	80047e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2220      	movs	r2, #32
 8004818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004822:	bf00      	nop
 8004824:	3754      	adds	r7, #84	; 0x54
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b084      	sub	sp, #16
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2200      	movs	r2, #0
 8004840:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f7ff fecb 	bl	80045e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800484e:	bf00      	nop
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004856:	b480      	push	{r7}
 8004858:	b085      	sub	sp, #20
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b21      	cmp	r3, #33	; 0x21
 8004868:	d13e      	bne.n	80048e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004872:	d114      	bne.n	800489e <UART_Transmit_IT+0x48>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d110      	bne.n	800489e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	881b      	ldrh	r3, [r3, #0]
 8004886:	461a      	mov	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004890:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	1c9a      	adds	r2, r3, #2
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	621a      	str	r2, [r3, #32]
 800489c:	e008      	b.n	80048b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	1c59      	adds	r1, r3, #1
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	6211      	str	r1, [r2, #32]
 80048a8:	781a      	ldrb	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	3b01      	subs	r3, #1
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	4619      	mov	r1, r3
 80048be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10f      	bne.n	80048e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68da      	ldr	r2, [r3, #12]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80048e4:	2300      	movs	r3, #0
 80048e6:	e000      	b.n	80048ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80048e8:	2302      	movs	r3, #2
  }
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b082      	sub	sp, #8
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68da      	ldr	r2, [r3, #12]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800490c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2220      	movs	r2, #32
 8004912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7ff fe5a 	bl	80045d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b08c      	sub	sp, #48	; 0x30
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b22      	cmp	r3, #34	; 0x22
 8004938:	f040 80ab 	bne.w	8004a92 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004944:	d117      	bne.n	8004976 <UART_Receive_IT+0x50>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d113      	bne.n	8004976 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800494e:	2300      	movs	r3, #0
 8004950:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004956:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	b29b      	uxth	r3, r3
 8004960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004964:	b29a      	uxth	r2, r3
 8004966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004968:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496e:	1c9a      	adds	r2, r3, #2
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	629a      	str	r2, [r3, #40]	; 0x28
 8004974:	e026      	b.n	80049c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800497c:	2300      	movs	r3, #0
 800497e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004988:	d007      	beq.n	800499a <UART_Receive_IT+0x74>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10a      	bne.n	80049a8 <UART_Receive_IT+0x82>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d106      	bne.n	80049a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	b2da      	uxtb	r2, r3
 80049a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a4:	701a      	strb	r2, [r3, #0]
 80049a6:	e008      	b.n	80049ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049b4:	b2da      	uxtb	r2, r3
 80049b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049be:	1c5a      	adds	r2, r3, #1
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	3b01      	subs	r3, #1
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	4619      	mov	r1, r3
 80049d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d15a      	bne.n	8004a8e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68da      	ldr	r2, [r3, #12]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 0220 	bic.w	r2, r2, #32
 80049e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68da      	ldr	r2, [r3, #12]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	695a      	ldr	r2, [r3, #20]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 0201 	bic.w	r2, r2, #1
 8004a06:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d135      	bne.n	8004a84 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	330c      	adds	r3, #12
 8004a24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	e853 3f00 	ldrex	r3, [r3]
 8004a2c:	613b      	str	r3, [r7, #16]
   return(result);
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	f023 0310 	bic.w	r3, r3, #16
 8004a34:	627b      	str	r3, [r7, #36]	; 0x24
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	330c      	adds	r3, #12
 8004a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a3e:	623a      	str	r2, [r7, #32]
 8004a40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a42:	69f9      	ldr	r1, [r7, #28]
 8004a44:	6a3a      	ldr	r2, [r7, #32]
 8004a46:	e841 2300 	strex	r3, r2, [r1]
 8004a4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1e5      	bne.n	8004a1e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0310 	and.w	r3, r3, #16
 8004a5c:	2b10      	cmp	r3, #16
 8004a5e:	d10a      	bne.n	8004a76 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a60:	2300      	movs	r3, #0
 8004a62:	60fb      	str	r3, [r7, #12]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	60fb      	str	r3, [r7, #12]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f7ff fdbb 	bl	80045f8 <HAL_UARTEx_RxEventCallback>
 8004a82:	e002      	b.n	8004a8a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f006 f99d 	bl	800adc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	e002      	b.n	8004a94 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	e000      	b.n	8004a94 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004a92:	2302      	movs	r3, #2
  }
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3730      	adds	r7, #48	; 0x30
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004aa0:	b0c0      	sub	sp, #256	; 0x100
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab8:	68d9      	ldr	r1, [r3, #12]
 8004aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	ea40 0301 	orr.w	r3, r0, r1
 8004ac4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aca:	689a      	ldr	r2, [r3, #8]
 8004acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	431a      	orrs	r2, r3
 8004adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae0:	69db      	ldr	r3, [r3, #28]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004af4:	f021 010c 	bic.w	r1, r1, #12
 8004af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b02:	430b      	orrs	r3, r1
 8004b04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b16:	6999      	ldr	r1, [r3, #24]
 8004b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	ea40 0301 	orr.w	r3, r0, r1
 8004b22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	4b8f      	ldr	r3, [pc, #572]	; (8004d68 <UART_SetConfig+0x2cc>)
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d005      	beq.n	8004b3c <UART_SetConfig+0xa0>
 8004b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	4b8d      	ldr	r3, [pc, #564]	; (8004d6c <UART_SetConfig+0x2d0>)
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d104      	bne.n	8004b46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b3c:	f7ff f952 	bl	8003de4 <HAL_RCC_GetPCLK2Freq>
 8004b40:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004b44:	e003      	b.n	8004b4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b46:	f7ff f939 	bl	8003dbc <HAL_RCC_GetPCLK1Freq>
 8004b4a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b52:	69db      	ldr	r3, [r3, #28]
 8004b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b58:	f040 810c 	bne.w	8004d74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b60:	2200      	movs	r2, #0
 8004b62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b66:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004b6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004b6e:	4622      	mov	r2, r4
 8004b70:	462b      	mov	r3, r5
 8004b72:	1891      	adds	r1, r2, r2
 8004b74:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b76:	415b      	adcs	r3, r3
 8004b78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004b7e:	4621      	mov	r1, r4
 8004b80:	eb12 0801 	adds.w	r8, r2, r1
 8004b84:	4629      	mov	r1, r5
 8004b86:	eb43 0901 	adc.w	r9, r3, r1
 8004b8a:	f04f 0200 	mov.w	r2, #0
 8004b8e:	f04f 0300 	mov.w	r3, #0
 8004b92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b9e:	4690      	mov	r8, r2
 8004ba0:	4699      	mov	r9, r3
 8004ba2:	4623      	mov	r3, r4
 8004ba4:	eb18 0303 	adds.w	r3, r8, r3
 8004ba8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004bac:	462b      	mov	r3, r5
 8004bae:	eb49 0303 	adc.w	r3, r9, r3
 8004bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004bc2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004bc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004bca:	460b      	mov	r3, r1
 8004bcc:	18db      	adds	r3, r3, r3
 8004bce:	653b      	str	r3, [r7, #80]	; 0x50
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	eb42 0303 	adc.w	r3, r2, r3
 8004bd6:	657b      	str	r3, [r7, #84]	; 0x54
 8004bd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004bdc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004be0:	f7fb ffe2 	bl	8000ba8 <__aeabi_uldivmod>
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	4b61      	ldr	r3, [pc, #388]	; (8004d70 <UART_SetConfig+0x2d4>)
 8004bea:	fba3 2302 	umull	r2, r3, r3, r2
 8004bee:	095b      	lsrs	r3, r3, #5
 8004bf0:	011c      	lsls	r4, r3, #4
 8004bf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bfc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004c00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c04:	4642      	mov	r2, r8
 8004c06:	464b      	mov	r3, r9
 8004c08:	1891      	adds	r1, r2, r2
 8004c0a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c0c:	415b      	adcs	r3, r3
 8004c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c14:	4641      	mov	r1, r8
 8004c16:	eb12 0a01 	adds.w	sl, r2, r1
 8004c1a:	4649      	mov	r1, r9
 8004c1c:	eb43 0b01 	adc.w	fp, r3, r1
 8004c20:	f04f 0200 	mov.w	r2, #0
 8004c24:	f04f 0300 	mov.w	r3, #0
 8004c28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c34:	4692      	mov	sl, r2
 8004c36:	469b      	mov	fp, r3
 8004c38:	4643      	mov	r3, r8
 8004c3a:	eb1a 0303 	adds.w	r3, sl, r3
 8004c3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c42:	464b      	mov	r3, r9
 8004c44:	eb4b 0303 	adc.w	r3, fp, r3
 8004c48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c58:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004c5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c60:	460b      	mov	r3, r1
 8004c62:	18db      	adds	r3, r3, r3
 8004c64:	643b      	str	r3, [r7, #64]	; 0x40
 8004c66:	4613      	mov	r3, r2
 8004c68:	eb42 0303 	adc.w	r3, r2, r3
 8004c6c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004c76:	f7fb ff97 	bl	8000ba8 <__aeabi_uldivmod>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	4611      	mov	r1, r2
 8004c80:	4b3b      	ldr	r3, [pc, #236]	; (8004d70 <UART_SetConfig+0x2d4>)
 8004c82:	fba3 2301 	umull	r2, r3, r3, r1
 8004c86:	095b      	lsrs	r3, r3, #5
 8004c88:	2264      	movs	r2, #100	; 0x64
 8004c8a:	fb02 f303 	mul.w	r3, r2, r3
 8004c8e:	1acb      	subs	r3, r1, r3
 8004c90:	00db      	lsls	r3, r3, #3
 8004c92:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004c96:	4b36      	ldr	r3, [pc, #216]	; (8004d70 <UART_SetConfig+0x2d4>)
 8004c98:	fba3 2302 	umull	r2, r3, r3, r2
 8004c9c:	095b      	lsrs	r3, r3, #5
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ca4:	441c      	add	r4, r3
 8004ca6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004caa:	2200      	movs	r2, #0
 8004cac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cb0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004cb4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004cb8:	4642      	mov	r2, r8
 8004cba:	464b      	mov	r3, r9
 8004cbc:	1891      	adds	r1, r2, r2
 8004cbe:	63b9      	str	r1, [r7, #56]	; 0x38
 8004cc0:	415b      	adcs	r3, r3
 8004cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004cc8:	4641      	mov	r1, r8
 8004cca:	1851      	adds	r1, r2, r1
 8004ccc:	6339      	str	r1, [r7, #48]	; 0x30
 8004cce:	4649      	mov	r1, r9
 8004cd0:	414b      	adcs	r3, r1
 8004cd2:	637b      	str	r3, [r7, #52]	; 0x34
 8004cd4:	f04f 0200 	mov.w	r2, #0
 8004cd8:	f04f 0300 	mov.w	r3, #0
 8004cdc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ce0:	4659      	mov	r1, fp
 8004ce2:	00cb      	lsls	r3, r1, #3
 8004ce4:	4651      	mov	r1, sl
 8004ce6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cea:	4651      	mov	r1, sl
 8004cec:	00ca      	lsls	r2, r1, #3
 8004cee:	4610      	mov	r0, r2
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	4642      	mov	r2, r8
 8004cf6:	189b      	adds	r3, r3, r2
 8004cf8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004cfc:	464b      	mov	r3, r9
 8004cfe:	460a      	mov	r2, r1
 8004d00:	eb42 0303 	adc.w	r3, r2, r3
 8004d04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d14:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004d18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	18db      	adds	r3, r3, r3
 8004d20:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d22:	4613      	mov	r3, r2
 8004d24:	eb42 0303 	adc.w	r3, r2, r3
 8004d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004d32:	f7fb ff39 	bl	8000ba8 <__aeabi_uldivmod>
 8004d36:	4602      	mov	r2, r0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	4b0d      	ldr	r3, [pc, #52]	; (8004d70 <UART_SetConfig+0x2d4>)
 8004d3c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d40:	095b      	lsrs	r3, r3, #5
 8004d42:	2164      	movs	r1, #100	; 0x64
 8004d44:	fb01 f303 	mul.w	r3, r1, r3
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	00db      	lsls	r3, r3, #3
 8004d4c:	3332      	adds	r3, #50	; 0x32
 8004d4e:	4a08      	ldr	r2, [pc, #32]	; (8004d70 <UART_SetConfig+0x2d4>)
 8004d50:	fba2 2303 	umull	r2, r3, r2, r3
 8004d54:	095b      	lsrs	r3, r3, #5
 8004d56:	f003 0207 	and.w	r2, r3, #7
 8004d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4422      	add	r2, r4
 8004d62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d64:	e105      	b.n	8004f72 <UART_SetConfig+0x4d6>
 8004d66:	bf00      	nop
 8004d68:	40011000 	.word	0x40011000
 8004d6c:	40011400 	.word	0x40011400
 8004d70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d7e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004d82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004d86:	4642      	mov	r2, r8
 8004d88:	464b      	mov	r3, r9
 8004d8a:	1891      	adds	r1, r2, r2
 8004d8c:	6239      	str	r1, [r7, #32]
 8004d8e:	415b      	adcs	r3, r3
 8004d90:	627b      	str	r3, [r7, #36]	; 0x24
 8004d92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d96:	4641      	mov	r1, r8
 8004d98:	1854      	adds	r4, r2, r1
 8004d9a:	4649      	mov	r1, r9
 8004d9c:	eb43 0501 	adc.w	r5, r3, r1
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	f04f 0300 	mov.w	r3, #0
 8004da8:	00eb      	lsls	r3, r5, #3
 8004daa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dae:	00e2      	lsls	r2, r4, #3
 8004db0:	4614      	mov	r4, r2
 8004db2:	461d      	mov	r5, r3
 8004db4:	4643      	mov	r3, r8
 8004db6:	18e3      	adds	r3, r4, r3
 8004db8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004dbc:	464b      	mov	r3, r9
 8004dbe:	eb45 0303 	adc.w	r3, r5, r3
 8004dc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004dd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004dd6:	f04f 0200 	mov.w	r2, #0
 8004dda:	f04f 0300 	mov.w	r3, #0
 8004dde:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004de2:	4629      	mov	r1, r5
 8004de4:	008b      	lsls	r3, r1, #2
 8004de6:	4621      	mov	r1, r4
 8004de8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dec:	4621      	mov	r1, r4
 8004dee:	008a      	lsls	r2, r1, #2
 8004df0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004df4:	f7fb fed8 	bl	8000ba8 <__aeabi_uldivmod>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4b60      	ldr	r3, [pc, #384]	; (8004f80 <UART_SetConfig+0x4e4>)
 8004dfe:	fba3 2302 	umull	r2, r3, r3, r2
 8004e02:	095b      	lsrs	r3, r3, #5
 8004e04:	011c      	lsls	r4, r3, #4
 8004e06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e10:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004e18:	4642      	mov	r2, r8
 8004e1a:	464b      	mov	r3, r9
 8004e1c:	1891      	adds	r1, r2, r2
 8004e1e:	61b9      	str	r1, [r7, #24]
 8004e20:	415b      	adcs	r3, r3
 8004e22:	61fb      	str	r3, [r7, #28]
 8004e24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e28:	4641      	mov	r1, r8
 8004e2a:	1851      	adds	r1, r2, r1
 8004e2c:	6139      	str	r1, [r7, #16]
 8004e2e:	4649      	mov	r1, r9
 8004e30:	414b      	adcs	r3, r1
 8004e32:	617b      	str	r3, [r7, #20]
 8004e34:	f04f 0200 	mov.w	r2, #0
 8004e38:	f04f 0300 	mov.w	r3, #0
 8004e3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e40:	4659      	mov	r1, fp
 8004e42:	00cb      	lsls	r3, r1, #3
 8004e44:	4651      	mov	r1, sl
 8004e46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e4a:	4651      	mov	r1, sl
 8004e4c:	00ca      	lsls	r2, r1, #3
 8004e4e:	4610      	mov	r0, r2
 8004e50:	4619      	mov	r1, r3
 8004e52:	4603      	mov	r3, r0
 8004e54:	4642      	mov	r2, r8
 8004e56:	189b      	adds	r3, r3, r2
 8004e58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e5c:	464b      	mov	r3, r9
 8004e5e:	460a      	mov	r2, r1
 8004e60:	eb42 0303 	adc.w	r3, r2, r3
 8004e64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e72:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004e74:	f04f 0200 	mov.w	r2, #0
 8004e78:	f04f 0300 	mov.w	r3, #0
 8004e7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004e80:	4649      	mov	r1, r9
 8004e82:	008b      	lsls	r3, r1, #2
 8004e84:	4641      	mov	r1, r8
 8004e86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e8a:	4641      	mov	r1, r8
 8004e8c:	008a      	lsls	r2, r1, #2
 8004e8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004e92:	f7fb fe89 	bl	8000ba8 <__aeabi_uldivmod>
 8004e96:	4602      	mov	r2, r0
 8004e98:	460b      	mov	r3, r1
 8004e9a:	4b39      	ldr	r3, [pc, #228]	; (8004f80 <UART_SetConfig+0x4e4>)
 8004e9c:	fba3 1302 	umull	r1, r3, r3, r2
 8004ea0:	095b      	lsrs	r3, r3, #5
 8004ea2:	2164      	movs	r1, #100	; 0x64
 8004ea4:	fb01 f303 	mul.w	r3, r1, r3
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	011b      	lsls	r3, r3, #4
 8004eac:	3332      	adds	r3, #50	; 0x32
 8004eae:	4a34      	ldr	r2, [pc, #208]	; (8004f80 <UART_SetConfig+0x4e4>)
 8004eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb4:	095b      	lsrs	r3, r3, #5
 8004eb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004eba:	441c      	add	r4, r3
 8004ebc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	673b      	str	r3, [r7, #112]	; 0x70
 8004ec4:	677a      	str	r2, [r7, #116]	; 0x74
 8004ec6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004eca:	4642      	mov	r2, r8
 8004ecc:	464b      	mov	r3, r9
 8004ece:	1891      	adds	r1, r2, r2
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	415b      	adcs	r3, r3
 8004ed4:	60fb      	str	r3, [r7, #12]
 8004ed6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004eda:	4641      	mov	r1, r8
 8004edc:	1851      	adds	r1, r2, r1
 8004ede:	6039      	str	r1, [r7, #0]
 8004ee0:	4649      	mov	r1, r9
 8004ee2:	414b      	adcs	r3, r1
 8004ee4:	607b      	str	r3, [r7, #4]
 8004ee6:	f04f 0200 	mov.w	r2, #0
 8004eea:	f04f 0300 	mov.w	r3, #0
 8004eee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ef2:	4659      	mov	r1, fp
 8004ef4:	00cb      	lsls	r3, r1, #3
 8004ef6:	4651      	mov	r1, sl
 8004ef8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004efc:	4651      	mov	r1, sl
 8004efe:	00ca      	lsls	r2, r1, #3
 8004f00:	4610      	mov	r0, r2
 8004f02:	4619      	mov	r1, r3
 8004f04:	4603      	mov	r3, r0
 8004f06:	4642      	mov	r2, r8
 8004f08:	189b      	adds	r3, r3, r2
 8004f0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f0c:	464b      	mov	r3, r9
 8004f0e:	460a      	mov	r2, r1
 8004f10:	eb42 0303 	adc.w	r3, r2, r3
 8004f14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	663b      	str	r3, [r7, #96]	; 0x60
 8004f20:	667a      	str	r2, [r7, #100]	; 0x64
 8004f22:	f04f 0200 	mov.w	r2, #0
 8004f26:	f04f 0300 	mov.w	r3, #0
 8004f2a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004f2e:	4649      	mov	r1, r9
 8004f30:	008b      	lsls	r3, r1, #2
 8004f32:	4641      	mov	r1, r8
 8004f34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f38:	4641      	mov	r1, r8
 8004f3a:	008a      	lsls	r2, r1, #2
 8004f3c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f40:	f7fb fe32 	bl	8000ba8 <__aeabi_uldivmod>
 8004f44:	4602      	mov	r2, r0
 8004f46:	460b      	mov	r3, r1
 8004f48:	4b0d      	ldr	r3, [pc, #52]	; (8004f80 <UART_SetConfig+0x4e4>)
 8004f4a:	fba3 1302 	umull	r1, r3, r3, r2
 8004f4e:	095b      	lsrs	r3, r3, #5
 8004f50:	2164      	movs	r1, #100	; 0x64
 8004f52:	fb01 f303 	mul.w	r3, r1, r3
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	011b      	lsls	r3, r3, #4
 8004f5a:	3332      	adds	r3, #50	; 0x32
 8004f5c:	4a08      	ldr	r2, [pc, #32]	; (8004f80 <UART_SetConfig+0x4e4>)
 8004f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f62:	095b      	lsrs	r3, r3, #5
 8004f64:	f003 020f 	and.w	r2, r3, #15
 8004f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4422      	add	r2, r4
 8004f70:	609a      	str	r2, [r3, #8]
}
 8004f72:	bf00      	nop
 8004f74:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f7e:	bf00      	nop
 8004f80:	51eb851f 	.word	0x51eb851f

08004f84 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b089      	sub	sp, #36	; 0x24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	fa93 f3a3 	rbit	r3, r3
 8004f9e:	613b      	str	r3, [r7, #16]
  return result;
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	fab3 f383 	clz	r3, r3
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	2103      	movs	r1, #3
 8004fac:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb0:	43db      	mvns	r3, r3
 8004fb2:	401a      	ands	r2, r3
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	fa93 f3a3 	rbit	r3, r3
 8004fbe:	61bb      	str	r3, [r7, #24]
  return result;
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	fab3 f383 	clz	r3, r3
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	6879      	ldr	r1, [r7, #4]
 8004fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd0:	431a      	orrs	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	601a      	str	r2, [r3, #0]
}
 8004fd6:	bf00      	nop
 8004fd8:	3724      	adds	r7, #36	; 0x24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b085      	sub	sp, #20
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	60f8      	str	r0, [r7, #12]
 8004fea:	60b9      	str	r1, [r7, #8]
 8004fec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	685a      	ldr	r2, [r3, #4]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	43db      	mvns	r3, r3
 8004ff6:	401a      	ands	r2, r3
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	6879      	ldr	r1, [r7, #4]
 8004ffc:	fb01 f303 	mul.w	r3, r1, r3
 8005000:	431a      	orrs	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	605a      	str	r2, [r3, #4]
}
 8005006:	bf00      	nop
 8005008:	3714      	adds	r7, #20
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8005012:	b480      	push	{r7}
 8005014:	b089      	sub	sp, #36	; 0x24
 8005016:	af00      	add	r7, sp, #0
 8005018:	60f8      	str	r0, [r7, #12]
 800501a:	60b9      	str	r1, [r7, #8]
 800501c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	689a      	ldr	r2, [r3, #8]
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	fa93 f3a3 	rbit	r3, r3
 800502c:	613b      	str	r3, [r7, #16]
  return result;
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	fab3 f383 	clz	r3, r3
 8005034:	b2db      	uxtb	r3, r3
 8005036:	005b      	lsls	r3, r3, #1
 8005038:	2103      	movs	r1, #3
 800503a:	fa01 f303 	lsl.w	r3, r1, r3
 800503e:	43db      	mvns	r3, r3
 8005040:	401a      	ands	r2, r3
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	fa93 f3a3 	rbit	r3, r3
 800504c:	61bb      	str	r3, [r7, #24]
  return result;
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	fab3 f383 	clz	r3, r3
 8005054:	b2db      	uxtb	r3, r3
 8005056:	005b      	lsls	r3, r3, #1
 8005058:	6879      	ldr	r1, [r7, #4]
 800505a:	fa01 f303 	lsl.w	r3, r1, r3
 800505e:	431a      	orrs	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8005064:	bf00      	nop
 8005066:	3724      	adds	r7, #36	; 0x24
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8005070:	b480      	push	{r7}
 8005072:	b089      	sub	sp, #36	; 0x24
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	68da      	ldr	r2, [r3, #12]
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	fa93 f3a3 	rbit	r3, r3
 800508a:	613b      	str	r3, [r7, #16]
  return result;
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	fab3 f383 	clz	r3, r3
 8005092:	b2db      	uxtb	r3, r3
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	2103      	movs	r1, #3
 8005098:	fa01 f303 	lsl.w	r3, r1, r3
 800509c:	43db      	mvns	r3, r3
 800509e:	401a      	ands	r2, r3
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	fa93 f3a3 	rbit	r3, r3
 80050aa:	61bb      	str	r3, [r7, #24]
  return result;
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	fab3 f383 	clz	r3, r3
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	6879      	ldr	r1, [r7, #4]
 80050b8:	fa01 f303 	lsl.w	r3, r1, r3
 80050bc:	431a      	orrs	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	60da      	str	r2, [r3, #12]
}
 80050c2:	bf00      	nop
 80050c4:	3724      	adds	r7, #36	; 0x24
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b089      	sub	sp, #36	; 0x24
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	60f8      	str	r0, [r7, #12]
 80050d6:	60b9      	str	r1, [r7, #8]
 80050d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6a1a      	ldr	r2, [r3, #32]
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	fa93 f3a3 	rbit	r3, r3
 80050e8:	613b      	str	r3, [r7, #16]
  return result;
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	fab3 f383 	clz	r3, r3
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	210f      	movs	r1, #15
 80050f6:	fa01 f303 	lsl.w	r3, r1, r3
 80050fa:	43db      	mvns	r3, r3
 80050fc:	401a      	ands	r2, r3
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	fa93 f3a3 	rbit	r3, r3
 8005108:	61bb      	str	r3, [r7, #24]
  return result;
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	fab3 f383 	clz	r3, r3
 8005110:	b2db      	uxtb	r3, r3
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	6879      	ldr	r1, [r7, #4]
 8005116:	fa01 f303 	lsl.w	r3, r1, r3
 800511a:	431a      	orrs	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8005120:	bf00      	nop
 8005122:	3724      	adds	r7, #36	; 0x24
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800512c:	b480      	push	{r7}
 800512e:	b089      	sub	sp, #36	; 0x24
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	0a1b      	lsrs	r3, r3, #8
 8005140:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	fa93 f3a3 	rbit	r3, r3
 8005148:	613b      	str	r3, [r7, #16]
  return result;
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	fab3 f383 	clz	r3, r3
 8005150:	b2db      	uxtb	r3, r3
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	210f      	movs	r1, #15
 8005156:	fa01 f303 	lsl.w	r3, r1, r3
 800515a:	43db      	mvns	r3, r3
 800515c:	401a      	ands	r2, r3
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	0a1b      	lsrs	r3, r3, #8
 8005162:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	fa93 f3a3 	rbit	r3, r3
 800516a:	61bb      	str	r3, [r7, #24]
  return result;
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	fab3 f383 	clz	r3, r3
 8005172:	b2db      	uxtb	r3, r3
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	6879      	ldr	r1, [r7, #4]
 8005178:	fa01 f303 	lsl.w	r3, r1, r3
 800517c:	431a      	orrs	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8005182:	bf00      	nop
 8005184:	3724      	adds	r7, #36	; 0x24
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr

0800518e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b088      	sub	sp, #32
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
 8005196:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8005198:	2300      	movs	r3, #0
 800519a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800519c:	2300      	movs	r3, #0
 800519e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	fa93 f3a3 	rbit	r3, r3
 80051ac:	613b      	str	r3, [r7, #16]
  return result;
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	fab3 f383 	clz	r3, r3
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80051b8:	e050      	b.n	800525c <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	2101      	movs	r1, #1
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	fa01 f303 	lsl.w	r3, r1, r3
 80051c6:	4013      	ands	r3, r2
 80051c8:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d042      	beq.n	8005256 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d003      	beq.n	80051e0 <LL_GPIO_Init+0x52>
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d10d      	bne.n	80051fc <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	461a      	mov	r2, r3
 80051e6:	69b9      	ldr	r1, [r7, #24]
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f7ff ff12 	bl	8005012 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	461a      	mov	r2, r3
 80051f4:	69b9      	ldr	r1, [r7, #24]
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f7ff fef3 	bl	8004fe2 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	461a      	mov	r2, r3
 8005202:	69b9      	ldr	r1, [r7, #24]
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f7ff ff33 	bl	8005070 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	2b02      	cmp	r3, #2
 8005210:	d11a      	bne.n	8005248 <LL_GPIO_Init+0xba>
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	fa93 f3a3 	rbit	r3, r3
 800521c:	60bb      	str	r3, [r7, #8]
  return result;
 800521e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8005220:	fab3 f383 	clz	r3, r3
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b07      	cmp	r3, #7
 8005228:	d807      	bhi.n	800523a <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	461a      	mov	r2, r3
 8005230:	69b9      	ldr	r1, [r7, #24]
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7ff ff4b 	bl	80050ce <LL_GPIO_SetAFPin_0_7>
 8005238:	e006      	b.n	8005248 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	461a      	mov	r2, r3
 8005240:	69b9      	ldr	r1, [r7, #24]
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7ff ff72 	bl	800512c <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	461a      	mov	r2, r3
 800524e:	69b9      	ldr	r1, [r7, #24]
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f7ff fe97 	bl	8004f84 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	3301      	adds	r3, #1
 800525a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	fa22 f303 	lsr.w	r3, r2, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1a7      	bne.n	80051ba <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3720      	adds	r7, #32
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8005274:	b480      	push	{r7}
 8005276:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005278:	4b04      	ldr	r3, [pc, #16]	; (800528c <LL_RCC_GetSysClkSource+0x18>)
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f003 030c 	and.w	r3, r3, #12
}
 8005280:	4618      	mov	r0, r3
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	40023800 	.word	0x40023800

08005290 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8005290:	b480      	push	{r7}
 8005292:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005294:	4b04      	ldr	r3, [pc, #16]	; (80052a8 <LL_RCC_GetAHBPrescaler+0x18>)
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800529c:	4618      	mov	r0, r3
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	40023800 	.word	0x40023800

080052ac <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80052b0:	4b04      	ldr	r3, [pc, #16]	; (80052c4 <LL_RCC_GetAPB1Prescaler+0x18>)
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	40023800 	.word	0x40023800

080052c8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80052c8:	b480      	push	{r7}
 80052ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80052cc:	4b04      	ldr	r3, [pc, #16]	; (80052e0 <LL_RCC_GetAPB2Prescaler+0x18>)
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	40023800 	.word	0x40023800

080052e4 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80052e4:	b480      	push	{r7}
 80052e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80052e8:	4b04      	ldr	r3, [pc, #16]	; (80052fc <LL_RCC_PLL_GetMainSource+0x18>)
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	40023800 	.word	0x40023800

08005300 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005300:	b480      	push	{r7}
 8005302:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005304:	4b04      	ldr	r3, [pc, #16]	; (8005318 <LL_RCC_PLL_GetN+0x18>)
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	099b      	lsrs	r3, r3, #6
 800530a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800530e:	4618      	mov	r0, r3
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr
 8005318:	40023800 	.word	0x40023800

0800531c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800531c:	b480      	push	{r7}
 800531e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8005320:	4b04      	ldr	r3, [pc, #16]	; (8005334 <LL_RCC_PLL_GetP+0x18>)
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8005328:	4618      	mov	r0, r3
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	40023800 	.word	0x40023800

08005338 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005338:	b480      	push	{r7}
 800533a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800533c:	4b04      	ldr	r3, [pc, #16]	; (8005350 <LL_RCC_PLL_GetDivider+0x18>)
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8005344:	4618      	mov	r0, r3
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	40023800 	.word	0x40023800

08005354 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800535c:	f000 f820 	bl	80053a0 <RCC_GetSystemClockFreq>
 8005360:	4602      	mov	r2, r0
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4618      	mov	r0, r3
 800536c:	f000 f840 	bl	80053f0 <RCC_GetHCLKClockFreq>
 8005370:	4602      	mov	r2, r0
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	4618      	mov	r0, r3
 800537c:	f000 f84e 	bl	800541c <RCC_GetPCLK1ClockFreq>
 8005380:	4602      	mov	r2, r0
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	4618      	mov	r0, r3
 800538c:	f000 f85a 	bl	8005444 <RCC_GetPCLK2ClockFreq>
 8005390:	4602      	mov	r2, r0
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	60da      	str	r2, [r3, #12]
}
 8005396:	bf00      	nop
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
	...

080053a0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80053a6:	2300      	movs	r3, #0
 80053a8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80053aa:	f7ff ff63 	bl	8005274 <LL_RCC_GetSysClkSource>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b08      	cmp	r3, #8
 80053b2:	d00c      	beq.n	80053ce <RCC_GetSystemClockFreq+0x2e>
 80053b4:	2b08      	cmp	r3, #8
 80053b6:	d80f      	bhi.n	80053d8 <RCC_GetSystemClockFreq+0x38>
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d002      	beq.n	80053c2 <RCC_GetSystemClockFreq+0x22>
 80053bc:	2b04      	cmp	r3, #4
 80053be:	d003      	beq.n	80053c8 <RCC_GetSystemClockFreq+0x28>
 80053c0:	e00a      	b.n	80053d8 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80053c2:	4b09      	ldr	r3, [pc, #36]	; (80053e8 <RCC_GetSystemClockFreq+0x48>)
 80053c4:	607b      	str	r3, [r7, #4]
      break;
 80053c6:	e00a      	b.n	80053de <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80053c8:	4b08      	ldr	r3, [pc, #32]	; (80053ec <RCC_GetSystemClockFreq+0x4c>)
 80053ca:	607b      	str	r3, [r7, #4]
      break;
 80053cc:	e007      	b.n	80053de <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80053ce:	2008      	movs	r0, #8
 80053d0:	f000 f84c 	bl	800546c <RCC_PLL_GetFreqDomain_SYS>
 80053d4:	6078      	str	r0, [r7, #4]
      break;
 80053d6:	e002      	b.n	80053de <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80053d8:	4b03      	ldr	r3, [pc, #12]	; (80053e8 <RCC_GetSystemClockFreq+0x48>)
 80053da:	607b      	str	r3, [r7, #4]
      break;
 80053dc:	bf00      	nop
  }

  return frequency;
 80053de:	687b      	ldr	r3, [r7, #4]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3708      	adds	r7, #8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	00f42400 	.word	0x00f42400
 80053ec:	007a1200 	.word	0x007a1200

080053f0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80053f8:	f7ff ff4a 	bl	8005290 <LL_RCC_GetAHBPrescaler>
 80053fc:	4603      	mov	r3, r0
 80053fe:	091b      	lsrs	r3, r3, #4
 8005400:	f003 030f 	and.w	r3, r3, #15
 8005404:	4a04      	ldr	r2, [pc, #16]	; (8005418 <RCC_GetHCLKClockFreq+0x28>)
 8005406:	5cd3      	ldrb	r3, [r2, r3]
 8005408:	461a      	mov	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	40d3      	lsrs	r3, r2
}
 800540e:	4618      	mov	r0, r3
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	08010454 	.word	0x08010454

0800541c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005424:	f7ff ff42 	bl	80052ac <LL_RCC_GetAPB1Prescaler>
 8005428:	4603      	mov	r3, r0
 800542a:	0a9b      	lsrs	r3, r3, #10
 800542c:	4a04      	ldr	r2, [pc, #16]	; (8005440 <RCC_GetPCLK1ClockFreq+0x24>)
 800542e:	5cd3      	ldrb	r3, [r2, r3]
 8005430:	461a      	mov	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	40d3      	lsrs	r3, r2
}
 8005436:	4618      	mov	r0, r3
 8005438:	3708      	adds	r7, #8
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	08010464 	.word	0x08010464

08005444 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800544c:	f7ff ff3c 	bl	80052c8 <LL_RCC_GetAPB2Prescaler>
 8005450:	4603      	mov	r3, r0
 8005452:	0b5b      	lsrs	r3, r3, #13
 8005454:	4a04      	ldr	r2, [pc, #16]	; (8005468 <RCC_GetPCLK2ClockFreq+0x24>)
 8005456:	5cd3      	ldrb	r3, [r2, r3]
 8005458:	461a      	mov	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	40d3      	lsrs	r3, r2
}
 800545e:	4618      	mov	r0, r3
 8005460:	3708      	adds	r7, #8
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	08010464 	.word	0x08010464

0800546c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 800546c:	b590      	push	{r4, r7, lr}
 800546e:	b087      	sub	sp, #28
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8005474:	2300      	movs	r3, #0
 8005476:	617b      	str	r3, [r7, #20]
 8005478:	2300      	movs	r3, #0
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	2300      	movs	r3, #0
 800547e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005480:	f7ff ff30 	bl	80052e4 <LL_RCC_PLL_GetMainSource>
 8005484:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d004      	beq.n	8005496 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005492:	d003      	beq.n	800549c <RCC_PLL_GetFreqDomain_SYS+0x30>
 8005494:	e005      	b.n	80054a2 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005496:	4b12      	ldr	r3, [pc, #72]	; (80054e0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8005498:	617b      	str	r3, [r7, #20]
      break;
 800549a:	e005      	b.n	80054a8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800549c:	4b11      	ldr	r3, [pc, #68]	; (80054e4 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800549e:	617b      	str	r3, [r7, #20]
      break;
 80054a0:	e002      	b.n	80054a8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80054a2:	4b0f      	ldr	r3, [pc, #60]	; (80054e0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80054a4:	617b      	str	r3, [r7, #20]
      break;
 80054a6:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b08      	cmp	r3, #8
 80054ac:	d113      	bne.n	80054d6 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80054ae:	f7ff ff43 	bl	8005338 <LL_RCC_PLL_GetDivider>
 80054b2:	4602      	mov	r2, r0
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	fbb3 f4f2 	udiv	r4, r3, r2
 80054ba:	f7ff ff21 	bl	8005300 <LL_RCC_PLL_GetN>
 80054be:	4603      	mov	r3, r0
 80054c0:	fb03 f404 	mul.w	r4, r3, r4
 80054c4:	f7ff ff2a 	bl	800531c <LL_RCC_PLL_GetP>
 80054c8:	4603      	mov	r3, r0
 80054ca:	0c1b      	lsrs	r3, r3, #16
 80054cc:	3301      	adds	r3, #1
 80054ce:	005b      	lsls	r3, r3, #1
 80054d0:	fbb4 f3f3 	udiv	r3, r4, r3
 80054d4:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80054d6:	693b      	ldr	r3, [r7, #16]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	371c      	adds	r7, #28
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd90      	pop	{r4, r7, pc}
 80054e0:	00f42400 	.word	0x00f42400
 80054e4:	007a1200 	.word	0x007a1200

080054e8 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f8:	2b40      	cmp	r3, #64	; 0x40
 80054fa:	d101      	bne.n	8005500 <LL_SPI_IsEnabled+0x18>
 80054fc:	2301      	movs	r3, #1
 80054fe:	e000      	b.n	8005502 <LL_SPI_IsEnabled+0x1a>
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	370c      	adds	r7, #12
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 800550e:	b480      	push	{r7}
 8005510:	b083      	sub	sp, #12
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
 8005516:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	b29b      	uxth	r3, r3
 800551c:	461a      	mov	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	611a      	str	r2, [r3, #16]
}
 8005522:	bf00      	nop
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b084      	sub	sp, #16
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
 8005536:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f7ff ffd3 	bl	80054e8 <LL_SPI_IsEnabled>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d139      	bne.n	80055bc <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005550:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8005554:	683a      	ldr	r2, [r7, #0]
 8005556:	6811      	ldr	r1, [r2, #0]
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	6852      	ldr	r2, [r2, #4]
 800555c:	4311      	orrs	r1, r2
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	6892      	ldr	r2, [r2, #8]
 8005562:	4311      	orrs	r1, r2
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	68d2      	ldr	r2, [r2, #12]
 8005568:	4311      	orrs	r1, r2
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	6912      	ldr	r2, [r2, #16]
 800556e:	4311      	orrs	r1, r2
 8005570:	683a      	ldr	r2, [r7, #0]
 8005572:	6952      	ldr	r2, [r2, #20]
 8005574:	4311      	orrs	r1, r2
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	6992      	ldr	r2, [r2, #24]
 800557a:	4311      	orrs	r1, r2
 800557c:	683a      	ldr	r2, [r7, #0]
 800557e:	69d2      	ldr	r2, [r2, #28]
 8005580:	4311      	orrs	r1, r2
 8005582:	683a      	ldr	r2, [r7, #0]
 8005584:	6a12      	ldr	r2, [r2, #32]
 8005586:	430a      	orrs	r2, r1
 8005588:	431a      	orrs	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f023 0204 	bic.w	r2, r3, #4
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	0c1b      	lsrs	r3, r3, #16
 800559c:	431a      	orrs	r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055aa:	d105      	bne.n	80055b8 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b0:	4619      	mov	r1, r3
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7ff ffab 	bl	800550e <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80055b8:	2300      	movs	r3, #0
 80055ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	69db      	ldr	r3, [r3, #28]
 80055c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	61da      	str	r2, [r3, #28]
  return status;
 80055c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b083      	sub	sp, #12
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
 80055da:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80055e2:	bf00      	nop
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80055ee:	b480      	push	{r7}
 80055f0:	b083      	sub	sp, #12
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
 80055f6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	683a      	ldr	r2, [r7, #0]
 80055fc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80055fe:	bf00      	nop
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255 or 65535 for advanced timer.
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 800560a:	b480      	push	{r7}
 800560c:	b083      	sub	sp, #12
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
 8005612:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	631a      	str	r2, [r3, #48]	; 0x30
}
 800561a:	bf00      	nop
 800561c:	370c      	adds	r7, #12
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr

08005626 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8005626:	b480      	push	{r7}
 8005628:	b083      	sub	sp, #12
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
 800562e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005636:	bf00      	nop
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
 800564a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005652:	bf00      	nop
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800565e:	b480      	push	{r7}
 8005660:	b083      	sub	sp, #12
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
 8005666:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	683a      	ldr	r2, [r7, #0]
 800566c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800566e:	bf00      	nop
 8005670:	370c      	adds	r7, #12
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800567a:	b480      	push	{r7}
 800567c:	b083      	sub	sp, #12
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
 8005682:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	641a      	str	r2, [r3, #64]	; 0x40
}
 800568a:	bf00      	nop
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8005696:	b480      	push	{r7}
 8005698:	b083      	sub	sp, #12
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	f043 0201 	orr.w	r2, r3, #1
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	615a      	str	r2, [r3, #20]
}
 80056aa:	bf00      	nop
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
	...

080056b8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a3d      	ldr	r2, [pc, #244]	; (80057c0 <LL_TIM_Init+0x108>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d013      	beq.n	80056f8 <LL_TIM_Init+0x40>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056d6:	d00f      	beq.n	80056f8 <LL_TIM_Init+0x40>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a3a      	ldr	r2, [pc, #232]	; (80057c4 <LL_TIM_Init+0x10c>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d00b      	beq.n	80056f8 <LL_TIM_Init+0x40>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a39      	ldr	r2, [pc, #228]	; (80057c8 <LL_TIM_Init+0x110>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d007      	beq.n	80056f8 <LL_TIM_Init+0x40>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a38      	ldr	r2, [pc, #224]	; (80057cc <LL_TIM_Init+0x114>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d003      	beq.n	80056f8 <LL_TIM_Init+0x40>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a37      	ldr	r2, [pc, #220]	; (80057d0 <LL_TIM_Init+0x118>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d106      	bne.n	8005706 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	4313      	orrs	r3, r2
 8005704:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a2d      	ldr	r2, [pc, #180]	; (80057c0 <LL_TIM_Init+0x108>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d02b      	beq.n	8005766 <LL_TIM_Init+0xae>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005714:	d027      	beq.n	8005766 <LL_TIM_Init+0xae>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a2a      	ldr	r2, [pc, #168]	; (80057c4 <LL_TIM_Init+0x10c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d023      	beq.n	8005766 <LL_TIM_Init+0xae>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a29      	ldr	r2, [pc, #164]	; (80057c8 <LL_TIM_Init+0x110>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d01f      	beq.n	8005766 <LL_TIM_Init+0xae>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a28      	ldr	r2, [pc, #160]	; (80057cc <LL_TIM_Init+0x114>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d01b      	beq.n	8005766 <LL_TIM_Init+0xae>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a27      	ldr	r2, [pc, #156]	; (80057d0 <LL_TIM_Init+0x118>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d017      	beq.n	8005766 <LL_TIM_Init+0xae>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a26      	ldr	r2, [pc, #152]	; (80057d4 <LL_TIM_Init+0x11c>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d013      	beq.n	8005766 <LL_TIM_Init+0xae>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a25      	ldr	r2, [pc, #148]	; (80057d8 <LL_TIM_Init+0x120>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d00f      	beq.n	8005766 <LL_TIM_Init+0xae>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a24      	ldr	r2, [pc, #144]	; (80057dc <LL_TIM_Init+0x124>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d00b      	beq.n	8005766 <LL_TIM_Init+0xae>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a23      	ldr	r2, [pc, #140]	; (80057e0 <LL_TIM_Init+0x128>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d007      	beq.n	8005766 <LL_TIM_Init+0xae>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a22      	ldr	r2, [pc, #136]	; (80057e4 <LL_TIM_Init+0x12c>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d003      	beq.n	8005766 <LL_TIM_Init+0xae>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a21      	ldr	r2, [pc, #132]	; (80057e8 <LL_TIM_Init+0x130>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d106      	bne.n	8005774 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	4313      	orrs	r3, r2
 8005772:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	4619      	mov	r1, r3
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f7ff ff34 	bl	80055ee <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	881b      	ldrh	r3, [r3, #0]
 800578a:	4619      	mov	r1, r3
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f7ff ff20 	bl	80055d2 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a0a      	ldr	r2, [pc, #40]	; (80057c0 <LL_TIM_Init+0x108>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d003      	beq.n	80057a2 <LL_TIM_Init+0xea>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a0c      	ldr	r2, [pc, #48]	; (80057d0 <LL_TIM_Init+0x118>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d105      	bne.n	80057ae <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	4619      	mov	r1, r3
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f7ff ff2e 	bl	800560a <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7ff ff71 	bl	8005696 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	40010000 	.word	0x40010000
 80057c4:	40000400 	.word	0x40000400
 80057c8:	40000800 	.word	0x40000800
 80057cc:	40000c00 	.word	0x40000c00
 80057d0:	40010400 	.word	0x40010400
 80057d4:	40014000 	.word	0x40014000
 80057d8:	40014400 	.word	0x40014400
 80057dc:	40014800 	.word	0x40014800
 80057e0:	40001800 	.word	0x40001800
 80057e4:	40001c00 	.word	0x40001c00
 80057e8:	40002000 	.word	0x40002000

080057ec <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005802:	d027      	beq.n	8005854 <LL_TIM_OC_Init+0x68>
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800580a:	d82a      	bhi.n	8005862 <LL_TIM_OC_Init+0x76>
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005812:	d018      	beq.n	8005846 <LL_TIM_OC_Init+0x5a>
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800581a:	d822      	bhi.n	8005862 <LL_TIM_OC_Init+0x76>
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d003      	beq.n	800582a <LL_TIM_OC_Init+0x3e>
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	2b10      	cmp	r3, #16
 8005826:	d007      	beq.n	8005838 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8005828:	e01b      	b.n	8005862 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800582a:	6879      	ldr	r1, [r7, #4]
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f000 f81f 	bl	8005870 <OC1Config>
 8005832:	4603      	mov	r3, r0
 8005834:	75fb      	strb	r3, [r7, #23]
      break;
 8005836:	e015      	b.n	8005864 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8005838:	6879      	ldr	r1, [r7, #4]
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f000 f884 	bl	8005948 <OC2Config>
 8005840:	4603      	mov	r3, r0
 8005842:	75fb      	strb	r3, [r7, #23]
      break;
 8005844:	e00e      	b.n	8005864 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8005846:	6879      	ldr	r1, [r7, #4]
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 f8ed 	bl	8005a28 <OC3Config>
 800584e:	4603      	mov	r3, r0
 8005850:	75fb      	strb	r3, [r7, #23]
      break;
 8005852:	e007      	b.n	8005864 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8005854:	6879      	ldr	r1, [r7, #4]
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f000 f956 	bl	8005b08 <OC4Config>
 800585c:	4603      	mov	r3, r0
 800585e:	75fb      	strb	r3, [r7, #23]
      break;
 8005860:	e000      	b.n	8005864 <LL_TIM_OC_Init+0x78>
      break;
 8005862:	bf00      	nop
  }

  return result;
 8005864:	7dfb      	ldrb	r3, [r7, #23]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3718      	adds	r7, #24
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
	...

08005870 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b086      	sub	sp, #24
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	f023 0201 	bic.w	r2, r3, #1
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f023 0303 	bic.w	r3, r3, #3
 800589e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f023 0202 	bic.w	r2, r3, #2
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	f023 0201 	bic.w	r2, r3, #1
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a1c      	ldr	r2, [pc, #112]	; (8005940 <OC1Config+0xd0>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d003      	beq.n	80058da <OC1Config+0x6a>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a1b      	ldr	r2, [pc, #108]	; (8005944 <OC1Config+0xd4>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d11e      	bne.n	8005918 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f023 0208 	bic.w	r2, r3, #8
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	4313      	orrs	r3, r2
 80058e8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f023 0204 	bic.w	r2, r3, #4
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	4313      	orrs	r3, r2
 80058f8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	699b      	ldr	r3, [r3, #24]
 8005904:	4313      	orrs	r3, r2
 8005906:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	005b      	lsls	r3, r3, #1
 8005914:	4313      	orrs	r3, r2
 8005916:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	4619      	mov	r1, r3
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7ff fe7b 	bl	8005626 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3718      	adds	r7, #24
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	40010000 	.word	0x40010000
 8005944:	40010400 	.word	0x40010400

08005948 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	f023 0210 	bic.w	r2, r3, #16
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005976:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	021b      	lsls	r3, r3, #8
 8005984:	4313      	orrs	r3, r2
 8005986:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	f023 0220 	bic.w	r2, r3, #32
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	011b      	lsls	r3, r3, #4
 8005994:	4313      	orrs	r3, r2
 8005996:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f023 0210 	bic.w	r2, r3, #16
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	011b      	lsls	r3, r3, #4
 80059a4:	4313      	orrs	r3, r2
 80059a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a1d      	ldr	r2, [pc, #116]	; (8005a20 <OC2Config+0xd8>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d003      	beq.n	80059b8 <OC2Config+0x70>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a1c      	ldr	r2, [pc, #112]	; (8005a24 <OC2Config+0xdc>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d11f      	bne.n	80059f8 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	019b      	lsls	r3, r3, #6
 80059c4:	4313      	orrs	r3, r2
 80059c6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	019b      	lsls	r3, r3, #6
 80059d4:	4313      	orrs	r3, r2
 80059d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	4313      	orrs	r3, r2
 80059e6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	00db      	lsls	r3, r3, #3
 80059f4:	4313      	orrs	r3, r2
 80059f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	4619      	mov	r1, r3
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7ff fe19 	bl	8005642 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3718      	adds	r7, #24
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	40010000 	.word	0x40010000
 8005a24:	40010400 	.word	0x40010400

08005a28 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f023 0303 	bic.w	r3, r3, #3
 8005a56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	021b      	lsls	r3, r3, #8
 8005a72:	4313      	orrs	r3, r2
 8005a74:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	021b      	lsls	r3, r3, #8
 8005a82:	4313      	orrs	r3, r2
 8005a84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a1d      	ldr	r2, [pc, #116]	; (8005b00 <OC3Config+0xd8>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d003      	beq.n	8005a96 <OC3Config+0x6e>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a1c      	ldr	r2, [pc, #112]	; (8005b04 <OC3Config+0xdc>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d11f      	bne.n	8005ad6 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	029b      	lsls	r3, r3, #10
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	029b      	lsls	r3, r3, #10
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	011b      	lsls	r3, r3, #4
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	69db      	ldr	r3, [r3, #28]
 8005ad0:	015b      	lsls	r3, r3, #5
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f7ff fdb8 	bl	800565e <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3718      	adds	r7, #24
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	40010000 	.word	0x40010000
 8005b04:	40010400 	.word	0x40010400

08005b08 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	021b      	lsls	r3, r3, #8
 8005b44:	4313      	orrs	r3, r2
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	031b      	lsls	r3, r3, #12
 8005b54:	4313      	orrs	r3, r2
 8005b56:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	031b      	lsls	r3, r3, #12
 8005b64:	4313      	orrs	r3, r2
 8005b66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a11      	ldr	r2, [pc, #68]	; (8005bb0 <OC4Config+0xa8>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d003      	beq.n	8005b78 <OC4Config+0x70>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a10      	ldr	r2, [pc, #64]	; (8005bb4 <OC4Config+0xac>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d107      	bne.n	8005b88 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	019b      	lsls	r3, r3, #6
 8005b84:	4313      	orrs	r3, r2
 8005b86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	4619      	mov	r1, r3
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7ff fd6d 	bl	800567a <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3718      	adds	r7, #24
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	40010000 	.word	0x40010000
 8005bb4:	40010400 	.word	0x40010400

08005bb8 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bcc:	bf0c      	ite	eq
 8005bce:	2301      	moveq	r3, #1
 8005bd0:	2300      	movne	r3, #0
 8005bd2:	b2db      	uxtb	r3, r3
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	431a      	orrs	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	611a      	str	r2, [r3, #16]
}
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b083      	sub	sp, #12
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
 8005c0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	431a      	orrs	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	615a      	str	r2, [r3, #20]
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8005c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c30:	b0c0      	sub	sp, #256	; 0x100
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005c38:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8005c3c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8005c40:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c4c:	f040 810c 	bne.w	8005e68 <LL_USART_SetBaudRate+0x23c>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8005c50:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c54:	2200      	movs	r2, #0
 8005c56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c5a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005c5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005c62:	4622      	mov	r2, r4
 8005c64:	462b      	mov	r3, r5
 8005c66:	1891      	adds	r1, r2, r2
 8005c68:	6639      	str	r1, [r7, #96]	; 0x60
 8005c6a:	415b      	adcs	r3, r3
 8005c6c:	667b      	str	r3, [r7, #100]	; 0x64
 8005c6e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005c72:	4621      	mov	r1, r4
 8005c74:	eb12 0801 	adds.w	r8, r2, r1
 8005c78:	4629      	mov	r1, r5
 8005c7a:	eb43 0901 	adc.w	r9, r3, r1
 8005c7e:	f04f 0200 	mov.w	r2, #0
 8005c82:	f04f 0300 	mov.w	r3, #0
 8005c86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c92:	4690      	mov	r8, r2
 8005c94:	4699      	mov	r9, r3
 8005c96:	4623      	mov	r3, r4
 8005c98:	eb18 0303 	adds.w	r3, r8, r3
 8005c9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ca0:	462b      	mov	r3, r5
 8005ca2:	eb49 0303 	adc.w	r3, r9, r3
 8005ca6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005caa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005cae:	2200      	movs	r2, #0
 8005cb0:	469a      	mov	sl, r3
 8005cb2:	4693      	mov	fp, r2
 8005cb4:	eb1a 030a 	adds.w	r3, sl, sl
 8005cb8:	65bb      	str	r3, [r7, #88]	; 0x58
 8005cba:	eb4b 030b 	adc.w	r3, fp, fp
 8005cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cc0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005cc4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005cc8:	f7fa ff6e 	bl	8000ba8 <__aeabi_uldivmod>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	460b      	mov	r3, r1
 8005cd0:	4b64      	ldr	r3, [pc, #400]	; (8005e64 <LL_USART_SetBaudRate+0x238>)
 8005cd2:	fba3 2302 	umull	r2, r3, r3, r2
 8005cd6:	095b      	lsrs	r3, r3, #5
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	011b      	lsls	r3, r3, #4
 8005cdc:	b29c      	uxth	r4, r3
 8005cde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ce8:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005cec:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8005cf0:	4642      	mov	r2, r8
 8005cf2:	464b      	mov	r3, r9
 8005cf4:	1891      	adds	r1, r2, r2
 8005cf6:	6539      	str	r1, [r7, #80]	; 0x50
 8005cf8:	415b      	adcs	r3, r3
 8005cfa:	657b      	str	r3, [r7, #84]	; 0x54
 8005cfc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005d00:	4641      	mov	r1, r8
 8005d02:	1851      	adds	r1, r2, r1
 8005d04:	64b9      	str	r1, [r7, #72]	; 0x48
 8005d06:	4649      	mov	r1, r9
 8005d08:	414b      	adcs	r3, r1
 8005d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d0c:	f04f 0200 	mov.w	r2, #0
 8005d10:	f04f 0300 	mov.w	r3, #0
 8005d14:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8005d18:	4659      	mov	r1, fp
 8005d1a:	00cb      	lsls	r3, r1, #3
 8005d1c:	4651      	mov	r1, sl
 8005d1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d22:	4651      	mov	r1, sl
 8005d24:	00ca      	lsls	r2, r1, #3
 8005d26:	4610      	mov	r0, r2
 8005d28:	4619      	mov	r1, r3
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	4642      	mov	r2, r8
 8005d2e:	189b      	adds	r3, r3, r2
 8005d30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d34:	464b      	mov	r3, r9
 8005d36:	460a      	mov	r2, r1
 8005d38:	eb42 0303 	adc.w	r3, r2, r3
 8005d3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005d40:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005d44:	2200      	movs	r2, #0
 8005d46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d4a:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8005d4e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005d52:	460b      	mov	r3, r1
 8005d54:	18db      	adds	r3, r3, r3
 8005d56:	643b      	str	r3, [r7, #64]	; 0x40
 8005d58:	4613      	mov	r3, r2
 8005d5a:	eb42 0303 	adc.w	r3, r2, r3
 8005d5e:	647b      	str	r3, [r7, #68]	; 0x44
 8005d60:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005d64:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005d68:	f7fa ff1e 	bl	8000ba8 <__aeabi_uldivmod>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	460b      	mov	r3, r1
 8005d70:	4611      	mov	r1, r2
 8005d72:	4b3c      	ldr	r3, [pc, #240]	; (8005e64 <LL_USART_SetBaudRate+0x238>)
 8005d74:	fba3 2301 	umull	r2, r3, r3, r1
 8005d78:	095b      	lsrs	r3, r3, #5
 8005d7a:	2264      	movs	r2, #100	; 0x64
 8005d7c:	fb02 f303 	mul.w	r3, r2, r3
 8005d80:	1acb      	subs	r3, r1, r3
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005d88:	4b36      	ldr	r3, [pc, #216]	; (8005e64 <LL_USART_SetBaudRate+0x238>)
 8005d8a:	fba3 2302 	umull	r2, r3, r3, r2
 8005d8e:	095b      	lsrs	r3, r3, #5
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	005b      	lsls	r3, r3, #1
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	4423      	add	r3, r4
 8005d9e:	b29c      	uxth	r4, r3
 8005da0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005da4:	2200      	movs	r2, #0
 8005da6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005daa:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005dae:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8005db2:	4642      	mov	r2, r8
 8005db4:	464b      	mov	r3, r9
 8005db6:	1891      	adds	r1, r2, r2
 8005db8:	63b9      	str	r1, [r7, #56]	; 0x38
 8005dba:	415b      	adcs	r3, r3
 8005dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dbe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005dc2:	4641      	mov	r1, r8
 8005dc4:	1851      	adds	r1, r2, r1
 8005dc6:	6339      	str	r1, [r7, #48]	; 0x30
 8005dc8:	4649      	mov	r1, r9
 8005dca:	414b      	adcs	r3, r1
 8005dcc:	637b      	str	r3, [r7, #52]	; 0x34
 8005dce:	f04f 0200 	mov.w	r2, #0
 8005dd2:	f04f 0300 	mov.w	r3, #0
 8005dd6:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005dda:	4659      	mov	r1, fp
 8005ddc:	00cb      	lsls	r3, r1, #3
 8005dde:	4651      	mov	r1, sl
 8005de0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005de4:	4651      	mov	r1, sl
 8005de6:	00ca      	lsls	r2, r1, #3
 8005de8:	4610      	mov	r0, r2
 8005dea:	4619      	mov	r1, r3
 8005dec:	4603      	mov	r3, r0
 8005dee:	4642      	mov	r2, r8
 8005df0:	189b      	adds	r3, r3, r2
 8005df2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005df6:	464b      	mov	r3, r9
 8005df8:	460a      	mov	r2, r1
 8005dfa:	eb42 0303 	adc.w	r3, r2, r3
 8005dfe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005e02:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005e06:	2200      	movs	r2, #0
 8005e08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e0c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8005e10:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005e14:	460b      	mov	r3, r1
 8005e16:	18db      	adds	r3, r3, r3
 8005e18:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	eb42 0303 	adc.w	r3, r2, r3
 8005e20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e26:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8005e2a:	f7fa febd 	bl	8000ba8 <__aeabi_uldivmod>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	460b      	mov	r3, r1
 8005e32:	4b0c      	ldr	r3, [pc, #48]	; (8005e64 <LL_USART_SetBaudRate+0x238>)
 8005e34:	fba3 1302 	umull	r1, r3, r3, r2
 8005e38:	095b      	lsrs	r3, r3, #5
 8005e3a:	2164      	movs	r1, #100	; 0x64
 8005e3c:	fb01 f303 	mul.w	r3, r1, r3
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	00db      	lsls	r3, r3, #3
 8005e44:	3332      	adds	r3, #50	; 0x32
 8005e46:	4a07      	ldr	r2, [pc, #28]	; (8005e64 <LL_USART_SetBaudRate+0x238>)
 8005e48:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4c:	095b      	lsrs	r3, r3, #5
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	f003 0307 	and.w	r3, r3, #7
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	4423      	add	r3, r4
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e60:	609a      	str	r2, [r3, #8]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 8005e62:	e107      	b.n	8006074 <LL_USART_SetBaudRate+0x448>
 8005e64:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005e68:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005e72:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005e76:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8005e7a:	4642      	mov	r2, r8
 8005e7c:	464b      	mov	r3, r9
 8005e7e:	1891      	adds	r1, r2, r2
 8005e80:	6239      	str	r1, [r7, #32]
 8005e82:	415b      	adcs	r3, r3
 8005e84:	627b      	str	r3, [r7, #36]	; 0x24
 8005e86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e8a:	4641      	mov	r1, r8
 8005e8c:	1854      	adds	r4, r2, r1
 8005e8e:	4649      	mov	r1, r9
 8005e90:	eb43 0501 	adc.w	r5, r3, r1
 8005e94:	f04f 0200 	mov.w	r2, #0
 8005e98:	f04f 0300 	mov.w	r3, #0
 8005e9c:	00eb      	lsls	r3, r5, #3
 8005e9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ea2:	00e2      	lsls	r2, r4, #3
 8005ea4:	4614      	mov	r4, r2
 8005ea6:	461d      	mov	r5, r3
 8005ea8:	4643      	mov	r3, r8
 8005eaa:	18e3      	adds	r3, r4, r3
 8005eac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005eb0:	464b      	mov	r3, r9
 8005eb2:	eb45 0303 	adc.w	r3, r5, r3
 8005eb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005eba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ec4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005ec8:	f04f 0200 	mov.w	r2, #0
 8005ecc:	f04f 0300 	mov.w	r3, #0
 8005ed0:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8005ed4:	4629      	mov	r1, r5
 8005ed6:	008b      	lsls	r3, r1, #2
 8005ed8:	4621      	mov	r1, r4
 8005eda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ede:	4621      	mov	r1, r4
 8005ee0:	008a      	lsls	r2, r1, #2
 8005ee2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8005ee6:	f7fa fe5f 	bl	8000ba8 <__aeabi_uldivmod>
 8005eea:	4602      	mov	r2, r0
 8005eec:	460b      	mov	r3, r1
 8005eee:	4b64      	ldr	r3, [pc, #400]	; (8006080 <LL_USART_SetBaudRate+0x454>)
 8005ef0:	fba3 2302 	umull	r2, r3, r3, r2
 8005ef4:	095b      	lsrs	r3, r3, #5
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	011b      	lsls	r3, r3, #4
 8005efa:	b29c      	uxth	r4, r3
 8005efc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f00:	2200      	movs	r2, #0
 8005f02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f0a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8005f0e:	4642      	mov	r2, r8
 8005f10:	464b      	mov	r3, r9
 8005f12:	1891      	adds	r1, r2, r2
 8005f14:	61b9      	str	r1, [r7, #24]
 8005f16:	415b      	adcs	r3, r3
 8005f18:	61fb      	str	r3, [r7, #28]
 8005f1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f1e:	4641      	mov	r1, r8
 8005f20:	1851      	adds	r1, r2, r1
 8005f22:	6139      	str	r1, [r7, #16]
 8005f24:	4649      	mov	r1, r9
 8005f26:	414b      	adcs	r3, r1
 8005f28:	617b      	str	r3, [r7, #20]
 8005f2a:	f04f 0200 	mov.w	r2, #0
 8005f2e:	f04f 0300 	mov.w	r3, #0
 8005f32:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f36:	4659      	mov	r1, fp
 8005f38:	00cb      	lsls	r3, r1, #3
 8005f3a:	4651      	mov	r1, sl
 8005f3c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f40:	4651      	mov	r1, sl
 8005f42:	00ca      	lsls	r2, r1, #3
 8005f44:	4610      	mov	r0, r2
 8005f46:	4619      	mov	r1, r3
 8005f48:	4603      	mov	r3, r0
 8005f4a:	4642      	mov	r2, r8
 8005f4c:	189b      	adds	r3, r3, r2
 8005f4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f52:	464b      	mov	r3, r9
 8005f54:	460a      	mov	r2, r1
 8005f56:	eb42 0303 	adc.w	r3, r2, r3
 8005f5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005f5e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005f62:	2200      	movs	r2, #0
 8005f64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f68:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005f6c:	f04f 0200 	mov.w	r2, #0
 8005f70:	f04f 0300 	mov.w	r3, #0
 8005f74:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8005f78:	4649      	mov	r1, r9
 8005f7a:	008b      	lsls	r3, r1, #2
 8005f7c:	4641      	mov	r1, r8
 8005f7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f82:	4641      	mov	r1, r8
 8005f84:	008a      	lsls	r2, r1, #2
 8005f86:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8005f8a:	f7fa fe0d 	bl	8000ba8 <__aeabi_uldivmod>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	460b      	mov	r3, r1
 8005f92:	4b3b      	ldr	r3, [pc, #236]	; (8006080 <LL_USART_SetBaudRate+0x454>)
 8005f94:	fba3 1302 	umull	r1, r3, r3, r2
 8005f98:	095b      	lsrs	r3, r3, #5
 8005f9a:	2164      	movs	r1, #100	; 0x64
 8005f9c:	fb01 f303 	mul.w	r3, r1, r3
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	011b      	lsls	r3, r3, #4
 8005fa4:	3332      	adds	r3, #50	; 0x32
 8005fa6:	4a36      	ldr	r2, [pc, #216]	; (8006080 <LL_USART_SetBaudRate+0x454>)
 8005fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fac:	095b      	lsrs	r3, r3, #5
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	4423      	add	r3, r4
 8005fb8:	b29c      	uxth	r4, r3
 8005fba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	67bb      	str	r3, [r7, #120]	; 0x78
 8005fc2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005fc4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005fc8:	4642      	mov	r2, r8
 8005fca:	464b      	mov	r3, r9
 8005fcc:	1891      	adds	r1, r2, r2
 8005fce:	60b9      	str	r1, [r7, #8]
 8005fd0:	415b      	adcs	r3, r3
 8005fd2:	60fb      	str	r3, [r7, #12]
 8005fd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fd8:	4641      	mov	r1, r8
 8005fda:	1851      	adds	r1, r2, r1
 8005fdc:	6039      	str	r1, [r7, #0]
 8005fde:	4649      	mov	r1, r9
 8005fe0:	414b      	adcs	r3, r1
 8005fe2:	607b      	str	r3, [r7, #4]
 8005fe4:	f04f 0200 	mov.w	r2, #0
 8005fe8:	f04f 0300 	mov.w	r3, #0
 8005fec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ff0:	4659      	mov	r1, fp
 8005ff2:	00cb      	lsls	r3, r1, #3
 8005ff4:	4651      	mov	r1, sl
 8005ff6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ffa:	4651      	mov	r1, sl
 8005ffc:	00ca      	lsls	r2, r1, #3
 8005ffe:	4610      	mov	r0, r2
 8006000:	4619      	mov	r1, r3
 8006002:	4603      	mov	r3, r0
 8006004:	4642      	mov	r2, r8
 8006006:	189b      	adds	r3, r3, r2
 8006008:	673b      	str	r3, [r7, #112]	; 0x70
 800600a:	464b      	mov	r3, r9
 800600c:	460a      	mov	r2, r1
 800600e:	eb42 0303 	adc.w	r3, r2, r3
 8006012:	677b      	str	r3, [r7, #116]	; 0x74
 8006014:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006018:	2200      	movs	r2, #0
 800601a:	66bb      	str	r3, [r7, #104]	; 0x68
 800601c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800601e:	f04f 0200 	mov.w	r2, #0
 8006022:	f04f 0300 	mov.w	r3, #0
 8006026:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 800602a:	4649      	mov	r1, r9
 800602c:	008b      	lsls	r3, r1, #2
 800602e:	4641      	mov	r1, r8
 8006030:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006034:	4641      	mov	r1, r8
 8006036:	008a      	lsls	r2, r1, #2
 8006038:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800603c:	f7fa fdb4 	bl	8000ba8 <__aeabi_uldivmod>
 8006040:	4602      	mov	r2, r0
 8006042:	460b      	mov	r3, r1
 8006044:	4b0e      	ldr	r3, [pc, #56]	; (8006080 <LL_USART_SetBaudRate+0x454>)
 8006046:	fba3 1302 	umull	r1, r3, r3, r2
 800604a:	095b      	lsrs	r3, r3, #5
 800604c:	2164      	movs	r1, #100	; 0x64
 800604e:	fb01 f303 	mul.w	r3, r1, r3
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	011b      	lsls	r3, r3, #4
 8006056:	3332      	adds	r3, #50	; 0x32
 8006058:	4a09      	ldr	r2, [pc, #36]	; (8006080 <LL_USART_SetBaudRate+0x454>)
 800605a:	fba2 2303 	umull	r2, r3, r2, r3
 800605e:	095b      	lsrs	r3, r3, #5
 8006060:	b29b      	uxth	r3, r3
 8006062:	f003 030f 	and.w	r3, r3, #15
 8006066:	b29b      	uxth	r3, r3
 8006068:	4423      	add	r3, r4
 800606a:	b29b      	uxth	r3, r3
 800606c:	461a      	mov	r2, r3
 800606e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006072:	609a      	str	r2, [r3, #8]
}
 8006074:	bf00      	nop
 8006076:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800607a:	46bd      	mov	sp, r7
 800607c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006080:	51eb851f 	.word	0x51eb851f

08006084 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b088      	sub	sp, #32
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8006092:	2300      	movs	r3, #0
 8006094:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f7ff fd8e 	bl	8005bb8 <LL_USART_IsEnabled>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d15e      	bne.n	8006160 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80060aa:	f023 030c 	bic.w	r3, r3, #12
 80060ae:	683a      	ldr	r2, [r7, #0]
 80060b0:	6851      	ldr	r1, [r2, #4]
 80060b2:	683a      	ldr	r2, [r7, #0]
 80060b4:	68d2      	ldr	r2, [r2, #12]
 80060b6:	4311      	orrs	r1, r2
 80060b8:	683a      	ldr	r2, [r7, #0]
 80060ba:	6912      	ldr	r2, [r2, #16]
 80060bc:	4311      	orrs	r1, r2
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	6992      	ldr	r2, [r2, #24]
 80060c2:	430a      	orrs	r2, r1
 80060c4:	431a      	orrs	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	4619      	mov	r1, r3
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f7ff fd85 	bl	8005be0 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	4619      	mov	r1, r3
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f7ff fd92 	bl	8005c06 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80060e2:	f107 0308 	add.w	r3, r7, #8
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7ff f934 	bl	8005354 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a1f      	ldr	r2, [pc, #124]	; (800616c <LL_USART_Init+0xe8>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d102      	bne.n	80060fa <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	61bb      	str	r3, [r7, #24]
 80060f8:	e021      	b.n	800613e <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a1c      	ldr	r2, [pc, #112]	; (8006170 <LL_USART_Init+0xec>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d102      	bne.n	8006108 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	61bb      	str	r3, [r7, #24]
 8006106:	e01a      	b.n	800613e <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a1a      	ldr	r2, [pc, #104]	; (8006174 <LL_USART_Init+0xf0>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d102      	bne.n	8006116 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	61bb      	str	r3, [r7, #24]
 8006114:	e013      	b.n	800613e <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a17      	ldr	r2, [pc, #92]	; (8006178 <LL_USART_Init+0xf4>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d102      	bne.n	8006124 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	61bb      	str	r3, [r7, #24]
 8006122:	e00c      	b.n	800613e <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a15      	ldr	r2, [pc, #84]	; (800617c <LL_USART_Init+0xf8>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d102      	bne.n	8006132 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	61bb      	str	r3, [r7, #24]
 8006130:	e005      	b.n	800613e <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a12      	ldr	r2, [pc, #72]	; (8006180 <LL_USART_Init+0xfc>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d101      	bne.n	800613e <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00d      	beq.n	8006160 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d009      	beq.n	8006160 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 800614c:	2300      	movs	r3, #0
 800614e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	699a      	ldr	r2, [r3, #24]
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	69b9      	ldr	r1, [r7, #24]
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7ff fd66 	bl	8005c2c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8006160:	7ffb      	ldrb	r3, [r7, #31]
}
 8006162:	4618      	mov	r0, r3
 8006164:	3720      	adds	r7, #32
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	40011000 	.word	0x40011000
 8006170:	40004400 	.word	0x40004400
 8006174:	40004800 	.word	0x40004800
 8006178:	40011400 	.word	0x40011400
 800617c:	40004c00 	.word	0x40004c00
 8006180:	40005000 	.word	0x40005000

08006184 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	683a      	ldr	r2, [r7, #0]
 8006192:	619a      	str	r2, [r3, #24]
}
 8006194:	bf00      	nop
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	041a      	lsls	r2, r3, #16
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	619a      	str	r2, [r3, #24]
}
 80061b2:	bf00      	nop
 80061b4:	370c      	adds	r7, #12
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
	...

080061c0 <AT24C08_Page_Write>:

#include "i2c.h"
#include "AT24C08.h"

void AT24C08_Page_Write(unsigned char page, unsigned char* data, unsigned char len)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b088      	sub	sp, #32
 80061c4:	af04      	add	r7, sp, #16
 80061c6:	4603      	mov	r3, r0
 80061c8:	6039      	str	r1, [r7, #0]
 80061ca:	71fb      	strb	r3, [r7, #7]
 80061cc:	4613      	mov	r3, r2
 80061ce:	71bb      	strb	r3, [r7, #6]
	unsigned char devAddress = ((page*16)>>8)<<1 | 0xA0;
 80061d0:	79fb      	ldrb	r3, [r7, #7]
 80061d2:	011b      	lsls	r3, r3, #4
 80061d4:	121b      	asrs	r3, r3, #8
 80061d6:	005b      	lsls	r3, r3, #1
 80061d8:	b25b      	sxtb	r3, r3
 80061da:	f063 035f 	orn	r3, r3, #95	; 0x5f
 80061de:	b25b      	sxtb	r3, r3
 80061e0:	73fb      	strb	r3, [r7, #15]
	unsigned char wordAddress = (page*16) & 0xff;
 80061e2:	79fb      	ldrb	r3, [r7, #7]
 80061e4:	011b      	lsls	r3, r3, #4
 80061e6:	73bb      	strb	r3, [r7, #14]

	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 80061e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80061ec:	480e      	ldr	r0, [pc, #56]	; (8006228 <AT24C08_Page_Write+0x68>)
 80061ee:	f7ff ffd7 	bl	80061a0 <LL_GPIO_ResetOutputPin>
	HAL_I2C_Mem_Write(&hi2c1, devAddress, wordAddress, I2C_MEMADD_SIZE_8BIT, &data[0], 16, 1);
 80061f2:	7bfb      	ldrb	r3, [r7, #15]
 80061f4:	b299      	uxth	r1, r3
 80061f6:	7bbb      	ldrb	r3, [r7, #14]
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	2301      	movs	r3, #1
 80061fc:	9302      	str	r3, [sp, #8]
 80061fe:	2310      	movs	r3, #16
 8006200:	9301      	str	r3, [sp, #4]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	9300      	str	r3, [sp, #0]
 8006206:	2301      	movs	r3, #1
 8006208:	4808      	ldr	r0, [pc, #32]	; (800622c <AT24C08_Page_Write+0x6c>)
 800620a:	f7fc faeb 	bl	80027e4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800620e:	2001      	movs	r0, #1
 8006210:	f7fa febe 	bl	8000f90 <HAL_Delay>
	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8006214:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006218:	4803      	ldr	r0, [pc, #12]	; (8006228 <AT24C08_Page_Write+0x68>)
 800621a:	f7ff ffb3 	bl	8006184 <LL_GPIO_SetOutputPin>
}
 800621e:	bf00      	nop
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	40020800 	.word	0x40020800
 800622c:	20000554 	.word	0x20000554

08006230 <AT24C08_Page_Read>:

void AT24C08_Page_Read(unsigned char page, unsigned char* data, unsigned char len)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b088      	sub	sp, #32
 8006234:	af04      	add	r7, sp, #16
 8006236:	4603      	mov	r3, r0
 8006238:	6039      	str	r1, [r7, #0]
 800623a:	71fb      	strb	r3, [r7, #7]
 800623c:	4613      	mov	r3, r2
 800623e:	71bb      	strb	r3, [r7, #6]
	unsigned char devAddress = ((page*16)>>8)<<1 | 0xA0;
 8006240:	79fb      	ldrb	r3, [r7, #7]
 8006242:	011b      	lsls	r3, r3, #4
 8006244:	121b      	asrs	r3, r3, #8
 8006246:	005b      	lsls	r3, r3, #1
 8006248:	b25b      	sxtb	r3, r3
 800624a:	f063 035f 	orn	r3, r3, #95	; 0x5f
 800624e:	b25b      	sxtb	r3, r3
 8006250:	73fb      	strb	r3, [r7, #15]
	unsigned char wordAddress = (page*16) & 0xff;
 8006252:	79fb      	ldrb	r3, [r7, #7]
 8006254:	011b      	lsls	r3, r3, #4
 8006256:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Read(&hi2c1, devAddress, wordAddress, I2C_MEMADD_SIZE_8BIT, &data[0], 16, 1);
 8006258:	7bfb      	ldrb	r3, [r7, #15]
 800625a:	b299      	uxth	r1, r3
 800625c:	7bbb      	ldrb	r3, [r7, #14]
 800625e:	b29a      	uxth	r2, r3
 8006260:	2301      	movs	r3, #1
 8006262:	9302      	str	r3, [sp, #8]
 8006264:	2310      	movs	r3, #16
 8006266:	9301      	str	r3, [sp, #4]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	9300      	str	r3, [sp, #0]
 800626c:	2301      	movs	r3, #1
 800626e:	4803      	ldr	r0, [pc, #12]	; (800627c <AT24C08_Page_Read+0x4c>)
 8006270:	f7fc fbb2 	bl	80029d8 <HAL_I2C_Mem_Read>
}
 8006274:	bf00      	nop
 8006276:	3710      	adds	r7, #16
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	20000554 	.word	0x20000554

08006280 <EP_PIDGain_Write>:

void EP_PIDGain_Write(unsigned char id, float PGain, float IGain, float DGain)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b08c      	sub	sp, #48	; 0x30
 8006284:	af00      	add	r7, sp, #0
 8006286:	4603      	mov	r3, r0
 8006288:	ed87 0a02 	vstr	s0, [r7, #8]
 800628c:	edc7 0a01 	vstr	s1, [r7, #4]
 8006290:	ed87 1a00 	vstr	s2, [r7]
 8006294:	73fb      	strb	r3, [r7, #15]
	unsigned char buf_write[16];
	Parser parser;

	buf_write[0] = 0x45;
 8006296:	2345      	movs	r3, #69	; 0x45
 8006298:	763b      	strb	r3, [r7, #24]
	buf_write[1] = 0x50;
 800629a:	2350      	movs	r3, #80	; 0x50
 800629c:	767b      	strb	r3, [r7, #25]
	buf_write[2] = id;
 800629e:	7bfb      	ldrb	r3, [r7, #15]
 80062a0:	76bb      	strb	r3, [r7, #26]
	parser.f = PGain;
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	617b      	str	r3, [r7, #20]
	buf_write[3] = parser.byte[0];
 80062a6:	7d3b      	ldrb	r3, [r7, #20]
 80062a8:	76fb      	strb	r3, [r7, #27]
	buf_write[4] = parser.byte[1];
 80062aa:	7d7b      	ldrb	r3, [r7, #21]
 80062ac:	773b      	strb	r3, [r7, #28]
	buf_write[5] = parser.byte[2];
 80062ae:	7dbb      	ldrb	r3, [r7, #22]
 80062b0:	777b      	strb	r3, [r7, #29]
	buf_write[6] = parser.byte[3];
 80062b2:	7dfb      	ldrb	r3, [r7, #23]
 80062b4:	77bb      	strb	r3, [r7, #30]

	parser.f = IGain;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	617b      	str	r3, [r7, #20]
	buf_write[7] = parser.byte[0];
 80062ba:	7d3b      	ldrb	r3, [r7, #20]
 80062bc:	77fb      	strb	r3, [r7, #31]
	buf_write[8] = parser.byte[1];
 80062be:	7d7b      	ldrb	r3, [r7, #21]
 80062c0:	f887 3020 	strb.w	r3, [r7, #32]
	buf_write[9] = parser.byte[2];
 80062c4:	7dbb      	ldrb	r3, [r7, #22]
 80062c6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buf_write[10] = parser.byte[3];
 80062ca:	7dfb      	ldrb	r3, [r7, #23]
 80062cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	parser.f = DGain;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	617b      	str	r3, [r7, #20]
	buf_write[11] = parser.byte[0];
 80062d4:	7d3b      	ldrb	r3, [r7, #20]
 80062d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buf_write[12] = parser.byte[1];
 80062da:	7d7b      	ldrb	r3, [r7, #21]
 80062dc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buf_write[13] = parser.byte[2];
 80062e0:	7dbb      	ldrb	r3, [r7, #22]
 80062e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buf_write[14] = parser.byte[3];
 80062e6:	7dfb      	ldrb	r3, [r7, #23]
 80062e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	unsigned char chksum = 0xff;
 80062ec:	23ff      	movs	r3, #255	; 0xff
 80062ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for(int i=0;i<15;i++) chksum -= buf_write[i];
 80062f2:	2300      	movs	r3, #0
 80062f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80062f6:	e00c      	b.n	8006312 <EP_PIDGain_Write+0x92>
 80062f8:	f107 0218 	add.w	r2, r7, #24
 80062fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fe:	4413      	add	r3, r2
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800630c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630e:	3301      	adds	r3, #1
 8006310:	62bb      	str	r3, [r7, #40]	; 0x28
 8006312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006314:	2b0e      	cmp	r3, #14
 8006316:	ddef      	ble.n	80062f8 <EP_PIDGain_Write+0x78>

	buf_write[15] = chksum;
 8006318:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800631c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	switch(id)
 8006320:	7bfb      	ldrb	r3, [r7, #15]
 8006322:	2b05      	cmp	r3, #5
 8006324:	d83e      	bhi.n	80063a4 <EP_PIDGain_Write+0x124>
 8006326:	a201      	add	r2, pc, #4	; (adr r2, 800632c <EP_PIDGain_Write+0xac>)
 8006328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632c:	08006345 	.word	0x08006345
 8006330:	08006355 	.word	0x08006355
 8006334:	08006365 	.word	0x08006365
 8006338:	08006375 	.word	0x08006375
 800633c:	08006385 	.word	0x08006385
 8006340:	08006395 	.word	0x08006395
	{
	case 0:
		AT24C08_Page_Write(0, &buf_write[0], 16);
 8006344:	f107 0318 	add.w	r3, r7, #24
 8006348:	2210      	movs	r2, #16
 800634a:	4619      	mov	r1, r3
 800634c:	2000      	movs	r0, #0
 800634e:	f7ff ff37 	bl	80061c0 <AT24C08_Page_Write>
		break;
 8006352:	e027      	b.n	80063a4 <EP_PIDGain_Write+0x124>
	case 1:
		AT24C08_Page_Write(1, &buf_write[0], 16);
 8006354:	f107 0318 	add.w	r3, r7, #24
 8006358:	2210      	movs	r2, #16
 800635a:	4619      	mov	r1, r3
 800635c:	2001      	movs	r0, #1
 800635e:	f7ff ff2f 	bl	80061c0 <AT24C08_Page_Write>
		break;
 8006362:	e01f      	b.n	80063a4 <EP_PIDGain_Write+0x124>
	case 2:
		AT24C08_Page_Write(2, &buf_write[0], 16);
 8006364:	f107 0318 	add.w	r3, r7, #24
 8006368:	2210      	movs	r2, #16
 800636a:	4619      	mov	r1, r3
 800636c:	2002      	movs	r0, #2
 800636e:	f7ff ff27 	bl	80061c0 <AT24C08_Page_Write>
		break;
 8006372:	e017      	b.n	80063a4 <EP_PIDGain_Write+0x124>
	case 3:
		AT24C08_Page_Write(3, &buf_write[0], 16);
 8006374:	f107 0318 	add.w	r3, r7, #24
 8006378:	2210      	movs	r2, #16
 800637a:	4619      	mov	r1, r3
 800637c:	2003      	movs	r0, #3
 800637e:	f7ff ff1f 	bl	80061c0 <AT24C08_Page_Write>
		break;
 8006382:	e00f      	b.n	80063a4 <EP_PIDGain_Write+0x124>
	case 4:
		AT24C08_Page_Write(4, &buf_write[0], 16);
 8006384:	f107 0318 	add.w	r3, r7, #24
 8006388:	2210      	movs	r2, #16
 800638a:	4619      	mov	r1, r3
 800638c:	2004      	movs	r0, #4
 800638e:	f7ff ff17 	bl	80061c0 <AT24C08_Page_Write>
		break;
 8006392:	e007      	b.n	80063a4 <EP_PIDGain_Write+0x124>
	case 5:
		AT24C08_Page_Write(5, &buf_write[0], 16);
 8006394:	f107 0318 	add.w	r3, r7, #24
 8006398:	2210      	movs	r2, #16
 800639a:	4619      	mov	r1, r3
 800639c:	2005      	movs	r0, #5
 800639e:	f7ff ff0f 	bl	80061c0 <AT24C08_Page_Write>
		break;
 80063a2:	bf00      	nop
	}
}
 80063a4:	bf00      	nop
 80063a6:	3730      	adds	r7, #48	; 0x30
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <EP_PIDGain_Read>:

unsigned char EP_PIDGain_Read(unsigned char id, float* PGain, float* IGain, float* DGain)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b08c      	sub	sp, #48	; 0x30
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60b9      	str	r1, [r7, #8]
 80063b4:	607a      	str	r2, [r7, #4]
 80063b6:	603b      	str	r3, [r7, #0]
 80063b8:	4603      	mov	r3, r0
 80063ba:	73fb      	strb	r3, [r7, #15]
	unsigned char buf_read[16];
	Parser parser;

	switch(id)
 80063bc:	7bfb      	ldrb	r3, [r7, #15]
 80063be:	2b05      	cmp	r3, #5
 80063c0:	d83e      	bhi.n	8006440 <EP_PIDGain_Read+0x94>
 80063c2:	a201      	add	r2, pc, #4	; (adr r2, 80063c8 <EP_PIDGain_Read+0x1c>)
 80063c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c8:	080063e1 	.word	0x080063e1
 80063cc:	080063f1 	.word	0x080063f1
 80063d0:	08006401 	.word	0x08006401
 80063d4:	08006411 	.word	0x08006411
 80063d8:	08006421 	.word	0x08006421
 80063dc:	08006431 	.word	0x08006431
	{
	case 0:
		AT24C08_Page_Read(0, &buf_read[0], 16);
 80063e0:	f107 0318 	add.w	r3, r7, #24
 80063e4:	2210      	movs	r2, #16
 80063e6:	4619      	mov	r1, r3
 80063e8:	2000      	movs	r0, #0
 80063ea:	f7ff ff21 	bl	8006230 <AT24C08_Page_Read>
		break;
 80063ee:	e027      	b.n	8006440 <EP_PIDGain_Read+0x94>
	case 1:
		AT24C08_Page_Read(1, &buf_read[0], 16);
 80063f0:	f107 0318 	add.w	r3, r7, #24
 80063f4:	2210      	movs	r2, #16
 80063f6:	4619      	mov	r1, r3
 80063f8:	2001      	movs	r0, #1
 80063fa:	f7ff ff19 	bl	8006230 <AT24C08_Page_Read>
		break;
 80063fe:	e01f      	b.n	8006440 <EP_PIDGain_Read+0x94>
	case 2:
		AT24C08_Page_Read(2, &buf_read[0], 16);
 8006400:	f107 0318 	add.w	r3, r7, #24
 8006404:	2210      	movs	r2, #16
 8006406:	4619      	mov	r1, r3
 8006408:	2002      	movs	r0, #2
 800640a:	f7ff ff11 	bl	8006230 <AT24C08_Page_Read>
		break;
 800640e:	e017      	b.n	8006440 <EP_PIDGain_Read+0x94>
	case 3:
		AT24C08_Page_Read(3, &buf_read[0], 16);
 8006410:	f107 0318 	add.w	r3, r7, #24
 8006414:	2210      	movs	r2, #16
 8006416:	4619      	mov	r1, r3
 8006418:	2003      	movs	r0, #3
 800641a:	f7ff ff09 	bl	8006230 <AT24C08_Page_Read>
		break;
 800641e:	e00f      	b.n	8006440 <EP_PIDGain_Read+0x94>
	case 4:
		AT24C08_Page_Read(4, &buf_read[0], 16);
 8006420:	f107 0318 	add.w	r3, r7, #24
 8006424:	2210      	movs	r2, #16
 8006426:	4619      	mov	r1, r3
 8006428:	2004      	movs	r0, #4
 800642a:	f7ff ff01 	bl	8006230 <AT24C08_Page_Read>
		break;
 800642e:	e007      	b.n	8006440 <EP_PIDGain_Read+0x94>
	case 5:
		AT24C08_Page_Read(5, &buf_read[0], 16);
 8006430:	f107 0318 	add.w	r3, r7, #24
 8006434:	2210      	movs	r2, #16
 8006436:	4619      	mov	r1, r3
 8006438:	2005      	movs	r0, #5
 800643a:	f7ff fef9 	bl	8006230 <AT24C08_Page_Read>
		break;
 800643e:	bf00      	nop
	}

	unsigned char chksum = 0xff;
 8006440:	23ff      	movs	r3, #255	; 0xff
 8006442:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for(int i=0;i<15;i++) chksum -= buf_read[i];
 8006446:	2300      	movs	r3, #0
 8006448:	62bb      	str	r3, [r7, #40]	; 0x28
 800644a:	e00c      	b.n	8006466 <EP_PIDGain_Read+0xba>
 800644c:	f107 0218 	add.w	r2, r7, #24
 8006450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006452:	4413      	add	r3, r2
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006462:	3301      	adds	r3, #1
 8006464:	62bb      	str	r3, [r7, #40]	; 0x28
 8006466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006468:	2b0e      	cmp	r3, #14
 800646a:	ddef      	ble.n	800644c <EP_PIDGain_Read+0xa0>

	if(buf_read[15] == chksum && buf_read[0] == 0x45 && buf_read[1] == 0x50)
 800646c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006470:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006474:	429a      	cmp	r2, r3
 8006476:	d12f      	bne.n	80064d8 <EP_PIDGain_Read+0x12c>
 8006478:	7e3b      	ldrb	r3, [r7, #24]
 800647a:	2b45      	cmp	r3, #69	; 0x45
 800647c:	d12c      	bne.n	80064d8 <EP_PIDGain_Read+0x12c>
 800647e:	7e7b      	ldrb	r3, [r7, #25]
 8006480:	2b50      	cmp	r3, #80	; 0x50
 8006482:	d129      	bne.n	80064d8 <EP_PIDGain_Read+0x12c>
	{
		parser.byte[0] = buf_read[3];
 8006484:	7efb      	ldrb	r3, [r7, #27]
 8006486:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[4];
 8006488:	7f3b      	ldrb	r3, [r7, #28]
 800648a:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[5];
 800648c:	7f7b      	ldrb	r3, [r7, #29]
 800648e:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[6];
 8006490:	7fbb      	ldrb	r3, [r7, #30]
 8006492:	75fb      	strb	r3, [r7, #23]
		*PGain = parser.f;
 8006494:	697a      	ldr	r2, [r7, #20]
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	601a      	str	r2, [r3, #0]

		parser.byte[0] = buf_read[7];
 800649a:	7ffb      	ldrb	r3, [r7, #31]
 800649c:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[8];
 800649e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80064a2:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[9];
 80064a4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80064a8:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[10];
 80064aa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80064ae:	75fb      	strb	r3, [r7, #23]
		*IGain = parser.f;
 80064b0:	697a      	ldr	r2, [r7, #20]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	601a      	str	r2, [r3, #0]

		parser.byte[0] = buf_read[11];
 80064b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064ba:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[12];
 80064bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80064c0:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[13];
 80064c2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80064c6:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[14];
 80064c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80064cc:	75fb      	strb	r3, [r7, #23]
		*DGain = parser.f;
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	601a      	str	r2, [r3, #0]

		return 0;
 80064d4:	2300      	movs	r3, #0
 80064d6:	e000      	b.n	80064da <EP_PIDGain_Read+0x12e>
	}

	return 1;
 80064d8:	2301      	movs	r3, #1
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3730      	adds	r7, #48	; 0x30
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop

080064e4 <LL_SPI_Enable>:
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	601a      	str	r2, [r3, #0]
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <LL_SPI_SetStandard>:
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	f023 0210 	bic.w	r2, r3, #16
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	431a      	orrs	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	605a      	str	r2, [r3, #4]
}
 800651e:	bf00      	nop
 8006520:	370c      	adds	r7, #12
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr

0800652a <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 800652a:	b480      	push	{r7}
 800652c:	b083      	sub	sp, #12
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	2b01      	cmp	r3, #1
 800653c:	d101      	bne.n	8006542 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800653e:	2301      	movs	r3, #1
 8006540:	e000      	b.n	8006544 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	f003 0302 	and.w	r3, r3, #2
 8006560:	2b02      	cmp	r3, #2
 8006562:	d101      	bne.n	8006568 <LL_SPI_IsActiveFlag_TXE+0x18>
 8006564:	2301      	movs	r3, #1
 8006566:	e000      	b.n	800656a <LL_SPI_IsActiveFlag_TXE+0x1a>
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	370c      	adds	r7, #12
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8006576:	b480      	push	{r7}
 8006578:	b083      	sub	sp, #12
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	330c      	adds	r3, #12
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	b2db      	uxtb	r3, r3
}
 8006586:	4618      	mov	r0, r3
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8006592:	b480      	push	{r7}
 8006594:	b085      	sub	sp, #20
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	460b      	mov	r3, r1
 800659c:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	330c      	adds	r3, #12
 80065a2:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	78fa      	ldrb	r2, [r7, #3]
 80065a8:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80065aa:	bf00      	nop
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <LL_GPIO_IsInputPinSet>:
{
 80065b6:	b480      	push	{r7}
 80065b8:	b083      	sub	sp, #12
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
 80065be:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	691a      	ldr	r2, [r3, #16]
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	4013      	ands	r3, r2
 80065c8:	683a      	ldr	r2, [r7, #0]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	bf0c      	ite	eq
 80065ce:	2301      	moveq	r3, #1
 80065d0:	2300      	movne	r3, #0
 80065d2:	b2db      	uxtb	r3, r3
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <LL_GPIO_SetOutputPin>:
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	683a      	ldr	r2, [r7, #0]
 80065ee:	619a      	str	r2, [r3, #24]
}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <LL_GPIO_ResetOutputPin>:
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	041a      	lsls	r2, r3, #16
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	619a      	str	r2, [r3, #24]
}
 800660e:	bf00      	nop
 8006610:	370c      	adds	r7, #12
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
	...

0800661c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8006624:	4b08      	ldr	r3, [pc, #32]	; (8006648 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006626:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006628:	4907      	ldr	r1, [pc, #28]	; (8006648 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4313      	orrs	r3, r2
 800662e:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8006630:	4b05      	ldr	r3, [pc, #20]	; (8006648 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4013      	ands	r3, r2
 8006638:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800663a:	68fb      	ldr	r3, [r7, #12]
}
 800663c:	bf00      	nop
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr
 8006648:	40023800 	.word	0x40023800

0800664c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8006654:	4b08      	ldr	r3, [pc, #32]	; (8006678 <LL_APB1_GRP1_EnableClock+0x2c>)
 8006656:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006658:	4907      	ldr	r1, [pc, #28]	; (8006678 <LL_APB1_GRP1_EnableClock+0x2c>)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4313      	orrs	r3, r2
 800665e:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8006660:	4b05      	ldr	r3, [pc, #20]	; (8006678 <LL_APB1_GRP1_EnableClock+0x2c>)
 8006662:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4013      	ands	r3, r2
 8006668:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800666a:	68fb      	ldr	r3, [r7, #12]
}
 800666c:	bf00      	nop
 800666e:	3714      	adds	r7, #20
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr
 8006678:	40023800 	.word	0x40023800

0800667c <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b090      	sub	sp, #64	; 0x40
 8006680:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8006682:	f107 0318 	add.w	r3, r7, #24
 8006686:	2228      	movs	r2, #40	; 0x28
 8006688:	2100      	movs	r1, #0
 800668a:	4618      	mov	r0, r3
 800668c:	f006 f8c6 	bl	800c81c <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006690:	463b      	mov	r3, r7
 8006692:	2200      	movs	r2, #0
 8006694:	601a      	str	r2, [r3, #0]
 8006696:	605a      	str	r2, [r3, #4]
 8006698:	609a      	str	r2, [r3, #8]
 800669a:	60da      	str	r2, [r3, #12]
 800669c:	611a      	str	r2, [r3, #16]
 800669e:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80066a0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80066a4:	f7ff ffd2 	bl	800664c <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80066a8:	2002      	movs	r0, #2
 80066aa:	f7ff ffb7 	bl	800661c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80066ae:	2004      	movs	r0, #4
 80066b0:	f7ff ffb4 	bl	800661c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80066b4:	2001      	movs	r0, #1
 80066b6:	f7ff ffb1 	bl	800661c <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 80066ba:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80066be:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80066c0:	2302      	movs	r3, #2
 80066c2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80066c4:	2303      	movs	r3, #3
 80066c6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80066c8:	2300      	movs	r3, #0
 80066ca:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80066cc:	2300      	movs	r3, #0
 80066ce:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80066d0:	2305      	movs	r3, #5
 80066d2:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066d4:	463b      	mov	r3, r7
 80066d6:	4619      	mov	r1, r3
 80066d8:	4841      	ldr	r0, [pc, #260]	; (80067e0 <BNO080_GPIO_SPI_Initialization+0x164>)
 80066da:	f7fe fd58 	bl	800518e <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80066de:	2300      	movs	r3, #0
 80066e0:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80066e2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80066e6:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80066e8:	2300      	movs	r3, #0
 80066ea:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80066ec:	2302      	movs	r3, #2
 80066ee:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80066f0:	2301      	movs	r3, #1
 80066f2:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80066f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80066fa:	2318      	movs	r3, #24
 80066fc:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80066fe:	2300      	movs	r3, #0
 8006700:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8006702:	2300      	movs	r3, #0
 8006704:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8006706:	230a      	movs	r3, #10
 8006708:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 800670a:	f107 0318 	add.w	r3, r7, #24
 800670e:	4619      	mov	r1, r3
 8006710:	4834      	ldr	r0, [pc, #208]	; (80067e4 <BNO080_GPIO_SPI_Initialization+0x168>)
 8006712:	f7fe ff0c 	bl	800552e <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8006716:	2100      	movs	r1, #0
 8006718:	4832      	ldr	r0, [pc, #200]	; (80067e4 <BNO080_GPIO_SPI_Initialization+0x168>)
 800671a:	f7ff fef3 	bl	8006504 <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 800671e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006722:	4831      	ldr	r0, [pc, #196]	; (80067e8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8006724:	f7ff ff6a 	bl	80065fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 8006728:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800672c:	482c      	ldr	r0, [pc, #176]	; (80067e0 <BNO080_GPIO_SPI_Initialization+0x164>)
 800672e:	f7ff ff65 	bl	80065fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 8006732:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006736:	482d      	ldr	r0, [pc, #180]	; (80067ec <BNO080_GPIO_SPI_Initialization+0x170>)
 8006738:	f7ff ff60 	bl	80065fc <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 800673c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006740:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006742:	2301      	movs	r3, #1
 8006744:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006746:	2303      	movs	r3, #3
 8006748:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800674a:	2300      	movs	r3, #0
 800674c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800674e:	2300      	movs	r3, #0
 8006750:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 8006752:	463b      	mov	r3, r7
 8006754:	4619      	mov	r1, r3
 8006756:	4822      	ldr	r0, [pc, #136]	; (80067e0 <BNO080_GPIO_SPI_Initialization+0x164>)
 8006758:	f7fe fd19 	bl	800518e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 800675c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006760:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006762:	2301      	movs	r3, #1
 8006764:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006766:	2303      	movs	r3, #3
 8006768:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800676a:	2300      	movs	r3, #0
 800676c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800676e:	2300      	movs	r3, #0
 8006770:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 8006772:	463b      	mov	r3, r7
 8006774:	4619      	mov	r1, r3
 8006776:	481c      	ldr	r0, [pc, #112]	; (80067e8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8006778:	f7fe fd09 	bl	800518e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 800677c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006780:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006782:	2301      	movs	r3, #1
 8006784:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006786:	2303      	movs	r3, #3
 8006788:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800678a:	2300      	movs	r3, #0
 800678c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800678e:	2300      	movs	r3, #0
 8006790:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 8006792:	463b      	mov	r3, r7
 8006794:	4619      	mov	r1, r3
 8006796:	4815      	ldr	r0, [pc, #84]	; (80067ec <BNO080_GPIO_SPI_Initialization+0x170>)
 8006798:	f7fe fcf9 	bl	800518e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 800679c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067a0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80067a2:	2300      	movs	r3, #0
 80067a4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80067a6:	2301      	movs	r3, #1
 80067a8:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 80067aa:	463b      	mov	r3, r7
 80067ac:	4619      	mov	r1, r3
 80067ae:	480e      	ldr	r0, [pc, #56]	; (80067e8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80067b0:	f7fe fced 	bl	800518e <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 80067b4:	480b      	ldr	r0, [pc, #44]	; (80067e4 <BNO080_GPIO_SPI_Initialization+0x168>)
 80067b6:	f7ff fe95 	bl	80064e4 <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 80067ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80067be:	4808      	ldr	r0, [pc, #32]	; (80067e0 <BNO080_GPIO_SPI_Initialization+0x164>)
 80067c0:	f7ff ff0e 	bl	80065e0 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 80067c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80067c8:	4808      	ldr	r0, [pc, #32]	; (80067ec <BNO080_GPIO_SPI_Initialization+0x170>)
 80067ca:	f7ff ff09 	bl	80065e0 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 80067ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80067d2:	4805      	ldr	r0, [pc, #20]	; (80067e8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80067d4:	f7ff ff04 	bl	80065e0 <LL_GPIO_SetOutputPin>
}
 80067d8:	bf00      	nop
 80067da:	3740      	adds	r7, #64	; 0x40
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	40020400 	.word	0x40020400
 80067e4:	40003800 	.word	0x40003800
 80067e8:	40020800 	.word	0x40020800
 80067ec:	40020000 	.word	0x40020000

080067f0 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 80067f6:	f7ff ff41 	bl	800667c <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 80067fa:	482e      	ldr	r0, [pc, #184]	; (80068b4 <BNO080_Initialization+0xc4>)
 80067fc:	f006 fc80 	bl	800d100 <iprintf>
	
	CHIP_DESELECT(BNO080);
 8006800:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006804:	482c      	ldr	r0, [pc, #176]	; (80068b8 <BNO080_Initialization+0xc8>)
 8006806:	f7ff feeb 	bl	80065e0 <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 800680a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800680e:	482b      	ldr	r0, [pc, #172]	; (80068bc <BNO080_Initialization+0xcc>)
 8006810:	f7ff fee6 	bl	80065e0 <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 8006814:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006818:	4829      	ldr	r0, [pc, #164]	; (80068c0 <BNO080_Initialization+0xd0>)
 800681a:	f7ff feef 	bl	80065fc <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 800681e:	20c8      	movs	r0, #200	; 0xc8
 8006820:	f7fa fbb6 	bl	8000f90 <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 8006824:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006828:	4825      	ldr	r0, [pc, #148]	; (80068c0 <BNO080_Initialization+0xd0>)
 800682a:	f7ff fed9 	bl	80065e0 <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 800682e:	f000 fc43 	bl	80070b8 <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 8006832:	f000 fc41 	bl	80070b8 <BNO080_waitForSPI>
	BNO080_receivePacket();
 8006836:	f000 fc63 	bl	8007100 <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 800683a:	f000 fc3d 	bl	80070b8 <BNO080_waitForSPI>
	BNO080_receivePacket();
 800683e:	f000 fc5f 	bl	8007100 <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8006842:	4b20      	ldr	r3, [pc, #128]	; (80068c4 <BNO080_Initialization+0xd4>)
 8006844:	22f9      	movs	r2, #249	; 0xf9
 8006846:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 8006848:	4b1e      	ldr	r3, [pc, #120]	; (80068c4 <BNO080_Initialization+0xd4>)
 800684a:	2200      	movs	r2, #0
 800684c:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 800684e:	2102      	movs	r1, #2
 8006850:	2002      	movs	r0, #2
 8006852:	f000 fcc5 	bl	80071e0 <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 8006856:	f000 fc2f 	bl	80070b8 <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 800685a:	f000 fc51 	bl	8007100 <BNO080_receivePacket>
 800685e:	4603      	mov	r3, r0
 8006860:	2b01      	cmp	r3, #1
 8006862:	d11b      	bne.n	800689c <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 8006864:	4b18      	ldr	r3, [pc, #96]	; (80068c8 <BNO080_Initialization+0xd8>)
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	4619      	mov	r1, r3
 800686a:	4b17      	ldr	r3, [pc, #92]	; (80068c8 <BNO080_Initialization+0xd8>)
 800686c:	785b      	ldrb	r3, [r3, #1]
 800686e:	461a      	mov	r2, r3
 8006870:	4b15      	ldr	r3, [pc, #84]	; (80068c8 <BNO080_Initialization+0xd8>)
 8006872:	789b      	ldrb	r3, [r3, #2]
 8006874:	4618      	mov	r0, r3
 8006876:	4b14      	ldr	r3, [pc, #80]	; (80068c8 <BNO080_Initialization+0xd8>)
 8006878:	78db      	ldrb	r3, [r3, #3]
 800687a:	9300      	str	r3, [sp, #0]
 800687c:	4603      	mov	r3, r0
 800687e:	4813      	ldr	r0, [pc, #76]	; (80068cc <BNO080_Initialization+0xdc>)
 8006880:	f006 fc3e 	bl	800d100 <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8006884:	4b0f      	ldr	r3, [pc, #60]	; (80068c4 <BNO080_Initialization+0xd4>)
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	2bf8      	cmp	r3, #248	; 0xf8
 800688a:	d107      	bne.n	800689c <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 800688c:	4b0d      	ldr	r3, [pc, #52]	; (80068c4 <BNO080_Initialization+0xd4>)
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	4619      	mov	r1, r3
 8006892:	480f      	ldr	r0, [pc, #60]	; (80068d0 <BNO080_Initialization+0xe0>)
 8006894:	f006 fc34 	bl	800d100 <iprintf>
			return (0);
 8006898:	2300      	movs	r3, #0
 800689a:	e007      	b.n	80068ac <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 800689c:	4b09      	ldr	r3, [pc, #36]	; (80068c4 <BNO080_Initialization+0xd4>)
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	22f8      	movs	r2, #248	; 0xf8
 80068a2:	4619      	mov	r1, r3
 80068a4:	480b      	ldr	r0, [pc, #44]	; (80068d4 <BNO080_Initialization+0xe4>)
 80068a6:	f006 fc2b 	bl	800d100 <iprintf>
	return (1); //Something went wrong
 80068aa:	2301      	movs	r3, #1
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	08010050 	.word	0x08010050
 80068b8:	40020400 	.word	0x40020400
 80068bc:	40020000 	.word	0x40020000
 80068c0:	40020800 	.word	0x40020800
 80068c4:	20000204 	.word	0x20000204
 80068c8:	20000200 	.word	0x20000200
 80068cc:	08010064 	.word	0x08010064
 80068d0:	0801007c 	.word	0x0801007c
 80068d4:	0801009c 	.word	0x0801009c

080068d8 <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	4603      	mov	r3, r0
 80068e0:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 80068e2:	bf00      	nop
 80068e4:	480c      	ldr	r0, [pc, #48]	; (8006918 <SPI2_SendByte+0x40>)
 80068e6:	f7ff fe33 	bl	8006550 <LL_SPI_IsActiveFlag_TXE>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d0f9      	beq.n	80068e4 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 80068f0:	79fb      	ldrb	r3, [r7, #7]
 80068f2:	4619      	mov	r1, r3
 80068f4:	4808      	ldr	r0, [pc, #32]	; (8006918 <SPI2_SendByte+0x40>)
 80068f6:	f7ff fe4c 	bl	8006592 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 80068fa:	bf00      	nop
 80068fc:	4806      	ldr	r0, [pc, #24]	; (8006918 <SPI2_SendByte+0x40>)
 80068fe:	f7ff fe14 	bl	800652a <LL_SPI_IsActiveFlag_RXNE>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d0f9      	beq.n	80068fc <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 8006908:	4803      	ldr	r0, [pc, #12]	; (8006918 <SPI2_SendByte+0x40>)
 800690a:	f7ff fe34 	bl	8006576 <LL_SPI_ReceiveData8>
 800690e:	4603      	mov	r3, r0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3708      	adds	r7, #8
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}
 8006918:	40003800 	.word	0x40003800

0800691c <BNO080_dataAvailable>:
//////////////////////////////////////////////////////////////////////////

//Updates the latest variables if possible
//Returns false if new readings are not available
int BNO080_dataAvailable(void)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is NULL, then we'll rely on BNO080_receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8006920:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006924:	4811      	ldr	r0, [pc, #68]	; (800696c <BNO080_dataAvailable+0x50>)
 8006926:	f7ff fe46 	bl	80065b6 <LL_GPIO_IsInputPinSet>
 800692a:	4603      	mov	r3, r0
 800692c:	2b01      	cmp	r3, #1
 800692e:	d101      	bne.n	8006934 <BNO080_dataAvailable+0x18>
		return (0);
 8006930:	2300      	movs	r3, #0
 8006932:	e019      	b.n	8006968 <BNO080_dataAvailable+0x4c>

	if (BNO080_receivePacket() == 1)
 8006934:	f000 fbe4 	bl	8007100 <BNO080_receivePacket>
 8006938:	4603      	mov	r3, r0
 800693a:	2b01      	cmp	r3, #1
 800693c:	d113      	bne.n	8006966 <BNO080_dataAvailable+0x4a>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 800693e:	4b0c      	ldr	r3, [pc, #48]	; (8006970 <BNO080_dataAvailable+0x54>)
 8006940:	789b      	ldrb	r3, [r3, #2]
 8006942:	2b03      	cmp	r3, #3
 8006944:	d107      	bne.n	8006956 <BNO080_dataAvailable+0x3a>
 8006946:	4b0b      	ldr	r3, [pc, #44]	; (8006974 <BNO080_dataAvailable+0x58>)
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	2bfb      	cmp	r3, #251	; 0xfb
 800694c:	d103      	bne.n	8006956 <BNO080_dataAvailable+0x3a>
		{
			BNO080_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 800694e:	f000 f82f 	bl	80069b0 <BNO080_parseInputReport>
			return (1);
 8006952:	2301      	movs	r3, #1
 8006954:	e008      	b.n	8006968 <BNO080_dataAvailable+0x4c>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 8006956:	4b06      	ldr	r3, [pc, #24]	; (8006970 <BNO080_dataAvailable+0x54>)
 8006958:	789b      	ldrb	r3, [r3, #2]
 800695a:	2b02      	cmp	r3, #2
 800695c:	d103      	bne.n	8006966 <BNO080_dataAvailable+0x4a>
		{
			BNO080_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 800695e:	f000 f80b 	bl	8006978 <BNO080_parseCommandReport>
			return (1);
 8006962:	2301      	movs	r3, #1
 8006964:	e000      	b.n	8006968 <BNO080_dataAvailable+0x4c>
		}
	}
	return (0);
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	bd80      	pop	{r7, pc}
 800696c:	40020800 	.word	0x40020800
 8006970:	20000200 	.word	0x20000200
 8006974:	20000204 	.word	0x20000204

08006978 <BNO080_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void BNO080_parseCommandReport(void)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 800697e:	4b0a      	ldr	r3, [pc, #40]	; (80069a8 <BNO080_parseCommandReport+0x30>)
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	2bf1      	cmp	r3, #241	; 0xf1
 8006984:	d109      	bne.n	800699a <BNO080_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 8006986:	4b08      	ldr	r3, [pc, #32]	; (80069a8 <BNO080_parseCommandReport+0x30>)
 8006988:	789b      	ldrb	r3, [r3, #2]
 800698a:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 800698c:	79fb      	ldrb	r3, [r7, #7]
 800698e:	2b07      	cmp	r3, #7
 8006990:	d103      	bne.n	800699a <BNO080_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5]; //R0 - Status (0 = success, non-zero = fail)
 8006992:	4b05      	ldr	r3, [pc, #20]	; (80069a8 <BNO080_parseCommandReport+0x30>)
 8006994:	795a      	ldrb	r2, [r3, #5]
 8006996:	4b05      	ldr	r3, [pc, #20]	; (80069ac <BNO080_parseCommandReport+0x34>)
 8006998:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 800699a:	bf00      	nop
 800699c:	370c      	adds	r7, #12
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	20000204 	.word	0x20000204
 80069ac:	200002c8 	.word	0x200002c8

080069b0 <BNO080_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void BNO080_parseInputReport(void)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b087      	sub	sp, #28
 80069b4:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 80069b6:	4b98      	ldr	r3, [pc, #608]	; (8006c18 <BNO080_parseInputReport+0x268>)
 80069b8:	785b      	ldrb	r3, [r3, #1]
 80069ba:	021b      	lsls	r3, r3, #8
 80069bc:	b21a      	sxth	r2, r3
 80069be:	4b96      	ldr	r3, [pc, #600]	; (8006c18 <BNO080_parseInputReport+0x268>)
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	b21b      	sxth	r3, r3
 80069c4:	4313      	orrs	r3, r2
 80069c6:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 80069c8:	8a3b      	ldrh	r3, [r7, #16]
 80069ca:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80069ce:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 80069d0:	8a3b      	ldrh	r3, [r7, #16]
 80069d2:	3b04      	subs	r3, #4
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | (shtpData[3] << (8 * 2)) | (shtpData[2] << (8 * 1)) | (shtpData[1] << (8 * 0));
 80069d8:	4b90      	ldr	r3, [pc, #576]	; (8006c1c <BNO080_parseInputReport+0x26c>)
 80069da:	791b      	ldrb	r3, [r3, #4]
 80069dc:	061b      	lsls	r3, r3, #24
 80069de:	4a8f      	ldr	r2, [pc, #572]	; (8006c1c <BNO080_parseInputReport+0x26c>)
 80069e0:	78d2      	ldrb	r2, [r2, #3]
 80069e2:	0412      	lsls	r2, r2, #16
 80069e4:	4313      	orrs	r3, r2
 80069e6:	4a8d      	ldr	r2, [pc, #564]	; (8006c1c <BNO080_parseInputReport+0x26c>)
 80069e8:	7892      	ldrb	r2, [r2, #2]
 80069ea:	0212      	lsls	r2, r2, #8
 80069ec:	4313      	orrs	r3, r2
 80069ee:	4a8b      	ldr	r2, [pc, #556]	; (8006c1c <BNO080_parseInputReport+0x26c>)
 80069f0:	7852      	ldrb	r2, [r2, #1]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	4a8a      	ldr	r2, [pc, #552]	; (8006c20 <BNO080_parseInputReport+0x270>)
 80069f6:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[7] & 0x03; //Get status bits
 80069f8:	4b88      	ldr	r3, [pc, #544]	; (8006c1c <BNO080_parseInputReport+0x26c>)
 80069fa:	79db      	ldrb	r3, [r3, #7]
 80069fc:	f003 0303 	and.w	r3, r3, #3
 8006a00:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[10] << 8 | shtpData[9];
 8006a02:	4b86      	ldr	r3, [pc, #536]	; (8006c1c <BNO080_parseInputReport+0x26c>)
 8006a04:	7a9b      	ldrb	r3, [r3, #10]
 8006a06:	021b      	lsls	r3, r3, #8
 8006a08:	b21a      	sxth	r2, r3
 8006a0a:	4b84      	ldr	r3, [pc, #528]	; (8006c1c <BNO080_parseInputReport+0x26c>)
 8006a0c:	7a5b      	ldrb	r3, [r3, #9]
 8006a0e:	b21b      	sxth	r3, r3
 8006a10:	4313      	orrs	r3, r2
 8006a12:	b21b      	sxth	r3, r3
 8006a14:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[12] << 8 | shtpData[11];
 8006a16:	4b81      	ldr	r3, [pc, #516]	; (8006c1c <BNO080_parseInputReport+0x26c>)
 8006a18:	7b1b      	ldrb	r3, [r3, #12]
 8006a1a:	021b      	lsls	r3, r3, #8
 8006a1c:	b21a      	sxth	r2, r3
 8006a1e:	4b7f      	ldr	r3, [pc, #508]	; (8006c1c <BNO080_parseInputReport+0x26c>)
 8006a20:	7adb      	ldrb	r3, [r3, #11]
 8006a22:	b21b      	sxth	r3, r3
 8006a24:	4313      	orrs	r3, r2
 8006a26:	b21b      	sxth	r3, r3
 8006a28:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[14] << 8 | shtpData[13];
 8006a2a:	4b7c      	ldr	r3, [pc, #496]	; (8006c1c <BNO080_parseInputReport+0x26c>)
 8006a2c:	7b9b      	ldrb	r3, [r3, #14]
 8006a2e:	021b      	lsls	r3, r3, #8
 8006a30:	b21a      	sxth	r2, r3
 8006a32:	4b7a      	ldr	r3, [pc, #488]	; (8006c1c <BNO080_parseInputReport+0x26c>)
 8006a34:	7b5b      	ldrb	r3, [r3, #13]
 8006a36:	b21b      	sxth	r3, r3
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	b21b      	sxth	r3, r3
 8006a3c:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0;
 8006a42:	2300      	movs	r3, #0
 8006a44:	82bb      	strh	r3, [r7, #20]

	if (dataLength > 14)
 8006a46:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006a4a:	2b0e      	cmp	r3, #14
 8006a4c:	dd09      	ble.n	8006a62 <BNO080_parseInputReport+0xb2>
	{
		data4 = (uint16_t)shtpData[16] << 8 | shtpData[15];
 8006a4e:	4b73      	ldr	r3, [pc, #460]	; (8006c1c <BNO080_parseInputReport+0x26c>)
 8006a50:	7c1b      	ldrb	r3, [r3, #16]
 8006a52:	021b      	lsls	r3, r3, #8
 8006a54:	b21a      	sxth	r2, r3
 8006a56:	4b71      	ldr	r3, [pc, #452]	; (8006c1c <BNO080_parseInputReport+0x26c>)
 8006a58:	7bdb      	ldrb	r3, [r3, #15]
 8006a5a:	b21b      	sxth	r3, r3
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	b21b      	sxth	r3, r3
 8006a60:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength > 16)
 8006a62:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006a66:	2b10      	cmp	r3, #16
 8006a68:	dd09      	ble.n	8006a7e <BNO080_parseInputReport+0xce>
	{
		data5 = (uint16_t)shtpData[18] << 8 | shtpData[17];
 8006a6a:	4b6c      	ldr	r3, [pc, #432]	; (8006c1c <BNO080_parseInputReport+0x26c>)
 8006a6c:	7c9b      	ldrb	r3, [r3, #18]
 8006a6e:	021b      	lsls	r3, r3, #8
 8006a70:	b21a      	sxth	r2, r3
 8006a72:	4b6a      	ldr	r3, [pc, #424]	; (8006c1c <BNO080_parseInputReport+0x26c>)
 8006a74:	7c5b      	ldrb	r3, [r3, #17]
 8006a76:	b21b      	sxth	r3, r3
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	b21b      	sxth	r3, r3
 8006a7c:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	switch(shtpData[5])
 8006a7e:	4b67      	ldr	r3, [pc, #412]	; (8006c1c <BNO080_parseInputReport+0x26c>)
 8006a80:	795b      	ldrb	r3, [r3, #5]
 8006a82:	2b1e      	cmp	r3, #30
 8006a84:	dc46      	bgt.n	8006b14 <BNO080_parseInputReport+0x164>
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	f340 80bf 	ble.w	8006c0a <BNO080_parseInputReport+0x25a>
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	2b1d      	cmp	r3, #29
 8006a90:	f200 80bb 	bhi.w	8006c0a <BNO080_parseInputReport+0x25a>
 8006a94:	a201      	add	r2, pc, #4	; (adr r2, 8006a9c <BNO080_parseInputReport+0xec>)
 8006a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a9a:	bf00      	nop
 8006a9c:	08006b1b 	.word	0x08006b1b
 8006aa0:	08006b53 	.word	0x08006b53
 8006aa4:	08006b6f 	.word	0x08006b6f
 8006aa8:	08006b37 	.word	0x08006b37
 8006aac:	08006b8b 	.word	0x08006b8b
 8006ab0:	08006c0b 	.word	0x08006c0b
 8006ab4:	08006c0b 	.word	0x08006c0b
 8006ab8:	08006b8b 	.word	0x08006b8b
 8006abc:	08006c0b 	.word	0x08006c0b
 8006ac0:	08006c0b 	.word	0x08006c0b
 8006ac4:	08006c0b 	.word	0x08006c0b
 8006ac8:	08006c0b 	.word	0x08006c0b
 8006acc:	08006c0b 	.word	0x08006c0b
 8006ad0:	08006c0b 	.word	0x08006c0b
 8006ad4:	08006c0b 	.word	0x08006c0b
 8006ad8:	08006c0b 	.word	0x08006c0b
 8006adc:	08006bb3 	.word	0x08006bb3
 8006ae0:	08006c0b 	.word	0x08006c0b
 8006ae4:	08006bbb 	.word	0x08006bbb
 8006ae8:	08006c0b 	.word	0x08006c0b
 8006aec:	08006c0b 	.word	0x08006c0b
 8006af0:	08006c0b 	.word	0x08006c0b
 8006af4:	08006c0b 	.word	0x08006c0b
 8006af8:	08006c0b 	.word	0x08006c0b
 8006afc:	08006c0b 	.word	0x08006c0b
 8006b00:	08006c0b 	.word	0x08006c0b
 8006b04:	08006c0b 	.word	0x08006c0b
 8006b08:	08006c0b 	.word	0x08006c0b
 8006b0c:	08006c0b 	.word	0x08006c0b
 8006b10:	08006bc5 	.word	0x08006bc5
 8006b14:	2bf1      	cmp	r3, #241	; 0xf1
 8006b16:	d06d      	beq.n	8006bf4 <BNO080_parseInputReport+0x244>
			//See reference manual to add additional feature reports as needed
		}
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8006b18:	e077      	b.n	8006c0a <BNO080_parseInputReport+0x25a>
			accelAccuracy = status;
 8006b1a:	7bfb      	ldrb	r3, [r7, #15]
 8006b1c:	b29a      	uxth	r2, r3
 8006b1e:	4b41      	ldr	r3, [pc, #260]	; (8006c24 <BNO080_parseInputReport+0x274>)
 8006b20:	801a      	strh	r2, [r3, #0]
			rawAccelX = data1;
 8006b22:	4a41      	ldr	r2, [pc, #260]	; (8006c28 <BNO080_parseInputReport+0x278>)
 8006b24:	89bb      	ldrh	r3, [r7, #12]
 8006b26:	8013      	strh	r3, [r2, #0]
			rawAccelY = data2;
 8006b28:	4a40      	ldr	r2, [pc, #256]	; (8006c2c <BNO080_parseInputReport+0x27c>)
 8006b2a:	897b      	ldrh	r3, [r7, #10]
 8006b2c:	8013      	strh	r3, [r2, #0]
			rawAccelZ = data3;
 8006b2e:	4a40      	ldr	r2, [pc, #256]	; (8006c30 <BNO080_parseInputReport+0x280>)
 8006b30:	893b      	ldrh	r3, [r7, #8]
 8006b32:	8013      	strh	r3, [r2, #0]
			break;
 8006b34:	e069      	b.n	8006c0a <BNO080_parseInputReport+0x25a>
			accelLinAccuracy = status;
 8006b36:	7bfb      	ldrb	r3, [r7, #15]
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	4b3e      	ldr	r3, [pc, #248]	; (8006c34 <BNO080_parseInputReport+0x284>)
 8006b3c:	801a      	strh	r2, [r3, #0]
			rawLinAccelX = data1;
 8006b3e:	4a3e      	ldr	r2, [pc, #248]	; (8006c38 <BNO080_parseInputReport+0x288>)
 8006b40:	89bb      	ldrh	r3, [r7, #12]
 8006b42:	8013      	strh	r3, [r2, #0]
			rawLinAccelY = data2;
 8006b44:	4a3d      	ldr	r2, [pc, #244]	; (8006c3c <BNO080_parseInputReport+0x28c>)
 8006b46:	897b      	ldrh	r3, [r7, #10]
 8006b48:	8013      	strh	r3, [r2, #0]
			rawLinAccelZ = data3;
 8006b4a:	4a3d      	ldr	r2, [pc, #244]	; (8006c40 <BNO080_parseInputReport+0x290>)
 8006b4c:	893b      	ldrh	r3, [r7, #8]
 8006b4e:	8013      	strh	r3, [r2, #0]
			break;
 8006b50:	e05b      	b.n	8006c0a <BNO080_parseInputReport+0x25a>
			gyroAccuracy = status;
 8006b52:	7bfb      	ldrb	r3, [r7, #15]
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	4b3b      	ldr	r3, [pc, #236]	; (8006c44 <BNO080_parseInputReport+0x294>)
 8006b58:	801a      	strh	r2, [r3, #0]
			rawGyroX = data1;
 8006b5a:	4a3b      	ldr	r2, [pc, #236]	; (8006c48 <BNO080_parseInputReport+0x298>)
 8006b5c:	89bb      	ldrh	r3, [r7, #12]
 8006b5e:	8013      	strh	r3, [r2, #0]
			rawGyroY = data2;
 8006b60:	4a3a      	ldr	r2, [pc, #232]	; (8006c4c <BNO080_parseInputReport+0x29c>)
 8006b62:	897b      	ldrh	r3, [r7, #10]
 8006b64:	8013      	strh	r3, [r2, #0]
			rawGyroZ = data3;
 8006b66:	4a3a      	ldr	r2, [pc, #232]	; (8006c50 <BNO080_parseInputReport+0x2a0>)
 8006b68:	893b      	ldrh	r3, [r7, #8]
 8006b6a:	8013      	strh	r3, [r2, #0]
			break;
 8006b6c:	e04d      	b.n	8006c0a <BNO080_parseInputReport+0x25a>
			magAccuracy = status;
 8006b6e:	7bfb      	ldrb	r3, [r7, #15]
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	4b38      	ldr	r3, [pc, #224]	; (8006c54 <BNO080_parseInputReport+0x2a4>)
 8006b74:	801a      	strh	r2, [r3, #0]
			rawMagX = data1;
 8006b76:	4a38      	ldr	r2, [pc, #224]	; (8006c58 <BNO080_parseInputReport+0x2a8>)
 8006b78:	89bb      	ldrh	r3, [r7, #12]
 8006b7a:	8013      	strh	r3, [r2, #0]
			rawMagY = data2;
 8006b7c:	4a37      	ldr	r2, [pc, #220]	; (8006c5c <BNO080_parseInputReport+0x2ac>)
 8006b7e:	897b      	ldrh	r3, [r7, #10]
 8006b80:	8013      	strh	r3, [r2, #0]
			rawMagZ = data3;
 8006b82:	4a37      	ldr	r2, [pc, #220]	; (8006c60 <BNO080_parseInputReport+0x2b0>)
 8006b84:	893b      	ldrh	r3, [r7, #8]
 8006b86:	8013      	strh	r3, [r2, #0]
			break;
 8006b88:	e03f      	b.n	8006c0a <BNO080_parseInputReport+0x25a>
			quatAccuracy = status;
 8006b8a:	7bfb      	ldrb	r3, [r7, #15]
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	4b35      	ldr	r3, [pc, #212]	; (8006c64 <BNO080_parseInputReport+0x2b4>)
 8006b90:	801a      	strh	r2, [r3, #0]
			rawQuatI = data1;
 8006b92:	4a35      	ldr	r2, [pc, #212]	; (8006c68 <BNO080_parseInputReport+0x2b8>)
 8006b94:	89bb      	ldrh	r3, [r7, #12]
 8006b96:	8013      	strh	r3, [r2, #0]
			rawQuatJ = data2;
 8006b98:	4a34      	ldr	r2, [pc, #208]	; (8006c6c <BNO080_parseInputReport+0x2bc>)
 8006b9a:	897b      	ldrh	r3, [r7, #10]
 8006b9c:	8013      	strh	r3, [r2, #0]
			rawQuatK = data3;
 8006b9e:	4a34      	ldr	r2, [pc, #208]	; (8006c70 <BNO080_parseInputReport+0x2c0>)
 8006ba0:	893b      	ldrh	r3, [r7, #8]
 8006ba2:	8013      	strh	r3, [r2, #0]
			rawQuatReal = data4;
 8006ba4:	4a33      	ldr	r2, [pc, #204]	; (8006c74 <BNO080_parseInputReport+0x2c4>)
 8006ba6:	8afb      	ldrh	r3, [r7, #22]
 8006ba8:	8013      	strh	r3, [r2, #0]
			rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 8006baa:	4a33      	ldr	r2, [pc, #204]	; (8006c78 <BNO080_parseInputReport+0x2c8>)
 8006bac:	8abb      	ldrh	r3, [r7, #20]
 8006bae:	8013      	strh	r3, [r2, #0]
			break;
 8006bb0:	e02b      	b.n	8006c0a <BNO080_parseInputReport+0x25a>
			stepCount = data3; //Bytes 8/9
 8006bb2:	4a32      	ldr	r2, [pc, #200]	; (8006c7c <BNO080_parseInputReport+0x2cc>)
 8006bb4:	893b      	ldrh	r3, [r7, #8]
 8006bb6:	8013      	strh	r3, [r2, #0]
			break;
 8006bb8:	e027      	b.n	8006c0a <BNO080_parseInputReport+0x25a>
			stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 8006bba:	4b18      	ldr	r3, [pc, #96]	; (8006c1c <BNO080_parseInputReport+0x26c>)
 8006bbc:	7a5a      	ldrb	r2, [r3, #9]
 8006bbe:	4b30      	ldr	r3, [pc, #192]	; (8006c80 <BNO080_parseInputReport+0x2d0>)
 8006bc0:	701a      	strb	r2, [r3, #0]
			break;
 8006bc2:	e022      	b.n	8006c0a <BNO080_parseInputReport+0x25a>
			activityClassifier = shtpData[5 + 5]; //Most likely state
 8006bc4:	4b15      	ldr	r3, [pc, #84]	; (8006c1c <BNO080_parseInputReport+0x26c>)
 8006bc6:	7a9a      	ldrb	r2, [r3, #10]
 8006bc8:	4b2e      	ldr	r3, [pc, #184]	; (8006c84 <BNO080_parseInputReport+0x2d4>)
 8006bca:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8006bcc:	2300      	movs	r3, #0
 8006bce:	74fb      	strb	r3, [r7, #19]
 8006bd0:	e00c      	b.n	8006bec <BNO080_parseInputReport+0x23c>
				_activityConfidences[x] = shtpData[11 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 8006bd2:	7cfb      	ldrb	r3, [r7, #19]
 8006bd4:	f103 020b 	add.w	r2, r3, #11
 8006bd8:	4b2b      	ldr	r3, [pc, #172]	; (8006c88 <BNO080_parseInputReport+0x2d8>)
 8006bda:	6819      	ldr	r1, [r3, #0]
 8006bdc:	7cfb      	ldrb	r3, [r7, #19]
 8006bde:	440b      	add	r3, r1
 8006be0:	490e      	ldr	r1, [pc, #56]	; (8006c1c <BNO080_parseInputReport+0x26c>)
 8006be2:	5c8a      	ldrb	r2, [r1, r2]
 8006be4:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8006be6:	7cfb      	ldrb	r3, [r7, #19]
 8006be8:	3301      	adds	r3, #1
 8006bea:	74fb      	strb	r3, [r7, #19]
 8006bec:	7cfb      	ldrb	r3, [r7, #19]
 8006bee:	2b08      	cmp	r3, #8
 8006bf0:	d9ef      	bls.n	8006bd2 <BNO080_parseInputReport+0x222>
			break;
 8006bf2:	e00a      	b.n	8006c0a <BNO080_parseInputReport+0x25a>
			uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 8006bf4:	4b09      	ldr	r3, [pc, #36]	; (8006c1c <BNO080_parseInputReport+0x26c>)
 8006bf6:	79db      	ldrb	r3, [r3, #7]
 8006bf8:	71fb      	strb	r3, [r7, #7]
			if (command == COMMAND_ME_CALIBRATE)
 8006bfa:	79fb      	ldrb	r3, [r7, #7]
 8006bfc:	2b07      	cmp	r3, #7
 8006bfe:	d103      	bne.n	8006c08 <BNO080_parseInputReport+0x258>
				calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 8006c00:	4b06      	ldr	r3, [pc, #24]	; (8006c1c <BNO080_parseInputReport+0x26c>)
 8006c02:	7a9a      	ldrb	r2, [r3, #10]
 8006c04:	4b21      	ldr	r3, [pc, #132]	; (8006c8c <BNO080_parseInputReport+0x2dc>)
 8006c06:	701a      	strb	r2, [r3, #0]
			break;
 8006c08:	bf00      	nop
}
 8006c0a:	bf00      	nop
 8006c0c:	371c      	adds	r7, #28
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	20000200 	.word	0x20000200
 8006c1c:	20000204 	.word	0x20000204
 8006c20:	200002bc 	.word	0x200002bc
 8006c24:	20000292 	.word	0x20000292
 8006c28:	2000028c 	.word	0x2000028c
 8006c2c:	2000028e 	.word	0x2000028e
 8006c30:	20000290 	.word	0x20000290
 8006c34:	2000029a 	.word	0x2000029a
 8006c38:	20000294 	.word	0x20000294
 8006c3c:	20000296 	.word	0x20000296
 8006c40:	20000298 	.word	0x20000298
 8006c44:	200002a2 	.word	0x200002a2
 8006c48:	2000029c 	.word	0x2000029c
 8006c4c:	2000029e 	.word	0x2000029e
 8006c50:	200002a0 	.word	0x200002a0
 8006c54:	200002aa 	.word	0x200002aa
 8006c58:	200002a4 	.word	0x200002a4
 8006c5c:	200002a6 	.word	0x200002a6
 8006c60:	200002a8 	.word	0x200002a8
 8006c64:	200002b6 	.word	0x200002b6
 8006c68:	200002ac 	.word	0x200002ac
 8006c6c:	200002ae 	.word	0x200002ae
 8006c70:	200002b0 	.word	0x200002b0
 8006c74:	200002b2 	.word	0x200002b2
 8006c78:	200002b4 	.word	0x200002b4
 8006c7c:	200002b8 	.word	0x200002b8
 8006c80:	200002c0 	.word	0x200002c0
 8006c84:	200002c1 	.word	0x200002c1
 8006c88:	200002c4 	.word	0x200002c4
 8006c8c:	200002c8 	.word	0x200002c8

08006c90 <BNO080_getQuatI>:

//Return the rotation vector quaternion I
float BNO080_getQuatI()
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatI, rotationVector_Q1);
 8006c94:	4b07      	ldr	r3, [pc, #28]	; (8006cb4 <BNO080_getQuatI+0x24>)
 8006c96:	881b      	ldrh	r3, [r3, #0]
 8006c98:	b21b      	sxth	r3, r3
 8006c9a:	4a07      	ldr	r2, [pc, #28]	; (8006cb8 <BNO080_getQuatI+0x28>)
 8006c9c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006ca0:	b2d2      	uxtb	r2, r2
 8006ca2:	4611      	mov	r1, r2
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f000 f8bb 	bl	8006e20 <BNO080_qToFloat>
 8006caa:	eef0 7a40 	vmov.f32	s15, s0
}
 8006cae:	eeb0 0a67 	vmov.f32	s0, s15
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	200002ac 	.word	0x200002ac
 8006cb8:	20000006 	.word	0x20000006

08006cbc <BNO080_getQuatJ>:

//Return the rotation vector quaternion J
float BNO080_getQuatJ()
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatJ, rotationVector_Q1);
 8006cc0:	4b07      	ldr	r3, [pc, #28]	; (8006ce0 <BNO080_getQuatJ+0x24>)
 8006cc2:	881b      	ldrh	r3, [r3, #0]
 8006cc4:	b21b      	sxth	r3, r3
 8006cc6:	4a07      	ldr	r2, [pc, #28]	; (8006ce4 <BNO080_getQuatJ+0x28>)
 8006cc8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006ccc:	b2d2      	uxtb	r2, r2
 8006cce:	4611      	mov	r1, r2
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f000 f8a5 	bl	8006e20 <BNO080_qToFloat>
 8006cd6:	eef0 7a40 	vmov.f32	s15, s0
}
 8006cda:	eeb0 0a67 	vmov.f32	s0, s15
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	200002ae 	.word	0x200002ae
 8006ce4:	20000006 	.word	0x20000006

08006ce8 <BNO080_getQuatK>:

//Return the rotation vector quaternion K
float BNO080_getQuatK()
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatK, rotationVector_Q1);
 8006cec:	4b07      	ldr	r3, [pc, #28]	; (8006d0c <BNO080_getQuatK+0x24>)
 8006cee:	881b      	ldrh	r3, [r3, #0]
 8006cf0:	b21b      	sxth	r3, r3
 8006cf2:	4a07      	ldr	r2, [pc, #28]	; (8006d10 <BNO080_getQuatK+0x28>)
 8006cf4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006cf8:	b2d2      	uxtb	r2, r2
 8006cfa:	4611      	mov	r1, r2
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f000 f88f 	bl	8006e20 <BNO080_qToFloat>
 8006d02:	eef0 7a40 	vmov.f32	s15, s0
}
 8006d06:	eeb0 0a67 	vmov.f32	s0, s15
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	200002b0 	.word	0x200002b0
 8006d10:	20000006 	.word	0x20000006

08006d14 <BNO080_getQuatReal>:

//Return the rotation vector quaternion Real
float BNO080_getQuatReal()
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatReal, rotationVector_Q1);
 8006d18:	4b07      	ldr	r3, [pc, #28]	; (8006d38 <BNO080_getQuatReal+0x24>)
 8006d1a:	881b      	ldrh	r3, [r3, #0]
 8006d1c:	b21b      	sxth	r3, r3
 8006d1e:	4a07      	ldr	r2, [pc, #28]	; (8006d3c <BNO080_getQuatReal+0x28>)
 8006d20:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006d24:	b2d2      	uxtb	r2, r2
 8006d26:	4611      	mov	r1, r2
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f000 f879 	bl	8006e20 <BNO080_qToFloat>
 8006d2e:	eef0 7a40 	vmov.f32	s15, s0
}
 8006d32:	eeb0 0a67 	vmov.f32	s0, s15
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	200002b2 	.word	0x200002b2
 8006d3c:	20000006 	.word	0x20000006

08006d40 <BNO080_getQuatRadianAccuracy>:

//Return the rotation vector accuracy
float BNO080_getQuatRadianAccuracy()
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
 8006d44:	4b07      	ldr	r3, [pc, #28]	; (8006d64 <BNO080_getQuatRadianAccuracy+0x24>)
 8006d46:	881b      	ldrh	r3, [r3, #0]
 8006d48:	b21b      	sxth	r3, r3
 8006d4a:	4a07      	ldr	r2, [pc, #28]	; (8006d68 <BNO080_getQuatRadianAccuracy+0x28>)
 8006d4c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006d50:	b2d2      	uxtb	r2, r2
 8006d52:	4611      	mov	r1, r2
 8006d54:	4618      	mov	r0, r3
 8006d56:	f000 f863 	bl	8006e20 <BNO080_qToFloat>
 8006d5a:	eef0 7a40 	vmov.f32	s15, s0
}
 8006d5e:	eeb0 0a67 	vmov.f32	s0, s15
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	200002b4 	.word	0x200002b4
 8006d68:	20000006 	.word	0x20000006

08006d6c <BNO080_getQuatAccuracy>:

//Return the acceleration component
uint8_t BNO080_getQuatAccuracy()
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	af00      	add	r7, sp, #0
	return (quatAccuracy);
 8006d70:	4b03      	ldr	r3, [pc, #12]	; (8006d80 <BNO080_getQuatAccuracy+0x14>)
 8006d72:	881b      	ldrh	r3, [r3, #0]
 8006d74:	b2db      	uxtb	r3, r3
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr
 8006d80:	200002b6 	.word	0x200002b6

08006d84 <BNO080_getMagX>:
	return (gyroAccuracy);
}

//Return the magnetometer component
float BNO080_getMagX()
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagX, magnetometer_Q1);
 8006d88:	4b07      	ldr	r3, [pc, #28]	; (8006da8 <BNO080_getMagX+0x24>)
 8006d8a:	881b      	ldrh	r3, [r3, #0]
 8006d8c:	b21b      	sxth	r3, r3
 8006d8e:	4a07      	ldr	r2, [pc, #28]	; (8006dac <BNO080_getMagX+0x28>)
 8006d90:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006d94:	b2d2      	uxtb	r2, r2
 8006d96:	4611      	mov	r1, r2
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 f841 	bl	8006e20 <BNO080_qToFloat>
 8006d9e:	eef0 7a40 	vmov.f32	s15, s0
}
 8006da2:	eeb0 0a67 	vmov.f32	s0, s15
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	200002a4 	.word	0x200002a4
 8006dac:	20000008 	.word	0x20000008

08006db0 <BNO080_getMagY>:

//Return the magnetometer component
float BNO080_getMagY()
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagY, magnetometer_Q1);
 8006db4:	4b07      	ldr	r3, [pc, #28]	; (8006dd4 <BNO080_getMagY+0x24>)
 8006db6:	881b      	ldrh	r3, [r3, #0]
 8006db8:	b21b      	sxth	r3, r3
 8006dba:	4a07      	ldr	r2, [pc, #28]	; (8006dd8 <BNO080_getMagY+0x28>)
 8006dbc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006dc0:	b2d2      	uxtb	r2, r2
 8006dc2:	4611      	mov	r1, r2
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f000 f82b 	bl	8006e20 <BNO080_qToFloat>
 8006dca:	eef0 7a40 	vmov.f32	s15, s0
}
 8006dce:	eeb0 0a67 	vmov.f32	s0, s15
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	200002a6 	.word	0x200002a6
 8006dd8:	20000008 	.word	0x20000008

08006ddc <BNO080_getMagZ>:

//Return the magnetometer component
float BNO080_getMagZ()
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagZ, magnetometer_Q1);
 8006de0:	4b07      	ldr	r3, [pc, #28]	; (8006e00 <BNO080_getMagZ+0x24>)
 8006de2:	881b      	ldrh	r3, [r3, #0]
 8006de4:	b21b      	sxth	r3, r3
 8006de6:	4a07      	ldr	r2, [pc, #28]	; (8006e04 <BNO080_getMagZ+0x28>)
 8006de8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006dec:	b2d2      	uxtb	r2, r2
 8006dee:	4611      	mov	r1, r2
 8006df0:	4618      	mov	r0, r3
 8006df2:	f000 f815 	bl	8006e20 <BNO080_qToFloat>
 8006df6:	eef0 7a40 	vmov.f32	s15, s0
}
 8006dfa:	eeb0 0a67 	vmov.f32	s0, s15
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	200002a8 	.word	0x200002a8
 8006e04:	20000008 	.word	0x20000008

08006e08 <BNO080_getMagAccuracy>:

//Return the mag component
uint8_t BNO080_getMagAccuracy()
{
 8006e08:	b480      	push	{r7}
 8006e0a:	af00      	add	r7, sp, #0
	return (magAccuracy);
 8006e0c:	4b03      	ldr	r3, [pc, #12]	; (8006e1c <BNO080_getMagAccuracy+0x14>)
 8006e0e:	881b      	ldrh	r3, [r3, #0]
 8006e10:	b2db      	uxtb	r3, r3
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	200002aa 	.word	0x200002aa

08006e20 <BNO080_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	ed2d 8b02 	vpush	{d8}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	460a      	mov	r2, r1
 8006e2e:	80fb      	strh	r3, [r7, #6]
 8006e30:	4613      	mov	r3, r2
 8006e32:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 8006e34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e38:	ee07 3a90 	vmov	s15, r3
 8006e3c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8006e40:	797b      	ldrb	r3, [r7, #5]
 8006e42:	425b      	negs	r3, r3
 8006e44:	ee07 3a90 	vmov	s15, r3
 8006e48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e4c:	eef0 0a67 	vmov.f32	s1, s15
 8006e50:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8006e54:	f008 fabc 	bl	800f3d0 <powf>
 8006e58:	eef0 7a40 	vmov.f32	s15, s0
 8006e5c:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 8006e60:	eeb0 0a67 	vmov.f32	s0, s15
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	ecbd 8b02 	vpop	{d8}
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <BNO080_enableGameRotationVector>:
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
}

//Sends the packet to enable the rotation vector
void BNO080_enableGameRotationVector(uint16_t timeBetweenReports)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b082      	sub	sp, #8
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	4603      	mov	r3, r0
 8006e76:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_GAME_ROTATION_VECTOR, timeBetweenReports, 0);
 8006e78:	88fb      	ldrh	r3, [r7, #6]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	2008      	movs	r0, #8
 8006e80:	f000 f82a 	bl	8006ed8 <BNO080_setFeatureCommand>
}
 8006e84:	bf00      	nop
 8006e86:	3708      	adds	r7, #8
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <BNO080_enableMagnetometer>:
	BNO080_setFeatureCommand(SENSOR_REPORTID_GYROSCOPE, timeBetweenReports, 0);
}

//Sends the packet to enable the magnetometer
void BNO080_enableMagnetometer(uint16_t timeBetweenReports)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	4603      	mov	r3, r0
 8006e94:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_MAGNETIC_FIELD, timeBetweenReports, 0);
 8006e96:	88fb      	ldrh	r3, [r7, #6]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	2003      	movs	r0, #3
 8006e9e:	f000 f81b 	bl	8006ed8 <BNO080_setFeatureCommand>
}
 8006ea2:	bf00      	nop
 8006ea4:	3708      	adds	r7, #8
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <BNO080_calibrateAll>:
	BNO080_sendCalibrateCommand(CALIBRATE_PLANAR_ACCEL);
}

//See 2.2 of the Calibration Procedure document 1000-4044
void BNO080_calibrateAll()
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	af00      	add	r7, sp, #0
	BNO080_sendCalibrateCommand(CALIBRATE_ACCEL_GYRO_MAG);
 8006eae:	2004      	movs	r0, #4
 8006eb0:	f000 f884 	bl	8006fbc <BNO080_sendCalibrateCommand>
}
 8006eb4:	bf00      	nop
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <BNO080_calibrationComplete>:
}

//See page 51 of reference manual - ME Calibration Response
//Byte 5 is parsed during the readPacket and stored in calibrationStatus
int BNO080_calibrationComplete()
{
 8006eb8:	b480      	push	{r7}
 8006eba:	af00      	add	r7, sp, #0
	if (calibrationStatus == 0)
 8006ebc:	4b05      	ldr	r3, [pc, #20]	; (8006ed4 <BNO080_calibrationComplete+0x1c>)
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d101      	bne.n	8006ec8 <BNO080_calibrationComplete+0x10>
		return (1);
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e000      	b.n	8006eca <BNO080_calibrationComplete+0x12>
	return (0);
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr
 8006ed4:	200002c8 	.word	0x200002c8

08006ed8 <BNO080_setFeatureCommand>:

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	4603      	mov	r3, r0
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
 8006ee4:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8006ee6:	4b24      	ldr	r3, [pc, #144]	; (8006f78 <BNO080_setFeatureCommand+0xa0>)
 8006ee8:	22fd      	movs	r2, #253	; 0xfd
 8006eea:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8006eec:	4a22      	ldr	r2, [pc, #136]	; (8006f78 <BNO080_setFeatureCommand+0xa0>)
 8006eee:	7bfb      	ldrb	r3, [r7, #15]
 8006ef0:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 8006ef2:	4b21      	ldr	r3, [pc, #132]	; (8006f78 <BNO080_setFeatureCommand+0xa0>)
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 8006ef8:	4b1f      	ldr	r3, [pc, #124]	; (8006f78 <BNO080_setFeatureCommand+0xa0>)
 8006efa:	2200      	movs	r2, #0
 8006efc:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 8006efe:	4b1e      	ldr	r3, [pc, #120]	; (8006f78 <BNO080_setFeatureCommand+0xa0>)
 8006f00:	2200      	movs	r2, #0
 8006f02:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	b2da      	uxtb	r2, r3
 8006f08:	4b1b      	ldr	r3, [pc, #108]	; (8006f78 <BNO080_setFeatureCommand+0xa0>)
 8006f0a:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	0a1b      	lsrs	r3, r3, #8
 8006f10:	b2da      	uxtb	r2, r3
 8006f12:	4b19      	ldr	r3, [pc, #100]	; (8006f78 <BNO080_setFeatureCommand+0xa0>)
 8006f14:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	0c1b      	lsrs	r3, r3, #16
 8006f1a:	b2da      	uxtb	r2, r3
 8006f1c:	4b16      	ldr	r3, [pc, #88]	; (8006f78 <BNO080_setFeatureCommand+0xa0>)
 8006f1e:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	0e1b      	lsrs	r3, r3, #24
 8006f24:	b2da      	uxtb	r2, r3
 8006f26:	4b14      	ldr	r3, [pc, #80]	; (8006f78 <BNO080_setFeatureCommand+0xa0>)
 8006f28:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 8006f2a:	4b13      	ldr	r3, [pc, #76]	; (8006f78 <BNO080_setFeatureCommand+0xa0>)
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8006f30:	4b11      	ldr	r3, [pc, #68]	; (8006f78 <BNO080_setFeatureCommand+0xa0>)
 8006f32:	2200      	movs	r2, #0
 8006f34:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 8006f36:	4b10      	ldr	r3, [pc, #64]	; (8006f78 <BNO080_setFeatureCommand+0xa0>)
 8006f38:	2200      	movs	r2, #0
 8006f3a:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8006f3c:	4b0e      	ldr	r3, [pc, #56]	; (8006f78 <BNO080_setFeatureCommand+0xa0>)
 8006f3e:	2200      	movs	r2, #0
 8006f40:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	b2da      	uxtb	r2, r3
 8006f46:	4b0c      	ldr	r3, [pc, #48]	; (8006f78 <BNO080_setFeatureCommand+0xa0>)
 8006f48:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	0a1b      	lsrs	r3, r3, #8
 8006f4e:	b2da      	uxtb	r2, r3
 8006f50:	4b09      	ldr	r3, [pc, #36]	; (8006f78 <BNO080_setFeatureCommand+0xa0>)
 8006f52:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	0c1b      	lsrs	r3, r3, #16
 8006f58:	b2da      	uxtb	r2, r3
 8006f5a:	4b07      	ldr	r3, [pc, #28]	; (8006f78 <BNO080_setFeatureCommand+0xa0>)
 8006f5c:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	0e1b      	lsrs	r3, r3, #24
 8006f62:	b2da      	uxtb	r2, r3
 8006f64:	4b04      	ldr	r3, [pc, #16]	; (8006f78 <BNO080_setFeatureCommand+0xa0>)
 8006f66:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 8006f68:	2111      	movs	r1, #17
 8006f6a:	2002      	movs	r0, #2
 8006f6c:	f000 f938 	bl	80071e0 <BNO080_sendPacket>
}
 8006f70:	bf00      	nop
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	20000204 	.word	0x20000204

08006f7c <BNO080_sendCommand>:

//Tell the sensor to do a command
//See 6.3.8 page 41, Command request
//The caller is expected to set P0 through P8 prior to calling
void BNO080_sendCommand(uint8_t command)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	4603      	mov	r3, r0
 8006f84:	71fb      	strb	r3, [r7, #7]
	shtpData[0] = SHTP_REPORT_COMMAND_REQUEST; //Command Request
 8006f86:	4b0b      	ldr	r3, [pc, #44]	; (8006fb4 <BNO080_sendCommand+0x38>)
 8006f88:	22f2      	movs	r2, #242	; 0xf2
 8006f8a:	701a      	strb	r2, [r3, #0]
	shtpData[1] = commandSequenceNumber++;	 //Increments automatically each function call
 8006f8c:	4b0a      	ldr	r3, [pc, #40]	; (8006fb8 <BNO080_sendCommand+0x3c>)
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	1c5a      	adds	r2, r3, #1
 8006f92:	b2d1      	uxtb	r1, r2
 8006f94:	4a08      	ldr	r2, [pc, #32]	; (8006fb8 <BNO080_sendCommand+0x3c>)
 8006f96:	7011      	strb	r1, [r2, #0]
 8006f98:	4a06      	ldr	r2, [pc, #24]	; (8006fb4 <BNO080_sendCommand+0x38>)
 8006f9a:	7053      	strb	r3, [r2, #1]
	shtpData[2] = command;					   //Command
 8006f9c:	4a05      	ldr	r2, [pc, #20]	; (8006fb4 <BNO080_sendCommand+0x38>)
 8006f9e:	79fb      	ldrb	r3, [r7, #7]
 8006fa0:	7093      	strb	r3, [r2, #2]
	shtpData[9] = 0;
	shtpData[10] = 0;
	shtpData[11] = 0;*/

	//Transmit packet on channel 2, 12 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 12);
 8006fa2:	210c      	movs	r1, #12
 8006fa4:	2002      	movs	r0, #2
 8006fa6:	f000 f91b 	bl	80071e0 <BNO080_sendPacket>
}
 8006faa:	bf00      	nop
 8006fac:	3708      	adds	r7, #8
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	20000204 	.word	0x20000204
 8006fb8:	2000028a 	.word	0x2000028a

08006fbc <BNO080_sendCalibrateCommand>:

//This tells the BNO080 to begin calibrating
//See page 50 of reference manual and the 1000-4044 calibration doc
void BNO080_sendCalibrateCommand(uint8_t thingToCalibrate)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	71fb      	strb	r3, [r7, #7]
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	73fb      	strb	r3, [r7, #15]
 8006fca:	e006      	b.n	8006fda <BNO080_sendCalibrateCommand+0x1e>
		shtpData[x] = 0;
 8006fcc:	7bfb      	ldrb	r3, [r7, #15]
 8006fce:	4a1d      	ldr	r2, [pc, #116]	; (8007044 <BNO080_sendCalibrateCommand+0x88>)
 8006fd0:	2100      	movs	r1, #0
 8006fd2:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8006fd4:	7bfb      	ldrb	r3, [r7, #15]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	73fb      	strb	r3, [r7, #15]
 8006fda:	7bfb      	ldrb	r3, [r7, #15]
 8006fdc:	2b0b      	cmp	r3, #11
 8006fde:	d9f5      	bls.n	8006fcc <BNO080_sendCalibrateCommand+0x10>

	if (thingToCalibrate == CALIBRATE_ACCEL)
 8006fe0:	79fb      	ldrb	r3, [r7, #7]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d103      	bne.n	8006fee <BNO080_sendCalibrateCommand+0x32>
		shtpData[3] = 1;
 8006fe6:	4b17      	ldr	r3, [pc, #92]	; (8007044 <BNO080_sendCalibrateCommand+0x88>)
 8006fe8:	2201      	movs	r2, #1
 8006fea:	70da      	strb	r2, [r3, #3]
 8006fec:	e020      	b.n	8007030 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_GYRO)
 8006fee:	79fb      	ldrb	r3, [r7, #7]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d103      	bne.n	8006ffc <BNO080_sendCalibrateCommand+0x40>
		shtpData[4] = 1;
 8006ff4:	4b13      	ldr	r3, [pc, #76]	; (8007044 <BNO080_sendCalibrateCommand+0x88>)
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	711a      	strb	r2, [r3, #4]
 8006ffa:	e019      	b.n	8007030 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_MAG)
 8006ffc:	79fb      	ldrb	r3, [r7, #7]
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d103      	bne.n	800700a <BNO080_sendCalibrateCommand+0x4e>
		shtpData[5] = 1;
 8007002:	4b10      	ldr	r3, [pc, #64]	; (8007044 <BNO080_sendCalibrateCommand+0x88>)
 8007004:	2201      	movs	r2, #1
 8007006:	715a      	strb	r2, [r3, #5]
 8007008:	e012      	b.n	8007030 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_PLANAR_ACCEL)
 800700a:	79fb      	ldrb	r3, [r7, #7]
 800700c:	2b03      	cmp	r3, #3
 800700e:	d103      	bne.n	8007018 <BNO080_sendCalibrateCommand+0x5c>
		shtpData[7] = 1;
 8007010:	4b0c      	ldr	r3, [pc, #48]	; (8007044 <BNO080_sendCalibrateCommand+0x88>)
 8007012:	2201      	movs	r2, #1
 8007014:	71da      	strb	r2, [r3, #7]
 8007016:	e00b      	b.n	8007030 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_ACCEL_GYRO_MAG)
 8007018:	79fb      	ldrb	r3, [r7, #7]
 800701a:	2b04      	cmp	r3, #4
 800701c:	d108      	bne.n	8007030 <BNO080_sendCalibrateCommand+0x74>
	{
		shtpData[3] = 1;
 800701e:	4b09      	ldr	r3, [pc, #36]	; (8007044 <BNO080_sendCalibrateCommand+0x88>)
 8007020:	2201      	movs	r2, #1
 8007022:	70da      	strb	r2, [r3, #3]
		shtpData[4] = 1;
 8007024:	4b07      	ldr	r3, [pc, #28]	; (8007044 <BNO080_sendCalibrateCommand+0x88>)
 8007026:	2201      	movs	r2, #1
 8007028:	711a      	strb	r2, [r3, #4]
		shtpData[5] = 1;
 800702a:	4b06      	ldr	r3, [pc, #24]	; (8007044 <BNO080_sendCalibrateCommand+0x88>)
 800702c:	2201      	movs	r2, #1
 800702e:	715a      	strb	r2, [r3, #5]
	}
	else if (thingToCalibrate == CALIBRATE_STOP)
		; //Do nothing, bytes are set to zero

	//Make the internal calStatus variable non-zero (operation failed) so that user can test while we wait
	calibrationStatus = 1;
 8007030:	4b05      	ldr	r3, [pc, #20]	; (8007048 <BNO080_sendCalibrateCommand+0x8c>)
 8007032:	2201      	movs	r2, #1
 8007034:	701a      	strb	r2, [r3, #0]

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_ME_CALIBRATE);
 8007036:	2007      	movs	r0, #7
 8007038:	f7ff ffa0 	bl	8006f7c <BNO080_sendCommand>
}
 800703c:	bf00      	nop
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	20000204 	.word	0x20000204
 8007048:	200002c8 	.word	0x200002c8

0800704c <BNO080_requestCalibrationStatus>:

//Request ME Calibration Status from BNO080
//See page 51 of reference manual
void BNO080_requestCalibrationStatus()
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8007052:	2303      	movs	r3, #3
 8007054:	71fb      	strb	r3, [r7, #7]
 8007056:	e006      	b.n	8007066 <BNO080_requestCalibrationStatus+0x1a>
		shtpData[x] = 0;
 8007058:	79fb      	ldrb	r3, [r7, #7]
 800705a:	4a09      	ldr	r2, [pc, #36]	; (8007080 <BNO080_requestCalibrationStatus+0x34>)
 800705c:	2100      	movs	r1, #0
 800705e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8007060:	79fb      	ldrb	r3, [r7, #7]
 8007062:	3301      	adds	r3, #1
 8007064:	71fb      	strb	r3, [r7, #7]
 8007066:	79fb      	ldrb	r3, [r7, #7]
 8007068:	2b0b      	cmp	r3, #11
 800706a:	d9f5      	bls.n	8007058 <BNO080_requestCalibrationStatus+0xc>

	shtpData[6] = 0x01; //P3 - 0x01 - Subcommand: Get ME Calibration
 800706c:	4b04      	ldr	r3, [pc, #16]	; (8007080 <BNO080_requestCalibrationStatus+0x34>)
 800706e:	2201      	movs	r2, #1
 8007070:	719a      	strb	r2, [r3, #6]

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_ME_CALIBRATE);
 8007072:	2007      	movs	r0, #7
 8007074:	f7ff ff82 	bl	8006f7c <BNO080_sendCommand>
}
 8007078:	bf00      	nop
 800707a:	3708      	adds	r7, #8
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	20000204 	.word	0x20000204

08007084 <BNO080_saveCalibration>:

//This tells the BNO080 to save the Dynamic Calibration Data (DCD) to flash
//See page 49 of reference manual and the 1000-4044 calibration doc
void BNO080_saveCalibration()
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 800708a:	2303      	movs	r3, #3
 800708c:	71fb      	strb	r3, [r7, #7]
 800708e:	e006      	b.n	800709e <BNO080_saveCalibration+0x1a>
		shtpData[x] = 0;
 8007090:	79fb      	ldrb	r3, [r7, #7]
 8007092:	4a08      	ldr	r2, [pc, #32]	; (80070b4 <BNO080_saveCalibration+0x30>)
 8007094:	2100      	movs	r1, #0
 8007096:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8007098:	79fb      	ldrb	r3, [r7, #7]
 800709a:	3301      	adds	r3, #1
 800709c:	71fb      	strb	r3, [r7, #7]
 800709e:	79fb      	ldrb	r3, [r7, #7]
 80070a0:	2b0b      	cmp	r3, #11
 80070a2:	d9f5      	bls.n	8007090 <BNO080_saveCalibration+0xc>

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_DCD); //Save DCD command
 80070a4:	2006      	movs	r0, #6
 80070a6:	f7ff ff69 	bl	8006f7c <BNO080_sendCommand>
}
 80070aa:	bf00      	nop
 80070ac:	3708      	adds	r7, #8
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	20000204 	.word	0x20000204

080070b8 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 80070be:	2300      	movs	r3, #0
 80070c0:	607b      	str	r3, [r7, #4]
 80070c2:	e00c      	b.n	80070de <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 80070c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80070c8:	480b      	ldr	r0, [pc, #44]	; (80070f8 <BNO080_waitForSPI+0x40>)
 80070ca:	f7ff fa74 	bl	80065b6 <LL_GPIO_IsInputPinSet>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d101      	bne.n	80070d8 <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 80070d4:	2301      	movs	r3, #1
 80070d6:	e00a      	b.n	80070ee <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	3301      	adds	r3, #1
 80070dc:	607b      	str	r3, [r7, #4]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e4:	d1ee      	bne.n	80070c4 <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 80070e6:	4805      	ldr	r0, [pc, #20]	; (80070fc <BNO080_waitForSPI+0x44>)
 80070e8:	f006 f890 	bl	800d20c <puts>
	return (0);
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3708      	adds	r7, #8
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	40020800 	.word	0x40020800
 80070fc:	080100e8 	.word	0x080100e8

08007100 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8007106:	f44f 7180 	mov.w	r1, #256	; 0x100
 800710a:	4831      	ldr	r0, [pc, #196]	; (80071d0 <BNO080_receivePacket+0xd0>)
 800710c:	f7ff fa53 	bl	80065b6 <LL_GPIO_IsInputPinSet>
 8007110:	4603      	mov	r3, r0
 8007112:	2b01      	cmp	r3, #1
 8007114:	d101      	bne.n	800711a <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 8007116:	2300      	movs	r3, #0
 8007118:	e056      	b.n	80071c8 <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 800711a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800711e:	482d      	ldr	r0, [pc, #180]	; (80071d4 <BNO080_receivePacket+0xd4>)
 8007120:	f7ff fa6c 	bl	80065fc <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 8007124:	2000      	movs	r0, #0
 8007126:	f7ff fbd7 	bl	80068d8 <SPI2_SendByte>
 800712a:	4603      	mov	r3, r0
 800712c:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 800712e:	2000      	movs	r0, #0
 8007130:	f7ff fbd2 	bl	80068d8 <SPI2_SendByte>
 8007134:	4603      	mov	r3, r0
 8007136:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 8007138:	2000      	movs	r0, #0
 800713a:	f7ff fbcd 	bl	80068d8 <SPI2_SendByte>
 800713e:	4603      	mov	r3, r0
 8007140:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 8007142:	2000      	movs	r0, #0
 8007144:	f7ff fbc8 	bl	80068d8 <SPI2_SendByte>
 8007148:	4603      	mov	r3, r0
 800714a:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 800714c:	4a22      	ldr	r2, [pc, #136]	; (80071d8 <BNO080_receivePacket+0xd8>)
 800714e:	7b7b      	ldrb	r3, [r7, #13]
 8007150:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 8007152:	4a21      	ldr	r2, [pc, #132]	; (80071d8 <BNO080_receivePacket+0xd8>)
 8007154:	7b3b      	ldrb	r3, [r7, #12]
 8007156:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8007158:	4a1f      	ldr	r2, [pc, #124]	; (80071d8 <BNO080_receivePacket+0xd8>)
 800715a:	7afb      	ldrb	r3, [r7, #11]
 800715c:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 800715e:	4a1e      	ldr	r2, [pc, #120]	; (80071d8 <BNO080_receivePacket+0xd8>)
 8007160:	7abb      	ldrb	r3, [r7, #10]
 8007162:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8007164:	7b3b      	ldrb	r3, [r7, #12]
 8007166:	021b      	lsls	r3, r3, #8
 8007168:	b21a      	sxth	r2, r3
 800716a:	7b7b      	ldrb	r3, [r7, #13]
 800716c:	b21b      	sxth	r3, r3
 800716e:	4313      	orrs	r3, r2
 8007170:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 8007172:	893b      	ldrh	r3, [r7, #8]
 8007174:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007178:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 800717a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d101      	bne.n	8007186 <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 8007182:	2300      	movs	r3, #0
 8007184:	e020      	b.n	80071c8 <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8007186:	893b      	ldrh	r3, [r7, #8]
 8007188:	3b04      	subs	r3, #4
 800718a:	b29b      	uxth	r3, r3
 800718c:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 800718e:	2300      	movs	r3, #0
 8007190:	81fb      	strh	r3, [r7, #14]
 8007192:	e00e      	b.n	80071b2 <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 8007194:	20ff      	movs	r0, #255	; 0xff
 8007196:	f7ff fb9f 	bl	80068d8 <SPI2_SendByte>
 800719a:	4603      	mov	r3, r0
 800719c:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 800719e:	89fb      	ldrh	r3, [r7, #14]
 80071a0:	2b7f      	cmp	r3, #127	; 0x7f
 80071a2:	d803      	bhi.n	80071ac <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 80071a4:	89fb      	ldrh	r3, [r7, #14]
 80071a6:	490d      	ldr	r1, [pc, #52]	; (80071dc <BNO080_receivePacket+0xdc>)
 80071a8:	79fa      	ldrb	r2, [r7, #7]
 80071aa:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 80071ac:	89fb      	ldrh	r3, [r7, #14]
 80071ae:	3301      	adds	r3, #1
 80071b0:	81fb      	strh	r3, [r7, #14]
 80071b2:	89fa      	ldrh	r2, [r7, #14]
 80071b4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	dbeb      	blt.n	8007194 <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 80071bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80071c0:	4804      	ldr	r0, [pc, #16]	; (80071d4 <BNO080_receivePacket+0xd4>)
 80071c2:	f7ff fa0d 	bl	80065e0 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 80071c6:	2301      	movs	r3, #1
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3710      	adds	r7, #16
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	40020800 	.word	0x40020800
 80071d4:	40020400 	.word	0x40020400
 80071d8:	20000200 	.word	0x20000200
 80071dc:	20000204 	.word	0x20000204

080071e0 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	4603      	mov	r3, r0
 80071e8:	460a      	mov	r2, r1
 80071ea:	71fb      	strb	r3, [r7, #7]
 80071ec:	4613      	mov	r3, r2
 80071ee:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 80071f0:	79bb      	ldrb	r3, [r7, #6]
 80071f2:	3304      	adds	r3, #4
 80071f4:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 80071f6:	f7ff ff5f 	bl	80070b8 <BNO080_waitForSPI>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d101      	bne.n	8007204 <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 8007200:	2300      	movs	r3, #0
 8007202:	e032      	b.n	800726a <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 8007204:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007208:	481a      	ldr	r0, [pc, #104]	; (8007274 <BNO080_sendPacket+0x94>)
 800720a:	f7ff f9f7 	bl	80065fc <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 800720e:	7bbb      	ldrb	r3, [r7, #14]
 8007210:	4618      	mov	r0, r3
 8007212:	f7ff fb61 	bl	80068d8 <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 8007216:	7bbb      	ldrb	r3, [r7, #14]
 8007218:	121b      	asrs	r3, r3, #8
 800721a:	b2db      	uxtb	r3, r3
 800721c:	4618      	mov	r0, r3
 800721e:	f7ff fb5b 	bl	80068d8 <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 8007222:	79fb      	ldrb	r3, [r7, #7]
 8007224:	4618      	mov	r0, r3
 8007226:	f7ff fb57 	bl	80068d8 <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 800722a:	79fb      	ldrb	r3, [r7, #7]
 800722c:	4a12      	ldr	r2, [pc, #72]	; (8007278 <BNO080_sendPacket+0x98>)
 800722e:	5cd2      	ldrb	r2, [r2, r3]
 8007230:	1c51      	adds	r1, r2, #1
 8007232:	b2c8      	uxtb	r0, r1
 8007234:	4910      	ldr	r1, [pc, #64]	; (8007278 <BNO080_sendPacket+0x98>)
 8007236:	54c8      	strb	r0, [r1, r3]
 8007238:	4610      	mov	r0, r2
 800723a:	f7ff fb4d 	bl	80068d8 <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 800723e:	2300      	movs	r3, #0
 8007240:	73fb      	strb	r3, [r7, #15]
 8007242:	e008      	b.n	8007256 <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 8007244:	7bfb      	ldrb	r3, [r7, #15]
 8007246:	4a0d      	ldr	r2, [pc, #52]	; (800727c <BNO080_sendPacket+0x9c>)
 8007248:	5cd3      	ldrb	r3, [r2, r3]
 800724a:	4618      	mov	r0, r3
 800724c:	f7ff fb44 	bl	80068d8 <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 8007250:	7bfb      	ldrb	r3, [r7, #15]
 8007252:	3301      	adds	r3, #1
 8007254:	73fb      	strb	r3, [r7, #15]
 8007256:	7bfa      	ldrb	r2, [r7, #15]
 8007258:	79bb      	ldrb	r3, [r7, #6]
 800725a:	429a      	cmp	r2, r3
 800725c:	d3f2      	bcc.n	8007244 <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 800725e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007262:	4804      	ldr	r0, [pc, #16]	; (8007274 <BNO080_sendPacket+0x94>)
 8007264:	f7ff f9bc 	bl	80065e0 <LL_GPIO_SetOutputPin>

	return (1);
 8007268:	2301      	movs	r3, #1
}
 800726a:	4618      	mov	r0, r3
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	40020400 	.word	0x40020400
 8007278:	20000284 	.word	0x20000284
 800727c:	20000204 	.word	0x20000204

08007280 <iBus_Check_CHKSUM>:
#include "FS-iA6B.h"

FSiA6B_iBus iBus;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	460b      	mov	r3, r1
 800728a:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 800728c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007290:	81fb      	strh	r3, [r7, #14]

	for(int i=0;i<len-2;i++)
 8007292:	2300      	movs	r3, #0
 8007294:	60bb      	str	r3, [r7, #8]
 8007296:	e00a      	b.n	80072ae <iBus_Check_CHKSUM+0x2e>
	{
		chksum = chksum - data[i];
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	4413      	add	r3, r2
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	89fa      	ldrh	r2, [r7, #14]
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	81fb      	strh	r3, [r7, #14]
	for(int i=0;i<len-2;i++)
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	3301      	adds	r3, #1
 80072ac:	60bb      	str	r3, [r7, #8]
 80072ae:	78fb      	ldrb	r3, [r7, #3]
 80072b0:	3b02      	subs	r3, #2
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	dbef      	blt.n	8007298 <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum&0x00ff)==data[30]) && ((chksum>>8)==data[31]);
 80072b8:	89fb      	ldrh	r3, [r7, #14]
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	321e      	adds	r2, #30
 80072c0:	7812      	ldrb	r2, [r2, #0]
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d10a      	bne.n	80072dc <iBus_Check_CHKSUM+0x5c>
 80072c6:	89fb      	ldrh	r3, [r7, #14]
 80072c8:	0a1b      	lsrs	r3, r3, #8
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	331f      	adds	r3, #31
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d101      	bne.n	80072dc <iBus_Check_CHKSUM+0x5c>
 80072d8:	2301      	movs	r3, #1
 80072da:	e000      	b.n	80072de <iBus_Check_CHKSUM+0x5e>
 80072dc:	2300      	movs	r3, #0
 80072de:	b2db      	uxtb	r3, r3
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3714      	adds	r7, #20
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA6B_iBus* iBus)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]

	iBus->RH = (data[2] | data[3]<<8) & 0x0fff;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	3302      	adds	r3, #2
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	b21a      	sxth	r2, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	3303      	adds	r3, #3
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	021b      	lsls	r3, r3, #8
 8007306:	b21b      	sxth	r3, r3
 8007308:	4313      	orrs	r3, r2
 800730a:	b21b      	sxth	r3, r3
 800730c:	b29b      	uxth	r3, r3
 800730e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007312:	b29a      	uxth	r2, r3
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	801a      	strh	r2, [r3, #0]
	iBus->RV = (data[4] | data[5]<<8) & 0x0fff;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	3304      	adds	r3, #4
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	b21a      	sxth	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	3305      	adds	r3, #5
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	021b      	lsls	r3, r3, #8
 8007328:	b21b      	sxth	r3, r3
 800732a:	4313      	orrs	r3, r2
 800732c:	b21b      	sxth	r3, r3
 800732e:	b29b      	uxth	r3, r3
 8007330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007334:	b29a      	uxth	r2, r3
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	805a      	strh	r2, [r3, #2]
	iBus->LV = (data[6] | data[7]<<8) & 0x0fff;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	3306      	adds	r3, #6
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	b21a      	sxth	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	3307      	adds	r3, #7
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	021b      	lsls	r3, r3, #8
 800734a:	b21b      	sxth	r3, r3
 800734c:	4313      	orrs	r3, r2
 800734e:	b21b      	sxth	r3, r3
 8007350:	b29b      	uxth	r3, r3
 8007352:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007356:	b29a      	uxth	r2, r3
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	809a      	strh	r2, [r3, #4]
	iBus->LH = (data[8] | data[9]<<8) & 0x0fff;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	3308      	adds	r3, #8
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	b21a      	sxth	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	3309      	adds	r3, #9
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	021b      	lsls	r3, r3, #8
 800736c:	b21b      	sxth	r3, r3
 800736e:	4313      	orrs	r3, r2
 8007370:	b21b      	sxth	r3, r3
 8007372:	b29b      	uxth	r3, r3
 8007374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007378:	b29a      	uxth	r2, r3
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	80da      	strh	r2, [r3, #6]
	iBus->SwA = (data[10] | data[11]<<8) & 0x0fff;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	330a      	adds	r3, #10
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	b21a      	sxth	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	330b      	adds	r3, #11
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	021b      	lsls	r3, r3, #8
 800738e:	b21b      	sxth	r3, r3
 8007390:	4313      	orrs	r3, r2
 8007392:	b21b      	sxth	r3, r3
 8007394:	b29b      	uxth	r3, r3
 8007396:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800739a:	b29a      	uxth	r2, r3
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	811a      	strh	r2, [r3, #8]
	iBus->SwC = (data[12] | data[13]<<8) & 0x0fff;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	330c      	adds	r3, #12
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	b21a      	sxth	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	330d      	adds	r3, #13
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	021b      	lsls	r3, r3, #8
 80073b0:	b21b      	sxth	r3, r3
 80073b2:	4313      	orrs	r3, r2
 80073b4:	b21b      	sxth	r3, r3
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073bc:	b29a      	uxth	r2, r3
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	819a      	strh	r2, [r3, #12]

#define _USE_FS_I6
#ifdef _USE_FS_I6
	iBus->FailSafe = (data[11] >> 4);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	330b      	adds	r3, #11
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	091b      	lsrs	r3, r3, #4
 80073ca:	b2da      	uxtb	r2, r3
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	751a      	strb	r2, [r3, #20]

#ifdef _USE_FS_I6X
	iBus->SwD = (data[14] | data[15]<<8) & 0x0fff;
	iBus->FailSafe = iBus->SwD == 1500;
#endif
}
 80073d0:	bf00      	nop
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <iBus_isActiveFailsafe>:

unsigned char iBus_isActiveFailsafe(FSiA6B_iBus* iBus)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
	return iBus->FailSafe != 0;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	7d1b      	ldrb	r3, [r3, #20]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	bf14      	ite	ne
 80073ec:	2301      	movne	r3, #1
 80073ee:	2300      	moveq	r3, #0
 80073f0:	b2db      	uxtb	r3, r3
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	370c      	adds	r7, #12
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <LL_SPI_Enable>:
{
 80073fe:	b480      	push	{r7}
 8007400:	b083      	sub	sp, #12
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	601a      	str	r2, [r3, #0]
}
 8007412:	bf00      	nop
 8007414:	370c      	adds	r7, #12
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr

0800741e <LL_SPI_SetStandard>:
{
 800741e:	b480      	push	{r7}
 8007420:	b083      	sub	sp, #12
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
 8007426:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	f023 0210 	bic.w	r2, r3, #16
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	431a      	orrs	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	605a      	str	r2, [r3, #4]
}
 8007438:	bf00      	nop
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <LL_SPI_IsActiveFlag_RXNE>:
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	f003 0301 	and.w	r3, r3, #1
 8007454:	2b01      	cmp	r3, #1
 8007456:	d101      	bne.n	800745c <LL_SPI_IsActiveFlag_RXNE+0x18>
 8007458:	2301      	movs	r3, #1
 800745a:	e000      	b.n	800745e <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	370c      	adds	r7, #12
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr

0800746a <LL_SPI_IsActiveFlag_TXE>:
{
 800746a:	b480      	push	{r7}
 800746c:	b083      	sub	sp, #12
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	f003 0302 	and.w	r3, r3, #2
 800747a:	2b02      	cmp	r3, #2
 800747c:	d101      	bne.n	8007482 <LL_SPI_IsActiveFlag_TXE+0x18>
 800747e:	2301      	movs	r3, #1
 8007480:	e000      	b.n	8007484 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <LL_SPI_ReceiveData8>:
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	330c      	adds	r3, #12
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	b2db      	uxtb	r3, r3
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <LL_SPI_TransmitData8>:
{
 80074ac:	b480      	push	{r7}
 80074ae:	b085      	sub	sp, #20
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	460b      	mov	r3, r1
 80074b6:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	330c      	adds	r3, #12
 80074bc:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	78fa      	ldrb	r2, [r7, #3]
 80074c2:	701a      	strb	r2, [r3, #0]
}
 80074c4:	bf00      	nop
 80074c6:	3714      	adds	r7, #20
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <LL_GPIO_IsInputPinSet>:
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	691a      	ldr	r2, [r3, #16]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	4013      	ands	r3, r2
 80074e2:	683a      	ldr	r2, [r7, #0]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	bf0c      	ite	eq
 80074e8:	2301      	moveq	r3, #1
 80074ea:	2300      	movne	r3, #0
 80074ec:	b2db      	uxtb	r3, r3
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	370c      	adds	r7, #12
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr

080074fa <LL_GPIO_SetOutputPin>:
{
 80074fa:	b480      	push	{r7}
 80074fc:	b083      	sub	sp, #12
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
 8007502:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	683a      	ldr	r2, [r7, #0]
 8007508:	619a      	str	r2, [r3, #24]
}
 800750a:	bf00      	nop
 800750c:	370c      	adds	r7, #12
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <LL_GPIO_ResetOutputPin>:
{
 8007516:	b480      	push	{r7}
 8007518:	b083      	sub	sp, #12
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
 800751e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	041a      	lsls	r2, r3, #16
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	619a      	str	r2, [r3, #24]
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <LL_AHB1_GRP1_EnableClock>:
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800753c:	4b08      	ldr	r3, [pc, #32]	; (8007560 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800753e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007540:	4907      	ldr	r1, [pc, #28]	; (8007560 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4313      	orrs	r3, r2
 8007546:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8007548:	4b05      	ldr	r3, [pc, #20]	; (8007560 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800754a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4013      	ands	r3, r2
 8007550:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007552:	68fb      	ldr	r3, [r7, #12]
}
 8007554:	bf00      	nop
 8007556:	3714      	adds	r7, #20
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr
 8007560:	40023800 	.word	0x40023800

08007564 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800756c:	4b08      	ldr	r3, [pc, #32]	; (8007590 <LL_APB2_GRP1_EnableClock+0x2c>)
 800756e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007570:	4907      	ldr	r1, [pc, #28]	; (8007590 <LL_APB2_GRP1_EnableClock+0x2c>)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4313      	orrs	r3, r2
 8007576:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8007578:	4b05      	ldr	r3, [pc, #20]	; (8007590 <LL_APB2_GRP1_EnableClock+0x2c>)
 800757a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4013      	ands	r3, r2
 8007580:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007582:	68fb      	ldr	r3, [r7, #12]
}
 8007584:	bf00      	nop
 8007586:	3714      	adds	r7, #20
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr
 8007590:	40023800 	.word	0x40023800

08007594 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b090      	sub	sp, #64	; 0x40
 8007598:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800759a:	f107 0318 	add.w	r3, r7, #24
 800759e:	2228      	movs	r2, #40	; 0x28
 80075a0:	2100      	movs	r1, #0
 80075a2:	4618      	mov	r0, r3
 80075a4:	f005 f93a 	bl	800c81c <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075a8:	463b      	mov	r3, r7
 80075aa:	2200      	movs	r2, #0
 80075ac:	601a      	str	r2, [r3, #0]
 80075ae:	605a      	str	r2, [r3, #4]
 80075b0:	609a      	str	r2, [r3, #8]
 80075b2:	60da      	str	r2, [r3, #12]
 80075b4:	611a      	str	r2, [r3, #16]
 80075b6:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80075b8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80075bc:	f7ff ffd2 	bl	8007564 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80075c0:	2001      	movs	r0, #1
 80075c2:	f7ff ffb7 	bl	8007534 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80075c6:	2004      	movs	r0, #4
 80075c8:	f7ff ffb4 	bl	8007534 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80075cc:	23e0      	movs	r3, #224	; 0xe0
 80075ce:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80075d0:	2302      	movs	r3, #2
 80075d2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80075d4:	2303      	movs	r3, #3
 80075d6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80075d8:	2300      	movs	r3, #0
 80075da:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80075dc:	2300      	movs	r3, #0
 80075de:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80075e0:	2305      	movs	r3, #5
 80075e2:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075e4:	463b      	mov	r3, r7
 80075e6:	4619      	mov	r1, r3
 80075e8:	4825      	ldr	r0, [pc, #148]	; (8007680 <ICM20602_GPIO_SPI_Initialization+0xec>)
 80075ea:	f7fd fdd0 	bl	800518e <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80075ee:	2300      	movs	r3, #0
 80075f0:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80075f2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80075f6:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80075f8:	2300      	movs	r3, #0
 80075fa:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80075fc:	2302      	movs	r3, #2
 80075fe:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8007600:	2301      	movs	r3, #1
 8007602:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8007604:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007608:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 800760a:	2310      	movs	r3, #16
 800760c:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800760e:	2300      	movs	r3, #0
 8007610:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8007612:	2300      	movs	r3, #0
 8007614:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8007616:	230a      	movs	r3, #10
 8007618:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 800761a:	f107 0318 	add.w	r3, r7, #24
 800761e:	4619      	mov	r1, r3
 8007620:	4818      	ldr	r0, [pc, #96]	; (8007684 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8007622:	f7fd ff84 	bl	800552e <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8007626:	2100      	movs	r1, #0
 8007628:	4816      	ldr	r0, [pc, #88]	; (8007684 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 800762a:	f7ff fef8 	bl	800741e <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 800762e:	2110      	movs	r1, #16
 8007630:	4815      	ldr	r0, [pc, #84]	; (8007688 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8007632:	f7ff ff70 	bl	8007516 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 8007636:	2310      	movs	r3, #16
 8007638:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800763a:	2301      	movs	r3, #1
 800763c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800763e:	2303      	movs	r3, #3
 8007640:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007642:	2300      	movs	r3, #0
 8007644:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007646:	2300      	movs	r3, #0
 8007648:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 800764a:	463b      	mov	r3, r7
 800764c:	4619      	mov	r1, r3
 800764e:	480e      	ldr	r0, [pc, #56]	; (8007688 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8007650:	f7fd fd9d 	bl	800518e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 8007654:	2320      	movs	r3, #32
 8007656:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8007658:	2300      	movs	r3, #0
 800765a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800765c:	2301      	movs	r3, #1
 800765e:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 8007660:	463b      	mov	r3, r7
 8007662:	4619      	mov	r1, r3
 8007664:	4808      	ldr	r0, [pc, #32]	; (8007688 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8007666:	f7fd fd92 	bl	800518e <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 800766a:	4806      	ldr	r0, [pc, #24]	; (8007684 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 800766c:	f7ff fec7 	bl	80073fe <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8007670:	2110      	movs	r1, #16
 8007672:	4805      	ldr	r0, [pc, #20]	; (8007688 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8007674:	f7ff ff41 	bl	80074fa <LL_GPIO_SetOutputPin>
}
 8007678:	bf00      	nop
 800767a:	3740      	adds	r7, #64	; 0x40
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	40020000 	.word	0x40020000
 8007684:	40013000 	.word	0x40013000
 8007688:	40020800 	.word	0x40020800

0800768c <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
 8007692:	4603      	mov	r3, r0
 8007694:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 8007696:	bf00      	nop
 8007698:	480c      	ldr	r0, [pc, #48]	; (80076cc <SPI1_SendByte+0x40>)
 800769a:	f7ff fee6 	bl	800746a <LL_SPI_IsActiveFlag_TXE>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d0f9      	beq.n	8007698 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 80076a4:	79fb      	ldrb	r3, [r7, #7]
 80076a6:	4619      	mov	r1, r3
 80076a8:	4808      	ldr	r0, [pc, #32]	; (80076cc <SPI1_SendByte+0x40>)
 80076aa:	f7ff feff 	bl	80074ac <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 80076ae:	bf00      	nop
 80076b0:	4806      	ldr	r0, [pc, #24]	; (80076cc <SPI1_SendByte+0x40>)
 80076b2:	f7ff fec7 	bl	8007444 <LL_SPI_IsActiveFlag_RXNE>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d0f9      	beq.n	80076b0 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 80076bc:	4803      	ldr	r0, [pc, #12]	; (80076cc <SPI1_SendByte+0x40>)
 80076be:	f7ff fee7 	bl	8007490 <LL_SPI_ReceiveData8>
 80076c2:	4603      	mov	r3, r0
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3708      	adds	r7, #8
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}
 80076cc:	40013000 	.word	0x40013000

080076d0 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	4603      	mov	r3, r0
 80076d8:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 80076da:	2110      	movs	r1, #16
 80076dc:	480b      	ldr	r0, [pc, #44]	; (800770c <ICM20602_Readbyte+0x3c>)
 80076de:	f7ff ff1a 	bl	8007516 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80076e2:	79fb      	ldrb	r3, [r7, #7]
 80076e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7ff ffce 	bl	800768c <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 80076f0:	2000      	movs	r0, #0
 80076f2:	f7ff ffcb 	bl	800768c <SPI1_SendByte>
 80076f6:	4603      	mov	r3, r0
 80076f8:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 80076fa:	2110      	movs	r1, #16
 80076fc:	4803      	ldr	r0, [pc, #12]	; (800770c <ICM20602_Readbyte+0x3c>)
 80076fe:	f7ff fefc 	bl	80074fa <LL_GPIO_SetOutputPin>
	
	return val;
 8007702:	7bfb      	ldrb	r3, [r7, #15]
}
 8007704:	4618      	mov	r0, r3
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	40020800 	.word	0x40020800

08007710 <ICM20602_Readbytes>:

void ICM20602_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8007710:	b590      	push	{r4, r7, lr}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	4603      	mov	r3, r0
 8007718:	603a      	str	r2, [r7, #0]
 800771a:	71fb      	strb	r3, [r7, #7]
 800771c:	460b      	mov	r3, r1
 800771e:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8007720:	2300      	movs	r3, #0
 8007722:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM20602);
 8007724:	2110      	movs	r1, #16
 8007726:	4810      	ldr	r0, [pc, #64]	; (8007768 <ICM20602_Readbytes+0x58>)
 8007728:	f7ff fef5 	bl	8007516 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800772c:	79fb      	ldrb	r3, [r7, #7]
 800772e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007732:	b2db      	uxtb	r3, r3
 8007734:	4618      	mov	r0, r3
 8007736:	f7ff ffa9 	bl	800768c <SPI1_SendByte>
	while(i < len)
 800773a:	e009      	b.n	8007750 <ICM20602_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	1c5a      	adds	r2, r3, #1
 8007740:	60fa      	str	r2, [r7, #12]
 8007742:	683a      	ldr	r2, [r7, #0]
 8007744:	18d4      	adds	r4, r2, r3
 8007746:	2000      	movs	r0, #0
 8007748:	f7ff ffa0 	bl	800768c <SPI1_SendByte>
 800774c:	4603      	mov	r3, r0
 800774e:	7023      	strb	r3, [r4, #0]
	while(i < len)
 8007750:	79bb      	ldrb	r3, [r7, #6]
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	429a      	cmp	r2, r3
 8007756:	d3f1      	bcc.n	800773c <ICM20602_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM20602);
 8007758:	2110      	movs	r1, #16
 800775a:	4803      	ldr	r0, [pc, #12]	; (8007768 <ICM20602_Readbytes+0x58>)
 800775c:	f7ff fecd 	bl	80074fa <LL_GPIO_SetOutputPin>
}
 8007760:	bf00      	nop
 8007762:	3714      	adds	r7, #20
 8007764:	46bd      	mov	sp, r7
 8007766:	bd90      	pop	{r4, r7, pc}
 8007768:	40020800 	.word	0x40020800

0800776c <ICM20602_Writebyte>:

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
 8007772:	4603      	mov	r3, r0
 8007774:	460a      	mov	r2, r1
 8007776:	71fb      	strb	r3, [r7, #7]
 8007778:	4613      	mov	r3, r2
 800777a:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 800777c:	2110      	movs	r1, #16
 800777e:	480b      	ldr	r0, [pc, #44]	; (80077ac <ICM20602_Writebyte+0x40>)
 8007780:	f7ff fec9 	bl	8007516 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8007784:	79fb      	ldrb	r3, [r7, #7]
 8007786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800778a:	b2db      	uxtb	r3, r3
 800778c:	4618      	mov	r0, r3
 800778e:	f7ff ff7d 	bl	800768c <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 8007792:	79bb      	ldrb	r3, [r7, #6]
 8007794:	4618      	mov	r0, r3
 8007796:	f7ff ff79 	bl	800768c <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 800779a:	2110      	movs	r1, #16
 800779c:	4803      	ldr	r0, [pc, #12]	; (80077ac <ICM20602_Writebyte+0x40>)
 800779e:	f7ff feac 	bl	80074fa <LL_GPIO_SetOutputPin>
}
 80077a2:	bf00      	nop
 80077a4:	3708      	adds	r7, #8
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	40020800 	.word	0x40020800

080077b0 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 80077b6:	2300      	movs	r3, #0
 80077b8:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 80077ba:	f107 0308 	add.w	r3, r7, #8
 80077be:	2200      	movs	r2, #0
 80077c0:	601a      	str	r2, [r3, #0]
 80077c2:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 80077c4:	463b      	mov	r3, r7
 80077c6:	2200      	movs	r2, #0
 80077c8:	601a      	str	r2, [r3, #0]
 80077ca:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 80077cc:	f7ff fee2 	bl	8007594 <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 80077d0:	4833      	ldr	r0, [pc, #204]	; (80078a0 <ICM20602_Initialization+0xf0>)
 80077d2:	f005 fc95 	bl	800d100 <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 80077d6:	2075      	movs	r0, #117	; 0x75
 80077d8:	f7ff ff7a 	bl	80076d0 <ICM20602_Readbyte>
 80077dc:	4603      	mov	r3, r0
 80077de:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 80077e0:	7bfb      	ldrb	r3, [r7, #15]
 80077e2:	2b12      	cmp	r3, #18
 80077e4:	d105      	bne.n	80077f2 <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 80077e6:	7bfb      	ldrb	r3, [r7, #15]
 80077e8:	4619      	mov	r1, r3
 80077ea:	482e      	ldr	r0, [pc, #184]	; (80078a4 <ICM20602_Initialization+0xf4>)
 80077ec:	f005 fc88 	bl	800d100 <iprintf>
 80077f0:	e012      	b.n	8007818 <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 80077f2:	7bfb      	ldrb	r3, [r7, #15]
 80077f4:	2b12      	cmp	r3, #18
 80077f6:	d00f      	beq.n	8007818 <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 80077f8:	2075      	movs	r0, #117	; 0x75
 80077fa:	f7ff ff69 	bl	80076d0 <ICM20602_Readbyte>
 80077fe:	4603      	mov	r3, r0
 8007800:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8007802:	7bfb      	ldrb	r3, [r7, #15]
 8007804:	2b12      	cmp	r3, #18
 8007806:	d007      	beq.n	8007818 <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8007808:	7bfb      	ldrb	r3, [r7, #15]
 800780a:	2212      	movs	r2, #18
 800780c:	4619      	mov	r1, r3
 800780e:	4826      	ldr	r0, [pc, #152]	; (80078a8 <ICM20602_Initialization+0xf8>)
 8007810:	f005 fc76 	bl	800d100 <iprintf>
			return 1; //ERROR
 8007814:	2301      	movs	r3, #1
 8007816:	e03f      	b.n	8007898 <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8007818:	2180      	movs	r1, #128	; 0x80
 800781a:	206b      	movs	r0, #107	; 0x6b
 800781c:	f7ff ffa6 	bl	800776c <ICM20602_Writebyte>
	HAL_Delay(50);
 8007820:	2032      	movs	r0, #50	; 0x32
 8007822:	f7f9 fbb5 	bl	8000f90 <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 8007826:	2101      	movs	r1, #1
 8007828:	206b      	movs	r0, #107	; 0x6b
 800782a:	f7ff ff9f 	bl	800776c <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 800782e:	2032      	movs	r0, #50	; 0x32
 8007830:	f7f9 fbae 	bl	8000f90 <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 8007834:	2138      	movs	r1, #56	; 0x38
 8007836:	206c      	movs	r0, #108	; 0x6c
 8007838:	f7ff ff98 	bl	800776c <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 800783c:	2032      	movs	r0, #50	; 0x32
 800783e:	f7f9 fba7 	bl	8000f90 <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 8007842:	2100      	movs	r1, #0
 8007844:	2019      	movs	r0, #25
 8007846:	f7ff ff91 	bl	800776c <ICM20602_Writebyte>
	HAL_Delay(50);
 800784a:	2032      	movs	r0, #50	; 0x32
 800784c:	f7f9 fba0 	bl	8000f90 <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8007850:	2105      	movs	r1, #5
 8007852:	201a      	movs	r0, #26
 8007854:	f7ff ff8a 	bl	800776c <ICM20602_Writebyte>
	HAL_Delay(50);
 8007858:	2032      	movs	r0, #50	; 0x32
 800785a:	f7f9 fb99 	bl	8000f90 <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 800785e:	2118      	movs	r1, #24
 8007860:	201b      	movs	r0, #27
 8007862:	f7ff ff83 	bl	800776c <ICM20602_Writebyte>
	HAL_Delay(50);
 8007866:	2032      	movs	r0, #50	; 0x32
 8007868:	f7f9 fb92 	bl	8000f90 <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 800786c:	2118      	movs	r1, #24
 800786e:	201c      	movs	r0, #28
 8007870:	f7ff ff7c 	bl	800776c <ICM20602_Writebyte>
	HAL_Delay(50);
 8007874:	2032      	movs	r0, #50	; 0x32
 8007876:	f7f9 fb8b 	bl	8000f90 <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 800787a:	2103      	movs	r1, #3
 800787c:	201d      	movs	r0, #29
 800787e:	f7ff ff75 	bl	800776c <ICM20602_Writebyte>
	HAL_Delay(50);
 8007882:	2032      	movs	r0, #50	; 0x32
 8007884:	f7f9 fb84 	bl	8000f90 <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8007888:	2101      	movs	r1, #1
 800788a:	2038      	movs	r0, #56	; 0x38
 800788c:	f7ff ff6e 	bl	800776c <ICM20602_Writebyte>
	HAL_Delay(50);
 8007890:	2032      	movs	r0, #50	; 0x32
 8007892:	f7f9 fb7d 	bl	8000f90 <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3710      	adds	r7, #16
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	080100fc 	.word	0x080100fc
 80078a4:	08010114 	.word	0x08010114
 80078a8:	08010138 	.word	0x08010138

080078ac <ICM20602_Get3AxisGyroRawData>:
	gyro[1] = ((data[10] << 8) | data[11]);
	gyro[2] = ((data[12] << 8) | data[13]);
}

void ICM20602_Get3AxisGyroRawData(short* gyro)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
	unsigned char data[6];
	ICM20602_Readbytes(GYRO_XOUT_H, 6, data);
 80078b4:	f107 0308 	add.w	r3, r7, #8
 80078b8:	461a      	mov	r2, r3
 80078ba:	2106      	movs	r1, #6
 80078bc:	2043      	movs	r0, #67	; 0x43
 80078be:	f7ff ff27 	bl	8007710 <ICM20602_Readbytes>
	
	gyro[0] = ((data[0] << 8) | data[1]);
 80078c2:	7a3b      	ldrb	r3, [r7, #8]
 80078c4:	021b      	lsls	r3, r3, #8
 80078c6:	b21a      	sxth	r2, r3
 80078c8:	7a7b      	ldrb	r3, [r7, #9]
 80078ca:	b21b      	sxth	r3, r3
 80078cc:	4313      	orrs	r3, r2
 80078ce:	b21a      	sxth	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	801a      	strh	r2, [r3, #0]
	gyro[1] = ((data[2] << 8) | data[3]);
 80078d4:	7abb      	ldrb	r3, [r7, #10]
 80078d6:	021b      	lsls	r3, r3, #8
 80078d8:	b219      	sxth	r1, r3
 80078da:	7afb      	ldrb	r3, [r7, #11]
 80078dc:	b21a      	sxth	r2, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	3302      	adds	r3, #2
 80078e2:	430a      	orrs	r2, r1
 80078e4:	b212      	sxth	r2, r2
 80078e6:	801a      	strh	r2, [r3, #0]
	gyro[2] = ((data[4] << 8) | data[5]);
 80078e8:	7b3b      	ldrb	r3, [r7, #12]
 80078ea:	021b      	lsls	r3, r3, #8
 80078ec:	b219      	sxth	r1, r3
 80078ee:	7b7b      	ldrb	r3, [r7, #13]
 80078f0:	b21a      	sxth	r2, r3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	3304      	adds	r3, #4
 80078f6:	430a      	orrs	r2, r1
 80078f8:	b212      	sxth	r2, r2
 80078fa:	801a      	strh	r2, [r3, #0]
}
 80078fc:	bf00      	nop
 80078fe:	3710      	adds	r7, #16
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <ICM20602_DataReady>:
	accel[1] = ((data[2] << 8) | data[3]);
	accel[2] = ((data[4] << 8) | data[5]);
}

int ICM20602_DataReady(void)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(ICM20602_INT_PORT, ICM20602_INT_PIN);
 8007908:	2120      	movs	r1, #32
 800790a:	4803      	ldr	r0, [pc, #12]	; (8007918 <ICM20602_DataReady+0x14>)
 800790c:	f7ff fde0 	bl	80074d0 <LL_GPIO_IsInputPinSet>
 8007910:	4603      	mov	r3, r0
}
 8007912:	4618      	mov	r0, r3
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	40020800 	.word	0x40020800

0800791c <LL_SPI_Enable>:
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	601a      	str	r2, [r3, #0]
}
 8007930:	bf00      	nop
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <LL_SPI_SetStandard>:
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	f023 0210 	bic.w	r2, r3, #16
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	431a      	orrs	r2, r3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	605a      	str	r2, [r3, #4]
}
 8007956:	bf00      	nop
 8007958:	370c      	adds	r7, #12
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr

08007962 <LL_SPI_IsActiveFlag_RXNE>:
{
 8007962:	b480      	push	{r7}
 8007964:	b083      	sub	sp, #12
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	f003 0301 	and.w	r3, r3, #1
 8007972:	2b01      	cmp	r3, #1
 8007974:	d101      	bne.n	800797a <LL_SPI_IsActiveFlag_RXNE+0x18>
 8007976:	2301      	movs	r3, #1
 8007978:	e000      	b.n	800797c <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <LL_SPI_IsActiveFlag_TXE>:
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	f003 0302 	and.w	r3, r3, #2
 8007998:	2b02      	cmp	r3, #2
 800799a:	d101      	bne.n	80079a0 <LL_SPI_IsActiveFlag_TXE+0x18>
 800799c:	2301      	movs	r3, #1
 800799e:	e000      	b.n	80079a2 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	370c      	adds	r7, #12
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr

080079ae <LL_SPI_ReceiveData8>:
{
 80079ae:	b480      	push	{r7}
 80079b0:	b083      	sub	sp, #12
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	330c      	adds	r3, #12
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	b2db      	uxtb	r3, r3
}
 80079be:	4618      	mov	r0, r3
 80079c0:	370c      	adds	r7, #12
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr

080079ca <LL_SPI_TransmitData8>:
{
 80079ca:	b480      	push	{r7}
 80079cc:	b085      	sub	sp, #20
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
 80079d2:	460b      	mov	r3, r1
 80079d4:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	330c      	adds	r3, #12
 80079da:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	78fa      	ldrb	r2, [r7, #3]
 80079e0:	701a      	strb	r2, [r3, #0]
}
 80079e2:	bf00      	nop
 80079e4:	3714      	adds	r7, #20
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <LL_GPIO_IsInputPinSet>:
{
 80079ee:	b480      	push	{r7}
 80079f0:	b083      	sub	sp, #12
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
 80079f6:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	691a      	ldr	r2, [r3, #16]
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	4013      	ands	r3, r2
 8007a00:	683a      	ldr	r2, [r7, #0]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	bf0c      	ite	eq
 8007a06:	2301      	moveq	r3, #1
 8007a08:	2300      	movne	r3, #0
 8007a0a:	b2db      	uxtb	r3, r3
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <LL_GPIO_SetOutputPin>:
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	683a      	ldr	r2, [r7, #0]
 8007a26:	619a      	str	r2, [r3, #24]
}
 8007a28:	bf00      	nop
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <LL_GPIO_ResetOutputPin>:
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	041a      	lsls	r2, r3, #16
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	619a      	str	r2, [r3, #24]
}
 8007a46:	bf00      	nop
 8007a48:	370c      	adds	r7, #12
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr
	...

08007a54 <LL_AHB1_GRP1_EnableClock>:
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8007a5c:	4b08      	ldr	r3, [pc, #32]	; (8007a80 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007a5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a60:	4907      	ldr	r1, [pc, #28]	; (8007a80 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4313      	orrs	r3, r2
 8007a66:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8007a68:	4b05      	ldr	r3, [pc, #20]	; (8007a80 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007a6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4013      	ands	r3, r2
 8007a70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007a72:	68fb      	ldr	r3, [r7, #12]
}
 8007a74:	bf00      	nop
 8007a76:	3714      	adds	r7, #20
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr
 8007a80:	40023800 	.word	0x40023800

08007a84 <LL_APB1_GRP1_EnableClock>:
{
 8007a84:	b480      	push	{r7}
 8007a86:	b085      	sub	sp, #20
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8007a8c:	4b08      	ldr	r3, [pc, #32]	; (8007ab0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8007a8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a90:	4907      	ldr	r1, [pc, #28]	; (8007ab0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8007a98:	4b05      	ldr	r3, [pc, #20]	; (8007ab0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8007a9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	4013      	ands	r3, r2
 8007aa0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
}
 8007aa4:	bf00      	nop
 8007aa6:	3714      	adds	r7, #20
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr
 8007ab0:	40023800 	.word	0x40023800

08007ab4 <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b090      	sub	sp, #64	; 0x40
 8007ab8:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8007aba:	f107 0318 	add.w	r3, r7, #24
 8007abe:	2228      	movs	r2, #40	; 0x28
 8007ac0:	2100      	movs	r1, #0
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f004 feaa 	bl	800c81c <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ac8:	463b      	mov	r3, r7
 8007aca:	2200      	movs	r2, #0
 8007acc:	601a      	str	r2, [r3, #0]
 8007ace:	605a      	str	r2, [r3, #4]
 8007ad0:	609a      	str	r2, [r3, #8]
 8007ad2:	60da      	str	r2, [r3, #12]
 8007ad4:	611a      	str	r2, [r3, #16]
 8007ad6:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8007ad8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007adc:	f7ff ffd2 	bl	8007a84 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8007ae0:	2002      	movs	r0, #2
 8007ae2:	f7ff ffb7 	bl	8007a54 <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8007ae6:	2338      	movs	r3, #56	; 0x38
 8007ae8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007aea:	2302      	movs	r3, #2
 8007aec:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007aee:	2303      	movs	r3, #3
 8007af0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007af2:	2300      	movs	r3, #0
 8007af4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007af6:	2300      	movs	r3, #0
 8007af8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8007afa:	2306      	movs	r3, #6
 8007afc:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007afe:	463b      	mov	r3, r7
 8007b00:	4619      	mov	r1, r3
 8007b02:	4826      	ldr	r0, [pc, #152]	; (8007b9c <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8007b04:	f7fd fb43 	bl	800518e <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8007b0c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007b10:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8007b12:	2300      	movs	r3, #0
 8007b14:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8007b16:	2302      	movs	r3, #2
 8007b18:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8007b1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b22:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8007b24:	2308      	movs	r3, #8
 8007b26:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8007b30:	230a      	movs	r3, #10
 8007b32:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 8007b34:	f107 0318 	add.w	r3, r7, #24
 8007b38:	4619      	mov	r1, r3
 8007b3a:	4819      	ldr	r0, [pc, #100]	; (8007ba0 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8007b3c:	f7fd fcf7 	bl	800552e <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8007b40:	2100      	movs	r1, #0
 8007b42:	4817      	ldr	r0, [pc, #92]	; (8007ba0 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8007b44:	f7ff fefa 	bl	800793c <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 8007b48:	2140      	movs	r1, #64	; 0x40
 8007b4a:	4814      	ldr	r0, [pc, #80]	; (8007b9c <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8007b4c:	f7ff ff72 	bl	8007a34 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 8007b50:	2340      	movs	r3, #64	; 0x40
 8007b52:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007b54:	2301      	movs	r3, #1
 8007b56:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007b60:	2300      	movs	r3, #0
 8007b62:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 8007b64:	463b      	mov	r3, r7
 8007b66:	4619      	mov	r1, r3
 8007b68:	480c      	ldr	r0, [pc, #48]	; (8007b9c <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8007b6a:	f7fd fb10 	bl	800518e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 8007b6e:	2380      	movs	r3, #128	; 0x80
 8007b70:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8007b72:	2300      	movs	r3, #0
 8007b74:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8007b76:	2301      	movs	r3, #1
 8007b78:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 8007b7a:	463b      	mov	r3, r7
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	4807      	ldr	r0, [pc, #28]	; (8007b9c <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8007b80:	f7fd fb05 	bl	800518e <LL_GPIO_Init>
	
	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 8007b84:	4806      	ldr	r0, [pc, #24]	; (8007ba0 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8007b86:	f7ff fec9 	bl	800791c <LL_SPI_Enable>
	
	CHIP_DESELECT(LPS22HH);
 8007b8a:	2140      	movs	r1, #64	; 0x40
 8007b8c:	4803      	ldr	r0, [pc, #12]	; (8007b9c <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8007b8e:	f7ff ff43 	bl	8007a18 <LL_GPIO_SetOutputPin>
}
 8007b92:	bf00      	nop
 8007b94:	3740      	adds	r7, #64	; 0x40
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	40020400 	.word	0x40020400
 8007ba0:	40003c00 	.word	0x40003c00

08007ba4 <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	4603      	mov	r3, r0
 8007bac:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 8007bae:	bf00      	nop
 8007bb0:	480c      	ldr	r0, [pc, #48]	; (8007be4 <SPI3_SendByte+0x40>)
 8007bb2:	f7ff fee9 	bl	8007988 <LL_SPI_IsActiveFlag_TXE>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d0f9      	beq.n	8007bb0 <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 8007bbc:	79fb      	ldrb	r3, [r7, #7]
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	4808      	ldr	r0, [pc, #32]	; (8007be4 <SPI3_SendByte+0x40>)
 8007bc2:	f7ff ff02 	bl	80079ca <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 8007bc6:	bf00      	nop
 8007bc8:	4806      	ldr	r0, [pc, #24]	; (8007be4 <SPI3_SendByte+0x40>)
 8007bca:	f7ff feca 	bl	8007962 <LL_SPI_IsActiveFlag_RXNE>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d0f9      	beq.n	8007bc8 <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 8007bd4:	4803      	ldr	r0, [pc, #12]	; (8007be4 <SPI3_SendByte+0x40>)
 8007bd6:	f7ff feea 	bl	80079ae <LL_SPI_ReceiveData8>
 8007bda:	4603      	mov	r3, r0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	40003c00 	.word	0x40003c00

08007be8 <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	4603      	mov	r3, r0
 8007bf0:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 8007bf2:	2140      	movs	r1, #64	; 0x40
 8007bf4:	480b      	ldr	r0, [pc, #44]	; (8007c24 <LPS22HH_Readbyte+0x3c>)
 8007bf6:	f7ff ff1d 	bl	8007a34 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8007bfa:	79fb      	ldrb	r3, [r7, #7]
 8007bfc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7ff ffce 	bl	8007ba4 <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 8007c08:	2000      	movs	r0, #0
 8007c0a:	f7ff ffcb 	bl	8007ba4 <SPI3_SendByte>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 8007c12:	2140      	movs	r1, #64	; 0x40
 8007c14:	4803      	ldr	r0, [pc, #12]	; (8007c24 <LPS22HH_Readbyte+0x3c>)
 8007c16:	f7ff feff 	bl	8007a18 <LL_GPIO_SetOutputPin>
	
	return val;
 8007c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3710      	adds	r7, #16
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	40020400 	.word	0x40020400

08007c28 <LPS22HH_Readbytes>:

void LPS22HH_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8007c28:	b590      	push	{r4, r7, lr}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	4603      	mov	r3, r0
 8007c30:	603a      	str	r2, [r7, #0]
 8007c32:	71fb      	strb	r3, [r7, #7]
 8007c34:	460b      	mov	r3, r1
 8007c36:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(LPS22HH);
 8007c3c:	2140      	movs	r1, #64	; 0x40
 8007c3e:	4810      	ldr	r0, [pc, #64]	; (8007c80 <LPS22HH_Readbytes+0x58>)
 8007c40:	f7ff fef8 	bl	8007a34 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8007c44:	79fb      	ldrb	r3, [r7, #7]
 8007c46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7ff ffa9 	bl	8007ba4 <SPI3_SendByte>
	while(i < len)
 8007c52:	e009      	b.n	8007c68 <LPS22HH_Readbytes+0x40>
	{
		data[i++] = SPI3_SendByte(0x00); //Send DUMMY
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	1c5a      	adds	r2, r3, #1
 8007c58:	60fa      	str	r2, [r7, #12]
 8007c5a:	683a      	ldr	r2, [r7, #0]
 8007c5c:	18d4      	adds	r4, r2, r3
 8007c5e:	2000      	movs	r0, #0
 8007c60:	f7ff ffa0 	bl	8007ba4 <SPI3_SendByte>
 8007c64:	4603      	mov	r3, r0
 8007c66:	7023      	strb	r3, [r4, #0]
	while(i < len)
 8007c68:	79bb      	ldrb	r3, [r7, #6]
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d3f1      	bcc.n	8007c54 <LPS22HH_Readbytes+0x2c>
	}
	CHIP_DESELECT(LPS22HH);
 8007c70:	2140      	movs	r1, #64	; 0x40
 8007c72:	4803      	ldr	r0, [pc, #12]	; (8007c80 <LPS22HH_Readbytes+0x58>)
 8007c74:	f7ff fed0 	bl	8007a18 <LL_GPIO_SetOutputPin>
}
 8007c78:	bf00      	nop
 8007c7a:	3714      	adds	r7, #20
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd90      	pop	{r4, r7, pc}
 8007c80:	40020400 	.word	0x40020400

08007c84 <LPS22HH_Writebyte>:

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	460a      	mov	r2, r1
 8007c8e:	71fb      	strb	r3, [r7, #7]
 8007c90:	4613      	mov	r3, r2
 8007c92:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 8007c94:	2140      	movs	r1, #64	; 0x40
 8007c96:	480b      	ldr	r0, [pc, #44]	; (8007cc4 <LPS22HH_Writebyte+0x40>)
 8007c98:	f7ff fecc 	bl	8007a34 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8007c9c:	79fb      	ldrb	r3, [r7, #7]
 8007c9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f7ff ff7d 	bl	8007ba4 <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 8007caa:	79bb      	ldrb	r3, [r7, #6]
 8007cac:	4618      	mov	r0, r3
 8007cae:	f7ff ff79 	bl	8007ba4 <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 8007cb2:	2140      	movs	r1, #64	; 0x40
 8007cb4:	4803      	ldr	r0, [pc, #12]	; (8007cc4 <LPS22HH_Writebyte+0x40>)
 8007cb6:	f7ff feaf 	bl	8007a18 <LL_GPIO_SetOutputPin>
}
 8007cba:	bf00      	nop
 8007cbc:	3708      	adds	r7, #8
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	40020400 	.word	0x40020400

08007cc8 <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	71fb      	strb	r3, [r7, #7]
	
	LPS22HH_GPIO_SPI_Initialization();
 8007cd2:	f7ff feef 	bl	8007ab4 <LPS22HH_GPIO_SPI_Initialization>
	
	printf("Checking LPS22HH...");
 8007cd6:	4841      	ldr	r0, [pc, #260]	; (8007ddc <LPS22HH_Initialization+0x114>)
 8007cd8:	f005 fa12 	bl	800d100 <iprintf>
	
	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F); 
 8007cdc:	200f      	movs	r0, #15
 8007cde:	f7ff ff83 	bl	8007be8 <LPS22HH_Readbyte>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 8007ce6:	79fb      	ldrb	r3, [r7, #7]
 8007ce8:	2bb3      	cmp	r3, #179	; 0xb3
 8007cea:	d105      	bne.n	8007cf8 <LPS22HH_Initialization+0x30>
	{
		printf("\nLPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 8007cec:	79fb      	ldrb	r3, [r7, #7]
 8007cee:	4619      	mov	r1, r3
 8007cf0:	483b      	ldr	r0, [pc, #236]	; (8007de0 <LPS22HH_Initialization+0x118>)
 8007cf2:	f005 fa05 	bl	800d100 <iprintf>
 8007cf6:	e012      	b.n	8007d1e <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 8007cf8:	79fb      	ldrb	r3, [r7, #7]
 8007cfa:	2bb3      	cmp	r3, #179	; 0xb3
 8007cfc:	d00f      	beq.n	8007d1e <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 8007cfe:	200f      	movs	r0, #15
 8007d00:	f7ff ff72 	bl	8007be8 <LPS22HH_Readbyte>
 8007d04:	4603      	mov	r3, r0
 8007d06:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 8007d08:	79fb      	ldrb	r3, [r7, #7]
 8007d0a:	2bb3      	cmp	r3, #179	; 0xb3
 8007d0c:	d007      	beq.n	8007d1e <LPS22HH_Initialization+0x56>
			printf( "nLPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 8007d0e:	79fb      	ldrb	r3, [r7, #7]
 8007d10:	22b3      	movs	r2, #179	; 0xb3
 8007d12:	4619      	mov	r1, r3
 8007d14:	4833      	ldr	r0, [pc, #204]	; (8007de4 <LPS22HH_Initialization+0x11c>)
 8007d16:	f005 f9f3 	bl	800d100 <iprintf>
			return 1; //ERROR
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e059      	b.n	8007dd2 <LPS22HH_Initialization+0x10a>
		}
	}
	
	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 8007d1e:	2104      	movs	r1, #4
 8007d20:	2011      	movs	r0, #17
 8007d22:	f7ff ffaf 	bl	8007c84 <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 8007d26:	2011      	movs	r0, #17
 8007d28:	f7ff ff5e 	bl	8007be8 <LPS22HH_Readbyte>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	f003 0304 	and.w	r3, r3, #4
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1f7      	bne.n	8007d26 <LPS22HH_Initialization+0x5e>
	
	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8007d36:	2010      	movs	r0, #16
 8007d38:	f7ff ff56 	bl	8007be8 <LPS22HH_Readbyte>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 8007d40:	79bb      	ldrb	r3, [r7, #6]
 8007d42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d46:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8007d48:	79bb      	ldrb	r3, [r7, #6]
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	2010      	movs	r0, #16
 8007d4e:	f7ff ff99 	bl	8007c84 <LPS22HH_Writebyte>
	temp_reg = 0;
 8007d52:	2300      	movs	r3, #0
 8007d54:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8007d56:	2010      	movs	r0, #16
 8007d58:	f7ff ff46 	bl	8007be8 <LPS22HH_Readbyte>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);
	
	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8007d60:	2010      	movs	r0, #16
 8007d62:	f7ff ff41 	bl	8007be8 <LPS22HH_Readbyte>
 8007d66:	4603      	mov	r3, r0
 8007d68:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 8007d6a:	79bb      	ldrb	r3, [r7, #6]
 8007d6c:	f043 030c 	orr.w	r3, r3, #12
 8007d70:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8007d72:	79bb      	ldrb	r3, [r7, #6]
 8007d74:	4619      	mov	r1, r3
 8007d76:	2010      	movs	r0, #16
 8007d78:	f7ff ff84 	bl	8007c84 <LPS22HH_Writebyte>
	
	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8007d7c:	2010      	movs	r0, #16
 8007d7e:	f7ff ff33 	bl	8007be8 <LPS22HH_Readbyte>
 8007d82:	4603      	mov	r3, r0
 8007d84:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8007d86:	79bb      	ldrb	r3, [r7, #6]
 8007d88:	f043 0302 	orr.w	r3, r3, #2
 8007d8c:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8007d8e:	79bb      	ldrb	r3, [r7, #6]
 8007d90:	4619      	mov	r1, r3
 8007d92:	2010      	movs	r0, #16
 8007d94:	f7ff ff76 	bl	8007c84 <LPS22HH_Writebyte>
	
	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 8007d98:	2011      	movs	r0, #17
 8007d9a:	f7ff ff25 	bl	8007be8 <LPS22HH_Readbyte>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8007da2:	79bb      	ldrb	r3, [r7, #6]
 8007da4:	f043 0302 	orr.w	r3, r3, #2
 8007da8:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 8007daa:	79bb      	ldrb	r3, [r7, #6]
 8007dac:	4619      	mov	r1, r3
 8007dae:	2011      	movs	r0, #17
 8007db0:	f7ff ff68 	bl	8007c84 <LPS22HH_Writebyte>
	
	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 8007db4:	2012      	movs	r0, #18
 8007db6:	f7ff ff17 	bl	8007be8 <LPS22HH_Readbyte>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 8007dbe:	79bb      	ldrb	r3, [r7, #6]
 8007dc0:	f043 0304 	orr.w	r3, r3, #4
 8007dc4:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 8007dc6:	79bb      	ldrb	r3, [r7, #6]
 8007dc8:	4619      	mov	r1, r3
 8007dca:	2012      	movs	r0, #18
 8007dcc:	f7ff ff5a 	bl	8007c84 <LPS22HH_Writebyte>
	
	return 0; //OK
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	08010164 	.word	0x08010164
 8007de0:	08010178 	.word	0x08010178
 8007de4:	0801019c 	.word	0x0801019c

08007de8 <LPS22HH_DataReady>:


int LPS22HH_DataReady(void)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(LPS22HH_INT_PORT, LPS22HH_INT_PIN);
 8007dec:	2180      	movs	r1, #128	; 0x80
 8007dee:	4803      	ldr	r0, [pc, #12]	; (8007dfc <LPS22HH_DataReady+0x14>)
 8007df0:	f7ff fdfd 	bl	80079ee <LL_GPIO_IsInputPinSet>
 8007df4:	4603      	mov	r3, r0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	40020400 	.word	0x40020400

08007e00 <LPS22HH_GetPressure>:

void LPS22HH_GetPressure(int32_t* pressure)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(PRESSURE_OUT_XL, 3, (unsigned char*)pressure);
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	2103      	movs	r1, #3
 8007e0c:	2028      	movs	r0, #40	; 0x28
 8007e0e:	f7ff ff0b 	bl	8007c28 <LPS22HH_Readbytes>
}
 8007e12:	bf00      	nop
 8007e14:	3708      	adds	r7, #8
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <LPS22HH_GetTemperature>:

void LPS22HH_GetTemperature(int16_t* temperature)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b082      	sub	sp, #8
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(TEMP_OUT_L, 2, (unsigned char*)temperature);
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	2102      	movs	r1, #2
 8007e26:	202b      	movs	r0, #43	; 0x2b
 8007e28:	f7ff fefe 	bl	8007c28 <LPS22HH_Readbytes>
}
 8007e2c:	bf00      	nop
 8007e2e:	3708      	adds	r7, #8
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <getAltitude2>:
{
	return (powf((SEA_PRESSURE / pressure), 0.1902226f) - 1.0) * 44307.69396f; //145366.45f * 0.3048f = 44307.69396f;
}

float getAltitude2(float pressure, float temperature) //Get Altitude with temperature correction.
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	ed87 0a01 	vstr	s0, [r7, #4]
 8007e3e:	edc7 0a00 	vstr	s1, [r7]
	return ((powf((SEA_PRESSURE / pressure), 0.1902226f) - 1.0f) * (temperature + 273.15f)) / 0.0065f;
 8007e42:	eddf 6a12 	vldr	s13, [pc, #72]	; 8007e8c <getAltitude2+0x58>
 8007e46:	edd7 7a01 	vldr	s15, [r7, #4]
 8007e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e4e:	eddf 0a10 	vldr	s1, [pc, #64]	; 8007e90 <getAltitude2+0x5c>
 8007e52:	eeb0 0a47 	vmov.f32	s0, s14
 8007e56:	f007 fabb 	bl	800f3d0 <powf>
 8007e5a:	eef0 7a40 	vmov.f32	s15, s0
 8007e5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e62:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007e66:	edd7 7a00 	vldr	s15, [r7]
 8007e6a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8007e94 <getAltitude2+0x60>
 8007e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e76:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8007e98 <getAltitude2+0x64>
 8007e7a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007e7e:	eef0 7a66 	vmov.f32	s15, s13
}
 8007e82:	eeb0 0a67 	vmov.f32	s0, s15
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	447d5000 	.word	0x447d5000
 8007e90:	3e42c9b7 	.word	0x3e42c9b7
 8007e94:	43889333 	.word	0x43889333
 8007e98:	3bd4fdf4 	.word	0x3bd4fdf4

08007e9c <__NVIC_GetPriorityGrouping>:
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007ea0:	4b04      	ldr	r3, [pc, #16]	; (8007eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	0a1b      	lsrs	r3, r3, #8
 8007ea6:	f003 0307 	and.w	r3, r3, #7
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr
 8007eb4:	e000ed00 	.word	0xe000ed00

08007eb8 <__NVIC_EnableIRQ>:
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	db0b      	blt.n	8007ee2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007eca:	79fb      	ldrb	r3, [r7, #7]
 8007ecc:	f003 021f 	and.w	r2, r3, #31
 8007ed0:	4907      	ldr	r1, [pc, #28]	; (8007ef0 <__NVIC_EnableIRQ+0x38>)
 8007ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ed6:	095b      	lsrs	r3, r3, #5
 8007ed8:	2001      	movs	r0, #1
 8007eda:	fa00 f202 	lsl.w	r2, r0, r2
 8007ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007ee2:	bf00      	nop
 8007ee4:	370c      	adds	r7, #12
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop
 8007ef0:	e000e100 	.word	0xe000e100

08007ef4 <__NVIC_SetPriority>:
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	4603      	mov	r3, r0
 8007efc:	6039      	str	r1, [r7, #0]
 8007efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	db0a      	blt.n	8007f1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	b2da      	uxtb	r2, r3
 8007f0c:	490c      	ldr	r1, [pc, #48]	; (8007f40 <__NVIC_SetPriority+0x4c>)
 8007f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f12:	0112      	lsls	r2, r2, #4
 8007f14:	b2d2      	uxtb	r2, r2
 8007f16:	440b      	add	r3, r1
 8007f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007f1c:	e00a      	b.n	8007f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	b2da      	uxtb	r2, r3
 8007f22:	4908      	ldr	r1, [pc, #32]	; (8007f44 <__NVIC_SetPriority+0x50>)
 8007f24:	79fb      	ldrb	r3, [r7, #7]
 8007f26:	f003 030f 	and.w	r3, r3, #15
 8007f2a:	3b04      	subs	r3, #4
 8007f2c:	0112      	lsls	r2, r2, #4
 8007f2e:	b2d2      	uxtb	r2, r2
 8007f30:	440b      	add	r3, r1
 8007f32:	761a      	strb	r2, [r3, #24]
}
 8007f34:	bf00      	nop
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr
 8007f40:	e000e100 	.word	0xe000e100
 8007f44:	e000ed00 	.word	0xe000ed00

08007f48 <NVIC_EncodePriority>:
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b089      	sub	sp, #36	; 0x24
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f003 0307 	and.w	r3, r3, #7
 8007f5a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	f1c3 0307 	rsb	r3, r3, #7
 8007f62:	2b04      	cmp	r3, #4
 8007f64:	bf28      	it	cs
 8007f66:	2304      	movcs	r3, #4
 8007f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	3304      	adds	r3, #4
 8007f6e:	2b06      	cmp	r3, #6
 8007f70:	d902      	bls.n	8007f78 <NVIC_EncodePriority+0x30>
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	3b03      	subs	r3, #3
 8007f76:	e000      	b.n	8007f7a <NVIC_EncodePriority+0x32>
 8007f78:	2300      	movs	r3, #0
 8007f7a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	fa02 f303 	lsl.w	r3, r2, r3
 8007f86:	43da      	mvns	r2, r3
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	401a      	ands	r2, r3
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007f90:	f04f 31ff 	mov.w	r1, #4294967295
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	fa01 f303 	lsl.w	r3, r1, r3
 8007f9a:	43d9      	mvns	r1, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007fa0:	4313      	orrs	r3, r2
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3724      	adds	r7, #36	; 0x24
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr

08007fae <LL_USART_Enable>:
{
 8007fae:	b480      	push	{r7}
 8007fb0:	b083      	sub	sp, #12
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	60da      	str	r2, [r3, #12]
}
 8007fc2:	bf00      	nop
 8007fc4:	370c      	adds	r7, #12
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr

08007fce <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8007fce:	b480      	push	{r7}
 8007fd0:	b083      	sub	sp, #12
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	691b      	ldr	r3, [r3, #16]
 8007fda:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	695b      	ldr	r3, [r3, #20]
 8007fe6:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	615a      	str	r2, [r3, #20]
}
 8007fee:	bf00      	nop
 8007ff0:	370c      	adds	r7, #12
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr

08007ffa <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8007ffa:	b480      	push	{r7}
 8007ffc:	b083      	sub	sp, #12
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800800a:	2b80      	cmp	r3, #128	; 0x80
 800800c:	bf0c      	ite	eq
 800800e:	2301      	moveq	r3, #1
 8008010:	2300      	movne	r3, #0
 8008012:	b2db      	uxtb	r3, r3
}
 8008014:	4618      	mov	r0, r3
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	460b      	mov	r3, r1
 800802a:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800802c:	78fa      	ldrb	r2, [r7, #3]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	605a      	str	r2, [r3, #4]
}
 8008032:	bf00      	nop
 8008034:	370c      	adds	r7, #12
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr
	...

08008040 <LL_AHB1_GRP1_EnableClock>:
{
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8008048:	4b08      	ldr	r3, [pc, #32]	; (800806c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800804a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800804c:	4907      	ldr	r1, [pc, #28]	; (800806c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4313      	orrs	r3, r2
 8008052:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8008054:	4b05      	ldr	r3, [pc, #20]	; (800806c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4013      	ands	r3, r2
 800805c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800805e:	68fb      	ldr	r3, [r7, #12]
}
 8008060:	bf00      	nop
 8008062:	3714      	adds	r7, #20
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr
 800806c:	40023800 	.word	0x40023800

08008070 <LL_APB1_GRP1_EnableClock>:
{
 8008070:	b480      	push	{r7}
 8008072:	b085      	sub	sp, #20
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8008078:	4b08      	ldr	r3, [pc, #32]	; (800809c <LL_APB1_GRP1_EnableClock+0x2c>)
 800807a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800807c:	4907      	ldr	r1, [pc, #28]	; (800809c <LL_APB1_GRP1_EnableClock+0x2c>)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4313      	orrs	r3, r2
 8008082:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8008084:	4b05      	ldr	r3, [pc, #20]	; (800809c <LL_APB1_GRP1_EnableClock+0x2c>)
 8008086:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4013      	ands	r3, r2
 800808c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800808e:	68fb      	ldr	r3, [r7, #12]
}
 8008090:	bf00      	nop
 8008092:	3714      	adds	r7, #20
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr
 800809c:	40023800 	.word	0x40023800

080080a0 <M8N_TransmitData>:
	0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x31,
	0xBF
};

void M8N_TransmitData(unsigned char* data, unsigned char len)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	460b      	mov	r3, r1
 80080aa:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<len;i++)
 80080ac:	2300      	movs	r3, #0
 80080ae:	60fb      	str	r3, [r7, #12]
 80080b0:	e011      	b.n	80080d6 <M8N_TransmitData+0x36>
	{
		while(!LL_USART_IsActiveFlag_TXE(UART4));
 80080b2:	bf00      	nop
 80080b4:	480c      	ldr	r0, [pc, #48]	; (80080e8 <M8N_TransmitData+0x48>)
 80080b6:	f7ff ffa0 	bl	8007ffa <LL_USART_IsActiveFlag_TXE>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d0f9      	beq.n	80080b4 <M8N_TransmitData+0x14>
		LL_USART_TransmitData8(UART4, *(data+i));
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	4413      	add	r3, r2
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	4619      	mov	r1, r3
 80080ca:	4807      	ldr	r0, [pc, #28]	; (80080e8 <M8N_TransmitData+0x48>)
 80080cc:	f7ff ffa8 	bl	8008020 <LL_USART_TransmitData8>
	for(int i=0;i<len;i++)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	3301      	adds	r3, #1
 80080d4:	60fb      	str	r3, [r7, #12]
 80080d6:	78fb      	ldrb	r3, [r7, #3]
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	429a      	cmp	r2, r3
 80080dc:	dbe9      	blt.n	80080b2 <M8N_TransmitData+0x12>
	}
}
 80080de:	bf00      	nop
 80080e0:	bf00      	nop
 80080e2:	3710      	adds	r7, #16
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	40004c00 	.word	0x40004c00

080080ec <M8N_UART4_Initialization>:

void M8N_UART4_Initialization(void)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b08e      	sub	sp, #56	; 0x38
 80080f0:	af00      	add	r7, sp, #0
	LL_USART_InitTypeDef USART_InitStruct = {0};
 80080f2:	f107 031c 	add.w	r3, r7, #28
 80080f6:	2200      	movs	r2, #0
 80080f8:	601a      	str	r2, [r3, #0]
 80080fa:	605a      	str	r2, [r3, #4]
 80080fc:	609a      	str	r2, [r3, #8]
 80080fe:	60da      	str	r2, [r3, #12]
 8008100:	611a      	str	r2, [r3, #16]
 8008102:	615a      	str	r2, [r3, #20]
 8008104:	619a      	str	r2, [r3, #24]

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008106:	1d3b      	adds	r3, r7, #4
 8008108:	2200      	movs	r2, #0
 800810a:	601a      	str	r2, [r3, #0]
 800810c:	605a      	str	r2, [r3, #4]
 800810e:	609a      	str	r2, [r3, #8]
 8008110:	60da      	str	r2, [r3, #12]
 8008112:	611a      	str	r2, [r3, #16]
 8008114:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8008116:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800811a:	f7ff ffa9 	bl	8008070 <LL_APB1_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800811e:	2004      	movs	r0, #4
 8008120:	f7ff ff8e 	bl	8008040 <LL_AHB1_GRP1_EnableClock>
	/**UART4 GPIO Configuration
	PC10   ------> UART4_TX
	PC11   ------> UART4_RX
	*/
	GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 8008124:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008128:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800812a:	2302      	movs	r3, #2
 800812c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800812e:	2303      	movs	r3, #3
 8008130:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008132:	2300      	movs	r3, #0
 8008134:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8008136:	2301      	movs	r3, #1
 8008138:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800813a:	2308      	movs	r3, #8
 800813c:	61bb      	str	r3, [r7, #24]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800813e:	1d3b      	adds	r3, r7, #4
 8008140:	4619      	mov	r1, r3
 8008142:	4819      	ldr	r0, [pc, #100]	; (80081a8 <M8N_UART4_Initialization+0xbc>)
 8008144:	f7fd f823 	bl	800518e <LL_GPIO_Init>

	/* UART4 interrupt Init */
	NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8008148:	f7ff fea8 	bl	8007e9c <__NVIC_GetPriorityGrouping>
 800814c:	4603      	mov	r3, r0
 800814e:	2200      	movs	r2, #0
 8008150:	2100      	movs	r1, #0
 8008152:	4618      	mov	r0, r3
 8008154:	f7ff fef8 	bl	8007f48 <NVIC_EncodePriority>
 8008158:	4603      	mov	r3, r0
 800815a:	4619      	mov	r1, r3
 800815c:	2034      	movs	r0, #52	; 0x34
 800815e:	f7ff fec9 	bl	8007ef4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(UART4_IRQn);
 8008162:	2034      	movs	r0, #52	; 0x34
 8008164:	f7ff fea8 	bl	8007eb8 <__NVIC_EnableIRQ>

	USART_InitStruct.BaudRate = 9600;
 8008168:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800816c:	61fb      	str	r3, [r7, #28]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800816e:	2300      	movs	r3, #0
 8008170:	623b      	str	r3, [r7, #32]
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8008172:	2300      	movs	r3, #0
 8008174:	627b      	str	r3, [r7, #36]	; 0x24
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8008176:	2300      	movs	r3, #0
 8008178:	62bb      	str	r3, [r7, #40]	; 0x28
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800817a:	230c      	movs	r3, #12
 800817c:	62fb      	str	r3, [r7, #44]	; 0x2c
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800817e:	2300      	movs	r3, #0
 8008180:	633b      	str	r3, [r7, #48]	; 0x30
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8008182:	2300      	movs	r3, #0
 8008184:	637b      	str	r3, [r7, #52]	; 0x34
	LL_USART_Init(UART4, &USART_InitStruct);
 8008186:	f107 031c 	add.w	r3, r7, #28
 800818a:	4619      	mov	r1, r3
 800818c:	4807      	ldr	r0, [pc, #28]	; (80081ac <M8N_UART4_Initialization+0xc0>)
 800818e:	f7fd ff79 	bl	8006084 <LL_USART_Init>
	LL_USART_ConfigAsyncMode(UART4);
 8008192:	4806      	ldr	r0, [pc, #24]	; (80081ac <M8N_UART4_Initialization+0xc0>)
 8008194:	f7ff ff1b 	bl	8007fce <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(UART4);
 8008198:	4804      	ldr	r0, [pc, #16]	; (80081ac <M8N_UART4_Initialization+0xc0>)
 800819a:	f7ff ff08 	bl	8007fae <LL_USART_Enable>
}
 800819e:	bf00      	nop
 80081a0:	3738      	adds	r7, #56	; 0x38
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	40020800 	.word	0x40020800
 80081ac:	40004c00 	.word	0x40004c00

080081b0 <M8N_Initialization>:

void M8N_Initialization(void)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	af00      	add	r7, sp, #0
	M8N_UART4_Initialization();
 80081b4:	f7ff ff9a 	bl	80080ec <M8N_UART4_Initialization>

	M8N_TransmitData(&UBX_CFG_PRT[0], sizeof(UBX_CFG_PRT));
 80081b8:	211c      	movs	r1, #28
 80081ba:	480d      	ldr	r0, [pc, #52]	; (80081f0 <M8N_Initialization+0x40>)
 80081bc:	f7ff ff70 	bl	80080a0 <M8N_TransmitData>
	HAL_Delay(100);
 80081c0:	2064      	movs	r0, #100	; 0x64
 80081c2:	f7f8 fee5 	bl	8000f90 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_MSG[0], sizeof(UBX_CFG_MSG));
 80081c6:	2110      	movs	r1, #16
 80081c8:	480a      	ldr	r0, [pc, #40]	; (80081f4 <M8N_Initialization+0x44>)
 80081ca:	f7ff ff69 	bl	80080a0 <M8N_TransmitData>
	HAL_Delay(100);
 80081ce:	2064      	movs	r0, #100	; 0x64
 80081d0:	f7f8 fede 	bl	8000f90 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_RATE[0], sizeof(UBX_CFG_RATE));
 80081d4:	210e      	movs	r1, #14
 80081d6:	4808      	ldr	r0, [pc, #32]	; (80081f8 <M8N_Initialization+0x48>)
 80081d8:	f7ff ff62 	bl	80080a0 <M8N_TransmitData>
	HAL_Delay(100);
 80081dc:	2064      	movs	r0, #100	; 0x64
 80081de:	f7f8 fed7 	bl	8000f90 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_CFG[0], sizeof(UBX_CFG_CFG));
 80081e2:	2115      	movs	r1, #21
 80081e4:	4805      	ldr	r0, [pc, #20]	; (80081fc <M8N_Initialization+0x4c>)
 80081e6:	f7ff ff5b 	bl	80080a0 <M8N_TransmitData>
}
 80081ea:	bf00      	nop
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	08010400 	.word	0x08010400
 80081f4:	0801041c 	.word	0x0801041c
 80081f8:	0801042c 	.word	0x0801042c
 80081fc:	0801043c 	.word	0x0801043c

08008200 <M8N_UBX_CHKSUM_Check>:

unsigned char M8N_UBX_CHKSUM_Check(unsigned char* data, unsigned char len)
{
 8008200:	b480      	push	{r7}
 8008202:	b085      	sub	sp, #20
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	460b      	mov	r3, r1
 800820a:	70fb      	strb	r3, [r7, #3]
	unsigned char CK_A = 0, CK_B = 0;
 800820c:	2300      	movs	r3, #0
 800820e:	73fb      	strb	r3, [r7, #15]
 8008210:	2300      	movs	r3, #0
 8008212:	73bb      	strb	r3, [r7, #14]

	for(int i=2;i<len-2;i++)
 8008214:	2302      	movs	r3, #2
 8008216:	60bb      	str	r3, [r7, #8]
 8008218:	e00d      	b.n	8008236 <M8N_UBX_CHKSUM_Check+0x36>
	{
		CK_A = CK_A + data[i];
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	4413      	add	r3, r2
 8008220:	781a      	ldrb	r2, [r3, #0]
 8008222:	7bfb      	ldrb	r3, [r7, #15]
 8008224:	4413      	add	r3, r2
 8008226:	73fb      	strb	r3, [r7, #15]
		CK_B = CK_B + CK_A;
 8008228:	7bba      	ldrb	r2, [r7, #14]
 800822a:	7bfb      	ldrb	r3, [r7, #15]
 800822c:	4413      	add	r3, r2
 800822e:	73bb      	strb	r3, [r7, #14]
	for(int i=2;i<len-2;i++)
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	3301      	adds	r3, #1
 8008234:	60bb      	str	r3, [r7, #8]
 8008236:	78fb      	ldrb	r3, [r7, #3]
 8008238:	3b02      	subs	r3, #2
 800823a:	68ba      	ldr	r2, [r7, #8]
 800823c:	429a      	cmp	r2, r3
 800823e:	dbec      	blt.n	800821a <M8N_UBX_CHKSUM_Check+0x1a>
	}

	return ((CK_A == data[len-2]) && (CK_B == data[len-1]));
 8008240:	78fb      	ldrb	r3, [r7, #3]
 8008242:	3b02      	subs	r3, #2
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	4413      	add	r3, r2
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	7bfa      	ldrb	r2, [r7, #15]
 800824c:	429a      	cmp	r2, r3
 800824e:	d109      	bne.n	8008264 <M8N_UBX_CHKSUM_Check+0x64>
 8008250:	78fb      	ldrb	r3, [r7, #3]
 8008252:	3b01      	subs	r3, #1
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	4413      	add	r3, r2
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	7bba      	ldrb	r2, [r7, #14]
 800825c:	429a      	cmp	r2, r3
 800825e:	d101      	bne.n	8008264 <M8N_UBX_CHKSUM_Check+0x64>
 8008260:	2301      	movs	r3, #1
 8008262:	e000      	b.n	8008266 <M8N_UBX_CHKSUM_Check+0x66>
 8008264:	2300      	movs	r3, #0
 8008266:	b2db      	uxtb	r3, r3
}
 8008268:	4618      	mov	r0, r3
 800826a:	3714      	adds	r7, #20
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <M8N_UBX_NAV_POSLLH_Parsing>:

void M8N_UBX_NAV_POSLLH_Parsing(unsigned char* data, M8N_UBX_NAV_POSLLH* posllh)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
	posllh->CLASS = data[2];
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	789a      	ldrb	r2, [r3, #2]
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	701a      	strb	r2, [r3, #0]
	posllh->ID = data[3];
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	78da      	ldrb	r2, [r3, #3]
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	705a      	strb	r2, [r3, #1]
	posllh->length = data[4] | data[5]<<8;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	3304      	adds	r3, #4
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	b21a      	sxth	r2, r3
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	3305      	adds	r3, #5
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	021b      	lsls	r3, r3, #8
 800829e:	b21b      	sxth	r3, r3
 80082a0:	4313      	orrs	r3, r2
 80082a2:	b21b      	sxth	r3, r3
 80082a4:	b29a      	uxth	r2, r3
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	805a      	strh	r2, [r3, #2]

	posllh->iTOW = data[6] | data[7]<<8 | data[8]<<16 | data[9]<<24;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	3306      	adds	r3, #6
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	461a      	mov	r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	3307      	adds	r3, #7
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	021b      	lsls	r3, r3, #8
 80082ba:	431a      	orrs	r2, r3
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	3308      	adds	r3, #8
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	041b      	lsls	r3, r3, #16
 80082c4:	431a      	orrs	r2, r3
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	3309      	adds	r3, #9
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	061b      	lsls	r3, r3, #24
 80082ce:	4313      	orrs	r3, r2
 80082d0:	461a      	mov	r2, r3
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	605a      	str	r2, [r3, #4]
	posllh->lon = data[10] | data[11]<<8 | data[12]<<16 | data[13]<<24;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	330a      	adds	r3, #10
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	461a      	mov	r2, r3
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	330b      	adds	r3, #11
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	021b      	lsls	r3, r3, #8
 80082e6:	431a      	orrs	r2, r3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	330c      	adds	r3, #12
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	041b      	lsls	r3, r3, #16
 80082f0:	431a      	orrs	r2, r3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	330d      	adds	r3, #13
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	061b      	lsls	r3, r3, #24
 80082fa:	431a      	orrs	r2, r3
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	609a      	str	r2, [r3, #8]
	posllh->lat = data[14] | data[15]<<8 | data[16]<<16 | data[17]<<24;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	330e      	adds	r3, #14
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	461a      	mov	r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	330f      	adds	r3, #15
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	021b      	lsls	r3, r3, #8
 8008310:	431a      	orrs	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	3310      	adds	r3, #16
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	041b      	lsls	r3, r3, #16
 800831a:	431a      	orrs	r2, r3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	3311      	adds	r3, #17
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	061b      	lsls	r3, r3, #24
 8008324:	431a      	orrs	r2, r3
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	60da      	str	r2, [r3, #12]
	posllh->height = data[18] | data[19]<<8 | data[20]<<16 | data[21]<<24;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	3312      	adds	r3, #18
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	461a      	mov	r2, r3
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	3313      	adds	r3, #19
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	021b      	lsls	r3, r3, #8
 800833a:	431a      	orrs	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	3314      	adds	r3, #20
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	041b      	lsls	r3, r3, #16
 8008344:	431a      	orrs	r2, r3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	3315      	adds	r3, #21
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	061b      	lsls	r3, r3, #24
 800834e:	431a      	orrs	r2, r3
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	611a      	str	r2, [r3, #16]
	posllh->hMSL = data[22] | data[23]<<8 | data[24]<<16 | data[25]<<24;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	3316      	adds	r3, #22
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	461a      	mov	r2, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	3317      	adds	r3, #23
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	021b      	lsls	r3, r3, #8
 8008364:	431a      	orrs	r2, r3
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	3318      	adds	r3, #24
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	041b      	lsls	r3, r3, #16
 800836e:	431a      	orrs	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	3319      	adds	r3, #25
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	061b      	lsls	r3, r3, #24
 8008378:	431a      	orrs	r2, r3
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	615a      	str	r2, [r3, #20]
	posllh->hAcc = data[26] | data[27]<<8 | data[28]<<16 | data[29]<<24;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	331a      	adds	r3, #26
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	461a      	mov	r2, r3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	331b      	adds	r3, #27
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	021b      	lsls	r3, r3, #8
 800838e:	431a      	orrs	r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	331c      	adds	r3, #28
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	041b      	lsls	r3, r3, #16
 8008398:	431a      	orrs	r2, r3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	331d      	adds	r3, #29
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	061b      	lsls	r3, r3, #24
 80083a2:	4313      	orrs	r3, r2
 80083a4:	461a      	mov	r2, r3
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	619a      	str	r2, [r3, #24]
	posllh->vAcc = data[30] | data[31]<<8 | data[32]<<16 | data[33]<<24;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	331e      	adds	r3, #30
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	461a      	mov	r2, r3
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	331f      	adds	r3, #31
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	021b      	lsls	r3, r3, #8
 80083ba:	431a      	orrs	r2, r3
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	3320      	adds	r3, #32
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	041b      	lsls	r3, r3, #16
 80083c4:	431a      	orrs	r2, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	3321      	adds	r3, #33	; 0x21
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	061b      	lsls	r3, r3, #24
 80083ce:	4313      	orrs	r3, r2
 80083d0:	461a      	mov	r2, r3
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	61da      	str	r2, [r3, #28]

//	posllh->lon_f64 = posllh->lon / 10000000.;
//	posllh->lat_f64 = posllh->lat / 10000000.;
}
 80083d6:	bf00      	nop
 80083d8:	370c      	adds	r7, #12
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr
	...

080083e4 <Double_Roll_Pitch_PID_Calculation>:
#define DT 0.001f
#define OUTER_DERIV_FILT_ENABLE 1
#define INNER_DERIV_FILT_ENABLE 1

void Double_Roll_Pitch_PID_Calculation(PIDDouble* axis, float set_point_angle, float angle/*BNO080 Rotation Angle*/, float rate/*ICM-20602 Angular Rate*/)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	ed87 0a02 	vstr	s0, [r7, #8]
 80083f0:	edc7 0a01 	vstr	s1, [r7, #4]
 80083f4:	ed87 1a00 	vstr	s2, [r7]
	/*********** Double PID Outer Begin (Roll and Pitch Angular Position Control) *************/
	axis->out.reference = set_point_angle;	//Set point of outer PID control
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	68ba      	ldr	r2, [r7, #8]
 80083fc:	645a      	str	r2, [r3, #68]	; 0x44
	axis->out.meas_value = angle;			//BNO080 rotation angle
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	649a      	str	r2, [r3, #72]	; 0x48

	axis->out.error = axis->out.reference - axis->out.meas_value;	//Define error of outer loop
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8008410:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	axis->out.p_result = axis->out.error * axis->out.kp;			//Calculate P result of outer loop
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8008426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

	axis->out.error_sum = axis->out.error_sum + axis->out.error * DT;	//Define summation of outer loop
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800843c:	eddf 6a7f 	vldr	s13, [pc, #508]	; 800863c <Double_Roll_Pitch_PID_Calculation+0x258>
 8008440:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008444:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
#define OUT_ERR_SUM_MAX 500
#define OUT_I_ERR_MIN -OUT_ERR_SUM_MAX
	if(axis->out.error_sum > OUT_ERR_SUM_MAX) axis->out.error_sum = OUT_ERR_SUM_MAX;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008454:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8008640 <Double_Roll_Pitch_PID_Calculation+0x25c>
 8008458:	eef4 7ac7 	vcmpe.f32	s15, s14
 800845c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008460:	dd03      	ble.n	800846a <Double_Roll_Pitch_PID_Calculation+0x86>
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	4a77      	ldr	r2, [pc, #476]	; (8008644 <Double_Roll_Pitch_PID_Calculation+0x260>)
 8008466:	655a      	str	r2, [r3, #84]	; 0x54
 8008468:	e00c      	b.n	8008484 <Double_Roll_Pitch_PID_Calculation+0xa0>
	else if(axis->out.error_sum < OUT_I_ERR_MIN) axis->out.error_sum = OUT_I_ERR_MIN;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008470:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8008648 <Double_Roll_Pitch_PID_Calculation+0x264>
 8008474:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800847c:	d502      	bpl.n	8008484 <Double_Roll_Pitch_PID_Calculation+0xa0>
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	4a72      	ldr	r2, [pc, #456]	; (800864c <Double_Roll_Pitch_PID_Calculation+0x268>)
 8008482:	655a      	str	r2, [r3, #84]	; 0x54
	axis->out.i_result = axis->out.error_sum * axis->out.ki;			//Calculate I result of outer loop
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8008490:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	axis->out.error_deriv = -rate;										//Define derivative of outer loop (rate = ICM-20602 Angular Rate)
 800849a:	edd7 7a00 	vldr	s15, [r7]
 800849e:	eef1 7a67 	vneg.f32	s15, s15
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

#if !OUTER_DERIV_FILT_ENABLE
	axis->out.d_result = axis->out.error_deriv * axis->out.kd;			//Calculate D result of outer loop
#else
	axis->out.error_deriv_filt = axis->out.error_deriv_filt * 0.4f + axis->out.error_deriv * 0.6f;	//filter for derivative
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80084ae:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8008650 <Double_Roll_Pitch_PID_Calculation+0x26c>
 80084b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80084bc:	eddf 6a65 	vldr	s13, [pc, #404]	; 8008654 <Double_Roll_Pitch_PID_Calculation+0x270>
 80084c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80084c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	axis->out.d_result = axis->out.error_deriv_filt * axis->out.kd;									//Calculate D result of inner loop
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80084da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
#endif

	axis->out.pid_result = axis->out.p_result + axis->out.i_result + axis->out.d_result;  //Calculate PID result of outer loop
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80084f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80084fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	/****************************************************************************************/
	
	/************ Double PID Inner Begin (Roll and Pitch Angular Rate Control) **************/
	axis->in.reference = axis->out.pid_result;	//Set point of inner PID control is the PID result of outer loop (for double PID control)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	60da      	str	r2, [r3, #12]
	axis->in.meas_value = rate;					//ICM-20602 angular rate
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	683a      	ldr	r2, [r7, #0]
 8008510:	611a      	str	r2, [r3, #16]

	axis->in.error = axis->in.reference - axis->in.meas_value;	//Define error of inner loop
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	ed93 7a03 	vldr	s14, [r3, #12]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	edd3 7a04 	vldr	s15, [r3, #16]
 800851e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	edc3 7a06 	vstr	s15, [r3, #24]
	axis->in.p_result = axis->in.error * axis->in.kp;			//Calculate P result of inner loop
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	ed93 7a06 	vldr	s14, [r3, #24]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	edd3 7a00 	vldr	s15, [r3]
 8008534:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	axis->in.error_sum = axis->in.error_sum + axis->in.error * DT;	//Define summation of inner loop
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	ed93 7a07 	vldr	s14, [r3, #28]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	edd3 7a06 	vldr	s15, [r3, #24]
 800854a:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800863c <Double_Roll_Pitch_PID_Calculation+0x258>
 800854e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008552:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	edc3 7a07 	vstr	s15, [r3, #28]
#define IN_ERR_SUM_MAX 500
#define IN_I_ERR_MIN -IN_ERR_SUM_MAX
	if(axis->out.error_sum > IN_ERR_SUM_MAX) axis->out.error_sum = IN_ERR_SUM_MAX;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008562:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8008640 <Double_Roll_Pitch_PID_Calculation+0x25c>
 8008566:	eef4 7ac7 	vcmpe.f32	s15, s14
 800856a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800856e:	dd03      	ble.n	8008578 <Double_Roll_Pitch_PID_Calculation+0x194>
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	4a34      	ldr	r2, [pc, #208]	; (8008644 <Double_Roll_Pitch_PID_Calculation+0x260>)
 8008574:	655a      	str	r2, [r3, #84]	; 0x54
 8008576:	e00c      	b.n	8008592 <Double_Roll_Pitch_PID_Calculation+0x1ae>
	else if(axis->out.error_sum < IN_I_ERR_MIN) axis->out.error_sum = IN_I_ERR_MIN;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800857e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8008648 <Double_Roll_Pitch_PID_Calculation+0x264>
 8008582:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800858a:	d502      	bpl.n	8008592 <Double_Roll_Pitch_PID_Calculation+0x1ae>
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	4a2f      	ldr	r2, [pc, #188]	; (800864c <Double_Roll_Pitch_PID_Calculation+0x268>)
 8008590:	655a      	str	r2, [r3, #84]	; 0x54
	axis->in.i_result = axis->in.error_sum * axis->in.ki;							//Calculate I result of inner loop
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	ed93 7a07 	vldr	s14, [r3, #28]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	edd3 7a01 	vldr	s15, [r3, #4]
 800859e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	axis->in.error_deriv = -(axis->in.meas_value - axis->in.meas_value_prev) / DT;	//Define derivative of inner loop
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	ed93 7a04 	vldr	s14, [r3, #16]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	edd3 7a05 	vldr	s15, [r3, #20]
 80085b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085b8:	eeb1 7a67 	vneg.f32	s14, s15
 80085bc:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800863c <Double_Roll_Pitch_PID_Calculation+0x258>
 80085c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	edc3 7a08 	vstr	s15, [r3, #32]
	axis->in.meas_value_prev = axis->in.meas_value;									//Refresh value_prev to the latest value
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	691a      	ldr	r2, [r3, #16]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	615a      	str	r2, [r3, #20]

#if !INNER_DERIV_FILT_ENABLE
	axis->in.d_result = axis->in.error_deriv * axis->in.kd;				//Calculate D result of inner loop
#else
	axis->in.error_deriv_filt = axis->in.error_deriv_filt * 0.5f + axis->in.error_deriv * 0.5f;	//filter for derivative
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80085d8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80085dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	edd3 7a08 	vldr	s15, [r3, #32]
 80085e6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80085ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80085ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	axis->in.d_result = axis->in.error_deriv_filt * axis->in.kd;								//Calculate D result of inner loop
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	edd3 7a02 	vldr	s15, [r3, #8]
 8008604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
#endif
	
	axis->in.pid_result = axis->in.p_result + axis->in.i_result + axis->in.d_result; //Calculate PID result of inner loop
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800861a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	/****************************************************************************************/
}
 800862e:	bf00      	nop
 8008630:	3714      	adds	r7, #20
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	3a83126f 	.word	0x3a83126f
 8008640:	43fa0000 	.word	0x43fa0000
 8008644:	43fa0000 	.word	0x43fa0000
 8008648:	c3fa0000 	.word	0xc3fa0000
 800864c:	c3fa0000 	.word	0xc3fa0000
 8008650:	3ecccccd 	.word	0x3ecccccd
 8008654:	3f19999a 	.word	0x3f19999a

08008658 <Single_Yaw_Heading_PID_Calculation>:

void Single_Yaw_Heading_PID_Calculation(PIDSingle* axis, float set_point_angle, float angle/*BNO080 Rotation Angle*/, float rate/*ICM-20602 Angular Rate*/)
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	ed87 0a02 	vstr	s0, [r7, #8]
 8008664:	edc7 0a01 	vstr	s1, [r7, #4]
 8008668:	ed87 1a00 	vstr	s2, [r7]
	/*********** Single PID Begin (Yaw Angular Position) *************/
	axis->reference = set_point_angle;	//Set point of yaw heading @ yaw stick is center.
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	68ba      	ldr	r2, [r7, #8]
 8008670:	60da      	str	r2, [r3, #12]
	axis->meas_value = angle;			//Current BNO080_Yaw angle @ yaw stick is center.
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	611a      	str	r2, [r3, #16]

	axis->error = axis->reference - axis->meas_value;	//Define error of yaw angle control
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	ed93 7a03 	vldr	s14, [r3, #12]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	edd3 7a04 	vldr	s15, [r3, #16]
 8008684:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	edc3 7a06 	vstr	s15, [r3, #24]

	if(axis->error > 180.f) axis->error -= 360.f;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	edd3 7a06 	vldr	s15, [r3, #24]
 8008694:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800877c <Single_Yaw_Heading_PID_Calculation+0x124>
 8008698:	eef4 7ac7 	vcmpe.f32	s15, s14
 800869c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086a0:	dd0a      	ble.n	80086b8 <Single_Yaw_Heading_PID_Calculation+0x60>
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	edd3 7a06 	vldr	s15, [r3, #24]
 80086a8:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8008780 <Single_Yaw_Heading_PID_Calculation+0x128>
 80086ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	edc3 7a06 	vstr	s15, [r3, #24]
 80086b6:	e013      	b.n	80086e0 <Single_Yaw_Heading_PID_Calculation+0x88>
	else if(axis->error < -180.f) axis->error += 360.f;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80086be:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8008784 <Single_Yaw_Heading_PID_Calculation+0x12c>
 80086c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80086c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086ca:	d509      	bpl.n	80086e0 <Single_Yaw_Heading_PID_Calculation+0x88>
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	edd3 7a06 	vldr	s15, [r3, #24]
 80086d2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8008780 <Single_Yaw_Heading_PID_Calculation+0x128>
 80086d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	edc3 7a06 	vstr	s15, [r3, #24]
	
	axis->p_result = axis->error * axis->kp;			//Calculate P result of yaw angle control
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	ed93 7a06 	vldr	s14, [r3, #24]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	edd3 7a00 	vldr	s15, [r3]
 80086ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	axis->error_sum = axis->error_sum + axis->error * DT;	//Define summation of yaw angle control
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	ed93 7a07 	vldr	s14, [r3, #28]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	edd3 7a06 	vldr	s15, [r3, #24]
 8008702:	eddf 6a21 	vldr	s13, [pc, #132]	; 8008788 <Single_Yaw_Heading_PID_Calculation+0x130>
 8008706:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800870a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	edc3 7a07 	vstr	s15, [r3, #28]
	axis->i_result = axis->error_sum * axis->ki;			//Calculate I result of yaw angle control
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	ed93 7a07 	vldr	s14, [r3, #28]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	edd3 7a01 	vldr	s15, [r3, #4]
 8008720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	axis->error_deriv = -rate;						//Define differentiation of yaw angle control
 800872a:	edd7 7a00 	vldr	s15, [r7]
 800872e:	eef1 7a67 	vneg.f32	s15, s15
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	edc3 7a08 	vstr	s15, [r3, #32]
	axis->d_result = axis->error_deriv * axis->kd;	//Calculate D result of yaw angle control
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	ed93 7a08 	vldr	s14, [r3, #32]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	edd3 7a02 	vldr	s15, [r3, #8]
 8008744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	
	axis->pid_result = axis->p_result + axis->i_result + axis->d_result; //Calculate PID result of yaw angle control
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800875a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008764:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	/***************************************************************/
}
 800876e:	bf00      	nop
 8008770:	3714      	adds	r7, #20
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop
 800877c:	43340000 	.word	0x43340000
 8008780:	43b40000 	.word	0x43b40000
 8008784:	c3340000 	.word	0xc3340000
 8008788:	3a83126f 	.word	0x3a83126f

0800878c <Single_Yaw_Rate_PID_Calculation>:

void Single_Yaw_Rate_PID_Calculation(PIDSingle* axis, float set_point_rate, float rate/*ICM-20602 Angular Rate*/)
{
 800878c:	b480      	push	{r7}
 800878e:	b085      	sub	sp, #20
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	ed87 0a02 	vstr	s0, [r7, #8]
 8008798:	edc7 0a01 	vstr	s1, [r7, #4]
	/*********** Single PID Begin (Yaw Angular Rate Control) *************/
	axis->reference = set_point_rate;	//Set point of yaw heading @ yaw stick is not center.
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	68ba      	ldr	r2, [r7, #8]
 80087a0:	60da      	str	r2, [r3, #12]
	axis->meas_value = rate;			//Current ICM20602.gyro_z @ yaw stick is not center.
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	611a      	str	r2, [r3, #16]

	axis->error = axis->reference - axis->meas_value;	//Define error of yaw rate control
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	ed93 7a03 	vldr	s14, [r3, #12]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	edd3 7a04 	vldr	s15, [r3, #16]
 80087b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	edc3 7a06 	vstr	s15, [r3, #24]
	axis->p_result = axis->error * axis->kp;			//Calculate P result of yaw rate control
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	ed93 7a06 	vldr	s14, [r3, #24]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	edd3 7a00 	vldr	s15, [r3]
 80087ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	axis->error_sum = axis->error_sum + axis->error * DT;	//Define summation of yaw rate control
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	ed93 7a07 	vldr	s14, [r3, #28]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	edd3 7a06 	vldr	s15, [r3, #24]
 80087e0:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008874 <Single_Yaw_Rate_PID_Calculation+0xe8>
 80087e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80087e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	edc3 7a07 	vstr	s15, [r3, #28]
	axis->i_result = axis->error_sum * axis->ki;			//Calculate I result of yaw rate control
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	ed93 7a07 	vldr	s14, [r3, #28]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80087fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	axis->error_deriv = -(axis->meas_value - axis->meas_value_prev) / DT;	//Define differentiation of yaw rate control
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	ed93 7a04 	vldr	s14, [r3, #16]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	edd3 7a05 	vldr	s15, [r3, #20]
 8008814:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008818:	eeb1 7a67 	vneg.f32	s14, s15
 800881c:	eddf 6a15 	vldr	s13, [pc, #84]	; 8008874 <Single_Yaw_Rate_PID_Calculation+0xe8>
 8008820:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	edc3 7a08 	vstr	s15, [r3, #32]
	axis->meas_value_prev = axis->meas_value;								//Refresh value_prev to the latest value
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	691a      	ldr	r2, [r3, #16]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	615a      	str	r2, [r3, #20]
	axis->d_result = axis->error_deriv * axis->kd;							//Calculate D result of yaw rate control
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	ed93 7a08 	vldr	s14, [r3, #32]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	edd3 7a02 	vldr	s15, [r3, #8]
 800883e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	axis->pid_result = axis->p_result + axis->i_result + axis->d_result; //Calculate PID result of yaw control
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8008854:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800885e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	/*******************************************************************/
}
 8008868:	bf00      	nop
 800886a:	3714      	adds	r7, #20
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr
 8008874:	3a83126f 	.word	0x3a83126f

08008878 <Reset_PID_Integrator>:

void Reset_PID_Integrator(PIDSingle* axis)
{
 8008878:	b480      	push	{r7}
 800887a:	b083      	sub	sp, #12
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
	axis->error_sum = 0;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f04f 0200 	mov.w	r2, #0
 8008886:	61da      	str	r2, [r3, #28]
}
 8008888:	bf00      	nop
 800888a:	370c      	adds	r7, #12
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <Reset_All_PID_Integrator>:

void Reset_All_PID_Integrator(void)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	af00      	add	r7, sp, #0
	Reset_PID_Integrator(&roll.in);
 8008898:	4809      	ldr	r0, [pc, #36]	; (80088c0 <Reset_All_PID_Integrator+0x2c>)
 800889a:	f7ff ffed 	bl	8008878 <Reset_PID_Integrator>
	Reset_PID_Integrator(&roll.out);
 800889e:	4809      	ldr	r0, [pc, #36]	; (80088c4 <Reset_All_PID_Integrator+0x30>)
 80088a0:	f7ff ffea 	bl	8008878 <Reset_PID_Integrator>
	Reset_PID_Integrator(&pitch.in);
 80088a4:	4808      	ldr	r0, [pc, #32]	; (80088c8 <Reset_All_PID_Integrator+0x34>)
 80088a6:	f7ff ffe7 	bl	8008878 <Reset_PID_Integrator>
	Reset_PID_Integrator(&pitch.out);
 80088aa:	4808      	ldr	r0, [pc, #32]	; (80088cc <Reset_All_PID_Integrator+0x38>)
 80088ac:	f7ff ffe4 	bl	8008878 <Reset_PID_Integrator>
	Reset_PID_Integrator(&yaw_heading);
 80088b0:	4807      	ldr	r0, [pc, #28]	; (80088d0 <Reset_All_PID_Integrator+0x3c>)
 80088b2:	f7ff ffe1 	bl	8008878 <Reset_PID_Integrator>
	Reset_PID_Integrator(&yaw_rate);
 80088b6:	4807      	ldr	r0, [pc, #28]	; (80088d4 <Reset_All_PID_Integrator+0x40>)
 80088b8:	f7ff ffde 	bl	8008878 <Reset_PID_Integrator>
}
 80088bc:	bf00      	nop
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	20000350 	.word	0x20000350
 80088c4:	20000388 	.word	0x20000388
 80088c8:	200003c0 	.word	0x200003c0
 80088cc:	200003f8 	.word	0x200003f8
 80088d0:	20000430 	.word	0x20000430
 80088d4:	20000468 	.word	0x20000468

080088d8 <Quaternion_Update>:
float BNO080_Roll;
float BNO080_Pitch;
float BNO080_Yaw;

void Quaternion_Update(float* q)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b088      	sub	sp, #32
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
	float q1, q2, q3, q4;
	float norm;

	norm = invSqrt(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);    // normalize quaternion
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	ed93 7a00 	vldr	s14, [r3]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	edd3 7a00 	vldr	s15, [r3]
 80088ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	3304      	adds	r3, #4
 80088f4:	edd3 6a00 	vldr	s13, [r3]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	3304      	adds	r3, #4
 80088fc:	edd3 7a00 	vldr	s15, [r3]
 8008900:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008904:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	3308      	adds	r3, #8
 800890c:	edd3 6a00 	vldr	s13, [r3]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	3308      	adds	r3, #8
 8008914:	edd3 7a00 	vldr	s15, [r3]
 8008918:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800891c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	330c      	adds	r3, #12
 8008924:	edd3 6a00 	vldr	s13, [r3]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	330c      	adds	r3, #12
 800892c:	edd3 7a00 	vldr	s15, [r3]
 8008930:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008934:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008938:	eeb0 0a67 	vmov.f32	s0, s15
 800893c:	f000 f90e 	bl	8008b5c <invSqrt>
 8008940:	ed87 0a07 	vstr	s0, [r7, #28]
	
	q1 = q[0] * norm; //x
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	edd3 7a00 	vldr	s15, [r3]
 800894a:	ed97 7a07 	vldr	s14, [r7, #28]
 800894e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008952:	edc7 7a06 	vstr	s15, [r7, #24]
	q2 = q[1] * norm; //y
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	3304      	adds	r3, #4
 800895a:	edd3 7a00 	vldr	s15, [r3]
 800895e:	ed97 7a07 	vldr	s14, [r7, #28]
 8008962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008966:	edc7 7a05 	vstr	s15, [r7, #20]
	q3 = q[2] * norm; //z
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	3308      	adds	r3, #8
 800896e:	edd3 7a00 	vldr	s15, [r3]
 8008972:	ed97 7a07 	vldr	s14, [r7, #28]
 8008976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800897a:	edc7 7a04 	vstr	s15, [r7, #16]
	q4 = q[3] * norm; //w
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	330c      	adds	r3, #12
 8008982:	edd3 7a00 	vldr	s15, [r3]
 8008986:	ed97 7a07 	vldr	s14, [r7, #28]
 800898a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800898e:	edc7 7a03 	vstr	s15, [r7, #12]

	BNO080_Pitch = atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 8008992:	ed97 7a05 	vldr	s14, [r7, #20]
 8008996:	edd7 7a04 	vldr	s15, [r7, #16]
 800899a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800899e:	edd7 6a06 	vldr	s13, [r7, #24]
 80089a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80089a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80089aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80089ae:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80089b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80089b6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80089ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80089be:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80089c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80089c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80089ca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80089ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80089d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80089d6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80089da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80089de:	eef0 0a67 	vmov.f32	s1, s15
 80089e2:	eeb0 0a66 	vmov.f32	s0, s13
 80089e6:	f006 fcf1 	bl	800f3cc <atan2f>
 80089ea:	eef0 7a40 	vmov.f32	s15, s0
 80089ee:	4b55      	ldr	r3, [pc, #340]	; (8008b44 <Quaternion_Update+0x26c>)
 80089f0:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  = -asinf(2.0f * (q2*q4 - q1*q3));
 80089f4:	ed97 7a05 	vldr	s14, [r7, #20]
 80089f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80089fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008a00:	edd7 6a06 	vldr	s13, [r7, #24]
 8008a04:	edd7 7a04 	vldr	s15, [r7, #16]
 8008a08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008a0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a10:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008a14:	eeb0 0a67 	vmov.f32	s0, s15
 8008a18:	f006 fcac 	bl	800f374 <asinf>
 8008a1c:	eef0 7a40 	vmov.f32	s15, s0
 8008a20:	eef1 7a67 	vneg.f32	s15, s15
 8008a24:	4b48      	ldr	r3, [pc, #288]	; (8008b48 <Quaternion_Update+0x270>)
 8008a26:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   = atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 8008a2a:	ed97 7a06 	vldr	s14, [r7, #24]
 8008a2e:	edd7 7a05 	vldr	s15, [r7, #20]
 8008a32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008a36:	edd7 6a04 	vldr	s13, [r7, #16]
 8008a3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8008a3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008a42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a46:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8008a4a:	edd7 7a06 	vldr	s15, [r7, #24]
 8008a4e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8008a52:	edd7 7a05 	vldr	s15, [r7, #20]
 8008a56:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008a5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008a5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8008a62:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008a66:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008a6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8008a6e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008a72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a76:	eef0 0a67 	vmov.f32	s1, s15
 8008a7a:	eeb0 0a66 	vmov.f32	s0, s13
 8008a7e:	f006 fca5 	bl	800f3cc <atan2f>
 8008a82:	eef0 7a40 	vmov.f32	s15, s0
 8008a86:	4b31      	ldr	r3, [pc, #196]	; (8008b4c <Quaternion_Update+0x274>)
 8008a88:	edc3 7a00 	vstr	s15, [r3]

	BNO080_Pitch *= _180_DIV_PI;
 8008a8c:	4b2d      	ldr	r3, [pc, #180]	; (8008b44 <Quaternion_Update+0x26c>)
 8008a8e:	edd3 7a00 	vldr	s15, [r3]
 8008a92:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8008b50 <Quaternion_Update+0x278>
 8008a96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008a9a:	4b2a      	ldr	r3, [pc, #168]	; (8008b44 <Quaternion_Update+0x26c>)
 8008a9c:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  *= _180_DIV_PI;
 8008aa0:	4b29      	ldr	r3, [pc, #164]	; (8008b48 <Quaternion_Update+0x270>)
 8008aa2:	edd3 7a00 	vldr	s15, [r3]
 8008aa6:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8008b50 <Quaternion_Update+0x278>
 8008aaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008aae:	4b26      	ldr	r3, [pc, #152]	; (8008b48 <Quaternion_Update+0x270>)
 8008ab0:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   *= _180_DIV_PI;
 8008ab4:	4b25      	ldr	r3, [pc, #148]	; (8008b4c <Quaternion_Update+0x274>)
 8008ab6:	edd3 7a00 	vldr	s15, [r3]
 8008aba:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8008b50 <Quaternion_Update+0x278>
 8008abe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008ac2:	4b22      	ldr	r3, [pc, #136]	; (8008b4c <Quaternion_Update+0x274>)
 8008ac4:	edc3 7a00 	vstr	s15, [r3]
	
	if(BNO080_Yaw>=0)
 8008ac8:	4b20      	ldr	r3, [pc, #128]	; (8008b4c <Quaternion_Update+0x274>)
 8008aca:	edd3 7a00 	vldr	s15, [r3]
 8008ace:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ad6:	db0a      	blt.n	8008aee <Quaternion_Update+0x216>
		BNO080_Yaw = 360.f - BNO080_Yaw;
 8008ad8:	4b1c      	ldr	r3, [pc, #112]	; (8008b4c <Quaternion_Update+0x274>)
 8008ada:	edd3 7a00 	vldr	s15, [r3]
 8008ade:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8008b54 <Quaternion_Update+0x27c>
 8008ae2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ae6:	4b19      	ldr	r3, [pc, #100]	; (8008b4c <Quaternion_Update+0x274>)
 8008ae8:	edc3 7a00 	vstr	s15, [r3]
 8008aec:	e007      	b.n	8008afe <Quaternion_Update+0x226>
	else	
		BNO080_Yaw = -BNO080_Yaw;
 8008aee:	4b17      	ldr	r3, [pc, #92]	; (8008b4c <Quaternion_Update+0x274>)
 8008af0:	edd3 7a00 	vldr	s15, [r3]
 8008af4:	eef1 7a67 	vneg.f32	s15, s15
 8008af8:	4b14      	ldr	r3, [pc, #80]	; (8008b4c <Quaternion_Update+0x274>)
 8008afa:	edc3 7a00 	vstr	s15, [r3]
	
	
	if(BNO080_Pitch>=0)
 8008afe:	4b11      	ldr	r3, [pc, #68]	; (8008b44 <Quaternion_Update+0x26c>)
 8008b00:	edd3 7a00 	vldr	s15, [r3]
 8008b04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b0c:	db0a      	blt.n	8008b24 <Quaternion_Update+0x24c>
		BNO080_Pitch = 180.f - BNO080_Pitch;
 8008b0e:	4b0d      	ldr	r3, [pc, #52]	; (8008b44 <Quaternion_Update+0x26c>)
 8008b10:	edd3 7a00 	vldr	s15, [r3]
 8008b14:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008b58 <Quaternion_Update+0x280>
 8008b18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b1c:	4b09      	ldr	r3, [pc, #36]	; (8008b44 <Quaternion_Update+0x26c>)
 8008b1e:	edc3 7a00 	vstr	s15, [r3]
	else
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
}
 8008b22:	e00b      	b.n	8008b3c <Quaternion_Update+0x264>
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
 8008b24:	4b07      	ldr	r3, [pc, #28]	; (8008b44 <Quaternion_Update+0x26c>)
 8008b26:	edd3 7a00 	vldr	s15, [r3]
 8008b2a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8008b58 <Quaternion_Update+0x280>
 8008b2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008b32:	eef1 7a67 	vneg.f32	s15, s15
 8008b36:	4b03      	ldr	r3, [pc, #12]	; (8008b44 <Quaternion_Update+0x26c>)
 8008b38:	edc3 7a00 	vstr	s15, [r3]
}
 8008b3c:	bf00      	nop
 8008b3e:	3720      	adds	r7, #32
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	200004a4 	.word	0x200004a4
 8008b48:	200004a0 	.word	0x200004a0
 8008b4c:	200004a8 	.word	0x200004a8
 8008b50:	42652ee1 	.word	0x42652ee1
 8008b54:	43b40000 	.word	0x43b40000
 8008b58:	43340000 	.word	0x43340000

08008b5c <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b087      	sub	sp, #28
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8008b66:	edd7 7a01 	vldr	s15, [r7, #4]
 8008b6a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008b6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008b72:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8008b7a:	f107 0310 	add.w	r3, r7, #16
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	105a      	asrs	r2, r3, #1
 8008b86:	4b12      	ldr	r3, [pc, #72]	; (8008bd0 <invSqrt+0x74>)
 8008b88:	1a9b      	subs	r3, r3, r2
 8008b8a:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8008b8c:	f107 030c 	add.w	r3, r7, #12
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8008b94:	ed97 7a04 	vldr	s14, [r7, #16]
 8008b98:	edd7 7a05 	vldr	s15, [r7, #20]
 8008b9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008ba0:	edd7 7a04 	vldr	s15, [r7, #16]
 8008ba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ba8:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8008bac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008bb0:	edd7 7a04 	vldr	s15, [r7, #16]
 8008bb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bb8:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	ee07 3a90 	vmov	s15, r3
}
 8008bc2:	eeb0 0a67 	vmov.f32	s0, s15
 8008bc6:	371c      	adds	r7, #28
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr
 8008bd0:	5f3759df 	.word	0x5f3759df

08008bd4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8008bda:	463b      	mov	r3, r7
 8008bdc:	2200      	movs	r2, #0
 8008bde:	601a      	str	r2, [r3, #0]
 8008be0:	605a      	str	r2, [r3, #4]
 8008be2:	609a      	str	r2, [r3, #8]
 8008be4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8008be6:	4b21      	ldr	r3, [pc, #132]	; (8008c6c <MX_ADC1_Init+0x98>)
 8008be8:	4a21      	ldr	r2, [pc, #132]	; (8008c70 <MX_ADC1_Init+0x9c>)
 8008bea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8008bec:	4b1f      	ldr	r3, [pc, #124]	; (8008c6c <MX_ADC1_Init+0x98>)
 8008bee:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008bf2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008bf4:	4b1d      	ldr	r3, [pc, #116]	; (8008c6c <MX_ADC1_Init+0x98>)
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8008bfa:	4b1c      	ldr	r3, [pc, #112]	; (8008c6c <MX_ADC1_Init+0x98>)
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8008c00:	4b1a      	ldr	r3, [pc, #104]	; (8008c6c <MX_ADC1_Init+0x98>)
 8008c02:	2201      	movs	r2, #1
 8008c04:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008c06:	4b19      	ldr	r3, [pc, #100]	; (8008c6c <MX_ADC1_Init+0x98>)
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008c0e:	4b17      	ldr	r3, [pc, #92]	; (8008c6c <MX_ADC1_Init+0x98>)
 8008c10:	2200      	movs	r2, #0
 8008c12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008c14:	4b15      	ldr	r3, [pc, #84]	; (8008c6c <MX_ADC1_Init+0x98>)
 8008c16:	4a17      	ldr	r2, [pc, #92]	; (8008c74 <MX_ADC1_Init+0xa0>)
 8008c18:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008c1a:	4b14      	ldr	r3, [pc, #80]	; (8008c6c <MX_ADC1_Init+0x98>)
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8008c20:	4b12      	ldr	r3, [pc, #72]	; (8008c6c <MX_ADC1_Init+0x98>)
 8008c22:	2201      	movs	r2, #1
 8008c24:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8008c26:	4b11      	ldr	r3, [pc, #68]	; (8008c6c <MX_ADC1_Init+0x98>)
 8008c28:	2201      	movs	r2, #1
 8008c2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008c2e:	4b0f      	ldr	r3, [pc, #60]	; (8008c6c <MX_ADC1_Init+0x98>)
 8008c30:	2201      	movs	r2, #1
 8008c32:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008c34:	480d      	ldr	r0, [pc, #52]	; (8008c6c <MX_ADC1_Init+0x98>)
 8008c36:	f7f8 f9cf 	bl	8000fd8 <HAL_ADC_Init>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d001      	beq.n	8008c44 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8008c40:	f002 fbbf 	bl	800b3c2 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8008c44:	2308      	movs	r3, #8
 8008c46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8008c4c:	2307      	movs	r3, #7
 8008c4e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008c50:	463b      	mov	r3, r7
 8008c52:	4619      	mov	r1, r3
 8008c54:	4805      	ldr	r0, [pc, #20]	; (8008c6c <MX_ADC1_Init+0x98>)
 8008c56:	f7f8 fb31 	bl	80012bc <HAL_ADC_ConfigChannel>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d001      	beq.n	8008c64 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8008c60:	f002 fbaf 	bl	800b3c2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8008c64:	bf00      	nop
 8008c66:	3710      	adds	r7, #16
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	200004ac 	.word	0x200004ac
 8008c70:	40012000 	.word	0x40012000
 8008c74:	0f000001 	.word	0x0f000001

08008c78 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b08a      	sub	sp, #40	; 0x28
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c80:	f107 0314 	add.w	r3, r7, #20
 8008c84:	2200      	movs	r2, #0
 8008c86:	601a      	str	r2, [r3, #0]
 8008c88:	605a      	str	r2, [r3, #4]
 8008c8a:	609a      	str	r2, [r3, #8]
 8008c8c:	60da      	str	r2, [r3, #12]
 8008c8e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a2e      	ldr	r2, [pc, #184]	; (8008d50 <HAL_ADC_MspInit+0xd8>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d156      	bne.n	8008d48 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	613b      	str	r3, [r7, #16]
 8008c9e:	4b2d      	ldr	r3, [pc, #180]	; (8008d54 <HAL_ADC_MspInit+0xdc>)
 8008ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ca2:	4a2c      	ldr	r2, [pc, #176]	; (8008d54 <HAL_ADC_MspInit+0xdc>)
 8008ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8008caa:	4b2a      	ldr	r3, [pc, #168]	; (8008d54 <HAL_ADC_MspInit+0xdc>)
 8008cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cb2:	613b      	str	r3, [r7, #16]
 8008cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	60fb      	str	r3, [r7, #12]
 8008cba:	4b26      	ldr	r3, [pc, #152]	; (8008d54 <HAL_ADC_MspInit+0xdc>)
 8008cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cbe:	4a25      	ldr	r2, [pc, #148]	; (8008d54 <HAL_ADC_MspInit+0xdc>)
 8008cc0:	f043 0302 	orr.w	r3, r3, #2
 8008cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8008cc6:	4b23      	ldr	r3, [pc, #140]	; (8008d54 <HAL_ADC_MspInit+0xdc>)
 8008cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cca:	f003 0302 	and.w	r3, r3, #2
 8008cce:	60fb      	str	r3, [r7, #12]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008cde:	f107 0314 	add.w	r3, r7, #20
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	481c      	ldr	r0, [pc, #112]	; (8008d58 <HAL_ADC_MspInit+0xe0>)
 8008ce6:	f7f9 fa9d 	bl	8002224 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8008cea:	4b1c      	ldr	r3, [pc, #112]	; (8008d5c <HAL_ADC_MspInit+0xe4>)
 8008cec:	4a1c      	ldr	r2, [pc, #112]	; (8008d60 <HAL_ADC_MspInit+0xe8>)
 8008cee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8008cf0:	4b1a      	ldr	r3, [pc, #104]	; (8008d5c <HAL_ADC_MspInit+0xe4>)
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008cf6:	4b19      	ldr	r3, [pc, #100]	; (8008d5c <HAL_ADC_MspInit+0xe4>)
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008cfc:	4b17      	ldr	r3, [pc, #92]	; (8008d5c <HAL_ADC_MspInit+0xe4>)
 8008cfe:	2200      	movs	r2, #0
 8008d00:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8008d02:	4b16      	ldr	r3, [pc, #88]	; (8008d5c <HAL_ADC_MspInit+0xe4>)
 8008d04:	2200      	movs	r2, #0
 8008d06:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008d08:	4b14      	ldr	r3, [pc, #80]	; (8008d5c <HAL_ADC_MspInit+0xe4>)
 8008d0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d0e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008d10:	4b12      	ldr	r3, [pc, #72]	; (8008d5c <HAL_ADC_MspInit+0xe4>)
 8008d12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008d16:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8008d18:	4b10      	ldr	r3, [pc, #64]	; (8008d5c <HAL_ADC_MspInit+0xe4>)
 8008d1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008d1e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8008d20:	4b0e      	ldr	r3, [pc, #56]	; (8008d5c <HAL_ADC_MspInit+0xe4>)
 8008d22:	2200      	movs	r2, #0
 8008d24:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008d26:	4b0d      	ldr	r3, [pc, #52]	; (8008d5c <HAL_ADC_MspInit+0xe4>)
 8008d28:	2200      	movs	r2, #0
 8008d2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8008d2c:	480b      	ldr	r0, [pc, #44]	; (8008d5c <HAL_ADC_MspInit+0xe4>)
 8008d2e:	f7f8 fe77 	bl	8001a20 <HAL_DMA_Init>
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d001      	beq.n	8008d3c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8008d38:	f002 fb43 	bl	800b3c2 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	4a07      	ldr	r2, [pc, #28]	; (8008d5c <HAL_ADC_MspInit+0xe4>)
 8008d40:	639a      	str	r2, [r3, #56]	; 0x38
 8008d42:	4a06      	ldr	r2, [pc, #24]	; (8008d5c <HAL_ADC_MspInit+0xe4>)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8008d48:	bf00      	nop
 8008d4a:	3728      	adds	r7, #40	; 0x28
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	40012000 	.word	0x40012000
 8008d54:	40023800 	.word	0x40023800
 8008d58:	40020400 	.word	0x40020400
 8008d5c:	200004f4 	.word	0x200004f4
 8008d60:	40026410 	.word	0x40026410

08008d64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	607b      	str	r3, [r7, #4]
 8008d6e:	4b0c      	ldr	r3, [pc, #48]	; (8008da0 <MX_DMA_Init+0x3c>)
 8008d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d72:	4a0b      	ldr	r2, [pc, #44]	; (8008da0 <MX_DMA_Init+0x3c>)
 8008d74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008d78:	6313      	str	r3, [r2, #48]	; 0x30
 8008d7a:	4b09      	ldr	r3, [pc, #36]	; (8008da0 <MX_DMA_Init+0x3c>)
 8008d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d82:	607b      	str	r3, [r7, #4]
 8008d84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8008d86:	2200      	movs	r2, #0
 8008d88:	2100      	movs	r1, #0
 8008d8a:	2038      	movs	r0, #56	; 0x38
 8008d8c:	f7f8 fe11 	bl	80019b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8008d90:	2038      	movs	r0, #56	; 0x38
 8008d92:	f7f8 fe2a 	bl	80019ea <HAL_NVIC_EnableIRQ>

}
 8008d96:	bf00      	nop
 8008d98:	3708      	adds	r7, #8
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	40023800 	.word	0x40023800

08008da4 <LL_GPIO_SetOutputPin>:
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	683a      	ldr	r2, [r7, #0]
 8008db2:	619a      	str	r2, [r3, #24]
}
 8008db4:	bf00      	nop
 8008db6:	370c      	adds	r7, #12
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr

08008dc0 <LL_GPIO_ResetOutputPin>:
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	041a      	lsls	r2, r3, #16
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	619a      	str	r2, [r3, #24]
}
 8008dd2:	bf00      	nop
 8008dd4:	370c      	adds	r7, #12
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr
	...

08008de0 <LL_AHB1_GRP1_EnableClock>:
{
 8008de0:	b480      	push	{r7}
 8008de2:	b085      	sub	sp, #20
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8008de8:	4b08      	ldr	r3, [pc, #32]	; (8008e0c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008dea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dec:	4907      	ldr	r1, [pc, #28]	; (8008e0c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4313      	orrs	r3, r2
 8008df2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8008df4:	4b05      	ldr	r3, [pc, #20]	; (8008e0c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008df6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	4013      	ands	r3, r2
 8008dfc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
}
 8008e00:	bf00      	nop
 8008e02:	3714      	adds	r7, #20
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr
 8008e0c:	40023800 	.word	0x40023800

08008e10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b086      	sub	sp, #24
 8008e14:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e16:	463b      	mov	r3, r7
 8008e18:	2200      	movs	r2, #0
 8008e1a:	601a      	str	r2, [r3, #0]
 8008e1c:	605a      	str	r2, [r3, #4]
 8008e1e:	609a      	str	r2, [r3, #8]
 8008e20:	60da      	str	r2, [r3, #12]
 8008e22:	611a      	str	r2, [r3, #16]
 8008e24:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8008e26:	2004      	movs	r0, #4
 8008e28:	f7ff ffda 	bl	8008de0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8008e2c:	2080      	movs	r0, #128	; 0x80
 8008e2e:	f7ff ffd7 	bl	8008de0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8008e32:	2001      	movs	r0, #1
 8008e34:	f7ff ffd4 	bl	8008de0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8008e38:	2002      	movs	r0, #2
 8008e3a:	f7ff ffd1 	bl	8008de0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8008e3e:	2008      	movs	r0, #8
 8008e40:	f7ff ffce 	bl	8008de0 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8008e44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008e48:	482e      	ldr	r0, [pc, #184]	; (8008f04 <MX_GPIO_Init+0xf4>)
 8008e4a:	f7ff ffab 	bl	8008da4 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4
 8008e4e:	f240 2117 	movw	r1, #535	; 0x217
 8008e52:	482c      	ldr	r0, [pc, #176]	; (8008f04 <MX_GPIO_Init+0xf4>)
 8008e54:	f7ff ffb4 	bl	8008dc0 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12|LL_GPIO_PIN_6);
 8008e58:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8008e5c:	482a      	ldr	r0, [pc, #168]	; (8008f08 <MX_GPIO_Init+0xf8>)
 8008e5e:	f7ff ffaf 	bl	8008dc0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8008e62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008e66:	4829      	ldr	r0, [pc, #164]	; (8008f0c <MX_GPIO_Init+0xfc>)
 8008e68:	f7ff ffaa 	bl	8008dc0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2
 8008e6c:	f242 2317 	movw	r3, #8727	; 0x2217
 8008e70:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8008e72:	2301      	movs	r3, #1
 8008e74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8008e76:	2300      	movs	r3, #0
 8008e78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008e82:	463b      	mov	r3, r7
 8008e84:	4619      	mov	r1, r3
 8008e86:	481f      	ldr	r0, [pc, #124]	; (8008f04 <MX_GPIO_Init+0xf4>)
 8008e88:	f7fc f981 	bl	800518e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_8;
 8008e8c:	f44f 7390 	mov.w	r3, #288	; 0x120
 8008e90:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8008e92:	2300      	movs	r3, #0
 8008e94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008e96:	2300      	movs	r3, #0
 8008e98:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008e9a:	463b      	mov	r3, r7
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	4819      	ldr	r0, [pc, #100]	; (8008f04 <MX_GPIO_Init+0xf4>)
 8008ea0:	f7fc f975 	bl	800518e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_6;
 8008ea4:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8008ea8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008eba:	463b      	mov	r3, r7
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	4812      	ldr	r0, [pc, #72]	; (8008f08 <MX_GPIO_Init+0xf8>)
 8008ec0:	f7fc f965 	bl	800518e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8008ec4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ec8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008eda:	463b      	mov	r3, r7
 8008edc:	4619      	mov	r1, r3
 8008ede:	480b      	ldr	r0, [pc, #44]	; (8008f0c <MX_GPIO_Init+0xfc>)
 8008ee0:	f7fc f955 	bl	800518e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8008ee4:	2380      	movs	r3, #128	; 0x80
 8008ee6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008eec:	2300      	movs	r3, #0
 8008eee:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008ef0:	463b      	mov	r3, r7
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	4804      	ldr	r0, [pc, #16]	; (8008f08 <MX_GPIO_Init+0xf8>)
 8008ef6:	f7fc f94a 	bl	800518e <LL_GPIO_Init>

}
 8008efa:	bf00      	nop
 8008efc:	3718      	adds	r7, #24
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	40020800 	.word	0x40020800
 8008f08:	40020400 	.word	0x40020400
 8008f0c:	40020000 	.word	0x40020000

08008f10 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008f14:	4b12      	ldr	r3, [pc, #72]	; (8008f60 <MX_I2C1_Init+0x50>)
 8008f16:	4a13      	ldr	r2, [pc, #76]	; (8008f64 <MX_I2C1_Init+0x54>)
 8008f18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008f1a:	4b11      	ldr	r3, [pc, #68]	; (8008f60 <MX_I2C1_Init+0x50>)
 8008f1c:	4a12      	ldr	r2, [pc, #72]	; (8008f68 <MX_I2C1_Init+0x58>)
 8008f1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008f20:	4b0f      	ldr	r3, [pc, #60]	; (8008f60 <MX_I2C1_Init+0x50>)
 8008f22:	2200      	movs	r2, #0
 8008f24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008f26:	4b0e      	ldr	r3, [pc, #56]	; (8008f60 <MX_I2C1_Init+0x50>)
 8008f28:	2200      	movs	r2, #0
 8008f2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008f2c:	4b0c      	ldr	r3, [pc, #48]	; (8008f60 <MX_I2C1_Init+0x50>)
 8008f2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008f32:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008f34:	4b0a      	ldr	r3, [pc, #40]	; (8008f60 <MX_I2C1_Init+0x50>)
 8008f36:	2200      	movs	r2, #0
 8008f38:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008f3a:	4b09      	ldr	r3, [pc, #36]	; (8008f60 <MX_I2C1_Init+0x50>)
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008f40:	4b07      	ldr	r3, [pc, #28]	; (8008f60 <MX_I2C1_Init+0x50>)
 8008f42:	2200      	movs	r2, #0
 8008f44:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008f46:	4b06      	ldr	r3, [pc, #24]	; (8008f60 <MX_I2C1_Init+0x50>)
 8008f48:	2200      	movs	r2, #0
 8008f4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008f4c:	4804      	ldr	r0, [pc, #16]	; (8008f60 <MX_I2C1_Init+0x50>)
 8008f4e:	f7f9 fb05 	bl	800255c <HAL_I2C_Init>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d001      	beq.n	8008f5c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008f58:	f002 fa33 	bl	800b3c2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8008f5c:	bf00      	nop
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	20000554 	.word	0x20000554
 8008f64:	40005400 	.word	0x40005400
 8008f68:	00061a80 	.word	0x00061a80

08008f6c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b08a      	sub	sp, #40	; 0x28
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f74:	f107 0314 	add.w	r3, r7, #20
 8008f78:	2200      	movs	r2, #0
 8008f7a:	601a      	str	r2, [r3, #0]
 8008f7c:	605a      	str	r2, [r3, #4]
 8008f7e:	609a      	str	r2, [r3, #8]
 8008f80:	60da      	str	r2, [r3, #12]
 8008f82:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a19      	ldr	r2, [pc, #100]	; (8008ff0 <HAL_I2C_MspInit+0x84>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d12c      	bne.n	8008fe8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008f8e:	2300      	movs	r3, #0
 8008f90:	613b      	str	r3, [r7, #16]
 8008f92:	4b18      	ldr	r3, [pc, #96]	; (8008ff4 <HAL_I2C_MspInit+0x88>)
 8008f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f96:	4a17      	ldr	r2, [pc, #92]	; (8008ff4 <HAL_I2C_MspInit+0x88>)
 8008f98:	f043 0302 	orr.w	r3, r3, #2
 8008f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8008f9e:	4b15      	ldr	r3, [pc, #84]	; (8008ff4 <HAL_I2C_MspInit+0x88>)
 8008fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fa2:	f003 0302 	and.w	r3, r3, #2
 8008fa6:	613b      	str	r3, [r7, #16]
 8008fa8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8008faa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008fb0:	2312      	movs	r3, #18
 8008fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008fb8:	2303      	movs	r3, #3
 8008fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008fbc:	2304      	movs	r3, #4
 8008fbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008fc0:	f107 0314 	add.w	r3, r7, #20
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	480c      	ldr	r0, [pc, #48]	; (8008ff8 <HAL_I2C_MspInit+0x8c>)
 8008fc8:	f7f9 f92c 	bl	8002224 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008fcc:	2300      	movs	r3, #0
 8008fce:	60fb      	str	r3, [r7, #12]
 8008fd0:	4b08      	ldr	r3, [pc, #32]	; (8008ff4 <HAL_I2C_MspInit+0x88>)
 8008fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd4:	4a07      	ldr	r2, [pc, #28]	; (8008ff4 <HAL_I2C_MspInit+0x88>)
 8008fd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008fda:	6413      	str	r3, [r2, #64]	; 0x40
 8008fdc:	4b05      	ldr	r3, [pc, #20]	; (8008ff4 <HAL_I2C_MspInit+0x88>)
 8008fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008fe4:	60fb      	str	r3, [r7, #12]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8008fe8:	bf00      	nop
 8008fea:	3728      	adds	r7, #40	; 0x28
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	40005400 	.word	0x40005400
 8008ff4:	40023800 	.word	0x40023800
 8008ff8:	40020400 	.word	0x40020400

08008ffc <LL_TIM_EnableCounter>:
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f043 0201 	orr.w	r2, r3, #1
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	601a      	str	r2, [r3, #0]
}
 8009010:	bf00      	nop
 8009012:	370c      	adds	r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <LL_TIM_CC_EnableChannel>:
{
 800901c:	b480      	push	{r7}
 800901e:	b083      	sub	sp, #12
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a1a      	ldr	r2, [r3, #32]
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	431a      	orrs	r2, r3
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	621a      	str	r2, [r3, #32]
}
 8009032:	bf00      	nop
 8009034:	370c      	adds	r7, #12
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr

0800903e <LL_TIM_CC_DisableChannel>:
{
 800903e:	b480      	push	{r7}
 8009040:	b083      	sub	sp, #12
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
 8009046:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6a1a      	ldr	r2, [r3, #32]
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	43db      	mvns	r3, r3
 8009050:	401a      	ands	r2, r3
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	621a      	str	r2, [r3, #32]
}
 8009056:	bf00      	nop
 8009058:	370c      	adds	r7, #12
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr

08009062 <LL_TIM_EnableIT_UPDATE>:
{
 8009062:	b480      	push	{r7}
 8009064:	b083      	sub	sp, #12
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	f043 0201 	orr.w	r2, r3, #1
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	60da      	str	r2, [r3, #12]
}
 8009076:	bf00      	nop
 8009078:	370c      	adds	r7, #12
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr

08009082 <LL_USART_IsActiveFlag_TXE>:
{
 8009082:	b480      	push	{r7}
 8009084:	b083      	sub	sp, #12
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009092:	2b80      	cmp	r3, #128	; 0x80
 8009094:	bf0c      	ite	eq
 8009096:	2301      	moveq	r3, #1
 8009098:	2300      	movne	r3, #0
 800909a:	b2db      	uxtb	r3, r3
}
 800909c:	4618      	mov	r0, r3
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <LL_USART_EnableIT_RXNE>:
{
 80090a8:	b480      	push	{r7}
 80090aa:	b089      	sub	sp, #36	; 0x24
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	330c      	adds	r3, #12
 80090b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	e853 3f00 	ldrex	r3, [r3]
 80090bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	f043 0320 	orr.w	r3, r3, #32
 80090c4:	61fb      	str	r3, [r7, #28]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	330c      	adds	r3, #12
 80090ca:	69fa      	ldr	r2, [r7, #28]
 80090cc:	61ba      	str	r2, [r7, #24]
 80090ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d0:	6979      	ldr	r1, [r7, #20]
 80090d2:	69ba      	ldr	r2, [r7, #24]
 80090d4:	e841 2300 	strex	r3, r2, [r1]
 80090d8:	613b      	str	r3, [r7, #16]
   return(result);
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d1e7      	bne.n	80090b0 <LL_USART_EnableIT_RXNE+0x8>
}
 80090e0:	bf00      	nop
 80090e2:	bf00      	nop
 80090e4:	3724      	adds	r7, #36	; 0x24
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr

080090ee <LL_USART_TransmitData8>:
{
 80090ee:	b480      	push	{r7}
 80090f0:	b083      	sub	sp, #12
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
 80090f6:	460b      	mov	r3, r1
 80090f8:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80090fa:	78fa      	ldrb	r2, [r7, #3]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	605a      	str	r2, [r3, #4]
}
 8009100:	bf00      	nop
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <LL_GPIO_SetOutputPin>:
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	683a      	ldr	r2, [r7, #0]
 800911a:	619a      	str	r2, [r3, #24]
}
 800911c:	bf00      	nop
 800911e:	370c      	adds	r7, #12
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr

08009128 <LL_GPIO_ResetOutputPin>:
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	041a      	lsls	r2, r3, #16
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	619a      	str	r2, [r3, #24]
}
 800913a:	bf00      	nop
 800913c:	370c      	adds	r7, #12
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr

08009146 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8009146:	b480      	push	{r7}
 8009148:	b085      	sub	sp, #20
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
 800914e:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	695b      	ldr	r3, [r3, #20]
 8009154:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8009156:	68fa      	ldr	r2, [r7, #12]
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	4013      	ands	r3, r2
 800915c:	041a      	lsls	r2, r3, #16
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	43d9      	mvns	r1, r3
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	400b      	ands	r3, r1
 8009166:	431a      	orrs	r2, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	619a      	str	r2, [r3, #24]
}
 800916c:	bf00      	nop
 800916e:	3714      	adds	r7, #20
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char* p, int len)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b086      	sub	sp, #24
 800917c:	af00      	add	r7, sp, #0
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	60b9      	str	r1, [r7, #8]
 8009182:	607a      	str	r2, [r7, #4]
	for(int i=0;i<len;i++)
 8009184:	2300      	movs	r3, #0
 8009186:	617b      	str	r3, [r7, #20]
 8009188:	e011      	b.n	80091ae <_write+0x36>
	{
		while(!LL_USART_IsActiveFlag_TXE(USART6));
 800918a:	bf00      	nop
 800918c:	480c      	ldr	r0, [pc, #48]	; (80091c0 <_write+0x48>)
 800918e:	f7ff ff78 	bl	8009082 <LL_USART_IsActiveFlag_TXE>
 8009192:	4603      	mov	r3, r0
 8009194:	2b00      	cmp	r3, #0
 8009196:	d0f9      	beq.n	800918c <_write+0x14>
		LL_USART_TransmitData8(USART6, *(p+i));
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	68ba      	ldr	r2, [r7, #8]
 800919c:	4413      	add	r3, r2
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	4619      	mov	r1, r3
 80091a2:	4807      	ldr	r0, [pc, #28]	; (80091c0 <_write+0x48>)
 80091a4:	f7ff ffa3 	bl	80090ee <LL_USART_TransmitData8>
	for(int i=0;i<len;i++)
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	3301      	adds	r3, #1
 80091ac:	617b      	str	r3, [r7, #20]
 80091ae:	697a      	ldr	r2, [r7, #20]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	dbe9      	blt.n	800918a <_write+0x12>
	}
	return len;
 80091b6:	687b      	ldr	r3, [r7, #4]
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3718      	adds	r7, #24
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}
 80091c0:	40011400 	.word	0x40011400

080091c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b090      	sub	sp, #64	; 0x40
 80091c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	float q[4];
	float quatRadianAccuracy;
	unsigned short adcVal;

	short gyro_x_offset = 1, gyro_y_offset = -23, gyro_z_offset = -3;
 80091ca:	2301      	movs	r3, #1
 80091cc:	847b      	strh	r3, [r7, #34]	; 0x22
 80091ce:	f64f 73e9 	movw	r3, #65513	; 0xffe9
 80091d2:	843b      	strh	r3, [r7, #32]
 80091d4:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 80091d8:	83fb      	strh	r3, [r7, #30]
	unsigned char motor_arming_flag = 0;
 80091da:	2300      	movs	r3, #0
 80091dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	unsigned short iBus_SwA_Prev = 0;
 80091e0:	2300      	movs	r3, #0
 80091e2:	87bb      	strh	r3, [r7, #60]	; 0x3c
	unsigned char iBus_rx_cnt = 0;
 80091e4:	2300      	movs	r3, #0
 80091e6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80091ea:	f7f7 fe5f 	bl	8000eac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80091ee:	f001 fb9d 	bl	800a92c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80091f2:	f7ff fe0d 	bl	8008e10 <MX_GPIO_Init>
  MX_TIM3_Init();
 80091f6:	f002 fec3 	bl	800bf80 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 80091fa:	f003 fa0b 	bl	800c614 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 80091fe:	f002 f995 	bl	800b52c <MX_SPI2_Init>
  MX_SPI1_Init();
 8009202:	f002 f941 	bl	800b488 <MX_SPI1_Init>
  MX_SPI3_Init();
 8009206:	f002 f9e5 	bl	800b5d4 <MX_SPI3_Init>
  MX_UART4_Init();
 800920a:	f003 f8ff 	bl	800c40c <MX_UART4_Init>
  MX_UART5_Init();
 800920e:	f003 f95f 	bl	800c4d0 <MX_UART5_Init>
  MX_TIM5_Init();
 8009212:	f002 ff27 	bl	800c064 <MX_TIM5_Init>
  MX_I2C1_Init();
 8009216:	f7ff fe7b 	bl	8008f10 <MX_I2C1_Init>
  MX_DMA_Init();
 800921a:	f7ff fda3 	bl	8008d64 <MX_DMA_Init>
  MX_ADC1_Init();
 800921e:	f7ff fcd9 	bl	8008bd4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8009222:	f003 f9cd 	bl	800c5c0 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8009226:	f002 ffbf 	bl	800c1a8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM3); //Buzzer
 800922a:	488e      	ldr	r0, [pc, #568]	; (8009464 <main+0x2a0>)
 800922c:	f7ff fee6 	bl	8008ffc <LL_TIM_EnableCounter>

  LL_USART_EnableIT_RXNE(USART6); //Debug UART
 8009230:	488d      	ldr	r0, [pc, #564]	; (8009468 <main+0x2a4>)
 8009232:	f7ff ff39 	bl	80090a8 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(UART4); //GPS
 8009236:	488d      	ldr	r0, [pc, #564]	; (800946c <main+0x2a8>)
 8009238:	f7ff ff36 	bl	80090a8 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(UART5); //FS-iA6B
 800923c:	488c      	ldr	r0, [pc, #560]	; (8009470 <main+0x2ac>)
 800923e:	f7ff ff33 	bl	80090a8 <LL_USART_EnableIT_RXNE>

  LL_TIM_EnableCounter(TIM5); //Motor PWM
 8009242:	488c      	ldr	r0, [pc, #560]	; (8009474 <main+0x2b0>)
 8009244:	f7ff feda 	bl	8008ffc <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH1);
 8009248:	2101      	movs	r1, #1
 800924a:	488a      	ldr	r0, [pc, #552]	; (8009474 <main+0x2b0>)
 800924c:	f7ff fee6 	bl	800901c <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH2);
 8009250:	2110      	movs	r1, #16
 8009252:	4888      	ldr	r0, [pc, #544]	; (8009474 <main+0x2b0>)
 8009254:	f7ff fee2 	bl	800901c <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH3);
 8009258:	f44f 7180 	mov.w	r1, #256	; 0x100
 800925c:	4885      	ldr	r0, [pc, #532]	; (8009474 <main+0x2b0>)
 800925e:	f7ff fedd 	bl	800901c <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH4);
 8009262:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009266:	4883      	ldr	r0, [pc, #524]	; (8009474 <main+0x2b0>)
 8009268:	f7ff fed8 	bl	800901c <LL_TIM_CC_EnableChannel>

  HAL_ADC_Start_DMA(&hadc1, &adcVal, 1); //Battery ADC
 800926c:	1dbb      	adds	r3, r7, #6
 800926e:	2201      	movs	r2, #1
 8009270:	4619      	mov	r1, r3
 8009272:	4881      	ldr	r0, [pc, #516]	; (8009478 <main+0x2b4>)
 8009274:	f7f7 fef4 	bl	8001060 <HAL_ADC_Start_DMA>

  HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1); //Telemetry
 8009278:	2201      	movs	r2, #1
 800927a:	4980      	ldr	r1, [pc, #512]	; (800947c <main+0x2b8>)
 800927c:	4880      	ldr	r0, [pc, #512]	; (8009480 <main+0x2bc>)
 800927e:	f7fa fee9 	bl	8004054 <HAL_UART_Receive_IT>

  LL_TIM_EnableCounter(TIM7); //10Hz, 50Hz, 1kHz loop
 8009282:	4880      	ldr	r0, [pc, #512]	; (8009484 <main+0x2c0>)
 8009284:	f7ff feba 	bl	8008ffc <LL_TIM_EnableCounter>
  LL_TIM_EnableIT_UPDATE(TIM7);
 8009288:	487e      	ldr	r0, [pc, #504]	; (8009484 <main+0x2c0>)
 800928a:	f7ff feea 	bl	8009062 <LL_TIM_EnableIT_UPDATE>


  TIM3->PSC = 1000;
 800928e:	4b75      	ldr	r3, [pc, #468]	; (8009464 <main+0x2a0>)
 8009290:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009294:	629a      	str	r2, [r3, #40]	; 0x28
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009296:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800929a:	4872      	ldr	r0, [pc, #456]	; (8009464 <main+0x2a0>)
 800929c:	f7ff febe 	bl	800901c <LL_TIM_CC_EnableChannel>
  HAL_Delay(60);
 80092a0:	203c      	movs	r0, #60	; 0x3c
 80092a2:	f7f7 fe75 	bl	8000f90 <HAL_Delay>
  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80092a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80092aa:	486e      	ldr	r0, [pc, #440]	; (8009464 <main+0x2a0>)
 80092ac:	f7ff fec7 	bl	800903e <LL_TIM_CC_DisableChannel>
  HAL_Delay(60);
 80092b0:	203c      	movs	r0, #60	; 0x3c
 80092b2:	f7f7 fe6d 	bl	8000f90 <HAL_Delay>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80092b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80092ba:	486a      	ldr	r0, [pc, #424]	; (8009464 <main+0x2a0>)
 80092bc:	f7ff feae 	bl	800901c <LL_TIM_CC_EnableChannel>
  HAL_Delay(60);
 80092c0:	203c      	movs	r0, #60	; 0x3c
 80092c2:	f7f7 fe65 	bl	8000f90 <HAL_Delay>
  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80092c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80092ca:	4866      	ldr	r0, [pc, #408]	; (8009464 <main+0x2a0>)
 80092cc:	f7ff feb7 	bl	800903e <LL_TIM_CC_DisableChannel>
  HAL_Delay(60);
 80092d0:	203c      	movs	r0, #60	; 0x3c
 80092d2:	f7f7 fe5d 	bl	8000f90 <HAL_Delay>
  printf("Checking sensor connection..\n");
 80092d6:	486c      	ldr	r0, [pc, #432]	; (8009488 <main+0x2c4>)
 80092d8:	f003 ff98 	bl	800d20c <puts>


  if(BNO080_Initialization() != 0)
 80092dc:	f7fd fa88 	bl	80067f0 <BNO080_Initialization>
 80092e0:	4603      	mov	r3, r0
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d03a      	beq.n	800935c <main+0x198>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80092e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80092ea:	485e      	ldr	r0, [pc, #376]	; (8009464 <main+0x2a0>)
 80092ec:	f7ff fe96 	bl	800901c <LL_TIM_CC_EnableChannel>

	  TIM3->PSC = 1000;
 80092f0:	4b5c      	ldr	r3, [pc, #368]	; (8009464 <main+0x2a0>)
 80092f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80092f6:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 80092f8:	2064      	movs	r0, #100	; 0x64
 80092fa:	f7f7 fe49 	bl	8000f90 <HAL_Delay>
	  TIM3->PSC = 1500;
 80092fe:	4b59      	ldr	r3, [pc, #356]	; (8009464 <main+0x2a0>)
 8009300:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009304:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 8009306:	2064      	movs	r0, #100	; 0x64
 8009308:	f7f7 fe42 	bl	8000f90 <HAL_Delay>
	  TIM3->PSC = 2000;
 800930c:	4b55      	ldr	r3, [pc, #340]	; (8009464 <main+0x2a0>)
 800930e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009312:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 8009314:	2064      	movs	r0, #100	; 0x64
 8009316:	f7f7 fe3b 	bl	8000f90 <HAL_Delay>

	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800931a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800931e:	4851      	ldr	r0, [pc, #324]	; (8009464 <main+0x2a0>)
 8009320:	f7ff fe8d 	bl	800903e <LL_TIM_CC_DisableChannel>

	  printf("\nBNO080 failed. Program shutting down...\n");
 8009324:	4859      	ldr	r0, [pc, #356]	; (800948c <main+0x2c8>)
 8009326:	f003 ff71 	bl	800d20c <puts>
	  while(1)
	  {
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800932a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800932e:	484d      	ldr	r0, [pc, #308]	; (8009464 <main+0x2a0>)
 8009330:	f7ff fe85 	bl	800903e <LL_TIM_CC_DisableChannel>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0);
 8009334:	2101      	movs	r1, #1
 8009336:	4856      	ldr	r0, [pc, #344]	; (8009490 <main+0x2cc>)
 8009338:	f7ff ff05 	bl	8009146 <LL_GPIO_TogglePin>
		  HAL_Delay(200);
 800933c:	20c8      	movs	r0, #200	; 0xc8
 800933e:	f7f7 fe27 	bl	8000f90 <HAL_Delay>
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009342:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009346:	4847      	ldr	r0, [pc, #284]	; (8009464 <main+0x2a0>)
 8009348:	f7ff fe68 	bl	800901c <LL_TIM_CC_EnableChannel>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0);
 800934c:	2101      	movs	r1, #1
 800934e:	4850      	ldr	r0, [pc, #320]	; (8009490 <main+0x2cc>)
 8009350:	f7ff fef9 	bl	8009146 <LL_GPIO_TogglePin>
		  HAL_Delay(200);
 8009354:	20c8      	movs	r0, #200	; 0xc8
 8009356:	f7f7 fe1b 	bl	8000f90 <HAL_Delay>
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800935a:	e7e6      	b.n	800932a <main+0x166>
	  }
  }
  //BNO080_enableRotationVector(2500);
  BNO080_enableGameRotationVector(2500);
 800935c:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8009360:	f7fd fd85 	bl	8006e6e <BNO080_enableGameRotationVector>

  if(ICM20602_Initialization() != 0)
 8009364:	f7fe fa24 	bl	80077b0 <ICM20602_Initialization>
 8009368:	4603      	mov	r3, r0
 800936a:	2b00      	cmp	r3, #0
 800936c:	d03a      	beq.n	80093e4 <main+0x220>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800936e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009372:	483c      	ldr	r0, [pc, #240]	; (8009464 <main+0x2a0>)
 8009374:	f7ff fe52 	bl	800901c <LL_TIM_CC_EnableChannel>

	  TIM3->PSC = 1000;
 8009378:	4b3a      	ldr	r3, [pc, #232]	; (8009464 <main+0x2a0>)
 800937a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800937e:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 8009380:	2064      	movs	r0, #100	; 0x64
 8009382:	f7f7 fe05 	bl	8000f90 <HAL_Delay>
	  TIM3->PSC = 1500;
 8009386:	4b37      	ldr	r3, [pc, #220]	; (8009464 <main+0x2a0>)
 8009388:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800938c:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 800938e:	2064      	movs	r0, #100	; 0x64
 8009390:	f7f7 fdfe 	bl	8000f90 <HAL_Delay>
	  TIM3->PSC = 2000;
 8009394:	4b33      	ldr	r3, [pc, #204]	; (8009464 <main+0x2a0>)
 8009396:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800939a:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 800939c:	2064      	movs	r0, #100	; 0x64
 800939e:	f7f7 fdf7 	bl	8000f90 <HAL_Delay>

	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80093a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80093a6:	482f      	ldr	r0, [pc, #188]	; (8009464 <main+0x2a0>)
 80093a8:	f7ff fe49 	bl	800903e <LL_TIM_CC_DisableChannel>

	  printf("\nICM-20602 failed. Program shutting down...\n");
 80093ac:	4839      	ldr	r0, [pc, #228]	; (8009494 <main+0x2d0>)
 80093ae:	f003 ff2d 	bl	800d20c <puts>
	  while(1)
	  {
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80093b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80093b6:	482b      	ldr	r0, [pc, #172]	; (8009464 <main+0x2a0>)
 80093b8:	f7ff fe41 	bl	800903e <LL_TIM_CC_DisableChannel>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_1);
 80093bc:	2102      	movs	r1, #2
 80093be:	4834      	ldr	r0, [pc, #208]	; (8009490 <main+0x2cc>)
 80093c0:	f7ff fec1 	bl	8009146 <LL_GPIO_TogglePin>
		  HAL_Delay(200);
 80093c4:	20c8      	movs	r0, #200	; 0xc8
 80093c6:	f7f7 fde3 	bl	8000f90 <HAL_Delay>
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80093ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80093ce:	4825      	ldr	r0, [pc, #148]	; (8009464 <main+0x2a0>)
 80093d0:	f7ff fe24 	bl	800901c <LL_TIM_CC_EnableChannel>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_1);
 80093d4:	2102      	movs	r1, #2
 80093d6:	482e      	ldr	r0, [pc, #184]	; (8009490 <main+0x2cc>)
 80093d8:	f7ff feb5 	bl	8009146 <LL_GPIO_TogglePin>
		  HAL_Delay(200);
 80093dc:	20c8      	movs	r0, #200	; 0xc8
 80093de:	f7f7 fdd7 	bl	8000f90 <HAL_Delay>
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80093e2:	e7e6      	b.n	80093b2 <main+0x1ee>
	  }
  }

  if(LPS22HH_Initialization() != 0)
 80093e4:	f7fe fc70 	bl	8007cc8 <LPS22HH_Initialization>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d056      	beq.n	800949c <main+0x2d8>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80093ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80093f2:	481c      	ldr	r0, [pc, #112]	; (8009464 <main+0x2a0>)
 80093f4:	f7ff fe12 	bl	800901c <LL_TIM_CC_EnableChannel>

	  TIM3->PSC = 1000;
 80093f8:	4b1a      	ldr	r3, [pc, #104]	; (8009464 <main+0x2a0>)
 80093fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80093fe:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 8009400:	2064      	movs	r0, #100	; 0x64
 8009402:	f7f7 fdc5 	bl	8000f90 <HAL_Delay>
	  TIM3->PSC = 1500;
 8009406:	4b17      	ldr	r3, [pc, #92]	; (8009464 <main+0x2a0>)
 8009408:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800940c:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 800940e:	2064      	movs	r0, #100	; 0x64
 8009410:	f7f7 fdbe 	bl	8000f90 <HAL_Delay>
	  TIM3->PSC = 2000;
 8009414:	4b13      	ldr	r3, [pc, #76]	; (8009464 <main+0x2a0>)
 8009416:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800941a:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 800941c:	2064      	movs	r0, #100	; 0x64
 800941e:	f7f7 fdb7 	bl	8000f90 <HAL_Delay>

	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009422:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009426:	480f      	ldr	r0, [pc, #60]	; (8009464 <main+0x2a0>)
 8009428:	f7ff fe09 	bl	800903e <LL_TIM_CC_DisableChannel>

	  printf("\nLPS22HH failed. Program shutting down...\n");
 800942c:	481a      	ldr	r0, [pc, #104]	; (8009498 <main+0x2d4>)
 800942e:	f003 feed 	bl	800d20c <puts>
	  while(1)
	  {
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009432:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009436:	480b      	ldr	r0, [pc, #44]	; (8009464 <main+0x2a0>)
 8009438:	f7ff fe01 	bl	800903e <LL_TIM_CC_DisableChannel>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 800943c:	2104      	movs	r1, #4
 800943e:	4814      	ldr	r0, [pc, #80]	; (8009490 <main+0x2cc>)
 8009440:	f7ff fe81 	bl	8009146 <LL_GPIO_TogglePin>
		  HAL_Delay(200);
 8009444:	20c8      	movs	r0, #200	; 0xc8
 8009446:	f7f7 fda3 	bl	8000f90 <HAL_Delay>
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800944a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800944e:	4805      	ldr	r0, [pc, #20]	; (8009464 <main+0x2a0>)
 8009450:	f7ff fde4 	bl	800901c <LL_TIM_CC_EnableChannel>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 8009454:	2104      	movs	r1, #4
 8009456:	480e      	ldr	r0, [pc, #56]	; (8009490 <main+0x2cc>)
 8009458:	f7ff fe75 	bl	8009146 <LL_GPIO_TogglePin>
		  HAL_Delay(200);
 800945c:	20c8      	movs	r0, #200	; 0xc8
 800945e:	f7f7 fd97 	bl	8000f90 <HAL_Delay>
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009462:	e7e6      	b.n	8009432 <main+0x26e>
 8009464:	40000400 	.word	0x40000400
 8009468:	40011400 	.word	0x40011400
 800946c:	40004c00 	.word	0x40004c00
 8009470:	40005000 	.word	0x40005000
 8009474:	40000c00 	.word	0x40000c00
 8009478:	200004ac 	.word	0x200004ac
 800947c:	20000641 	.word	0x20000641
 8009480:	20000654 	.word	0x20000654
 8009484:	40001400 	.word	0x40001400
 8009488:	080101c8 	.word	0x080101c8
 800948c:	080101e8 	.word	0x080101e8
 8009490:	40020800 	.word	0x40020800
 8009494:	08010214 	.word	0x08010214
 8009498:	08010240 	.word	0x08010240
	  }
  }

  printf("All sensors OK!\n\n");
 800949c:	48c2      	ldr	r0, [pc, #776]	; (80097a8 <main+0x5e4>)
 800949e:	f003 feb5 	bl	800d20c <puts>

  M8N_Initialization();
 80094a2:	f7fe fe85 	bl	80081b0 <M8N_Initialization>



  ICM20602_Writebyte(0x13, (gyro_x_offset*-2)>>8);
 80094a6:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80094aa:	4613      	mov	r3, r2
 80094ac:	07db      	lsls	r3, r3, #31
 80094ae:	1a9b      	subs	r3, r3, r2
 80094b0:	005b      	lsls	r3, r3, #1
 80094b2:	121b      	asrs	r3, r3, #8
 80094b4:	4619      	mov	r1, r3
 80094b6:	2013      	movs	r0, #19
 80094b8:	f7fe f958 	bl	800776c <ICM20602_Writebyte>
  ICM20602_Writebyte(0x14, (gyro_x_offset*-2));
 80094bc:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80094c0:	4613      	mov	r3, r2
 80094c2:	07db      	lsls	r3, r3, #31
 80094c4:	1a9b      	subs	r3, r3, r2
 80094c6:	005b      	lsls	r3, r3, #1
 80094c8:	4619      	mov	r1, r3
 80094ca:	2014      	movs	r0, #20
 80094cc:	f7fe f94e 	bl	800776c <ICM20602_Writebyte>

  ICM20602_Writebyte(0x15, (gyro_y_offset*-2)>>8);
 80094d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80094d4:	4613      	mov	r3, r2
 80094d6:	07db      	lsls	r3, r3, #31
 80094d8:	1a9b      	subs	r3, r3, r2
 80094da:	005b      	lsls	r3, r3, #1
 80094dc:	121b      	asrs	r3, r3, #8
 80094de:	4619      	mov	r1, r3
 80094e0:	2015      	movs	r0, #21
 80094e2:	f7fe f943 	bl	800776c <ICM20602_Writebyte>
  ICM20602_Writebyte(0x16, (gyro_y_offset*-2));
 80094e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80094ea:	4613      	mov	r3, r2
 80094ec:	07db      	lsls	r3, r3, #31
 80094ee:	1a9b      	subs	r3, r3, r2
 80094f0:	005b      	lsls	r3, r3, #1
 80094f2:	4619      	mov	r1, r3
 80094f4:	2016      	movs	r0, #22
 80094f6:	f7fe f939 	bl	800776c <ICM20602_Writebyte>

  ICM20602_Writebyte(0x17, (gyro_z_offset*-2)>>8);
 80094fa:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80094fe:	4613      	mov	r3, r2
 8009500:	07db      	lsls	r3, r3, #31
 8009502:	1a9b      	subs	r3, r3, r2
 8009504:	005b      	lsls	r3, r3, #1
 8009506:	121b      	asrs	r3, r3, #8
 8009508:	4619      	mov	r1, r3
 800950a:	2017      	movs	r0, #23
 800950c:	f7fe f92e 	bl	800776c <ICM20602_Writebyte>
  ICM20602_Writebyte(0x18, (gyro_z_offset*-2));
 8009510:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8009514:	4613      	mov	r3, r2
 8009516:	07db      	lsls	r3, r3, #31
 8009518:	1a9b      	subs	r3, r3, r2
 800951a:	005b      	lsls	r3, r3, #1
 800951c:	4619      	mov	r1, r3
 800951e:	2018      	movs	r0, #24
 8009520:	f7fe f924 	bl	800776c <ICM20602_Writebyte>

  printf("Loading PID Gain...\n");
 8009524:	48a1      	ldr	r0, [pc, #644]	; (80097ac <main+0x5e8>)
 8009526:	f003 fe71 	bl	800d20c <puts>


  if(EP_PIDGain_Read(0, &roll.in.kp, &roll.in.ki, &roll.in.kd) != 0 ||
 800952a:	4ba1      	ldr	r3, [pc, #644]	; (80097b0 <main+0x5ec>)
 800952c:	4aa1      	ldr	r2, [pc, #644]	; (80097b4 <main+0x5f0>)
 800952e:	49a2      	ldr	r1, [pc, #648]	; (80097b8 <main+0x5f4>)
 8009530:	2000      	movs	r0, #0
 8009532:	f7fc ff3b 	bl	80063ac <EP_PIDGain_Read>
 8009536:	4603      	mov	r3, r0
 8009538:	2b00      	cmp	r3, #0
 800953a:	d12c      	bne.n	8009596 <main+0x3d2>
		  EP_PIDGain_Read(1, &roll.out.kp, &roll.out.ki, &roll.out.kd) != 0 ||
 800953c:	4b9f      	ldr	r3, [pc, #636]	; (80097bc <main+0x5f8>)
 800953e:	4aa0      	ldr	r2, [pc, #640]	; (80097c0 <main+0x5fc>)
 8009540:	49a0      	ldr	r1, [pc, #640]	; (80097c4 <main+0x600>)
 8009542:	2001      	movs	r0, #1
 8009544:	f7fc ff32 	bl	80063ac <EP_PIDGain_Read>
 8009548:	4603      	mov	r3, r0
  if(EP_PIDGain_Read(0, &roll.in.kp, &roll.in.ki, &roll.in.kd) != 0 ||
 800954a:	2b00      	cmp	r3, #0
 800954c:	d123      	bne.n	8009596 <main+0x3d2>
		  EP_PIDGain_Read(2, &pitch.in.kp, &pitch.in.ki, &pitch.in.kd) != 0 ||
 800954e:	4b9e      	ldr	r3, [pc, #632]	; (80097c8 <main+0x604>)
 8009550:	4a9e      	ldr	r2, [pc, #632]	; (80097cc <main+0x608>)
 8009552:	499f      	ldr	r1, [pc, #636]	; (80097d0 <main+0x60c>)
 8009554:	2002      	movs	r0, #2
 8009556:	f7fc ff29 	bl	80063ac <EP_PIDGain_Read>
 800955a:	4603      	mov	r3, r0
		  EP_PIDGain_Read(1, &roll.out.kp, &roll.out.ki, &roll.out.kd) != 0 ||
 800955c:	2b00      	cmp	r3, #0
 800955e:	d11a      	bne.n	8009596 <main+0x3d2>
		  EP_PIDGain_Read(3, &pitch.out.kp, &pitch.out.ki, &pitch.out.kd) != 0 ||
 8009560:	4b9c      	ldr	r3, [pc, #624]	; (80097d4 <main+0x610>)
 8009562:	4a9d      	ldr	r2, [pc, #628]	; (80097d8 <main+0x614>)
 8009564:	499d      	ldr	r1, [pc, #628]	; (80097dc <main+0x618>)
 8009566:	2003      	movs	r0, #3
 8009568:	f7fc ff20 	bl	80063ac <EP_PIDGain_Read>
 800956c:	4603      	mov	r3, r0
		  EP_PIDGain_Read(2, &pitch.in.kp, &pitch.in.ki, &pitch.in.kd) != 0 ||
 800956e:	2b00      	cmp	r3, #0
 8009570:	d111      	bne.n	8009596 <main+0x3d2>
		  EP_PIDGain_Read(4, &yaw_heading.kp, &yaw_heading.ki, &yaw_heading.kd) != 0 ||
 8009572:	4b9b      	ldr	r3, [pc, #620]	; (80097e0 <main+0x61c>)
 8009574:	4a9b      	ldr	r2, [pc, #620]	; (80097e4 <main+0x620>)
 8009576:	499c      	ldr	r1, [pc, #624]	; (80097e8 <main+0x624>)
 8009578:	2004      	movs	r0, #4
 800957a:	f7fc ff17 	bl	80063ac <EP_PIDGain_Read>
 800957e:	4603      	mov	r3, r0
		  EP_PIDGain_Read(3, &pitch.out.kp, &pitch.out.ki, &pitch.out.kd) != 0 ||
 8009580:	2b00      	cmp	r3, #0
 8009582:	d108      	bne.n	8009596 <main+0x3d2>
		  EP_PIDGain_Read(5, &yaw_rate.kp, &yaw_rate.ki, &yaw_rate.kd) != 0)
 8009584:	4b99      	ldr	r3, [pc, #612]	; (80097ec <main+0x628>)
 8009586:	4a9a      	ldr	r2, [pc, #616]	; (80097f0 <main+0x62c>)
 8009588:	499a      	ldr	r1, [pc, #616]	; (80097f4 <main+0x630>)
 800958a:	2005      	movs	r0, #5
 800958c:	f7fc ff0e 	bl	80063ac <EP_PIDGain_Read>
 8009590:	4603      	mov	r3, r0
		  EP_PIDGain_Read(4, &yaw_heading.kp, &yaw_heading.ki, &yaw_heading.kd) != 0 ||
 8009592:	2b00      	cmp	r3, #0
 8009594:	d026      	beq.n	80095e4 <main+0x420>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009596:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800959a:	4897      	ldr	r0, [pc, #604]	; (80097f8 <main+0x634>)
 800959c:	f7ff fd3e 	bl	800901c <LL_TIM_CC_EnableChannel>

	  TIM3->PSC = 1000;
 80095a0:	4b95      	ldr	r3, [pc, #596]	; (80097f8 <main+0x634>)
 80095a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80095a6:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 80095a8:	2064      	movs	r0, #100	; 0x64
 80095aa:	f7f7 fcf1 	bl	8000f90 <HAL_Delay>
	  TIM3->PSC = 1500;
 80095ae:	4b92      	ldr	r3, [pc, #584]	; (80097f8 <main+0x634>)
 80095b0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80095b4:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 80095b6:	2064      	movs	r0, #100	; 0x64
 80095b8:	f7f7 fcea 	bl	8000f90 <HAL_Delay>
	  TIM3->PSC = 2000;
 80095bc:	4b8e      	ldr	r3, [pc, #568]	; (80097f8 <main+0x634>)
 80095be:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80095c2:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 80095c4:	2064      	movs	r0, #100	; 0x64
 80095c6:	f7f7 fce3 	bl	8000f90 <HAL_Delay>

	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80095ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80095ce:	488a      	ldr	r0, [pc, #552]	; (80097f8 <main+0x634>)
 80095d0:	f7ff fd35 	bl	800903e <LL_TIM_CC_DisableChannel>

	  HAL_Delay(500);
 80095d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80095d8:	f7f7 fcda 	bl	8000f90 <HAL_Delay>
	  printf("\nCouldn't load PID gain.\n");
 80095dc:	4887      	ldr	r0, [pc, #540]	; (80097fc <main+0x638>)
 80095de:	f003 fe15 	bl	800d20c <puts>
 80095e2:	e098      	b.n	8009716 <main+0x552>
  }
  else
  {
	  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 0, roll.in.kp, roll.in.ki, roll.in.kd);
 80095e4:	4b74      	ldr	r3, [pc, #464]	; (80097b8 <main+0x5f4>)
 80095e6:	edd3 7a00 	vldr	s15, [r3]
 80095ea:	4b73      	ldr	r3, [pc, #460]	; (80097b8 <main+0x5f4>)
 80095ec:	ed93 7a01 	vldr	s14, [r3, #4]
 80095f0:	4b71      	ldr	r3, [pc, #452]	; (80097b8 <main+0x5f4>)
 80095f2:	edd3 6a02 	vldr	s13, [r3, #8]
 80095f6:	eeb0 1a66 	vmov.f32	s2, s13
 80095fa:	eef0 0a47 	vmov.f32	s1, s14
 80095fe:	eeb0 0a67 	vmov.f32	s0, s15
 8009602:	2100      	movs	r1, #0
 8009604:	487e      	ldr	r0, [pc, #504]	; (8009800 <main+0x63c>)
 8009606:	f001 fe89 	bl	800b31c <Encode_Msg_PID_Gain>
	  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800960a:	230a      	movs	r3, #10
 800960c:	2214      	movs	r2, #20
 800960e:	497c      	ldr	r1, [pc, #496]	; (8009800 <main+0x63c>)
 8009610:	487c      	ldr	r0, [pc, #496]	; (8009804 <main+0x640>)
 8009612:	f7fa fc48 	bl	8003ea6 <HAL_UART_Transmit>
	  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 1, roll.out.kp, roll.out.ki, roll.out.kd);
 8009616:	4b68      	ldr	r3, [pc, #416]	; (80097b8 <main+0x5f4>)
 8009618:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800961c:	4b66      	ldr	r3, [pc, #408]	; (80097b8 <main+0x5f4>)
 800961e:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8009622:	4b65      	ldr	r3, [pc, #404]	; (80097b8 <main+0x5f4>)
 8009624:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8009628:	eeb0 1a66 	vmov.f32	s2, s13
 800962c:	eef0 0a47 	vmov.f32	s1, s14
 8009630:	eeb0 0a67 	vmov.f32	s0, s15
 8009634:	2101      	movs	r1, #1
 8009636:	4872      	ldr	r0, [pc, #456]	; (8009800 <main+0x63c>)
 8009638:	f001 fe70 	bl	800b31c <Encode_Msg_PID_Gain>
	  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800963c:	230a      	movs	r3, #10
 800963e:	2214      	movs	r2, #20
 8009640:	496f      	ldr	r1, [pc, #444]	; (8009800 <main+0x63c>)
 8009642:	4870      	ldr	r0, [pc, #448]	; (8009804 <main+0x640>)
 8009644:	f7fa fc2f 	bl	8003ea6 <HAL_UART_Transmit>
	  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 2, pitch.in.kp, pitch.in.ki, pitch.in.kd);
 8009648:	4b61      	ldr	r3, [pc, #388]	; (80097d0 <main+0x60c>)
 800964a:	edd3 7a00 	vldr	s15, [r3]
 800964e:	4b60      	ldr	r3, [pc, #384]	; (80097d0 <main+0x60c>)
 8009650:	ed93 7a01 	vldr	s14, [r3, #4]
 8009654:	4b5e      	ldr	r3, [pc, #376]	; (80097d0 <main+0x60c>)
 8009656:	edd3 6a02 	vldr	s13, [r3, #8]
 800965a:	eeb0 1a66 	vmov.f32	s2, s13
 800965e:	eef0 0a47 	vmov.f32	s1, s14
 8009662:	eeb0 0a67 	vmov.f32	s0, s15
 8009666:	2102      	movs	r1, #2
 8009668:	4865      	ldr	r0, [pc, #404]	; (8009800 <main+0x63c>)
 800966a:	f001 fe57 	bl	800b31c <Encode_Msg_PID_Gain>
	  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800966e:	230a      	movs	r3, #10
 8009670:	2214      	movs	r2, #20
 8009672:	4963      	ldr	r1, [pc, #396]	; (8009800 <main+0x63c>)
 8009674:	4863      	ldr	r0, [pc, #396]	; (8009804 <main+0x640>)
 8009676:	f7fa fc16 	bl	8003ea6 <HAL_UART_Transmit>
	  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 3, pitch.out.kp, pitch.out.ki, pitch.out.kd);
 800967a:	4b55      	ldr	r3, [pc, #340]	; (80097d0 <main+0x60c>)
 800967c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8009680:	4b53      	ldr	r3, [pc, #332]	; (80097d0 <main+0x60c>)
 8009682:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8009686:	4b52      	ldr	r3, [pc, #328]	; (80097d0 <main+0x60c>)
 8009688:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 800968c:	eeb0 1a66 	vmov.f32	s2, s13
 8009690:	eef0 0a47 	vmov.f32	s1, s14
 8009694:	eeb0 0a67 	vmov.f32	s0, s15
 8009698:	2103      	movs	r1, #3
 800969a:	4859      	ldr	r0, [pc, #356]	; (8009800 <main+0x63c>)
 800969c:	f001 fe3e 	bl	800b31c <Encode_Msg_PID_Gain>
	  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 80096a0:	230a      	movs	r3, #10
 80096a2:	2214      	movs	r2, #20
 80096a4:	4956      	ldr	r1, [pc, #344]	; (8009800 <main+0x63c>)
 80096a6:	4857      	ldr	r0, [pc, #348]	; (8009804 <main+0x640>)
 80096a8:	f7fa fbfd 	bl	8003ea6 <HAL_UART_Transmit>
	  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 4, yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 80096ac:	4b4e      	ldr	r3, [pc, #312]	; (80097e8 <main+0x624>)
 80096ae:	edd3 7a00 	vldr	s15, [r3]
 80096b2:	4b4d      	ldr	r3, [pc, #308]	; (80097e8 <main+0x624>)
 80096b4:	ed93 7a01 	vldr	s14, [r3, #4]
 80096b8:	4b4b      	ldr	r3, [pc, #300]	; (80097e8 <main+0x624>)
 80096ba:	edd3 6a02 	vldr	s13, [r3, #8]
 80096be:	eeb0 1a66 	vmov.f32	s2, s13
 80096c2:	eef0 0a47 	vmov.f32	s1, s14
 80096c6:	eeb0 0a67 	vmov.f32	s0, s15
 80096ca:	2104      	movs	r1, #4
 80096cc:	484c      	ldr	r0, [pc, #304]	; (8009800 <main+0x63c>)
 80096ce:	f001 fe25 	bl	800b31c <Encode_Msg_PID_Gain>
	  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 80096d2:	230a      	movs	r3, #10
 80096d4:	2214      	movs	r2, #20
 80096d6:	494a      	ldr	r1, [pc, #296]	; (8009800 <main+0x63c>)
 80096d8:	484a      	ldr	r0, [pc, #296]	; (8009804 <main+0x640>)
 80096da:	f7fa fbe4 	bl	8003ea6 <HAL_UART_Transmit>
	  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 5, yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 80096de:	4b45      	ldr	r3, [pc, #276]	; (80097f4 <main+0x630>)
 80096e0:	edd3 7a00 	vldr	s15, [r3]
 80096e4:	4b43      	ldr	r3, [pc, #268]	; (80097f4 <main+0x630>)
 80096e6:	ed93 7a01 	vldr	s14, [r3, #4]
 80096ea:	4b42      	ldr	r3, [pc, #264]	; (80097f4 <main+0x630>)
 80096ec:	edd3 6a02 	vldr	s13, [r3, #8]
 80096f0:	eeb0 1a66 	vmov.f32	s2, s13
 80096f4:	eef0 0a47 	vmov.f32	s1, s14
 80096f8:	eeb0 0a67 	vmov.f32	s0, s15
 80096fc:	2105      	movs	r1, #5
 80096fe:	4840      	ldr	r0, [pc, #256]	; (8009800 <main+0x63c>)
 8009700:	f001 fe0c 	bl	800b31c <Encode_Msg_PID_Gain>
	  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8009704:	230a      	movs	r3, #10
 8009706:	2214      	movs	r2, #20
 8009708:	493d      	ldr	r1, [pc, #244]	; (8009800 <main+0x63c>)
 800970a:	483e      	ldr	r0, [pc, #248]	; (8009804 <main+0x640>)
 800970c:	f7fa fbcb 	bl	8003ea6 <HAL_UART_Transmit>
	  printf("\nAll gains OK!\n\n");
 8009710:	483d      	ldr	r0, [pc, #244]	; (8009808 <main+0x644>)
 8009712:	f003 fd7b 	bl	800d20c <puts>
  }




  while(Is_iBus_Received() == 0)
 8009716:	e013      	b.n	8009740 <main+0x57c>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009718:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800971c:	4836      	ldr	r0, [pc, #216]	; (80097f8 <main+0x634>)
 800971e:	f7ff fc7d 	bl	800901c <LL_TIM_CC_EnableChannel>

	  TIM3->PSC = 3000;
 8009722:	4b35      	ldr	r3, [pc, #212]	; (80097f8 <main+0x634>)
 8009724:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8009728:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 800972a:	20c8      	movs	r0, #200	; 0xc8
 800972c:	f7f7 fc30 	bl	8000f90 <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009730:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009734:	4830      	ldr	r0, [pc, #192]	; (80097f8 <main+0x634>)
 8009736:	f7ff fc82 	bl	800903e <LL_TIM_CC_DisableChannel>
	  HAL_Delay(200);
 800973a:	20c8      	movs	r0, #200	; 0xc8
 800973c:	f7f7 fc28 	bl	8000f90 <HAL_Delay>
  while(Is_iBus_Received() == 0)
 8009740:	f001 f9b2 	bl	800aaa8 <Is_iBus_Received>
 8009744:	4603      	mov	r3, r0
 8009746:	2b00      	cmp	r3, #0
 8009748:	d0e6      	beq.n	8009718 <main+0x554>
  }

  if(iBus.SwC == 2000)
 800974a:	4b30      	ldr	r3, [pc, #192]	; (800980c <main+0x648>)
 800974c:	899b      	ldrh	r3, [r3, #12]
 800974e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009752:	d17d      	bne.n	8009850 <main+0x68c>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009754:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009758:	4827      	ldr	r0, [pc, #156]	; (80097f8 <main+0x634>)
 800975a:	f7ff fc5f 	bl	800901c <LL_TIM_CC_EnableChannel>

	  TIM3->PSC = 1500;
 800975e:	4b26      	ldr	r3, [pc, #152]	; (80097f8 <main+0x634>)
 8009760:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009764:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 8009766:	20c8      	movs	r0, #200	; 0xc8
 8009768:	f7f7 fc12 	bl	8000f90 <HAL_Delay>
	  TIM3->PSC = 2000;
 800976c:	4b22      	ldr	r3, [pc, #136]	; (80097f8 <main+0x634>)
 800976e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009772:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 8009774:	20c8      	movs	r0, #200	; 0xc8
 8009776:	f7f7 fc0b 	bl	8000f90 <HAL_Delay>
	  TIM3->PSC = 1500;
 800977a:	4b1f      	ldr	r3, [pc, #124]	; (80097f8 <main+0x634>)
 800977c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009780:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 8009782:	20c8      	movs	r0, #200	; 0xc8
 8009784:	f7f7 fc04 	bl	8000f90 <HAL_Delay>
	  TIM3->PSC = 2000;
 8009788:	4b1b      	ldr	r3, [pc, #108]	; (80097f8 <main+0x634>)
 800978a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800978e:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 8009790:	20c8      	movs	r0, #200	; 0xc8
 8009792:	f7f7 fbfd 	bl	8000f90 <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009796:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800979a:	4817      	ldr	r0, [pc, #92]	; (80097f8 <main+0x634>)
 800979c:	f7ff fc4f 	bl	800903e <LL_TIM_CC_DisableChannel>

	  ESC_Calibration();
 80097a0:	f001 f954 	bl	800aa4c <ESC_Calibration>
	  while(iBus.SwC != 1000)
 80097a4:	e04e      	b.n	8009844 <main+0x680>
 80097a6:	bf00      	nop
 80097a8:	0801026c 	.word	0x0801026c
 80097ac:	08010280 	.word	0x08010280
 80097b0:	20000358 	.word	0x20000358
 80097b4:	20000354 	.word	0x20000354
 80097b8:	20000350 	.word	0x20000350
 80097bc:	20000390 	.word	0x20000390
 80097c0:	2000038c 	.word	0x2000038c
 80097c4:	20000388 	.word	0x20000388
 80097c8:	200003c8 	.word	0x200003c8
 80097cc:	200003c4 	.word	0x200003c4
 80097d0:	200003c0 	.word	0x200003c0
 80097d4:	20000400 	.word	0x20000400
 80097d8:	200003fc 	.word	0x200003fc
 80097dc:	200003f8 	.word	0x200003f8
 80097e0:	20000438 	.word	0x20000438
 80097e4:	20000434 	.word	0x20000434
 80097e8:	20000430 	.word	0x20000430
 80097ec:	20000470 	.word	0x20000470
 80097f0:	2000046c 	.word	0x2000046c
 80097f4:	20000468 	.word	0x20000468
 80097f8:	40000400 	.word	0x40000400
 80097fc:	08010294 	.word	0x08010294
 8009800:	200005a8 	.word	0x200005a8
 8009804:	20000654 	.word	0x20000654
 8009808:	080102b0 	.word	0x080102b0
 800980c:	200002cc 	.word	0x200002cc
	  {
		  Is_iBus_Received();
 8009810:	f001 f94a 	bl	800aaa8 <Is_iBus_Received>
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009814:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009818:	4835      	ldr	r0, [pc, #212]	; (80098f0 <main+0x72c>)
 800981a:	f7ff fbff 	bl	800901c <LL_TIM_CC_EnableChannel>

		  TIM3->PSC = 1500;
 800981e:	4b34      	ldr	r3, [pc, #208]	; (80098f0 <main+0x72c>)
 8009820:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009824:	629a      	str	r2, [r3, #40]	; 0x28
		  HAL_Delay(200);
 8009826:	20c8      	movs	r0, #200	; 0xc8
 8009828:	f7f7 fbb2 	bl	8000f90 <HAL_Delay>
		  TIM3->PSC = 2000;
 800982c:	4b30      	ldr	r3, [pc, #192]	; (80098f0 <main+0x72c>)
 800982e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009832:	629a      	str	r2, [r3, #40]	; 0x28
		  HAL_Delay(200);
 8009834:	20c8      	movs	r0, #200	; 0xc8
 8009836:	f7f7 fbab 	bl	8000f90 <HAL_Delay>
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800983a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800983e:	482c      	ldr	r0, [pc, #176]	; (80098f0 <main+0x72c>)
 8009840:	f7ff fbfd 	bl	800903e <LL_TIM_CC_DisableChannel>
	  while(iBus.SwC != 1000)
 8009844:	4b2b      	ldr	r3, [pc, #172]	; (80098f4 <main+0x730>)
 8009846:	899b      	ldrh	r3, [r3, #12]
 8009848:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800984c:	d1e0      	bne.n	8009810 <main+0x64c>
 800984e:	e067      	b.n	8009920 <main+0x75c>
	  }
  }
  else if(iBus.SwC == 1500)
 8009850:	4b28      	ldr	r3, [pc, #160]	; (80098f4 <main+0x730>)
 8009852:	899b      	ldrh	r3, [r3, #12]
 8009854:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009858:	4293      	cmp	r3, r2
 800985a:	d161      	bne.n	8009920 <main+0x75c>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800985c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009860:	4823      	ldr	r0, [pc, #140]	; (80098f0 <main+0x72c>)
 8009862:	f7ff fbdb 	bl	800901c <LL_TIM_CC_EnableChannel>

	  TIM3->PSC = 1500;
 8009866:	4b22      	ldr	r3, [pc, #136]	; (80098f0 <main+0x72c>)
 8009868:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800986c:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 800986e:	20c8      	movs	r0, #200	; 0xc8
 8009870:	f7f7 fb8e 	bl	8000f90 <HAL_Delay>
	  TIM3->PSC = 2000;
 8009874:	4b1e      	ldr	r3, [pc, #120]	; (80098f0 <main+0x72c>)
 8009876:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800987a:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 800987c:	20c8      	movs	r0, #200	; 0xc8
 800987e:	f7f7 fb87 	bl	8000f90 <HAL_Delay>
	  TIM3->PSC = 1500;
 8009882:	4b1b      	ldr	r3, [pc, #108]	; (80098f0 <main+0x72c>)
 8009884:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009888:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 800988a:	20c8      	movs	r0, #200	; 0xc8
 800988c:	f7f7 fb80 	bl	8000f90 <HAL_Delay>
	  TIM3->PSC = 2000;
 8009890:	4b17      	ldr	r3, [pc, #92]	; (80098f0 <main+0x72c>)
 8009892:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009896:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 8009898:	20c8      	movs	r0, #200	; 0xc8
 800989a:	f7f7 fb79 	bl	8000f90 <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800989e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80098a2:	4813      	ldr	r0, [pc, #76]	; (80098f0 <main+0x72c>)
 80098a4:	f7ff fbcb 	bl	800903e <LL_TIM_CC_DisableChannel>

	  BNO080_Calibration();
 80098a8:	f001 f91e 	bl	800aae8 <BNO080_Calibration>
	  while(iBus.SwC != 1000)
 80098ac:	e019      	b.n	80098e2 <main+0x71e>
	  {
		  Is_iBus_Received();
 80098ae:	f001 f8fb 	bl	800aaa8 <Is_iBus_Received>
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80098b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80098b6:	480e      	ldr	r0, [pc, #56]	; (80098f0 <main+0x72c>)
 80098b8:	f7ff fbb0 	bl	800901c <LL_TIM_CC_EnableChannel>

		  TIM3->PSC = 1500;
 80098bc:	4b0c      	ldr	r3, [pc, #48]	; (80098f0 <main+0x72c>)
 80098be:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80098c2:	629a      	str	r2, [r3, #40]	; 0x28
		  HAL_Delay(200);
 80098c4:	20c8      	movs	r0, #200	; 0xc8
 80098c6:	f7f7 fb63 	bl	8000f90 <HAL_Delay>
		  TIM3->PSC = 2000;
 80098ca:	4b09      	ldr	r3, [pc, #36]	; (80098f0 <main+0x72c>)
 80098cc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80098d0:	629a      	str	r2, [r3, #40]	; 0x28
		  HAL_Delay(200);
 80098d2:	20c8      	movs	r0, #200	; 0xc8
 80098d4:	f7f7 fb5c 	bl	8000f90 <HAL_Delay>
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80098d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80098dc:	4804      	ldr	r0, [pc, #16]	; (80098f0 <main+0x72c>)
 80098de:	f7ff fbae 	bl	800903e <LL_TIM_CC_DisableChannel>
	  while(iBus.SwC != 1000)
 80098e2:	4b04      	ldr	r3, [pc, #16]	; (80098f4 <main+0x730>)
 80098e4:	899b      	ldrh	r3, [r3, #12]
 80098e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80098ea:	d1e0      	bne.n	80098ae <main+0x6ea>
	  }
  }
//
//
  while(Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000)
 80098ec:	e018      	b.n	8009920 <main+0x75c>
 80098ee:	bf00      	nop
 80098f0:	40000400 	.word	0x40000400
 80098f4:	200002cc 	.word	0x200002cc
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80098f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80098fc:	489b      	ldr	r0, [pc, #620]	; (8009b6c <main+0x9a8>)
 80098fe:	f7ff fb8d 	bl	800901c <LL_TIM_CC_EnableChannel>

	  TIM3->PSC = 1000;
 8009902:	4b9a      	ldr	r3, [pc, #616]	; (8009b6c <main+0x9a8>)
 8009904:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009908:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(70);
 800990a:	2046      	movs	r0, #70	; 0x46
 800990c:	f7f7 fb40 	bl	8000f90 <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009910:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009914:	4895      	ldr	r0, [pc, #596]	; (8009b6c <main+0x9a8>)
 8009916:	f7ff fb92 	bl	800903e <LL_TIM_CC_DisableChannel>
	  HAL_Delay(70);
 800991a:	2046      	movs	r0, #70	; 0x46
 800991c:	f7f7 fb38 	bl	8000f90 <HAL_Delay>
  while(Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000)
 8009920:	f001 f86e 	bl	800aa00 <Is_iBus_Throttle_Min>
 8009924:	4603      	mov	r3, r0
 8009926:	2b00      	cmp	r3, #0
 8009928:	d0e6      	beq.n	80098f8 <main+0x734>
 800992a:	4b91      	ldr	r3, [pc, #580]	; (8009b70 <main+0x9ac>)
 800992c:	891b      	ldrh	r3, [r3, #8]
 800992e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009932:	d0e1      	beq.n	80098f8 <main+0x734>
  }




  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009934:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009938:	488c      	ldr	r0, [pc, #560]	; (8009b6c <main+0x9a8>)
 800993a:	f7ff fb6f 	bl	800901c <LL_TIM_CC_EnableChannel>

  TIM3->PSC = 2000;
 800993e:	4b8b      	ldr	r3, [pc, #556]	; (8009b6c <main+0x9a8>)
 8009940:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009944:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8009946:	2064      	movs	r0, #100	; 0x64
 8009948:	f7f7 fb22 	bl	8000f90 <HAL_Delay>
  TIM3->PSC = 1500;
 800994c:	4b87      	ldr	r3, [pc, #540]	; (8009b6c <main+0x9a8>)
 800994e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009952:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8009954:	2064      	movs	r0, #100	; 0x64
 8009956:	f7f7 fb1b 	bl	8000f90 <HAL_Delay>
  TIM3->PSC = 1000;
 800995a:	4b84      	ldr	r3, [pc, #528]	; (8009b6c <main+0x9a8>)
 800995c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009960:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8009962:	2064      	movs	r0, #100	; 0x64
 8009964:	f7f7 fb14 	bl	8000f90 <HAL_Delay>

  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009968:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800996c:	487f      	ldr	r0, [pc, #508]	; (8009b6c <main+0x9a8>)
 800996e:	f7ff fb66 	bl	800903e <LL_TIM_CC_DisableChannel>

  printf("Start\n");
 8009972:	4880      	ldr	r0, [pc, #512]	; (8009b74 <main+0x9b0>)
 8009974:	f003 fc4a 	bl	800d20c <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(tim7_1ms_flag == 1)
 8009978:	4b7f      	ldr	r3, [pc, #508]	; (8009b78 <main+0x9b4>)
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	2b01      	cmp	r3, #1
 800997e:	f040 81a8 	bne.w	8009cd2 <main+0xb0e>
	  {
		  tim7_1ms_flag = 0;
 8009982:	4b7d      	ldr	r3, [pc, #500]	; (8009b78 <main+0x9b4>)
 8009984:	2200      	movs	r2, #0
 8009986:	701a      	strb	r2, [r3, #0]

		  Double_Roll_Pitch_PID_Calculation(&pitch, (iBus.RV - 1500) * 0.1f, BNO080_Pitch, ICM20602.gyro_x);
 8009988:	4b79      	ldr	r3, [pc, #484]	; (8009b70 <main+0x9ac>)
 800998a:	885b      	ldrh	r3, [r3, #2]
 800998c:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8009990:	ee07 3a90 	vmov	s15, r3
 8009994:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009998:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8009b7c <main+0x9b8>
 800999c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80099a0:	4b77      	ldr	r3, [pc, #476]	; (8009b80 <main+0x9bc>)
 80099a2:	ed93 7a00 	vldr	s14, [r3]
 80099a6:	4b77      	ldr	r3, [pc, #476]	; (8009b84 <main+0x9c0>)
 80099a8:	edd3 6a07 	vldr	s13, [r3, #28]
 80099ac:	eeb0 1a66 	vmov.f32	s2, s13
 80099b0:	eef0 0a47 	vmov.f32	s1, s14
 80099b4:	eeb0 0a67 	vmov.f32	s0, s15
 80099b8:	4873      	ldr	r0, [pc, #460]	; (8009b88 <main+0x9c4>)
 80099ba:	f7fe fd13 	bl	80083e4 <Double_Roll_Pitch_PID_Calculation>
		  Double_Roll_Pitch_PID_Calculation(&roll, (iBus.RH - 1500) * 0.1f, BNO080_Roll, ICM20602.gyro_y);
 80099be:	4b6c      	ldr	r3, [pc, #432]	; (8009b70 <main+0x9ac>)
 80099c0:	881b      	ldrh	r3, [r3, #0]
 80099c2:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80099c6:	ee07 3a90 	vmov	s15, r3
 80099ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80099ce:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8009b7c <main+0x9b8>
 80099d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80099d6:	4b6d      	ldr	r3, [pc, #436]	; (8009b8c <main+0x9c8>)
 80099d8:	ed93 7a00 	vldr	s14, [r3]
 80099dc:	4b69      	ldr	r3, [pc, #420]	; (8009b84 <main+0x9c0>)
 80099de:	edd3 6a08 	vldr	s13, [r3, #32]
 80099e2:	eeb0 1a66 	vmov.f32	s2, s13
 80099e6:	eef0 0a47 	vmov.f32	s1, s14
 80099ea:	eeb0 0a67 	vmov.f32	s0, s15
 80099ee:	4868      	ldr	r0, [pc, #416]	; (8009b90 <main+0x9cc>)
 80099f0:	f7fe fcf8 	bl	80083e4 <Double_Roll_Pitch_PID_Calculation>

		  if(iBus.LV < 1030 || motor_arming_flag == 0)
 80099f4:	4b5e      	ldr	r3, [pc, #376]	; (8009b70 <main+0x9ac>)
 80099f6:	889b      	ldrh	r3, [r3, #4]
 80099f8:	f240 4205 	movw	r2, #1029	; 0x405
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d903      	bls.n	8009a08 <main+0x844>
 8009a00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d101      	bne.n	8009a0c <main+0x848>
		  {
			  Reset_All_PID_Integrator();
 8009a08:	f7fe ff44 	bl	8008894 <Reset_All_PID_Integrator>
		  }

		  if(iBus.LH < 1485 || iBus.LH > 1515)
 8009a0c:	4b58      	ldr	r3, [pc, #352]	; (8009b70 <main+0x9ac>)
 8009a0e:	88db      	ldrh	r3, [r3, #6]
 8009a10:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d906      	bls.n	8009a26 <main+0x862>
 8009a18:	4b55      	ldr	r3, [pc, #340]	; (8009b70 <main+0x9ac>)
 8009a1a:	88db      	ldrh	r3, [r3, #6]
 8009a1c:	f240 52eb 	movw	r2, #1515	; 0x5eb
 8009a20:	4293      	cmp	r3, r2
 8009a22:	f240 80bb 	bls.w	8009b9c <main+0x9d8>
		  {
			  yaw_heading_reference = BNO080_Yaw;
 8009a26:	4b5b      	ldr	r3, [pc, #364]	; (8009b94 <main+0x9d0>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
			  Single_Yaw_Rate_PID_Calculation(&yaw_rate, (iBus.LH - 1500), ICM20602.gyro_z);
 8009a2c:	4b50      	ldr	r3, [pc, #320]	; (8009b70 <main+0x9ac>)
 8009a2e:	88db      	ldrh	r3, [r3, #6]
 8009a30:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8009a34:	ee07 3a90 	vmov	s15, r3
 8009a38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a3c:	4b51      	ldr	r3, [pc, #324]	; (8009b84 <main+0x9c0>)
 8009a3e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8009a42:	eef0 0a47 	vmov.f32	s1, s14
 8009a46:	eeb0 0a67 	vmov.f32	s0, s15
 8009a4a:	4853      	ldr	r0, [pc, #332]	; (8009b98 <main+0x9d4>)
 8009a4c:	f7fe fe9e 	bl	800878c <Single_Yaw_Rate_PID_Calculation>

			  ccr1 = 10500 + 500 + (iBus.LV - 1000) * 10 - pitch.in.pid_result + roll.in.pid_result - yaw_rate.pid_result;
 8009a50:	4b47      	ldr	r3, [pc, #284]	; (8009b70 <main+0x9ac>)
 8009a52:	889b      	ldrh	r3, [r3, #4]
 8009a54:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8009a58:	4613      	mov	r3, r2
 8009a5a:	009b      	lsls	r3, r3, #2
 8009a5c:	4413      	add	r3, r2
 8009a5e:	005b      	lsls	r3, r3, #1
 8009a60:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8009a64:	3338      	adds	r3, #56	; 0x38
 8009a66:	ee07 3a90 	vmov	s15, r3
 8009a6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009a6e:	4b46      	ldr	r3, [pc, #280]	; (8009b88 <main+0x9c4>)
 8009a70:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009a74:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009a78:	4b45      	ldr	r3, [pc, #276]	; (8009b90 <main+0x9cc>)
 8009a7a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009a7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009a82:	4b45      	ldr	r3, [pc, #276]	; (8009b98 <main+0x9d4>)
 8009a84:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009a88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a90:	ee17 3a90 	vmov	r3, s15
 8009a94:	873b      	strh	r3, [r7, #56]	; 0x38
			  ccr2 = 10500 + 500 + (iBus.LV - 1000) * 10 + pitch.in.pid_result + roll.in.pid_result + yaw_rate.pid_result;
 8009a96:	4b36      	ldr	r3, [pc, #216]	; (8009b70 <main+0x9ac>)
 8009a98:	889b      	ldrh	r3, [r3, #4]
 8009a9a:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8009a9e:	4613      	mov	r3, r2
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	4413      	add	r3, r2
 8009aa4:	005b      	lsls	r3, r3, #1
 8009aa6:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8009aaa:	3338      	adds	r3, #56	; 0x38
 8009aac:	ee07 3a90 	vmov	s15, r3
 8009ab0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009ab4:	4b34      	ldr	r3, [pc, #208]	; (8009b88 <main+0x9c4>)
 8009ab6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009aba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009abe:	4b34      	ldr	r3, [pc, #208]	; (8009b90 <main+0x9cc>)
 8009ac0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009ac4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009ac8:	4b33      	ldr	r3, [pc, #204]	; (8009b98 <main+0x9d4>)
 8009aca:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009ace:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ad2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ad6:	ee17 3a90 	vmov	r3, s15
 8009ada:	86fb      	strh	r3, [r7, #54]	; 0x36
			  ccr3 = 10500 + 500 + (iBus.LV - 1000) * 10 + pitch.in.pid_result - roll.in.pid_result - yaw_rate.pid_result;
 8009adc:	4b24      	ldr	r3, [pc, #144]	; (8009b70 <main+0x9ac>)
 8009ade:	889b      	ldrh	r3, [r3, #4]
 8009ae0:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8009ae4:	4613      	mov	r3, r2
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	4413      	add	r3, r2
 8009aea:	005b      	lsls	r3, r3, #1
 8009aec:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8009af0:	3338      	adds	r3, #56	; 0x38
 8009af2:	ee07 3a90 	vmov	s15, r3
 8009af6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009afa:	4b23      	ldr	r3, [pc, #140]	; (8009b88 <main+0x9c4>)
 8009afc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009b00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009b04:	4b22      	ldr	r3, [pc, #136]	; (8009b90 <main+0x9cc>)
 8009b06:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009b0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009b0e:	4b22      	ldr	r3, [pc, #136]	; (8009b98 <main+0x9d4>)
 8009b10:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009b14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b1c:	ee17 3a90 	vmov	r3, s15
 8009b20:	86bb      	strh	r3, [r7, #52]	; 0x34
			  ccr4 = 10500 + 500 + (iBus.LV - 1000) * 10 - pitch.in.pid_result - roll.in.pid_result + yaw_rate.pid_result;
 8009b22:	4b13      	ldr	r3, [pc, #76]	; (8009b70 <main+0x9ac>)
 8009b24:	889b      	ldrh	r3, [r3, #4]
 8009b26:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8009b2a:	4613      	mov	r3, r2
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	4413      	add	r3, r2
 8009b30:	005b      	lsls	r3, r3, #1
 8009b32:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8009b36:	3338      	adds	r3, #56	; 0x38
 8009b38:	ee07 3a90 	vmov	s15, r3
 8009b3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009b40:	4b11      	ldr	r3, [pc, #68]	; (8009b88 <main+0x9c4>)
 8009b42:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009b46:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009b4a:	4b11      	ldr	r3, [pc, #68]	; (8009b90 <main+0x9cc>)
 8009b4c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009b50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009b54:	4b10      	ldr	r3, [pc, #64]	; (8009b98 <main+0x9d4>)
 8009b56:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009b5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b62:	ee17 3a90 	vmov	r3, s15
 8009b66:	867b      	strh	r3, [r7, #50]	; 0x32
 8009b68:	e0b3      	b.n	8009cd2 <main+0xb0e>
 8009b6a:	bf00      	nop
 8009b6c:	40000400 	.word	0x40000400
 8009b70:	200002cc 	.word	0x200002cc
 8009b74:	080102c0 	.word	0x080102c0
 8009b78:	20000642 	.word	0x20000642
 8009b7c:	3dcccccd 	.word	0x3dcccccd
 8009b80:	200004a4 	.word	0x200004a4
 8009b84:	200002e4 	.word	0x200002e4
 8009b88:	200003c0 	.word	0x200003c0
 8009b8c:	200004a0 	.word	0x200004a0
 8009b90:	20000350 	.word	0x20000350
 8009b94:	200004a8 	.word	0x200004a8
 8009b98:	20000468 	.word	0x20000468
		  }
		  else
		  {
			  Single_Yaw_Heading_PID_Calculation(&yaw_heading, yaw_heading_reference, BNO080_Yaw, ICM20602.gyro_z);
 8009b9c:	4bb9      	ldr	r3, [pc, #740]	; (8009e84 <main+0xcc0>)
 8009b9e:	edd3 7a00 	vldr	s15, [r3]
 8009ba2:	4bb9      	ldr	r3, [pc, #740]	; (8009e88 <main+0xcc4>)
 8009ba4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8009ba8:	eeb0 1a47 	vmov.f32	s2, s14
 8009bac:	eef0 0a67 	vmov.f32	s1, s15
 8009bb0:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8009bb4:	48b5      	ldr	r0, [pc, #724]	; (8009e8c <main+0xcc8>)
 8009bb6:	f7fe fd4f 	bl	8008658 <Single_Yaw_Heading_PID_Calculation>

			  ccr1 = 10500 + 500 + (iBus.LV - 1000) * 10 - pitch.in.pid_result + roll.in.pid_result - yaw_heading.pid_result;
 8009bba:	4bb5      	ldr	r3, [pc, #724]	; (8009e90 <main+0xccc>)
 8009bbc:	889b      	ldrh	r3, [r3, #4]
 8009bbe:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8009bc2:	4613      	mov	r3, r2
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	4413      	add	r3, r2
 8009bc8:	005b      	lsls	r3, r3, #1
 8009bca:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8009bce:	3338      	adds	r3, #56	; 0x38
 8009bd0:	ee07 3a90 	vmov	s15, r3
 8009bd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009bd8:	4bae      	ldr	r3, [pc, #696]	; (8009e94 <main+0xcd0>)
 8009bda:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009bde:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009be2:	4bad      	ldr	r3, [pc, #692]	; (8009e98 <main+0xcd4>)
 8009be4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009be8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009bec:	4ba7      	ldr	r3, [pc, #668]	; (8009e8c <main+0xcc8>)
 8009bee:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009bf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bfa:	ee17 3a90 	vmov	r3, s15
 8009bfe:	873b      	strh	r3, [r7, #56]	; 0x38
			  ccr2 = 10500 + 500 + (iBus.LV - 1000) * 10 + pitch.in.pid_result + roll.in.pid_result + yaw_heading.pid_result;
 8009c00:	4ba3      	ldr	r3, [pc, #652]	; (8009e90 <main+0xccc>)
 8009c02:	889b      	ldrh	r3, [r3, #4]
 8009c04:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8009c08:	4613      	mov	r3, r2
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	4413      	add	r3, r2
 8009c0e:	005b      	lsls	r3, r3, #1
 8009c10:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8009c14:	3338      	adds	r3, #56	; 0x38
 8009c16:	ee07 3a90 	vmov	s15, r3
 8009c1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009c1e:	4b9d      	ldr	r3, [pc, #628]	; (8009e94 <main+0xcd0>)
 8009c20:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009c24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c28:	4b9b      	ldr	r3, [pc, #620]	; (8009e98 <main+0xcd4>)
 8009c2a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009c2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c32:	4b96      	ldr	r3, [pc, #600]	; (8009e8c <main+0xcc8>)
 8009c34:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009c38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c40:	ee17 3a90 	vmov	r3, s15
 8009c44:	86fb      	strh	r3, [r7, #54]	; 0x36
			  ccr3 = 10500 + 500 + (iBus.LV - 1000) * 10 + pitch.in.pid_result - roll.in.pid_result - yaw_heading.pid_result;
 8009c46:	4b92      	ldr	r3, [pc, #584]	; (8009e90 <main+0xccc>)
 8009c48:	889b      	ldrh	r3, [r3, #4]
 8009c4a:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8009c4e:	4613      	mov	r3, r2
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	4413      	add	r3, r2
 8009c54:	005b      	lsls	r3, r3, #1
 8009c56:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8009c5a:	3338      	adds	r3, #56	; 0x38
 8009c5c:	ee07 3a90 	vmov	s15, r3
 8009c60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009c64:	4b8b      	ldr	r3, [pc, #556]	; (8009e94 <main+0xcd0>)
 8009c66:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009c6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c6e:	4b8a      	ldr	r3, [pc, #552]	; (8009e98 <main+0xcd4>)
 8009c70:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009c74:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009c78:	4b84      	ldr	r3, [pc, #528]	; (8009e8c <main+0xcc8>)
 8009c7a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009c7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c86:	ee17 3a90 	vmov	r3, s15
 8009c8a:	86bb      	strh	r3, [r7, #52]	; 0x34
			  ccr4 = 10500 + 500 + (iBus.LV - 1000) * 10 - pitch.in.pid_result - roll.in.pid_result + yaw_heading.pid_result;
 8009c8c:	4b80      	ldr	r3, [pc, #512]	; (8009e90 <main+0xccc>)
 8009c8e:	889b      	ldrh	r3, [r3, #4]
 8009c90:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8009c94:	4613      	mov	r3, r2
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	4413      	add	r3, r2
 8009c9a:	005b      	lsls	r3, r3, #1
 8009c9c:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8009ca0:	3338      	adds	r3, #56	; 0x38
 8009ca2:	ee07 3a90 	vmov	s15, r3
 8009ca6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009caa:	4b7a      	ldr	r3, [pc, #488]	; (8009e94 <main+0xcd0>)
 8009cac:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009cb0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009cb4:	4b78      	ldr	r3, [pc, #480]	; (8009e98 <main+0xcd4>)
 8009cb6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009cba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009cbe:	4b73      	ldr	r3, [pc, #460]	; (8009e8c <main+0xcc8>)
 8009cc0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009cc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009cc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ccc:	ee17 3a90 	vmov	r3, s15
 8009cd0:	867b      	strh	r3, [r7, #50]	; 0x32
		  //printf("%f\t%f\n", BNO080_Pitch, ICM20602.gyro_x);
		  //printf("%f\t%f\n", BNO080_Roll, ICM20602.gyro_y);
		  //printf("%f\t%f\n", BNO080_Yaw, ICM20602.gyro_z);
	  }

	  if(iBus.SwA == 2000 && iBus_SwA_Prev != 2000)
 8009cd2:	4b6f      	ldr	r3, [pc, #444]	; (8009e90 <main+0xccc>)
 8009cd4:	891b      	ldrh	r3, [r3, #8]
 8009cd6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009cda:	d12e      	bne.n	8009d3a <main+0xb76>
 8009cdc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009cde:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009ce2:	d02a      	beq.n	8009d3a <main+0xb76>
	  {
		  if(iBus.LV < 1010)
 8009ce4:	4b6a      	ldr	r3, [pc, #424]	; (8009e90 <main+0xccc>)
 8009ce6:	889b      	ldrh	r3, [r3, #4]
 8009ce8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d81a      	bhi.n	8009d26 <main+0xb62>
		  {
			  motor_arming_flag = 1;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			  yaw_heading_reference = BNO080_Yaw;
 8009cf6:	4b63      	ldr	r3, [pc, #396]	; (8009e84 <main+0xcc0>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cfc:	e01d      	b.n	8009d3a <main+0xb76>
		  }
		  else
		  {
			  while(Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000)
			  {
				  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009cfe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009d02:	4866      	ldr	r0, [pc, #408]	; (8009e9c <main+0xcd8>)
 8009d04:	f7ff f98a 	bl	800901c <LL_TIM_CC_EnableChannel>

				  TIM3->PSC = 1000;
 8009d08:	4b64      	ldr	r3, [pc, #400]	; (8009e9c <main+0xcd8>)
 8009d0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009d0e:	629a      	str	r2, [r3, #40]	; 0x28
				  HAL_Delay(70);
 8009d10:	2046      	movs	r0, #70	; 0x46
 8009d12:	f7f7 f93d 	bl	8000f90 <HAL_Delay>
				  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009d16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009d1a:	4860      	ldr	r0, [pc, #384]	; (8009e9c <main+0xcd8>)
 8009d1c:	f7ff f98f 	bl	800903e <LL_TIM_CC_DisableChannel>
				  HAL_Delay(70);
 8009d20:	2046      	movs	r0, #70	; 0x46
 8009d22:	f7f7 f935 	bl	8000f90 <HAL_Delay>
			  while(Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000)
 8009d26:	f000 fe6b 	bl	800aa00 <Is_iBus_Throttle_Min>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d0e6      	beq.n	8009cfe <main+0xb3a>
 8009d30:	4b57      	ldr	r3, [pc, #348]	; (8009e90 <main+0xccc>)
 8009d32:	891b      	ldrh	r3, [r3, #8]
 8009d34:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009d38:	d0e1      	beq.n	8009cfe <main+0xb3a>
			  }
		  }
	  }
	  iBus_SwA_Prev = iBus.SwA;
 8009d3a:	4b55      	ldr	r3, [pc, #340]	; (8009e90 <main+0xccc>)
 8009d3c:	891b      	ldrh	r3, [r3, #8]
 8009d3e:	87bb      	strh	r3, [r7, #60]	; 0x3c

	  if(iBus.SwA != 2000)
 8009d40:	4b53      	ldr	r3, [pc, #332]	; (8009e90 <main+0xccc>)
 8009d42:	891b      	ldrh	r3, [r3, #8]
 8009d44:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009d48:	d002      	beq.n	8009d50 <main+0xb8c>
	  {
		  motor_arming_flag = 0;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  }

	  if(motor_arming_flag == 1)
 8009d50:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d170      	bne.n	8009e3a <main+0xc76>
	  {
		  if(failsafe_flag == 0)
 8009d58:	4b51      	ldr	r3, [pc, #324]	; (8009ea0 <main+0xcdc>)
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d15b      	bne.n	8009e18 <main+0xc54>
		  {
			  if(iBus.LV > 1030)
 8009d60:	4b4b      	ldr	r3, [pc, #300]	; (8009e90 <main+0xccc>)
 8009d62:	889b      	ldrh	r3, [r3, #4]
 8009d64:	f240 4206 	movw	r2, #1030	; 0x406
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d944      	bls.n	8009df6 <main+0xc32>
			  {
				  TIM5->CCR1 = ccr1 > 21000 ? 21000 : ccr1 < 11000 ? 11000 : ccr1;
 8009d6c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009d6e:	f245 2208 	movw	r2, #21000	; 0x5208
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d807      	bhi.n	8009d86 <main+0xbc2>
 8009d76:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009d78:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	bf38      	it	cc
 8009d80:	4613      	movcc	r3, r2
 8009d82:	b29b      	uxth	r3, r3
 8009d84:	e001      	b.n	8009d8a <main+0xbc6>
 8009d86:	f245 2308 	movw	r3, #21000	; 0x5208
 8009d8a:	4a46      	ldr	r2, [pc, #280]	; (8009ea4 <main+0xce0>)
 8009d8c:	6353      	str	r3, [r2, #52]	; 0x34
				  TIM5->CCR2 = ccr2 > 21000 ? 21000 : ccr2 < 11000 ? 11000 : ccr2;
 8009d8e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009d90:	f245 2208 	movw	r2, #21000	; 0x5208
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d807      	bhi.n	8009da8 <main+0xbe4>
 8009d98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009d9a:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	bf38      	it	cc
 8009da2:	4613      	movcc	r3, r2
 8009da4:	b29b      	uxth	r3, r3
 8009da6:	e001      	b.n	8009dac <main+0xbe8>
 8009da8:	f245 2308 	movw	r3, #21000	; 0x5208
 8009dac:	4a3d      	ldr	r2, [pc, #244]	; (8009ea4 <main+0xce0>)
 8009dae:	6393      	str	r3, [r2, #56]	; 0x38
				  TIM5->CCR3 = ccr3 > 21000 ? 21000 : ccr3 < 11000 ? 11000 : ccr3;
 8009db0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009db2:	f245 2208 	movw	r2, #21000	; 0x5208
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d807      	bhi.n	8009dca <main+0xc06>
 8009dba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009dbc:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	bf38      	it	cc
 8009dc4:	4613      	movcc	r3, r2
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	e001      	b.n	8009dce <main+0xc0a>
 8009dca:	f245 2308 	movw	r3, #21000	; 0x5208
 8009dce:	4a35      	ldr	r2, [pc, #212]	; (8009ea4 <main+0xce0>)
 8009dd0:	63d3      	str	r3, [r2, #60]	; 0x3c
				  TIM5->CCR4 = ccr4 > 21000 ? 21000 : ccr4 < 11000 ? 11000 : ccr4;
 8009dd2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009dd4:	f245 2208 	movw	r2, #21000	; 0x5208
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d807      	bhi.n	8009dec <main+0xc28>
 8009ddc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009dde:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8009de2:	4293      	cmp	r3, r2
 8009de4:	bf38      	it	cc
 8009de6:	4613      	movcc	r3, r2
 8009de8:	b29b      	uxth	r3, r3
 8009dea:	e001      	b.n	8009df0 <main+0xc2c>
 8009dec:	f245 2308 	movw	r3, #21000	; 0x5208
 8009df0:	4a2c      	ldr	r2, [pc, #176]	; (8009ea4 <main+0xce0>)
 8009df2:	6413      	str	r3, [r2, #64]	; 0x40
 8009df4:	e031      	b.n	8009e5a <main+0xc96>
			  }
			  else
			  {
				  TIM5->CCR1 = 11000;
 8009df6:	4b2b      	ldr	r3, [pc, #172]	; (8009ea4 <main+0xce0>)
 8009df8:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8009dfc:	635a      	str	r2, [r3, #52]	; 0x34
				  TIM5->CCR2 = 11000;
 8009dfe:	4b29      	ldr	r3, [pc, #164]	; (8009ea4 <main+0xce0>)
 8009e00:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8009e04:	639a      	str	r2, [r3, #56]	; 0x38
				  TIM5->CCR3 = 11000;
 8009e06:	4b27      	ldr	r3, [pc, #156]	; (8009ea4 <main+0xce0>)
 8009e08:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8009e0c:	63da      	str	r2, [r3, #60]	; 0x3c
				  TIM5->CCR4 = 11000;
 8009e0e:	4b25      	ldr	r3, [pc, #148]	; (8009ea4 <main+0xce0>)
 8009e10:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8009e14:	641a      	str	r2, [r3, #64]	; 0x40
 8009e16:	e020      	b.n	8009e5a <main+0xc96>
			  }
		  }
		  else
		  {
			  TIM5->CCR1 = 10500;
 8009e18:	4b22      	ldr	r3, [pc, #136]	; (8009ea4 <main+0xce0>)
 8009e1a:	f642 1204 	movw	r2, #10500	; 0x2904
 8009e1e:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM5->CCR2 = 10500;
 8009e20:	4b20      	ldr	r3, [pc, #128]	; (8009ea4 <main+0xce0>)
 8009e22:	f642 1204 	movw	r2, #10500	; 0x2904
 8009e26:	639a      	str	r2, [r3, #56]	; 0x38
			  TIM5->CCR3 = 10500;
 8009e28:	4b1e      	ldr	r3, [pc, #120]	; (8009ea4 <main+0xce0>)
 8009e2a:	f642 1204 	movw	r2, #10500	; 0x2904
 8009e2e:	63da      	str	r2, [r3, #60]	; 0x3c
			  TIM5->CCR4 = 10500;
 8009e30:	4b1c      	ldr	r3, [pc, #112]	; (8009ea4 <main+0xce0>)
 8009e32:	f642 1204 	movw	r2, #10500	; 0x2904
 8009e36:	641a      	str	r2, [r3, #64]	; 0x40
 8009e38:	e00f      	b.n	8009e5a <main+0xc96>
		  }
	  }
	  else
	  {
		  TIM5->CCR1 = 10500;
 8009e3a:	4b1a      	ldr	r3, [pc, #104]	; (8009ea4 <main+0xce0>)
 8009e3c:	f642 1204 	movw	r2, #10500	; 0x2904
 8009e40:	635a      	str	r2, [r3, #52]	; 0x34
		  TIM5->CCR2 = 10500;
 8009e42:	4b18      	ldr	r3, [pc, #96]	; (8009ea4 <main+0xce0>)
 8009e44:	f642 1204 	movw	r2, #10500	; 0x2904
 8009e48:	639a      	str	r2, [r3, #56]	; 0x38
		  TIM5->CCR3 = 10500;
 8009e4a:	4b16      	ldr	r3, [pc, #88]	; (8009ea4 <main+0xce0>)
 8009e4c:	f642 1204 	movw	r2, #10500	; 0x2904
 8009e50:	63da      	str	r2, [r3, #60]	; 0x3c
		  TIM5->CCR4 = 10500;
 8009e52:	4b14      	ldr	r3, [pc, #80]	; (8009ea4 <main+0xce0>)
 8009e54:	f642 1204 	movw	r2, #10500	; 0x2904
 8009e58:	641a      	str	r2, [r3, #64]	; 0x40
	  }

	  if(telemetry_rx_cplt_flag == 1)
 8009e5a:	4b13      	ldr	r3, [pc, #76]	; (8009ea8 <main+0xce4>)
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	f040 839a 	bne.w	800a598 <main+0x13d4>
	  {
		  telemetry_rx_cplt_flag = 0;
 8009e64:	4b10      	ldr	r3, [pc, #64]	; (8009ea8 <main+0xce4>)
 8009e66:	2200      	movs	r2, #0
 8009e68:	701a      	strb	r2, [r3, #0]

		  if(iBus.SwA == 1000)
 8009e6a:	4b09      	ldr	r3, [pc, #36]	; (8009e90 <main+0xccc>)
 8009e6c:	891b      	ldrh	r3, [r3, #8]
 8009e6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e72:	f040 8391 	bne.w	800a598 <main+0x13d4>
		  {
			  unsigned char chksum = 0xff;
 8009e76:	23ff      	movs	r3, #255	; 0xff
 8009e78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			  for(int i=0;i<19;i++) chksum = chksum - telemetry_rx_buf[i];
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8009e80:	e020      	b.n	8009ec4 <main+0xd00>
 8009e82:	bf00      	nop
 8009e84:	200004a8 	.word	0x200004a8
 8009e88:	200002e4 	.word	0x200002e4
 8009e8c:	20000430 	.word	0x20000430
 8009e90:	200002cc 	.word	0x200002cc
 8009e94:	200003c0 	.word	0x200003c0
 8009e98:	20000350 	.word	0x20000350
 8009e9c:	40000400 	.word	0x40000400
 8009ea0:	200005ec 	.word	0x200005ec
 8009ea4:	40000c00 	.word	0x40000c00
 8009ea8:	200005e4 	.word	0x200005e4
 8009eac:	4aac      	ldr	r2, [pc, #688]	; (800a160 <main+0xf9c>)
 8009eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb0:	4413      	add	r3, r2
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8009eb8:	1ad3      	subs	r3, r2, r3
 8009eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec0:	3301      	adds	r3, #1
 8009ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8009ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec6:	2b12      	cmp	r3, #18
 8009ec8:	ddf0      	ble.n	8009eac <main+0xce8>

			  if(chksum == telemetry_rx_buf[19])
 8009eca:	4ba5      	ldr	r3, [pc, #660]	; (800a160 <main+0xf9c>)
 8009ecc:	7cdb      	ldrb	r3, [r3, #19]
 8009ece:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	f040 8360 	bne.w	800a598 <main+0x13d4>
			  {
				  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009ed8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009edc:	48a1      	ldr	r0, [pc, #644]	; (800a164 <main+0xfa0>)
 8009ede:	f7ff f89d 	bl	800901c <LL_TIM_CC_EnableChannel>

				  TIM3->PSC = 1000;
 8009ee2:	4ba0      	ldr	r3, [pc, #640]	; (800a164 <main+0xfa0>)
 8009ee4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009ee8:	629a      	str	r2, [r3, #40]	; 0x28
				  HAL_Delay(10);
 8009eea:	200a      	movs	r0, #10
 8009eec:	f7f7 f850 	bl	8000f90 <HAL_Delay>

				  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009ef0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009ef4:	489b      	ldr	r0, [pc, #620]	; (800a164 <main+0xfa0>)
 8009ef6:	f7ff f8a2 	bl	800903e <LL_TIM_CC_DisableChannel>

				  switch(telemetry_rx_buf[2])
 8009efa:	4b99      	ldr	r3, [pc, #612]	; (800a160 <main+0xf9c>)
 8009efc:	789b      	ldrb	r3, [r3, #2]
 8009efe:	2b10      	cmp	r3, #16
 8009f00:	f200 834d 	bhi.w	800a59e <main+0x13da>
 8009f04:	a201      	add	r2, pc, #4	; (adr r2, 8009f0c <main+0xd48>)
 8009f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f0a:	bf00      	nop
 8009f0c:	08009f51 	.word	0x08009f51
 8009f10:	08009fd5 	.word	0x08009fd5
 8009f14:	0800a059 	.word	0x0800a059
 8009f18:	0800a0dd 	.word	0x0800a0dd
 8009f1c:	0800a1ad 	.word	0x0800a1ad
 8009f20:	0800a231 	.word	0x0800a231
 8009f24:	0800a59f 	.word	0x0800a59f
 8009f28:	0800a59f 	.word	0x0800a59f
 8009f2c:	0800a59f 	.word	0x0800a59f
 8009f30:	0800a59f 	.word	0x0800a59f
 8009f34:	0800a59f 	.word	0x0800a59f
 8009f38:	0800a59f 	.word	0x0800a59f
 8009f3c:	0800a59f 	.word	0x0800a59f
 8009f40:	0800a59f 	.word	0x0800a59f
 8009f44:	0800a59f 	.word	0x0800a59f
 8009f48:	0800a59f 	.word	0x0800a59f
 8009f4c:	0800a2b5 	.word	0x0800a2b5
				  {
				  case 0:
					  roll.in.kp = *(float*)&telemetry_rx_buf[3];
 8009f50:	4b85      	ldr	r3, [pc, #532]	; (800a168 <main+0xfa4>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4a85      	ldr	r2, [pc, #532]	; (800a16c <main+0xfa8>)
 8009f56:	6013      	str	r3, [r2, #0]
					  roll.in.ki = *(float*)&telemetry_rx_buf[7];
 8009f58:	4b85      	ldr	r3, [pc, #532]	; (800a170 <main+0xfac>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a83      	ldr	r2, [pc, #524]	; (800a16c <main+0xfa8>)
 8009f5e:	6053      	str	r3, [r2, #4]
					  roll.in.kd = *(float*)&telemetry_rx_buf[11];
 8009f60:	4b84      	ldr	r3, [pc, #528]	; (800a174 <main+0xfb0>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a81      	ldr	r2, [pc, #516]	; (800a16c <main+0xfa8>)
 8009f66:	6093      	str	r3, [r2, #8]
					  EP_PIDGain_Write(telemetry_rx_buf[2], roll.in.kp, roll.in.ki, roll.in.kd);
 8009f68:	4b7d      	ldr	r3, [pc, #500]	; (800a160 <main+0xf9c>)
 8009f6a:	789b      	ldrb	r3, [r3, #2]
 8009f6c:	4a7f      	ldr	r2, [pc, #508]	; (800a16c <main+0xfa8>)
 8009f6e:	edd2 7a00 	vldr	s15, [r2]
 8009f72:	4a7e      	ldr	r2, [pc, #504]	; (800a16c <main+0xfa8>)
 8009f74:	ed92 7a01 	vldr	s14, [r2, #4]
 8009f78:	4a7c      	ldr	r2, [pc, #496]	; (800a16c <main+0xfa8>)
 8009f7a:	edd2 6a02 	vldr	s13, [r2, #8]
 8009f7e:	eeb0 1a66 	vmov.f32	s2, s13
 8009f82:	eef0 0a47 	vmov.f32	s1, s14
 8009f86:	eeb0 0a67 	vmov.f32	s0, s15
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7fc f978 	bl	8006280 <EP_PIDGain_Write>
					  EP_PIDGain_Read(telemetry_rx_buf[2], &roll.in.kp, &roll.in.ki, &roll.in.kd);
 8009f90:	4b73      	ldr	r3, [pc, #460]	; (800a160 <main+0xf9c>)
 8009f92:	7898      	ldrb	r0, [r3, #2]
 8009f94:	4b78      	ldr	r3, [pc, #480]	; (800a178 <main+0xfb4>)
 8009f96:	4a79      	ldr	r2, [pc, #484]	; (800a17c <main+0xfb8>)
 8009f98:	4974      	ldr	r1, [pc, #464]	; (800a16c <main+0xfa8>)
 8009f9a:	f7fc fa07 	bl	80063ac <EP_PIDGain_Read>
					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], roll.in.kp, roll.in.ki, roll.in.kd);
 8009f9e:	4b70      	ldr	r3, [pc, #448]	; (800a160 <main+0xf9c>)
 8009fa0:	789b      	ldrb	r3, [r3, #2]
 8009fa2:	4a72      	ldr	r2, [pc, #456]	; (800a16c <main+0xfa8>)
 8009fa4:	edd2 7a00 	vldr	s15, [r2]
 8009fa8:	4a70      	ldr	r2, [pc, #448]	; (800a16c <main+0xfa8>)
 8009faa:	ed92 7a01 	vldr	s14, [r2, #4]
 8009fae:	4a6f      	ldr	r2, [pc, #444]	; (800a16c <main+0xfa8>)
 8009fb0:	edd2 6a02 	vldr	s13, [r2, #8]
 8009fb4:	eeb0 1a66 	vmov.f32	s2, s13
 8009fb8:	eef0 0a47 	vmov.f32	s1, s14
 8009fbc:	eeb0 0a67 	vmov.f32	s0, s15
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	486f      	ldr	r0, [pc, #444]	; (800a180 <main+0xfbc>)
 8009fc4:	f001 f9aa 	bl	800b31c <Encode_Msg_PID_Gain>
					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8009fc8:	2214      	movs	r2, #20
 8009fca:	496d      	ldr	r1, [pc, #436]	; (800a180 <main+0xfbc>)
 8009fcc:	486d      	ldr	r0, [pc, #436]	; (800a184 <main+0xfc0>)
 8009fce:	f7f9 fffc 	bl	8003fca <HAL_UART_Transmit_IT>
					  break;
 8009fd2:	e2e4      	b.n	800a59e <main+0x13da>
				  case 1:
					  roll.out.kp = *(float*)&telemetry_rx_buf[3];
 8009fd4:	4b64      	ldr	r3, [pc, #400]	; (800a168 <main+0xfa4>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a64      	ldr	r2, [pc, #400]	; (800a16c <main+0xfa8>)
 8009fda:	6393      	str	r3, [r2, #56]	; 0x38
					  roll.out.ki = *(float*)&telemetry_rx_buf[7];
 8009fdc:	4b64      	ldr	r3, [pc, #400]	; (800a170 <main+0xfac>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a62      	ldr	r2, [pc, #392]	; (800a16c <main+0xfa8>)
 8009fe2:	63d3      	str	r3, [r2, #60]	; 0x3c
					  roll.out.kd = *(float*)&telemetry_rx_buf[11];
 8009fe4:	4b63      	ldr	r3, [pc, #396]	; (800a174 <main+0xfb0>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	4a60      	ldr	r2, [pc, #384]	; (800a16c <main+0xfa8>)
 8009fea:	6413      	str	r3, [r2, #64]	; 0x40
					  EP_PIDGain_Write(telemetry_rx_buf[2], roll.out.kp, roll.out.ki, roll.out.kd);
 8009fec:	4b5c      	ldr	r3, [pc, #368]	; (800a160 <main+0xf9c>)
 8009fee:	789b      	ldrb	r3, [r3, #2]
 8009ff0:	4a5e      	ldr	r2, [pc, #376]	; (800a16c <main+0xfa8>)
 8009ff2:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8009ff6:	4a5d      	ldr	r2, [pc, #372]	; (800a16c <main+0xfa8>)
 8009ff8:	ed92 7a0f 	vldr	s14, [r2, #60]	; 0x3c
 8009ffc:	4a5b      	ldr	r2, [pc, #364]	; (800a16c <main+0xfa8>)
 8009ffe:	edd2 6a10 	vldr	s13, [r2, #64]	; 0x40
 800a002:	eeb0 1a66 	vmov.f32	s2, s13
 800a006:	eef0 0a47 	vmov.f32	s1, s14
 800a00a:	eeb0 0a67 	vmov.f32	s0, s15
 800a00e:	4618      	mov	r0, r3
 800a010:	f7fc f936 	bl	8006280 <EP_PIDGain_Write>
					  EP_PIDGain_Read(telemetry_rx_buf[2], &roll.out.kp, &roll.out.ki, &roll.out.kd);
 800a014:	4b52      	ldr	r3, [pc, #328]	; (800a160 <main+0xf9c>)
 800a016:	7898      	ldrb	r0, [r3, #2]
 800a018:	4b5b      	ldr	r3, [pc, #364]	; (800a188 <main+0xfc4>)
 800a01a:	4a5c      	ldr	r2, [pc, #368]	; (800a18c <main+0xfc8>)
 800a01c:	495c      	ldr	r1, [pc, #368]	; (800a190 <main+0xfcc>)
 800a01e:	f7fc f9c5 	bl	80063ac <EP_PIDGain_Read>
					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], roll.out.kp, roll.out.ki, roll.out.kd);
 800a022:	4b4f      	ldr	r3, [pc, #316]	; (800a160 <main+0xf9c>)
 800a024:	789b      	ldrb	r3, [r3, #2]
 800a026:	4a51      	ldr	r2, [pc, #324]	; (800a16c <main+0xfa8>)
 800a028:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800a02c:	4a4f      	ldr	r2, [pc, #316]	; (800a16c <main+0xfa8>)
 800a02e:	ed92 7a0f 	vldr	s14, [r2, #60]	; 0x3c
 800a032:	4a4e      	ldr	r2, [pc, #312]	; (800a16c <main+0xfa8>)
 800a034:	edd2 6a10 	vldr	s13, [r2, #64]	; 0x40
 800a038:	eeb0 1a66 	vmov.f32	s2, s13
 800a03c:	eef0 0a47 	vmov.f32	s1, s14
 800a040:	eeb0 0a67 	vmov.f32	s0, s15
 800a044:	4619      	mov	r1, r3
 800a046:	484e      	ldr	r0, [pc, #312]	; (800a180 <main+0xfbc>)
 800a048:	f001 f968 	bl	800b31c <Encode_Msg_PID_Gain>
					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 800a04c:	2214      	movs	r2, #20
 800a04e:	494c      	ldr	r1, [pc, #304]	; (800a180 <main+0xfbc>)
 800a050:	484c      	ldr	r0, [pc, #304]	; (800a184 <main+0xfc0>)
 800a052:	f7f9 ffba 	bl	8003fca <HAL_UART_Transmit_IT>
					  break;
 800a056:	e2a2      	b.n	800a59e <main+0x13da>
				  case 2:
					  pitch.in.kp = *(float*)&telemetry_rx_buf[3];
 800a058:	4b43      	ldr	r3, [pc, #268]	; (800a168 <main+0xfa4>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a4d      	ldr	r2, [pc, #308]	; (800a194 <main+0xfd0>)
 800a05e:	6013      	str	r3, [r2, #0]
					  pitch.in.ki = *(float*)&telemetry_rx_buf[7];
 800a060:	4b43      	ldr	r3, [pc, #268]	; (800a170 <main+0xfac>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a4b      	ldr	r2, [pc, #300]	; (800a194 <main+0xfd0>)
 800a066:	6053      	str	r3, [r2, #4]
					  pitch.in.kd = *(float*)&telemetry_rx_buf[11];
 800a068:	4b42      	ldr	r3, [pc, #264]	; (800a174 <main+0xfb0>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a49      	ldr	r2, [pc, #292]	; (800a194 <main+0xfd0>)
 800a06e:	6093      	str	r3, [r2, #8]
					  EP_PIDGain_Write(telemetry_rx_buf[2], pitch.in.kp, pitch.in.ki, pitch.in.kd);
 800a070:	4b3b      	ldr	r3, [pc, #236]	; (800a160 <main+0xf9c>)
 800a072:	789b      	ldrb	r3, [r3, #2]
 800a074:	4a47      	ldr	r2, [pc, #284]	; (800a194 <main+0xfd0>)
 800a076:	edd2 7a00 	vldr	s15, [r2]
 800a07a:	4a46      	ldr	r2, [pc, #280]	; (800a194 <main+0xfd0>)
 800a07c:	ed92 7a01 	vldr	s14, [r2, #4]
 800a080:	4a44      	ldr	r2, [pc, #272]	; (800a194 <main+0xfd0>)
 800a082:	edd2 6a02 	vldr	s13, [r2, #8]
 800a086:	eeb0 1a66 	vmov.f32	s2, s13
 800a08a:	eef0 0a47 	vmov.f32	s1, s14
 800a08e:	eeb0 0a67 	vmov.f32	s0, s15
 800a092:	4618      	mov	r0, r3
 800a094:	f7fc f8f4 	bl	8006280 <EP_PIDGain_Write>
					  EP_PIDGain_Read(telemetry_rx_buf[2], &pitch.in.kp, &pitch.in.ki, &pitch.in.kd);
 800a098:	4b31      	ldr	r3, [pc, #196]	; (800a160 <main+0xf9c>)
 800a09a:	7898      	ldrb	r0, [r3, #2]
 800a09c:	4b3e      	ldr	r3, [pc, #248]	; (800a198 <main+0xfd4>)
 800a09e:	4a3f      	ldr	r2, [pc, #252]	; (800a19c <main+0xfd8>)
 800a0a0:	493c      	ldr	r1, [pc, #240]	; (800a194 <main+0xfd0>)
 800a0a2:	f7fc f983 	bl	80063ac <EP_PIDGain_Read>
					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], pitch.in.kp, pitch.in.ki, pitch.in.kd);
 800a0a6:	4b2e      	ldr	r3, [pc, #184]	; (800a160 <main+0xf9c>)
 800a0a8:	789b      	ldrb	r3, [r3, #2]
 800a0aa:	4a3a      	ldr	r2, [pc, #232]	; (800a194 <main+0xfd0>)
 800a0ac:	edd2 7a00 	vldr	s15, [r2]
 800a0b0:	4a38      	ldr	r2, [pc, #224]	; (800a194 <main+0xfd0>)
 800a0b2:	ed92 7a01 	vldr	s14, [r2, #4]
 800a0b6:	4a37      	ldr	r2, [pc, #220]	; (800a194 <main+0xfd0>)
 800a0b8:	edd2 6a02 	vldr	s13, [r2, #8]
 800a0bc:	eeb0 1a66 	vmov.f32	s2, s13
 800a0c0:	eef0 0a47 	vmov.f32	s1, s14
 800a0c4:	eeb0 0a67 	vmov.f32	s0, s15
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	482d      	ldr	r0, [pc, #180]	; (800a180 <main+0xfbc>)
 800a0cc:	f001 f926 	bl	800b31c <Encode_Msg_PID_Gain>
					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 800a0d0:	2214      	movs	r2, #20
 800a0d2:	492b      	ldr	r1, [pc, #172]	; (800a180 <main+0xfbc>)
 800a0d4:	482b      	ldr	r0, [pc, #172]	; (800a184 <main+0xfc0>)
 800a0d6:	f7f9 ff78 	bl	8003fca <HAL_UART_Transmit_IT>
					  break;
 800a0da:	e260      	b.n	800a59e <main+0x13da>
				  case 3:
					  pitch.out.kp = *(float*)&telemetry_rx_buf[3];
 800a0dc:	4b22      	ldr	r3, [pc, #136]	; (800a168 <main+0xfa4>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a2c      	ldr	r2, [pc, #176]	; (800a194 <main+0xfd0>)
 800a0e2:	6393      	str	r3, [r2, #56]	; 0x38
					  pitch.out.ki = *(float*)&telemetry_rx_buf[7];
 800a0e4:	4b22      	ldr	r3, [pc, #136]	; (800a170 <main+0xfac>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4a2a      	ldr	r2, [pc, #168]	; (800a194 <main+0xfd0>)
 800a0ea:	63d3      	str	r3, [r2, #60]	; 0x3c
					  pitch.out.kd = *(float*)&telemetry_rx_buf[11];
 800a0ec:	4b21      	ldr	r3, [pc, #132]	; (800a174 <main+0xfb0>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4a28      	ldr	r2, [pc, #160]	; (800a194 <main+0xfd0>)
 800a0f2:	6413      	str	r3, [r2, #64]	; 0x40
					  EP_PIDGain_Write(telemetry_rx_buf[2], pitch.out.kp, pitch.out.ki, pitch.out.kd);
 800a0f4:	4b1a      	ldr	r3, [pc, #104]	; (800a160 <main+0xf9c>)
 800a0f6:	789b      	ldrb	r3, [r3, #2]
 800a0f8:	4a26      	ldr	r2, [pc, #152]	; (800a194 <main+0xfd0>)
 800a0fa:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800a0fe:	4a25      	ldr	r2, [pc, #148]	; (800a194 <main+0xfd0>)
 800a100:	ed92 7a0f 	vldr	s14, [r2, #60]	; 0x3c
 800a104:	4a23      	ldr	r2, [pc, #140]	; (800a194 <main+0xfd0>)
 800a106:	edd2 6a10 	vldr	s13, [r2, #64]	; 0x40
 800a10a:	eeb0 1a66 	vmov.f32	s2, s13
 800a10e:	eef0 0a47 	vmov.f32	s1, s14
 800a112:	eeb0 0a67 	vmov.f32	s0, s15
 800a116:	4618      	mov	r0, r3
 800a118:	f7fc f8b2 	bl	8006280 <EP_PIDGain_Write>
					  EP_PIDGain_Read(telemetry_rx_buf[2], &pitch.out.kp, &pitch.out.ki, &pitch.out.kd);
 800a11c:	4b10      	ldr	r3, [pc, #64]	; (800a160 <main+0xf9c>)
 800a11e:	7898      	ldrb	r0, [r3, #2]
 800a120:	4b1f      	ldr	r3, [pc, #124]	; (800a1a0 <main+0xfdc>)
 800a122:	4a20      	ldr	r2, [pc, #128]	; (800a1a4 <main+0xfe0>)
 800a124:	4920      	ldr	r1, [pc, #128]	; (800a1a8 <main+0xfe4>)
 800a126:	f7fc f941 	bl	80063ac <EP_PIDGain_Read>
					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], pitch.out.kp, pitch.out.ki, pitch.out.kd);
 800a12a:	4b0d      	ldr	r3, [pc, #52]	; (800a160 <main+0xf9c>)
 800a12c:	789b      	ldrb	r3, [r3, #2]
 800a12e:	4a19      	ldr	r2, [pc, #100]	; (800a194 <main+0xfd0>)
 800a130:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800a134:	4a17      	ldr	r2, [pc, #92]	; (800a194 <main+0xfd0>)
 800a136:	ed92 7a0f 	vldr	s14, [r2, #60]	; 0x3c
 800a13a:	4a16      	ldr	r2, [pc, #88]	; (800a194 <main+0xfd0>)
 800a13c:	edd2 6a10 	vldr	s13, [r2, #64]	; 0x40
 800a140:	eeb0 1a66 	vmov.f32	s2, s13
 800a144:	eef0 0a47 	vmov.f32	s1, s14
 800a148:	eeb0 0a67 	vmov.f32	s0, s15
 800a14c:	4619      	mov	r1, r3
 800a14e:	480c      	ldr	r0, [pc, #48]	; (800a180 <main+0xfbc>)
 800a150:	f001 f8e4 	bl	800b31c <Encode_Msg_PID_Gain>
					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 800a154:	2214      	movs	r2, #20
 800a156:	490a      	ldr	r1, [pc, #40]	; (800a180 <main+0xfbc>)
 800a158:	480a      	ldr	r0, [pc, #40]	; (800a184 <main+0xfc0>)
 800a15a:	f7f9 ff36 	bl	8003fca <HAL_UART_Transmit_IT>
					  break;
 800a15e:	e21e      	b.n	800a59e <main+0x13da>
 800a160:	200005d0 	.word	0x200005d0
 800a164:	40000400 	.word	0x40000400
 800a168:	200005d3 	.word	0x200005d3
 800a16c:	20000350 	.word	0x20000350
 800a170:	200005d7 	.word	0x200005d7
 800a174:	200005db 	.word	0x200005db
 800a178:	20000358 	.word	0x20000358
 800a17c:	20000354 	.word	0x20000354
 800a180:	200005a8 	.word	0x200005a8
 800a184:	20000654 	.word	0x20000654
 800a188:	20000390 	.word	0x20000390
 800a18c:	2000038c 	.word	0x2000038c
 800a190:	20000388 	.word	0x20000388
 800a194:	200003c0 	.word	0x200003c0
 800a198:	200003c8 	.word	0x200003c8
 800a19c:	200003c4 	.word	0x200003c4
 800a1a0:	20000400 	.word	0x20000400
 800a1a4:	200003fc 	.word	0x200003fc
 800a1a8:	200003f8 	.word	0x200003f8
				  case 4:
					  yaw_heading.kp = *(float*)&telemetry_rx_buf[3];
 800a1ac:	4ba0      	ldr	r3, [pc, #640]	; (800a430 <main+0x126c>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4aa0      	ldr	r2, [pc, #640]	; (800a434 <main+0x1270>)
 800a1b2:	6013      	str	r3, [r2, #0]
					  yaw_heading.ki = *(float*)&telemetry_rx_buf[7];
 800a1b4:	4ba0      	ldr	r3, [pc, #640]	; (800a438 <main+0x1274>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a9e      	ldr	r2, [pc, #632]	; (800a434 <main+0x1270>)
 800a1ba:	6053      	str	r3, [r2, #4]
					  yaw_heading.kd = *(float*)&telemetry_rx_buf[11];
 800a1bc:	4b9f      	ldr	r3, [pc, #636]	; (800a43c <main+0x1278>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	4a9c      	ldr	r2, [pc, #624]	; (800a434 <main+0x1270>)
 800a1c2:	6093      	str	r3, [r2, #8]
					  EP_PIDGain_Write(telemetry_rx_buf[2], yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 800a1c4:	4b9e      	ldr	r3, [pc, #632]	; (800a440 <main+0x127c>)
 800a1c6:	789b      	ldrb	r3, [r3, #2]
 800a1c8:	4a9a      	ldr	r2, [pc, #616]	; (800a434 <main+0x1270>)
 800a1ca:	edd2 7a00 	vldr	s15, [r2]
 800a1ce:	4a99      	ldr	r2, [pc, #612]	; (800a434 <main+0x1270>)
 800a1d0:	ed92 7a01 	vldr	s14, [r2, #4]
 800a1d4:	4a97      	ldr	r2, [pc, #604]	; (800a434 <main+0x1270>)
 800a1d6:	edd2 6a02 	vldr	s13, [r2, #8]
 800a1da:	eeb0 1a66 	vmov.f32	s2, s13
 800a1de:	eef0 0a47 	vmov.f32	s1, s14
 800a1e2:	eeb0 0a67 	vmov.f32	s0, s15
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f7fc f84a 	bl	8006280 <EP_PIDGain_Write>
					  EP_PIDGain_Read(telemetry_rx_buf[2], &yaw_heading.kp, &yaw_heading.ki, &yaw_heading.kd);
 800a1ec:	4b94      	ldr	r3, [pc, #592]	; (800a440 <main+0x127c>)
 800a1ee:	7898      	ldrb	r0, [r3, #2]
 800a1f0:	4b94      	ldr	r3, [pc, #592]	; (800a444 <main+0x1280>)
 800a1f2:	4a95      	ldr	r2, [pc, #596]	; (800a448 <main+0x1284>)
 800a1f4:	498f      	ldr	r1, [pc, #572]	; (800a434 <main+0x1270>)
 800a1f6:	f7fc f8d9 	bl	80063ac <EP_PIDGain_Read>
					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 800a1fa:	4b91      	ldr	r3, [pc, #580]	; (800a440 <main+0x127c>)
 800a1fc:	789b      	ldrb	r3, [r3, #2]
 800a1fe:	4a8d      	ldr	r2, [pc, #564]	; (800a434 <main+0x1270>)
 800a200:	edd2 7a00 	vldr	s15, [r2]
 800a204:	4a8b      	ldr	r2, [pc, #556]	; (800a434 <main+0x1270>)
 800a206:	ed92 7a01 	vldr	s14, [r2, #4]
 800a20a:	4a8a      	ldr	r2, [pc, #552]	; (800a434 <main+0x1270>)
 800a20c:	edd2 6a02 	vldr	s13, [r2, #8]
 800a210:	eeb0 1a66 	vmov.f32	s2, s13
 800a214:	eef0 0a47 	vmov.f32	s1, s14
 800a218:	eeb0 0a67 	vmov.f32	s0, s15
 800a21c:	4619      	mov	r1, r3
 800a21e:	488b      	ldr	r0, [pc, #556]	; (800a44c <main+0x1288>)
 800a220:	f001 f87c 	bl	800b31c <Encode_Msg_PID_Gain>
					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 800a224:	2214      	movs	r2, #20
 800a226:	4989      	ldr	r1, [pc, #548]	; (800a44c <main+0x1288>)
 800a228:	4889      	ldr	r0, [pc, #548]	; (800a450 <main+0x128c>)
 800a22a:	f7f9 fece 	bl	8003fca <HAL_UART_Transmit_IT>
					  break;
 800a22e:	e1b6      	b.n	800a59e <main+0x13da>
				  case 5:
					  yaw_rate.kp = *(float*)&telemetry_rx_buf[3];
 800a230:	4b7f      	ldr	r3, [pc, #508]	; (800a430 <main+0x126c>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4a87      	ldr	r2, [pc, #540]	; (800a454 <main+0x1290>)
 800a236:	6013      	str	r3, [r2, #0]
					  yaw_rate.ki = *(float*)&telemetry_rx_buf[7];
 800a238:	4b7f      	ldr	r3, [pc, #508]	; (800a438 <main+0x1274>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a85      	ldr	r2, [pc, #532]	; (800a454 <main+0x1290>)
 800a23e:	6053      	str	r3, [r2, #4]
					  yaw_rate.kd = *(float*)&telemetry_rx_buf[11];
 800a240:	4b7e      	ldr	r3, [pc, #504]	; (800a43c <main+0x1278>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a83      	ldr	r2, [pc, #524]	; (800a454 <main+0x1290>)
 800a246:	6093      	str	r3, [r2, #8]
					  EP_PIDGain_Write(telemetry_rx_buf[2], yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 800a248:	4b7d      	ldr	r3, [pc, #500]	; (800a440 <main+0x127c>)
 800a24a:	789b      	ldrb	r3, [r3, #2]
 800a24c:	4a81      	ldr	r2, [pc, #516]	; (800a454 <main+0x1290>)
 800a24e:	edd2 7a00 	vldr	s15, [r2]
 800a252:	4a80      	ldr	r2, [pc, #512]	; (800a454 <main+0x1290>)
 800a254:	ed92 7a01 	vldr	s14, [r2, #4]
 800a258:	4a7e      	ldr	r2, [pc, #504]	; (800a454 <main+0x1290>)
 800a25a:	edd2 6a02 	vldr	s13, [r2, #8]
 800a25e:	eeb0 1a66 	vmov.f32	s2, s13
 800a262:	eef0 0a47 	vmov.f32	s1, s14
 800a266:	eeb0 0a67 	vmov.f32	s0, s15
 800a26a:	4618      	mov	r0, r3
 800a26c:	f7fc f808 	bl	8006280 <EP_PIDGain_Write>
					  EP_PIDGain_Read(telemetry_rx_buf[2], &yaw_rate.kp, &yaw_rate.ki, &yaw_rate.kd);
 800a270:	4b73      	ldr	r3, [pc, #460]	; (800a440 <main+0x127c>)
 800a272:	7898      	ldrb	r0, [r3, #2]
 800a274:	4b78      	ldr	r3, [pc, #480]	; (800a458 <main+0x1294>)
 800a276:	4a79      	ldr	r2, [pc, #484]	; (800a45c <main+0x1298>)
 800a278:	4976      	ldr	r1, [pc, #472]	; (800a454 <main+0x1290>)
 800a27a:	f7fc f897 	bl	80063ac <EP_PIDGain_Read>
					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 800a27e:	4b70      	ldr	r3, [pc, #448]	; (800a440 <main+0x127c>)
 800a280:	789b      	ldrb	r3, [r3, #2]
 800a282:	4a74      	ldr	r2, [pc, #464]	; (800a454 <main+0x1290>)
 800a284:	edd2 7a00 	vldr	s15, [r2]
 800a288:	4a72      	ldr	r2, [pc, #456]	; (800a454 <main+0x1290>)
 800a28a:	ed92 7a01 	vldr	s14, [r2, #4]
 800a28e:	4a71      	ldr	r2, [pc, #452]	; (800a454 <main+0x1290>)
 800a290:	edd2 6a02 	vldr	s13, [r2, #8]
 800a294:	eeb0 1a66 	vmov.f32	s2, s13
 800a298:	eef0 0a47 	vmov.f32	s1, s14
 800a29c:	eeb0 0a67 	vmov.f32	s0, s15
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	486a      	ldr	r0, [pc, #424]	; (800a44c <main+0x1288>)
 800a2a4:	f001 f83a 	bl	800b31c <Encode_Msg_PID_Gain>
					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 800a2a8:	2214      	movs	r2, #20
 800a2aa:	4968      	ldr	r1, [pc, #416]	; (800a44c <main+0x1288>)
 800a2ac:	4868      	ldr	r0, [pc, #416]	; (800a450 <main+0x128c>)
 800a2ae:	f7f9 fe8c 	bl	8003fca <HAL_UART_Transmit_IT>
					  break;
 800a2b2:	e174      	b.n	800a59e <main+0x13da>
				  case 0x10:
					  switch(telemetry_rx_buf[3])
 800a2b4:	4b62      	ldr	r3, [pc, #392]	; (800a440 <main+0x127c>)
 800a2b6:	78db      	ldrb	r3, [r3, #3]
 800a2b8:	2b06      	cmp	r3, #6
 800a2ba:	f200 816f 	bhi.w	800a59c <main+0x13d8>
 800a2be:	a201      	add	r2, pc, #4	; (adr r2, 800a2c4 <main+0x1100>)
 800a2c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c4:	0800a2e1 	.word	0x0800a2e1
 800a2c8:	0800a319 	.word	0x0800a319
 800a2cc:	0800a351 	.word	0x0800a351
 800a2d0:	0800a389 	.word	0x0800a389
 800a2d4:	0800a3c1 	.word	0x0800a3c1
 800a2d8:	0800a3f9 	.word	0x0800a3f9
 800a2dc:	0800a469 	.word	0x0800a469
					  {
					  case 0:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], roll.in.kp, roll.in.ki, roll.in.kd);
 800a2e0:	4b57      	ldr	r3, [pc, #348]	; (800a440 <main+0x127c>)
 800a2e2:	78db      	ldrb	r3, [r3, #3]
 800a2e4:	4a5e      	ldr	r2, [pc, #376]	; (800a460 <main+0x129c>)
 800a2e6:	edd2 7a00 	vldr	s15, [r2]
 800a2ea:	4a5d      	ldr	r2, [pc, #372]	; (800a460 <main+0x129c>)
 800a2ec:	ed92 7a01 	vldr	s14, [r2, #4]
 800a2f0:	4a5b      	ldr	r2, [pc, #364]	; (800a460 <main+0x129c>)
 800a2f2:	edd2 6a02 	vldr	s13, [r2, #8]
 800a2f6:	eeb0 1a66 	vmov.f32	s2, s13
 800a2fa:	eef0 0a47 	vmov.f32	s1, s14
 800a2fe:	eeb0 0a67 	vmov.f32	s0, s15
 800a302:	4619      	mov	r1, r3
 800a304:	4851      	ldr	r0, [pc, #324]	; (800a44c <main+0x1288>)
 800a306:	f001 f809 	bl	800b31c <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800a30a:	230a      	movs	r3, #10
 800a30c:	2214      	movs	r2, #20
 800a30e:	494f      	ldr	r1, [pc, #316]	; (800a44c <main+0x1288>)
 800a310:	484f      	ldr	r0, [pc, #316]	; (800a450 <main+0x128c>)
 800a312:	f7f9 fdc8 	bl	8003ea6 <HAL_UART_Transmit>
						  break;
 800a316:	e13e      	b.n	800a596 <main+0x13d2>
					  case 1:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], roll.out.kp, roll.out.ki, roll.out.kd);
 800a318:	4b49      	ldr	r3, [pc, #292]	; (800a440 <main+0x127c>)
 800a31a:	78db      	ldrb	r3, [r3, #3]
 800a31c:	4a50      	ldr	r2, [pc, #320]	; (800a460 <main+0x129c>)
 800a31e:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800a322:	4a4f      	ldr	r2, [pc, #316]	; (800a460 <main+0x129c>)
 800a324:	ed92 7a0f 	vldr	s14, [r2, #60]	; 0x3c
 800a328:	4a4d      	ldr	r2, [pc, #308]	; (800a460 <main+0x129c>)
 800a32a:	edd2 6a10 	vldr	s13, [r2, #64]	; 0x40
 800a32e:	eeb0 1a66 	vmov.f32	s2, s13
 800a332:	eef0 0a47 	vmov.f32	s1, s14
 800a336:	eeb0 0a67 	vmov.f32	s0, s15
 800a33a:	4619      	mov	r1, r3
 800a33c:	4843      	ldr	r0, [pc, #268]	; (800a44c <main+0x1288>)
 800a33e:	f000 ffed 	bl	800b31c <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800a342:	230a      	movs	r3, #10
 800a344:	2214      	movs	r2, #20
 800a346:	4941      	ldr	r1, [pc, #260]	; (800a44c <main+0x1288>)
 800a348:	4841      	ldr	r0, [pc, #260]	; (800a450 <main+0x128c>)
 800a34a:	f7f9 fdac 	bl	8003ea6 <HAL_UART_Transmit>
						  break;
 800a34e:	e122      	b.n	800a596 <main+0x13d2>
					  case 2:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], pitch.in.kp, pitch.in.ki, pitch.in.kd);
 800a350:	4b3b      	ldr	r3, [pc, #236]	; (800a440 <main+0x127c>)
 800a352:	78db      	ldrb	r3, [r3, #3]
 800a354:	4a43      	ldr	r2, [pc, #268]	; (800a464 <main+0x12a0>)
 800a356:	edd2 7a00 	vldr	s15, [r2]
 800a35a:	4a42      	ldr	r2, [pc, #264]	; (800a464 <main+0x12a0>)
 800a35c:	ed92 7a01 	vldr	s14, [r2, #4]
 800a360:	4a40      	ldr	r2, [pc, #256]	; (800a464 <main+0x12a0>)
 800a362:	edd2 6a02 	vldr	s13, [r2, #8]
 800a366:	eeb0 1a66 	vmov.f32	s2, s13
 800a36a:	eef0 0a47 	vmov.f32	s1, s14
 800a36e:	eeb0 0a67 	vmov.f32	s0, s15
 800a372:	4619      	mov	r1, r3
 800a374:	4835      	ldr	r0, [pc, #212]	; (800a44c <main+0x1288>)
 800a376:	f000 ffd1 	bl	800b31c <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800a37a:	230a      	movs	r3, #10
 800a37c:	2214      	movs	r2, #20
 800a37e:	4933      	ldr	r1, [pc, #204]	; (800a44c <main+0x1288>)
 800a380:	4833      	ldr	r0, [pc, #204]	; (800a450 <main+0x128c>)
 800a382:	f7f9 fd90 	bl	8003ea6 <HAL_UART_Transmit>
						  break;
 800a386:	e106      	b.n	800a596 <main+0x13d2>
					  case 3:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], pitch.out.kp, pitch.out.ki, pitch.out.kd);
 800a388:	4b2d      	ldr	r3, [pc, #180]	; (800a440 <main+0x127c>)
 800a38a:	78db      	ldrb	r3, [r3, #3]
 800a38c:	4a35      	ldr	r2, [pc, #212]	; (800a464 <main+0x12a0>)
 800a38e:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800a392:	4a34      	ldr	r2, [pc, #208]	; (800a464 <main+0x12a0>)
 800a394:	ed92 7a0f 	vldr	s14, [r2, #60]	; 0x3c
 800a398:	4a32      	ldr	r2, [pc, #200]	; (800a464 <main+0x12a0>)
 800a39a:	edd2 6a10 	vldr	s13, [r2, #64]	; 0x40
 800a39e:	eeb0 1a66 	vmov.f32	s2, s13
 800a3a2:	eef0 0a47 	vmov.f32	s1, s14
 800a3a6:	eeb0 0a67 	vmov.f32	s0, s15
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	4827      	ldr	r0, [pc, #156]	; (800a44c <main+0x1288>)
 800a3ae:	f000 ffb5 	bl	800b31c <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800a3b2:	230a      	movs	r3, #10
 800a3b4:	2214      	movs	r2, #20
 800a3b6:	4925      	ldr	r1, [pc, #148]	; (800a44c <main+0x1288>)
 800a3b8:	4825      	ldr	r0, [pc, #148]	; (800a450 <main+0x128c>)
 800a3ba:	f7f9 fd74 	bl	8003ea6 <HAL_UART_Transmit>
						  break;
 800a3be:	e0ea      	b.n	800a596 <main+0x13d2>
					  case 4:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 800a3c0:	4b1f      	ldr	r3, [pc, #124]	; (800a440 <main+0x127c>)
 800a3c2:	78db      	ldrb	r3, [r3, #3]
 800a3c4:	4a1b      	ldr	r2, [pc, #108]	; (800a434 <main+0x1270>)
 800a3c6:	edd2 7a00 	vldr	s15, [r2]
 800a3ca:	4a1a      	ldr	r2, [pc, #104]	; (800a434 <main+0x1270>)
 800a3cc:	ed92 7a01 	vldr	s14, [r2, #4]
 800a3d0:	4a18      	ldr	r2, [pc, #96]	; (800a434 <main+0x1270>)
 800a3d2:	edd2 6a02 	vldr	s13, [r2, #8]
 800a3d6:	eeb0 1a66 	vmov.f32	s2, s13
 800a3da:	eef0 0a47 	vmov.f32	s1, s14
 800a3de:	eeb0 0a67 	vmov.f32	s0, s15
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	4819      	ldr	r0, [pc, #100]	; (800a44c <main+0x1288>)
 800a3e6:	f000 ff99 	bl	800b31c <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800a3ea:	230a      	movs	r3, #10
 800a3ec:	2214      	movs	r2, #20
 800a3ee:	4917      	ldr	r1, [pc, #92]	; (800a44c <main+0x1288>)
 800a3f0:	4817      	ldr	r0, [pc, #92]	; (800a450 <main+0x128c>)
 800a3f2:	f7f9 fd58 	bl	8003ea6 <HAL_UART_Transmit>
						  break;
 800a3f6:	e0ce      	b.n	800a596 <main+0x13d2>
					  case 5:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 800a3f8:	4b11      	ldr	r3, [pc, #68]	; (800a440 <main+0x127c>)
 800a3fa:	78db      	ldrb	r3, [r3, #3]
 800a3fc:	4a15      	ldr	r2, [pc, #84]	; (800a454 <main+0x1290>)
 800a3fe:	edd2 7a00 	vldr	s15, [r2]
 800a402:	4a14      	ldr	r2, [pc, #80]	; (800a454 <main+0x1290>)
 800a404:	ed92 7a01 	vldr	s14, [r2, #4]
 800a408:	4a12      	ldr	r2, [pc, #72]	; (800a454 <main+0x1290>)
 800a40a:	edd2 6a02 	vldr	s13, [r2, #8]
 800a40e:	eeb0 1a66 	vmov.f32	s2, s13
 800a412:	eef0 0a47 	vmov.f32	s1, s14
 800a416:	eeb0 0a67 	vmov.f32	s0, s15
 800a41a:	4619      	mov	r1, r3
 800a41c:	480b      	ldr	r0, [pc, #44]	; (800a44c <main+0x1288>)
 800a41e:	f000 ff7d 	bl	800b31c <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800a422:	230a      	movs	r3, #10
 800a424:	2214      	movs	r2, #20
 800a426:	4909      	ldr	r1, [pc, #36]	; (800a44c <main+0x1288>)
 800a428:	4809      	ldr	r0, [pc, #36]	; (800a450 <main+0x128c>)
 800a42a:	f7f9 fd3c 	bl	8003ea6 <HAL_UART_Transmit>
						  break;
 800a42e:	e0b2      	b.n	800a596 <main+0x13d2>
 800a430:	200005d3 	.word	0x200005d3
 800a434:	20000430 	.word	0x20000430
 800a438:	200005d7 	.word	0x200005d7
 800a43c:	200005db 	.word	0x200005db
 800a440:	200005d0 	.word	0x200005d0
 800a444:	20000438 	.word	0x20000438
 800a448:	20000434 	.word	0x20000434
 800a44c:	200005a8 	.word	0x200005a8
 800a450:	20000654 	.word	0x20000654
 800a454:	20000468 	.word	0x20000468
 800a458:	20000470 	.word	0x20000470
 800a45c:	2000046c 	.word	0x2000046c
 800a460:	20000350 	.word	0x20000350
 800a464:	200003c0 	.word	0x200003c0
					  case 6:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 0, roll.in.kp, roll.in.ki, roll.in.kd);
 800a468:	4b70      	ldr	r3, [pc, #448]	; (800a62c <main+0x1468>)
 800a46a:	edd3 7a00 	vldr	s15, [r3]
 800a46e:	4b6f      	ldr	r3, [pc, #444]	; (800a62c <main+0x1468>)
 800a470:	ed93 7a01 	vldr	s14, [r3, #4]
 800a474:	4b6d      	ldr	r3, [pc, #436]	; (800a62c <main+0x1468>)
 800a476:	edd3 6a02 	vldr	s13, [r3, #8]
 800a47a:	eeb0 1a66 	vmov.f32	s2, s13
 800a47e:	eef0 0a47 	vmov.f32	s1, s14
 800a482:	eeb0 0a67 	vmov.f32	s0, s15
 800a486:	2100      	movs	r1, #0
 800a488:	4869      	ldr	r0, [pc, #420]	; (800a630 <main+0x146c>)
 800a48a:	f000 ff47 	bl	800b31c <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800a48e:	230a      	movs	r3, #10
 800a490:	2214      	movs	r2, #20
 800a492:	4967      	ldr	r1, [pc, #412]	; (800a630 <main+0x146c>)
 800a494:	4867      	ldr	r0, [pc, #412]	; (800a634 <main+0x1470>)
 800a496:	f7f9 fd06 	bl	8003ea6 <HAL_UART_Transmit>
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 1, roll.out.kp, roll.out.ki, roll.out.kd);
 800a49a:	4b64      	ldr	r3, [pc, #400]	; (800a62c <main+0x1468>)
 800a49c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800a4a0:	4b62      	ldr	r3, [pc, #392]	; (800a62c <main+0x1468>)
 800a4a2:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800a4a6:	4b61      	ldr	r3, [pc, #388]	; (800a62c <main+0x1468>)
 800a4a8:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 800a4ac:	eeb0 1a66 	vmov.f32	s2, s13
 800a4b0:	eef0 0a47 	vmov.f32	s1, s14
 800a4b4:	eeb0 0a67 	vmov.f32	s0, s15
 800a4b8:	2101      	movs	r1, #1
 800a4ba:	485d      	ldr	r0, [pc, #372]	; (800a630 <main+0x146c>)
 800a4bc:	f000 ff2e 	bl	800b31c <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800a4c0:	230a      	movs	r3, #10
 800a4c2:	2214      	movs	r2, #20
 800a4c4:	495a      	ldr	r1, [pc, #360]	; (800a630 <main+0x146c>)
 800a4c6:	485b      	ldr	r0, [pc, #364]	; (800a634 <main+0x1470>)
 800a4c8:	f7f9 fced 	bl	8003ea6 <HAL_UART_Transmit>
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 2, pitch.in.kp, pitch.in.ki, pitch.in.kd);
 800a4cc:	4b5a      	ldr	r3, [pc, #360]	; (800a638 <main+0x1474>)
 800a4ce:	edd3 7a00 	vldr	s15, [r3]
 800a4d2:	4b59      	ldr	r3, [pc, #356]	; (800a638 <main+0x1474>)
 800a4d4:	ed93 7a01 	vldr	s14, [r3, #4]
 800a4d8:	4b57      	ldr	r3, [pc, #348]	; (800a638 <main+0x1474>)
 800a4da:	edd3 6a02 	vldr	s13, [r3, #8]
 800a4de:	eeb0 1a66 	vmov.f32	s2, s13
 800a4e2:	eef0 0a47 	vmov.f32	s1, s14
 800a4e6:	eeb0 0a67 	vmov.f32	s0, s15
 800a4ea:	2102      	movs	r1, #2
 800a4ec:	4850      	ldr	r0, [pc, #320]	; (800a630 <main+0x146c>)
 800a4ee:	f000 ff15 	bl	800b31c <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800a4f2:	230a      	movs	r3, #10
 800a4f4:	2214      	movs	r2, #20
 800a4f6:	494e      	ldr	r1, [pc, #312]	; (800a630 <main+0x146c>)
 800a4f8:	484e      	ldr	r0, [pc, #312]	; (800a634 <main+0x1470>)
 800a4fa:	f7f9 fcd4 	bl	8003ea6 <HAL_UART_Transmit>
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 3, pitch.out.kp, pitch.out.ki, pitch.out.kd);
 800a4fe:	4b4e      	ldr	r3, [pc, #312]	; (800a638 <main+0x1474>)
 800a500:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800a504:	4b4c      	ldr	r3, [pc, #304]	; (800a638 <main+0x1474>)
 800a506:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800a50a:	4b4b      	ldr	r3, [pc, #300]	; (800a638 <main+0x1474>)
 800a50c:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 800a510:	eeb0 1a66 	vmov.f32	s2, s13
 800a514:	eef0 0a47 	vmov.f32	s1, s14
 800a518:	eeb0 0a67 	vmov.f32	s0, s15
 800a51c:	2103      	movs	r1, #3
 800a51e:	4844      	ldr	r0, [pc, #272]	; (800a630 <main+0x146c>)
 800a520:	f000 fefc 	bl	800b31c <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800a524:	230a      	movs	r3, #10
 800a526:	2214      	movs	r2, #20
 800a528:	4941      	ldr	r1, [pc, #260]	; (800a630 <main+0x146c>)
 800a52a:	4842      	ldr	r0, [pc, #264]	; (800a634 <main+0x1470>)
 800a52c:	f7f9 fcbb 	bl	8003ea6 <HAL_UART_Transmit>
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 4, yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 800a530:	4b42      	ldr	r3, [pc, #264]	; (800a63c <main+0x1478>)
 800a532:	edd3 7a00 	vldr	s15, [r3]
 800a536:	4b41      	ldr	r3, [pc, #260]	; (800a63c <main+0x1478>)
 800a538:	ed93 7a01 	vldr	s14, [r3, #4]
 800a53c:	4b3f      	ldr	r3, [pc, #252]	; (800a63c <main+0x1478>)
 800a53e:	edd3 6a02 	vldr	s13, [r3, #8]
 800a542:	eeb0 1a66 	vmov.f32	s2, s13
 800a546:	eef0 0a47 	vmov.f32	s1, s14
 800a54a:	eeb0 0a67 	vmov.f32	s0, s15
 800a54e:	2104      	movs	r1, #4
 800a550:	4837      	ldr	r0, [pc, #220]	; (800a630 <main+0x146c>)
 800a552:	f000 fee3 	bl	800b31c <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800a556:	230a      	movs	r3, #10
 800a558:	2214      	movs	r2, #20
 800a55a:	4935      	ldr	r1, [pc, #212]	; (800a630 <main+0x146c>)
 800a55c:	4835      	ldr	r0, [pc, #212]	; (800a634 <main+0x1470>)
 800a55e:	f7f9 fca2 	bl	8003ea6 <HAL_UART_Transmit>
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 5, yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 800a562:	4b37      	ldr	r3, [pc, #220]	; (800a640 <main+0x147c>)
 800a564:	edd3 7a00 	vldr	s15, [r3]
 800a568:	4b35      	ldr	r3, [pc, #212]	; (800a640 <main+0x147c>)
 800a56a:	ed93 7a01 	vldr	s14, [r3, #4]
 800a56e:	4b34      	ldr	r3, [pc, #208]	; (800a640 <main+0x147c>)
 800a570:	edd3 6a02 	vldr	s13, [r3, #8]
 800a574:	eeb0 1a66 	vmov.f32	s2, s13
 800a578:	eef0 0a47 	vmov.f32	s1, s14
 800a57c:	eeb0 0a67 	vmov.f32	s0, s15
 800a580:	2105      	movs	r1, #5
 800a582:	482b      	ldr	r0, [pc, #172]	; (800a630 <main+0x146c>)
 800a584:	f000 feca 	bl	800b31c <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800a588:	230a      	movs	r3, #10
 800a58a:	2214      	movs	r2, #20
 800a58c:	4928      	ldr	r1, [pc, #160]	; (800a630 <main+0x146c>)
 800a58e:	4829      	ldr	r0, [pc, #164]	; (800a634 <main+0x1470>)
 800a590:	f7f9 fc89 	bl	8003ea6 <HAL_UART_Transmit>
						  break;
 800a594:	bf00      	nop
					  }
					  break;
 800a596:	e001      	b.n	800a59c <main+0x13d8>

				  }
			  }
 800a598:	bf00      	nop
 800a59a:	e000      	b.n	800a59e <main+0x13da>
					  break;
 800a59c:	bf00      	nop
		  }
	  }

	  if(tim7_20ms_flag == 1 && tim7_100ms_flag != 1)
 800a59e:	4b29      	ldr	r3, [pc, #164]	; (800a644 <main+0x1480>)
 800a5a0:	781b      	ldrb	r3, [r3, #0]
 800a5a2:	2b01      	cmp	r3, #1
 800a5a4:	d10f      	bne.n	800a5c6 <main+0x1402>
 800a5a6:	4b28      	ldr	r3, [pc, #160]	; (800a648 <main+0x1484>)
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	2b01      	cmp	r3, #1
 800a5ac:	d00b      	beq.n	800a5c6 <main+0x1402>
	  {
		  tim7_20ms_flag = 0;
 800a5ae:	4b25      	ldr	r3, [pc, #148]	; (800a644 <main+0x1480>)
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	701a      	strb	r2, [r3, #0]

		  Encode_Msg_AHRS(&telemetry_tx_buf[0]);
 800a5b4:	481e      	ldr	r0, [pc, #120]	; (800a630 <main+0x146c>)
 800a5b6:	f000 fc75 	bl	800aea4 <Encode_Msg_AHRS>

		  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 800a5ba:	2214      	movs	r2, #20
 800a5bc:	491c      	ldr	r1, [pc, #112]	; (800a630 <main+0x146c>)
 800a5be:	481d      	ldr	r0, [pc, #116]	; (800a634 <main+0x1470>)
 800a5c0:	f7f9 fd03 	bl	8003fca <HAL_UART_Transmit_IT>
 800a5c4:	e018      	b.n	800a5f8 <main+0x1434>
	  }

	  else if(tim7_20ms_flag == 1 && tim7_100ms_flag == 1)
 800a5c6:	4b1f      	ldr	r3, [pc, #124]	; (800a644 <main+0x1480>)
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	2b01      	cmp	r3, #1
 800a5cc:	d114      	bne.n	800a5f8 <main+0x1434>
 800a5ce:	4b1e      	ldr	r3, [pc, #120]	; (800a648 <main+0x1484>)
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d110      	bne.n	800a5f8 <main+0x1434>
	  {
		  tim7_20ms_flag = 0;
 800a5d6:	4b1b      	ldr	r3, [pc, #108]	; (800a644 <main+0x1480>)
 800a5d8:	2200      	movs	r2, #0
 800a5da:	701a      	strb	r2, [r3, #0]
		  tim7_100ms_flag = 0;
 800a5dc:	4b1a      	ldr	r3, [pc, #104]	; (800a648 <main+0x1484>)
 800a5de:	2200      	movs	r2, #0
 800a5e0:	701a      	strb	r2, [r3, #0]

		  Encode_Msg_AHRS(&telemetry_tx_buf[0]);
 800a5e2:	4813      	ldr	r0, [pc, #76]	; (800a630 <main+0x146c>)
 800a5e4:	f000 fc5e 	bl	800aea4 <Encode_Msg_AHRS>
		  Encode_Msg_GPS(&telemetry_tx_buf[20]);
 800a5e8:	4818      	ldr	r0, [pc, #96]	; (800a64c <main+0x1488>)
 800a5ea:	f000 fdd7 	bl	800b19c <Encode_Msg_GPS>

		  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 40);
 800a5ee:	2228      	movs	r2, #40	; 0x28
 800a5f0:	490f      	ldr	r1, [pc, #60]	; (800a630 <main+0x146c>)
 800a5f2:	4810      	ldr	r0, [pc, #64]	; (800a634 <main+0x1470>)
 800a5f4:	f7f9 fce9 	bl	8003fca <HAL_UART_Transmit_IT>
	  }


	  batVolt = adcVal * 0.003619f;
 800a5f8:	88fb      	ldrh	r3, [r7, #6]
 800a5fa:	ee07 3a90 	vmov	s15, r3
 800a5fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a602:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800a650 <main+0x148c>
 800a606:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a60a:	4b12      	ldr	r3, [pc, #72]	; (800a654 <main+0x1490>)
 800a60c:	edc3 7a00 	vstr	s15, [r3]
	  //printf("%d\t%.2f\n", adcVal, batVolt);
	  if(batVolt < 10.0f)
 800a610:	4b10      	ldr	r3, [pc, #64]	; (800a654 <main+0x1490>)
 800a612:	edd3 7a00 	vldr	s15, [r3]
 800a616:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800a61a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a61e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a622:	d51b      	bpl.n	800a65c <main+0x1498>
	  {
		  low_bat_flag = 1;
 800a624:	4b0c      	ldr	r3, [pc, #48]	; (800a658 <main+0x1494>)
 800a626:	2201      	movs	r2, #1
 800a628:	701a      	strb	r2, [r3, #0]
 800a62a:	e01a      	b.n	800a662 <main+0x149e>
 800a62c:	20000350 	.word	0x20000350
 800a630:	200005a8 	.word	0x200005a8
 800a634:	20000654 	.word	0x20000654
 800a638:	200003c0 	.word	0x200003c0
 800a63c:	20000430 	.word	0x20000430
 800a640:	20000468 	.word	0x20000468
 800a644:	20000643 	.word	0x20000643
 800a648:	20000644 	.word	0x20000644
 800a64c:	200005bc 	.word	0x200005bc
 800a650:	3b6d2cbf 	.word	0x3b6d2cbf
 800a654:	200005e8 	.word	0x200005e8
 800a658:	200005ed 	.word	0x200005ed
	  }
	  else
	  {
		  low_bat_flag = 0;
 800a65c:	4b9c      	ldr	r3, [pc, #624]	; (800a8d0 <main+0x170c>)
 800a65e:	2200      	movs	r2, #0
 800a660:	701a      	strb	r2, [r3, #0]
	  }

	  if(BNO080_dataAvailable() == 1)
 800a662:	f7fc f95b 	bl	800691c <BNO080_dataAvailable>
 800a666:	4603      	mov	r3, r0
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d134      	bne.n	800a6d6 <main+0x1512>
	  {
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0);
 800a66c:	2101      	movs	r1, #1
 800a66e:	4899      	ldr	r0, [pc, #612]	; (800a8d4 <main+0x1710>)
 800a670:	f7fe fd69 	bl	8009146 <LL_GPIO_TogglePin>

		  q[0] = BNO080_getQuatI();
 800a674:	f7fc fb0c 	bl	8006c90 <BNO080_getQuatI>
 800a678:	eef0 7a40 	vmov.f32	s15, s0
 800a67c:	edc7 7a02 	vstr	s15, [r7, #8]
		  q[1] = BNO080_getQuatJ();
 800a680:	f7fc fb1c 	bl	8006cbc <BNO080_getQuatJ>
 800a684:	eef0 7a40 	vmov.f32	s15, s0
 800a688:	edc7 7a03 	vstr	s15, [r7, #12]
		  q[2] = BNO080_getQuatK();
 800a68c:	f7fc fb2c 	bl	8006ce8 <BNO080_getQuatK>
 800a690:	eef0 7a40 	vmov.f32	s15, s0
 800a694:	edc7 7a04 	vstr	s15, [r7, #16]
		  q[3] = BNO080_getQuatReal();
 800a698:	f7fc fb3c 	bl	8006d14 <BNO080_getQuatReal>
 800a69c:	eef0 7a40 	vmov.f32	s15, s0
 800a6a0:	edc7 7a05 	vstr	s15, [r7, #20]
		  quatRadianAccuracy = BNO080_getQuatRadianAccuracy();
 800a6a4:	f7fc fb4c 	bl	8006d40 <BNO080_getQuatRadianAccuracy>
 800a6a8:	ed87 0a06 	vstr	s0, [r7, #24]

		  Quaternion_Update(&q[0]);
 800a6ac:	f107 0308 	add.w	r3, r7, #8
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f7fe f911 	bl	80088d8 <Quaternion_Update>

		  BNO080_Roll = -BNO080_Roll;
 800a6b6:	4b88      	ldr	r3, [pc, #544]	; (800a8d8 <main+0x1714>)
 800a6b8:	edd3 7a00 	vldr	s15, [r3]
 800a6bc:	eef1 7a67 	vneg.f32	s15, s15
 800a6c0:	4b85      	ldr	r3, [pc, #532]	; (800a8d8 <main+0x1714>)
 800a6c2:	edc3 7a00 	vstr	s15, [r3]
		  BNO080_Pitch = -BNO080_Pitch;
 800a6c6:	4b85      	ldr	r3, [pc, #532]	; (800a8dc <main+0x1718>)
 800a6c8:	edd3 7a00 	vldr	s15, [r3]
 800a6cc:	eef1 7a67 	vneg.f32	s15, s15
 800a6d0:	4b82      	ldr	r3, [pc, #520]	; (800a8dc <main+0x1718>)
 800a6d2:	edc3 7a00 	vstr	s15, [r3]

		  //printf("%.2f\t%.2f\n", BNO080_Roll, BNO080_Pitch);
		  //printf("%.2f\n", BNO080_Yaw);
	  }

	  if(ICM20602_DataReady() == 1)
 800a6d6:	f7fd f915 	bl	8007904 <ICM20602_DataReady>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d14c      	bne.n	800a77a <main+0x15b6>
	  {
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_1);
 800a6e0:	2102      	movs	r1, #2
 800a6e2:	487c      	ldr	r0, [pc, #496]	; (800a8d4 <main+0x1710>)
 800a6e4:	f7fe fd2f 	bl	8009146 <LL_GPIO_TogglePin>

		  ICM20602_Get3AxisGyroRawData(&ICM20602.gyro_x_raw);
 800a6e8:	487d      	ldr	r0, [pc, #500]	; (800a8e0 <main+0x171c>)
 800a6ea:	f7fd f8df 	bl	80078ac <ICM20602_Get3AxisGyroRawData>

		  ICM20602.gyro_x = ICM20602.gyro_x_raw * 2000.f / 32768.f;
 800a6ee:	4b7d      	ldr	r3, [pc, #500]	; (800a8e4 <main+0x1720>)
 800a6f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a6f4:	ee07 3a90 	vmov	s15, r3
 800a6f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a6fc:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 800a8e8 <main+0x1724>
 800a700:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a704:	eddf 6a79 	vldr	s13, [pc, #484]	; 800a8ec <main+0x1728>
 800a708:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a70c:	4b75      	ldr	r3, [pc, #468]	; (800a8e4 <main+0x1720>)
 800a70e:	edc3 7a07 	vstr	s15, [r3, #28]
		  ICM20602.gyro_y = ICM20602.gyro_y_raw * 2000.f / 32768.f;
 800a712:	4b74      	ldr	r3, [pc, #464]	; (800a8e4 <main+0x1720>)
 800a714:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800a718:	ee07 3a90 	vmov	s15, r3
 800a71c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a720:	ed9f 7a71 	vldr	s14, [pc, #452]	; 800a8e8 <main+0x1724>
 800a724:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a728:	eddf 6a70 	vldr	s13, [pc, #448]	; 800a8ec <main+0x1728>
 800a72c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a730:	4b6c      	ldr	r3, [pc, #432]	; (800a8e4 <main+0x1720>)
 800a732:	edc3 7a08 	vstr	s15, [r3, #32]
		  ICM20602.gyro_z = ICM20602.gyro_z_raw * 2000.f / 32768.f;
 800a736:	4b6b      	ldr	r3, [pc, #428]	; (800a8e4 <main+0x1720>)
 800a738:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800a73c:	ee07 3a90 	vmov	s15, r3
 800a740:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a744:	ed9f 7a68 	vldr	s14, [pc, #416]	; 800a8e8 <main+0x1724>
 800a748:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a74c:	eddf 6a67 	vldr	s13, [pc, #412]	; 800a8ec <main+0x1728>
 800a750:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a754:	4b63      	ldr	r3, [pc, #396]	; (800a8e4 <main+0x1720>)
 800a756:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

		  ICM20602.gyro_x = -ICM20602.gyro_x;
 800a75a:	4b62      	ldr	r3, [pc, #392]	; (800a8e4 <main+0x1720>)
 800a75c:	edd3 7a07 	vldr	s15, [r3, #28]
 800a760:	eef1 7a67 	vneg.f32	s15, s15
 800a764:	4b5f      	ldr	r3, [pc, #380]	; (800a8e4 <main+0x1720>)
 800a766:	edc3 7a07 	vstr	s15, [r3, #28]
		  ICM20602.gyro_z = -ICM20602.gyro_z;
 800a76a:	4b5e      	ldr	r3, [pc, #376]	; (800a8e4 <main+0x1720>)
 800a76c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800a770:	eef1 7a67 	vneg.f32	s15, s15
 800a774:	4b5b      	ldr	r3, [pc, #364]	; (800a8e4 <main+0x1720>)
 800a776:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

		  //printf("%d,%d,%d\n", ICM20602.gyro_x_raw, ICM20602.gyro_y_raw, ICM20602.gyro_z_raw);
		  //printf("%d,%d,%d\n", (int)(ICM20602.gyro_x*100), (int)(ICM20602.gyro_y*100), (int)(ICM20602.gyro_z*100));
	  }

	  if(LPS22HH_DataReady() == 1)
 800a77a:	f7fd fb35 	bl	8007de8 <LPS22HH_DataReady>
 800a77e:	4603      	mov	r3, r0
 800a780:	2b01      	cmp	r3, #1
 800a782:	d138      	bne.n	800a7f6 <main+0x1632>
	  {
		  LPS22HH_GetPressure(&LPS22HH.pressure_raw);
 800a784:	485a      	ldr	r0, [pc, #360]	; (800a8f0 <main+0x172c>)
 800a786:	f7fd fb3b 	bl	8007e00 <LPS22HH_GetPressure>
		  LPS22HH_GetTemperature(&LPS22HH.temperature_raw);
 800a78a:	485a      	ldr	r0, [pc, #360]	; (800a8f4 <main+0x1730>)
 800a78c:	f7fd fb45 	bl	8007e1a <LPS22HH_GetTemperature>

		  LPS22HH.baroAlt = getAltitude2(LPS22HH.pressure_raw/4096.f, LPS22HH.temperature_raw/100.f);
 800a790:	4b57      	ldr	r3, [pc, #348]	; (800a8f0 <main+0x172c>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	ee07 3a90 	vmov	s15, r3
 800a798:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a79c:	eddf 6a56 	vldr	s13, [pc, #344]	; 800a8f8 <main+0x1734>
 800a7a0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a7a4:	4b52      	ldr	r3, [pc, #328]	; (800a8f0 <main+0x172c>)
 800a7a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a7aa:	ee07 3a90 	vmov	s15, r3
 800a7ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a7b2:	ed9f 6a52 	vldr	s12, [pc, #328]	; 800a8fc <main+0x1738>
 800a7b6:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800a7ba:	eef0 0a66 	vmov.f32	s1, s13
 800a7be:	eeb0 0a47 	vmov.f32	s0, s14
 800a7c2:	f7fd fb37 	bl	8007e34 <getAltitude2>
 800a7c6:	eef0 7a40 	vmov.f32	s15, s0
 800a7ca:	4b49      	ldr	r3, [pc, #292]	; (800a8f0 <main+0x172c>)
 800a7cc:	edc3 7a02 	vstr	s15, [r3, #8]

#define X 0.90f
		  LPS22HH.baroAltFilt = LPS22HH.baroAltFilt * X + LPS22HH.baroAlt * (1.0f - X);
 800a7d0:	4b47      	ldr	r3, [pc, #284]	; (800a8f0 <main+0x172c>)
 800a7d2:	edd3 7a03 	vldr	s15, [r3, #12]
 800a7d6:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800a900 <main+0x173c>
 800a7da:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a7de:	4b44      	ldr	r3, [pc, #272]	; (800a8f0 <main+0x172c>)
 800a7e0:	edd3 7a02 	vldr	s15, [r3, #8]
 800a7e4:	eddf 6a47 	vldr	s13, [pc, #284]	; 800a904 <main+0x1740>
 800a7e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a7ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7f0:	4b3f      	ldr	r3, [pc, #252]	; (800a8f0 <main+0x172c>)
 800a7f2:	edc3 7a03 	vstr	s15, [r3, #12]

		  //printf("%d,%d\n", (int)(LPS22HH.baroAlt*100), (int)(LPS22HH.baroAltFilt*100));
	  }

	  if(m8n_rx_cplt_flag == 1)
 800a7f6:	4b44      	ldr	r3, [pc, #272]	; (800a908 <main+0x1744>)
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	2b01      	cmp	r3, #1
 800a7fc:	d111      	bne.n	800a822 <main+0x165e>
	  {
		  m8n_rx_cplt_flag = 0;
 800a7fe:	4b42      	ldr	r3, [pc, #264]	; (800a908 <main+0x1744>)
 800a800:	2200      	movs	r2, #0
 800a802:	701a      	strb	r2, [r3, #0]

		  if(M8N_UBX_CHKSUM_Check(&m8n_rx_buf[0], 36) == 1)
 800a804:	2124      	movs	r1, #36	; 0x24
 800a806:	4841      	ldr	r0, [pc, #260]	; (800a90c <main+0x1748>)
 800a808:	f7fd fcfa 	bl	8008200 <M8N_UBX_CHKSUM_Check>
 800a80c:	4603      	mov	r3, r0
 800a80e:	2b01      	cmp	r3, #1
 800a810:	d107      	bne.n	800a822 <main+0x165e>
		  {
			  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 800a812:	2104      	movs	r1, #4
 800a814:	482f      	ldr	r0, [pc, #188]	; (800a8d4 <main+0x1710>)
 800a816:	f7fe fc96 	bl	8009146 <LL_GPIO_TogglePin>
			  M8N_UBX_NAV_POSLLH_Parsing(&m8n_rx_buf[0], &posllh);
 800a81a:	493d      	ldr	r1, [pc, #244]	; (800a910 <main+0x174c>)
 800a81c:	483b      	ldr	r0, [pc, #236]	; (800a90c <main+0x1748>)
 800a81e:	f7fd fd29 	bl	8008274 <M8N_UBX_NAV_POSLLH_Parsing>

			  //printf("LAT: %ld\tLON: %ld\tHeight: %ld\n", posllh.lat, posllh.lon, posllh.height);
		  }
	  }

	  if(ibus_rx_cplt_flag == 1)
 800a822:	4b3c      	ldr	r3, [pc, #240]	; (800a914 <main+0x1750>)
 800a824:	781b      	ldrb	r3, [r3, #0]
 800a826:	2b01      	cmp	r3, #1
 800a828:	d123      	bne.n	800a872 <main+0x16ae>
	  {
		  ibus_rx_cplt_flag = 0;
 800a82a:	4b3a      	ldr	r3, [pc, #232]	; (800a914 <main+0x1750>)
 800a82c:	2200      	movs	r2, #0
 800a82e:	701a      	strb	r2, [r3, #0]
		  if(iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1)
 800a830:	2120      	movs	r1, #32
 800a832:	4839      	ldr	r0, [pc, #228]	; (800a918 <main+0x1754>)
 800a834:	f7fc fd24 	bl	8007280 <iBus_Check_CHKSUM>
 800a838:	4603      	mov	r3, r0
 800a83a:	2b01      	cmp	r3, #1
 800a83c:	d119      	bne.n	800a872 <main+0x16ae>
		  {
			  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 800a83e:	2104      	movs	r1, #4
 800a840:	4824      	ldr	r0, [pc, #144]	; (800a8d4 <main+0x1710>)
 800a842:	f7fe fc80 	bl	8009146 <LL_GPIO_TogglePin>

			  iBus_Parsing(&ibus_rx_buf[0], &iBus);
 800a846:	4935      	ldr	r1, [pc, #212]	; (800a91c <main+0x1758>)
 800a848:	4833      	ldr	r0, [pc, #204]	; (800a918 <main+0x1754>)
 800a84a:	f7fc fd4f 	bl	80072ec <iBus_Parsing>
			  iBus_rx_cnt++;
 800a84e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a852:	3301      	adds	r3, #1
 800a854:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

			  if(iBus_isActiveFailsafe(&iBus) == 1)
 800a858:	4830      	ldr	r0, [pc, #192]	; (800a91c <main+0x1758>)
 800a85a:	f7fc fdbf 	bl	80073dc <iBus_isActiveFailsafe>
 800a85e:	4603      	mov	r3, r0
 800a860:	2b01      	cmp	r3, #1
 800a862:	d103      	bne.n	800a86c <main+0x16a8>
			  {
				  failsafe_flag = 1;
 800a864:	4b2e      	ldr	r3, [pc, #184]	; (800a920 <main+0x175c>)
 800a866:	2201      	movs	r2, #1
 800a868:	701a      	strb	r2, [r3, #0]
 800a86a:	e002      	b.n	800a872 <main+0x16ae>
			  }
			  else
			  {
				  failsafe_flag = 0;
 800a86c:	4b2c      	ldr	r3, [pc, #176]	; (800a920 <main+0x175c>)
 800a86e:	2200      	movs	r2, #0
 800a870:	701a      	strb	r2, [r3, #0]
//					  iBus.RH, iBus.RV, iBus.LV, iBus.LH, iBus.SwA, iBus.SwC);
//			  HAL_Delay(100);
		  }
	  }

	  if(tim7_1000ms_flag == 1)
 800a872:	4b2c      	ldr	r3, [pc, #176]	; (800a924 <main+0x1760>)
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	2b01      	cmp	r3, #1
 800a878:	d10c      	bne.n	800a894 <main+0x16d0>
	  {
		  tim7_1000ms_flag = 0;
 800a87a:	4b2a      	ldr	r3, [pc, #168]	; (800a924 <main+0x1760>)
 800a87c:	2200      	movs	r2, #0
 800a87e:	701a      	strb	r2, [r3, #0]
		  if(iBus_rx_cnt == 0)
 800a880:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a884:	2b00      	cmp	r3, #0
 800a886:	d102      	bne.n	800a88e <main+0x16ca>
		  {
			  failsafe_flag = 2;
 800a888:	4b25      	ldr	r3, [pc, #148]	; (800a920 <main+0x175c>)
 800a88a:	2202      	movs	r2, #2
 800a88c:	701a      	strb	r2, [r3, #0]
		  }
		  iBus_rx_cnt = 0;
 800a88e:	2300      	movs	r3, #0
 800a890:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	  }

	  if(failsafe_flag == 1 || failsafe_flag == 2 || low_bat_flag == 1 || iBus.SwC == 2000)
 800a894:	4b22      	ldr	r3, [pc, #136]	; (800a920 <main+0x175c>)
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	2b01      	cmp	r3, #1
 800a89a:	d00c      	beq.n	800a8b6 <main+0x16f2>
 800a89c:	4b20      	ldr	r3, [pc, #128]	; (800a920 <main+0x175c>)
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	2b02      	cmp	r3, #2
 800a8a2:	d008      	beq.n	800a8b6 <main+0x16f2>
 800a8a4:	4b0a      	ldr	r3, [pc, #40]	; (800a8d0 <main+0x170c>)
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d004      	beq.n	800a8b6 <main+0x16f2>
 800a8ac:	4b1b      	ldr	r3, [pc, #108]	; (800a91c <main+0x1758>)
 800a8ae:	899b      	ldrh	r3, [r3, #12]
 800a8b0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a8b4:	d105      	bne.n	800a8c2 <main+0x16fe>
	  {
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800a8b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a8ba:	481b      	ldr	r0, [pc, #108]	; (800a928 <main+0x1764>)
 800a8bc:	f7fe fbae 	bl	800901c <LL_TIM_CC_EnableChannel>
 800a8c0:	e004      	b.n	800a8cc <main+0x1708>
	  }
	  else
	  {
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800a8c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a8c6:	4818      	ldr	r0, [pc, #96]	; (800a928 <main+0x1764>)
 800a8c8:	f7fe fbb9 	bl	800903e <LL_TIM_CC_DisableChannel>
	  if(tim7_1ms_flag == 1)
 800a8cc:	f7ff b854 	b.w	8009978 <main+0x7b4>
 800a8d0:	200005ed 	.word	0x200005ed
 800a8d4:	40020800 	.word	0x40020800
 800a8d8:	200004a0 	.word	0x200004a0
 800a8dc:	200004a4 	.word	0x200004a4
 800a8e0:	200002ec 	.word	0x200002ec
 800a8e4:	200002e4 	.word	0x200002e4
 800a8e8:	44fa0000 	.word	0x44fa0000
 800a8ec:	47000000 	.word	0x47000000
 800a8f0:	2000030c 	.word	0x2000030c
 800a8f4:	20000310 	.word	0x20000310
 800a8f8:	45800000 	.word	0x45800000
 800a8fc:	42c80000 	.word	0x42c80000
 800a900:	3f666666 	.word	0x3f666666
 800a904:	3dccccd0 	.word	0x3dccccd0
 800a908:	2000061c 	.word	0x2000061c
 800a90c:	200005f8 	.word	0x200005f8
 800a910:	20000320 	.word	0x20000320
 800a914:	20000640 	.word	0x20000640
 800a918:	20000620 	.word	0x20000620
 800a91c:	200002cc 	.word	0x200002cc
 800a920:	200005ec 	.word	0x200005ec
 800a924:	20000645 	.word	0x20000645
 800a928:	40000400 	.word	0x40000400

0800a92c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b094      	sub	sp, #80	; 0x50
 800a930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a932:	f107 0320 	add.w	r3, r7, #32
 800a936:	2230      	movs	r2, #48	; 0x30
 800a938:	2100      	movs	r1, #0
 800a93a:	4618      	mov	r0, r3
 800a93c:	f001 ff6e 	bl	800c81c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a940:	f107 030c 	add.w	r3, r7, #12
 800a944:	2200      	movs	r2, #0
 800a946:	601a      	str	r2, [r3, #0]
 800a948:	605a      	str	r2, [r3, #4]
 800a94a:	609a      	str	r2, [r3, #8]
 800a94c:	60da      	str	r2, [r3, #12]
 800a94e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a950:	2300      	movs	r3, #0
 800a952:	60bb      	str	r3, [r7, #8]
 800a954:	4b28      	ldr	r3, [pc, #160]	; (800a9f8 <SystemClock_Config+0xcc>)
 800a956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a958:	4a27      	ldr	r2, [pc, #156]	; (800a9f8 <SystemClock_Config+0xcc>)
 800a95a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a95e:	6413      	str	r3, [r2, #64]	; 0x40
 800a960:	4b25      	ldr	r3, [pc, #148]	; (800a9f8 <SystemClock_Config+0xcc>)
 800a962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a968:	60bb      	str	r3, [r7, #8]
 800a96a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a96c:	2300      	movs	r3, #0
 800a96e:	607b      	str	r3, [r7, #4]
 800a970:	4b22      	ldr	r3, [pc, #136]	; (800a9fc <SystemClock_Config+0xd0>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4a21      	ldr	r2, [pc, #132]	; (800a9fc <SystemClock_Config+0xd0>)
 800a976:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a97a:	6013      	str	r3, [r2, #0]
 800a97c:	4b1f      	ldr	r3, [pc, #124]	; (800a9fc <SystemClock_Config+0xd0>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a984:	607b      	str	r3, [r7, #4]
 800a986:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a988:	2301      	movs	r3, #1
 800a98a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a98c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a990:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a992:	2302      	movs	r3, #2
 800a994:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a996:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a99a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800a99c:	2304      	movs	r3, #4
 800a99e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800a9a0:	23a8      	movs	r3, #168	; 0xa8
 800a9a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a9a4:	2302      	movs	r3, #2
 800a9a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800a9a8:	2304      	movs	r3, #4
 800a9aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a9ac:	f107 0320 	add.w	r3, r7, #32
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f7f8 fd93 	bl	80034dc <HAL_RCC_OscConfig>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d001      	beq.n	800a9c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800a9bc:	f000 fd01 	bl	800b3c2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a9c0:	230f      	movs	r3, #15
 800a9c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a9c4:	2302      	movs	r3, #2
 800a9c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a9cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a9d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a9d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a9d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800a9d8:	f107 030c 	add.w	r3, r7, #12
 800a9dc:	2105      	movs	r1, #5
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f7f8 fff4 	bl	80039cc <HAL_RCC_ClockConfig>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d001      	beq.n	800a9ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800a9ea:	f000 fcea 	bl	800b3c2 <Error_Handler>
  }
}
 800a9ee:	bf00      	nop
 800a9f0:	3750      	adds	r7, #80	; 0x50
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
 800a9f6:	bf00      	nop
 800a9f8:	40023800 	.word	0x40023800
 800a9fc:	40007000 	.word	0x40007000

0800aa00 <Is_iBus_Throttle_Min>:

/* USER CODE BEGIN 4 */
int Is_iBus_Throttle_Min(void)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	af00      	add	r7, sp, #0
	if(ibus_rx_cplt_flag == 1)
 800aa04:	4b0e      	ldr	r3, [pc, #56]	; (800aa40 <Is_iBus_Throttle_Min+0x40>)
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d115      	bne.n	800aa38 <Is_iBus_Throttle_Min+0x38>
	{
		ibus_rx_cplt_flag = 0;
 800aa0c:	4b0c      	ldr	r3, [pc, #48]	; (800aa40 <Is_iBus_Throttle_Min+0x40>)
 800aa0e:	2200      	movs	r2, #0
 800aa10:	701a      	strb	r2, [r3, #0]
		if(iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1)
 800aa12:	2120      	movs	r1, #32
 800aa14:	480b      	ldr	r0, [pc, #44]	; (800aa44 <Is_iBus_Throttle_Min+0x44>)
 800aa16:	f7fc fc33 	bl	8007280 <iBus_Check_CHKSUM>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	2b01      	cmp	r3, #1
 800aa1e:	d10b      	bne.n	800aa38 <Is_iBus_Throttle_Min+0x38>
		{
			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 800aa20:	4909      	ldr	r1, [pc, #36]	; (800aa48 <Is_iBus_Throttle_Min+0x48>)
 800aa22:	4808      	ldr	r0, [pc, #32]	; (800aa44 <Is_iBus_Throttle_Min+0x44>)
 800aa24:	f7fc fc62 	bl	80072ec <iBus_Parsing>
			if(iBus.LV < 1010) return 1;
 800aa28:	4b07      	ldr	r3, [pc, #28]	; (800aa48 <Is_iBus_Throttle_Min+0x48>)
 800aa2a:	889b      	ldrh	r3, [r3, #4]
 800aa2c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d801      	bhi.n	800aa38 <Is_iBus_Throttle_Min+0x38>
 800aa34:	2301      	movs	r3, #1
 800aa36:	e000      	b.n	800aa3a <Is_iBus_Throttle_Min+0x3a>
		}
	}

	return 0;
 800aa38:	2300      	movs	r3, #0
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	20000640 	.word	0x20000640
 800aa44:	20000620 	.word	0x20000620
 800aa48:	200002cc 	.word	0x200002cc

0800aa4c <ESC_Calibration>:

void ESC_Calibration(void)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	af00      	add	r7, sp, #0
	  TIM5->CCR1 = 21000;
 800aa50:	4b14      	ldr	r3, [pc, #80]	; (800aaa4 <ESC_Calibration+0x58>)
 800aa52:	f245 2208 	movw	r2, #21000	; 0x5208
 800aa56:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM5->CCR2 = 21000;
 800aa58:	4b12      	ldr	r3, [pc, #72]	; (800aaa4 <ESC_Calibration+0x58>)
 800aa5a:	f245 2208 	movw	r2, #21000	; 0x5208
 800aa5e:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM5->CCR3 = 21000;
 800aa60:	4b10      	ldr	r3, [pc, #64]	; (800aaa4 <ESC_Calibration+0x58>)
 800aa62:	f245 2208 	movw	r2, #21000	; 0x5208
 800aa66:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM5->CCR4 = 21000;
 800aa68:	4b0e      	ldr	r3, [pc, #56]	; (800aaa4 <ESC_Calibration+0x58>)
 800aa6a:	f245 2208 	movw	r2, #21000	; 0x5208
 800aa6e:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_Delay(7000);
 800aa70:	f641 3058 	movw	r0, #7000	; 0x1b58
 800aa74:	f7f6 fa8c 	bl	8000f90 <HAL_Delay>
	  TIM5->CCR1 = 10500;
 800aa78:	4b0a      	ldr	r3, [pc, #40]	; (800aaa4 <ESC_Calibration+0x58>)
 800aa7a:	f642 1204 	movw	r2, #10500	; 0x2904
 800aa7e:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM5->CCR2 = 10500;
 800aa80:	4b08      	ldr	r3, [pc, #32]	; (800aaa4 <ESC_Calibration+0x58>)
 800aa82:	f642 1204 	movw	r2, #10500	; 0x2904
 800aa86:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM5->CCR3 = 10500;
 800aa88:	4b06      	ldr	r3, [pc, #24]	; (800aaa4 <ESC_Calibration+0x58>)
 800aa8a:	f642 1204 	movw	r2, #10500	; 0x2904
 800aa8e:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM5->CCR4 = 10500;
 800aa90:	4b04      	ldr	r3, [pc, #16]	; (800aaa4 <ESC_Calibration+0x58>)
 800aa92:	f642 1204 	movw	r2, #10500	; 0x2904
 800aa96:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_Delay(8000);
 800aa98:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800aa9c:	f7f6 fa78 	bl	8000f90 <HAL_Delay>
}
 800aaa0:	bf00      	nop
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	40000c00 	.word	0x40000c00

0800aaa8 <Is_iBus_Received>:

int Is_iBus_Received(void)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	af00      	add	r7, sp, #0
	if(ibus_rx_cplt_flag == 1)
 800aaac:	4b0b      	ldr	r3, [pc, #44]	; (800aadc <Is_iBus_Received+0x34>)
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d10f      	bne.n	800aad4 <Is_iBus_Received+0x2c>
	{
		ibus_rx_cplt_flag = 0;
 800aab4:	4b09      	ldr	r3, [pc, #36]	; (800aadc <Is_iBus_Received+0x34>)
 800aab6:	2200      	movs	r2, #0
 800aab8:	701a      	strb	r2, [r3, #0]
		if(iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1)
 800aaba:	2120      	movs	r1, #32
 800aabc:	4808      	ldr	r0, [pc, #32]	; (800aae0 <Is_iBus_Received+0x38>)
 800aabe:	f7fc fbdf 	bl	8007280 <iBus_Check_CHKSUM>
 800aac2:	4603      	mov	r3, r0
 800aac4:	2b01      	cmp	r3, #1
 800aac6:	d105      	bne.n	800aad4 <Is_iBus_Received+0x2c>
		{
			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 800aac8:	4906      	ldr	r1, [pc, #24]	; (800aae4 <Is_iBus_Received+0x3c>)
 800aaca:	4805      	ldr	r0, [pc, #20]	; (800aae0 <Is_iBus_Received+0x38>)
 800aacc:	f7fc fc0e 	bl	80072ec <iBus_Parsing>
			return 1;
 800aad0:	2301      	movs	r3, #1
 800aad2:	e000      	b.n	800aad6 <Is_iBus_Received+0x2e>
		}
	}

	return 0;
 800aad4:	2300      	movs	r3, #0
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	bf00      	nop
 800aadc:	20000640 	.word	0x20000640
 800aae0:	20000620 	.word	0x20000620
 800aae4:	200002cc 	.word	0x200002cc

0800aae8 <BNO080_Calibration>:

void BNO080_Calibration(void)
{
 800aae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aaec:	b090      	sub	sp, #64	; 0x40
 800aaee:	af06      	add	r7, sp, #24
	//Resets BNO080 to disable All output
	BNO080_Initialization();
 800aaf0:	f7fb fe7e 	bl	80067f0 <BNO080_Initialization>

	//BNO080/BNO085 Configuration
	//Enable dynamic calibration for accelerometer, gyroscope, and magnetometer
	//Enable Game Rotation Vector output
	//Enable Magnetic Field output
	BNO080_calibrateAll(); //Turn on cal for Accel, Gyro, and Mag
 800aaf4:	f7fc f9d9 	bl	8006eaa <BNO080_calibrateAll>
	BNO080_enableGameRotationVector(20000); //Send data update every 20ms (50Hz)
 800aaf8:	f644 6020 	movw	r0, #20000	; 0x4e20
 800aafc:	f7fc f9b7 	bl	8006e6e <BNO080_enableGameRotationVector>
	BNO080_enableMagnetometer(20000); //Send data update every 20ms (50Hz)
 800ab00:	f644 6020 	movw	r0, #20000	; 0x4e20
 800ab04:	f7fc f9c2 	bl	8006e8c <BNO080_enableMagnetometer>

	//Once magnetic field is 2 or 3, run the Save DCD Now command
  	printf("Calibrating BNO080. Pull up FS-i6 SWC to end calibration and save to flash\n");
 800ab08:	489d      	ldr	r0, [pc, #628]	; (800ad80 <BNO080_Calibration+0x298>)
 800ab0a:	f002 fb7f 	bl	800d20c <puts>
  	printf("Output in form x, y, z, in uTesla\n\n");
 800ab0e:	489d      	ldr	r0, [pc, #628]	; (800ad84 <BNO080_Calibration+0x29c>)
 800ab10:	f002 fb7c 	bl	800d20c <puts>

	//while loop for calibration procedure
	//Iterates until iBus.SwC is mid point (1500)
	//Calibration procedure should be done while this loop is in iteration.
	while(iBus.SwC == 1500)
 800ab14:	e0b8      	b.n	800ac88 <BNO080_Calibration+0x1a0>
	{
		if(BNO080_dataAvailable() == 1)
 800ab16:	f7fb ff01 	bl	800691c <BNO080_dataAvailable>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	f040 80ae 	bne.w	800ac7e <BNO080_Calibration+0x196>
		{
			//Observing the status bit of the magnetic field output
			float x = BNO080_getMagX();
 800ab22:	f7fc f92f 	bl	8006d84 <BNO080_getMagX>
 800ab26:	ed87 0a08 	vstr	s0, [r7, #32]
			float y = BNO080_getMagY();
 800ab2a:	f7fc f941 	bl	8006db0 <BNO080_getMagY>
 800ab2e:	ed87 0a07 	vstr	s0, [r7, #28]
			float z = BNO080_getMagZ();
 800ab32:	f7fc f953 	bl	8006ddc <BNO080_getMagZ>
 800ab36:	ed87 0a06 	vstr	s0, [r7, #24]
			unsigned char accuracy = BNO080_getMagAccuracy();
 800ab3a:	f7fc f965 	bl	8006e08 <BNO080_getMagAccuracy>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	75fb      	strb	r3, [r7, #23]

			float quatI = BNO080_getQuatI();
 800ab42:	f7fc f8a5 	bl	8006c90 <BNO080_getQuatI>
 800ab46:	ed87 0a04 	vstr	s0, [r7, #16]
			float quatJ = BNO080_getQuatJ();
 800ab4a:	f7fc f8b7 	bl	8006cbc <BNO080_getQuatJ>
 800ab4e:	ed87 0a03 	vstr	s0, [r7, #12]
			float quatK = BNO080_getQuatK();
 800ab52:	f7fc f8c9 	bl	8006ce8 <BNO080_getQuatK>
 800ab56:	ed87 0a02 	vstr	s0, [r7, #8]
			float quatReal = BNO080_getQuatReal();
 800ab5a:	f7fc f8db 	bl	8006d14 <BNO080_getQuatReal>
 800ab5e:	ed87 0a01 	vstr	s0, [r7, #4]
			unsigned char sensorAccuracy = BNO080_getQuatAccuracy();
 800ab62:	f7fc f903 	bl	8006d6c <BNO080_getQuatAccuracy>
 800ab66:	4603      	mov	r3, r0
 800ab68:	70fb      	strb	r3, [r7, #3]

			printf("%f,%f,%f,", x, y, z);
 800ab6a:	6a38      	ldr	r0, [r7, #32]
 800ab6c:	f7f5 fcec 	bl	8000548 <__aeabi_f2d>
 800ab70:	4680      	mov	r8, r0
 800ab72:	4689      	mov	r9, r1
 800ab74:	69f8      	ldr	r0, [r7, #28]
 800ab76:	f7f5 fce7 	bl	8000548 <__aeabi_f2d>
 800ab7a:	4604      	mov	r4, r0
 800ab7c:	460d      	mov	r5, r1
 800ab7e:	69b8      	ldr	r0, [r7, #24]
 800ab80:	f7f5 fce2 	bl	8000548 <__aeabi_f2d>
 800ab84:	4602      	mov	r2, r0
 800ab86:	460b      	mov	r3, r1
 800ab88:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ab8c:	e9cd 4500 	strd	r4, r5, [sp]
 800ab90:	4642      	mov	r2, r8
 800ab92:	464b      	mov	r3, r9
 800ab94:	487c      	ldr	r0, [pc, #496]	; (800ad88 <BNO080_Calibration+0x2a0>)
 800ab96:	f002 fab3 	bl	800d100 <iprintf>
			if (accuracy == 0) printf("Unreliable\t");
 800ab9a:	7dfb      	ldrb	r3, [r7, #23]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d103      	bne.n	800aba8 <BNO080_Calibration+0xc0>
 800aba0:	487a      	ldr	r0, [pc, #488]	; (800ad8c <BNO080_Calibration+0x2a4>)
 800aba2:	f002 faad 	bl	800d100 <iprintf>
 800aba6:	e013      	b.n	800abd0 <BNO080_Calibration+0xe8>
			else if (accuracy == 1) printf("Low\t");
 800aba8:	7dfb      	ldrb	r3, [r7, #23]
 800abaa:	2b01      	cmp	r3, #1
 800abac:	d103      	bne.n	800abb6 <BNO080_Calibration+0xce>
 800abae:	4878      	ldr	r0, [pc, #480]	; (800ad90 <BNO080_Calibration+0x2a8>)
 800abb0:	f002 faa6 	bl	800d100 <iprintf>
 800abb4:	e00c      	b.n	800abd0 <BNO080_Calibration+0xe8>
			else if (accuracy == 2) printf("Medium\t");
 800abb6:	7dfb      	ldrb	r3, [r7, #23]
 800abb8:	2b02      	cmp	r3, #2
 800abba:	d103      	bne.n	800abc4 <BNO080_Calibration+0xdc>
 800abbc:	4875      	ldr	r0, [pc, #468]	; (800ad94 <BNO080_Calibration+0x2ac>)
 800abbe:	f002 fa9f 	bl	800d100 <iprintf>
 800abc2:	e005      	b.n	800abd0 <BNO080_Calibration+0xe8>
			else if (accuracy == 3) printf("High\t");
 800abc4:	7dfb      	ldrb	r3, [r7, #23]
 800abc6:	2b03      	cmp	r3, #3
 800abc8:	d102      	bne.n	800abd0 <BNO080_Calibration+0xe8>
 800abca:	4873      	ldr	r0, [pc, #460]	; (800ad98 <BNO080_Calibration+0x2b0>)
 800abcc:	f002 fa98 	bl	800d100 <iprintf>

			printf("\t%f,%f,%f,%f,", quatI, quatI, quatI, quatReal);
 800abd0:	6938      	ldr	r0, [r7, #16]
 800abd2:	f7f5 fcb9 	bl	8000548 <__aeabi_f2d>
 800abd6:	4682      	mov	sl, r0
 800abd8:	468b      	mov	fp, r1
 800abda:	6938      	ldr	r0, [r7, #16]
 800abdc:	f7f5 fcb4 	bl	8000548 <__aeabi_f2d>
 800abe0:	4604      	mov	r4, r0
 800abe2:	460d      	mov	r5, r1
 800abe4:	6938      	ldr	r0, [r7, #16]
 800abe6:	f7f5 fcaf 	bl	8000548 <__aeabi_f2d>
 800abea:	4680      	mov	r8, r0
 800abec:	4689      	mov	r9, r1
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f7f5 fcaa 	bl	8000548 <__aeabi_f2d>
 800abf4:	4602      	mov	r2, r0
 800abf6:	460b      	mov	r3, r1
 800abf8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800abfc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800ac00:	e9cd 4500 	strd	r4, r5, [sp]
 800ac04:	4652      	mov	r2, sl
 800ac06:	465b      	mov	r3, fp
 800ac08:	4864      	ldr	r0, [pc, #400]	; (800ad9c <BNO080_Calibration+0x2b4>)
 800ac0a:	f002 fa79 	bl	800d100 <iprintf>
			if (sensorAccuracy == 0) printf("Unreliable\n");
 800ac0e:	78fb      	ldrb	r3, [r7, #3]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d103      	bne.n	800ac1c <BNO080_Calibration+0x134>
 800ac14:	4862      	ldr	r0, [pc, #392]	; (800ada0 <BNO080_Calibration+0x2b8>)
 800ac16:	f002 faf9 	bl	800d20c <puts>
 800ac1a:	e013      	b.n	800ac44 <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 1) printf("Low\n");
 800ac1c:	78fb      	ldrb	r3, [r7, #3]
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	d103      	bne.n	800ac2a <BNO080_Calibration+0x142>
 800ac22:	4860      	ldr	r0, [pc, #384]	; (800ada4 <BNO080_Calibration+0x2bc>)
 800ac24:	f002 faf2 	bl	800d20c <puts>
 800ac28:	e00c      	b.n	800ac44 <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 2) printf("Medium\n");
 800ac2a:	78fb      	ldrb	r3, [r7, #3]
 800ac2c:	2b02      	cmp	r3, #2
 800ac2e:	d103      	bne.n	800ac38 <BNO080_Calibration+0x150>
 800ac30:	485d      	ldr	r0, [pc, #372]	; (800ada8 <BNO080_Calibration+0x2c0>)
 800ac32:	f002 faeb 	bl	800d20c <puts>
 800ac36:	e005      	b.n	800ac44 <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 3) printf("High\n");
 800ac38:	78fb      	ldrb	r3, [r7, #3]
 800ac3a:	2b03      	cmp	r3, #3
 800ac3c:	d102      	bne.n	800ac44 <BNO080_Calibration+0x15c>
 800ac3e:	485b      	ldr	r0, [pc, #364]	; (800adac <BNO080_Calibration+0x2c4>)
 800ac40:	f002 fae4 	bl	800d20c <puts>

			//Turn the LED and buzzer on when both accuracy and sensorAccuracy is high
			if(accuracy == 3 && sensorAccuracy == 3)
 800ac44:	7dfb      	ldrb	r3, [r7, #23]
 800ac46:	2b03      	cmp	r3, #3
 800ac48:	d110      	bne.n	800ac6c <BNO080_Calibration+0x184>
 800ac4a:	78fb      	ldrb	r3, [r7, #3]
 800ac4c:	2b03      	cmp	r3, #3
 800ac4e:	d10d      	bne.n	800ac6c <BNO080_Calibration+0x184>
			{
				LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 800ac50:	2107      	movs	r1, #7
 800ac52:	4857      	ldr	r0, [pc, #348]	; (800adb0 <BNO080_Calibration+0x2c8>)
 800ac54:	f7fe fa5a 	bl	800910c <LL_GPIO_SetOutputPin>
				TIM3->PSC = 65000; //Very low frequency
 800ac58:	4b56      	ldr	r3, [pc, #344]	; (800adb4 <BNO080_Calibration+0x2cc>)
 800ac5a:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 800ac5e:	629a      	str	r2, [r3, #40]	; 0x28
				LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800ac60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ac64:	4853      	ldr	r0, [pc, #332]	; (800adb4 <BNO080_Calibration+0x2cc>)
 800ac66:	f7fe f9d9 	bl	800901c <LL_TIM_CC_EnableChannel>
 800ac6a:	e008      	b.n	800ac7e <BNO080_Calibration+0x196>
			}
			else
			{
				LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 800ac6c:	2107      	movs	r1, #7
 800ac6e:	4850      	ldr	r0, [pc, #320]	; (800adb0 <BNO080_Calibration+0x2c8>)
 800ac70:	f7fe fa5a 	bl	8009128 <LL_GPIO_ResetOutputPin>
				LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800ac74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ac78:	484e      	ldr	r0, [pc, #312]	; (800adb4 <BNO080_Calibration+0x2cc>)
 800ac7a:	f7fe f9e0 	bl	800903e <LL_TIM_CC_DisableChannel>
			}
		}

		Is_iBus_Received(); //Refreshes iBus Data for iBus.SwC
 800ac7e:	f7ff ff13 	bl	800aaa8 <Is_iBus_Received>
		HAL_Delay(100);
 800ac82:	2064      	movs	r0, #100	; 0x64
 800ac84:	f7f6 f984 	bl	8000f90 <HAL_Delay>
	while(iBus.SwC == 1500)
 800ac88:	4b4b      	ldr	r3, [pc, #300]	; (800adb8 <BNO080_Calibration+0x2d0>)
 800ac8a:	899b      	ldrh	r3, [r3, #12]
 800ac8c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ac90:	4293      	cmp	r3, r2
 800ac92:	f43f af40 	beq.w	800ab16 <BNO080_Calibration+0x2e>
	}

	//Ends the loop when iBus.SwC is not mid point
	//Turn the LED and buzzer off
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 800ac96:	2107      	movs	r1, #7
 800ac98:	4845      	ldr	r0, [pc, #276]	; (800adb0 <BNO080_Calibration+0x2c8>)
 800ac9a:	f7fe fa45 	bl	8009128 <LL_GPIO_ResetOutputPin>
	LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800ac9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800aca2:	4844      	ldr	r0, [pc, #272]	; (800adb4 <BNO080_Calibration+0x2cc>)
 800aca4:	f7fe f9cb 	bl	800903e <LL_TIM_CC_DisableChannel>

	//Saves the current dynamic calibration data (DCD) to memory
	//Sends command to get the latest calibration status
	BNO080_saveCalibration();
 800aca8:	f7fc f9ec 	bl	8007084 <BNO080_saveCalibration>
	BNO080_requestCalibrationStatus();
 800acac:	f7fc f9ce 	bl	800704c <BNO080_requestCalibrationStatus>

	//Wait for calibration response, timeout if no response
	int counter = 100;
 800acb0:	2364      	movs	r3, #100	; 0x64
 800acb2:	627b      	str	r3, [r7, #36]	; 0x24
	while(1)
	{
		if(--counter == 0) break;
 800acb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb6:	3b01      	subs	r3, #1
 800acb8:	627b      	str	r3, [r7, #36]	; 0x24
 800acba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d02f      	beq.n	800ad20 <BNO080_Calibration+0x238>
		if(BNO080_dataAvailable())
 800acc0:	f7fb fe2c 	bl	800691c <BNO080_dataAvailable>
 800acc4:	4603      	mov	r3, r0
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d026      	beq.n	800ad18 <BNO080_Calibration+0x230>
		{
			//The IMU can report many different things. We must wait
			//for the ME Calibration Response Status byte to go to zero
			if(BNO080_calibrationComplete() == 1)
 800acca:	f7fc f8f5 	bl	8006eb8 <BNO080_calibrationComplete>
 800acce:	4603      	mov	r3, r0
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d121      	bne.n	800ad18 <BNO080_Calibration+0x230>
			{
				printf("\nCalibration data successfully stored\n");
 800acd4:	4839      	ldr	r0, [pc, #228]	; (800adbc <BNO080_Calibration+0x2d4>)
 800acd6:	f002 fa99 	bl	800d20c <puts>
				LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800acda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800acde:	4835      	ldr	r0, [pc, #212]	; (800adb4 <BNO080_Calibration+0x2cc>)
 800ace0:	f7fe f99c 	bl	800901c <LL_TIM_CC_EnableChannel>
				TIM3->PSC = 2000;
 800ace4:	4b33      	ldr	r3, [pc, #204]	; (800adb4 <BNO080_Calibration+0x2cc>)
 800ace6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800acea:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_Delay(300);
 800acec:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800acf0:	f7f6 f94e 	bl	8000f90 <HAL_Delay>
				TIM3->PSC = 1500;
 800acf4:	4b2f      	ldr	r3, [pc, #188]	; (800adb4 <BNO080_Calibration+0x2cc>)
 800acf6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800acfa:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_Delay(300);
 800acfc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ad00:	f7f6 f946 	bl	8000f90 <HAL_Delay>
				LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800ad04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ad08:	482a      	ldr	r0, [pc, #168]	; (800adb4 <BNO080_Calibration+0x2cc>)
 800ad0a:	f7fe f998 	bl	800903e <LL_TIM_CC_DisableChannel>
				HAL_Delay(1000);
 800ad0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ad12:	f7f6 f93d 	bl	8000f90 <HAL_Delay>
				break;
 800ad16:	e004      	b.n	800ad22 <BNO080_Calibration+0x23a>
			}
		}
		HAL_Delay(10);
 800ad18:	200a      	movs	r0, #10
 800ad1a:	f7f6 f939 	bl	8000f90 <HAL_Delay>
		if(--counter == 0) break;
 800ad1e:	e7c9      	b.n	800acb4 <BNO080_Calibration+0x1cc>
 800ad20:	bf00      	nop
	}
	if(counter == 0)
 800ad22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d120      	bne.n	800ad6a <BNO080_Calibration+0x282>
	{
		printf("\nCalibration data failed to store. Please try again.\n");
 800ad28:	4825      	ldr	r0, [pc, #148]	; (800adc0 <BNO080_Calibration+0x2d8>)
 800ad2a:	f002 fa6f 	bl	800d20c <puts>
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800ad2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ad32:	4820      	ldr	r0, [pc, #128]	; (800adb4 <BNO080_Calibration+0x2cc>)
 800ad34:	f7fe f972 	bl	800901c <LL_TIM_CC_EnableChannel>
		TIM3->PSC = 1500;
 800ad38:	4b1e      	ldr	r3, [pc, #120]	; (800adb4 <BNO080_Calibration+0x2cc>)
 800ad3a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ad3e:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(300);
 800ad40:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ad44:	f7f6 f924 	bl	8000f90 <HAL_Delay>
		TIM3->PSC = 2000;
 800ad48:	4b1a      	ldr	r3, [pc, #104]	; (800adb4 <BNO080_Calibration+0x2cc>)
 800ad4a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800ad4e:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(300);
 800ad50:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ad54:	f7f6 f91c 	bl	8000f90 <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800ad58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ad5c:	4815      	ldr	r0, [pc, #84]	; (800adb4 <BNO080_Calibration+0x2cc>)
 800ad5e:	f7fe f96e 	bl	800903e <LL_TIM_CC_DisableChannel>
		HAL_Delay(1000);
 800ad62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ad66:	f7f6 f913 	bl	8000f90 <HAL_Delay>
	//In general, calibration should be left on at all times. The BNO080
	//auto-calibrates and auto-records cal data roughly every 5 minutes

	//Resets BNO080 to disable Game Rotation Vector and Magnetometer
	//Enables Rotation Vector
	BNO080_Initialization();
 800ad6a:	f7fb fd41 	bl	80067f0 <BNO080_Initialization>
	//BNO080_enableRotationVector(2500); //Send data update every 2.5ms (400Hz)
	BNO080_enableGameRotationVector(2500);
 800ad6e:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800ad72:	f7fc f87c 	bl	8006e6e <BNO080_enableGameRotationVector>
}
 800ad76:	bf00      	nop
 800ad78:	3728      	adds	r7, #40	; 0x28
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ad80:	080102c8 	.word	0x080102c8
 800ad84:	08010314 	.word	0x08010314
 800ad88:	08010338 	.word	0x08010338
 800ad8c:	08010344 	.word	0x08010344
 800ad90:	08010350 	.word	0x08010350
 800ad94:	08010358 	.word	0x08010358
 800ad98:	08010360 	.word	0x08010360
 800ad9c:	08010368 	.word	0x08010368
 800ada0:	08010378 	.word	0x08010378
 800ada4:	08010384 	.word	0x08010384
 800ada8:	08010388 	.word	0x08010388
 800adac:	08010390 	.word	0x08010390
 800adb0:	40020800 	.word	0x40020800
 800adb4:	40000400 	.word	0x40000400
 800adb8:	200002cc 	.word	0x200002cc
 800adbc:	08010398 	.word	0x08010398
 800adc0:	080103c0 	.word	0x080103c0

0800adc4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b082      	sub	sp, #8
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
	static unsigned char cnt = 0;

	if(huart->Instance == USART1)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4a2e      	ldr	r2, [pc, #184]	; (800ae8c <HAL_UART_RxCpltCallback+0xc8>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d153      	bne.n	800ae7e <HAL_UART_RxCpltCallback+0xba>
	{
		HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 800add6:	2201      	movs	r2, #1
 800add8:	492d      	ldr	r1, [pc, #180]	; (800ae90 <HAL_UART_RxCpltCallback+0xcc>)
 800adda:	482e      	ldr	r0, [pc, #184]	; (800ae94 <HAL_UART_RxCpltCallback+0xd0>)
 800addc:	f7f9 f93a 	bl	8004054 <HAL_UART_Receive_IT>

		switch(cnt)
 800ade0:	4b2d      	ldr	r3, [pc, #180]	; (800ae98 <HAL_UART_RxCpltCallback+0xd4>)
 800ade2:	781b      	ldrb	r3, [r3, #0]
 800ade4:	2b13      	cmp	r3, #19
 800ade6:	d02e      	beq.n	800ae46 <HAL_UART_RxCpltCallback+0x82>
 800ade8:	2b13      	cmp	r3, #19
 800adea:	dc3a      	bgt.n	800ae62 <HAL_UART_RxCpltCallback+0x9e>
 800adec:	2b00      	cmp	r3, #0
 800adee:	d002      	beq.n	800adf6 <HAL_UART_RxCpltCallback+0x32>
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d012      	beq.n	800ae1a <HAL_UART_RxCpltCallback+0x56>
 800adf4:	e035      	b.n	800ae62 <HAL_UART_RxCpltCallback+0x9e>
		{
		case 0:
			if(uart1_rx_data == 0x47)
 800adf6:	4b26      	ldr	r3, [pc, #152]	; (800ae90 <HAL_UART_RxCpltCallback+0xcc>)
 800adf8:	781b      	ldrb	r3, [r3, #0]
 800adfa:	2b47      	cmp	r3, #71	; 0x47
 800adfc:	d141      	bne.n	800ae82 <HAL_UART_RxCpltCallback+0xbe>
			{
				telemetry_rx_buf[cnt] = uart1_rx_data;
 800adfe:	4b26      	ldr	r3, [pc, #152]	; (800ae98 <HAL_UART_RxCpltCallback+0xd4>)
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	461a      	mov	r2, r3
 800ae04:	4b22      	ldr	r3, [pc, #136]	; (800ae90 <HAL_UART_RxCpltCallback+0xcc>)
 800ae06:	7819      	ldrb	r1, [r3, #0]
 800ae08:	4b24      	ldr	r3, [pc, #144]	; (800ae9c <HAL_UART_RxCpltCallback+0xd8>)
 800ae0a:	5499      	strb	r1, [r3, r2]
				cnt++;
 800ae0c:	4b22      	ldr	r3, [pc, #136]	; (800ae98 <HAL_UART_RxCpltCallback+0xd4>)
 800ae0e:	781b      	ldrb	r3, [r3, #0]
 800ae10:	3301      	adds	r3, #1
 800ae12:	b2da      	uxtb	r2, r3
 800ae14:	4b20      	ldr	r3, [pc, #128]	; (800ae98 <HAL_UART_RxCpltCallback+0xd4>)
 800ae16:	701a      	strb	r2, [r3, #0]
			}
			break;
 800ae18:	e033      	b.n	800ae82 <HAL_UART_RxCpltCallback+0xbe>
		case 1:
			if(uart1_rx_data == 0x53)
 800ae1a:	4b1d      	ldr	r3, [pc, #116]	; (800ae90 <HAL_UART_RxCpltCallback+0xcc>)
 800ae1c:	781b      	ldrb	r3, [r3, #0]
 800ae1e:	2b53      	cmp	r3, #83	; 0x53
 800ae20:	d10d      	bne.n	800ae3e <HAL_UART_RxCpltCallback+0x7a>
			{
				telemetry_rx_buf[cnt] = uart1_rx_data;
 800ae22:	4b1d      	ldr	r3, [pc, #116]	; (800ae98 <HAL_UART_RxCpltCallback+0xd4>)
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	461a      	mov	r2, r3
 800ae28:	4b19      	ldr	r3, [pc, #100]	; (800ae90 <HAL_UART_RxCpltCallback+0xcc>)
 800ae2a:	7819      	ldrb	r1, [r3, #0]
 800ae2c:	4b1b      	ldr	r3, [pc, #108]	; (800ae9c <HAL_UART_RxCpltCallback+0xd8>)
 800ae2e:	5499      	strb	r1, [r3, r2]
				cnt++;
 800ae30:	4b19      	ldr	r3, [pc, #100]	; (800ae98 <HAL_UART_RxCpltCallback+0xd4>)
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	3301      	adds	r3, #1
 800ae36:	b2da      	uxtb	r2, r3
 800ae38:	4b17      	ldr	r3, [pc, #92]	; (800ae98 <HAL_UART_RxCpltCallback+0xd4>)
 800ae3a:	701a      	strb	r2, [r3, #0]
			}
			else
				cnt = 0;
			break;
 800ae3c:	e022      	b.n	800ae84 <HAL_UART_RxCpltCallback+0xc0>
				cnt = 0;
 800ae3e:	4b16      	ldr	r3, [pc, #88]	; (800ae98 <HAL_UART_RxCpltCallback+0xd4>)
 800ae40:	2200      	movs	r2, #0
 800ae42:	701a      	strb	r2, [r3, #0]
			break;
 800ae44:	e01e      	b.n	800ae84 <HAL_UART_RxCpltCallback+0xc0>
		case 19:
			telemetry_rx_buf[cnt] = uart1_rx_data;
 800ae46:	4b14      	ldr	r3, [pc, #80]	; (800ae98 <HAL_UART_RxCpltCallback+0xd4>)
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	4b10      	ldr	r3, [pc, #64]	; (800ae90 <HAL_UART_RxCpltCallback+0xcc>)
 800ae4e:	7819      	ldrb	r1, [r3, #0]
 800ae50:	4b12      	ldr	r3, [pc, #72]	; (800ae9c <HAL_UART_RxCpltCallback+0xd8>)
 800ae52:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 800ae54:	4b10      	ldr	r3, [pc, #64]	; (800ae98 <HAL_UART_RxCpltCallback+0xd4>)
 800ae56:	2200      	movs	r2, #0
 800ae58:	701a      	strb	r2, [r3, #0]
			telemetry_rx_cplt_flag = 1;
 800ae5a:	4b11      	ldr	r3, [pc, #68]	; (800aea0 <HAL_UART_RxCpltCallback+0xdc>)
 800ae5c:	2201      	movs	r2, #1
 800ae5e:	701a      	strb	r2, [r3, #0]
			break;
 800ae60:	e010      	b.n	800ae84 <HAL_UART_RxCpltCallback+0xc0>
		default:
			telemetry_rx_buf[cnt] = uart1_rx_data;
 800ae62:	4b0d      	ldr	r3, [pc, #52]	; (800ae98 <HAL_UART_RxCpltCallback+0xd4>)
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	461a      	mov	r2, r3
 800ae68:	4b09      	ldr	r3, [pc, #36]	; (800ae90 <HAL_UART_RxCpltCallback+0xcc>)
 800ae6a:	7819      	ldrb	r1, [r3, #0]
 800ae6c:	4b0b      	ldr	r3, [pc, #44]	; (800ae9c <HAL_UART_RxCpltCallback+0xd8>)
 800ae6e:	5499      	strb	r1, [r3, r2]
			cnt++;
 800ae70:	4b09      	ldr	r3, [pc, #36]	; (800ae98 <HAL_UART_RxCpltCallback+0xd4>)
 800ae72:	781b      	ldrb	r3, [r3, #0]
 800ae74:	3301      	adds	r3, #1
 800ae76:	b2da      	uxtb	r2, r3
 800ae78:	4b07      	ldr	r3, [pc, #28]	; (800ae98 <HAL_UART_RxCpltCallback+0xd4>)
 800ae7a:	701a      	strb	r2, [r3, #0]
			break;
 800ae7c:	e002      	b.n	800ae84 <HAL_UART_RxCpltCallback+0xc0>
		}
	}
 800ae7e:	bf00      	nop
 800ae80:	e000      	b.n	800ae84 <HAL_UART_RxCpltCallback+0xc0>
			break;
 800ae82:	bf00      	nop
}
 800ae84:	bf00      	nop
 800ae86:	3708      	adds	r7, #8
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}
 800ae8c:	40011000 	.word	0x40011000
 800ae90:	20000641 	.word	0x20000641
 800ae94:	20000654 	.word	0x20000654
 800ae98:	200005ee 	.word	0x200005ee
 800ae9c:	200005d0 	.word	0x200005d0
 800aea0:	200005e4 	.word	0x200005e4

0800aea4 <Encode_Msg_AHRS>:

void Encode_Msg_AHRS(unsigned char* telemetry_tx_buf)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b085      	sub	sp, #20
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
	  telemetry_tx_buf[0] = 0x46;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2246      	movs	r2, #70	; 0x46
 800aeb0:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[1] = 0x43;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	3301      	adds	r3, #1
 800aeb6:	2243      	movs	r2, #67	; 0x43
 800aeb8:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[2] = 0x10;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	3302      	adds	r3, #2
 800aebe:	2210      	movs	r2, #16
 800aec0:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[3] = (short)(BNO080_Roll*100);
 800aec2:	4bae      	ldr	r3, [pc, #696]	; (800b17c <Encode_Msg_AHRS+0x2d8>)
 800aec4:	edd3 7a00 	vldr	s15, [r3]
 800aec8:	ed9f 7aad 	vldr	s14, [pc, #692]	; 800b180 <Encode_Msg_AHRS+0x2dc>
 800aecc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aed0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aed4:	ee17 3a90 	vmov	r3, s15
 800aed8:	b21a      	sxth	r2, r3
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	3303      	adds	r3, #3
 800aede:	b2d2      	uxtb	r2, r2
 800aee0:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[4] = ((short)(BNO080_Roll*100))>>8;
 800aee2:	4ba6      	ldr	r3, [pc, #664]	; (800b17c <Encode_Msg_AHRS+0x2d8>)
 800aee4:	edd3 7a00 	vldr	s15, [r3]
 800aee8:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 800b180 <Encode_Msg_AHRS+0x2dc>
 800aeec:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aef0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aef4:	ee17 3a90 	vmov	r3, s15
 800aef8:	b21b      	sxth	r3, r3
 800aefa:	121b      	asrs	r3, r3, #8
 800aefc:	b21a      	sxth	r2, r3
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	3304      	adds	r3, #4
 800af02:	b2d2      	uxtb	r2, r2
 800af04:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[5] = (short)(BNO080_Pitch*100);
 800af06:	4b9f      	ldr	r3, [pc, #636]	; (800b184 <Encode_Msg_AHRS+0x2e0>)
 800af08:	edd3 7a00 	vldr	s15, [r3]
 800af0c:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 800b180 <Encode_Msg_AHRS+0x2dc>
 800af10:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800af18:	ee17 3a90 	vmov	r3, s15
 800af1c:	b21a      	sxth	r2, r3
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	3305      	adds	r3, #5
 800af22:	b2d2      	uxtb	r2, r2
 800af24:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[6] = ((short)(BNO080_Pitch*100))>>8;
 800af26:	4b97      	ldr	r3, [pc, #604]	; (800b184 <Encode_Msg_AHRS+0x2e0>)
 800af28:	edd3 7a00 	vldr	s15, [r3]
 800af2c:	ed9f 7a94 	vldr	s14, [pc, #592]	; 800b180 <Encode_Msg_AHRS+0x2dc>
 800af30:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800af38:	ee17 3a90 	vmov	r3, s15
 800af3c:	b21b      	sxth	r3, r3
 800af3e:	121b      	asrs	r3, r3, #8
 800af40:	b21a      	sxth	r2, r3
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	3306      	adds	r3, #6
 800af46:	b2d2      	uxtb	r2, r2
 800af48:	701a      	strb	r2, [r3, #0]

//	  telemetry_tx_buf[5] = (short)(ICM20602.gyro_x*100);
//	  telemetry_tx_buf[6] = ((short)(ICM20602.gyro_x*100))>>8;

	  telemetry_tx_buf[7] = (unsigned short)(BNO080_Yaw*100);
 800af4a:	4b8f      	ldr	r3, [pc, #572]	; (800b188 <Encode_Msg_AHRS+0x2e4>)
 800af4c:	edd3 7a00 	vldr	s15, [r3]
 800af50:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800b180 <Encode_Msg_AHRS+0x2dc>
 800af54:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af5c:	ee17 3a90 	vmov	r3, s15
 800af60:	b29a      	uxth	r2, r3
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	3307      	adds	r3, #7
 800af66:	b2d2      	uxtb	r2, r2
 800af68:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[8] = ((unsigned short)(BNO080_Yaw*100))>>8;
 800af6a:	4b87      	ldr	r3, [pc, #540]	; (800b188 <Encode_Msg_AHRS+0x2e4>)
 800af6c:	edd3 7a00 	vldr	s15, [r3]
 800af70:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800b180 <Encode_Msg_AHRS+0x2dc>
 800af74:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af7c:	ee17 3a90 	vmov	r3, s15
 800af80:	b29b      	uxth	r3, r3
 800af82:	0a1b      	lsrs	r3, r3, #8
 800af84:	b29a      	uxth	r2, r3
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	3308      	adds	r3, #8
 800af8a:	b2d2      	uxtb	r2, r2
 800af8c:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[9] = (short)(LPS22HH.baroAltFilt*10);
 800af8e:	4b7f      	ldr	r3, [pc, #508]	; (800b18c <Encode_Msg_AHRS+0x2e8>)
 800af90:	edd3 7a03 	vldr	s15, [r3, #12]
 800af94:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800af98:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800afa0:	ee17 3a90 	vmov	r3, s15
 800afa4:	b21a      	sxth	r2, r3
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	3309      	adds	r3, #9
 800afaa:	b2d2      	uxtb	r2, r2
 800afac:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[10] = ((short)(LPS22HH.baroAltFilt*10))>>8;
 800afae:	4b77      	ldr	r3, [pc, #476]	; (800b18c <Encode_Msg_AHRS+0x2e8>)
 800afb0:	edd3 7a03 	vldr	s15, [r3, #12]
 800afb4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800afb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800afbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800afc0:	ee17 3a90 	vmov	r3, s15
 800afc4:	b21b      	sxth	r3, r3
 800afc6:	121b      	asrs	r3, r3, #8
 800afc8:	b21a      	sxth	r2, r3
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	330a      	adds	r3, #10
 800afce:	b2d2      	uxtb	r2, r2
 800afd0:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[11] = (short)((iBus.RH-1500)*0.1f*100);
 800afd2:	4b6f      	ldr	r3, [pc, #444]	; (800b190 <Encode_Msg_AHRS+0x2ec>)
 800afd4:	881b      	ldrh	r3, [r3, #0]
 800afd6:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800afda:	ee07 3a90 	vmov	s15, r3
 800afde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800afe2:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 800b194 <Encode_Msg_AHRS+0x2f0>
 800afe6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800afea:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800b180 <Encode_Msg_AHRS+0x2dc>
 800afee:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aff2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aff6:	ee17 3a90 	vmov	r3, s15
 800affa:	b21a      	sxth	r2, r3
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	330b      	adds	r3, #11
 800b000:	b2d2      	uxtb	r2, r2
 800b002:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[12] = ((short)((iBus.RH-1500)*0.1f*100))>>8;
 800b004:	4b62      	ldr	r3, [pc, #392]	; (800b190 <Encode_Msg_AHRS+0x2ec>)
 800b006:	881b      	ldrh	r3, [r3, #0]
 800b008:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800b00c:	ee07 3a90 	vmov	s15, r3
 800b010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b014:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800b194 <Encode_Msg_AHRS+0x2f0>
 800b018:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b01c:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800b180 <Encode_Msg_AHRS+0x2dc>
 800b020:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b024:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b028:	ee17 3a90 	vmov	r3, s15
 800b02c:	b21b      	sxth	r3, r3
 800b02e:	121b      	asrs	r3, r3, #8
 800b030:	b21a      	sxth	r2, r3
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	330c      	adds	r3, #12
 800b036:	b2d2      	uxtb	r2, r2
 800b038:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[13] = (short)((iBus.RV-1500)*0.1f*100);
 800b03a:	4b55      	ldr	r3, [pc, #340]	; (800b190 <Encode_Msg_AHRS+0x2ec>)
 800b03c:	885b      	ldrh	r3, [r3, #2]
 800b03e:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800b042:	ee07 3a90 	vmov	s15, r3
 800b046:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b04a:	ed9f 7a52 	vldr	s14, [pc, #328]	; 800b194 <Encode_Msg_AHRS+0x2f0>
 800b04e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b052:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800b180 <Encode_Msg_AHRS+0x2dc>
 800b056:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b05a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b05e:	ee17 3a90 	vmov	r3, s15
 800b062:	b21a      	sxth	r2, r3
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	330d      	adds	r3, #13
 800b068:	b2d2      	uxtb	r2, r2
 800b06a:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[14] = ((short)((iBus.RV-1500)*0.1f*100))>>8;
 800b06c:	4b48      	ldr	r3, [pc, #288]	; (800b190 <Encode_Msg_AHRS+0x2ec>)
 800b06e:	885b      	ldrh	r3, [r3, #2]
 800b070:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800b074:	ee07 3a90 	vmov	s15, r3
 800b078:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b07c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800b194 <Encode_Msg_AHRS+0x2f0>
 800b080:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b084:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800b180 <Encode_Msg_AHRS+0x2dc>
 800b088:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b08c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b090:	ee17 3a90 	vmov	r3, s15
 800b094:	b21b      	sxth	r3, r3
 800b096:	121b      	asrs	r3, r3, #8
 800b098:	b21a      	sxth	r2, r3
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	330e      	adds	r3, #14
 800b09e:	b2d2      	uxtb	r2, r2
 800b0a0:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[15] = (unsigned short)((iBus.LH-1000)*0.36f*100);
 800b0a2:	4b3b      	ldr	r3, [pc, #236]	; (800b190 <Encode_Msg_AHRS+0x2ec>)
 800b0a4:	88db      	ldrh	r3, [r3, #6]
 800b0a6:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800b0aa:	ee07 3a90 	vmov	s15, r3
 800b0ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b0b2:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800b198 <Encode_Msg_AHRS+0x2f4>
 800b0b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b0ba:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800b180 <Encode_Msg_AHRS+0x2dc>
 800b0be:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b0c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0c6:	ee17 3a90 	vmov	r3, s15
 800b0ca:	b29a      	uxth	r2, r3
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	330f      	adds	r3, #15
 800b0d0:	b2d2      	uxtb	r2, r2
 800b0d2:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[16] = ((unsigned short)((iBus.LH-1000)*0.36f*100))>>8;
 800b0d4:	4b2e      	ldr	r3, [pc, #184]	; (800b190 <Encode_Msg_AHRS+0x2ec>)
 800b0d6:	88db      	ldrh	r3, [r3, #6]
 800b0d8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800b0dc:	ee07 3a90 	vmov	s15, r3
 800b0e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b0e4:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800b198 <Encode_Msg_AHRS+0x2f4>
 800b0e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b0ec:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800b180 <Encode_Msg_AHRS+0x2dc>
 800b0f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b0f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0f8:	ee17 3a90 	vmov	r3, s15
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	0a1b      	lsrs	r3, r3, #8
 800b100:	b29a      	uxth	r2, r3
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	3310      	adds	r3, #16
 800b106:	b2d2      	uxtb	r2, r2
 800b108:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[17] = (short)(iBus.LV*10);
 800b10a:	4b21      	ldr	r3, [pc, #132]	; (800b190 <Encode_Msg_AHRS+0x2ec>)
 800b10c:	889b      	ldrh	r3, [r3, #4]
 800b10e:	b2da      	uxtb	r2, r3
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	3311      	adds	r3, #17
 800b114:	4611      	mov	r1, r2
 800b116:	0089      	lsls	r1, r1, #2
 800b118:	440a      	add	r2, r1
 800b11a:	0052      	lsls	r2, r2, #1
 800b11c:	b2d2      	uxtb	r2, r2
 800b11e:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[18] = ((short)(iBus.LV*10))>>8;
 800b120:	4b1b      	ldr	r3, [pc, #108]	; (800b190 <Encode_Msg_AHRS+0x2ec>)
 800b122:	889b      	ldrh	r3, [r3, #4]
 800b124:	461a      	mov	r2, r3
 800b126:	0092      	lsls	r2, r2, #2
 800b128:	4413      	add	r3, r2
 800b12a:	005b      	lsls	r3, r3, #1
 800b12c:	b29b      	uxth	r3, r3
 800b12e:	b21b      	sxth	r3, r3
 800b130:	121b      	asrs	r3, r3, #8
 800b132:	b21a      	sxth	r2, r3
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	3312      	adds	r3, #18
 800b138:	b2d2      	uxtb	r2, r2
 800b13a:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[19] = 0xff;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	3313      	adds	r3, #19
 800b140:	22ff      	movs	r2, #255	; 0xff
 800b142:	701a      	strb	r2, [r3, #0]

	  for(int i=0;i<19;i++) telemetry_tx_buf[19] = telemetry_tx_buf[19] - telemetry_tx_buf[i];
 800b144:	2300      	movs	r3, #0
 800b146:	60fb      	str	r3, [r7, #12]
 800b148:	e00e      	b.n	800b168 <Encode_Msg_AHRS+0x2c4>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	3313      	adds	r3, #19
 800b14e:	7819      	ldrb	r1, [r3, #0]
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	687a      	ldr	r2, [r7, #4]
 800b154:	4413      	add	r3, r2
 800b156:	781a      	ldrb	r2, [r3, #0]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	3313      	adds	r3, #19
 800b15c:	1a8a      	subs	r2, r1, r2
 800b15e:	b2d2      	uxtb	r2, r2
 800b160:	701a      	strb	r2, [r3, #0]
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	3301      	adds	r3, #1
 800b166:	60fb      	str	r3, [r7, #12]
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	2b12      	cmp	r3, #18
 800b16c:	dded      	ble.n	800b14a <Encode_Msg_AHRS+0x2a6>
}
 800b16e:	bf00      	nop
 800b170:	bf00      	nop
 800b172:	3714      	adds	r7, #20
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr
 800b17c:	200004a0 	.word	0x200004a0
 800b180:	42c80000 	.word	0x42c80000
 800b184:	200004a4 	.word	0x200004a4
 800b188:	200004a8 	.word	0x200004a8
 800b18c:	2000030c 	.word	0x2000030c
 800b190:	200002cc 	.word	0x200002cc
 800b194:	3dcccccd 	.word	0x3dcccccd
 800b198:	3eb851ec 	.word	0x3eb851ec

0800b19c <Encode_Msg_GPS>:

void Encode_Msg_GPS(unsigned char* telemetry_tx_buf)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b085      	sub	sp, #20
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
	  telemetry_tx_buf[0] = 0x46;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2246      	movs	r2, #70	; 0x46
 800b1a8:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[1] = 0x43;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	3301      	adds	r3, #1
 800b1ae:	2243      	movs	r2, #67	; 0x43
 800b1b0:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[2] = 0x11;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	3302      	adds	r3, #2
 800b1b6:	2211      	movs	r2, #17
 800b1b8:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[3] = posllh.lat;
 800b1ba:	4b53      	ldr	r3, [pc, #332]	; (800b308 <Encode_Msg_GPS+0x16c>)
 800b1bc:	68da      	ldr	r2, [r3, #12]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	3303      	adds	r3, #3
 800b1c2:	b2d2      	uxtb	r2, r2
 800b1c4:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[4] = posllh.lat>>8;
 800b1c6:	4b50      	ldr	r3, [pc, #320]	; (800b308 <Encode_Msg_GPS+0x16c>)
 800b1c8:	68db      	ldr	r3, [r3, #12]
 800b1ca:	121a      	asrs	r2, r3, #8
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	3304      	adds	r3, #4
 800b1d0:	b2d2      	uxtb	r2, r2
 800b1d2:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[5] = posllh.lat>>16;
 800b1d4:	4b4c      	ldr	r3, [pc, #304]	; (800b308 <Encode_Msg_GPS+0x16c>)
 800b1d6:	68db      	ldr	r3, [r3, #12]
 800b1d8:	141a      	asrs	r2, r3, #16
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	3305      	adds	r3, #5
 800b1de:	b2d2      	uxtb	r2, r2
 800b1e0:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[6] = posllh.lat>>24;
 800b1e2:	4b49      	ldr	r3, [pc, #292]	; (800b308 <Encode_Msg_GPS+0x16c>)
 800b1e4:	68db      	ldr	r3, [r3, #12]
 800b1e6:	161a      	asrs	r2, r3, #24
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	3306      	adds	r3, #6
 800b1ec:	b2d2      	uxtb	r2, r2
 800b1ee:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[7] = posllh.lon;
 800b1f0:	4b45      	ldr	r3, [pc, #276]	; (800b308 <Encode_Msg_GPS+0x16c>)
 800b1f2:	689a      	ldr	r2, [r3, #8]
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	3307      	adds	r3, #7
 800b1f8:	b2d2      	uxtb	r2, r2
 800b1fa:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[8] = posllh.lon>>8;
 800b1fc:	4b42      	ldr	r3, [pc, #264]	; (800b308 <Encode_Msg_GPS+0x16c>)
 800b1fe:	689b      	ldr	r3, [r3, #8]
 800b200:	121a      	asrs	r2, r3, #8
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	3308      	adds	r3, #8
 800b206:	b2d2      	uxtb	r2, r2
 800b208:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[9] = posllh.lon>>16;
 800b20a:	4b3f      	ldr	r3, [pc, #252]	; (800b308 <Encode_Msg_GPS+0x16c>)
 800b20c:	689b      	ldr	r3, [r3, #8]
 800b20e:	141a      	asrs	r2, r3, #16
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	3309      	adds	r3, #9
 800b214:	b2d2      	uxtb	r2, r2
 800b216:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[10] = posllh.lon>>24;
 800b218:	4b3b      	ldr	r3, [pc, #236]	; (800b308 <Encode_Msg_GPS+0x16c>)
 800b21a:	689b      	ldr	r3, [r3, #8]
 800b21c:	161a      	asrs	r2, r3, #24
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	330a      	adds	r3, #10
 800b222:	b2d2      	uxtb	r2, r2
 800b224:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[11] = (unsigned short)(batVolt*100);
 800b226:	4b39      	ldr	r3, [pc, #228]	; (800b30c <Encode_Msg_GPS+0x170>)
 800b228:	edd3 7a00 	vldr	s15, [r3]
 800b22c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800b310 <Encode_Msg_GPS+0x174>
 800b230:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b234:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b238:	ee17 3a90 	vmov	r3, s15
 800b23c:	b29a      	uxth	r2, r3
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	330b      	adds	r3, #11
 800b242:	b2d2      	uxtb	r2, r2
 800b244:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[12] = ((unsigned short)(batVolt*100))>>8;
 800b246:	4b31      	ldr	r3, [pc, #196]	; (800b30c <Encode_Msg_GPS+0x170>)
 800b248:	edd3 7a00 	vldr	s15, [r3]
 800b24c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800b310 <Encode_Msg_GPS+0x174>
 800b250:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b254:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b258:	ee17 3a90 	vmov	r3, s15
 800b25c:	b29b      	uxth	r3, r3
 800b25e:	0a1b      	lsrs	r3, r3, #8
 800b260:	b29a      	uxth	r2, r3
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	330c      	adds	r3, #12
 800b266:	b2d2      	uxtb	r2, r2
 800b268:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[13] = iBus.SwA == 1000 ? 0 : 1;
 800b26a:	4b2a      	ldr	r3, [pc, #168]	; (800b314 <Encode_Msg_GPS+0x178>)
 800b26c:	891b      	ldrh	r3, [r3, #8]
 800b26e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b272:	bf14      	ite	ne
 800b274:	2301      	movne	r3, #1
 800b276:	2300      	moveq	r3, #0
 800b278:	b2da      	uxtb	r2, r3
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	330d      	adds	r3, #13
 800b27e:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[14] = iBus.SwC == 1000 ? 0 : iBus.SwC == 1500 ? 1 : 2;
 800b280:	4b24      	ldr	r3, [pc, #144]	; (800b314 <Encode_Msg_GPS+0x178>)
 800b282:	899b      	ldrh	r3, [r3, #12]
 800b284:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b288:	d009      	beq.n	800b29e <Encode_Msg_GPS+0x102>
 800b28a:	4b22      	ldr	r3, [pc, #136]	; (800b314 <Encode_Msg_GPS+0x178>)
 800b28c:	899b      	ldrh	r3, [r3, #12]
 800b28e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800b292:	4293      	cmp	r3, r2
 800b294:	d101      	bne.n	800b29a <Encode_Msg_GPS+0xfe>
 800b296:	2301      	movs	r3, #1
 800b298:	e002      	b.n	800b2a0 <Encode_Msg_GPS+0x104>
 800b29a:	2302      	movs	r3, #2
 800b29c:	e000      	b.n	800b2a0 <Encode_Msg_GPS+0x104>
 800b29e:	2300      	movs	r3, #0
 800b2a0:	687a      	ldr	r2, [r7, #4]
 800b2a2:	320e      	adds	r2, #14
 800b2a4:	7013      	strb	r3, [r2, #0]

	  telemetry_tx_buf[15] = failsafe_flag;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	330f      	adds	r3, #15
 800b2aa:	4a1b      	ldr	r2, [pc, #108]	; (800b318 <Encode_Msg_GPS+0x17c>)
 800b2ac:	7812      	ldrb	r2, [r2, #0]
 800b2ae:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[16] = 0x00;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	3310      	adds	r3, #16
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[17] = 0x00;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	3311      	adds	r3, #17
 800b2bc:	2200      	movs	r2, #0
 800b2be:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[18] = 0x00;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	3312      	adds	r3, #18
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[19] = 0xff;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	3313      	adds	r3, #19
 800b2cc:	22ff      	movs	r2, #255	; 0xff
 800b2ce:	701a      	strb	r2, [r3, #0]

	  for(int i=0;i<19;i++) telemetry_tx_buf[19] = telemetry_tx_buf[19] - telemetry_tx_buf[i];
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	60fb      	str	r3, [r7, #12]
 800b2d4:	e00e      	b.n	800b2f4 <Encode_Msg_GPS+0x158>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	3313      	adds	r3, #19
 800b2da:	7819      	ldrb	r1, [r3, #0]
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	687a      	ldr	r2, [r7, #4]
 800b2e0:	4413      	add	r3, r2
 800b2e2:	781a      	ldrb	r2, [r3, #0]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	3313      	adds	r3, #19
 800b2e8:	1a8a      	subs	r2, r1, r2
 800b2ea:	b2d2      	uxtb	r2, r2
 800b2ec:	701a      	strb	r2, [r3, #0]
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	60fb      	str	r3, [r7, #12]
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2b12      	cmp	r3, #18
 800b2f8:	dded      	ble.n	800b2d6 <Encode_Msg_GPS+0x13a>
}
 800b2fa:	bf00      	nop
 800b2fc:	bf00      	nop
 800b2fe:	3714      	adds	r7, #20
 800b300:	46bd      	mov	sp, r7
 800b302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b306:	4770      	bx	lr
 800b308:	20000320 	.word	0x20000320
 800b30c:	200005e8 	.word	0x200005e8
 800b310:	42c80000 	.word	0x42c80000
 800b314:	200002cc 	.word	0x200002cc
 800b318:	200005ec 	.word	0x200005ec

0800b31c <Encode_Msg_PID_Gain>:

void Encode_Msg_PID_Gain(unsigned char* telemetry_tx_buf, unsigned char id, float p, float i, float d)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b089      	sub	sp, #36	; 0x24
 800b320:	af00      	add	r7, sp, #0
 800b322:	6178      	str	r0, [r7, #20]
 800b324:	460b      	mov	r3, r1
 800b326:	ed87 0a03 	vstr	s0, [r7, #12]
 800b32a:	edc7 0a02 	vstr	s1, [r7, #8]
 800b32e:	ed87 1a01 	vstr	s2, [r7, #4]
 800b332:	74fb      	strb	r3, [r7, #19]
	  telemetry_tx_buf[0] = 0x46;
 800b334:	697b      	ldr	r3, [r7, #20]
 800b336:	2246      	movs	r2, #70	; 0x46
 800b338:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[1] = 0x43;
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	3301      	adds	r3, #1
 800b33e:	2243      	movs	r2, #67	; 0x43
 800b340:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[2] = id;
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	3302      	adds	r3, #2
 800b346:	7cfa      	ldrb	r2, [r7, #19]
 800b348:	701a      	strb	r2, [r3, #0]

//	  memcpy(&telemetry_tx_buf[3], &p, 4);
//	  memcpy(&telemetry_tx_buf[7], &i, 4);
//	  memcpy(&telemetry_tx_buf[11], &d, 4);

	  *(float*)&telemetry_tx_buf[3] = p;
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	3303      	adds	r3, #3
 800b34e:	68fa      	ldr	r2, [r7, #12]
 800b350:	601a      	str	r2, [r3, #0]
	  *(float*)&telemetry_tx_buf[7] = i;
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	3307      	adds	r3, #7
 800b356:	68ba      	ldr	r2, [r7, #8]
 800b358:	601a      	str	r2, [r3, #0]
	  *(float*)&telemetry_tx_buf[11] = d;
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	330b      	adds	r3, #11
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	601a      	str	r2, [r3, #0]

	  telemetry_tx_buf[15] = 0x00;
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	330f      	adds	r3, #15
 800b366:	2200      	movs	r2, #0
 800b368:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[16] = 0x00;
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	3310      	adds	r3, #16
 800b36e:	2200      	movs	r2, #0
 800b370:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[17] = 0x00;
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	3311      	adds	r3, #17
 800b376:	2200      	movs	r2, #0
 800b378:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[18] = 0x00;
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	3312      	adds	r3, #18
 800b37e:	2200      	movs	r2, #0
 800b380:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[19] = 0xff;
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	3313      	adds	r3, #19
 800b386:	22ff      	movs	r2, #255	; 0xff
 800b388:	701a      	strb	r2, [r3, #0]

	  for(int i=0;i<19;i++) telemetry_tx_buf[19] = telemetry_tx_buf[19] - telemetry_tx_buf[i];
 800b38a:	2300      	movs	r3, #0
 800b38c:	61fb      	str	r3, [r7, #28]
 800b38e:	e00e      	b.n	800b3ae <Encode_Msg_PID_Gain+0x92>
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	3313      	adds	r3, #19
 800b394:	7819      	ldrb	r1, [r3, #0]
 800b396:	69fb      	ldr	r3, [r7, #28]
 800b398:	697a      	ldr	r2, [r7, #20]
 800b39a:	4413      	add	r3, r2
 800b39c:	781a      	ldrb	r2, [r3, #0]
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	3313      	adds	r3, #19
 800b3a2:	1a8a      	subs	r2, r1, r2
 800b3a4:	b2d2      	uxtb	r2, r2
 800b3a6:	701a      	strb	r2, [r3, #0]
 800b3a8:	69fb      	ldr	r3, [r7, #28]
 800b3aa:	3301      	adds	r3, #1
 800b3ac:	61fb      	str	r3, [r7, #28]
 800b3ae:	69fb      	ldr	r3, [r7, #28]
 800b3b0:	2b12      	cmp	r3, #18
 800b3b2:	dded      	ble.n	800b390 <Encode_Msg_PID_Gain+0x74>
}
 800b3b4:	bf00      	nop
 800b3b6:	bf00      	nop
 800b3b8:	3724      	adds	r7, #36	; 0x24
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr

0800b3c2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800b3c2:	b480      	push	{r7}
 800b3c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800b3c6:	bf00      	nop
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr

0800b3d0 <LL_SPI_SetStandard>:
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b083      	sub	sp, #12
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	f023 0210 	bic.w	r2, r3, #16
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	431a      	orrs	r2, r3
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	605a      	str	r2, [r3, #4]
}
 800b3ea:	bf00      	nop
 800b3ec:	370c      	adds	r7, #12
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f4:	4770      	bx	lr
	...

0800b3f8 <LL_AHB1_GRP1_EnableClock>:
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b085      	sub	sp, #20
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800b400:	4b08      	ldr	r3, [pc, #32]	; (800b424 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800b402:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b404:	4907      	ldr	r1, [pc, #28]	; (800b424 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	4313      	orrs	r3, r2
 800b40a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800b40c:	4b05      	ldr	r3, [pc, #20]	; (800b424 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800b40e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	4013      	ands	r3, r2
 800b414:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b416:	68fb      	ldr	r3, [r7, #12]
}
 800b418:	bf00      	nop
 800b41a:	3714      	adds	r7, #20
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr
 800b424:	40023800 	.word	0x40023800

0800b428 <LL_APB1_GRP1_EnableClock>:
{
 800b428:	b480      	push	{r7}
 800b42a:	b085      	sub	sp, #20
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800b430:	4b08      	ldr	r3, [pc, #32]	; (800b454 <LL_APB1_GRP1_EnableClock+0x2c>)
 800b432:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b434:	4907      	ldr	r1, [pc, #28]	; (800b454 <LL_APB1_GRP1_EnableClock+0x2c>)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	4313      	orrs	r3, r2
 800b43a:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800b43c:	4b05      	ldr	r3, [pc, #20]	; (800b454 <LL_APB1_GRP1_EnableClock+0x2c>)
 800b43e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	4013      	ands	r3, r2
 800b444:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b446:	68fb      	ldr	r3, [r7, #12]
}
 800b448:	bf00      	nop
 800b44a:	3714      	adds	r7, #20
 800b44c:	46bd      	mov	sp, r7
 800b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b452:	4770      	bx	lr
 800b454:	40023800 	.word	0x40023800

0800b458 <LL_APB2_GRP1_EnableClock>:
{
 800b458:	b480      	push	{r7}
 800b45a:	b085      	sub	sp, #20
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800b460:	4b08      	ldr	r3, [pc, #32]	; (800b484 <LL_APB2_GRP1_EnableClock+0x2c>)
 800b462:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b464:	4907      	ldr	r1, [pc, #28]	; (800b484 <LL_APB2_GRP1_EnableClock+0x2c>)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	4313      	orrs	r3, r2
 800b46a:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800b46c:	4b05      	ldr	r3, [pc, #20]	; (800b484 <LL_APB2_GRP1_EnableClock+0x2c>)
 800b46e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	4013      	ands	r3, r2
 800b474:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b476:	68fb      	ldr	r3, [r7, #12]
}
 800b478:	bf00      	nop
 800b47a:	3714      	adds	r7, #20
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr
 800b484:	40023800 	.word	0x40023800

0800b488 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b090      	sub	sp, #64	; 0x40
 800b48c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800b48e:	f107 0318 	add.w	r3, r7, #24
 800b492:	2228      	movs	r2, #40	; 0x28
 800b494:	2100      	movs	r1, #0
 800b496:	4618      	mov	r0, r3
 800b498:	f001 f9c0 	bl	800c81c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b49c:	463b      	mov	r3, r7
 800b49e:	2200      	movs	r2, #0
 800b4a0:	601a      	str	r2, [r3, #0]
 800b4a2:	605a      	str	r2, [r3, #4]
 800b4a4:	609a      	str	r2, [r3, #8]
 800b4a6:	60da      	str	r2, [r3, #12]
 800b4a8:	611a      	str	r2, [r3, #16]
 800b4aa:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 800b4ac:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b4b0:	f7ff ffd2 	bl	800b458 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800b4b4:	2001      	movs	r0, #1
 800b4b6:	f7ff ff9f 	bl	800b3f8 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800b4ba:	23e0      	movs	r3, #224	; 0xe0
 800b4bc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800b4be:	2302      	movs	r3, #2
 800b4c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800b4c2:	2303      	movs	r3, #3
 800b4c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800b4ce:	2305      	movs	r3, #5
 800b4d0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b4d2:	463b      	mov	r3, r7
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	4813      	ldr	r0, [pc, #76]	; (800b524 <MX_SPI1_Init+0x9c>)
 800b4d8:	f7f9 fe59 	bl	800518e <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800b4e0:	f44f 7382 	mov.w	r3, #260	; 0x104
 800b4e4:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800b4ea:	2302      	movs	r3, #2
 800b4ec:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800b4f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b4f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 800b4f8:	2310      	movs	r3, #16
 800b4fa:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800b500:	2300      	movs	r3, #0
 800b502:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 800b504:	230a      	movs	r3, #10
 800b506:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 800b508:	f107 0318 	add.w	r3, r7, #24
 800b50c:	4619      	mov	r1, r3
 800b50e:	4806      	ldr	r0, [pc, #24]	; (800b528 <MX_SPI1_Init+0xa0>)
 800b510:	f7fa f80d 	bl	800552e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 800b514:	2100      	movs	r1, #0
 800b516:	4804      	ldr	r0, [pc, #16]	; (800b528 <MX_SPI1_Init+0xa0>)
 800b518:	f7ff ff5a 	bl	800b3d0 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800b51c:	bf00      	nop
 800b51e:	3740      	adds	r7, #64	; 0x40
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}
 800b524:	40020000 	.word	0x40020000
 800b528:	40013000 	.word	0x40013000

0800b52c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b090      	sub	sp, #64	; 0x40
 800b530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800b532:	f107 0318 	add.w	r3, r7, #24
 800b536:	2228      	movs	r2, #40	; 0x28
 800b538:	2100      	movs	r1, #0
 800b53a:	4618      	mov	r0, r3
 800b53c:	f001 f96e 	bl	800c81c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b540:	463b      	mov	r3, r7
 800b542:	2200      	movs	r2, #0
 800b544:	601a      	str	r2, [r3, #0]
 800b546:	605a      	str	r2, [r3, #4]
 800b548:	609a      	str	r2, [r3, #8]
 800b54a:	60da      	str	r2, [r3, #12]
 800b54c:	611a      	str	r2, [r3, #16]
 800b54e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 800b550:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b554:	f7ff ff68 	bl	800b428 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800b558:	2002      	movs	r0, #2
 800b55a:	f7ff ff4d 	bl	800b3f8 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 800b55e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800b562:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800b564:	2302      	movs	r3, #2
 800b566:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800b568:	2303      	movs	r3, #3
 800b56a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800b56c:	2300      	movs	r3, #0
 800b56e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800b570:	2300      	movs	r3, #0
 800b572:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800b574:	2305      	movs	r3, #5
 800b576:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b578:	463b      	mov	r3, r7
 800b57a:	4619      	mov	r1, r3
 800b57c:	4813      	ldr	r0, [pc, #76]	; (800b5cc <MX_SPI2_Init+0xa0>)
 800b57e:	f7f9 fe06 	bl	800518e <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800b582:	2300      	movs	r3, #0
 800b584:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800b586:	f44f 7382 	mov.w	r3, #260	; 0x104
 800b58a:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800b58c:	2300      	movs	r3, #0
 800b58e:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800b590:	2302      	movs	r3, #2
 800b592:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800b594:	2301      	movs	r3, #1
 800b596:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800b598:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b59c:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 800b59e:	2318      	movs	r3, #24
 800b5a0:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 800b5aa:	230a      	movs	r3, #10
 800b5ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 800b5ae:	f107 0318 	add.w	r3, r7, #24
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	4806      	ldr	r0, [pc, #24]	; (800b5d0 <MX_SPI2_Init+0xa4>)
 800b5b6:	f7f9 ffba 	bl	800552e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 800b5ba:	2100      	movs	r1, #0
 800b5bc:	4804      	ldr	r0, [pc, #16]	; (800b5d0 <MX_SPI2_Init+0xa4>)
 800b5be:	f7ff ff07 	bl	800b3d0 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800b5c2:	bf00      	nop
 800b5c4:	3740      	adds	r7, #64	; 0x40
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}
 800b5ca:	bf00      	nop
 800b5cc:	40020400 	.word	0x40020400
 800b5d0:	40003800 	.word	0x40003800

0800b5d4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b090      	sub	sp, #64	; 0x40
 800b5d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800b5da:	f107 0318 	add.w	r3, r7, #24
 800b5de:	2228      	movs	r2, #40	; 0x28
 800b5e0:	2100      	movs	r1, #0
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f001 f91a 	bl	800c81c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b5e8:	463b      	mov	r3, r7
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	601a      	str	r2, [r3, #0]
 800b5ee:	605a      	str	r2, [r3, #4]
 800b5f0:	609a      	str	r2, [r3, #8]
 800b5f2:	60da      	str	r2, [r3, #12]
 800b5f4:	611a      	str	r2, [r3, #16]
 800b5f6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 800b5f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800b5fc:	f7ff ff14 	bl	800b428 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800b600:	2002      	movs	r0, #2
 800b602:	f7ff fef9 	bl	800b3f8 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 800b606:	2338      	movs	r3, #56	; 0x38
 800b608:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800b60a:	2302      	movs	r3, #2
 800b60c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800b60e:	2303      	movs	r3, #3
 800b610:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800b612:	2300      	movs	r3, #0
 800b614:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800b616:	2300      	movs	r3, #0
 800b618:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800b61a:	2306      	movs	r3, #6
 800b61c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b61e:	463b      	mov	r3, r7
 800b620:	4619      	mov	r1, r3
 800b622:	4813      	ldr	r0, [pc, #76]	; (800b670 <MX_SPI3_Init+0x9c>)
 800b624:	f7f9 fdb3 	bl	800518e <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800b628:	2300      	movs	r3, #0
 800b62a:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800b62c:	f44f 7382 	mov.w	r3, #260	; 0x104
 800b630:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800b632:	2300      	movs	r3, #0
 800b634:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800b636:	2302      	movs	r3, #2
 800b638:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800b63a:	2301      	movs	r3, #1
 800b63c:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800b63e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b642:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 800b644:	2308      	movs	r3, #8
 800b646:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800b648:	2300      	movs	r3, #0
 800b64a:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800b64c:	2300      	movs	r3, #0
 800b64e:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 800b650:	230a      	movs	r3, #10
 800b652:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 800b654:	f107 0318 	add.w	r3, r7, #24
 800b658:	4619      	mov	r1, r3
 800b65a:	4806      	ldr	r0, [pc, #24]	; (800b674 <MX_SPI3_Init+0xa0>)
 800b65c:	f7f9 ff67 	bl	800552e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 800b660:	2100      	movs	r1, #0
 800b662:	4804      	ldr	r0, [pc, #16]	; (800b674 <MX_SPI3_Init+0xa0>)
 800b664:	f7ff feb4 	bl	800b3d0 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800b668:	bf00      	nop
 800b66a:	3740      	adds	r7, #64	; 0x40
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}
 800b670:	40020400 	.word	0x40020400
 800b674:	40003c00 	.word	0x40003c00

0800b678 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b678:	b480      	push	{r7}
 800b67a:	b083      	sub	sp, #12
 800b67c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b67e:	2300      	movs	r3, #0
 800b680:	607b      	str	r3, [r7, #4]
 800b682:	4b10      	ldr	r3, [pc, #64]	; (800b6c4 <HAL_MspInit+0x4c>)
 800b684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b686:	4a0f      	ldr	r2, [pc, #60]	; (800b6c4 <HAL_MspInit+0x4c>)
 800b688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b68c:	6453      	str	r3, [r2, #68]	; 0x44
 800b68e:	4b0d      	ldr	r3, [pc, #52]	; (800b6c4 <HAL_MspInit+0x4c>)
 800b690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b696:	607b      	str	r3, [r7, #4]
 800b698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b69a:	2300      	movs	r3, #0
 800b69c:	603b      	str	r3, [r7, #0]
 800b69e:	4b09      	ldr	r3, [pc, #36]	; (800b6c4 <HAL_MspInit+0x4c>)
 800b6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6a2:	4a08      	ldr	r2, [pc, #32]	; (800b6c4 <HAL_MspInit+0x4c>)
 800b6a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b6a8:	6413      	str	r3, [r2, #64]	; 0x40
 800b6aa:	4b06      	ldr	r3, [pc, #24]	; (800b6c4 <HAL_MspInit+0x4c>)
 800b6ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6b2:	603b      	str	r3, [r7, #0]
 800b6b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b6b6:	bf00      	nop
 800b6b8:	370c      	adds	r7, #12
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c0:	4770      	bx	lr
 800b6c2:	bf00      	nop
 800b6c4:	40023800 	.word	0x40023800

0800b6c8 <LL_TIM_ClearFlag_UPDATE>:
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b083      	sub	sp, #12
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f06f 0201 	mvn.w	r2, #1
 800b6d6:	611a      	str	r2, [r3, #16]
}
 800b6d8:	bf00      	nop
 800b6da:	370c      	adds	r7, #12
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e2:	4770      	bx	lr

0800b6e4 <LL_TIM_IsActiveFlag_UPDATE>:
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b083      	sub	sp, #12
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	691b      	ldr	r3, [r3, #16]
 800b6f0:	f003 0301 	and.w	r3, r3, #1
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	d101      	bne.n	800b6fc <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	e000      	b.n	800b6fe <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800b6fc:	2300      	movs	r3, #0
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	370c      	adds	r7, #12
 800b702:	46bd      	mov	sp, r7
 800b704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b708:	4770      	bx	lr

0800b70a <LL_USART_IsActiveFlag_RXNE>:
{
 800b70a:	b480      	push	{r7}
 800b70c:	b083      	sub	sp, #12
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f003 0320 	and.w	r3, r3, #32
 800b71a:	2b20      	cmp	r3, #32
 800b71c:	bf0c      	ite	eq
 800b71e:	2301      	moveq	r3, #1
 800b720:	2300      	movne	r3, #0
 800b722:	b2db      	uxtb	r3, r3
}
 800b724:	4618      	mov	r0, r3
 800b726:	370c      	adds	r7, #12
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr

0800b730 <LL_USART_ClearFlag_RXNE>:
{
 800b730:	b480      	push	{r7}
 800b732:	b083      	sub	sp, #12
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f06f 0220 	mvn.w	r2, #32
 800b73e:	601a      	str	r2, [r3, #0]
}
 800b740:	bf00      	nop
 800b742:	370c      	adds	r7, #12
 800b744:	46bd      	mov	sp, r7
 800b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74a:	4770      	bx	lr

0800b74c <LL_USART_ReceiveData8>:
{
 800b74c:	b480      	push	{r7}
 800b74e:	b083      	sub	sp, #12
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	685b      	ldr	r3, [r3, #4]
 800b758:	b2db      	uxtb	r3, r3
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	370c      	adds	r7, #12
 800b75e:	46bd      	mov	sp, r7
 800b760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b764:	4770      	bx	lr

0800b766 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b766:	b480      	push	{r7}
 800b768:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b76a:	bf00      	nop
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr

0800b774 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b774:	b480      	push	{r7}
 800b776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b778:	e7fe      	b.n	800b778 <HardFault_Handler+0x4>

0800b77a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b77a:	b480      	push	{r7}
 800b77c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b77e:	e7fe      	b.n	800b77e <MemManage_Handler+0x4>

0800b780 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b780:	b480      	push	{r7}
 800b782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b784:	e7fe      	b.n	800b784 <BusFault_Handler+0x4>

0800b786 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b786:	b480      	push	{r7}
 800b788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b78a:	e7fe      	b.n	800b78a <UsageFault_Handler+0x4>

0800b78c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b78c:	b480      	push	{r7}
 800b78e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b790:	bf00      	nop
 800b792:	46bd      	mov	sp, r7
 800b794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b798:	4770      	bx	lr

0800b79a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b79a:	b480      	push	{r7}
 800b79c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b79e:	bf00      	nop
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr

0800b7a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b7ac:	bf00      	nop
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b4:	4770      	bx	lr

0800b7b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b7b6:	b580      	push	{r7, lr}
 800b7b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b7ba:	f7f5 fbc9 	bl	8000f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b7be:	bf00      	nop
 800b7c0:	bd80      	pop	{r7, pc}
	...

0800b7c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800b7c8:	4802      	ldr	r0, [pc, #8]	; (800b7d4 <USART1_IRQHandler+0x10>)
 800b7ca:	f7f8 fc73 	bl	80040b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800b7ce:	bf00      	nop
 800b7d0:	bd80      	pop	{r7, pc}
 800b7d2:	bf00      	nop
 800b7d4:	20000654 	.word	0x20000654

0800b7d8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	static unsigned char cnt = 0;

	if(LL_USART_IsActiveFlag_RXNE(UART4))
 800b7dc:	4833      	ldr	r0, [pc, #204]	; (800b8ac <UART4_IRQHandler+0xd4>)
 800b7de:	f7ff ff94 	bl	800b70a <LL_USART_IsActiveFlag_RXNE>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d05b      	beq.n	800b8a0 <UART4_IRQHandler+0xc8>
	{
		LL_USART_ClearFlag_RXNE(UART4);
 800b7e8:	4830      	ldr	r0, [pc, #192]	; (800b8ac <UART4_IRQHandler+0xd4>)
 800b7ea:	f7ff ffa1 	bl	800b730 <LL_USART_ClearFlag_RXNE>
		uart4_rx_data = LL_USART_ReceiveData8(UART4);
 800b7ee:	482f      	ldr	r0, [pc, #188]	; (800b8ac <UART4_IRQHandler+0xd4>)
 800b7f0:	f7ff ffac 	bl	800b74c <LL_USART_ReceiveData8>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	4b2d      	ldr	r3, [pc, #180]	; (800b8b0 <UART4_IRQHandler+0xd8>)
 800b7fa:	701a      	strb	r2, [r3, #0]
		uart4_rx_flag = 1;
 800b7fc:	4b2d      	ldr	r3, [pc, #180]	; (800b8b4 <UART4_IRQHandler+0xdc>)
 800b7fe:	2201      	movs	r2, #1
 800b800:	701a      	strb	r2, [r3, #0]

		//LL_USART_TransmitData8(USART6, uart4_rx_data);

		switch(cnt)
 800b802:	4b2d      	ldr	r3, [pc, #180]	; (800b8b8 <UART4_IRQHandler+0xe0>)
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	2b23      	cmp	r3, #35	; 0x23
 800b808:	d02e      	beq.n	800b868 <UART4_IRQHandler+0x90>
 800b80a:	2b23      	cmp	r3, #35	; 0x23
 800b80c:	dc3a      	bgt.n	800b884 <UART4_IRQHandler+0xac>
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d002      	beq.n	800b818 <UART4_IRQHandler+0x40>
 800b812:	2b01      	cmp	r3, #1
 800b814:	d012      	beq.n	800b83c <UART4_IRQHandler+0x64>
 800b816:	e035      	b.n	800b884 <UART4_IRQHandler+0xac>
		{
		case 0:
			if(uart4_rx_data == 0xb5)
 800b818:	4b25      	ldr	r3, [pc, #148]	; (800b8b0 <UART4_IRQHandler+0xd8>)
 800b81a:	781b      	ldrb	r3, [r3, #0]
 800b81c:	2bb5      	cmp	r3, #181	; 0xb5
 800b81e:	d141      	bne.n	800b8a4 <UART4_IRQHandler+0xcc>
			{
				m8n_rx_buf[cnt] = uart4_rx_data;
 800b820:	4b25      	ldr	r3, [pc, #148]	; (800b8b8 <UART4_IRQHandler+0xe0>)
 800b822:	781b      	ldrb	r3, [r3, #0]
 800b824:	461a      	mov	r2, r3
 800b826:	4b22      	ldr	r3, [pc, #136]	; (800b8b0 <UART4_IRQHandler+0xd8>)
 800b828:	7819      	ldrb	r1, [r3, #0]
 800b82a:	4b24      	ldr	r3, [pc, #144]	; (800b8bc <UART4_IRQHandler+0xe4>)
 800b82c:	5499      	strb	r1, [r3, r2]
				cnt++;
 800b82e:	4b22      	ldr	r3, [pc, #136]	; (800b8b8 <UART4_IRQHandler+0xe0>)
 800b830:	781b      	ldrb	r3, [r3, #0]
 800b832:	3301      	adds	r3, #1
 800b834:	b2da      	uxtb	r2, r3
 800b836:	4b20      	ldr	r3, [pc, #128]	; (800b8b8 <UART4_IRQHandler+0xe0>)
 800b838:	701a      	strb	r2, [r3, #0]
			}
			break;
 800b83a:	e033      	b.n	800b8a4 <UART4_IRQHandler+0xcc>
		case 1:
			if(uart4_rx_data == 0x62)
 800b83c:	4b1c      	ldr	r3, [pc, #112]	; (800b8b0 <UART4_IRQHandler+0xd8>)
 800b83e:	781b      	ldrb	r3, [r3, #0]
 800b840:	2b62      	cmp	r3, #98	; 0x62
 800b842:	d10d      	bne.n	800b860 <UART4_IRQHandler+0x88>
			{
				m8n_rx_buf[cnt] = uart4_rx_data;
 800b844:	4b1c      	ldr	r3, [pc, #112]	; (800b8b8 <UART4_IRQHandler+0xe0>)
 800b846:	781b      	ldrb	r3, [r3, #0]
 800b848:	461a      	mov	r2, r3
 800b84a:	4b19      	ldr	r3, [pc, #100]	; (800b8b0 <UART4_IRQHandler+0xd8>)
 800b84c:	7819      	ldrb	r1, [r3, #0]
 800b84e:	4b1b      	ldr	r3, [pc, #108]	; (800b8bc <UART4_IRQHandler+0xe4>)
 800b850:	5499      	strb	r1, [r3, r2]
				cnt++;
 800b852:	4b19      	ldr	r3, [pc, #100]	; (800b8b8 <UART4_IRQHandler+0xe0>)
 800b854:	781b      	ldrb	r3, [r3, #0]
 800b856:	3301      	adds	r3, #1
 800b858:	b2da      	uxtb	r2, r3
 800b85a:	4b17      	ldr	r3, [pc, #92]	; (800b8b8 <UART4_IRQHandler+0xe0>)
 800b85c:	701a      	strb	r2, [r3, #0]
			}
			else
				cnt = 0;
			break;
 800b85e:	e022      	b.n	800b8a6 <UART4_IRQHandler+0xce>
				cnt = 0;
 800b860:	4b15      	ldr	r3, [pc, #84]	; (800b8b8 <UART4_IRQHandler+0xe0>)
 800b862:	2200      	movs	r2, #0
 800b864:	701a      	strb	r2, [r3, #0]
			break;
 800b866:	e01e      	b.n	800b8a6 <UART4_IRQHandler+0xce>
		case 35:
			m8n_rx_buf[cnt] = uart4_rx_data;
 800b868:	4b13      	ldr	r3, [pc, #76]	; (800b8b8 <UART4_IRQHandler+0xe0>)
 800b86a:	781b      	ldrb	r3, [r3, #0]
 800b86c:	461a      	mov	r2, r3
 800b86e:	4b10      	ldr	r3, [pc, #64]	; (800b8b0 <UART4_IRQHandler+0xd8>)
 800b870:	7819      	ldrb	r1, [r3, #0]
 800b872:	4b12      	ldr	r3, [pc, #72]	; (800b8bc <UART4_IRQHandler+0xe4>)
 800b874:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 800b876:	4b10      	ldr	r3, [pc, #64]	; (800b8b8 <UART4_IRQHandler+0xe0>)
 800b878:	2200      	movs	r2, #0
 800b87a:	701a      	strb	r2, [r3, #0]
			m8n_rx_cplt_flag = 1;
 800b87c:	4b10      	ldr	r3, [pc, #64]	; (800b8c0 <UART4_IRQHandler+0xe8>)
 800b87e:	2201      	movs	r2, #1
 800b880:	701a      	strb	r2, [r3, #0]
			break;
 800b882:	e010      	b.n	800b8a6 <UART4_IRQHandler+0xce>
		default:
			m8n_rx_buf[cnt] = uart4_rx_data;
 800b884:	4b0c      	ldr	r3, [pc, #48]	; (800b8b8 <UART4_IRQHandler+0xe0>)
 800b886:	781b      	ldrb	r3, [r3, #0]
 800b888:	461a      	mov	r2, r3
 800b88a:	4b09      	ldr	r3, [pc, #36]	; (800b8b0 <UART4_IRQHandler+0xd8>)
 800b88c:	7819      	ldrb	r1, [r3, #0]
 800b88e:	4b0b      	ldr	r3, [pc, #44]	; (800b8bc <UART4_IRQHandler+0xe4>)
 800b890:	5499      	strb	r1, [r3, r2]
			cnt++;
 800b892:	4b09      	ldr	r3, [pc, #36]	; (800b8b8 <UART4_IRQHandler+0xe0>)
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	3301      	adds	r3, #1
 800b898:	b2da      	uxtb	r2, r3
 800b89a:	4b07      	ldr	r3, [pc, #28]	; (800b8b8 <UART4_IRQHandler+0xe0>)
 800b89c:	701a      	strb	r2, [r3, #0]
			break;
 800b89e:	e002      	b.n	800b8a6 <UART4_IRQHandler+0xce>
		}
	}
 800b8a0:	bf00      	nop
 800b8a2:	e000      	b.n	800b8a6 <UART4_IRQHandler+0xce>
			break;
 800b8a4:	bf00      	nop
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800b8a6:	bf00      	nop
 800b8a8:	bd80      	pop	{r7, pc}
 800b8aa:	bf00      	nop
 800b8ac:	40004c00 	.word	0x40004c00
 800b8b0:	200005f2 	.word	0x200005f2
 800b8b4:	200005f1 	.word	0x200005f1
 800b8b8:	20000646 	.word	0x20000646
 800b8bc:	200005f8 	.word	0x200005f8
 800b8c0:	2000061c 	.word	0x2000061c

0800b8c4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	static unsigned char cnt = 0;
	if(LL_USART_IsActiveFlag_RXNE(UART5))
 800b8c8:	4833      	ldr	r0, [pc, #204]	; (800b998 <UART5_IRQHandler+0xd4>)
 800b8ca:	f7ff ff1e 	bl	800b70a <LL_USART_IsActiveFlag_RXNE>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d05b      	beq.n	800b98c <UART5_IRQHandler+0xc8>
	{
		LL_USART_ClearFlag_RXNE(UART5);
 800b8d4:	4830      	ldr	r0, [pc, #192]	; (800b998 <UART5_IRQHandler+0xd4>)
 800b8d6:	f7ff ff2b 	bl	800b730 <LL_USART_ClearFlag_RXNE>
		uart5_rx_data = LL_USART_ReceiveData8(UART5);
 800b8da:	482f      	ldr	r0, [pc, #188]	; (800b998 <UART5_IRQHandler+0xd4>)
 800b8dc:	f7ff ff36 	bl	800b74c <LL_USART_ReceiveData8>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	4b2d      	ldr	r3, [pc, #180]	; (800b99c <UART5_IRQHandler+0xd8>)
 800b8e6:	701a      	strb	r2, [r3, #0]
		uart5_rx_flag = 1;
 800b8e8:	4b2d      	ldr	r3, [pc, #180]	; (800b9a0 <UART5_IRQHandler+0xdc>)
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	701a      	strb	r2, [r3, #0]

		switch(cnt)
 800b8ee:	4b2d      	ldr	r3, [pc, #180]	; (800b9a4 <UART5_IRQHandler+0xe0>)
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	2b1f      	cmp	r3, #31
 800b8f4:	d02e      	beq.n	800b954 <UART5_IRQHandler+0x90>
 800b8f6:	2b1f      	cmp	r3, #31
 800b8f8:	dc3a      	bgt.n	800b970 <UART5_IRQHandler+0xac>
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d002      	beq.n	800b904 <UART5_IRQHandler+0x40>
 800b8fe:	2b01      	cmp	r3, #1
 800b900:	d012      	beq.n	800b928 <UART5_IRQHandler+0x64>
 800b902:	e035      	b.n	800b970 <UART5_IRQHandler+0xac>
		{
		case 0:
			if(uart5_rx_data == 0x20)
 800b904:	4b25      	ldr	r3, [pc, #148]	; (800b99c <UART5_IRQHandler+0xd8>)
 800b906:	781b      	ldrb	r3, [r3, #0]
 800b908:	2b20      	cmp	r3, #32
 800b90a:	d141      	bne.n	800b990 <UART5_IRQHandler+0xcc>
			{
				ibus_rx_buf[cnt] = uart5_rx_data;
 800b90c:	4b25      	ldr	r3, [pc, #148]	; (800b9a4 <UART5_IRQHandler+0xe0>)
 800b90e:	781b      	ldrb	r3, [r3, #0]
 800b910:	461a      	mov	r2, r3
 800b912:	4b22      	ldr	r3, [pc, #136]	; (800b99c <UART5_IRQHandler+0xd8>)
 800b914:	7819      	ldrb	r1, [r3, #0]
 800b916:	4b24      	ldr	r3, [pc, #144]	; (800b9a8 <UART5_IRQHandler+0xe4>)
 800b918:	5499      	strb	r1, [r3, r2]
				cnt++;
 800b91a:	4b22      	ldr	r3, [pc, #136]	; (800b9a4 <UART5_IRQHandler+0xe0>)
 800b91c:	781b      	ldrb	r3, [r3, #0]
 800b91e:	3301      	adds	r3, #1
 800b920:	b2da      	uxtb	r2, r3
 800b922:	4b20      	ldr	r3, [pc, #128]	; (800b9a4 <UART5_IRQHandler+0xe0>)
 800b924:	701a      	strb	r2, [r3, #0]
			}
			break;
 800b926:	e033      	b.n	800b990 <UART5_IRQHandler+0xcc>
		case 1:
			if(uart5_rx_data == 0x40)
 800b928:	4b1c      	ldr	r3, [pc, #112]	; (800b99c <UART5_IRQHandler+0xd8>)
 800b92a:	781b      	ldrb	r3, [r3, #0]
 800b92c:	2b40      	cmp	r3, #64	; 0x40
 800b92e:	d10d      	bne.n	800b94c <UART5_IRQHandler+0x88>
			{
				ibus_rx_buf[cnt] = uart5_rx_data;
 800b930:	4b1c      	ldr	r3, [pc, #112]	; (800b9a4 <UART5_IRQHandler+0xe0>)
 800b932:	781b      	ldrb	r3, [r3, #0]
 800b934:	461a      	mov	r2, r3
 800b936:	4b19      	ldr	r3, [pc, #100]	; (800b99c <UART5_IRQHandler+0xd8>)
 800b938:	7819      	ldrb	r1, [r3, #0]
 800b93a:	4b1b      	ldr	r3, [pc, #108]	; (800b9a8 <UART5_IRQHandler+0xe4>)
 800b93c:	5499      	strb	r1, [r3, r2]
				cnt++;
 800b93e:	4b19      	ldr	r3, [pc, #100]	; (800b9a4 <UART5_IRQHandler+0xe0>)
 800b940:	781b      	ldrb	r3, [r3, #0]
 800b942:	3301      	adds	r3, #1
 800b944:	b2da      	uxtb	r2, r3
 800b946:	4b17      	ldr	r3, [pc, #92]	; (800b9a4 <UART5_IRQHandler+0xe0>)
 800b948:	701a      	strb	r2, [r3, #0]
			}
			else
				cnt = 0;
			break;
 800b94a:	e022      	b.n	800b992 <UART5_IRQHandler+0xce>
				cnt = 0;
 800b94c:	4b15      	ldr	r3, [pc, #84]	; (800b9a4 <UART5_IRQHandler+0xe0>)
 800b94e:	2200      	movs	r2, #0
 800b950:	701a      	strb	r2, [r3, #0]
			break;
 800b952:	e01e      	b.n	800b992 <UART5_IRQHandler+0xce>
		case 31:
			ibus_rx_buf[cnt] = uart5_rx_data;
 800b954:	4b13      	ldr	r3, [pc, #76]	; (800b9a4 <UART5_IRQHandler+0xe0>)
 800b956:	781b      	ldrb	r3, [r3, #0]
 800b958:	461a      	mov	r2, r3
 800b95a:	4b10      	ldr	r3, [pc, #64]	; (800b99c <UART5_IRQHandler+0xd8>)
 800b95c:	7819      	ldrb	r1, [r3, #0]
 800b95e:	4b12      	ldr	r3, [pc, #72]	; (800b9a8 <UART5_IRQHandler+0xe4>)
 800b960:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 800b962:	4b10      	ldr	r3, [pc, #64]	; (800b9a4 <UART5_IRQHandler+0xe0>)
 800b964:	2200      	movs	r2, #0
 800b966:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 800b968:	4b10      	ldr	r3, [pc, #64]	; (800b9ac <UART5_IRQHandler+0xe8>)
 800b96a:	2201      	movs	r2, #1
 800b96c:	701a      	strb	r2, [r3, #0]
			break;
 800b96e:	e010      	b.n	800b992 <UART5_IRQHandler+0xce>
		default:
			ibus_rx_buf[cnt] = uart5_rx_data;
 800b970:	4b0c      	ldr	r3, [pc, #48]	; (800b9a4 <UART5_IRQHandler+0xe0>)
 800b972:	781b      	ldrb	r3, [r3, #0]
 800b974:	461a      	mov	r2, r3
 800b976:	4b09      	ldr	r3, [pc, #36]	; (800b99c <UART5_IRQHandler+0xd8>)
 800b978:	7819      	ldrb	r1, [r3, #0]
 800b97a:	4b0b      	ldr	r3, [pc, #44]	; (800b9a8 <UART5_IRQHandler+0xe4>)
 800b97c:	5499      	strb	r1, [r3, r2]
			cnt++;
 800b97e:	4b09      	ldr	r3, [pc, #36]	; (800b9a4 <UART5_IRQHandler+0xe0>)
 800b980:	781b      	ldrb	r3, [r3, #0]
 800b982:	3301      	adds	r3, #1
 800b984:	b2da      	uxtb	r2, r3
 800b986:	4b07      	ldr	r3, [pc, #28]	; (800b9a4 <UART5_IRQHandler+0xe0>)
 800b988:	701a      	strb	r2, [r3, #0]
			break;
 800b98a:	e002      	b.n	800b992 <UART5_IRQHandler+0xce>
		}

//		while(!LL_USART_IsActiveFlag_TXE(USART6));
//		LL_USART_TransmitData8(USART6, uart5_rx_data);
	}
 800b98c:	bf00      	nop
 800b98e:	e000      	b.n	800b992 <UART5_IRQHandler+0xce>
			break;
 800b990:	bf00      	nop
  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800b992:	bf00      	nop
 800b994:	bd80      	pop	{r7, pc}
 800b996:	bf00      	nop
 800b998:	40005000 	.word	0x40005000
 800b99c:	200005f4 	.word	0x200005f4
 800b9a0:	200005f3 	.word	0x200005f3
 800b9a4:	20000647 	.word	0x20000647
 800b9a8:	20000620 	.word	0x20000620
 800b9ac:	20000640 	.word	0x20000640

0800b9b0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	static unsigned char tim7_1ms_count = 0;
	static unsigned char tim7_20ms_count = 0;
	static unsigned char tim7_100ms_count = 0;
	static unsigned short tim7_1000ms_count = 0;
	if(LL_TIM_IsActiveFlag_UPDATE(TIM7))
 800b9b4:	4825      	ldr	r0, [pc, #148]	; (800ba4c <TIM7_IRQHandler+0x9c>)
 800b9b6:	f7ff fe95 	bl	800b6e4 <LL_TIM_IsActiveFlag_UPDATE>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d043      	beq.n	800ba48 <TIM7_IRQHandler+0x98>
	{
		LL_TIM_ClearFlag_UPDATE(TIM7);
 800b9c0:	4822      	ldr	r0, [pc, #136]	; (800ba4c <TIM7_IRQHandler+0x9c>)
 800b9c2:	f7ff fe81 	bl	800b6c8 <LL_TIM_ClearFlag_UPDATE>

		tim7_1ms_count++;
 800b9c6:	4b22      	ldr	r3, [pc, #136]	; (800ba50 <TIM7_IRQHandler+0xa0>)
 800b9c8:	781b      	ldrb	r3, [r3, #0]
 800b9ca:	3301      	adds	r3, #1
 800b9cc:	b2da      	uxtb	r2, r3
 800b9ce:	4b20      	ldr	r3, [pc, #128]	; (800ba50 <TIM7_IRQHandler+0xa0>)
 800b9d0:	701a      	strb	r2, [r3, #0]
		if(tim7_1ms_count == 1)
 800b9d2:	4b1f      	ldr	r3, [pc, #124]	; (800ba50 <TIM7_IRQHandler+0xa0>)
 800b9d4:	781b      	ldrb	r3, [r3, #0]
 800b9d6:	2b01      	cmp	r3, #1
 800b9d8:	d105      	bne.n	800b9e6 <TIM7_IRQHandler+0x36>
		{
			tim7_1ms_count = 0;
 800b9da:	4b1d      	ldr	r3, [pc, #116]	; (800ba50 <TIM7_IRQHandler+0xa0>)
 800b9dc:	2200      	movs	r2, #0
 800b9de:	701a      	strb	r2, [r3, #0]
			tim7_1ms_flag = 1;
 800b9e0:	4b1c      	ldr	r3, [pc, #112]	; (800ba54 <TIM7_IRQHandler+0xa4>)
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	701a      	strb	r2, [r3, #0]
		}

		tim7_20ms_count++;
 800b9e6:	4b1c      	ldr	r3, [pc, #112]	; (800ba58 <TIM7_IRQHandler+0xa8>)
 800b9e8:	781b      	ldrb	r3, [r3, #0]
 800b9ea:	3301      	adds	r3, #1
 800b9ec:	b2da      	uxtb	r2, r3
 800b9ee:	4b1a      	ldr	r3, [pc, #104]	; (800ba58 <TIM7_IRQHandler+0xa8>)
 800b9f0:	701a      	strb	r2, [r3, #0]
		if(tim7_20ms_count == 20)
 800b9f2:	4b19      	ldr	r3, [pc, #100]	; (800ba58 <TIM7_IRQHandler+0xa8>)
 800b9f4:	781b      	ldrb	r3, [r3, #0]
 800b9f6:	2b14      	cmp	r3, #20
 800b9f8:	d105      	bne.n	800ba06 <TIM7_IRQHandler+0x56>
		{
			tim7_20ms_count = 0;
 800b9fa:	4b17      	ldr	r3, [pc, #92]	; (800ba58 <TIM7_IRQHandler+0xa8>)
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	701a      	strb	r2, [r3, #0]
			tim7_20ms_flag = 1;
 800ba00:	4b16      	ldr	r3, [pc, #88]	; (800ba5c <TIM7_IRQHandler+0xac>)
 800ba02:	2201      	movs	r2, #1
 800ba04:	701a      	strb	r2, [r3, #0]
		}

		tim7_100ms_count++;
 800ba06:	4b16      	ldr	r3, [pc, #88]	; (800ba60 <TIM7_IRQHandler+0xb0>)
 800ba08:	781b      	ldrb	r3, [r3, #0]
 800ba0a:	3301      	adds	r3, #1
 800ba0c:	b2da      	uxtb	r2, r3
 800ba0e:	4b14      	ldr	r3, [pc, #80]	; (800ba60 <TIM7_IRQHandler+0xb0>)
 800ba10:	701a      	strb	r2, [r3, #0]
		if(tim7_100ms_count == 100)
 800ba12:	4b13      	ldr	r3, [pc, #76]	; (800ba60 <TIM7_IRQHandler+0xb0>)
 800ba14:	781b      	ldrb	r3, [r3, #0]
 800ba16:	2b64      	cmp	r3, #100	; 0x64
 800ba18:	d105      	bne.n	800ba26 <TIM7_IRQHandler+0x76>
		{
			tim7_100ms_count = 0;
 800ba1a:	4b11      	ldr	r3, [pc, #68]	; (800ba60 <TIM7_IRQHandler+0xb0>)
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	701a      	strb	r2, [r3, #0]
			tim7_100ms_flag = 1;
 800ba20:	4b10      	ldr	r3, [pc, #64]	; (800ba64 <TIM7_IRQHandler+0xb4>)
 800ba22:	2201      	movs	r2, #1
 800ba24:	701a      	strb	r2, [r3, #0]
		}

		tim7_1000ms_count++;
 800ba26:	4b10      	ldr	r3, [pc, #64]	; (800ba68 <TIM7_IRQHandler+0xb8>)
 800ba28:	881b      	ldrh	r3, [r3, #0]
 800ba2a:	3301      	adds	r3, #1
 800ba2c:	b29a      	uxth	r2, r3
 800ba2e:	4b0e      	ldr	r3, [pc, #56]	; (800ba68 <TIM7_IRQHandler+0xb8>)
 800ba30:	801a      	strh	r2, [r3, #0]
		if(tim7_1000ms_count == 1000)
 800ba32:	4b0d      	ldr	r3, [pc, #52]	; (800ba68 <TIM7_IRQHandler+0xb8>)
 800ba34:	881b      	ldrh	r3, [r3, #0]
 800ba36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ba3a:	d105      	bne.n	800ba48 <TIM7_IRQHandler+0x98>
		{
			tim7_1000ms_count = 0;
 800ba3c:	4b0a      	ldr	r3, [pc, #40]	; (800ba68 <TIM7_IRQHandler+0xb8>)
 800ba3e:	2200      	movs	r2, #0
 800ba40:	801a      	strh	r2, [r3, #0]
			tim7_1000ms_flag = 1;
 800ba42:	4b0a      	ldr	r3, [pc, #40]	; (800ba6c <TIM7_IRQHandler+0xbc>)
 800ba44:	2201      	movs	r2, #1
 800ba46:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM7_IRQn 0 */
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800ba48:	bf00      	nop
 800ba4a:	bd80      	pop	{r7, pc}
 800ba4c:	40001400 	.word	0x40001400
 800ba50:	20000648 	.word	0x20000648
 800ba54:	20000642 	.word	0x20000642
 800ba58:	20000649 	.word	0x20000649
 800ba5c:	20000643 	.word	0x20000643
 800ba60:	2000064a 	.word	0x2000064a
 800ba64:	20000644 	.word	0x20000644
 800ba68:	2000064c 	.word	0x2000064c
 800ba6c:	20000645 	.word	0x20000645

0800ba70 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800ba74:	4802      	ldr	r0, [pc, #8]	; (800ba80 <DMA2_Stream0_IRQHandler+0x10>)
 800ba76:	f7f6 f96b 	bl	8001d50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800ba7a:	bf00      	nop
 800ba7c:	bd80      	pop	{r7, pc}
 800ba7e:	bf00      	nop
 800ba80:	200004f4 	.word	0x200004f4

0800ba84 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART6))
 800ba88:	480a      	ldr	r0, [pc, #40]	; (800bab4 <USART6_IRQHandler+0x30>)
 800ba8a:	f7ff fe3e 	bl	800b70a <LL_USART_IsActiveFlag_RXNE>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d00c      	beq.n	800baae <USART6_IRQHandler+0x2a>
	{
		LL_USART_ClearFlag_RXNE(USART6);
 800ba94:	4807      	ldr	r0, [pc, #28]	; (800bab4 <USART6_IRQHandler+0x30>)
 800ba96:	f7ff fe4b 	bl	800b730 <LL_USART_ClearFlag_RXNE>
		uart6_rx_data = LL_USART_ReceiveData8(USART6);
 800ba9a:	4806      	ldr	r0, [pc, #24]	; (800bab4 <USART6_IRQHandler+0x30>)
 800ba9c:	f7ff fe56 	bl	800b74c <LL_USART_ReceiveData8>
 800baa0:	4603      	mov	r3, r0
 800baa2:	461a      	mov	r2, r3
 800baa4:	4b04      	ldr	r3, [pc, #16]	; (800bab8 <USART6_IRQHandler+0x34>)
 800baa6:	701a      	strb	r2, [r3, #0]
		uart6_rx_flag = 1;
 800baa8:	4b04      	ldr	r3, [pc, #16]	; (800babc <USART6_IRQHandler+0x38>)
 800baaa:	2201      	movs	r2, #1
 800baac:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800baae:	bf00      	nop
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	bf00      	nop
 800bab4:	40011400 	.word	0x40011400
 800bab8:	200005f0 	.word	0x200005f0
 800babc:	200005ef 	.word	0x200005ef

0800bac0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800bac0:	b480      	push	{r7}
 800bac2:	af00      	add	r7, sp, #0
	return 1;
 800bac4:	2301      	movs	r3, #1
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	46bd      	mov	sp, r7
 800baca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bace:	4770      	bx	lr

0800bad0 <_kill>:

int _kill(int pid, int sig)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b082      	sub	sp, #8
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800bada:	f000 fe75 	bl	800c7c8 <__errno>
 800bade:	4603      	mov	r3, r0
 800bae0:	2216      	movs	r2, #22
 800bae2:	601a      	str	r2, [r3, #0]
	return -1;
 800bae4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3708      	adds	r7, #8
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <_exit>:

void _exit (int status)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b082      	sub	sp, #8
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800baf8:	f04f 31ff 	mov.w	r1, #4294967295
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f7ff ffe7 	bl	800bad0 <_kill>
	while (1) {}		/* Make sure we hang here */
 800bb02:	e7fe      	b.n	800bb02 <_exit+0x12>

0800bb04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b086      	sub	sp, #24
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	60f8      	str	r0, [r7, #12]
 800bb0c:	60b9      	str	r1, [r7, #8]
 800bb0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bb10:	2300      	movs	r3, #0
 800bb12:	617b      	str	r3, [r7, #20]
 800bb14:	e00a      	b.n	800bb2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800bb16:	f3af 8000 	nop.w
 800bb1a:	4601      	mov	r1, r0
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	1c5a      	adds	r2, r3, #1
 800bb20:	60ba      	str	r2, [r7, #8]
 800bb22:	b2ca      	uxtb	r2, r1
 800bb24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	3301      	adds	r3, #1
 800bb2a:	617b      	str	r3, [r7, #20]
 800bb2c:	697a      	ldr	r2, [r7, #20]
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	429a      	cmp	r2, r3
 800bb32:	dbf0      	blt.n	800bb16 <_read+0x12>
	}

return len;
 800bb34:	687b      	ldr	r3, [r7, #4]
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3718      	adds	r7, #24
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}

0800bb3e <_close>:
	}
	return len;
}

int _close(int file)
{
 800bb3e:	b480      	push	{r7}
 800bb40:	b083      	sub	sp, #12
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	6078      	str	r0, [r7, #4]
	return -1;
 800bb46:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	370c      	adds	r7, #12
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb54:	4770      	bx	lr

0800bb56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800bb56:	b480      	push	{r7}
 800bb58:	b083      	sub	sp, #12
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	6078      	str	r0, [r7, #4]
 800bb5e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800bb66:	605a      	str	r2, [r3, #4]
	return 0;
 800bb68:	2300      	movs	r3, #0
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	370c      	adds	r7, #12
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb74:	4770      	bx	lr

0800bb76 <_isatty>:

int _isatty(int file)
{
 800bb76:	b480      	push	{r7}
 800bb78:	b083      	sub	sp, #12
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
	return 1;
 800bb7e:	2301      	movs	r3, #1
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	370c      	adds	r7, #12
 800bb84:	46bd      	mov	sp, r7
 800bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8a:	4770      	bx	lr

0800bb8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b085      	sub	sp, #20
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	60f8      	str	r0, [r7, #12]
 800bb94:	60b9      	str	r1, [r7, #8]
 800bb96:	607a      	str	r2, [r7, #4]
	return 0;
 800bb98:	2300      	movs	r3, #0
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3714      	adds	r7, #20
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba4:	4770      	bx	lr
	...

0800bba8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b084      	sub	sp, #16
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800bbb0:	4b11      	ldr	r3, [pc, #68]	; (800bbf8 <_sbrk+0x50>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d102      	bne.n	800bbbe <_sbrk+0x16>
		heap_end = &end;
 800bbb8:	4b0f      	ldr	r3, [pc, #60]	; (800bbf8 <_sbrk+0x50>)
 800bbba:	4a10      	ldr	r2, [pc, #64]	; (800bbfc <_sbrk+0x54>)
 800bbbc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800bbbe:	4b0e      	ldr	r3, [pc, #56]	; (800bbf8 <_sbrk+0x50>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800bbc4:	4b0c      	ldr	r3, [pc, #48]	; (800bbf8 <_sbrk+0x50>)
 800bbc6:	681a      	ldr	r2, [r3, #0]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	4413      	add	r3, r2
 800bbcc:	466a      	mov	r2, sp
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d907      	bls.n	800bbe2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800bbd2:	f000 fdf9 	bl	800c7c8 <__errno>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	220c      	movs	r2, #12
 800bbda:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800bbdc:	f04f 33ff 	mov.w	r3, #4294967295
 800bbe0:	e006      	b.n	800bbf0 <_sbrk+0x48>
	}

	heap_end += incr;
 800bbe2:	4b05      	ldr	r3, [pc, #20]	; (800bbf8 <_sbrk+0x50>)
 800bbe4:	681a      	ldr	r2, [r3, #0]
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	4413      	add	r3, r2
 800bbea:	4a03      	ldr	r2, [pc, #12]	; (800bbf8 <_sbrk+0x50>)
 800bbec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800bbee:	68fb      	ldr	r3, [r7, #12]
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3710      	adds	r7, #16
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}
 800bbf8:	20000650 	.word	0x20000650
 800bbfc:	200006a8 	.word	0x200006a8

0800bc00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800bc00:	b480      	push	{r7}
 800bc02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800bc04:	4b16      	ldr	r3, [pc, #88]	; (800bc60 <SystemInit+0x60>)
 800bc06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc0a:	4a15      	ldr	r2, [pc, #84]	; (800bc60 <SystemInit+0x60>)
 800bc0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bc10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800bc14:	4b13      	ldr	r3, [pc, #76]	; (800bc64 <SystemInit+0x64>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	4a12      	ldr	r2, [pc, #72]	; (800bc64 <SystemInit+0x64>)
 800bc1a:	f043 0301 	orr.w	r3, r3, #1
 800bc1e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800bc20:	4b10      	ldr	r3, [pc, #64]	; (800bc64 <SystemInit+0x64>)
 800bc22:	2200      	movs	r2, #0
 800bc24:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800bc26:	4b0f      	ldr	r3, [pc, #60]	; (800bc64 <SystemInit+0x64>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	4a0e      	ldr	r2, [pc, #56]	; (800bc64 <SystemInit+0x64>)
 800bc2c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800bc30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc34:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800bc36:	4b0b      	ldr	r3, [pc, #44]	; (800bc64 <SystemInit+0x64>)
 800bc38:	4a0b      	ldr	r2, [pc, #44]	; (800bc68 <SystemInit+0x68>)
 800bc3a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800bc3c:	4b09      	ldr	r3, [pc, #36]	; (800bc64 <SystemInit+0x64>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	4a08      	ldr	r2, [pc, #32]	; (800bc64 <SystemInit+0x64>)
 800bc42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bc46:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800bc48:	4b06      	ldr	r3, [pc, #24]	; (800bc64 <SystemInit+0x64>)
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800bc4e:	4b04      	ldr	r3, [pc, #16]	; (800bc60 <SystemInit+0x60>)
 800bc50:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800bc54:	609a      	str	r2, [r3, #8]
#endif
}
 800bc56:	bf00      	nop
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5e:	4770      	bx	lr
 800bc60:	e000ed00 	.word	0xe000ed00
 800bc64:	40023800 	.word	0x40023800
 800bc68:	24003010 	.word	0x24003010

0800bc6c <__NVIC_GetPriorityGrouping>:
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bc70:	4b04      	ldr	r3, [pc, #16]	; (800bc84 <__NVIC_GetPriorityGrouping+0x18>)
 800bc72:	68db      	ldr	r3, [r3, #12]
 800bc74:	0a1b      	lsrs	r3, r3, #8
 800bc76:	f003 0307 	and.w	r3, r3, #7
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr
 800bc84:	e000ed00 	.word	0xe000ed00

0800bc88 <__NVIC_EnableIRQ>:
{
 800bc88:	b480      	push	{r7}
 800bc8a:	b083      	sub	sp, #12
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	4603      	mov	r3, r0
 800bc90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bc92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	db0b      	blt.n	800bcb2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bc9a:	79fb      	ldrb	r3, [r7, #7]
 800bc9c:	f003 021f 	and.w	r2, r3, #31
 800bca0:	4907      	ldr	r1, [pc, #28]	; (800bcc0 <__NVIC_EnableIRQ+0x38>)
 800bca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bca6:	095b      	lsrs	r3, r3, #5
 800bca8:	2001      	movs	r0, #1
 800bcaa:	fa00 f202 	lsl.w	r2, r0, r2
 800bcae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800bcb2:	bf00      	nop
 800bcb4:	370c      	adds	r7, #12
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbc:	4770      	bx	lr
 800bcbe:	bf00      	nop
 800bcc0:	e000e100 	.word	0xe000e100

0800bcc4 <__NVIC_SetPriority>:
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b083      	sub	sp, #12
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	4603      	mov	r3, r0
 800bccc:	6039      	str	r1, [r7, #0]
 800bcce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bcd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	db0a      	blt.n	800bcee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	b2da      	uxtb	r2, r3
 800bcdc:	490c      	ldr	r1, [pc, #48]	; (800bd10 <__NVIC_SetPriority+0x4c>)
 800bcde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bce2:	0112      	lsls	r2, r2, #4
 800bce4:	b2d2      	uxtb	r2, r2
 800bce6:	440b      	add	r3, r1
 800bce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800bcec:	e00a      	b.n	800bd04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	b2da      	uxtb	r2, r3
 800bcf2:	4908      	ldr	r1, [pc, #32]	; (800bd14 <__NVIC_SetPriority+0x50>)
 800bcf4:	79fb      	ldrb	r3, [r7, #7]
 800bcf6:	f003 030f 	and.w	r3, r3, #15
 800bcfa:	3b04      	subs	r3, #4
 800bcfc:	0112      	lsls	r2, r2, #4
 800bcfe:	b2d2      	uxtb	r2, r2
 800bd00:	440b      	add	r3, r1
 800bd02:	761a      	strb	r2, [r3, #24]
}
 800bd04:	bf00      	nop
 800bd06:	370c      	adds	r7, #12
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr
 800bd10:	e000e100 	.word	0xe000e100
 800bd14:	e000ed00 	.word	0xe000ed00

0800bd18 <NVIC_EncodePriority>:
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b089      	sub	sp, #36	; 0x24
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	60b9      	str	r1, [r7, #8]
 800bd22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	f003 0307 	and.w	r3, r3, #7
 800bd2a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bd2c:	69fb      	ldr	r3, [r7, #28]
 800bd2e:	f1c3 0307 	rsb	r3, r3, #7
 800bd32:	2b04      	cmp	r3, #4
 800bd34:	bf28      	it	cs
 800bd36:	2304      	movcs	r3, #4
 800bd38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800bd3a:	69fb      	ldr	r3, [r7, #28]
 800bd3c:	3304      	adds	r3, #4
 800bd3e:	2b06      	cmp	r3, #6
 800bd40:	d902      	bls.n	800bd48 <NVIC_EncodePriority+0x30>
 800bd42:	69fb      	ldr	r3, [r7, #28]
 800bd44:	3b03      	subs	r3, #3
 800bd46:	e000      	b.n	800bd4a <NVIC_EncodePriority+0x32>
 800bd48:	2300      	movs	r3, #0
 800bd4a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bd4c:	f04f 32ff 	mov.w	r2, #4294967295
 800bd50:	69bb      	ldr	r3, [r7, #24]
 800bd52:	fa02 f303 	lsl.w	r3, r2, r3
 800bd56:	43da      	mvns	r2, r3
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	401a      	ands	r2, r3
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800bd60:	f04f 31ff 	mov.w	r1, #4294967295
 800bd64:	697b      	ldr	r3, [r7, #20]
 800bd66:	fa01 f303 	lsl.w	r3, r1, r3
 800bd6a:	43d9      	mvns	r1, r3
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bd70:	4313      	orrs	r3, r2
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3724      	adds	r7, #36	; 0x24
 800bd76:	46bd      	mov	sp, r7
 800bd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7c:	4770      	bx	lr

0800bd7e <LL_TIM_EnableARRPreload>:
{
 800bd7e:	b480      	push	{r7}
 800bd80:	b083      	sub	sp, #12
 800bd82:	af00      	add	r7, sp, #0
 800bd84:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	601a      	str	r2, [r3, #0]
}
 800bd92:	bf00      	nop
 800bd94:	370c      	adds	r7, #12
 800bd96:	46bd      	mov	sp, r7
 800bd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9c:	4770      	bx	lr
	...

0800bda0 <LL_TIM_OC_EnableFast>:
{
 800bda0:	b480      	push	{r7}
 800bda2:	b085      	sub	sp, #20
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	d01c      	beq.n	800bdea <LL_TIM_OC_EnableFast+0x4a>
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	2b04      	cmp	r3, #4
 800bdb4:	d017      	beq.n	800bde6 <LL_TIM_OC_EnableFast+0x46>
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	2b10      	cmp	r3, #16
 800bdba:	d012      	beq.n	800bde2 <LL_TIM_OC_EnableFast+0x42>
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	2b40      	cmp	r3, #64	; 0x40
 800bdc0:	d00d      	beq.n	800bdde <LL_TIM_OC_EnableFast+0x3e>
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdc8:	d007      	beq.n	800bdda <LL_TIM_OC_EnableFast+0x3a>
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bdd0:	d101      	bne.n	800bdd6 <LL_TIM_OC_EnableFast+0x36>
 800bdd2:	2305      	movs	r3, #5
 800bdd4:	e00a      	b.n	800bdec <LL_TIM_OC_EnableFast+0x4c>
 800bdd6:	2306      	movs	r3, #6
 800bdd8:	e008      	b.n	800bdec <LL_TIM_OC_EnableFast+0x4c>
 800bdda:	2304      	movs	r3, #4
 800bddc:	e006      	b.n	800bdec <LL_TIM_OC_EnableFast+0x4c>
 800bdde:	2303      	movs	r3, #3
 800bde0:	e004      	b.n	800bdec <LL_TIM_OC_EnableFast+0x4c>
 800bde2:	2302      	movs	r3, #2
 800bde4:	e002      	b.n	800bdec <LL_TIM_OC_EnableFast+0x4c>
 800bde6:	2301      	movs	r3, #1
 800bde8:	e000      	b.n	800bdec <LL_TIM_OC_EnableFast+0x4c>
 800bdea:	2300      	movs	r3, #0
 800bdec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	3318      	adds	r3, #24
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	7bfb      	ldrb	r3, [r7, #15]
 800bdf6:	4a0a      	ldr	r2, [pc, #40]	; (800be20 <LL_TIM_OC_EnableFast+0x80>)
 800bdf8:	5cd3      	ldrb	r3, [r2, r3]
 800bdfa:	440b      	add	r3, r1
 800bdfc:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	681a      	ldr	r2, [r3, #0]
 800be02:	7bfb      	ldrb	r3, [r7, #15]
 800be04:	4907      	ldr	r1, [pc, #28]	; (800be24 <LL_TIM_OC_EnableFast+0x84>)
 800be06:	5ccb      	ldrb	r3, [r1, r3]
 800be08:	4619      	mov	r1, r3
 800be0a:	2304      	movs	r3, #4
 800be0c:	408b      	lsls	r3, r1
 800be0e:	431a      	orrs	r2, r3
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	601a      	str	r2, [r3, #0]
}
 800be14:	bf00      	nop
 800be16:	3714      	adds	r7, #20
 800be18:	46bd      	mov	sp, r7
 800be1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1e:	4770      	bx	lr
 800be20:	0801046c 	.word	0x0801046c
 800be24:	08010474 	.word	0x08010474

0800be28 <LL_TIM_OC_EnablePreload>:
{
 800be28:	b480      	push	{r7}
 800be2a:	b085      	sub	sp, #20
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	2b01      	cmp	r3, #1
 800be36:	d01c      	beq.n	800be72 <LL_TIM_OC_EnablePreload+0x4a>
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	2b04      	cmp	r3, #4
 800be3c:	d017      	beq.n	800be6e <LL_TIM_OC_EnablePreload+0x46>
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	2b10      	cmp	r3, #16
 800be42:	d012      	beq.n	800be6a <LL_TIM_OC_EnablePreload+0x42>
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	2b40      	cmp	r3, #64	; 0x40
 800be48:	d00d      	beq.n	800be66 <LL_TIM_OC_EnablePreload+0x3e>
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be50:	d007      	beq.n	800be62 <LL_TIM_OC_EnablePreload+0x3a>
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be58:	d101      	bne.n	800be5e <LL_TIM_OC_EnablePreload+0x36>
 800be5a:	2305      	movs	r3, #5
 800be5c:	e00a      	b.n	800be74 <LL_TIM_OC_EnablePreload+0x4c>
 800be5e:	2306      	movs	r3, #6
 800be60:	e008      	b.n	800be74 <LL_TIM_OC_EnablePreload+0x4c>
 800be62:	2304      	movs	r3, #4
 800be64:	e006      	b.n	800be74 <LL_TIM_OC_EnablePreload+0x4c>
 800be66:	2303      	movs	r3, #3
 800be68:	e004      	b.n	800be74 <LL_TIM_OC_EnablePreload+0x4c>
 800be6a:	2302      	movs	r3, #2
 800be6c:	e002      	b.n	800be74 <LL_TIM_OC_EnablePreload+0x4c>
 800be6e:	2301      	movs	r3, #1
 800be70:	e000      	b.n	800be74 <LL_TIM_OC_EnablePreload+0x4c>
 800be72:	2300      	movs	r3, #0
 800be74:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	3318      	adds	r3, #24
 800be7a:	4619      	mov	r1, r3
 800be7c:	7bfb      	ldrb	r3, [r7, #15]
 800be7e:	4a0a      	ldr	r2, [pc, #40]	; (800bea8 <LL_TIM_OC_EnablePreload+0x80>)
 800be80:	5cd3      	ldrb	r3, [r2, r3]
 800be82:	440b      	add	r3, r1
 800be84:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800be86:	68bb      	ldr	r3, [r7, #8]
 800be88:	681a      	ldr	r2, [r3, #0]
 800be8a:	7bfb      	ldrb	r3, [r7, #15]
 800be8c:	4907      	ldr	r1, [pc, #28]	; (800beac <LL_TIM_OC_EnablePreload+0x84>)
 800be8e:	5ccb      	ldrb	r3, [r1, r3]
 800be90:	4619      	mov	r1, r3
 800be92:	2308      	movs	r3, #8
 800be94:	408b      	lsls	r3, r1
 800be96:	431a      	orrs	r2, r3
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	601a      	str	r2, [r3, #0]
}
 800be9c:	bf00      	nop
 800be9e:	3714      	adds	r7, #20
 800bea0:	46bd      	mov	sp, r7
 800bea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea6:	4770      	bx	lr
 800bea8:	0801046c 	.word	0x0801046c
 800beac:	08010474 	.word	0x08010474

0800beb0 <LL_TIM_SetClockSource>:
{
 800beb0:	b480      	push	{r7}
 800beb2:	b083      	sub	sp, #12
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	689b      	ldr	r3, [r3, #8]
 800bebe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bec2:	f023 0307 	bic.w	r3, r3, #7
 800bec6:	683a      	ldr	r2, [r7, #0]
 800bec8:	431a      	orrs	r2, r3
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	609a      	str	r2, [r3, #8]
}
 800bece:	bf00      	nop
 800bed0:	370c      	adds	r7, #12
 800bed2:	46bd      	mov	sp, r7
 800bed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed8:	4770      	bx	lr

0800beda <LL_TIM_SetTriggerOutput>:
{
 800beda:	b480      	push	{r7}
 800bedc:	b083      	sub	sp, #12
 800bede:	af00      	add	r7, sp, #0
 800bee0:	6078      	str	r0, [r7, #4]
 800bee2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	685b      	ldr	r3, [r3, #4]
 800bee8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	431a      	orrs	r2, r3
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	605a      	str	r2, [r3, #4]
}
 800bef4:	bf00      	nop
 800bef6:	370c      	adds	r7, #12
 800bef8:	46bd      	mov	sp, r7
 800befa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befe:	4770      	bx	lr

0800bf00 <LL_TIM_DisableMasterSlaveMode>:
{
 800bf00:	b480      	push	{r7}
 800bf02:	b083      	sub	sp, #12
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	689b      	ldr	r3, [r3, #8]
 800bf0c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	609a      	str	r2, [r3, #8]
}
 800bf14:	bf00      	nop
 800bf16:	370c      	adds	r7, #12
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1e:	4770      	bx	lr

0800bf20 <LL_AHB1_GRP1_EnableClock>:
{
 800bf20:	b480      	push	{r7}
 800bf22:	b085      	sub	sp, #20
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800bf28:	4b08      	ldr	r3, [pc, #32]	; (800bf4c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800bf2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf2c:	4907      	ldr	r1, [pc, #28]	; (800bf4c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	4313      	orrs	r3, r2
 800bf32:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800bf34:	4b05      	ldr	r3, [pc, #20]	; (800bf4c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800bf36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	4013      	ands	r3, r2
 800bf3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
}
 800bf40:	bf00      	nop
 800bf42:	3714      	adds	r7, #20
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr
 800bf4c:	40023800 	.word	0x40023800

0800bf50 <LL_APB1_GRP1_EnableClock>:
{
 800bf50:	b480      	push	{r7}
 800bf52:	b085      	sub	sp, #20
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800bf58:	4b08      	ldr	r3, [pc, #32]	; (800bf7c <LL_APB1_GRP1_EnableClock+0x2c>)
 800bf5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bf5c:	4907      	ldr	r1, [pc, #28]	; (800bf7c <LL_APB1_GRP1_EnableClock+0x2c>)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	4313      	orrs	r3, r2
 800bf62:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800bf64:	4b05      	ldr	r3, [pc, #20]	; (800bf7c <LL_APB1_GRP1_EnableClock+0x2c>)
 800bf66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	4013      	ands	r3, r2
 800bf6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
}
 800bf70:	bf00      	nop
 800bf72:	3714      	adds	r7, #20
 800bf74:	46bd      	mov	sp, r7
 800bf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7a:	4770      	bx	lr
 800bf7c:	40023800 	.word	0x40023800

0800bf80 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b094      	sub	sp, #80	; 0x50
 800bf84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800bf86:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	601a      	str	r2, [r3, #0]
 800bf8e:	605a      	str	r2, [r3, #4]
 800bf90:	609a      	str	r2, [r3, #8]
 800bf92:	60da      	str	r2, [r3, #12]
 800bf94:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800bf96:	f107 031c 	add.w	r3, r7, #28
 800bf9a:	2220      	movs	r2, #32
 800bf9c:	2100      	movs	r1, #0
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f000 fc3c 	bl	800c81c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bfa4:	1d3b      	adds	r3, r7, #4
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	601a      	str	r2, [r3, #0]
 800bfaa:	605a      	str	r2, [r3, #4]
 800bfac:	609a      	str	r2, [r3, #8]
 800bfae:	60da      	str	r2, [r3, #12]
 800bfb0:	611a      	str	r2, [r3, #16]
 800bfb2:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 800bfb4:	2002      	movs	r0, #2
 800bfb6:	f7ff ffcb 	bl	800bf50 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 800bfba:	f240 33e7 	movw	r3, #999	; 0x3e7
 800bfbe:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 20;
 800bfc4:	2314      	movs	r3, #20
 800bfc6:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800bfcc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bfd0:	4619      	mov	r1, r3
 800bfd2:	4822      	ldr	r0, [pc, #136]	; (800c05c <MX_TIM3_Init+0xdc>)
 800bfd4:	f7f9 fb70 	bl	80056b8 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 800bfd8:	4820      	ldr	r0, [pc, #128]	; (800c05c <MX_TIM3_Init+0xdc>)
 800bfda:	f7ff fed0 	bl	800bd7e <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 800bfde:	2100      	movs	r1, #0
 800bfe0:	481e      	ldr	r0, [pc, #120]	; (800c05c <MX_TIM3_Init+0xdc>)
 800bfe2:	f7ff ff65 	bl	800beb0 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 800bfe6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bfea:	481c      	ldr	r0, [pc, #112]	; (800c05c <MX_TIM3_Init+0xdc>)
 800bfec:	f7ff ff1c 	bl	800be28 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800bff0:	2360      	movs	r3, #96	; 0x60
 800bff2:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800bff4:	2300      	movs	r3, #0
 800bff6:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800bff8:	2300      	movs	r3, #0
 800bffa:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 800bffc:	230a      	movs	r3, #10
 800bffe:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800c000:	2300      	movs	r3, #0
 800c002:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 800c004:	f107 031c 	add.w	r3, r7, #28
 800c008:	461a      	mov	r2, r3
 800c00a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c00e:	4813      	ldr	r0, [pc, #76]	; (800c05c <MX_TIM3_Init+0xdc>)
 800c010:	f7f9 fbec 	bl	80057ec <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 800c014:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c018:	4810      	ldr	r0, [pc, #64]	; (800c05c <MX_TIM3_Init+0xdc>)
 800c01a:	f7ff fec1 	bl	800bda0 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 800c01e:	2100      	movs	r1, #0
 800c020:	480e      	ldr	r0, [pc, #56]	; (800c05c <MX_TIM3_Init+0xdc>)
 800c022:	f7ff ff5a 	bl	800beda <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 800c026:	480d      	ldr	r0, [pc, #52]	; (800c05c <MX_TIM3_Init+0xdc>)
 800c028:	f7ff ff6a 	bl	800bf00 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800c02c:	2002      	movs	r0, #2
 800c02e:	f7ff ff77 	bl	800bf20 <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 800c032:	2302      	movs	r3, #2
 800c034:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800c036:	2302      	movs	r3, #2
 800c038:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800c03a:	2300      	movs	r3, #0
 800c03c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800c03e:	2300      	movs	r3, #0
 800c040:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800c042:	2300      	movs	r3, #0
 800c044:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800c046:	2302      	movs	r3, #2
 800c048:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c04a:	1d3b      	adds	r3, r7, #4
 800c04c:	4619      	mov	r1, r3
 800c04e:	4804      	ldr	r0, [pc, #16]	; (800c060 <MX_TIM3_Init+0xe0>)
 800c050:	f7f9 f89d 	bl	800518e <LL_GPIO_Init>

}
 800c054:	bf00      	nop
 800c056:	3750      	adds	r7, #80	; 0x50
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}
 800c05c:	40000400 	.word	0x40000400
 800c060:	40020400 	.word	0x40020400

0800c064 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b094      	sub	sp, #80	; 0x50
 800c068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800c06a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c06e:	2200      	movs	r2, #0
 800c070:	601a      	str	r2, [r3, #0]
 800c072:	605a      	str	r2, [r3, #4]
 800c074:	609a      	str	r2, [r3, #8]
 800c076:	60da      	str	r2, [r3, #12]
 800c078:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800c07a:	f107 031c 	add.w	r3, r7, #28
 800c07e:	2220      	movs	r2, #32
 800c080:	2100      	movs	r1, #0
 800c082:	4618      	mov	r0, r3
 800c084:	f000 fbca 	bl	800c81c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c088:	1d3b      	adds	r3, r7, #4
 800c08a:	2200      	movs	r2, #0
 800c08c:	601a      	str	r2, [r3, #0]
 800c08e:	605a      	str	r2, [r3, #4]
 800c090:	609a      	str	r2, [r3, #8]
 800c092:	60da      	str	r2, [r3, #12]
 800c094:	611a      	str	r2, [r3, #16]
 800c096:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 800c098:	2008      	movs	r0, #8
 800c09a:	f7ff ff59 	bl	800bf50 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 41999;
 800c0a6:	f24a 430f 	movw	r3, #41999	; 0xa40f
 800c0aa:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 800c0b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	483a      	ldr	r0, [pc, #232]	; (800c1a0 <MX_TIM5_Init+0x13c>)
 800c0b8:	f7f9 fafe 	bl	80056b8 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM5);
 800c0bc:	4838      	ldr	r0, [pc, #224]	; (800c1a0 <MX_TIM5_Init+0x13c>)
 800c0be:	f7ff fe5e 	bl	800bd7e <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 800c0c2:	2100      	movs	r1, #0
 800c0c4:	4836      	ldr	r0, [pc, #216]	; (800c1a0 <MX_TIM5_Init+0x13c>)
 800c0c6:	f7ff fef3 	bl	800beb0 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH1);
 800c0ca:	2101      	movs	r1, #1
 800c0cc:	4834      	ldr	r0, [pc, #208]	; (800c1a0 <MX_TIM5_Init+0x13c>)
 800c0ce:	f7ff feab 	bl	800be28 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800c0d2:	2360      	movs	r3, #96	; 0x60
 800c0d4:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800c0e6:	f107 031c 	add.w	r3, r7, #28
 800c0ea:	461a      	mov	r2, r3
 800c0ec:	2101      	movs	r1, #1
 800c0ee:	482c      	ldr	r0, [pc, #176]	; (800c1a0 <MX_TIM5_Init+0x13c>)
 800c0f0:	f7f9 fb7c 	bl	80057ec <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH1);
 800c0f4:	2101      	movs	r1, #1
 800c0f6:	482a      	ldr	r0, [pc, #168]	; (800c1a0 <MX_TIM5_Init+0x13c>)
 800c0f8:	f7ff fe52 	bl	800bda0 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH2);
 800c0fc:	2110      	movs	r1, #16
 800c0fe:	4828      	ldr	r0, [pc, #160]	; (800c1a0 <MX_TIM5_Init+0x13c>)
 800c100:	f7ff fe92 	bl	800be28 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 800c104:	f107 031c 	add.w	r3, r7, #28
 800c108:	461a      	mov	r2, r3
 800c10a:	2110      	movs	r1, #16
 800c10c:	4824      	ldr	r0, [pc, #144]	; (800c1a0 <MX_TIM5_Init+0x13c>)
 800c10e:	f7f9 fb6d 	bl	80057ec <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH2);
 800c112:	2110      	movs	r1, #16
 800c114:	4822      	ldr	r0, [pc, #136]	; (800c1a0 <MX_TIM5_Init+0x13c>)
 800c116:	f7ff fe43 	bl	800bda0 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH3);
 800c11a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c11e:	4820      	ldr	r0, [pc, #128]	; (800c1a0 <MX_TIM5_Init+0x13c>)
 800c120:	f7ff fe82 	bl	800be28 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 800c124:	f107 031c 	add.w	r3, r7, #28
 800c128:	461a      	mov	r2, r3
 800c12a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c12e:	481c      	ldr	r0, [pc, #112]	; (800c1a0 <MX_TIM5_Init+0x13c>)
 800c130:	f7f9 fb5c 	bl	80057ec <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH3);
 800c134:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c138:	4819      	ldr	r0, [pc, #100]	; (800c1a0 <MX_TIM5_Init+0x13c>)
 800c13a:	f7ff fe31 	bl	800bda0 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH4);
 800c13e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c142:	4817      	ldr	r0, [pc, #92]	; (800c1a0 <MX_TIM5_Init+0x13c>)
 800c144:	f7ff fe70 	bl	800be28 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 800c148:	f107 031c 	add.w	r3, r7, #28
 800c14c:	461a      	mov	r2, r3
 800c14e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c152:	4813      	ldr	r0, [pc, #76]	; (800c1a0 <MX_TIM5_Init+0x13c>)
 800c154:	f7f9 fb4a 	bl	80057ec <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH4);
 800c158:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c15c:	4810      	ldr	r0, [pc, #64]	; (800c1a0 <MX_TIM5_Init+0x13c>)
 800c15e:	f7ff fe1f 	bl	800bda0 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 800c162:	2100      	movs	r1, #0
 800c164:	480e      	ldr	r0, [pc, #56]	; (800c1a0 <MX_TIM5_Init+0x13c>)
 800c166:	f7ff feb8 	bl	800beda <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 800c16a:	480d      	ldr	r0, [pc, #52]	; (800c1a0 <MX_TIM5_Init+0x13c>)
 800c16c:	f7ff fec8 	bl	800bf00 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800c170:	2001      	movs	r0, #1
 800c172:	f7ff fed5 	bl	800bf20 <LL_AHB1_GRP1_EnableClock>
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 800c176:	230f      	movs	r3, #15
 800c178:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800c17a:	2302      	movs	r3, #2
 800c17c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800c17e:	2300      	movs	r3, #0
 800c180:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800c182:	2300      	movs	r3, #0
 800c184:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800c186:	2300      	movs	r3, #0
 800c188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800c18a:	2302      	movs	r3, #2
 800c18c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c18e:	1d3b      	adds	r3, r7, #4
 800c190:	4619      	mov	r1, r3
 800c192:	4804      	ldr	r0, [pc, #16]	; (800c1a4 <MX_TIM5_Init+0x140>)
 800c194:	f7f8 fffb 	bl	800518e <LL_GPIO_Init>

}
 800c198:	bf00      	nop
 800c19a:	3750      	adds	r7, #80	; 0x50
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}
 800c1a0:	40000c00 	.word	0x40000c00
 800c1a4:	40020000 	.word	0x40020000

0800c1a8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b086      	sub	sp, #24
 800c1ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800c1ae:	1d3b      	adds	r3, r7, #4
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	601a      	str	r2, [r3, #0]
 800c1b4:	605a      	str	r2, [r3, #4]
 800c1b6:	609a      	str	r2, [r3, #8]
 800c1b8:	60da      	str	r2, [r3, #12]
 800c1ba:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 800c1bc:	2020      	movs	r0, #32
 800c1be:	f7ff fec7 	bl	800bf50 <LL_APB1_GRP1_EnableClock>

  /* TIM7 interrupt Init */
  NVIC_SetPriority(TIM7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800c1c2:	f7ff fd53 	bl	800bc6c <__NVIC_GetPriorityGrouping>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	2100      	movs	r1, #0
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f7ff fda3 	bl	800bd18 <NVIC_EncodePriority>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	2037      	movs	r0, #55	; 0x37
 800c1d8:	f7ff fd74 	bl	800bcc4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM7_IRQn);
 800c1dc:	2037      	movs	r0, #55	; 0x37
 800c1de:	f7ff fd53 	bl	800bc88 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  TIM_InitStruct.Prescaler = 41999;
 800c1e2:	f24a 430f 	movw	r3, #41999	; 0xa40f
 800c1e6:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 1;
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 800c1f0:	1d3b      	adds	r3, r7, #4
 800c1f2:	4619      	mov	r1, r3
 800c1f4:	4808      	ldr	r0, [pc, #32]	; (800c218 <MX_TIM7_Init+0x70>)
 800c1f6:	f7f9 fa5f 	bl	80056b8 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM7);
 800c1fa:	4807      	ldr	r0, [pc, #28]	; (800c218 <MX_TIM7_Init+0x70>)
 800c1fc:	f7ff fdbf 	bl	800bd7e <LL_TIM_EnableARRPreload>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 800c200:	2100      	movs	r1, #0
 800c202:	4805      	ldr	r0, [pc, #20]	; (800c218 <MX_TIM7_Init+0x70>)
 800c204:	f7ff fe69 	bl	800beda <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 800c208:	4803      	ldr	r0, [pc, #12]	; (800c218 <MX_TIM7_Init+0x70>)
 800c20a:	f7ff fe79 	bl	800bf00 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800c20e:	bf00      	nop
 800c210:	3718      	adds	r7, #24
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
 800c216:	bf00      	nop
 800c218:	40001400 	.word	0x40001400

0800c21c <__NVIC_GetPriorityGrouping>:
{
 800c21c:	b480      	push	{r7}
 800c21e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c220:	4b04      	ldr	r3, [pc, #16]	; (800c234 <__NVIC_GetPriorityGrouping+0x18>)
 800c222:	68db      	ldr	r3, [r3, #12]
 800c224:	0a1b      	lsrs	r3, r3, #8
 800c226:	f003 0307 	and.w	r3, r3, #7
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	46bd      	mov	sp, r7
 800c22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c232:	4770      	bx	lr
 800c234:	e000ed00 	.word	0xe000ed00

0800c238 <__NVIC_EnableIRQ>:
{
 800c238:	b480      	push	{r7}
 800c23a:	b083      	sub	sp, #12
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	4603      	mov	r3, r0
 800c240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c246:	2b00      	cmp	r3, #0
 800c248:	db0b      	blt.n	800c262 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c24a:	79fb      	ldrb	r3, [r7, #7]
 800c24c:	f003 021f 	and.w	r2, r3, #31
 800c250:	4907      	ldr	r1, [pc, #28]	; (800c270 <__NVIC_EnableIRQ+0x38>)
 800c252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c256:	095b      	lsrs	r3, r3, #5
 800c258:	2001      	movs	r0, #1
 800c25a:	fa00 f202 	lsl.w	r2, r0, r2
 800c25e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c262:	bf00      	nop
 800c264:	370c      	adds	r7, #12
 800c266:	46bd      	mov	sp, r7
 800c268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26c:	4770      	bx	lr
 800c26e:	bf00      	nop
 800c270:	e000e100 	.word	0xe000e100

0800c274 <__NVIC_SetPriority>:
{
 800c274:	b480      	push	{r7}
 800c276:	b083      	sub	sp, #12
 800c278:	af00      	add	r7, sp, #0
 800c27a:	4603      	mov	r3, r0
 800c27c:	6039      	str	r1, [r7, #0]
 800c27e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c284:	2b00      	cmp	r3, #0
 800c286:	db0a      	blt.n	800c29e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	b2da      	uxtb	r2, r3
 800c28c:	490c      	ldr	r1, [pc, #48]	; (800c2c0 <__NVIC_SetPriority+0x4c>)
 800c28e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c292:	0112      	lsls	r2, r2, #4
 800c294:	b2d2      	uxtb	r2, r2
 800c296:	440b      	add	r3, r1
 800c298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c29c:	e00a      	b.n	800c2b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	b2da      	uxtb	r2, r3
 800c2a2:	4908      	ldr	r1, [pc, #32]	; (800c2c4 <__NVIC_SetPriority+0x50>)
 800c2a4:	79fb      	ldrb	r3, [r7, #7]
 800c2a6:	f003 030f 	and.w	r3, r3, #15
 800c2aa:	3b04      	subs	r3, #4
 800c2ac:	0112      	lsls	r2, r2, #4
 800c2ae:	b2d2      	uxtb	r2, r2
 800c2b0:	440b      	add	r3, r1
 800c2b2:	761a      	strb	r2, [r3, #24]
}
 800c2b4:	bf00      	nop
 800c2b6:	370c      	adds	r7, #12
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2be:	4770      	bx	lr
 800c2c0:	e000e100 	.word	0xe000e100
 800c2c4:	e000ed00 	.word	0xe000ed00

0800c2c8 <NVIC_EncodePriority>:
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	b089      	sub	sp, #36	; 0x24
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	60f8      	str	r0, [r7, #12]
 800c2d0:	60b9      	str	r1, [r7, #8]
 800c2d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	f003 0307 	and.w	r3, r3, #7
 800c2da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c2dc:	69fb      	ldr	r3, [r7, #28]
 800c2de:	f1c3 0307 	rsb	r3, r3, #7
 800c2e2:	2b04      	cmp	r3, #4
 800c2e4:	bf28      	it	cs
 800c2e6:	2304      	movcs	r3, #4
 800c2e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c2ea:	69fb      	ldr	r3, [r7, #28]
 800c2ec:	3304      	adds	r3, #4
 800c2ee:	2b06      	cmp	r3, #6
 800c2f0:	d902      	bls.n	800c2f8 <NVIC_EncodePriority+0x30>
 800c2f2:	69fb      	ldr	r3, [r7, #28]
 800c2f4:	3b03      	subs	r3, #3
 800c2f6:	e000      	b.n	800c2fa <NVIC_EncodePriority+0x32>
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c2fc:	f04f 32ff 	mov.w	r2, #4294967295
 800c300:	69bb      	ldr	r3, [r7, #24]
 800c302:	fa02 f303 	lsl.w	r3, r2, r3
 800c306:	43da      	mvns	r2, r3
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	401a      	ands	r2, r3
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c310:	f04f 31ff 	mov.w	r1, #4294967295
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	fa01 f303 	lsl.w	r3, r1, r3
 800c31a:	43d9      	mvns	r1, r3
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c320:	4313      	orrs	r3, r2
}
 800c322:	4618      	mov	r0, r3
 800c324:	3724      	adds	r7, #36	; 0x24
 800c326:	46bd      	mov	sp, r7
 800c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32c:	4770      	bx	lr

0800c32e <LL_USART_Enable>:
{
 800c32e:	b480      	push	{r7}
 800c330:	b083      	sub	sp, #12
 800c332:	af00      	add	r7, sp, #0
 800c334:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	68db      	ldr	r3, [r3, #12]
 800c33a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	60da      	str	r2, [r3, #12]
}
 800c342:	bf00      	nop
 800c344:	370c      	adds	r7, #12
 800c346:	46bd      	mov	sp, r7
 800c348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34c:	4770      	bx	lr

0800c34e <LL_USART_ConfigAsyncMode>:
{
 800c34e:	b480      	push	{r7}
 800c350:	b083      	sub	sp, #12
 800c352:	af00      	add	r7, sp, #0
 800c354:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	691b      	ldr	r3, [r3, #16]
 800c35a:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	695b      	ldr	r3, [r3, #20]
 800c366:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	615a      	str	r2, [r3, #20]
}
 800c36e:	bf00      	nop
 800c370:	370c      	adds	r7, #12
 800c372:	46bd      	mov	sp, r7
 800c374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c378:	4770      	bx	lr
	...

0800c37c <LL_AHB1_GRP1_EnableClock>:
{
 800c37c:	b480      	push	{r7}
 800c37e:	b085      	sub	sp, #20
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800c384:	4b08      	ldr	r3, [pc, #32]	; (800c3a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800c386:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c388:	4907      	ldr	r1, [pc, #28]	; (800c3a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	4313      	orrs	r3, r2
 800c38e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800c390:	4b05      	ldr	r3, [pc, #20]	; (800c3a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800c392:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	4013      	ands	r3, r2
 800c398:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c39a:	68fb      	ldr	r3, [r7, #12]
}
 800c39c:	bf00      	nop
 800c39e:	3714      	adds	r7, #20
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr
 800c3a8:	40023800 	.word	0x40023800

0800c3ac <LL_APB1_GRP1_EnableClock>:
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b085      	sub	sp, #20
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800c3b4:	4b08      	ldr	r3, [pc, #32]	; (800c3d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800c3b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c3b8:	4907      	ldr	r1, [pc, #28]	; (800c3d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	4313      	orrs	r3, r2
 800c3be:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800c3c0:	4b05      	ldr	r3, [pc, #20]	; (800c3d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800c3c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	4013      	ands	r3, r2
 800c3c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
}
 800c3cc:	bf00      	nop
 800c3ce:	3714      	adds	r7, #20
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d6:	4770      	bx	lr
 800c3d8:	40023800 	.word	0x40023800

0800c3dc <LL_APB2_GRP1_EnableClock>:
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b085      	sub	sp, #20
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800c3e4:	4b08      	ldr	r3, [pc, #32]	; (800c408 <LL_APB2_GRP1_EnableClock+0x2c>)
 800c3e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c3e8:	4907      	ldr	r1, [pc, #28]	; (800c408 <LL_APB2_GRP1_EnableClock+0x2c>)
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	4313      	orrs	r3, r2
 800c3ee:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800c3f0:	4b05      	ldr	r3, [pc, #20]	; (800c408 <LL_APB2_GRP1_EnableClock+0x2c>)
 800c3f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	4013      	ands	r3, r2
 800c3f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
}
 800c3fc:	bf00      	nop
 800c3fe:	3714      	adds	r7, #20
 800c400:	46bd      	mov	sp, r7
 800c402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c406:	4770      	bx	lr
 800c408:	40023800 	.word	0x40023800

0800c40c <MX_UART4_Init>:

UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b08e      	sub	sp, #56	; 0x38
 800c410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800c412:	f107 031c 	add.w	r3, r7, #28
 800c416:	2200      	movs	r2, #0
 800c418:	601a      	str	r2, [r3, #0]
 800c41a:	605a      	str	r2, [r3, #4]
 800c41c:	609a      	str	r2, [r3, #8]
 800c41e:	60da      	str	r2, [r3, #12]
 800c420:	611a      	str	r2, [r3, #16]
 800c422:	615a      	str	r2, [r3, #20]
 800c424:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c426:	1d3b      	adds	r3, r7, #4
 800c428:	2200      	movs	r2, #0
 800c42a:	601a      	str	r2, [r3, #0]
 800c42c:	605a      	str	r2, [r3, #4]
 800c42e:	609a      	str	r2, [r3, #8]
 800c430:	60da      	str	r2, [r3, #12]
 800c432:	611a      	str	r2, [r3, #16]
 800c434:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 800c436:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c43a:	f7ff ffb7 	bl	800c3ac <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800c43e:	2004      	movs	r0, #4
 800c440:	f7ff ff9c 	bl	800c37c <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 800c444:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800c448:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800c44a:	2302      	movs	r3, #2
 800c44c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800c44e:	2303      	movs	r3, #3
 800c450:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800c452:	2300      	movs	r3, #0
 800c454:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800c456:	2300      	movs	r3, #0
 800c458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800c45a:	2308      	movs	r3, #8
 800c45c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c45e:	1d3b      	adds	r3, r7, #4
 800c460:	4619      	mov	r1, r3
 800c462:	4819      	ldr	r0, [pc, #100]	; (800c4c8 <MX_UART4_Init+0xbc>)
 800c464:	f7f8 fe93 	bl	800518e <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800c468:	f7ff fed8 	bl	800c21c <__NVIC_GetPriorityGrouping>
 800c46c:	4603      	mov	r3, r0
 800c46e:	2200      	movs	r2, #0
 800c470:	2100      	movs	r1, #0
 800c472:	4618      	mov	r0, r3
 800c474:	f7ff ff28 	bl	800c2c8 <NVIC_EncodePriority>
 800c478:	4603      	mov	r3, r0
 800c47a:	4619      	mov	r1, r3
 800c47c:	2034      	movs	r0, #52	; 0x34
 800c47e:	f7ff fef9 	bl	800c274 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 800c482:	2034      	movs	r0, #52	; 0x34
 800c484:	f7ff fed8 	bl	800c238 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 800c488:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800c48c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800c48e:	2300      	movs	r3, #0
 800c490:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800c492:	2300      	movs	r3, #0
 800c494:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800c496:	2300      	movs	r3, #0
 800c498:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800c49a:	230c      	movs	r3, #12
 800c49c:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 800c4a6:	f107 031c 	add.w	r3, r7, #28
 800c4aa:	4619      	mov	r1, r3
 800c4ac:	4807      	ldr	r0, [pc, #28]	; (800c4cc <MX_UART4_Init+0xc0>)
 800c4ae:	f7f9 fde9 	bl	8006084 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 800c4b2:	4806      	ldr	r0, [pc, #24]	; (800c4cc <MX_UART4_Init+0xc0>)
 800c4b4:	f7ff ff4b 	bl	800c34e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 800c4b8:	4804      	ldr	r0, [pc, #16]	; (800c4cc <MX_UART4_Init+0xc0>)
 800c4ba:	f7ff ff38 	bl	800c32e <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800c4be:	bf00      	nop
 800c4c0:	3738      	adds	r7, #56	; 0x38
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}
 800c4c6:	bf00      	nop
 800c4c8:	40020800 	.word	0x40020800
 800c4cc:	40004c00 	.word	0x40004c00

0800c4d0 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b08e      	sub	sp, #56	; 0x38
 800c4d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800c4d6:	f107 031c 	add.w	r3, r7, #28
 800c4da:	2200      	movs	r2, #0
 800c4dc:	601a      	str	r2, [r3, #0]
 800c4de:	605a      	str	r2, [r3, #4]
 800c4e0:	609a      	str	r2, [r3, #8]
 800c4e2:	60da      	str	r2, [r3, #12]
 800c4e4:	611a      	str	r2, [r3, #16]
 800c4e6:	615a      	str	r2, [r3, #20]
 800c4e8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c4ea:	1d3b      	adds	r3, r7, #4
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	601a      	str	r2, [r3, #0]
 800c4f0:	605a      	str	r2, [r3, #4]
 800c4f2:	609a      	str	r2, [r3, #8]
 800c4f4:	60da      	str	r2, [r3, #12]
 800c4f6:	611a      	str	r2, [r3, #16]
 800c4f8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 800c4fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c4fe:	f7ff ff55 	bl	800c3ac <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800c502:	2004      	movs	r0, #4
 800c504:	f7ff ff3a 	bl	800c37c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800c508:	2008      	movs	r0, #8
 800c50a:	f7ff ff37 	bl	800c37c <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 800c50e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c512:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800c514:	2302      	movs	r3, #2
 800c516:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800c518:	2303      	movs	r3, #3
 800c51a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800c51c:	2300      	movs	r3, #0
 800c51e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800c520:	2300      	movs	r3, #0
 800c522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800c524:	2308      	movs	r3, #8
 800c526:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c528:	1d3b      	adds	r3, r7, #4
 800c52a:	4619      	mov	r1, r3
 800c52c:	4821      	ldr	r0, [pc, #132]	; (800c5b4 <MX_UART5_Init+0xe4>)
 800c52e:	f7f8 fe2e 	bl	800518e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800c532:	2304      	movs	r3, #4
 800c534:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800c536:	2302      	movs	r3, #2
 800c538:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800c53a:	2303      	movs	r3, #3
 800c53c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800c53e:	2300      	movs	r3, #0
 800c540:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800c542:	2300      	movs	r3, #0
 800c544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800c546:	2308      	movs	r3, #8
 800c548:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c54a:	1d3b      	adds	r3, r7, #4
 800c54c:	4619      	mov	r1, r3
 800c54e:	481a      	ldr	r0, [pc, #104]	; (800c5b8 <MX_UART5_Init+0xe8>)
 800c550:	f7f8 fe1d 	bl	800518e <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800c554:	f7ff fe62 	bl	800c21c <__NVIC_GetPriorityGrouping>
 800c558:	4603      	mov	r3, r0
 800c55a:	2200      	movs	r2, #0
 800c55c:	2100      	movs	r1, #0
 800c55e:	4618      	mov	r0, r3
 800c560:	f7ff feb2 	bl	800c2c8 <NVIC_EncodePriority>
 800c564:	4603      	mov	r3, r0
 800c566:	4619      	mov	r1, r3
 800c568:	2035      	movs	r0, #53	; 0x35
 800c56a:	f7ff fe83 	bl	800c274 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 800c56e:	2035      	movs	r0, #53	; 0x35
 800c570:	f7ff fe62 	bl	800c238 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800c574:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800c578:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800c57a:	2300      	movs	r3, #0
 800c57c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800c57e:	2300      	movs	r3, #0
 800c580:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800c582:	2300      	movs	r3, #0
 800c584:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 800c586:	2304      	movs	r3, #4
 800c588:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800c58a:	2300      	movs	r3, #0
 800c58c:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800c58e:	2300      	movs	r3, #0
 800c590:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 800c592:	f107 031c 	add.w	r3, r7, #28
 800c596:	4619      	mov	r1, r3
 800c598:	4808      	ldr	r0, [pc, #32]	; (800c5bc <MX_UART5_Init+0xec>)
 800c59a:	f7f9 fd73 	bl	8006084 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 800c59e:	4807      	ldr	r0, [pc, #28]	; (800c5bc <MX_UART5_Init+0xec>)
 800c5a0:	f7ff fed5 	bl	800c34e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 800c5a4:	4805      	ldr	r0, [pc, #20]	; (800c5bc <MX_UART5_Init+0xec>)
 800c5a6:	f7ff fec2 	bl	800c32e <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800c5aa:	bf00      	nop
 800c5ac:	3738      	adds	r7, #56	; 0x38
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}
 800c5b2:	bf00      	nop
 800c5b4:	40020800 	.word	0x40020800
 800c5b8:	40020c00 	.word	0x40020c00
 800c5bc:	40005000 	.word	0x40005000

0800c5c0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800c5c4:	4b11      	ldr	r3, [pc, #68]	; (800c60c <MX_USART1_UART_Init+0x4c>)
 800c5c6:	4a12      	ldr	r2, [pc, #72]	; (800c610 <MX_USART1_UART_Init+0x50>)
 800c5c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800c5ca:	4b10      	ldr	r3, [pc, #64]	; (800c60c <MX_USART1_UART_Init+0x4c>)
 800c5cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800c5d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c5d2:	4b0e      	ldr	r3, [pc, #56]	; (800c60c <MX_USART1_UART_Init+0x4c>)
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800c5d8:	4b0c      	ldr	r3, [pc, #48]	; (800c60c <MX_USART1_UART_Init+0x4c>)
 800c5da:	2200      	movs	r2, #0
 800c5dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800c5de:	4b0b      	ldr	r3, [pc, #44]	; (800c60c <MX_USART1_UART_Init+0x4c>)
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c5e4:	4b09      	ldr	r3, [pc, #36]	; (800c60c <MX_USART1_UART_Init+0x4c>)
 800c5e6:	220c      	movs	r2, #12
 800c5e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c5ea:	4b08      	ldr	r3, [pc, #32]	; (800c60c <MX_USART1_UART_Init+0x4c>)
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c5f0:	4b06      	ldr	r3, [pc, #24]	; (800c60c <MX_USART1_UART_Init+0x4c>)
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c5f6:	4805      	ldr	r0, [pc, #20]	; (800c60c <MX_USART1_UART_Init+0x4c>)
 800c5f8:	f7f7 fc08 	bl	8003e0c <HAL_UART_Init>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d001      	beq.n	800c606 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800c602:	f7fe fede 	bl	800b3c2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800c606:	bf00      	nop
 800c608:	bd80      	pop	{r7, pc}
 800c60a:	bf00      	nop
 800c60c:	20000654 	.word	0x20000654
 800c610:	40011000 	.word	0x40011000

0800c614 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b08e      	sub	sp, #56	; 0x38
 800c618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800c61a:	f107 031c 	add.w	r3, r7, #28
 800c61e:	2200      	movs	r2, #0
 800c620:	601a      	str	r2, [r3, #0]
 800c622:	605a      	str	r2, [r3, #4]
 800c624:	609a      	str	r2, [r3, #8]
 800c626:	60da      	str	r2, [r3, #12]
 800c628:	611a      	str	r2, [r3, #16]
 800c62a:	615a      	str	r2, [r3, #20]
 800c62c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c62e:	1d3b      	adds	r3, r7, #4
 800c630:	2200      	movs	r2, #0
 800c632:	601a      	str	r2, [r3, #0]
 800c634:	605a      	str	r2, [r3, #4]
 800c636:	609a      	str	r2, [r3, #8]
 800c638:	60da      	str	r2, [r3, #12]
 800c63a:	611a      	str	r2, [r3, #16]
 800c63c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 800c63e:	2020      	movs	r0, #32
 800c640:	f7ff fecc 	bl	800c3dc <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800c644:	2004      	movs	r0, #4
 800c646:	f7ff fe99 	bl	800c37c <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800c64a:	23c0      	movs	r3, #192	; 0xc0
 800c64c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800c64e:	2302      	movs	r3, #2
 800c650:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800c652:	2303      	movs	r3, #3
 800c654:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800c656:	2300      	movs	r3, #0
 800c658:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800c65a:	2300      	movs	r3, #0
 800c65c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800c65e:	2308      	movs	r3, #8
 800c660:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c662:	1d3b      	adds	r3, r7, #4
 800c664:	4619      	mov	r1, r3
 800c666:	4819      	ldr	r0, [pc, #100]	; (800c6cc <MX_USART6_UART_Init+0xb8>)
 800c668:	f7f8 fd91 	bl	800518e <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800c66c:	f7ff fdd6 	bl	800c21c <__NVIC_GetPriorityGrouping>
 800c670:	4603      	mov	r3, r0
 800c672:	2200      	movs	r2, #0
 800c674:	2100      	movs	r1, #0
 800c676:	4618      	mov	r0, r3
 800c678:	f7ff fe26 	bl	800c2c8 <NVIC_EncodePriority>
 800c67c:	4603      	mov	r3, r0
 800c67e:	4619      	mov	r1, r3
 800c680:	2047      	movs	r0, #71	; 0x47
 800c682:	f7ff fdf7 	bl	800c274 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 800c686:	2047      	movs	r0, #71	; 0x47
 800c688:	f7ff fdd6 	bl	800c238 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800c68c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800c690:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800c692:	2300      	movs	r3, #0
 800c694:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800c696:	2300      	movs	r3, #0
 800c698:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800c69a:	2300      	movs	r3, #0
 800c69c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800c69e:	230c      	movs	r3, #12
 800c6a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 800c6aa:	f107 031c 	add.w	r3, r7, #28
 800c6ae:	4619      	mov	r1, r3
 800c6b0:	4807      	ldr	r0, [pc, #28]	; (800c6d0 <MX_USART6_UART_Init+0xbc>)
 800c6b2:	f7f9 fce7 	bl	8006084 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 800c6b6:	4806      	ldr	r0, [pc, #24]	; (800c6d0 <MX_USART6_UART_Init+0xbc>)
 800c6b8:	f7ff fe49 	bl	800c34e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 800c6bc:	4804      	ldr	r0, [pc, #16]	; (800c6d0 <MX_USART6_UART_Init+0xbc>)
 800c6be:	f7ff fe36 	bl	800c32e <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800c6c2:	bf00      	nop
 800c6c4:	3738      	adds	r7, #56	; 0x38
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}
 800c6ca:	bf00      	nop
 800c6cc:	40020800 	.word	0x40020800
 800c6d0:	40011400 	.word	0x40011400

0800c6d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b08a      	sub	sp, #40	; 0x28
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c6dc:	f107 0314 	add.w	r3, r7, #20
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	601a      	str	r2, [r3, #0]
 800c6e4:	605a      	str	r2, [r3, #4]
 800c6e6:	609a      	str	r2, [r3, #8]
 800c6e8:	60da      	str	r2, [r3, #12]
 800c6ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	4a1d      	ldr	r2, [pc, #116]	; (800c768 <HAL_UART_MspInit+0x94>)
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d134      	bne.n	800c760 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	613b      	str	r3, [r7, #16]
 800c6fa:	4b1c      	ldr	r3, [pc, #112]	; (800c76c <HAL_UART_MspInit+0x98>)
 800c6fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6fe:	4a1b      	ldr	r2, [pc, #108]	; (800c76c <HAL_UART_MspInit+0x98>)
 800c700:	f043 0310 	orr.w	r3, r3, #16
 800c704:	6453      	str	r3, [r2, #68]	; 0x44
 800c706:	4b19      	ldr	r3, [pc, #100]	; (800c76c <HAL_UART_MspInit+0x98>)
 800c708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c70a:	f003 0310 	and.w	r3, r3, #16
 800c70e:	613b      	str	r3, [r7, #16]
 800c710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c712:	2300      	movs	r3, #0
 800c714:	60fb      	str	r3, [r7, #12]
 800c716:	4b15      	ldr	r3, [pc, #84]	; (800c76c <HAL_UART_MspInit+0x98>)
 800c718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c71a:	4a14      	ldr	r2, [pc, #80]	; (800c76c <HAL_UART_MspInit+0x98>)
 800c71c:	f043 0301 	orr.w	r3, r3, #1
 800c720:	6313      	str	r3, [r2, #48]	; 0x30
 800c722:	4b12      	ldr	r3, [pc, #72]	; (800c76c <HAL_UART_MspInit+0x98>)
 800c724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c726:	f003 0301 	and.w	r3, r3, #1
 800c72a:	60fb      	str	r3, [r7, #12]
 800c72c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800c72e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800c732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c734:	2302      	movs	r3, #2
 800c736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c738:	2300      	movs	r3, #0
 800c73a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c73c:	2303      	movs	r3, #3
 800c73e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800c740:	2307      	movs	r3, #7
 800c742:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c744:	f107 0314 	add.w	r3, r7, #20
 800c748:	4619      	mov	r1, r3
 800c74a:	4809      	ldr	r0, [pc, #36]	; (800c770 <HAL_UART_MspInit+0x9c>)
 800c74c:	f7f5 fd6a 	bl	8002224 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800c750:	2200      	movs	r2, #0
 800c752:	2100      	movs	r1, #0
 800c754:	2025      	movs	r0, #37	; 0x25
 800c756:	f7f5 f92c 	bl	80019b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800c75a:	2025      	movs	r0, #37	; 0x25
 800c75c:	f7f5 f945 	bl	80019ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800c760:	bf00      	nop
 800c762:	3728      	adds	r7, #40	; 0x28
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}
 800c768:	40011000 	.word	0x40011000
 800c76c:	40023800 	.word	0x40023800
 800c770:	40020000 	.word	0x40020000

0800c774 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800c774:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c7ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800c778:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800c77a:	e003      	b.n	800c784 <LoopCopyDataInit>

0800c77c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800c77c:	4b0c      	ldr	r3, [pc, #48]	; (800c7b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800c77e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800c780:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800c782:	3104      	adds	r1, #4

0800c784 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800c784:	480b      	ldr	r0, [pc, #44]	; (800c7b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800c786:	4b0c      	ldr	r3, [pc, #48]	; (800c7b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800c788:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800c78a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800c78c:	d3f6      	bcc.n	800c77c <CopyDataInit>
  ldr  r2, =_sbss
 800c78e:	4a0b      	ldr	r2, [pc, #44]	; (800c7bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800c790:	e002      	b.n	800c798 <LoopFillZerobss>

0800c792 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800c792:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800c794:	f842 3b04 	str.w	r3, [r2], #4

0800c798 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800c798:	4b09      	ldr	r3, [pc, #36]	; (800c7c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800c79a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800c79c:	d3f9      	bcc.n	800c792 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800c79e:	f7ff fa2f 	bl	800bc00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c7a2:	f000 f817 	bl	800c7d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c7a6:	f7fc fd0d 	bl	80091c4 <main>
  bx  lr    
 800c7aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800c7ac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800c7b0:	080108b4 	.word	0x080108b4
  ldr  r0, =_sdata
 800c7b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800c7b8:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 800c7bc:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 800c7c0:	200006a8 	.word	0x200006a8

0800c7c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c7c4:	e7fe      	b.n	800c7c4 <ADC_IRQHandler>
	...

0800c7c8 <__errno>:
 800c7c8:	4b01      	ldr	r3, [pc, #4]	; (800c7d0 <__errno+0x8>)
 800c7ca:	6818      	ldr	r0, [r3, #0]
 800c7cc:	4770      	bx	lr
 800c7ce:	bf00      	nop
 800c7d0:	20000010 	.word	0x20000010

0800c7d4 <__libc_init_array>:
 800c7d4:	b570      	push	{r4, r5, r6, lr}
 800c7d6:	4d0d      	ldr	r5, [pc, #52]	; (800c80c <__libc_init_array+0x38>)
 800c7d8:	4c0d      	ldr	r4, [pc, #52]	; (800c810 <__libc_init_array+0x3c>)
 800c7da:	1b64      	subs	r4, r4, r5
 800c7dc:	10a4      	asrs	r4, r4, #2
 800c7de:	2600      	movs	r6, #0
 800c7e0:	42a6      	cmp	r6, r4
 800c7e2:	d109      	bne.n	800c7f8 <__libc_init_array+0x24>
 800c7e4:	4d0b      	ldr	r5, [pc, #44]	; (800c814 <__libc_init_array+0x40>)
 800c7e6:	4c0c      	ldr	r4, [pc, #48]	; (800c818 <__libc_init_array+0x44>)
 800c7e8:	f003 fc24 	bl	8010034 <_init>
 800c7ec:	1b64      	subs	r4, r4, r5
 800c7ee:	10a4      	asrs	r4, r4, #2
 800c7f0:	2600      	movs	r6, #0
 800c7f2:	42a6      	cmp	r6, r4
 800c7f4:	d105      	bne.n	800c802 <__libc_init_array+0x2e>
 800c7f6:	bd70      	pop	{r4, r5, r6, pc}
 800c7f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7fc:	4798      	blx	r3
 800c7fe:	3601      	adds	r6, #1
 800c800:	e7ee      	b.n	800c7e0 <__libc_init_array+0xc>
 800c802:	f855 3b04 	ldr.w	r3, [r5], #4
 800c806:	4798      	blx	r3
 800c808:	3601      	adds	r6, #1
 800c80a:	e7f2      	b.n	800c7f2 <__libc_init_array+0x1e>
 800c80c:	080108ac 	.word	0x080108ac
 800c810:	080108ac 	.word	0x080108ac
 800c814:	080108ac 	.word	0x080108ac
 800c818:	080108b0 	.word	0x080108b0

0800c81c <memset>:
 800c81c:	4402      	add	r2, r0
 800c81e:	4603      	mov	r3, r0
 800c820:	4293      	cmp	r3, r2
 800c822:	d100      	bne.n	800c826 <memset+0xa>
 800c824:	4770      	bx	lr
 800c826:	f803 1b01 	strb.w	r1, [r3], #1
 800c82a:	e7f9      	b.n	800c820 <memset+0x4>

0800c82c <__cvt>:
 800c82c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c830:	ec55 4b10 	vmov	r4, r5, d0
 800c834:	2d00      	cmp	r5, #0
 800c836:	460e      	mov	r6, r1
 800c838:	4619      	mov	r1, r3
 800c83a:	462b      	mov	r3, r5
 800c83c:	bfbb      	ittet	lt
 800c83e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c842:	461d      	movlt	r5, r3
 800c844:	2300      	movge	r3, #0
 800c846:	232d      	movlt	r3, #45	; 0x2d
 800c848:	700b      	strb	r3, [r1, #0]
 800c84a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c84c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c850:	4691      	mov	r9, r2
 800c852:	f023 0820 	bic.w	r8, r3, #32
 800c856:	bfbc      	itt	lt
 800c858:	4622      	movlt	r2, r4
 800c85a:	4614      	movlt	r4, r2
 800c85c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c860:	d005      	beq.n	800c86e <__cvt+0x42>
 800c862:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c866:	d100      	bne.n	800c86a <__cvt+0x3e>
 800c868:	3601      	adds	r6, #1
 800c86a:	2102      	movs	r1, #2
 800c86c:	e000      	b.n	800c870 <__cvt+0x44>
 800c86e:	2103      	movs	r1, #3
 800c870:	ab03      	add	r3, sp, #12
 800c872:	9301      	str	r3, [sp, #4]
 800c874:	ab02      	add	r3, sp, #8
 800c876:	9300      	str	r3, [sp, #0]
 800c878:	ec45 4b10 	vmov	d0, r4, r5
 800c87c:	4653      	mov	r3, sl
 800c87e:	4632      	mov	r2, r6
 800c880:	f000 fe1a 	bl	800d4b8 <_dtoa_r>
 800c884:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c888:	4607      	mov	r7, r0
 800c88a:	d102      	bne.n	800c892 <__cvt+0x66>
 800c88c:	f019 0f01 	tst.w	r9, #1
 800c890:	d022      	beq.n	800c8d8 <__cvt+0xac>
 800c892:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c896:	eb07 0906 	add.w	r9, r7, r6
 800c89a:	d110      	bne.n	800c8be <__cvt+0x92>
 800c89c:	783b      	ldrb	r3, [r7, #0]
 800c89e:	2b30      	cmp	r3, #48	; 0x30
 800c8a0:	d10a      	bne.n	800c8b8 <__cvt+0x8c>
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	4620      	mov	r0, r4
 800c8a8:	4629      	mov	r1, r5
 800c8aa:	f7f4 f90d 	bl	8000ac8 <__aeabi_dcmpeq>
 800c8ae:	b918      	cbnz	r0, 800c8b8 <__cvt+0x8c>
 800c8b0:	f1c6 0601 	rsb	r6, r6, #1
 800c8b4:	f8ca 6000 	str.w	r6, [sl]
 800c8b8:	f8da 3000 	ldr.w	r3, [sl]
 800c8bc:	4499      	add	r9, r3
 800c8be:	2200      	movs	r2, #0
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	4620      	mov	r0, r4
 800c8c4:	4629      	mov	r1, r5
 800c8c6:	f7f4 f8ff 	bl	8000ac8 <__aeabi_dcmpeq>
 800c8ca:	b108      	cbz	r0, 800c8d0 <__cvt+0xa4>
 800c8cc:	f8cd 900c 	str.w	r9, [sp, #12]
 800c8d0:	2230      	movs	r2, #48	; 0x30
 800c8d2:	9b03      	ldr	r3, [sp, #12]
 800c8d4:	454b      	cmp	r3, r9
 800c8d6:	d307      	bcc.n	800c8e8 <__cvt+0xbc>
 800c8d8:	9b03      	ldr	r3, [sp, #12]
 800c8da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c8dc:	1bdb      	subs	r3, r3, r7
 800c8de:	4638      	mov	r0, r7
 800c8e0:	6013      	str	r3, [r2, #0]
 800c8e2:	b004      	add	sp, #16
 800c8e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8e8:	1c59      	adds	r1, r3, #1
 800c8ea:	9103      	str	r1, [sp, #12]
 800c8ec:	701a      	strb	r2, [r3, #0]
 800c8ee:	e7f0      	b.n	800c8d2 <__cvt+0xa6>

0800c8f0 <__exponent>:
 800c8f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	2900      	cmp	r1, #0
 800c8f6:	bfb8      	it	lt
 800c8f8:	4249      	neglt	r1, r1
 800c8fa:	f803 2b02 	strb.w	r2, [r3], #2
 800c8fe:	bfb4      	ite	lt
 800c900:	222d      	movlt	r2, #45	; 0x2d
 800c902:	222b      	movge	r2, #43	; 0x2b
 800c904:	2909      	cmp	r1, #9
 800c906:	7042      	strb	r2, [r0, #1]
 800c908:	dd2a      	ble.n	800c960 <__exponent+0x70>
 800c90a:	f10d 0407 	add.w	r4, sp, #7
 800c90e:	46a4      	mov	ip, r4
 800c910:	270a      	movs	r7, #10
 800c912:	46a6      	mov	lr, r4
 800c914:	460a      	mov	r2, r1
 800c916:	fb91 f6f7 	sdiv	r6, r1, r7
 800c91a:	fb07 1516 	mls	r5, r7, r6, r1
 800c91e:	3530      	adds	r5, #48	; 0x30
 800c920:	2a63      	cmp	r2, #99	; 0x63
 800c922:	f104 34ff 	add.w	r4, r4, #4294967295
 800c926:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c92a:	4631      	mov	r1, r6
 800c92c:	dcf1      	bgt.n	800c912 <__exponent+0x22>
 800c92e:	3130      	adds	r1, #48	; 0x30
 800c930:	f1ae 0502 	sub.w	r5, lr, #2
 800c934:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c938:	1c44      	adds	r4, r0, #1
 800c93a:	4629      	mov	r1, r5
 800c93c:	4561      	cmp	r1, ip
 800c93e:	d30a      	bcc.n	800c956 <__exponent+0x66>
 800c940:	f10d 0209 	add.w	r2, sp, #9
 800c944:	eba2 020e 	sub.w	r2, r2, lr
 800c948:	4565      	cmp	r5, ip
 800c94a:	bf88      	it	hi
 800c94c:	2200      	movhi	r2, #0
 800c94e:	4413      	add	r3, r2
 800c950:	1a18      	subs	r0, r3, r0
 800c952:	b003      	add	sp, #12
 800c954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c956:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c95a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c95e:	e7ed      	b.n	800c93c <__exponent+0x4c>
 800c960:	2330      	movs	r3, #48	; 0x30
 800c962:	3130      	adds	r1, #48	; 0x30
 800c964:	7083      	strb	r3, [r0, #2]
 800c966:	70c1      	strb	r1, [r0, #3]
 800c968:	1d03      	adds	r3, r0, #4
 800c96a:	e7f1      	b.n	800c950 <__exponent+0x60>

0800c96c <_printf_float>:
 800c96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c970:	ed2d 8b02 	vpush	{d8}
 800c974:	b08d      	sub	sp, #52	; 0x34
 800c976:	460c      	mov	r4, r1
 800c978:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c97c:	4616      	mov	r6, r2
 800c97e:	461f      	mov	r7, r3
 800c980:	4605      	mov	r5, r0
 800c982:	f001 fd3f 	bl	800e404 <_localeconv_r>
 800c986:	f8d0 a000 	ldr.w	sl, [r0]
 800c98a:	4650      	mov	r0, sl
 800c98c:	f7f3 fc20 	bl	80001d0 <strlen>
 800c990:	2300      	movs	r3, #0
 800c992:	930a      	str	r3, [sp, #40]	; 0x28
 800c994:	6823      	ldr	r3, [r4, #0]
 800c996:	9305      	str	r3, [sp, #20]
 800c998:	f8d8 3000 	ldr.w	r3, [r8]
 800c99c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c9a0:	3307      	adds	r3, #7
 800c9a2:	f023 0307 	bic.w	r3, r3, #7
 800c9a6:	f103 0208 	add.w	r2, r3, #8
 800c9aa:	f8c8 2000 	str.w	r2, [r8]
 800c9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c9b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c9ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c9be:	9307      	str	r3, [sp, #28]
 800c9c0:	f8cd 8018 	str.w	r8, [sp, #24]
 800c9c4:	ee08 0a10 	vmov	s16, r0
 800c9c8:	4b9f      	ldr	r3, [pc, #636]	; (800cc48 <_printf_float+0x2dc>)
 800c9ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c9ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c9d2:	f7f4 f8ab 	bl	8000b2c <__aeabi_dcmpun>
 800c9d6:	bb88      	cbnz	r0, 800ca3c <_printf_float+0xd0>
 800c9d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c9dc:	4b9a      	ldr	r3, [pc, #616]	; (800cc48 <_printf_float+0x2dc>)
 800c9de:	f04f 32ff 	mov.w	r2, #4294967295
 800c9e2:	f7f4 f885 	bl	8000af0 <__aeabi_dcmple>
 800c9e6:	bb48      	cbnz	r0, 800ca3c <_printf_float+0xd0>
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	4640      	mov	r0, r8
 800c9ee:	4649      	mov	r1, r9
 800c9f0:	f7f4 f874 	bl	8000adc <__aeabi_dcmplt>
 800c9f4:	b110      	cbz	r0, 800c9fc <_printf_float+0x90>
 800c9f6:	232d      	movs	r3, #45	; 0x2d
 800c9f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9fc:	4b93      	ldr	r3, [pc, #588]	; (800cc4c <_printf_float+0x2e0>)
 800c9fe:	4894      	ldr	r0, [pc, #592]	; (800cc50 <_printf_float+0x2e4>)
 800ca00:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ca04:	bf94      	ite	ls
 800ca06:	4698      	movls	r8, r3
 800ca08:	4680      	movhi	r8, r0
 800ca0a:	2303      	movs	r3, #3
 800ca0c:	6123      	str	r3, [r4, #16]
 800ca0e:	9b05      	ldr	r3, [sp, #20]
 800ca10:	f023 0204 	bic.w	r2, r3, #4
 800ca14:	6022      	str	r2, [r4, #0]
 800ca16:	f04f 0900 	mov.w	r9, #0
 800ca1a:	9700      	str	r7, [sp, #0]
 800ca1c:	4633      	mov	r3, r6
 800ca1e:	aa0b      	add	r2, sp, #44	; 0x2c
 800ca20:	4621      	mov	r1, r4
 800ca22:	4628      	mov	r0, r5
 800ca24:	f000 f9d8 	bl	800cdd8 <_printf_common>
 800ca28:	3001      	adds	r0, #1
 800ca2a:	f040 8090 	bne.w	800cb4e <_printf_float+0x1e2>
 800ca2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ca32:	b00d      	add	sp, #52	; 0x34
 800ca34:	ecbd 8b02 	vpop	{d8}
 800ca38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca3c:	4642      	mov	r2, r8
 800ca3e:	464b      	mov	r3, r9
 800ca40:	4640      	mov	r0, r8
 800ca42:	4649      	mov	r1, r9
 800ca44:	f7f4 f872 	bl	8000b2c <__aeabi_dcmpun>
 800ca48:	b140      	cbz	r0, 800ca5c <_printf_float+0xf0>
 800ca4a:	464b      	mov	r3, r9
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	bfbc      	itt	lt
 800ca50:	232d      	movlt	r3, #45	; 0x2d
 800ca52:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ca56:	487f      	ldr	r0, [pc, #508]	; (800cc54 <_printf_float+0x2e8>)
 800ca58:	4b7f      	ldr	r3, [pc, #508]	; (800cc58 <_printf_float+0x2ec>)
 800ca5a:	e7d1      	b.n	800ca00 <_printf_float+0x94>
 800ca5c:	6863      	ldr	r3, [r4, #4]
 800ca5e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ca62:	9206      	str	r2, [sp, #24]
 800ca64:	1c5a      	adds	r2, r3, #1
 800ca66:	d13f      	bne.n	800cae8 <_printf_float+0x17c>
 800ca68:	2306      	movs	r3, #6
 800ca6a:	6063      	str	r3, [r4, #4]
 800ca6c:	9b05      	ldr	r3, [sp, #20]
 800ca6e:	6861      	ldr	r1, [r4, #4]
 800ca70:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ca74:	2300      	movs	r3, #0
 800ca76:	9303      	str	r3, [sp, #12]
 800ca78:	ab0a      	add	r3, sp, #40	; 0x28
 800ca7a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ca7e:	ab09      	add	r3, sp, #36	; 0x24
 800ca80:	ec49 8b10 	vmov	d0, r8, r9
 800ca84:	9300      	str	r3, [sp, #0]
 800ca86:	6022      	str	r2, [r4, #0]
 800ca88:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ca8c:	4628      	mov	r0, r5
 800ca8e:	f7ff fecd 	bl	800c82c <__cvt>
 800ca92:	9b06      	ldr	r3, [sp, #24]
 800ca94:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ca96:	2b47      	cmp	r3, #71	; 0x47
 800ca98:	4680      	mov	r8, r0
 800ca9a:	d108      	bne.n	800caae <_printf_float+0x142>
 800ca9c:	1cc8      	adds	r0, r1, #3
 800ca9e:	db02      	blt.n	800caa6 <_printf_float+0x13a>
 800caa0:	6863      	ldr	r3, [r4, #4]
 800caa2:	4299      	cmp	r1, r3
 800caa4:	dd41      	ble.n	800cb2a <_printf_float+0x1be>
 800caa6:	f1ab 0b02 	sub.w	fp, fp, #2
 800caaa:	fa5f fb8b 	uxtb.w	fp, fp
 800caae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cab2:	d820      	bhi.n	800caf6 <_printf_float+0x18a>
 800cab4:	3901      	subs	r1, #1
 800cab6:	465a      	mov	r2, fp
 800cab8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cabc:	9109      	str	r1, [sp, #36]	; 0x24
 800cabe:	f7ff ff17 	bl	800c8f0 <__exponent>
 800cac2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cac4:	1813      	adds	r3, r2, r0
 800cac6:	2a01      	cmp	r2, #1
 800cac8:	4681      	mov	r9, r0
 800caca:	6123      	str	r3, [r4, #16]
 800cacc:	dc02      	bgt.n	800cad4 <_printf_float+0x168>
 800cace:	6822      	ldr	r2, [r4, #0]
 800cad0:	07d2      	lsls	r2, r2, #31
 800cad2:	d501      	bpl.n	800cad8 <_printf_float+0x16c>
 800cad4:	3301      	adds	r3, #1
 800cad6:	6123      	str	r3, [r4, #16]
 800cad8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d09c      	beq.n	800ca1a <_printf_float+0xae>
 800cae0:	232d      	movs	r3, #45	; 0x2d
 800cae2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cae6:	e798      	b.n	800ca1a <_printf_float+0xae>
 800cae8:	9a06      	ldr	r2, [sp, #24]
 800caea:	2a47      	cmp	r2, #71	; 0x47
 800caec:	d1be      	bne.n	800ca6c <_printf_float+0x100>
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d1bc      	bne.n	800ca6c <_printf_float+0x100>
 800caf2:	2301      	movs	r3, #1
 800caf4:	e7b9      	b.n	800ca6a <_printf_float+0xfe>
 800caf6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cafa:	d118      	bne.n	800cb2e <_printf_float+0x1c2>
 800cafc:	2900      	cmp	r1, #0
 800cafe:	6863      	ldr	r3, [r4, #4]
 800cb00:	dd0b      	ble.n	800cb1a <_printf_float+0x1ae>
 800cb02:	6121      	str	r1, [r4, #16]
 800cb04:	b913      	cbnz	r3, 800cb0c <_printf_float+0x1a0>
 800cb06:	6822      	ldr	r2, [r4, #0]
 800cb08:	07d0      	lsls	r0, r2, #31
 800cb0a:	d502      	bpl.n	800cb12 <_printf_float+0x1a6>
 800cb0c:	3301      	adds	r3, #1
 800cb0e:	440b      	add	r3, r1
 800cb10:	6123      	str	r3, [r4, #16]
 800cb12:	65a1      	str	r1, [r4, #88]	; 0x58
 800cb14:	f04f 0900 	mov.w	r9, #0
 800cb18:	e7de      	b.n	800cad8 <_printf_float+0x16c>
 800cb1a:	b913      	cbnz	r3, 800cb22 <_printf_float+0x1b6>
 800cb1c:	6822      	ldr	r2, [r4, #0]
 800cb1e:	07d2      	lsls	r2, r2, #31
 800cb20:	d501      	bpl.n	800cb26 <_printf_float+0x1ba>
 800cb22:	3302      	adds	r3, #2
 800cb24:	e7f4      	b.n	800cb10 <_printf_float+0x1a4>
 800cb26:	2301      	movs	r3, #1
 800cb28:	e7f2      	b.n	800cb10 <_printf_float+0x1a4>
 800cb2a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cb2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb30:	4299      	cmp	r1, r3
 800cb32:	db05      	blt.n	800cb40 <_printf_float+0x1d4>
 800cb34:	6823      	ldr	r3, [r4, #0]
 800cb36:	6121      	str	r1, [r4, #16]
 800cb38:	07d8      	lsls	r0, r3, #31
 800cb3a:	d5ea      	bpl.n	800cb12 <_printf_float+0x1a6>
 800cb3c:	1c4b      	adds	r3, r1, #1
 800cb3e:	e7e7      	b.n	800cb10 <_printf_float+0x1a4>
 800cb40:	2900      	cmp	r1, #0
 800cb42:	bfd4      	ite	le
 800cb44:	f1c1 0202 	rsble	r2, r1, #2
 800cb48:	2201      	movgt	r2, #1
 800cb4a:	4413      	add	r3, r2
 800cb4c:	e7e0      	b.n	800cb10 <_printf_float+0x1a4>
 800cb4e:	6823      	ldr	r3, [r4, #0]
 800cb50:	055a      	lsls	r2, r3, #21
 800cb52:	d407      	bmi.n	800cb64 <_printf_float+0x1f8>
 800cb54:	6923      	ldr	r3, [r4, #16]
 800cb56:	4642      	mov	r2, r8
 800cb58:	4631      	mov	r1, r6
 800cb5a:	4628      	mov	r0, r5
 800cb5c:	47b8      	blx	r7
 800cb5e:	3001      	adds	r0, #1
 800cb60:	d12c      	bne.n	800cbbc <_printf_float+0x250>
 800cb62:	e764      	b.n	800ca2e <_printf_float+0xc2>
 800cb64:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cb68:	f240 80e0 	bls.w	800cd2c <_printf_float+0x3c0>
 800cb6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cb70:	2200      	movs	r2, #0
 800cb72:	2300      	movs	r3, #0
 800cb74:	f7f3 ffa8 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb78:	2800      	cmp	r0, #0
 800cb7a:	d034      	beq.n	800cbe6 <_printf_float+0x27a>
 800cb7c:	4a37      	ldr	r2, [pc, #220]	; (800cc5c <_printf_float+0x2f0>)
 800cb7e:	2301      	movs	r3, #1
 800cb80:	4631      	mov	r1, r6
 800cb82:	4628      	mov	r0, r5
 800cb84:	47b8      	blx	r7
 800cb86:	3001      	adds	r0, #1
 800cb88:	f43f af51 	beq.w	800ca2e <_printf_float+0xc2>
 800cb8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb90:	429a      	cmp	r2, r3
 800cb92:	db02      	blt.n	800cb9a <_printf_float+0x22e>
 800cb94:	6823      	ldr	r3, [r4, #0]
 800cb96:	07d8      	lsls	r0, r3, #31
 800cb98:	d510      	bpl.n	800cbbc <_printf_float+0x250>
 800cb9a:	ee18 3a10 	vmov	r3, s16
 800cb9e:	4652      	mov	r2, sl
 800cba0:	4631      	mov	r1, r6
 800cba2:	4628      	mov	r0, r5
 800cba4:	47b8      	blx	r7
 800cba6:	3001      	adds	r0, #1
 800cba8:	f43f af41 	beq.w	800ca2e <_printf_float+0xc2>
 800cbac:	f04f 0800 	mov.w	r8, #0
 800cbb0:	f104 091a 	add.w	r9, r4, #26
 800cbb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbb6:	3b01      	subs	r3, #1
 800cbb8:	4543      	cmp	r3, r8
 800cbba:	dc09      	bgt.n	800cbd0 <_printf_float+0x264>
 800cbbc:	6823      	ldr	r3, [r4, #0]
 800cbbe:	079b      	lsls	r3, r3, #30
 800cbc0:	f100 8105 	bmi.w	800cdce <_printf_float+0x462>
 800cbc4:	68e0      	ldr	r0, [r4, #12]
 800cbc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbc8:	4298      	cmp	r0, r3
 800cbca:	bfb8      	it	lt
 800cbcc:	4618      	movlt	r0, r3
 800cbce:	e730      	b.n	800ca32 <_printf_float+0xc6>
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	464a      	mov	r2, r9
 800cbd4:	4631      	mov	r1, r6
 800cbd6:	4628      	mov	r0, r5
 800cbd8:	47b8      	blx	r7
 800cbda:	3001      	adds	r0, #1
 800cbdc:	f43f af27 	beq.w	800ca2e <_printf_float+0xc2>
 800cbe0:	f108 0801 	add.w	r8, r8, #1
 800cbe4:	e7e6      	b.n	800cbb4 <_printf_float+0x248>
 800cbe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	dc39      	bgt.n	800cc60 <_printf_float+0x2f4>
 800cbec:	4a1b      	ldr	r2, [pc, #108]	; (800cc5c <_printf_float+0x2f0>)
 800cbee:	2301      	movs	r3, #1
 800cbf0:	4631      	mov	r1, r6
 800cbf2:	4628      	mov	r0, r5
 800cbf4:	47b8      	blx	r7
 800cbf6:	3001      	adds	r0, #1
 800cbf8:	f43f af19 	beq.w	800ca2e <_printf_float+0xc2>
 800cbfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc00:	4313      	orrs	r3, r2
 800cc02:	d102      	bne.n	800cc0a <_printf_float+0x29e>
 800cc04:	6823      	ldr	r3, [r4, #0]
 800cc06:	07d9      	lsls	r1, r3, #31
 800cc08:	d5d8      	bpl.n	800cbbc <_printf_float+0x250>
 800cc0a:	ee18 3a10 	vmov	r3, s16
 800cc0e:	4652      	mov	r2, sl
 800cc10:	4631      	mov	r1, r6
 800cc12:	4628      	mov	r0, r5
 800cc14:	47b8      	blx	r7
 800cc16:	3001      	adds	r0, #1
 800cc18:	f43f af09 	beq.w	800ca2e <_printf_float+0xc2>
 800cc1c:	f04f 0900 	mov.w	r9, #0
 800cc20:	f104 0a1a 	add.w	sl, r4, #26
 800cc24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc26:	425b      	negs	r3, r3
 800cc28:	454b      	cmp	r3, r9
 800cc2a:	dc01      	bgt.n	800cc30 <_printf_float+0x2c4>
 800cc2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc2e:	e792      	b.n	800cb56 <_printf_float+0x1ea>
 800cc30:	2301      	movs	r3, #1
 800cc32:	4652      	mov	r2, sl
 800cc34:	4631      	mov	r1, r6
 800cc36:	4628      	mov	r0, r5
 800cc38:	47b8      	blx	r7
 800cc3a:	3001      	adds	r0, #1
 800cc3c:	f43f aef7 	beq.w	800ca2e <_printf_float+0xc2>
 800cc40:	f109 0901 	add.w	r9, r9, #1
 800cc44:	e7ee      	b.n	800cc24 <_printf_float+0x2b8>
 800cc46:	bf00      	nop
 800cc48:	7fefffff 	.word	0x7fefffff
 800cc4c:	08010480 	.word	0x08010480
 800cc50:	08010484 	.word	0x08010484
 800cc54:	0801048c 	.word	0x0801048c
 800cc58:	08010488 	.word	0x08010488
 800cc5c:	08010490 	.word	0x08010490
 800cc60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cc64:	429a      	cmp	r2, r3
 800cc66:	bfa8      	it	ge
 800cc68:	461a      	movge	r2, r3
 800cc6a:	2a00      	cmp	r2, #0
 800cc6c:	4691      	mov	r9, r2
 800cc6e:	dc37      	bgt.n	800cce0 <_printf_float+0x374>
 800cc70:	f04f 0b00 	mov.w	fp, #0
 800cc74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cc78:	f104 021a 	add.w	r2, r4, #26
 800cc7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cc7e:	9305      	str	r3, [sp, #20]
 800cc80:	eba3 0309 	sub.w	r3, r3, r9
 800cc84:	455b      	cmp	r3, fp
 800cc86:	dc33      	bgt.n	800ccf0 <_printf_float+0x384>
 800cc88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	db3b      	blt.n	800cd08 <_printf_float+0x39c>
 800cc90:	6823      	ldr	r3, [r4, #0]
 800cc92:	07da      	lsls	r2, r3, #31
 800cc94:	d438      	bmi.n	800cd08 <_printf_float+0x39c>
 800cc96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc98:	9a05      	ldr	r2, [sp, #20]
 800cc9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc9c:	1a9a      	subs	r2, r3, r2
 800cc9e:	eba3 0901 	sub.w	r9, r3, r1
 800cca2:	4591      	cmp	r9, r2
 800cca4:	bfa8      	it	ge
 800cca6:	4691      	movge	r9, r2
 800cca8:	f1b9 0f00 	cmp.w	r9, #0
 800ccac:	dc35      	bgt.n	800cd1a <_printf_float+0x3ae>
 800ccae:	f04f 0800 	mov.w	r8, #0
 800ccb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ccb6:	f104 0a1a 	add.w	sl, r4, #26
 800ccba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ccbe:	1a9b      	subs	r3, r3, r2
 800ccc0:	eba3 0309 	sub.w	r3, r3, r9
 800ccc4:	4543      	cmp	r3, r8
 800ccc6:	f77f af79 	ble.w	800cbbc <_printf_float+0x250>
 800ccca:	2301      	movs	r3, #1
 800cccc:	4652      	mov	r2, sl
 800ccce:	4631      	mov	r1, r6
 800ccd0:	4628      	mov	r0, r5
 800ccd2:	47b8      	blx	r7
 800ccd4:	3001      	adds	r0, #1
 800ccd6:	f43f aeaa 	beq.w	800ca2e <_printf_float+0xc2>
 800ccda:	f108 0801 	add.w	r8, r8, #1
 800ccde:	e7ec      	b.n	800ccba <_printf_float+0x34e>
 800cce0:	4613      	mov	r3, r2
 800cce2:	4631      	mov	r1, r6
 800cce4:	4642      	mov	r2, r8
 800cce6:	4628      	mov	r0, r5
 800cce8:	47b8      	blx	r7
 800ccea:	3001      	adds	r0, #1
 800ccec:	d1c0      	bne.n	800cc70 <_printf_float+0x304>
 800ccee:	e69e      	b.n	800ca2e <_printf_float+0xc2>
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	4631      	mov	r1, r6
 800ccf4:	4628      	mov	r0, r5
 800ccf6:	9205      	str	r2, [sp, #20]
 800ccf8:	47b8      	blx	r7
 800ccfa:	3001      	adds	r0, #1
 800ccfc:	f43f ae97 	beq.w	800ca2e <_printf_float+0xc2>
 800cd00:	9a05      	ldr	r2, [sp, #20]
 800cd02:	f10b 0b01 	add.w	fp, fp, #1
 800cd06:	e7b9      	b.n	800cc7c <_printf_float+0x310>
 800cd08:	ee18 3a10 	vmov	r3, s16
 800cd0c:	4652      	mov	r2, sl
 800cd0e:	4631      	mov	r1, r6
 800cd10:	4628      	mov	r0, r5
 800cd12:	47b8      	blx	r7
 800cd14:	3001      	adds	r0, #1
 800cd16:	d1be      	bne.n	800cc96 <_printf_float+0x32a>
 800cd18:	e689      	b.n	800ca2e <_printf_float+0xc2>
 800cd1a:	9a05      	ldr	r2, [sp, #20]
 800cd1c:	464b      	mov	r3, r9
 800cd1e:	4442      	add	r2, r8
 800cd20:	4631      	mov	r1, r6
 800cd22:	4628      	mov	r0, r5
 800cd24:	47b8      	blx	r7
 800cd26:	3001      	adds	r0, #1
 800cd28:	d1c1      	bne.n	800ccae <_printf_float+0x342>
 800cd2a:	e680      	b.n	800ca2e <_printf_float+0xc2>
 800cd2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd2e:	2a01      	cmp	r2, #1
 800cd30:	dc01      	bgt.n	800cd36 <_printf_float+0x3ca>
 800cd32:	07db      	lsls	r3, r3, #31
 800cd34:	d538      	bpl.n	800cda8 <_printf_float+0x43c>
 800cd36:	2301      	movs	r3, #1
 800cd38:	4642      	mov	r2, r8
 800cd3a:	4631      	mov	r1, r6
 800cd3c:	4628      	mov	r0, r5
 800cd3e:	47b8      	blx	r7
 800cd40:	3001      	adds	r0, #1
 800cd42:	f43f ae74 	beq.w	800ca2e <_printf_float+0xc2>
 800cd46:	ee18 3a10 	vmov	r3, s16
 800cd4a:	4652      	mov	r2, sl
 800cd4c:	4631      	mov	r1, r6
 800cd4e:	4628      	mov	r0, r5
 800cd50:	47b8      	blx	r7
 800cd52:	3001      	adds	r0, #1
 800cd54:	f43f ae6b 	beq.w	800ca2e <_printf_float+0xc2>
 800cd58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	2300      	movs	r3, #0
 800cd60:	f7f3 feb2 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd64:	b9d8      	cbnz	r0, 800cd9e <_printf_float+0x432>
 800cd66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd68:	f108 0201 	add.w	r2, r8, #1
 800cd6c:	3b01      	subs	r3, #1
 800cd6e:	4631      	mov	r1, r6
 800cd70:	4628      	mov	r0, r5
 800cd72:	47b8      	blx	r7
 800cd74:	3001      	adds	r0, #1
 800cd76:	d10e      	bne.n	800cd96 <_printf_float+0x42a>
 800cd78:	e659      	b.n	800ca2e <_printf_float+0xc2>
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	4652      	mov	r2, sl
 800cd7e:	4631      	mov	r1, r6
 800cd80:	4628      	mov	r0, r5
 800cd82:	47b8      	blx	r7
 800cd84:	3001      	adds	r0, #1
 800cd86:	f43f ae52 	beq.w	800ca2e <_printf_float+0xc2>
 800cd8a:	f108 0801 	add.w	r8, r8, #1
 800cd8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd90:	3b01      	subs	r3, #1
 800cd92:	4543      	cmp	r3, r8
 800cd94:	dcf1      	bgt.n	800cd7a <_printf_float+0x40e>
 800cd96:	464b      	mov	r3, r9
 800cd98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cd9c:	e6dc      	b.n	800cb58 <_printf_float+0x1ec>
 800cd9e:	f04f 0800 	mov.w	r8, #0
 800cda2:	f104 0a1a 	add.w	sl, r4, #26
 800cda6:	e7f2      	b.n	800cd8e <_printf_float+0x422>
 800cda8:	2301      	movs	r3, #1
 800cdaa:	4642      	mov	r2, r8
 800cdac:	e7df      	b.n	800cd6e <_printf_float+0x402>
 800cdae:	2301      	movs	r3, #1
 800cdb0:	464a      	mov	r2, r9
 800cdb2:	4631      	mov	r1, r6
 800cdb4:	4628      	mov	r0, r5
 800cdb6:	47b8      	blx	r7
 800cdb8:	3001      	adds	r0, #1
 800cdba:	f43f ae38 	beq.w	800ca2e <_printf_float+0xc2>
 800cdbe:	f108 0801 	add.w	r8, r8, #1
 800cdc2:	68e3      	ldr	r3, [r4, #12]
 800cdc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cdc6:	1a5b      	subs	r3, r3, r1
 800cdc8:	4543      	cmp	r3, r8
 800cdca:	dcf0      	bgt.n	800cdae <_printf_float+0x442>
 800cdcc:	e6fa      	b.n	800cbc4 <_printf_float+0x258>
 800cdce:	f04f 0800 	mov.w	r8, #0
 800cdd2:	f104 0919 	add.w	r9, r4, #25
 800cdd6:	e7f4      	b.n	800cdc2 <_printf_float+0x456>

0800cdd8 <_printf_common>:
 800cdd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cddc:	4616      	mov	r6, r2
 800cdde:	4699      	mov	r9, r3
 800cde0:	688a      	ldr	r2, [r1, #8]
 800cde2:	690b      	ldr	r3, [r1, #16]
 800cde4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cde8:	4293      	cmp	r3, r2
 800cdea:	bfb8      	it	lt
 800cdec:	4613      	movlt	r3, r2
 800cdee:	6033      	str	r3, [r6, #0]
 800cdf0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cdf4:	4607      	mov	r7, r0
 800cdf6:	460c      	mov	r4, r1
 800cdf8:	b10a      	cbz	r2, 800cdfe <_printf_common+0x26>
 800cdfa:	3301      	adds	r3, #1
 800cdfc:	6033      	str	r3, [r6, #0]
 800cdfe:	6823      	ldr	r3, [r4, #0]
 800ce00:	0699      	lsls	r1, r3, #26
 800ce02:	bf42      	ittt	mi
 800ce04:	6833      	ldrmi	r3, [r6, #0]
 800ce06:	3302      	addmi	r3, #2
 800ce08:	6033      	strmi	r3, [r6, #0]
 800ce0a:	6825      	ldr	r5, [r4, #0]
 800ce0c:	f015 0506 	ands.w	r5, r5, #6
 800ce10:	d106      	bne.n	800ce20 <_printf_common+0x48>
 800ce12:	f104 0a19 	add.w	sl, r4, #25
 800ce16:	68e3      	ldr	r3, [r4, #12]
 800ce18:	6832      	ldr	r2, [r6, #0]
 800ce1a:	1a9b      	subs	r3, r3, r2
 800ce1c:	42ab      	cmp	r3, r5
 800ce1e:	dc26      	bgt.n	800ce6e <_printf_common+0x96>
 800ce20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ce24:	1e13      	subs	r3, r2, #0
 800ce26:	6822      	ldr	r2, [r4, #0]
 800ce28:	bf18      	it	ne
 800ce2a:	2301      	movne	r3, #1
 800ce2c:	0692      	lsls	r2, r2, #26
 800ce2e:	d42b      	bmi.n	800ce88 <_printf_common+0xb0>
 800ce30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ce34:	4649      	mov	r1, r9
 800ce36:	4638      	mov	r0, r7
 800ce38:	47c0      	blx	r8
 800ce3a:	3001      	adds	r0, #1
 800ce3c:	d01e      	beq.n	800ce7c <_printf_common+0xa4>
 800ce3e:	6823      	ldr	r3, [r4, #0]
 800ce40:	68e5      	ldr	r5, [r4, #12]
 800ce42:	6832      	ldr	r2, [r6, #0]
 800ce44:	f003 0306 	and.w	r3, r3, #6
 800ce48:	2b04      	cmp	r3, #4
 800ce4a:	bf08      	it	eq
 800ce4c:	1aad      	subeq	r5, r5, r2
 800ce4e:	68a3      	ldr	r3, [r4, #8]
 800ce50:	6922      	ldr	r2, [r4, #16]
 800ce52:	bf0c      	ite	eq
 800ce54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ce58:	2500      	movne	r5, #0
 800ce5a:	4293      	cmp	r3, r2
 800ce5c:	bfc4      	itt	gt
 800ce5e:	1a9b      	subgt	r3, r3, r2
 800ce60:	18ed      	addgt	r5, r5, r3
 800ce62:	2600      	movs	r6, #0
 800ce64:	341a      	adds	r4, #26
 800ce66:	42b5      	cmp	r5, r6
 800ce68:	d11a      	bne.n	800cea0 <_printf_common+0xc8>
 800ce6a:	2000      	movs	r0, #0
 800ce6c:	e008      	b.n	800ce80 <_printf_common+0xa8>
 800ce6e:	2301      	movs	r3, #1
 800ce70:	4652      	mov	r2, sl
 800ce72:	4649      	mov	r1, r9
 800ce74:	4638      	mov	r0, r7
 800ce76:	47c0      	blx	r8
 800ce78:	3001      	adds	r0, #1
 800ce7a:	d103      	bne.n	800ce84 <_printf_common+0xac>
 800ce7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce84:	3501      	adds	r5, #1
 800ce86:	e7c6      	b.n	800ce16 <_printf_common+0x3e>
 800ce88:	18e1      	adds	r1, r4, r3
 800ce8a:	1c5a      	adds	r2, r3, #1
 800ce8c:	2030      	movs	r0, #48	; 0x30
 800ce8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ce92:	4422      	add	r2, r4
 800ce94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ce98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ce9c:	3302      	adds	r3, #2
 800ce9e:	e7c7      	b.n	800ce30 <_printf_common+0x58>
 800cea0:	2301      	movs	r3, #1
 800cea2:	4622      	mov	r2, r4
 800cea4:	4649      	mov	r1, r9
 800cea6:	4638      	mov	r0, r7
 800cea8:	47c0      	blx	r8
 800ceaa:	3001      	adds	r0, #1
 800ceac:	d0e6      	beq.n	800ce7c <_printf_common+0xa4>
 800ceae:	3601      	adds	r6, #1
 800ceb0:	e7d9      	b.n	800ce66 <_printf_common+0x8e>
	...

0800ceb4 <_printf_i>:
 800ceb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ceb8:	7e0f      	ldrb	r7, [r1, #24]
 800ceba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cebc:	2f78      	cmp	r7, #120	; 0x78
 800cebe:	4691      	mov	r9, r2
 800cec0:	4680      	mov	r8, r0
 800cec2:	460c      	mov	r4, r1
 800cec4:	469a      	mov	sl, r3
 800cec6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ceca:	d807      	bhi.n	800cedc <_printf_i+0x28>
 800cecc:	2f62      	cmp	r7, #98	; 0x62
 800cece:	d80a      	bhi.n	800cee6 <_printf_i+0x32>
 800ced0:	2f00      	cmp	r7, #0
 800ced2:	f000 80d8 	beq.w	800d086 <_printf_i+0x1d2>
 800ced6:	2f58      	cmp	r7, #88	; 0x58
 800ced8:	f000 80a3 	beq.w	800d022 <_printf_i+0x16e>
 800cedc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cee0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cee4:	e03a      	b.n	800cf5c <_printf_i+0xa8>
 800cee6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ceea:	2b15      	cmp	r3, #21
 800ceec:	d8f6      	bhi.n	800cedc <_printf_i+0x28>
 800ceee:	a101      	add	r1, pc, #4	; (adr r1, 800cef4 <_printf_i+0x40>)
 800cef0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cef4:	0800cf4d 	.word	0x0800cf4d
 800cef8:	0800cf61 	.word	0x0800cf61
 800cefc:	0800cedd 	.word	0x0800cedd
 800cf00:	0800cedd 	.word	0x0800cedd
 800cf04:	0800cedd 	.word	0x0800cedd
 800cf08:	0800cedd 	.word	0x0800cedd
 800cf0c:	0800cf61 	.word	0x0800cf61
 800cf10:	0800cedd 	.word	0x0800cedd
 800cf14:	0800cedd 	.word	0x0800cedd
 800cf18:	0800cedd 	.word	0x0800cedd
 800cf1c:	0800cedd 	.word	0x0800cedd
 800cf20:	0800d06d 	.word	0x0800d06d
 800cf24:	0800cf91 	.word	0x0800cf91
 800cf28:	0800d04f 	.word	0x0800d04f
 800cf2c:	0800cedd 	.word	0x0800cedd
 800cf30:	0800cedd 	.word	0x0800cedd
 800cf34:	0800d08f 	.word	0x0800d08f
 800cf38:	0800cedd 	.word	0x0800cedd
 800cf3c:	0800cf91 	.word	0x0800cf91
 800cf40:	0800cedd 	.word	0x0800cedd
 800cf44:	0800cedd 	.word	0x0800cedd
 800cf48:	0800d057 	.word	0x0800d057
 800cf4c:	682b      	ldr	r3, [r5, #0]
 800cf4e:	1d1a      	adds	r2, r3, #4
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	602a      	str	r2, [r5, #0]
 800cf54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cf58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	e0a3      	b.n	800d0a8 <_printf_i+0x1f4>
 800cf60:	6820      	ldr	r0, [r4, #0]
 800cf62:	6829      	ldr	r1, [r5, #0]
 800cf64:	0606      	lsls	r6, r0, #24
 800cf66:	f101 0304 	add.w	r3, r1, #4
 800cf6a:	d50a      	bpl.n	800cf82 <_printf_i+0xce>
 800cf6c:	680e      	ldr	r6, [r1, #0]
 800cf6e:	602b      	str	r3, [r5, #0]
 800cf70:	2e00      	cmp	r6, #0
 800cf72:	da03      	bge.n	800cf7c <_printf_i+0xc8>
 800cf74:	232d      	movs	r3, #45	; 0x2d
 800cf76:	4276      	negs	r6, r6
 800cf78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf7c:	485e      	ldr	r0, [pc, #376]	; (800d0f8 <_printf_i+0x244>)
 800cf7e:	230a      	movs	r3, #10
 800cf80:	e019      	b.n	800cfb6 <_printf_i+0x102>
 800cf82:	680e      	ldr	r6, [r1, #0]
 800cf84:	602b      	str	r3, [r5, #0]
 800cf86:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cf8a:	bf18      	it	ne
 800cf8c:	b236      	sxthne	r6, r6
 800cf8e:	e7ef      	b.n	800cf70 <_printf_i+0xbc>
 800cf90:	682b      	ldr	r3, [r5, #0]
 800cf92:	6820      	ldr	r0, [r4, #0]
 800cf94:	1d19      	adds	r1, r3, #4
 800cf96:	6029      	str	r1, [r5, #0]
 800cf98:	0601      	lsls	r1, r0, #24
 800cf9a:	d501      	bpl.n	800cfa0 <_printf_i+0xec>
 800cf9c:	681e      	ldr	r6, [r3, #0]
 800cf9e:	e002      	b.n	800cfa6 <_printf_i+0xf2>
 800cfa0:	0646      	lsls	r6, r0, #25
 800cfa2:	d5fb      	bpl.n	800cf9c <_printf_i+0xe8>
 800cfa4:	881e      	ldrh	r6, [r3, #0]
 800cfa6:	4854      	ldr	r0, [pc, #336]	; (800d0f8 <_printf_i+0x244>)
 800cfa8:	2f6f      	cmp	r7, #111	; 0x6f
 800cfaa:	bf0c      	ite	eq
 800cfac:	2308      	moveq	r3, #8
 800cfae:	230a      	movne	r3, #10
 800cfb0:	2100      	movs	r1, #0
 800cfb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cfb6:	6865      	ldr	r5, [r4, #4]
 800cfb8:	60a5      	str	r5, [r4, #8]
 800cfba:	2d00      	cmp	r5, #0
 800cfbc:	bfa2      	ittt	ge
 800cfbe:	6821      	ldrge	r1, [r4, #0]
 800cfc0:	f021 0104 	bicge.w	r1, r1, #4
 800cfc4:	6021      	strge	r1, [r4, #0]
 800cfc6:	b90e      	cbnz	r6, 800cfcc <_printf_i+0x118>
 800cfc8:	2d00      	cmp	r5, #0
 800cfca:	d04d      	beq.n	800d068 <_printf_i+0x1b4>
 800cfcc:	4615      	mov	r5, r2
 800cfce:	fbb6 f1f3 	udiv	r1, r6, r3
 800cfd2:	fb03 6711 	mls	r7, r3, r1, r6
 800cfd6:	5dc7      	ldrb	r7, [r0, r7]
 800cfd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cfdc:	4637      	mov	r7, r6
 800cfde:	42bb      	cmp	r3, r7
 800cfe0:	460e      	mov	r6, r1
 800cfe2:	d9f4      	bls.n	800cfce <_printf_i+0x11a>
 800cfe4:	2b08      	cmp	r3, #8
 800cfe6:	d10b      	bne.n	800d000 <_printf_i+0x14c>
 800cfe8:	6823      	ldr	r3, [r4, #0]
 800cfea:	07de      	lsls	r6, r3, #31
 800cfec:	d508      	bpl.n	800d000 <_printf_i+0x14c>
 800cfee:	6923      	ldr	r3, [r4, #16]
 800cff0:	6861      	ldr	r1, [r4, #4]
 800cff2:	4299      	cmp	r1, r3
 800cff4:	bfde      	ittt	le
 800cff6:	2330      	movle	r3, #48	; 0x30
 800cff8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cffc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d000:	1b52      	subs	r2, r2, r5
 800d002:	6122      	str	r2, [r4, #16]
 800d004:	f8cd a000 	str.w	sl, [sp]
 800d008:	464b      	mov	r3, r9
 800d00a:	aa03      	add	r2, sp, #12
 800d00c:	4621      	mov	r1, r4
 800d00e:	4640      	mov	r0, r8
 800d010:	f7ff fee2 	bl	800cdd8 <_printf_common>
 800d014:	3001      	adds	r0, #1
 800d016:	d14c      	bne.n	800d0b2 <_printf_i+0x1fe>
 800d018:	f04f 30ff 	mov.w	r0, #4294967295
 800d01c:	b004      	add	sp, #16
 800d01e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d022:	4835      	ldr	r0, [pc, #212]	; (800d0f8 <_printf_i+0x244>)
 800d024:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d028:	6829      	ldr	r1, [r5, #0]
 800d02a:	6823      	ldr	r3, [r4, #0]
 800d02c:	f851 6b04 	ldr.w	r6, [r1], #4
 800d030:	6029      	str	r1, [r5, #0]
 800d032:	061d      	lsls	r5, r3, #24
 800d034:	d514      	bpl.n	800d060 <_printf_i+0x1ac>
 800d036:	07df      	lsls	r7, r3, #31
 800d038:	bf44      	itt	mi
 800d03a:	f043 0320 	orrmi.w	r3, r3, #32
 800d03e:	6023      	strmi	r3, [r4, #0]
 800d040:	b91e      	cbnz	r6, 800d04a <_printf_i+0x196>
 800d042:	6823      	ldr	r3, [r4, #0]
 800d044:	f023 0320 	bic.w	r3, r3, #32
 800d048:	6023      	str	r3, [r4, #0]
 800d04a:	2310      	movs	r3, #16
 800d04c:	e7b0      	b.n	800cfb0 <_printf_i+0xfc>
 800d04e:	6823      	ldr	r3, [r4, #0]
 800d050:	f043 0320 	orr.w	r3, r3, #32
 800d054:	6023      	str	r3, [r4, #0]
 800d056:	2378      	movs	r3, #120	; 0x78
 800d058:	4828      	ldr	r0, [pc, #160]	; (800d0fc <_printf_i+0x248>)
 800d05a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d05e:	e7e3      	b.n	800d028 <_printf_i+0x174>
 800d060:	0659      	lsls	r1, r3, #25
 800d062:	bf48      	it	mi
 800d064:	b2b6      	uxthmi	r6, r6
 800d066:	e7e6      	b.n	800d036 <_printf_i+0x182>
 800d068:	4615      	mov	r5, r2
 800d06a:	e7bb      	b.n	800cfe4 <_printf_i+0x130>
 800d06c:	682b      	ldr	r3, [r5, #0]
 800d06e:	6826      	ldr	r6, [r4, #0]
 800d070:	6961      	ldr	r1, [r4, #20]
 800d072:	1d18      	adds	r0, r3, #4
 800d074:	6028      	str	r0, [r5, #0]
 800d076:	0635      	lsls	r5, r6, #24
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	d501      	bpl.n	800d080 <_printf_i+0x1cc>
 800d07c:	6019      	str	r1, [r3, #0]
 800d07e:	e002      	b.n	800d086 <_printf_i+0x1d2>
 800d080:	0670      	lsls	r0, r6, #25
 800d082:	d5fb      	bpl.n	800d07c <_printf_i+0x1c8>
 800d084:	8019      	strh	r1, [r3, #0]
 800d086:	2300      	movs	r3, #0
 800d088:	6123      	str	r3, [r4, #16]
 800d08a:	4615      	mov	r5, r2
 800d08c:	e7ba      	b.n	800d004 <_printf_i+0x150>
 800d08e:	682b      	ldr	r3, [r5, #0]
 800d090:	1d1a      	adds	r2, r3, #4
 800d092:	602a      	str	r2, [r5, #0]
 800d094:	681d      	ldr	r5, [r3, #0]
 800d096:	6862      	ldr	r2, [r4, #4]
 800d098:	2100      	movs	r1, #0
 800d09a:	4628      	mov	r0, r5
 800d09c:	f7f3 f8a0 	bl	80001e0 <memchr>
 800d0a0:	b108      	cbz	r0, 800d0a6 <_printf_i+0x1f2>
 800d0a2:	1b40      	subs	r0, r0, r5
 800d0a4:	6060      	str	r0, [r4, #4]
 800d0a6:	6863      	ldr	r3, [r4, #4]
 800d0a8:	6123      	str	r3, [r4, #16]
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d0b0:	e7a8      	b.n	800d004 <_printf_i+0x150>
 800d0b2:	6923      	ldr	r3, [r4, #16]
 800d0b4:	462a      	mov	r2, r5
 800d0b6:	4649      	mov	r1, r9
 800d0b8:	4640      	mov	r0, r8
 800d0ba:	47d0      	blx	sl
 800d0bc:	3001      	adds	r0, #1
 800d0be:	d0ab      	beq.n	800d018 <_printf_i+0x164>
 800d0c0:	6823      	ldr	r3, [r4, #0]
 800d0c2:	079b      	lsls	r3, r3, #30
 800d0c4:	d413      	bmi.n	800d0ee <_printf_i+0x23a>
 800d0c6:	68e0      	ldr	r0, [r4, #12]
 800d0c8:	9b03      	ldr	r3, [sp, #12]
 800d0ca:	4298      	cmp	r0, r3
 800d0cc:	bfb8      	it	lt
 800d0ce:	4618      	movlt	r0, r3
 800d0d0:	e7a4      	b.n	800d01c <_printf_i+0x168>
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	4632      	mov	r2, r6
 800d0d6:	4649      	mov	r1, r9
 800d0d8:	4640      	mov	r0, r8
 800d0da:	47d0      	blx	sl
 800d0dc:	3001      	adds	r0, #1
 800d0de:	d09b      	beq.n	800d018 <_printf_i+0x164>
 800d0e0:	3501      	adds	r5, #1
 800d0e2:	68e3      	ldr	r3, [r4, #12]
 800d0e4:	9903      	ldr	r1, [sp, #12]
 800d0e6:	1a5b      	subs	r3, r3, r1
 800d0e8:	42ab      	cmp	r3, r5
 800d0ea:	dcf2      	bgt.n	800d0d2 <_printf_i+0x21e>
 800d0ec:	e7eb      	b.n	800d0c6 <_printf_i+0x212>
 800d0ee:	2500      	movs	r5, #0
 800d0f0:	f104 0619 	add.w	r6, r4, #25
 800d0f4:	e7f5      	b.n	800d0e2 <_printf_i+0x22e>
 800d0f6:	bf00      	nop
 800d0f8:	08010492 	.word	0x08010492
 800d0fc:	080104a3 	.word	0x080104a3

0800d100 <iprintf>:
 800d100:	b40f      	push	{r0, r1, r2, r3}
 800d102:	4b0a      	ldr	r3, [pc, #40]	; (800d12c <iprintf+0x2c>)
 800d104:	b513      	push	{r0, r1, r4, lr}
 800d106:	681c      	ldr	r4, [r3, #0]
 800d108:	b124      	cbz	r4, 800d114 <iprintf+0x14>
 800d10a:	69a3      	ldr	r3, [r4, #24]
 800d10c:	b913      	cbnz	r3, 800d114 <iprintf+0x14>
 800d10e:	4620      	mov	r0, r4
 800d110:	f001 f8da 	bl	800e2c8 <__sinit>
 800d114:	ab05      	add	r3, sp, #20
 800d116:	9a04      	ldr	r2, [sp, #16]
 800d118:	68a1      	ldr	r1, [r4, #8]
 800d11a:	9301      	str	r3, [sp, #4]
 800d11c:	4620      	mov	r0, r4
 800d11e:	f001 fe97 	bl	800ee50 <_vfiprintf_r>
 800d122:	b002      	add	sp, #8
 800d124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d128:	b004      	add	sp, #16
 800d12a:	4770      	bx	lr
 800d12c:	20000010 	.word	0x20000010

0800d130 <_puts_r>:
 800d130:	b570      	push	{r4, r5, r6, lr}
 800d132:	460e      	mov	r6, r1
 800d134:	4605      	mov	r5, r0
 800d136:	b118      	cbz	r0, 800d140 <_puts_r+0x10>
 800d138:	6983      	ldr	r3, [r0, #24]
 800d13a:	b90b      	cbnz	r3, 800d140 <_puts_r+0x10>
 800d13c:	f001 f8c4 	bl	800e2c8 <__sinit>
 800d140:	69ab      	ldr	r3, [r5, #24]
 800d142:	68ac      	ldr	r4, [r5, #8]
 800d144:	b913      	cbnz	r3, 800d14c <_puts_r+0x1c>
 800d146:	4628      	mov	r0, r5
 800d148:	f001 f8be 	bl	800e2c8 <__sinit>
 800d14c:	4b2c      	ldr	r3, [pc, #176]	; (800d200 <_puts_r+0xd0>)
 800d14e:	429c      	cmp	r4, r3
 800d150:	d120      	bne.n	800d194 <_puts_r+0x64>
 800d152:	686c      	ldr	r4, [r5, #4]
 800d154:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d156:	07db      	lsls	r3, r3, #31
 800d158:	d405      	bmi.n	800d166 <_puts_r+0x36>
 800d15a:	89a3      	ldrh	r3, [r4, #12]
 800d15c:	0598      	lsls	r0, r3, #22
 800d15e:	d402      	bmi.n	800d166 <_puts_r+0x36>
 800d160:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d162:	f001 f954 	bl	800e40e <__retarget_lock_acquire_recursive>
 800d166:	89a3      	ldrh	r3, [r4, #12]
 800d168:	0719      	lsls	r1, r3, #28
 800d16a:	d51d      	bpl.n	800d1a8 <_puts_r+0x78>
 800d16c:	6923      	ldr	r3, [r4, #16]
 800d16e:	b1db      	cbz	r3, 800d1a8 <_puts_r+0x78>
 800d170:	3e01      	subs	r6, #1
 800d172:	68a3      	ldr	r3, [r4, #8]
 800d174:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d178:	3b01      	subs	r3, #1
 800d17a:	60a3      	str	r3, [r4, #8]
 800d17c:	bb39      	cbnz	r1, 800d1ce <_puts_r+0x9e>
 800d17e:	2b00      	cmp	r3, #0
 800d180:	da38      	bge.n	800d1f4 <_puts_r+0xc4>
 800d182:	4622      	mov	r2, r4
 800d184:	210a      	movs	r1, #10
 800d186:	4628      	mov	r0, r5
 800d188:	f000 f848 	bl	800d21c <__swbuf_r>
 800d18c:	3001      	adds	r0, #1
 800d18e:	d011      	beq.n	800d1b4 <_puts_r+0x84>
 800d190:	250a      	movs	r5, #10
 800d192:	e011      	b.n	800d1b8 <_puts_r+0x88>
 800d194:	4b1b      	ldr	r3, [pc, #108]	; (800d204 <_puts_r+0xd4>)
 800d196:	429c      	cmp	r4, r3
 800d198:	d101      	bne.n	800d19e <_puts_r+0x6e>
 800d19a:	68ac      	ldr	r4, [r5, #8]
 800d19c:	e7da      	b.n	800d154 <_puts_r+0x24>
 800d19e:	4b1a      	ldr	r3, [pc, #104]	; (800d208 <_puts_r+0xd8>)
 800d1a0:	429c      	cmp	r4, r3
 800d1a2:	bf08      	it	eq
 800d1a4:	68ec      	ldreq	r4, [r5, #12]
 800d1a6:	e7d5      	b.n	800d154 <_puts_r+0x24>
 800d1a8:	4621      	mov	r1, r4
 800d1aa:	4628      	mov	r0, r5
 800d1ac:	f000 f888 	bl	800d2c0 <__swsetup_r>
 800d1b0:	2800      	cmp	r0, #0
 800d1b2:	d0dd      	beq.n	800d170 <_puts_r+0x40>
 800d1b4:	f04f 35ff 	mov.w	r5, #4294967295
 800d1b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d1ba:	07da      	lsls	r2, r3, #31
 800d1bc:	d405      	bmi.n	800d1ca <_puts_r+0x9a>
 800d1be:	89a3      	ldrh	r3, [r4, #12]
 800d1c0:	059b      	lsls	r3, r3, #22
 800d1c2:	d402      	bmi.n	800d1ca <_puts_r+0x9a>
 800d1c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1c6:	f001 f923 	bl	800e410 <__retarget_lock_release_recursive>
 800d1ca:	4628      	mov	r0, r5
 800d1cc:	bd70      	pop	{r4, r5, r6, pc}
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	da04      	bge.n	800d1dc <_puts_r+0xac>
 800d1d2:	69a2      	ldr	r2, [r4, #24]
 800d1d4:	429a      	cmp	r2, r3
 800d1d6:	dc06      	bgt.n	800d1e6 <_puts_r+0xb6>
 800d1d8:	290a      	cmp	r1, #10
 800d1da:	d004      	beq.n	800d1e6 <_puts_r+0xb6>
 800d1dc:	6823      	ldr	r3, [r4, #0]
 800d1de:	1c5a      	adds	r2, r3, #1
 800d1e0:	6022      	str	r2, [r4, #0]
 800d1e2:	7019      	strb	r1, [r3, #0]
 800d1e4:	e7c5      	b.n	800d172 <_puts_r+0x42>
 800d1e6:	4622      	mov	r2, r4
 800d1e8:	4628      	mov	r0, r5
 800d1ea:	f000 f817 	bl	800d21c <__swbuf_r>
 800d1ee:	3001      	adds	r0, #1
 800d1f0:	d1bf      	bne.n	800d172 <_puts_r+0x42>
 800d1f2:	e7df      	b.n	800d1b4 <_puts_r+0x84>
 800d1f4:	6823      	ldr	r3, [r4, #0]
 800d1f6:	250a      	movs	r5, #10
 800d1f8:	1c5a      	adds	r2, r3, #1
 800d1fa:	6022      	str	r2, [r4, #0]
 800d1fc:	701d      	strb	r5, [r3, #0]
 800d1fe:	e7db      	b.n	800d1b8 <_puts_r+0x88>
 800d200:	08010564 	.word	0x08010564
 800d204:	08010584 	.word	0x08010584
 800d208:	08010544 	.word	0x08010544

0800d20c <puts>:
 800d20c:	4b02      	ldr	r3, [pc, #8]	; (800d218 <puts+0xc>)
 800d20e:	4601      	mov	r1, r0
 800d210:	6818      	ldr	r0, [r3, #0]
 800d212:	f7ff bf8d 	b.w	800d130 <_puts_r>
 800d216:	bf00      	nop
 800d218:	20000010 	.word	0x20000010

0800d21c <__swbuf_r>:
 800d21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d21e:	460e      	mov	r6, r1
 800d220:	4614      	mov	r4, r2
 800d222:	4605      	mov	r5, r0
 800d224:	b118      	cbz	r0, 800d22e <__swbuf_r+0x12>
 800d226:	6983      	ldr	r3, [r0, #24]
 800d228:	b90b      	cbnz	r3, 800d22e <__swbuf_r+0x12>
 800d22a:	f001 f84d 	bl	800e2c8 <__sinit>
 800d22e:	4b21      	ldr	r3, [pc, #132]	; (800d2b4 <__swbuf_r+0x98>)
 800d230:	429c      	cmp	r4, r3
 800d232:	d12b      	bne.n	800d28c <__swbuf_r+0x70>
 800d234:	686c      	ldr	r4, [r5, #4]
 800d236:	69a3      	ldr	r3, [r4, #24]
 800d238:	60a3      	str	r3, [r4, #8]
 800d23a:	89a3      	ldrh	r3, [r4, #12]
 800d23c:	071a      	lsls	r2, r3, #28
 800d23e:	d52f      	bpl.n	800d2a0 <__swbuf_r+0x84>
 800d240:	6923      	ldr	r3, [r4, #16]
 800d242:	b36b      	cbz	r3, 800d2a0 <__swbuf_r+0x84>
 800d244:	6923      	ldr	r3, [r4, #16]
 800d246:	6820      	ldr	r0, [r4, #0]
 800d248:	1ac0      	subs	r0, r0, r3
 800d24a:	6963      	ldr	r3, [r4, #20]
 800d24c:	b2f6      	uxtb	r6, r6
 800d24e:	4283      	cmp	r3, r0
 800d250:	4637      	mov	r7, r6
 800d252:	dc04      	bgt.n	800d25e <__swbuf_r+0x42>
 800d254:	4621      	mov	r1, r4
 800d256:	4628      	mov	r0, r5
 800d258:	f000 ffa2 	bl	800e1a0 <_fflush_r>
 800d25c:	bb30      	cbnz	r0, 800d2ac <__swbuf_r+0x90>
 800d25e:	68a3      	ldr	r3, [r4, #8]
 800d260:	3b01      	subs	r3, #1
 800d262:	60a3      	str	r3, [r4, #8]
 800d264:	6823      	ldr	r3, [r4, #0]
 800d266:	1c5a      	adds	r2, r3, #1
 800d268:	6022      	str	r2, [r4, #0]
 800d26a:	701e      	strb	r6, [r3, #0]
 800d26c:	6963      	ldr	r3, [r4, #20]
 800d26e:	3001      	adds	r0, #1
 800d270:	4283      	cmp	r3, r0
 800d272:	d004      	beq.n	800d27e <__swbuf_r+0x62>
 800d274:	89a3      	ldrh	r3, [r4, #12]
 800d276:	07db      	lsls	r3, r3, #31
 800d278:	d506      	bpl.n	800d288 <__swbuf_r+0x6c>
 800d27a:	2e0a      	cmp	r6, #10
 800d27c:	d104      	bne.n	800d288 <__swbuf_r+0x6c>
 800d27e:	4621      	mov	r1, r4
 800d280:	4628      	mov	r0, r5
 800d282:	f000 ff8d 	bl	800e1a0 <_fflush_r>
 800d286:	b988      	cbnz	r0, 800d2ac <__swbuf_r+0x90>
 800d288:	4638      	mov	r0, r7
 800d28a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d28c:	4b0a      	ldr	r3, [pc, #40]	; (800d2b8 <__swbuf_r+0x9c>)
 800d28e:	429c      	cmp	r4, r3
 800d290:	d101      	bne.n	800d296 <__swbuf_r+0x7a>
 800d292:	68ac      	ldr	r4, [r5, #8]
 800d294:	e7cf      	b.n	800d236 <__swbuf_r+0x1a>
 800d296:	4b09      	ldr	r3, [pc, #36]	; (800d2bc <__swbuf_r+0xa0>)
 800d298:	429c      	cmp	r4, r3
 800d29a:	bf08      	it	eq
 800d29c:	68ec      	ldreq	r4, [r5, #12]
 800d29e:	e7ca      	b.n	800d236 <__swbuf_r+0x1a>
 800d2a0:	4621      	mov	r1, r4
 800d2a2:	4628      	mov	r0, r5
 800d2a4:	f000 f80c 	bl	800d2c0 <__swsetup_r>
 800d2a8:	2800      	cmp	r0, #0
 800d2aa:	d0cb      	beq.n	800d244 <__swbuf_r+0x28>
 800d2ac:	f04f 37ff 	mov.w	r7, #4294967295
 800d2b0:	e7ea      	b.n	800d288 <__swbuf_r+0x6c>
 800d2b2:	bf00      	nop
 800d2b4:	08010564 	.word	0x08010564
 800d2b8:	08010584 	.word	0x08010584
 800d2bc:	08010544 	.word	0x08010544

0800d2c0 <__swsetup_r>:
 800d2c0:	4b32      	ldr	r3, [pc, #200]	; (800d38c <__swsetup_r+0xcc>)
 800d2c2:	b570      	push	{r4, r5, r6, lr}
 800d2c4:	681d      	ldr	r5, [r3, #0]
 800d2c6:	4606      	mov	r6, r0
 800d2c8:	460c      	mov	r4, r1
 800d2ca:	b125      	cbz	r5, 800d2d6 <__swsetup_r+0x16>
 800d2cc:	69ab      	ldr	r3, [r5, #24]
 800d2ce:	b913      	cbnz	r3, 800d2d6 <__swsetup_r+0x16>
 800d2d0:	4628      	mov	r0, r5
 800d2d2:	f000 fff9 	bl	800e2c8 <__sinit>
 800d2d6:	4b2e      	ldr	r3, [pc, #184]	; (800d390 <__swsetup_r+0xd0>)
 800d2d8:	429c      	cmp	r4, r3
 800d2da:	d10f      	bne.n	800d2fc <__swsetup_r+0x3c>
 800d2dc:	686c      	ldr	r4, [r5, #4]
 800d2de:	89a3      	ldrh	r3, [r4, #12]
 800d2e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d2e4:	0719      	lsls	r1, r3, #28
 800d2e6:	d42c      	bmi.n	800d342 <__swsetup_r+0x82>
 800d2e8:	06dd      	lsls	r5, r3, #27
 800d2ea:	d411      	bmi.n	800d310 <__swsetup_r+0x50>
 800d2ec:	2309      	movs	r3, #9
 800d2ee:	6033      	str	r3, [r6, #0]
 800d2f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d2f4:	81a3      	strh	r3, [r4, #12]
 800d2f6:	f04f 30ff 	mov.w	r0, #4294967295
 800d2fa:	e03e      	b.n	800d37a <__swsetup_r+0xba>
 800d2fc:	4b25      	ldr	r3, [pc, #148]	; (800d394 <__swsetup_r+0xd4>)
 800d2fe:	429c      	cmp	r4, r3
 800d300:	d101      	bne.n	800d306 <__swsetup_r+0x46>
 800d302:	68ac      	ldr	r4, [r5, #8]
 800d304:	e7eb      	b.n	800d2de <__swsetup_r+0x1e>
 800d306:	4b24      	ldr	r3, [pc, #144]	; (800d398 <__swsetup_r+0xd8>)
 800d308:	429c      	cmp	r4, r3
 800d30a:	bf08      	it	eq
 800d30c:	68ec      	ldreq	r4, [r5, #12]
 800d30e:	e7e6      	b.n	800d2de <__swsetup_r+0x1e>
 800d310:	0758      	lsls	r0, r3, #29
 800d312:	d512      	bpl.n	800d33a <__swsetup_r+0x7a>
 800d314:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d316:	b141      	cbz	r1, 800d32a <__swsetup_r+0x6a>
 800d318:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d31c:	4299      	cmp	r1, r3
 800d31e:	d002      	beq.n	800d326 <__swsetup_r+0x66>
 800d320:	4630      	mov	r0, r6
 800d322:	f001 fc8b 	bl	800ec3c <_free_r>
 800d326:	2300      	movs	r3, #0
 800d328:	6363      	str	r3, [r4, #52]	; 0x34
 800d32a:	89a3      	ldrh	r3, [r4, #12]
 800d32c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d330:	81a3      	strh	r3, [r4, #12]
 800d332:	2300      	movs	r3, #0
 800d334:	6063      	str	r3, [r4, #4]
 800d336:	6923      	ldr	r3, [r4, #16]
 800d338:	6023      	str	r3, [r4, #0]
 800d33a:	89a3      	ldrh	r3, [r4, #12]
 800d33c:	f043 0308 	orr.w	r3, r3, #8
 800d340:	81a3      	strh	r3, [r4, #12]
 800d342:	6923      	ldr	r3, [r4, #16]
 800d344:	b94b      	cbnz	r3, 800d35a <__swsetup_r+0x9a>
 800d346:	89a3      	ldrh	r3, [r4, #12]
 800d348:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d34c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d350:	d003      	beq.n	800d35a <__swsetup_r+0x9a>
 800d352:	4621      	mov	r1, r4
 800d354:	4630      	mov	r0, r6
 800d356:	f001 f881 	bl	800e45c <__smakebuf_r>
 800d35a:	89a0      	ldrh	r0, [r4, #12]
 800d35c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d360:	f010 0301 	ands.w	r3, r0, #1
 800d364:	d00a      	beq.n	800d37c <__swsetup_r+0xbc>
 800d366:	2300      	movs	r3, #0
 800d368:	60a3      	str	r3, [r4, #8]
 800d36a:	6963      	ldr	r3, [r4, #20]
 800d36c:	425b      	negs	r3, r3
 800d36e:	61a3      	str	r3, [r4, #24]
 800d370:	6923      	ldr	r3, [r4, #16]
 800d372:	b943      	cbnz	r3, 800d386 <__swsetup_r+0xc6>
 800d374:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d378:	d1ba      	bne.n	800d2f0 <__swsetup_r+0x30>
 800d37a:	bd70      	pop	{r4, r5, r6, pc}
 800d37c:	0781      	lsls	r1, r0, #30
 800d37e:	bf58      	it	pl
 800d380:	6963      	ldrpl	r3, [r4, #20]
 800d382:	60a3      	str	r3, [r4, #8]
 800d384:	e7f4      	b.n	800d370 <__swsetup_r+0xb0>
 800d386:	2000      	movs	r0, #0
 800d388:	e7f7      	b.n	800d37a <__swsetup_r+0xba>
 800d38a:	bf00      	nop
 800d38c:	20000010 	.word	0x20000010
 800d390:	08010564 	.word	0x08010564
 800d394:	08010584 	.word	0x08010584
 800d398:	08010544 	.word	0x08010544

0800d39c <quorem>:
 800d39c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3a0:	6903      	ldr	r3, [r0, #16]
 800d3a2:	690c      	ldr	r4, [r1, #16]
 800d3a4:	42a3      	cmp	r3, r4
 800d3a6:	4607      	mov	r7, r0
 800d3a8:	f2c0 8081 	blt.w	800d4ae <quorem+0x112>
 800d3ac:	3c01      	subs	r4, #1
 800d3ae:	f101 0814 	add.w	r8, r1, #20
 800d3b2:	f100 0514 	add.w	r5, r0, #20
 800d3b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d3ba:	9301      	str	r3, [sp, #4]
 800d3bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d3c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d3c4:	3301      	adds	r3, #1
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d3cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d3d0:	fbb2 f6f3 	udiv	r6, r2, r3
 800d3d4:	d331      	bcc.n	800d43a <quorem+0x9e>
 800d3d6:	f04f 0e00 	mov.w	lr, #0
 800d3da:	4640      	mov	r0, r8
 800d3dc:	46ac      	mov	ip, r5
 800d3de:	46f2      	mov	sl, lr
 800d3e0:	f850 2b04 	ldr.w	r2, [r0], #4
 800d3e4:	b293      	uxth	r3, r2
 800d3e6:	fb06 e303 	mla	r3, r6, r3, lr
 800d3ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d3ee:	b29b      	uxth	r3, r3
 800d3f0:	ebaa 0303 	sub.w	r3, sl, r3
 800d3f4:	f8dc a000 	ldr.w	sl, [ip]
 800d3f8:	0c12      	lsrs	r2, r2, #16
 800d3fa:	fa13 f38a 	uxtah	r3, r3, sl
 800d3fe:	fb06 e202 	mla	r2, r6, r2, lr
 800d402:	9300      	str	r3, [sp, #0]
 800d404:	9b00      	ldr	r3, [sp, #0]
 800d406:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d40a:	b292      	uxth	r2, r2
 800d40c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d410:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d414:	f8bd 3000 	ldrh.w	r3, [sp]
 800d418:	4581      	cmp	r9, r0
 800d41a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d41e:	f84c 3b04 	str.w	r3, [ip], #4
 800d422:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d426:	d2db      	bcs.n	800d3e0 <quorem+0x44>
 800d428:	f855 300b 	ldr.w	r3, [r5, fp]
 800d42c:	b92b      	cbnz	r3, 800d43a <quorem+0x9e>
 800d42e:	9b01      	ldr	r3, [sp, #4]
 800d430:	3b04      	subs	r3, #4
 800d432:	429d      	cmp	r5, r3
 800d434:	461a      	mov	r2, r3
 800d436:	d32e      	bcc.n	800d496 <quorem+0xfa>
 800d438:	613c      	str	r4, [r7, #16]
 800d43a:	4638      	mov	r0, r7
 800d43c:	f001 fae6 	bl	800ea0c <__mcmp>
 800d440:	2800      	cmp	r0, #0
 800d442:	db24      	blt.n	800d48e <quorem+0xf2>
 800d444:	3601      	adds	r6, #1
 800d446:	4628      	mov	r0, r5
 800d448:	f04f 0c00 	mov.w	ip, #0
 800d44c:	f858 2b04 	ldr.w	r2, [r8], #4
 800d450:	f8d0 e000 	ldr.w	lr, [r0]
 800d454:	b293      	uxth	r3, r2
 800d456:	ebac 0303 	sub.w	r3, ip, r3
 800d45a:	0c12      	lsrs	r2, r2, #16
 800d45c:	fa13 f38e 	uxtah	r3, r3, lr
 800d460:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d464:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d468:	b29b      	uxth	r3, r3
 800d46a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d46e:	45c1      	cmp	r9, r8
 800d470:	f840 3b04 	str.w	r3, [r0], #4
 800d474:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d478:	d2e8      	bcs.n	800d44c <quorem+0xb0>
 800d47a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d47e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d482:	b922      	cbnz	r2, 800d48e <quorem+0xf2>
 800d484:	3b04      	subs	r3, #4
 800d486:	429d      	cmp	r5, r3
 800d488:	461a      	mov	r2, r3
 800d48a:	d30a      	bcc.n	800d4a2 <quorem+0x106>
 800d48c:	613c      	str	r4, [r7, #16]
 800d48e:	4630      	mov	r0, r6
 800d490:	b003      	add	sp, #12
 800d492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d496:	6812      	ldr	r2, [r2, #0]
 800d498:	3b04      	subs	r3, #4
 800d49a:	2a00      	cmp	r2, #0
 800d49c:	d1cc      	bne.n	800d438 <quorem+0x9c>
 800d49e:	3c01      	subs	r4, #1
 800d4a0:	e7c7      	b.n	800d432 <quorem+0x96>
 800d4a2:	6812      	ldr	r2, [r2, #0]
 800d4a4:	3b04      	subs	r3, #4
 800d4a6:	2a00      	cmp	r2, #0
 800d4a8:	d1f0      	bne.n	800d48c <quorem+0xf0>
 800d4aa:	3c01      	subs	r4, #1
 800d4ac:	e7eb      	b.n	800d486 <quorem+0xea>
 800d4ae:	2000      	movs	r0, #0
 800d4b0:	e7ee      	b.n	800d490 <quorem+0xf4>
 800d4b2:	0000      	movs	r0, r0
 800d4b4:	0000      	movs	r0, r0
	...

0800d4b8 <_dtoa_r>:
 800d4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4bc:	ed2d 8b04 	vpush	{d8-d9}
 800d4c0:	ec57 6b10 	vmov	r6, r7, d0
 800d4c4:	b093      	sub	sp, #76	; 0x4c
 800d4c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d4c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d4cc:	9106      	str	r1, [sp, #24]
 800d4ce:	ee10 aa10 	vmov	sl, s0
 800d4d2:	4604      	mov	r4, r0
 800d4d4:	9209      	str	r2, [sp, #36]	; 0x24
 800d4d6:	930c      	str	r3, [sp, #48]	; 0x30
 800d4d8:	46bb      	mov	fp, r7
 800d4da:	b975      	cbnz	r5, 800d4fa <_dtoa_r+0x42>
 800d4dc:	2010      	movs	r0, #16
 800d4de:	f000 fffd 	bl	800e4dc <malloc>
 800d4e2:	4602      	mov	r2, r0
 800d4e4:	6260      	str	r0, [r4, #36]	; 0x24
 800d4e6:	b920      	cbnz	r0, 800d4f2 <_dtoa_r+0x3a>
 800d4e8:	4ba7      	ldr	r3, [pc, #668]	; (800d788 <_dtoa_r+0x2d0>)
 800d4ea:	21ea      	movs	r1, #234	; 0xea
 800d4ec:	48a7      	ldr	r0, [pc, #668]	; (800d78c <_dtoa_r+0x2d4>)
 800d4ee:	f001 fe45 	bl	800f17c <__assert_func>
 800d4f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d4f6:	6005      	str	r5, [r0, #0]
 800d4f8:	60c5      	str	r5, [r0, #12]
 800d4fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4fc:	6819      	ldr	r1, [r3, #0]
 800d4fe:	b151      	cbz	r1, 800d516 <_dtoa_r+0x5e>
 800d500:	685a      	ldr	r2, [r3, #4]
 800d502:	604a      	str	r2, [r1, #4]
 800d504:	2301      	movs	r3, #1
 800d506:	4093      	lsls	r3, r2
 800d508:	608b      	str	r3, [r1, #8]
 800d50a:	4620      	mov	r0, r4
 800d50c:	f001 f83c 	bl	800e588 <_Bfree>
 800d510:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d512:	2200      	movs	r2, #0
 800d514:	601a      	str	r2, [r3, #0]
 800d516:	1e3b      	subs	r3, r7, #0
 800d518:	bfaa      	itet	ge
 800d51a:	2300      	movge	r3, #0
 800d51c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d520:	f8c8 3000 	strge.w	r3, [r8]
 800d524:	4b9a      	ldr	r3, [pc, #616]	; (800d790 <_dtoa_r+0x2d8>)
 800d526:	bfbc      	itt	lt
 800d528:	2201      	movlt	r2, #1
 800d52a:	f8c8 2000 	strlt.w	r2, [r8]
 800d52e:	ea33 030b 	bics.w	r3, r3, fp
 800d532:	d11b      	bne.n	800d56c <_dtoa_r+0xb4>
 800d534:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d536:	f242 730f 	movw	r3, #9999	; 0x270f
 800d53a:	6013      	str	r3, [r2, #0]
 800d53c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d540:	4333      	orrs	r3, r6
 800d542:	f000 8592 	beq.w	800e06a <_dtoa_r+0xbb2>
 800d546:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d548:	b963      	cbnz	r3, 800d564 <_dtoa_r+0xac>
 800d54a:	4b92      	ldr	r3, [pc, #584]	; (800d794 <_dtoa_r+0x2dc>)
 800d54c:	e022      	b.n	800d594 <_dtoa_r+0xdc>
 800d54e:	4b92      	ldr	r3, [pc, #584]	; (800d798 <_dtoa_r+0x2e0>)
 800d550:	9301      	str	r3, [sp, #4]
 800d552:	3308      	adds	r3, #8
 800d554:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d556:	6013      	str	r3, [r2, #0]
 800d558:	9801      	ldr	r0, [sp, #4]
 800d55a:	b013      	add	sp, #76	; 0x4c
 800d55c:	ecbd 8b04 	vpop	{d8-d9}
 800d560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d564:	4b8b      	ldr	r3, [pc, #556]	; (800d794 <_dtoa_r+0x2dc>)
 800d566:	9301      	str	r3, [sp, #4]
 800d568:	3303      	adds	r3, #3
 800d56a:	e7f3      	b.n	800d554 <_dtoa_r+0x9c>
 800d56c:	2200      	movs	r2, #0
 800d56e:	2300      	movs	r3, #0
 800d570:	4650      	mov	r0, sl
 800d572:	4659      	mov	r1, fp
 800d574:	f7f3 faa8 	bl	8000ac8 <__aeabi_dcmpeq>
 800d578:	ec4b ab19 	vmov	d9, sl, fp
 800d57c:	4680      	mov	r8, r0
 800d57e:	b158      	cbz	r0, 800d598 <_dtoa_r+0xe0>
 800d580:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d582:	2301      	movs	r3, #1
 800d584:	6013      	str	r3, [r2, #0]
 800d586:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d588:	2b00      	cmp	r3, #0
 800d58a:	f000 856b 	beq.w	800e064 <_dtoa_r+0xbac>
 800d58e:	4883      	ldr	r0, [pc, #524]	; (800d79c <_dtoa_r+0x2e4>)
 800d590:	6018      	str	r0, [r3, #0]
 800d592:	1e43      	subs	r3, r0, #1
 800d594:	9301      	str	r3, [sp, #4]
 800d596:	e7df      	b.n	800d558 <_dtoa_r+0xa0>
 800d598:	ec4b ab10 	vmov	d0, sl, fp
 800d59c:	aa10      	add	r2, sp, #64	; 0x40
 800d59e:	a911      	add	r1, sp, #68	; 0x44
 800d5a0:	4620      	mov	r0, r4
 800d5a2:	f001 fad9 	bl	800eb58 <__d2b>
 800d5a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d5aa:	ee08 0a10 	vmov	s16, r0
 800d5ae:	2d00      	cmp	r5, #0
 800d5b0:	f000 8084 	beq.w	800d6bc <_dtoa_r+0x204>
 800d5b4:	ee19 3a90 	vmov	r3, s19
 800d5b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d5bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d5c0:	4656      	mov	r6, sl
 800d5c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d5c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d5ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d5ce:	4b74      	ldr	r3, [pc, #464]	; (800d7a0 <_dtoa_r+0x2e8>)
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	4630      	mov	r0, r6
 800d5d4:	4639      	mov	r1, r7
 800d5d6:	f7f2 fe57 	bl	8000288 <__aeabi_dsub>
 800d5da:	a365      	add	r3, pc, #404	; (adr r3, 800d770 <_dtoa_r+0x2b8>)
 800d5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e0:	f7f3 f80a 	bl	80005f8 <__aeabi_dmul>
 800d5e4:	a364      	add	r3, pc, #400	; (adr r3, 800d778 <_dtoa_r+0x2c0>)
 800d5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ea:	f7f2 fe4f 	bl	800028c <__adddf3>
 800d5ee:	4606      	mov	r6, r0
 800d5f0:	4628      	mov	r0, r5
 800d5f2:	460f      	mov	r7, r1
 800d5f4:	f7f2 ff96 	bl	8000524 <__aeabi_i2d>
 800d5f8:	a361      	add	r3, pc, #388	; (adr r3, 800d780 <_dtoa_r+0x2c8>)
 800d5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5fe:	f7f2 fffb 	bl	80005f8 <__aeabi_dmul>
 800d602:	4602      	mov	r2, r0
 800d604:	460b      	mov	r3, r1
 800d606:	4630      	mov	r0, r6
 800d608:	4639      	mov	r1, r7
 800d60a:	f7f2 fe3f 	bl	800028c <__adddf3>
 800d60e:	4606      	mov	r6, r0
 800d610:	460f      	mov	r7, r1
 800d612:	f7f3 faa1 	bl	8000b58 <__aeabi_d2iz>
 800d616:	2200      	movs	r2, #0
 800d618:	9000      	str	r0, [sp, #0]
 800d61a:	2300      	movs	r3, #0
 800d61c:	4630      	mov	r0, r6
 800d61e:	4639      	mov	r1, r7
 800d620:	f7f3 fa5c 	bl	8000adc <__aeabi_dcmplt>
 800d624:	b150      	cbz	r0, 800d63c <_dtoa_r+0x184>
 800d626:	9800      	ldr	r0, [sp, #0]
 800d628:	f7f2 ff7c 	bl	8000524 <__aeabi_i2d>
 800d62c:	4632      	mov	r2, r6
 800d62e:	463b      	mov	r3, r7
 800d630:	f7f3 fa4a 	bl	8000ac8 <__aeabi_dcmpeq>
 800d634:	b910      	cbnz	r0, 800d63c <_dtoa_r+0x184>
 800d636:	9b00      	ldr	r3, [sp, #0]
 800d638:	3b01      	subs	r3, #1
 800d63a:	9300      	str	r3, [sp, #0]
 800d63c:	9b00      	ldr	r3, [sp, #0]
 800d63e:	2b16      	cmp	r3, #22
 800d640:	d85a      	bhi.n	800d6f8 <_dtoa_r+0x240>
 800d642:	9a00      	ldr	r2, [sp, #0]
 800d644:	4b57      	ldr	r3, [pc, #348]	; (800d7a4 <_dtoa_r+0x2ec>)
 800d646:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d64e:	ec51 0b19 	vmov	r0, r1, d9
 800d652:	f7f3 fa43 	bl	8000adc <__aeabi_dcmplt>
 800d656:	2800      	cmp	r0, #0
 800d658:	d050      	beq.n	800d6fc <_dtoa_r+0x244>
 800d65a:	9b00      	ldr	r3, [sp, #0]
 800d65c:	3b01      	subs	r3, #1
 800d65e:	9300      	str	r3, [sp, #0]
 800d660:	2300      	movs	r3, #0
 800d662:	930b      	str	r3, [sp, #44]	; 0x2c
 800d664:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d666:	1b5d      	subs	r5, r3, r5
 800d668:	1e6b      	subs	r3, r5, #1
 800d66a:	9305      	str	r3, [sp, #20]
 800d66c:	bf45      	ittet	mi
 800d66e:	f1c5 0301 	rsbmi	r3, r5, #1
 800d672:	9304      	strmi	r3, [sp, #16]
 800d674:	2300      	movpl	r3, #0
 800d676:	2300      	movmi	r3, #0
 800d678:	bf4c      	ite	mi
 800d67a:	9305      	strmi	r3, [sp, #20]
 800d67c:	9304      	strpl	r3, [sp, #16]
 800d67e:	9b00      	ldr	r3, [sp, #0]
 800d680:	2b00      	cmp	r3, #0
 800d682:	db3d      	blt.n	800d700 <_dtoa_r+0x248>
 800d684:	9b05      	ldr	r3, [sp, #20]
 800d686:	9a00      	ldr	r2, [sp, #0]
 800d688:	920a      	str	r2, [sp, #40]	; 0x28
 800d68a:	4413      	add	r3, r2
 800d68c:	9305      	str	r3, [sp, #20]
 800d68e:	2300      	movs	r3, #0
 800d690:	9307      	str	r3, [sp, #28]
 800d692:	9b06      	ldr	r3, [sp, #24]
 800d694:	2b09      	cmp	r3, #9
 800d696:	f200 8089 	bhi.w	800d7ac <_dtoa_r+0x2f4>
 800d69a:	2b05      	cmp	r3, #5
 800d69c:	bfc4      	itt	gt
 800d69e:	3b04      	subgt	r3, #4
 800d6a0:	9306      	strgt	r3, [sp, #24]
 800d6a2:	9b06      	ldr	r3, [sp, #24]
 800d6a4:	f1a3 0302 	sub.w	r3, r3, #2
 800d6a8:	bfcc      	ite	gt
 800d6aa:	2500      	movgt	r5, #0
 800d6ac:	2501      	movle	r5, #1
 800d6ae:	2b03      	cmp	r3, #3
 800d6b0:	f200 8087 	bhi.w	800d7c2 <_dtoa_r+0x30a>
 800d6b4:	e8df f003 	tbb	[pc, r3]
 800d6b8:	59383a2d 	.word	0x59383a2d
 800d6bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d6c0:	441d      	add	r5, r3
 800d6c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d6c6:	2b20      	cmp	r3, #32
 800d6c8:	bfc1      	itttt	gt
 800d6ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d6ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d6d2:	fa0b f303 	lslgt.w	r3, fp, r3
 800d6d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d6da:	bfda      	itte	le
 800d6dc:	f1c3 0320 	rsble	r3, r3, #32
 800d6e0:	fa06 f003 	lslle.w	r0, r6, r3
 800d6e4:	4318      	orrgt	r0, r3
 800d6e6:	f7f2 ff0d 	bl	8000504 <__aeabi_ui2d>
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	4606      	mov	r6, r0
 800d6ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d6f2:	3d01      	subs	r5, #1
 800d6f4:	930e      	str	r3, [sp, #56]	; 0x38
 800d6f6:	e76a      	b.n	800d5ce <_dtoa_r+0x116>
 800d6f8:	2301      	movs	r3, #1
 800d6fa:	e7b2      	b.n	800d662 <_dtoa_r+0x1aa>
 800d6fc:	900b      	str	r0, [sp, #44]	; 0x2c
 800d6fe:	e7b1      	b.n	800d664 <_dtoa_r+0x1ac>
 800d700:	9b04      	ldr	r3, [sp, #16]
 800d702:	9a00      	ldr	r2, [sp, #0]
 800d704:	1a9b      	subs	r3, r3, r2
 800d706:	9304      	str	r3, [sp, #16]
 800d708:	4253      	negs	r3, r2
 800d70a:	9307      	str	r3, [sp, #28]
 800d70c:	2300      	movs	r3, #0
 800d70e:	930a      	str	r3, [sp, #40]	; 0x28
 800d710:	e7bf      	b.n	800d692 <_dtoa_r+0x1da>
 800d712:	2300      	movs	r3, #0
 800d714:	9308      	str	r3, [sp, #32]
 800d716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d718:	2b00      	cmp	r3, #0
 800d71a:	dc55      	bgt.n	800d7c8 <_dtoa_r+0x310>
 800d71c:	2301      	movs	r3, #1
 800d71e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d722:	461a      	mov	r2, r3
 800d724:	9209      	str	r2, [sp, #36]	; 0x24
 800d726:	e00c      	b.n	800d742 <_dtoa_r+0x28a>
 800d728:	2301      	movs	r3, #1
 800d72a:	e7f3      	b.n	800d714 <_dtoa_r+0x25c>
 800d72c:	2300      	movs	r3, #0
 800d72e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d730:	9308      	str	r3, [sp, #32]
 800d732:	9b00      	ldr	r3, [sp, #0]
 800d734:	4413      	add	r3, r2
 800d736:	9302      	str	r3, [sp, #8]
 800d738:	3301      	adds	r3, #1
 800d73a:	2b01      	cmp	r3, #1
 800d73c:	9303      	str	r3, [sp, #12]
 800d73e:	bfb8      	it	lt
 800d740:	2301      	movlt	r3, #1
 800d742:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d744:	2200      	movs	r2, #0
 800d746:	6042      	str	r2, [r0, #4]
 800d748:	2204      	movs	r2, #4
 800d74a:	f102 0614 	add.w	r6, r2, #20
 800d74e:	429e      	cmp	r6, r3
 800d750:	6841      	ldr	r1, [r0, #4]
 800d752:	d93d      	bls.n	800d7d0 <_dtoa_r+0x318>
 800d754:	4620      	mov	r0, r4
 800d756:	f000 fed7 	bl	800e508 <_Balloc>
 800d75a:	9001      	str	r0, [sp, #4]
 800d75c:	2800      	cmp	r0, #0
 800d75e:	d13b      	bne.n	800d7d8 <_dtoa_r+0x320>
 800d760:	4b11      	ldr	r3, [pc, #68]	; (800d7a8 <_dtoa_r+0x2f0>)
 800d762:	4602      	mov	r2, r0
 800d764:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d768:	e6c0      	b.n	800d4ec <_dtoa_r+0x34>
 800d76a:	2301      	movs	r3, #1
 800d76c:	e7df      	b.n	800d72e <_dtoa_r+0x276>
 800d76e:	bf00      	nop
 800d770:	636f4361 	.word	0x636f4361
 800d774:	3fd287a7 	.word	0x3fd287a7
 800d778:	8b60c8b3 	.word	0x8b60c8b3
 800d77c:	3fc68a28 	.word	0x3fc68a28
 800d780:	509f79fb 	.word	0x509f79fb
 800d784:	3fd34413 	.word	0x3fd34413
 800d788:	080104c1 	.word	0x080104c1
 800d78c:	080104d8 	.word	0x080104d8
 800d790:	7ff00000 	.word	0x7ff00000
 800d794:	080104bd 	.word	0x080104bd
 800d798:	080104b4 	.word	0x080104b4
 800d79c:	08010491 	.word	0x08010491
 800d7a0:	3ff80000 	.word	0x3ff80000
 800d7a4:	08010628 	.word	0x08010628
 800d7a8:	08010533 	.word	0x08010533
 800d7ac:	2501      	movs	r5, #1
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	9306      	str	r3, [sp, #24]
 800d7b2:	9508      	str	r5, [sp, #32]
 800d7b4:	f04f 33ff 	mov.w	r3, #4294967295
 800d7b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d7bc:	2200      	movs	r2, #0
 800d7be:	2312      	movs	r3, #18
 800d7c0:	e7b0      	b.n	800d724 <_dtoa_r+0x26c>
 800d7c2:	2301      	movs	r3, #1
 800d7c4:	9308      	str	r3, [sp, #32]
 800d7c6:	e7f5      	b.n	800d7b4 <_dtoa_r+0x2fc>
 800d7c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d7ce:	e7b8      	b.n	800d742 <_dtoa_r+0x28a>
 800d7d0:	3101      	adds	r1, #1
 800d7d2:	6041      	str	r1, [r0, #4]
 800d7d4:	0052      	lsls	r2, r2, #1
 800d7d6:	e7b8      	b.n	800d74a <_dtoa_r+0x292>
 800d7d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d7da:	9a01      	ldr	r2, [sp, #4]
 800d7dc:	601a      	str	r2, [r3, #0]
 800d7de:	9b03      	ldr	r3, [sp, #12]
 800d7e0:	2b0e      	cmp	r3, #14
 800d7e2:	f200 809d 	bhi.w	800d920 <_dtoa_r+0x468>
 800d7e6:	2d00      	cmp	r5, #0
 800d7e8:	f000 809a 	beq.w	800d920 <_dtoa_r+0x468>
 800d7ec:	9b00      	ldr	r3, [sp, #0]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	dd32      	ble.n	800d858 <_dtoa_r+0x3a0>
 800d7f2:	4ab7      	ldr	r2, [pc, #732]	; (800dad0 <_dtoa_r+0x618>)
 800d7f4:	f003 030f 	and.w	r3, r3, #15
 800d7f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d7fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d800:	9b00      	ldr	r3, [sp, #0]
 800d802:	05d8      	lsls	r0, r3, #23
 800d804:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d808:	d516      	bpl.n	800d838 <_dtoa_r+0x380>
 800d80a:	4bb2      	ldr	r3, [pc, #712]	; (800dad4 <_dtoa_r+0x61c>)
 800d80c:	ec51 0b19 	vmov	r0, r1, d9
 800d810:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d814:	f7f3 f81a 	bl	800084c <__aeabi_ddiv>
 800d818:	f007 070f 	and.w	r7, r7, #15
 800d81c:	4682      	mov	sl, r0
 800d81e:	468b      	mov	fp, r1
 800d820:	2503      	movs	r5, #3
 800d822:	4eac      	ldr	r6, [pc, #688]	; (800dad4 <_dtoa_r+0x61c>)
 800d824:	b957      	cbnz	r7, 800d83c <_dtoa_r+0x384>
 800d826:	4642      	mov	r2, r8
 800d828:	464b      	mov	r3, r9
 800d82a:	4650      	mov	r0, sl
 800d82c:	4659      	mov	r1, fp
 800d82e:	f7f3 f80d 	bl	800084c <__aeabi_ddiv>
 800d832:	4682      	mov	sl, r0
 800d834:	468b      	mov	fp, r1
 800d836:	e028      	b.n	800d88a <_dtoa_r+0x3d2>
 800d838:	2502      	movs	r5, #2
 800d83a:	e7f2      	b.n	800d822 <_dtoa_r+0x36a>
 800d83c:	07f9      	lsls	r1, r7, #31
 800d83e:	d508      	bpl.n	800d852 <_dtoa_r+0x39a>
 800d840:	4640      	mov	r0, r8
 800d842:	4649      	mov	r1, r9
 800d844:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d848:	f7f2 fed6 	bl	80005f8 <__aeabi_dmul>
 800d84c:	3501      	adds	r5, #1
 800d84e:	4680      	mov	r8, r0
 800d850:	4689      	mov	r9, r1
 800d852:	107f      	asrs	r7, r7, #1
 800d854:	3608      	adds	r6, #8
 800d856:	e7e5      	b.n	800d824 <_dtoa_r+0x36c>
 800d858:	f000 809b 	beq.w	800d992 <_dtoa_r+0x4da>
 800d85c:	9b00      	ldr	r3, [sp, #0]
 800d85e:	4f9d      	ldr	r7, [pc, #628]	; (800dad4 <_dtoa_r+0x61c>)
 800d860:	425e      	negs	r6, r3
 800d862:	4b9b      	ldr	r3, [pc, #620]	; (800dad0 <_dtoa_r+0x618>)
 800d864:	f006 020f 	and.w	r2, r6, #15
 800d868:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d870:	ec51 0b19 	vmov	r0, r1, d9
 800d874:	f7f2 fec0 	bl	80005f8 <__aeabi_dmul>
 800d878:	1136      	asrs	r6, r6, #4
 800d87a:	4682      	mov	sl, r0
 800d87c:	468b      	mov	fp, r1
 800d87e:	2300      	movs	r3, #0
 800d880:	2502      	movs	r5, #2
 800d882:	2e00      	cmp	r6, #0
 800d884:	d17a      	bne.n	800d97c <_dtoa_r+0x4c4>
 800d886:	2b00      	cmp	r3, #0
 800d888:	d1d3      	bne.n	800d832 <_dtoa_r+0x37a>
 800d88a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	f000 8082 	beq.w	800d996 <_dtoa_r+0x4de>
 800d892:	4b91      	ldr	r3, [pc, #580]	; (800dad8 <_dtoa_r+0x620>)
 800d894:	2200      	movs	r2, #0
 800d896:	4650      	mov	r0, sl
 800d898:	4659      	mov	r1, fp
 800d89a:	f7f3 f91f 	bl	8000adc <__aeabi_dcmplt>
 800d89e:	2800      	cmp	r0, #0
 800d8a0:	d079      	beq.n	800d996 <_dtoa_r+0x4de>
 800d8a2:	9b03      	ldr	r3, [sp, #12]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d076      	beq.n	800d996 <_dtoa_r+0x4de>
 800d8a8:	9b02      	ldr	r3, [sp, #8]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	dd36      	ble.n	800d91c <_dtoa_r+0x464>
 800d8ae:	9b00      	ldr	r3, [sp, #0]
 800d8b0:	4650      	mov	r0, sl
 800d8b2:	4659      	mov	r1, fp
 800d8b4:	1e5f      	subs	r7, r3, #1
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	4b88      	ldr	r3, [pc, #544]	; (800dadc <_dtoa_r+0x624>)
 800d8ba:	f7f2 fe9d 	bl	80005f8 <__aeabi_dmul>
 800d8be:	9e02      	ldr	r6, [sp, #8]
 800d8c0:	4682      	mov	sl, r0
 800d8c2:	468b      	mov	fp, r1
 800d8c4:	3501      	adds	r5, #1
 800d8c6:	4628      	mov	r0, r5
 800d8c8:	f7f2 fe2c 	bl	8000524 <__aeabi_i2d>
 800d8cc:	4652      	mov	r2, sl
 800d8ce:	465b      	mov	r3, fp
 800d8d0:	f7f2 fe92 	bl	80005f8 <__aeabi_dmul>
 800d8d4:	4b82      	ldr	r3, [pc, #520]	; (800dae0 <_dtoa_r+0x628>)
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	f7f2 fcd8 	bl	800028c <__adddf3>
 800d8dc:	46d0      	mov	r8, sl
 800d8de:	46d9      	mov	r9, fp
 800d8e0:	4682      	mov	sl, r0
 800d8e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d8e6:	2e00      	cmp	r6, #0
 800d8e8:	d158      	bne.n	800d99c <_dtoa_r+0x4e4>
 800d8ea:	4b7e      	ldr	r3, [pc, #504]	; (800dae4 <_dtoa_r+0x62c>)
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	4640      	mov	r0, r8
 800d8f0:	4649      	mov	r1, r9
 800d8f2:	f7f2 fcc9 	bl	8000288 <__aeabi_dsub>
 800d8f6:	4652      	mov	r2, sl
 800d8f8:	465b      	mov	r3, fp
 800d8fa:	4680      	mov	r8, r0
 800d8fc:	4689      	mov	r9, r1
 800d8fe:	f7f3 f90b 	bl	8000b18 <__aeabi_dcmpgt>
 800d902:	2800      	cmp	r0, #0
 800d904:	f040 8295 	bne.w	800de32 <_dtoa_r+0x97a>
 800d908:	4652      	mov	r2, sl
 800d90a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d90e:	4640      	mov	r0, r8
 800d910:	4649      	mov	r1, r9
 800d912:	f7f3 f8e3 	bl	8000adc <__aeabi_dcmplt>
 800d916:	2800      	cmp	r0, #0
 800d918:	f040 8289 	bne.w	800de2e <_dtoa_r+0x976>
 800d91c:	ec5b ab19 	vmov	sl, fp, d9
 800d920:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d922:	2b00      	cmp	r3, #0
 800d924:	f2c0 8148 	blt.w	800dbb8 <_dtoa_r+0x700>
 800d928:	9a00      	ldr	r2, [sp, #0]
 800d92a:	2a0e      	cmp	r2, #14
 800d92c:	f300 8144 	bgt.w	800dbb8 <_dtoa_r+0x700>
 800d930:	4b67      	ldr	r3, [pc, #412]	; (800dad0 <_dtoa_r+0x618>)
 800d932:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d936:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d93a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	f280 80d5 	bge.w	800daec <_dtoa_r+0x634>
 800d942:	9b03      	ldr	r3, [sp, #12]
 800d944:	2b00      	cmp	r3, #0
 800d946:	f300 80d1 	bgt.w	800daec <_dtoa_r+0x634>
 800d94a:	f040 826f 	bne.w	800de2c <_dtoa_r+0x974>
 800d94e:	4b65      	ldr	r3, [pc, #404]	; (800dae4 <_dtoa_r+0x62c>)
 800d950:	2200      	movs	r2, #0
 800d952:	4640      	mov	r0, r8
 800d954:	4649      	mov	r1, r9
 800d956:	f7f2 fe4f 	bl	80005f8 <__aeabi_dmul>
 800d95a:	4652      	mov	r2, sl
 800d95c:	465b      	mov	r3, fp
 800d95e:	f7f3 f8d1 	bl	8000b04 <__aeabi_dcmpge>
 800d962:	9e03      	ldr	r6, [sp, #12]
 800d964:	4637      	mov	r7, r6
 800d966:	2800      	cmp	r0, #0
 800d968:	f040 8245 	bne.w	800ddf6 <_dtoa_r+0x93e>
 800d96c:	9d01      	ldr	r5, [sp, #4]
 800d96e:	2331      	movs	r3, #49	; 0x31
 800d970:	f805 3b01 	strb.w	r3, [r5], #1
 800d974:	9b00      	ldr	r3, [sp, #0]
 800d976:	3301      	adds	r3, #1
 800d978:	9300      	str	r3, [sp, #0]
 800d97a:	e240      	b.n	800ddfe <_dtoa_r+0x946>
 800d97c:	07f2      	lsls	r2, r6, #31
 800d97e:	d505      	bpl.n	800d98c <_dtoa_r+0x4d4>
 800d980:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d984:	f7f2 fe38 	bl	80005f8 <__aeabi_dmul>
 800d988:	3501      	adds	r5, #1
 800d98a:	2301      	movs	r3, #1
 800d98c:	1076      	asrs	r6, r6, #1
 800d98e:	3708      	adds	r7, #8
 800d990:	e777      	b.n	800d882 <_dtoa_r+0x3ca>
 800d992:	2502      	movs	r5, #2
 800d994:	e779      	b.n	800d88a <_dtoa_r+0x3d2>
 800d996:	9f00      	ldr	r7, [sp, #0]
 800d998:	9e03      	ldr	r6, [sp, #12]
 800d99a:	e794      	b.n	800d8c6 <_dtoa_r+0x40e>
 800d99c:	9901      	ldr	r1, [sp, #4]
 800d99e:	4b4c      	ldr	r3, [pc, #304]	; (800dad0 <_dtoa_r+0x618>)
 800d9a0:	4431      	add	r1, r6
 800d9a2:	910d      	str	r1, [sp, #52]	; 0x34
 800d9a4:	9908      	ldr	r1, [sp, #32]
 800d9a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d9aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d9ae:	2900      	cmp	r1, #0
 800d9b0:	d043      	beq.n	800da3a <_dtoa_r+0x582>
 800d9b2:	494d      	ldr	r1, [pc, #308]	; (800dae8 <_dtoa_r+0x630>)
 800d9b4:	2000      	movs	r0, #0
 800d9b6:	f7f2 ff49 	bl	800084c <__aeabi_ddiv>
 800d9ba:	4652      	mov	r2, sl
 800d9bc:	465b      	mov	r3, fp
 800d9be:	f7f2 fc63 	bl	8000288 <__aeabi_dsub>
 800d9c2:	9d01      	ldr	r5, [sp, #4]
 800d9c4:	4682      	mov	sl, r0
 800d9c6:	468b      	mov	fp, r1
 800d9c8:	4649      	mov	r1, r9
 800d9ca:	4640      	mov	r0, r8
 800d9cc:	f7f3 f8c4 	bl	8000b58 <__aeabi_d2iz>
 800d9d0:	4606      	mov	r6, r0
 800d9d2:	f7f2 fda7 	bl	8000524 <__aeabi_i2d>
 800d9d6:	4602      	mov	r2, r0
 800d9d8:	460b      	mov	r3, r1
 800d9da:	4640      	mov	r0, r8
 800d9dc:	4649      	mov	r1, r9
 800d9de:	f7f2 fc53 	bl	8000288 <__aeabi_dsub>
 800d9e2:	3630      	adds	r6, #48	; 0x30
 800d9e4:	f805 6b01 	strb.w	r6, [r5], #1
 800d9e8:	4652      	mov	r2, sl
 800d9ea:	465b      	mov	r3, fp
 800d9ec:	4680      	mov	r8, r0
 800d9ee:	4689      	mov	r9, r1
 800d9f0:	f7f3 f874 	bl	8000adc <__aeabi_dcmplt>
 800d9f4:	2800      	cmp	r0, #0
 800d9f6:	d163      	bne.n	800dac0 <_dtoa_r+0x608>
 800d9f8:	4642      	mov	r2, r8
 800d9fa:	464b      	mov	r3, r9
 800d9fc:	4936      	ldr	r1, [pc, #216]	; (800dad8 <_dtoa_r+0x620>)
 800d9fe:	2000      	movs	r0, #0
 800da00:	f7f2 fc42 	bl	8000288 <__aeabi_dsub>
 800da04:	4652      	mov	r2, sl
 800da06:	465b      	mov	r3, fp
 800da08:	f7f3 f868 	bl	8000adc <__aeabi_dcmplt>
 800da0c:	2800      	cmp	r0, #0
 800da0e:	f040 80b5 	bne.w	800db7c <_dtoa_r+0x6c4>
 800da12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da14:	429d      	cmp	r5, r3
 800da16:	d081      	beq.n	800d91c <_dtoa_r+0x464>
 800da18:	4b30      	ldr	r3, [pc, #192]	; (800dadc <_dtoa_r+0x624>)
 800da1a:	2200      	movs	r2, #0
 800da1c:	4650      	mov	r0, sl
 800da1e:	4659      	mov	r1, fp
 800da20:	f7f2 fdea 	bl	80005f8 <__aeabi_dmul>
 800da24:	4b2d      	ldr	r3, [pc, #180]	; (800dadc <_dtoa_r+0x624>)
 800da26:	4682      	mov	sl, r0
 800da28:	468b      	mov	fp, r1
 800da2a:	4640      	mov	r0, r8
 800da2c:	4649      	mov	r1, r9
 800da2e:	2200      	movs	r2, #0
 800da30:	f7f2 fde2 	bl	80005f8 <__aeabi_dmul>
 800da34:	4680      	mov	r8, r0
 800da36:	4689      	mov	r9, r1
 800da38:	e7c6      	b.n	800d9c8 <_dtoa_r+0x510>
 800da3a:	4650      	mov	r0, sl
 800da3c:	4659      	mov	r1, fp
 800da3e:	f7f2 fddb 	bl	80005f8 <__aeabi_dmul>
 800da42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da44:	9d01      	ldr	r5, [sp, #4]
 800da46:	930f      	str	r3, [sp, #60]	; 0x3c
 800da48:	4682      	mov	sl, r0
 800da4a:	468b      	mov	fp, r1
 800da4c:	4649      	mov	r1, r9
 800da4e:	4640      	mov	r0, r8
 800da50:	f7f3 f882 	bl	8000b58 <__aeabi_d2iz>
 800da54:	4606      	mov	r6, r0
 800da56:	f7f2 fd65 	bl	8000524 <__aeabi_i2d>
 800da5a:	3630      	adds	r6, #48	; 0x30
 800da5c:	4602      	mov	r2, r0
 800da5e:	460b      	mov	r3, r1
 800da60:	4640      	mov	r0, r8
 800da62:	4649      	mov	r1, r9
 800da64:	f7f2 fc10 	bl	8000288 <__aeabi_dsub>
 800da68:	f805 6b01 	strb.w	r6, [r5], #1
 800da6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da6e:	429d      	cmp	r5, r3
 800da70:	4680      	mov	r8, r0
 800da72:	4689      	mov	r9, r1
 800da74:	f04f 0200 	mov.w	r2, #0
 800da78:	d124      	bne.n	800dac4 <_dtoa_r+0x60c>
 800da7a:	4b1b      	ldr	r3, [pc, #108]	; (800dae8 <_dtoa_r+0x630>)
 800da7c:	4650      	mov	r0, sl
 800da7e:	4659      	mov	r1, fp
 800da80:	f7f2 fc04 	bl	800028c <__adddf3>
 800da84:	4602      	mov	r2, r0
 800da86:	460b      	mov	r3, r1
 800da88:	4640      	mov	r0, r8
 800da8a:	4649      	mov	r1, r9
 800da8c:	f7f3 f844 	bl	8000b18 <__aeabi_dcmpgt>
 800da90:	2800      	cmp	r0, #0
 800da92:	d173      	bne.n	800db7c <_dtoa_r+0x6c4>
 800da94:	4652      	mov	r2, sl
 800da96:	465b      	mov	r3, fp
 800da98:	4913      	ldr	r1, [pc, #76]	; (800dae8 <_dtoa_r+0x630>)
 800da9a:	2000      	movs	r0, #0
 800da9c:	f7f2 fbf4 	bl	8000288 <__aeabi_dsub>
 800daa0:	4602      	mov	r2, r0
 800daa2:	460b      	mov	r3, r1
 800daa4:	4640      	mov	r0, r8
 800daa6:	4649      	mov	r1, r9
 800daa8:	f7f3 f818 	bl	8000adc <__aeabi_dcmplt>
 800daac:	2800      	cmp	r0, #0
 800daae:	f43f af35 	beq.w	800d91c <_dtoa_r+0x464>
 800dab2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dab4:	1e6b      	subs	r3, r5, #1
 800dab6:	930f      	str	r3, [sp, #60]	; 0x3c
 800dab8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dabc:	2b30      	cmp	r3, #48	; 0x30
 800dabe:	d0f8      	beq.n	800dab2 <_dtoa_r+0x5fa>
 800dac0:	9700      	str	r7, [sp, #0]
 800dac2:	e049      	b.n	800db58 <_dtoa_r+0x6a0>
 800dac4:	4b05      	ldr	r3, [pc, #20]	; (800dadc <_dtoa_r+0x624>)
 800dac6:	f7f2 fd97 	bl	80005f8 <__aeabi_dmul>
 800daca:	4680      	mov	r8, r0
 800dacc:	4689      	mov	r9, r1
 800dace:	e7bd      	b.n	800da4c <_dtoa_r+0x594>
 800dad0:	08010628 	.word	0x08010628
 800dad4:	08010600 	.word	0x08010600
 800dad8:	3ff00000 	.word	0x3ff00000
 800dadc:	40240000 	.word	0x40240000
 800dae0:	401c0000 	.word	0x401c0000
 800dae4:	40140000 	.word	0x40140000
 800dae8:	3fe00000 	.word	0x3fe00000
 800daec:	9d01      	ldr	r5, [sp, #4]
 800daee:	4656      	mov	r6, sl
 800daf0:	465f      	mov	r7, fp
 800daf2:	4642      	mov	r2, r8
 800daf4:	464b      	mov	r3, r9
 800daf6:	4630      	mov	r0, r6
 800daf8:	4639      	mov	r1, r7
 800dafa:	f7f2 fea7 	bl	800084c <__aeabi_ddiv>
 800dafe:	f7f3 f82b 	bl	8000b58 <__aeabi_d2iz>
 800db02:	4682      	mov	sl, r0
 800db04:	f7f2 fd0e 	bl	8000524 <__aeabi_i2d>
 800db08:	4642      	mov	r2, r8
 800db0a:	464b      	mov	r3, r9
 800db0c:	f7f2 fd74 	bl	80005f8 <__aeabi_dmul>
 800db10:	4602      	mov	r2, r0
 800db12:	460b      	mov	r3, r1
 800db14:	4630      	mov	r0, r6
 800db16:	4639      	mov	r1, r7
 800db18:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800db1c:	f7f2 fbb4 	bl	8000288 <__aeabi_dsub>
 800db20:	f805 6b01 	strb.w	r6, [r5], #1
 800db24:	9e01      	ldr	r6, [sp, #4]
 800db26:	9f03      	ldr	r7, [sp, #12]
 800db28:	1bae      	subs	r6, r5, r6
 800db2a:	42b7      	cmp	r7, r6
 800db2c:	4602      	mov	r2, r0
 800db2e:	460b      	mov	r3, r1
 800db30:	d135      	bne.n	800db9e <_dtoa_r+0x6e6>
 800db32:	f7f2 fbab 	bl	800028c <__adddf3>
 800db36:	4642      	mov	r2, r8
 800db38:	464b      	mov	r3, r9
 800db3a:	4606      	mov	r6, r0
 800db3c:	460f      	mov	r7, r1
 800db3e:	f7f2 ffeb 	bl	8000b18 <__aeabi_dcmpgt>
 800db42:	b9d0      	cbnz	r0, 800db7a <_dtoa_r+0x6c2>
 800db44:	4642      	mov	r2, r8
 800db46:	464b      	mov	r3, r9
 800db48:	4630      	mov	r0, r6
 800db4a:	4639      	mov	r1, r7
 800db4c:	f7f2 ffbc 	bl	8000ac8 <__aeabi_dcmpeq>
 800db50:	b110      	cbz	r0, 800db58 <_dtoa_r+0x6a0>
 800db52:	f01a 0f01 	tst.w	sl, #1
 800db56:	d110      	bne.n	800db7a <_dtoa_r+0x6c2>
 800db58:	4620      	mov	r0, r4
 800db5a:	ee18 1a10 	vmov	r1, s16
 800db5e:	f000 fd13 	bl	800e588 <_Bfree>
 800db62:	2300      	movs	r3, #0
 800db64:	9800      	ldr	r0, [sp, #0]
 800db66:	702b      	strb	r3, [r5, #0]
 800db68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db6a:	3001      	adds	r0, #1
 800db6c:	6018      	str	r0, [r3, #0]
 800db6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db70:	2b00      	cmp	r3, #0
 800db72:	f43f acf1 	beq.w	800d558 <_dtoa_r+0xa0>
 800db76:	601d      	str	r5, [r3, #0]
 800db78:	e4ee      	b.n	800d558 <_dtoa_r+0xa0>
 800db7a:	9f00      	ldr	r7, [sp, #0]
 800db7c:	462b      	mov	r3, r5
 800db7e:	461d      	mov	r5, r3
 800db80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db84:	2a39      	cmp	r2, #57	; 0x39
 800db86:	d106      	bne.n	800db96 <_dtoa_r+0x6de>
 800db88:	9a01      	ldr	r2, [sp, #4]
 800db8a:	429a      	cmp	r2, r3
 800db8c:	d1f7      	bne.n	800db7e <_dtoa_r+0x6c6>
 800db8e:	9901      	ldr	r1, [sp, #4]
 800db90:	2230      	movs	r2, #48	; 0x30
 800db92:	3701      	adds	r7, #1
 800db94:	700a      	strb	r2, [r1, #0]
 800db96:	781a      	ldrb	r2, [r3, #0]
 800db98:	3201      	adds	r2, #1
 800db9a:	701a      	strb	r2, [r3, #0]
 800db9c:	e790      	b.n	800dac0 <_dtoa_r+0x608>
 800db9e:	4ba6      	ldr	r3, [pc, #664]	; (800de38 <_dtoa_r+0x980>)
 800dba0:	2200      	movs	r2, #0
 800dba2:	f7f2 fd29 	bl	80005f8 <__aeabi_dmul>
 800dba6:	2200      	movs	r2, #0
 800dba8:	2300      	movs	r3, #0
 800dbaa:	4606      	mov	r6, r0
 800dbac:	460f      	mov	r7, r1
 800dbae:	f7f2 ff8b 	bl	8000ac8 <__aeabi_dcmpeq>
 800dbb2:	2800      	cmp	r0, #0
 800dbb4:	d09d      	beq.n	800daf2 <_dtoa_r+0x63a>
 800dbb6:	e7cf      	b.n	800db58 <_dtoa_r+0x6a0>
 800dbb8:	9a08      	ldr	r2, [sp, #32]
 800dbba:	2a00      	cmp	r2, #0
 800dbbc:	f000 80d7 	beq.w	800dd6e <_dtoa_r+0x8b6>
 800dbc0:	9a06      	ldr	r2, [sp, #24]
 800dbc2:	2a01      	cmp	r2, #1
 800dbc4:	f300 80ba 	bgt.w	800dd3c <_dtoa_r+0x884>
 800dbc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dbca:	2a00      	cmp	r2, #0
 800dbcc:	f000 80b2 	beq.w	800dd34 <_dtoa_r+0x87c>
 800dbd0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dbd4:	9e07      	ldr	r6, [sp, #28]
 800dbd6:	9d04      	ldr	r5, [sp, #16]
 800dbd8:	9a04      	ldr	r2, [sp, #16]
 800dbda:	441a      	add	r2, r3
 800dbdc:	9204      	str	r2, [sp, #16]
 800dbde:	9a05      	ldr	r2, [sp, #20]
 800dbe0:	2101      	movs	r1, #1
 800dbe2:	441a      	add	r2, r3
 800dbe4:	4620      	mov	r0, r4
 800dbe6:	9205      	str	r2, [sp, #20]
 800dbe8:	f000 fd86 	bl	800e6f8 <__i2b>
 800dbec:	4607      	mov	r7, r0
 800dbee:	2d00      	cmp	r5, #0
 800dbf0:	dd0c      	ble.n	800dc0c <_dtoa_r+0x754>
 800dbf2:	9b05      	ldr	r3, [sp, #20]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	dd09      	ble.n	800dc0c <_dtoa_r+0x754>
 800dbf8:	42ab      	cmp	r3, r5
 800dbfa:	9a04      	ldr	r2, [sp, #16]
 800dbfc:	bfa8      	it	ge
 800dbfe:	462b      	movge	r3, r5
 800dc00:	1ad2      	subs	r2, r2, r3
 800dc02:	9204      	str	r2, [sp, #16]
 800dc04:	9a05      	ldr	r2, [sp, #20]
 800dc06:	1aed      	subs	r5, r5, r3
 800dc08:	1ad3      	subs	r3, r2, r3
 800dc0a:	9305      	str	r3, [sp, #20]
 800dc0c:	9b07      	ldr	r3, [sp, #28]
 800dc0e:	b31b      	cbz	r3, 800dc58 <_dtoa_r+0x7a0>
 800dc10:	9b08      	ldr	r3, [sp, #32]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	f000 80af 	beq.w	800dd76 <_dtoa_r+0x8be>
 800dc18:	2e00      	cmp	r6, #0
 800dc1a:	dd13      	ble.n	800dc44 <_dtoa_r+0x78c>
 800dc1c:	4639      	mov	r1, r7
 800dc1e:	4632      	mov	r2, r6
 800dc20:	4620      	mov	r0, r4
 800dc22:	f000 fe29 	bl	800e878 <__pow5mult>
 800dc26:	ee18 2a10 	vmov	r2, s16
 800dc2a:	4601      	mov	r1, r0
 800dc2c:	4607      	mov	r7, r0
 800dc2e:	4620      	mov	r0, r4
 800dc30:	f000 fd78 	bl	800e724 <__multiply>
 800dc34:	ee18 1a10 	vmov	r1, s16
 800dc38:	4680      	mov	r8, r0
 800dc3a:	4620      	mov	r0, r4
 800dc3c:	f000 fca4 	bl	800e588 <_Bfree>
 800dc40:	ee08 8a10 	vmov	s16, r8
 800dc44:	9b07      	ldr	r3, [sp, #28]
 800dc46:	1b9a      	subs	r2, r3, r6
 800dc48:	d006      	beq.n	800dc58 <_dtoa_r+0x7a0>
 800dc4a:	ee18 1a10 	vmov	r1, s16
 800dc4e:	4620      	mov	r0, r4
 800dc50:	f000 fe12 	bl	800e878 <__pow5mult>
 800dc54:	ee08 0a10 	vmov	s16, r0
 800dc58:	2101      	movs	r1, #1
 800dc5a:	4620      	mov	r0, r4
 800dc5c:	f000 fd4c 	bl	800e6f8 <__i2b>
 800dc60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	4606      	mov	r6, r0
 800dc66:	f340 8088 	ble.w	800dd7a <_dtoa_r+0x8c2>
 800dc6a:	461a      	mov	r2, r3
 800dc6c:	4601      	mov	r1, r0
 800dc6e:	4620      	mov	r0, r4
 800dc70:	f000 fe02 	bl	800e878 <__pow5mult>
 800dc74:	9b06      	ldr	r3, [sp, #24]
 800dc76:	2b01      	cmp	r3, #1
 800dc78:	4606      	mov	r6, r0
 800dc7a:	f340 8081 	ble.w	800dd80 <_dtoa_r+0x8c8>
 800dc7e:	f04f 0800 	mov.w	r8, #0
 800dc82:	6933      	ldr	r3, [r6, #16]
 800dc84:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dc88:	6918      	ldr	r0, [r3, #16]
 800dc8a:	f000 fce5 	bl	800e658 <__hi0bits>
 800dc8e:	f1c0 0020 	rsb	r0, r0, #32
 800dc92:	9b05      	ldr	r3, [sp, #20]
 800dc94:	4418      	add	r0, r3
 800dc96:	f010 001f 	ands.w	r0, r0, #31
 800dc9a:	f000 8092 	beq.w	800ddc2 <_dtoa_r+0x90a>
 800dc9e:	f1c0 0320 	rsb	r3, r0, #32
 800dca2:	2b04      	cmp	r3, #4
 800dca4:	f340 808a 	ble.w	800ddbc <_dtoa_r+0x904>
 800dca8:	f1c0 001c 	rsb	r0, r0, #28
 800dcac:	9b04      	ldr	r3, [sp, #16]
 800dcae:	4403      	add	r3, r0
 800dcb0:	9304      	str	r3, [sp, #16]
 800dcb2:	9b05      	ldr	r3, [sp, #20]
 800dcb4:	4403      	add	r3, r0
 800dcb6:	4405      	add	r5, r0
 800dcb8:	9305      	str	r3, [sp, #20]
 800dcba:	9b04      	ldr	r3, [sp, #16]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	dd07      	ble.n	800dcd0 <_dtoa_r+0x818>
 800dcc0:	ee18 1a10 	vmov	r1, s16
 800dcc4:	461a      	mov	r2, r3
 800dcc6:	4620      	mov	r0, r4
 800dcc8:	f000 fe30 	bl	800e92c <__lshift>
 800dccc:	ee08 0a10 	vmov	s16, r0
 800dcd0:	9b05      	ldr	r3, [sp, #20]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	dd05      	ble.n	800dce2 <_dtoa_r+0x82a>
 800dcd6:	4631      	mov	r1, r6
 800dcd8:	461a      	mov	r2, r3
 800dcda:	4620      	mov	r0, r4
 800dcdc:	f000 fe26 	bl	800e92c <__lshift>
 800dce0:	4606      	mov	r6, r0
 800dce2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d06e      	beq.n	800ddc6 <_dtoa_r+0x90e>
 800dce8:	ee18 0a10 	vmov	r0, s16
 800dcec:	4631      	mov	r1, r6
 800dcee:	f000 fe8d 	bl	800ea0c <__mcmp>
 800dcf2:	2800      	cmp	r0, #0
 800dcf4:	da67      	bge.n	800ddc6 <_dtoa_r+0x90e>
 800dcf6:	9b00      	ldr	r3, [sp, #0]
 800dcf8:	3b01      	subs	r3, #1
 800dcfa:	ee18 1a10 	vmov	r1, s16
 800dcfe:	9300      	str	r3, [sp, #0]
 800dd00:	220a      	movs	r2, #10
 800dd02:	2300      	movs	r3, #0
 800dd04:	4620      	mov	r0, r4
 800dd06:	f000 fc61 	bl	800e5cc <__multadd>
 800dd0a:	9b08      	ldr	r3, [sp, #32]
 800dd0c:	ee08 0a10 	vmov	s16, r0
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	f000 81b1 	beq.w	800e078 <_dtoa_r+0xbc0>
 800dd16:	2300      	movs	r3, #0
 800dd18:	4639      	mov	r1, r7
 800dd1a:	220a      	movs	r2, #10
 800dd1c:	4620      	mov	r0, r4
 800dd1e:	f000 fc55 	bl	800e5cc <__multadd>
 800dd22:	9b02      	ldr	r3, [sp, #8]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	4607      	mov	r7, r0
 800dd28:	f300 808e 	bgt.w	800de48 <_dtoa_r+0x990>
 800dd2c:	9b06      	ldr	r3, [sp, #24]
 800dd2e:	2b02      	cmp	r3, #2
 800dd30:	dc51      	bgt.n	800ddd6 <_dtoa_r+0x91e>
 800dd32:	e089      	b.n	800de48 <_dtoa_r+0x990>
 800dd34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dd36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dd3a:	e74b      	b.n	800dbd4 <_dtoa_r+0x71c>
 800dd3c:	9b03      	ldr	r3, [sp, #12]
 800dd3e:	1e5e      	subs	r6, r3, #1
 800dd40:	9b07      	ldr	r3, [sp, #28]
 800dd42:	42b3      	cmp	r3, r6
 800dd44:	bfbf      	itttt	lt
 800dd46:	9b07      	ldrlt	r3, [sp, #28]
 800dd48:	9607      	strlt	r6, [sp, #28]
 800dd4a:	1af2      	sublt	r2, r6, r3
 800dd4c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800dd4e:	bfb6      	itet	lt
 800dd50:	189b      	addlt	r3, r3, r2
 800dd52:	1b9e      	subge	r6, r3, r6
 800dd54:	930a      	strlt	r3, [sp, #40]	; 0x28
 800dd56:	9b03      	ldr	r3, [sp, #12]
 800dd58:	bfb8      	it	lt
 800dd5a:	2600      	movlt	r6, #0
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	bfb7      	itett	lt
 800dd60:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800dd64:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800dd68:	1a9d      	sublt	r5, r3, r2
 800dd6a:	2300      	movlt	r3, #0
 800dd6c:	e734      	b.n	800dbd8 <_dtoa_r+0x720>
 800dd6e:	9e07      	ldr	r6, [sp, #28]
 800dd70:	9d04      	ldr	r5, [sp, #16]
 800dd72:	9f08      	ldr	r7, [sp, #32]
 800dd74:	e73b      	b.n	800dbee <_dtoa_r+0x736>
 800dd76:	9a07      	ldr	r2, [sp, #28]
 800dd78:	e767      	b.n	800dc4a <_dtoa_r+0x792>
 800dd7a:	9b06      	ldr	r3, [sp, #24]
 800dd7c:	2b01      	cmp	r3, #1
 800dd7e:	dc18      	bgt.n	800ddb2 <_dtoa_r+0x8fa>
 800dd80:	f1ba 0f00 	cmp.w	sl, #0
 800dd84:	d115      	bne.n	800ddb2 <_dtoa_r+0x8fa>
 800dd86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dd8a:	b993      	cbnz	r3, 800ddb2 <_dtoa_r+0x8fa>
 800dd8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dd90:	0d1b      	lsrs	r3, r3, #20
 800dd92:	051b      	lsls	r3, r3, #20
 800dd94:	b183      	cbz	r3, 800ddb8 <_dtoa_r+0x900>
 800dd96:	9b04      	ldr	r3, [sp, #16]
 800dd98:	3301      	adds	r3, #1
 800dd9a:	9304      	str	r3, [sp, #16]
 800dd9c:	9b05      	ldr	r3, [sp, #20]
 800dd9e:	3301      	adds	r3, #1
 800dda0:	9305      	str	r3, [sp, #20]
 800dda2:	f04f 0801 	mov.w	r8, #1
 800dda6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	f47f af6a 	bne.w	800dc82 <_dtoa_r+0x7ca>
 800ddae:	2001      	movs	r0, #1
 800ddb0:	e76f      	b.n	800dc92 <_dtoa_r+0x7da>
 800ddb2:	f04f 0800 	mov.w	r8, #0
 800ddb6:	e7f6      	b.n	800dda6 <_dtoa_r+0x8ee>
 800ddb8:	4698      	mov	r8, r3
 800ddba:	e7f4      	b.n	800dda6 <_dtoa_r+0x8ee>
 800ddbc:	f43f af7d 	beq.w	800dcba <_dtoa_r+0x802>
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	301c      	adds	r0, #28
 800ddc4:	e772      	b.n	800dcac <_dtoa_r+0x7f4>
 800ddc6:	9b03      	ldr	r3, [sp, #12]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	dc37      	bgt.n	800de3c <_dtoa_r+0x984>
 800ddcc:	9b06      	ldr	r3, [sp, #24]
 800ddce:	2b02      	cmp	r3, #2
 800ddd0:	dd34      	ble.n	800de3c <_dtoa_r+0x984>
 800ddd2:	9b03      	ldr	r3, [sp, #12]
 800ddd4:	9302      	str	r3, [sp, #8]
 800ddd6:	9b02      	ldr	r3, [sp, #8]
 800ddd8:	b96b      	cbnz	r3, 800ddf6 <_dtoa_r+0x93e>
 800ddda:	4631      	mov	r1, r6
 800dddc:	2205      	movs	r2, #5
 800ddde:	4620      	mov	r0, r4
 800dde0:	f000 fbf4 	bl	800e5cc <__multadd>
 800dde4:	4601      	mov	r1, r0
 800dde6:	4606      	mov	r6, r0
 800dde8:	ee18 0a10 	vmov	r0, s16
 800ddec:	f000 fe0e 	bl	800ea0c <__mcmp>
 800ddf0:	2800      	cmp	r0, #0
 800ddf2:	f73f adbb 	bgt.w	800d96c <_dtoa_r+0x4b4>
 800ddf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddf8:	9d01      	ldr	r5, [sp, #4]
 800ddfa:	43db      	mvns	r3, r3
 800ddfc:	9300      	str	r3, [sp, #0]
 800ddfe:	f04f 0800 	mov.w	r8, #0
 800de02:	4631      	mov	r1, r6
 800de04:	4620      	mov	r0, r4
 800de06:	f000 fbbf 	bl	800e588 <_Bfree>
 800de0a:	2f00      	cmp	r7, #0
 800de0c:	f43f aea4 	beq.w	800db58 <_dtoa_r+0x6a0>
 800de10:	f1b8 0f00 	cmp.w	r8, #0
 800de14:	d005      	beq.n	800de22 <_dtoa_r+0x96a>
 800de16:	45b8      	cmp	r8, r7
 800de18:	d003      	beq.n	800de22 <_dtoa_r+0x96a>
 800de1a:	4641      	mov	r1, r8
 800de1c:	4620      	mov	r0, r4
 800de1e:	f000 fbb3 	bl	800e588 <_Bfree>
 800de22:	4639      	mov	r1, r7
 800de24:	4620      	mov	r0, r4
 800de26:	f000 fbaf 	bl	800e588 <_Bfree>
 800de2a:	e695      	b.n	800db58 <_dtoa_r+0x6a0>
 800de2c:	2600      	movs	r6, #0
 800de2e:	4637      	mov	r7, r6
 800de30:	e7e1      	b.n	800ddf6 <_dtoa_r+0x93e>
 800de32:	9700      	str	r7, [sp, #0]
 800de34:	4637      	mov	r7, r6
 800de36:	e599      	b.n	800d96c <_dtoa_r+0x4b4>
 800de38:	40240000 	.word	0x40240000
 800de3c:	9b08      	ldr	r3, [sp, #32]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	f000 80ca 	beq.w	800dfd8 <_dtoa_r+0xb20>
 800de44:	9b03      	ldr	r3, [sp, #12]
 800de46:	9302      	str	r3, [sp, #8]
 800de48:	2d00      	cmp	r5, #0
 800de4a:	dd05      	ble.n	800de58 <_dtoa_r+0x9a0>
 800de4c:	4639      	mov	r1, r7
 800de4e:	462a      	mov	r2, r5
 800de50:	4620      	mov	r0, r4
 800de52:	f000 fd6b 	bl	800e92c <__lshift>
 800de56:	4607      	mov	r7, r0
 800de58:	f1b8 0f00 	cmp.w	r8, #0
 800de5c:	d05b      	beq.n	800df16 <_dtoa_r+0xa5e>
 800de5e:	6879      	ldr	r1, [r7, #4]
 800de60:	4620      	mov	r0, r4
 800de62:	f000 fb51 	bl	800e508 <_Balloc>
 800de66:	4605      	mov	r5, r0
 800de68:	b928      	cbnz	r0, 800de76 <_dtoa_r+0x9be>
 800de6a:	4b87      	ldr	r3, [pc, #540]	; (800e088 <_dtoa_r+0xbd0>)
 800de6c:	4602      	mov	r2, r0
 800de6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800de72:	f7ff bb3b 	b.w	800d4ec <_dtoa_r+0x34>
 800de76:	693a      	ldr	r2, [r7, #16]
 800de78:	3202      	adds	r2, #2
 800de7a:	0092      	lsls	r2, r2, #2
 800de7c:	f107 010c 	add.w	r1, r7, #12
 800de80:	300c      	adds	r0, #12
 800de82:	f000 fb33 	bl	800e4ec <memcpy>
 800de86:	2201      	movs	r2, #1
 800de88:	4629      	mov	r1, r5
 800de8a:	4620      	mov	r0, r4
 800de8c:	f000 fd4e 	bl	800e92c <__lshift>
 800de90:	9b01      	ldr	r3, [sp, #4]
 800de92:	f103 0901 	add.w	r9, r3, #1
 800de96:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800de9a:	4413      	add	r3, r2
 800de9c:	9305      	str	r3, [sp, #20]
 800de9e:	f00a 0301 	and.w	r3, sl, #1
 800dea2:	46b8      	mov	r8, r7
 800dea4:	9304      	str	r3, [sp, #16]
 800dea6:	4607      	mov	r7, r0
 800dea8:	4631      	mov	r1, r6
 800deaa:	ee18 0a10 	vmov	r0, s16
 800deae:	f7ff fa75 	bl	800d39c <quorem>
 800deb2:	4641      	mov	r1, r8
 800deb4:	9002      	str	r0, [sp, #8]
 800deb6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800deba:	ee18 0a10 	vmov	r0, s16
 800debe:	f000 fda5 	bl	800ea0c <__mcmp>
 800dec2:	463a      	mov	r2, r7
 800dec4:	9003      	str	r0, [sp, #12]
 800dec6:	4631      	mov	r1, r6
 800dec8:	4620      	mov	r0, r4
 800deca:	f000 fdbb 	bl	800ea44 <__mdiff>
 800dece:	68c2      	ldr	r2, [r0, #12]
 800ded0:	f109 3bff 	add.w	fp, r9, #4294967295
 800ded4:	4605      	mov	r5, r0
 800ded6:	bb02      	cbnz	r2, 800df1a <_dtoa_r+0xa62>
 800ded8:	4601      	mov	r1, r0
 800deda:	ee18 0a10 	vmov	r0, s16
 800dede:	f000 fd95 	bl	800ea0c <__mcmp>
 800dee2:	4602      	mov	r2, r0
 800dee4:	4629      	mov	r1, r5
 800dee6:	4620      	mov	r0, r4
 800dee8:	9207      	str	r2, [sp, #28]
 800deea:	f000 fb4d 	bl	800e588 <_Bfree>
 800deee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800def2:	ea43 0102 	orr.w	r1, r3, r2
 800def6:	9b04      	ldr	r3, [sp, #16]
 800def8:	430b      	orrs	r3, r1
 800defa:	464d      	mov	r5, r9
 800defc:	d10f      	bne.n	800df1e <_dtoa_r+0xa66>
 800defe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800df02:	d02a      	beq.n	800df5a <_dtoa_r+0xaa2>
 800df04:	9b03      	ldr	r3, [sp, #12]
 800df06:	2b00      	cmp	r3, #0
 800df08:	dd02      	ble.n	800df10 <_dtoa_r+0xa58>
 800df0a:	9b02      	ldr	r3, [sp, #8]
 800df0c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800df10:	f88b a000 	strb.w	sl, [fp]
 800df14:	e775      	b.n	800de02 <_dtoa_r+0x94a>
 800df16:	4638      	mov	r0, r7
 800df18:	e7ba      	b.n	800de90 <_dtoa_r+0x9d8>
 800df1a:	2201      	movs	r2, #1
 800df1c:	e7e2      	b.n	800dee4 <_dtoa_r+0xa2c>
 800df1e:	9b03      	ldr	r3, [sp, #12]
 800df20:	2b00      	cmp	r3, #0
 800df22:	db04      	blt.n	800df2e <_dtoa_r+0xa76>
 800df24:	9906      	ldr	r1, [sp, #24]
 800df26:	430b      	orrs	r3, r1
 800df28:	9904      	ldr	r1, [sp, #16]
 800df2a:	430b      	orrs	r3, r1
 800df2c:	d122      	bne.n	800df74 <_dtoa_r+0xabc>
 800df2e:	2a00      	cmp	r2, #0
 800df30:	ddee      	ble.n	800df10 <_dtoa_r+0xa58>
 800df32:	ee18 1a10 	vmov	r1, s16
 800df36:	2201      	movs	r2, #1
 800df38:	4620      	mov	r0, r4
 800df3a:	f000 fcf7 	bl	800e92c <__lshift>
 800df3e:	4631      	mov	r1, r6
 800df40:	ee08 0a10 	vmov	s16, r0
 800df44:	f000 fd62 	bl	800ea0c <__mcmp>
 800df48:	2800      	cmp	r0, #0
 800df4a:	dc03      	bgt.n	800df54 <_dtoa_r+0xa9c>
 800df4c:	d1e0      	bne.n	800df10 <_dtoa_r+0xa58>
 800df4e:	f01a 0f01 	tst.w	sl, #1
 800df52:	d0dd      	beq.n	800df10 <_dtoa_r+0xa58>
 800df54:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800df58:	d1d7      	bne.n	800df0a <_dtoa_r+0xa52>
 800df5a:	2339      	movs	r3, #57	; 0x39
 800df5c:	f88b 3000 	strb.w	r3, [fp]
 800df60:	462b      	mov	r3, r5
 800df62:	461d      	mov	r5, r3
 800df64:	3b01      	subs	r3, #1
 800df66:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800df6a:	2a39      	cmp	r2, #57	; 0x39
 800df6c:	d071      	beq.n	800e052 <_dtoa_r+0xb9a>
 800df6e:	3201      	adds	r2, #1
 800df70:	701a      	strb	r2, [r3, #0]
 800df72:	e746      	b.n	800de02 <_dtoa_r+0x94a>
 800df74:	2a00      	cmp	r2, #0
 800df76:	dd07      	ble.n	800df88 <_dtoa_r+0xad0>
 800df78:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800df7c:	d0ed      	beq.n	800df5a <_dtoa_r+0xaa2>
 800df7e:	f10a 0301 	add.w	r3, sl, #1
 800df82:	f88b 3000 	strb.w	r3, [fp]
 800df86:	e73c      	b.n	800de02 <_dtoa_r+0x94a>
 800df88:	9b05      	ldr	r3, [sp, #20]
 800df8a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800df8e:	4599      	cmp	r9, r3
 800df90:	d047      	beq.n	800e022 <_dtoa_r+0xb6a>
 800df92:	ee18 1a10 	vmov	r1, s16
 800df96:	2300      	movs	r3, #0
 800df98:	220a      	movs	r2, #10
 800df9a:	4620      	mov	r0, r4
 800df9c:	f000 fb16 	bl	800e5cc <__multadd>
 800dfa0:	45b8      	cmp	r8, r7
 800dfa2:	ee08 0a10 	vmov	s16, r0
 800dfa6:	f04f 0300 	mov.w	r3, #0
 800dfaa:	f04f 020a 	mov.w	r2, #10
 800dfae:	4641      	mov	r1, r8
 800dfb0:	4620      	mov	r0, r4
 800dfb2:	d106      	bne.n	800dfc2 <_dtoa_r+0xb0a>
 800dfb4:	f000 fb0a 	bl	800e5cc <__multadd>
 800dfb8:	4680      	mov	r8, r0
 800dfba:	4607      	mov	r7, r0
 800dfbc:	f109 0901 	add.w	r9, r9, #1
 800dfc0:	e772      	b.n	800dea8 <_dtoa_r+0x9f0>
 800dfc2:	f000 fb03 	bl	800e5cc <__multadd>
 800dfc6:	4639      	mov	r1, r7
 800dfc8:	4680      	mov	r8, r0
 800dfca:	2300      	movs	r3, #0
 800dfcc:	220a      	movs	r2, #10
 800dfce:	4620      	mov	r0, r4
 800dfd0:	f000 fafc 	bl	800e5cc <__multadd>
 800dfd4:	4607      	mov	r7, r0
 800dfd6:	e7f1      	b.n	800dfbc <_dtoa_r+0xb04>
 800dfd8:	9b03      	ldr	r3, [sp, #12]
 800dfda:	9302      	str	r3, [sp, #8]
 800dfdc:	9d01      	ldr	r5, [sp, #4]
 800dfde:	ee18 0a10 	vmov	r0, s16
 800dfe2:	4631      	mov	r1, r6
 800dfe4:	f7ff f9da 	bl	800d39c <quorem>
 800dfe8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800dfec:	9b01      	ldr	r3, [sp, #4]
 800dfee:	f805 ab01 	strb.w	sl, [r5], #1
 800dff2:	1aea      	subs	r2, r5, r3
 800dff4:	9b02      	ldr	r3, [sp, #8]
 800dff6:	4293      	cmp	r3, r2
 800dff8:	dd09      	ble.n	800e00e <_dtoa_r+0xb56>
 800dffa:	ee18 1a10 	vmov	r1, s16
 800dffe:	2300      	movs	r3, #0
 800e000:	220a      	movs	r2, #10
 800e002:	4620      	mov	r0, r4
 800e004:	f000 fae2 	bl	800e5cc <__multadd>
 800e008:	ee08 0a10 	vmov	s16, r0
 800e00c:	e7e7      	b.n	800dfde <_dtoa_r+0xb26>
 800e00e:	9b02      	ldr	r3, [sp, #8]
 800e010:	2b00      	cmp	r3, #0
 800e012:	bfc8      	it	gt
 800e014:	461d      	movgt	r5, r3
 800e016:	9b01      	ldr	r3, [sp, #4]
 800e018:	bfd8      	it	le
 800e01a:	2501      	movle	r5, #1
 800e01c:	441d      	add	r5, r3
 800e01e:	f04f 0800 	mov.w	r8, #0
 800e022:	ee18 1a10 	vmov	r1, s16
 800e026:	2201      	movs	r2, #1
 800e028:	4620      	mov	r0, r4
 800e02a:	f000 fc7f 	bl	800e92c <__lshift>
 800e02e:	4631      	mov	r1, r6
 800e030:	ee08 0a10 	vmov	s16, r0
 800e034:	f000 fcea 	bl	800ea0c <__mcmp>
 800e038:	2800      	cmp	r0, #0
 800e03a:	dc91      	bgt.n	800df60 <_dtoa_r+0xaa8>
 800e03c:	d102      	bne.n	800e044 <_dtoa_r+0xb8c>
 800e03e:	f01a 0f01 	tst.w	sl, #1
 800e042:	d18d      	bne.n	800df60 <_dtoa_r+0xaa8>
 800e044:	462b      	mov	r3, r5
 800e046:	461d      	mov	r5, r3
 800e048:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e04c:	2a30      	cmp	r2, #48	; 0x30
 800e04e:	d0fa      	beq.n	800e046 <_dtoa_r+0xb8e>
 800e050:	e6d7      	b.n	800de02 <_dtoa_r+0x94a>
 800e052:	9a01      	ldr	r2, [sp, #4]
 800e054:	429a      	cmp	r2, r3
 800e056:	d184      	bne.n	800df62 <_dtoa_r+0xaaa>
 800e058:	9b00      	ldr	r3, [sp, #0]
 800e05a:	3301      	adds	r3, #1
 800e05c:	9300      	str	r3, [sp, #0]
 800e05e:	2331      	movs	r3, #49	; 0x31
 800e060:	7013      	strb	r3, [r2, #0]
 800e062:	e6ce      	b.n	800de02 <_dtoa_r+0x94a>
 800e064:	4b09      	ldr	r3, [pc, #36]	; (800e08c <_dtoa_r+0xbd4>)
 800e066:	f7ff ba95 	b.w	800d594 <_dtoa_r+0xdc>
 800e06a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	f47f aa6e 	bne.w	800d54e <_dtoa_r+0x96>
 800e072:	4b07      	ldr	r3, [pc, #28]	; (800e090 <_dtoa_r+0xbd8>)
 800e074:	f7ff ba8e 	b.w	800d594 <_dtoa_r+0xdc>
 800e078:	9b02      	ldr	r3, [sp, #8]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	dcae      	bgt.n	800dfdc <_dtoa_r+0xb24>
 800e07e:	9b06      	ldr	r3, [sp, #24]
 800e080:	2b02      	cmp	r3, #2
 800e082:	f73f aea8 	bgt.w	800ddd6 <_dtoa_r+0x91e>
 800e086:	e7a9      	b.n	800dfdc <_dtoa_r+0xb24>
 800e088:	08010533 	.word	0x08010533
 800e08c:	08010490 	.word	0x08010490
 800e090:	080104b4 	.word	0x080104b4

0800e094 <__sflush_r>:
 800e094:	898a      	ldrh	r2, [r1, #12]
 800e096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e09a:	4605      	mov	r5, r0
 800e09c:	0710      	lsls	r0, r2, #28
 800e09e:	460c      	mov	r4, r1
 800e0a0:	d458      	bmi.n	800e154 <__sflush_r+0xc0>
 800e0a2:	684b      	ldr	r3, [r1, #4]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	dc05      	bgt.n	800e0b4 <__sflush_r+0x20>
 800e0a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	dc02      	bgt.n	800e0b4 <__sflush_r+0x20>
 800e0ae:	2000      	movs	r0, #0
 800e0b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e0b6:	2e00      	cmp	r6, #0
 800e0b8:	d0f9      	beq.n	800e0ae <__sflush_r+0x1a>
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e0c0:	682f      	ldr	r7, [r5, #0]
 800e0c2:	602b      	str	r3, [r5, #0]
 800e0c4:	d032      	beq.n	800e12c <__sflush_r+0x98>
 800e0c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e0c8:	89a3      	ldrh	r3, [r4, #12]
 800e0ca:	075a      	lsls	r2, r3, #29
 800e0cc:	d505      	bpl.n	800e0da <__sflush_r+0x46>
 800e0ce:	6863      	ldr	r3, [r4, #4]
 800e0d0:	1ac0      	subs	r0, r0, r3
 800e0d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e0d4:	b10b      	cbz	r3, 800e0da <__sflush_r+0x46>
 800e0d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e0d8:	1ac0      	subs	r0, r0, r3
 800e0da:	2300      	movs	r3, #0
 800e0dc:	4602      	mov	r2, r0
 800e0de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e0e0:	6a21      	ldr	r1, [r4, #32]
 800e0e2:	4628      	mov	r0, r5
 800e0e4:	47b0      	blx	r6
 800e0e6:	1c43      	adds	r3, r0, #1
 800e0e8:	89a3      	ldrh	r3, [r4, #12]
 800e0ea:	d106      	bne.n	800e0fa <__sflush_r+0x66>
 800e0ec:	6829      	ldr	r1, [r5, #0]
 800e0ee:	291d      	cmp	r1, #29
 800e0f0:	d82c      	bhi.n	800e14c <__sflush_r+0xb8>
 800e0f2:	4a2a      	ldr	r2, [pc, #168]	; (800e19c <__sflush_r+0x108>)
 800e0f4:	40ca      	lsrs	r2, r1
 800e0f6:	07d6      	lsls	r6, r2, #31
 800e0f8:	d528      	bpl.n	800e14c <__sflush_r+0xb8>
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	6062      	str	r2, [r4, #4]
 800e0fe:	04d9      	lsls	r1, r3, #19
 800e100:	6922      	ldr	r2, [r4, #16]
 800e102:	6022      	str	r2, [r4, #0]
 800e104:	d504      	bpl.n	800e110 <__sflush_r+0x7c>
 800e106:	1c42      	adds	r2, r0, #1
 800e108:	d101      	bne.n	800e10e <__sflush_r+0x7a>
 800e10a:	682b      	ldr	r3, [r5, #0]
 800e10c:	b903      	cbnz	r3, 800e110 <__sflush_r+0x7c>
 800e10e:	6560      	str	r0, [r4, #84]	; 0x54
 800e110:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e112:	602f      	str	r7, [r5, #0]
 800e114:	2900      	cmp	r1, #0
 800e116:	d0ca      	beq.n	800e0ae <__sflush_r+0x1a>
 800e118:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e11c:	4299      	cmp	r1, r3
 800e11e:	d002      	beq.n	800e126 <__sflush_r+0x92>
 800e120:	4628      	mov	r0, r5
 800e122:	f000 fd8b 	bl	800ec3c <_free_r>
 800e126:	2000      	movs	r0, #0
 800e128:	6360      	str	r0, [r4, #52]	; 0x34
 800e12a:	e7c1      	b.n	800e0b0 <__sflush_r+0x1c>
 800e12c:	6a21      	ldr	r1, [r4, #32]
 800e12e:	2301      	movs	r3, #1
 800e130:	4628      	mov	r0, r5
 800e132:	47b0      	blx	r6
 800e134:	1c41      	adds	r1, r0, #1
 800e136:	d1c7      	bne.n	800e0c8 <__sflush_r+0x34>
 800e138:	682b      	ldr	r3, [r5, #0]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d0c4      	beq.n	800e0c8 <__sflush_r+0x34>
 800e13e:	2b1d      	cmp	r3, #29
 800e140:	d001      	beq.n	800e146 <__sflush_r+0xb2>
 800e142:	2b16      	cmp	r3, #22
 800e144:	d101      	bne.n	800e14a <__sflush_r+0xb6>
 800e146:	602f      	str	r7, [r5, #0]
 800e148:	e7b1      	b.n	800e0ae <__sflush_r+0x1a>
 800e14a:	89a3      	ldrh	r3, [r4, #12]
 800e14c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e150:	81a3      	strh	r3, [r4, #12]
 800e152:	e7ad      	b.n	800e0b0 <__sflush_r+0x1c>
 800e154:	690f      	ldr	r7, [r1, #16]
 800e156:	2f00      	cmp	r7, #0
 800e158:	d0a9      	beq.n	800e0ae <__sflush_r+0x1a>
 800e15a:	0793      	lsls	r3, r2, #30
 800e15c:	680e      	ldr	r6, [r1, #0]
 800e15e:	bf08      	it	eq
 800e160:	694b      	ldreq	r3, [r1, #20]
 800e162:	600f      	str	r7, [r1, #0]
 800e164:	bf18      	it	ne
 800e166:	2300      	movne	r3, #0
 800e168:	eba6 0807 	sub.w	r8, r6, r7
 800e16c:	608b      	str	r3, [r1, #8]
 800e16e:	f1b8 0f00 	cmp.w	r8, #0
 800e172:	dd9c      	ble.n	800e0ae <__sflush_r+0x1a>
 800e174:	6a21      	ldr	r1, [r4, #32]
 800e176:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e178:	4643      	mov	r3, r8
 800e17a:	463a      	mov	r2, r7
 800e17c:	4628      	mov	r0, r5
 800e17e:	47b0      	blx	r6
 800e180:	2800      	cmp	r0, #0
 800e182:	dc06      	bgt.n	800e192 <__sflush_r+0xfe>
 800e184:	89a3      	ldrh	r3, [r4, #12]
 800e186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e18a:	81a3      	strh	r3, [r4, #12]
 800e18c:	f04f 30ff 	mov.w	r0, #4294967295
 800e190:	e78e      	b.n	800e0b0 <__sflush_r+0x1c>
 800e192:	4407      	add	r7, r0
 800e194:	eba8 0800 	sub.w	r8, r8, r0
 800e198:	e7e9      	b.n	800e16e <__sflush_r+0xda>
 800e19a:	bf00      	nop
 800e19c:	20400001 	.word	0x20400001

0800e1a0 <_fflush_r>:
 800e1a0:	b538      	push	{r3, r4, r5, lr}
 800e1a2:	690b      	ldr	r3, [r1, #16]
 800e1a4:	4605      	mov	r5, r0
 800e1a6:	460c      	mov	r4, r1
 800e1a8:	b913      	cbnz	r3, 800e1b0 <_fflush_r+0x10>
 800e1aa:	2500      	movs	r5, #0
 800e1ac:	4628      	mov	r0, r5
 800e1ae:	bd38      	pop	{r3, r4, r5, pc}
 800e1b0:	b118      	cbz	r0, 800e1ba <_fflush_r+0x1a>
 800e1b2:	6983      	ldr	r3, [r0, #24]
 800e1b4:	b90b      	cbnz	r3, 800e1ba <_fflush_r+0x1a>
 800e1b6:	f000 f887 	bl	800e2c8 <__sinit>
 800e1ba:	4b14      	ldr	r3, [pc, #80]	; (800e20c <_fflush_r+0x6c>)
 800e1bc:	429c      	cmp	r4, r3
 800e1be:	d11b      	bne.n	800e1f8 <_fflush_r+0x58>
 800e1c0:	686c      	ldr	r4, [r5, #4]
 800e1c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d0ef      	beq.n	800e1aa <_fflush_r+0xa>
 800e1ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e1cc:	07d0      	lsls	r0, r2, #31
 800e1ce:	d404      	bmi.n	800e1da <_fflush_r+0x3a>
 800e1d0:	0599      	lsls	r1, r3, #22
 800e1d2:	d402      	bmi.n	800e1da <_fflush_r+0x3a>
 800e1d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1d6:	f000 f91a 	bl	800e40e <__retarget_lock_acquire_recursive>
 800e1da:	4628      	mov	r0, r5
 800e1dc:	4621      	mov	r1, r4
 800e1de:	f7ff ff59 	bl	800e094 <__sflush_r>
 800e1e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e1e4:	07da      	lsls	r2, r3, #31
 800e1e6:	4605      	mov	r5, r0
 800e1e8:	d4e0      	bmi.n	800e1ac <_fflush_r+0xc>
 800e1ea:	89a3      	ldrh	r3, [r4, #12]
 800e1ec:	059b      	lsls	r3, r3, #22
 800e1ee:	d4dd      	bmi.n	800e1ac <_fflush_r+0xc>
 800e1f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1f2:	f000 f90d 	bl	800e410 <__retarget_lock_release_recursive>
 800e1f6:	e7d9      	b.n	800e1ac <_fflush_r+0xc>
 800e1f8:	4b05      	ldr	r3, [pc, #20]	; (800e210 <_fflush_r+0x70>)
 800e1fa:	429c      	cmp	r4, r3
 800e1fc:	d101      	bne.n	800e202 <_fflush_r+0x62>
 800e1fe:	68ac      	ldr	r4, [r5, #8]
 800e200:	e7df      	b.n	800e1c2 <_fflush_r+0x22>
 800e202:	4b04      	ldr	r3, [pc, #16]	; (800e214 <_fflush_r+0x74>)
 800e204:	429c      	cmp	r4, r3
 800e206:	bf08      	it	eq
 800e208:	68ec      	ldreq	r4, [r5, #12]
 800e20a:	e7da      	b.n	800e1c2 <_fflush_r+0x22>
 800e20c:	08010564 	.word	0x08010564
 800e210:	08010584 	.word	0x08010584
 800e214:	08010544 	.word	0x08010544

0800e218 <std>:
 800e218:	2300      	movs	r3, #0
 800e21a:	b510      	push	{r4, lr}
 800e21c:	4604      	mov	r4, r0
 800e21e:	e9c0 3300 	strd	r3, r3, [r0]
 800e222:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e226:	6083      	str	r3, [r0, #8]
 800e228:	8181      	strh	r1, [r0, #12]
 800e22a:	6643      	str	r3, [r0, #100]	; 0x64
 800e22c:	81c2      	strh	r2, [r0, #14]
 800e22e:	6183      	str	r3, [r0, #24]
 800e230:	4619      	mov	r1, r3
 800e232:	2208      	movs	r2, #8
 800e234:	305c      	adds	r0, #92	; 0x5c
 800e236:	f7fe faf1 	bl	800c81c <memset>
 800e23a:	4b05      	ldr	r3, [pc, #20]	; (800e250 <std+0x38>)
 800e23c:	6263      	str	r3, [r4, #36]	; 0x24
 800e23e:	4b05      	ldr	r3, [pc, #20]	; (800e254 <std+0x3c>)
 800e240:	62a3      	str	r3, [r4, #40]	; 0x28
 800e242:	4b05      	ldr	r3, [pc, #20]	; (800e258 <std+0x40>)
 800e244:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e246:	4b05      	ldr	r3, [pc, #20]	; (800e25c <std+0x44>)
 800e248:	6224      	str	r4, [r4, #32]
 800e24a:	6323      	str	r3, [r4, #48]	; 0x30
 800e24c:	bd10      	pop	{r4, pc}
 800e24e:	bf00      	nop
 800e250:	0800f0d1 	.word	0x0800f0d1
 800e254:	0800f0f3 	.word	0x0800f0f3
 800e258:	0800f12b 	.word	0x0800f12b
 800e25c:	0800f14f 	.word	0x0800f14f

0800e260 <_cleanup_r>:
 800e260:	4901      	ldr	r1, [pc, #4]	; (800e268 <_cleanup_r+0x8>)
 800e262:	f000 b8af 	b.w	800e3c4 <_fwalk_reent>
 800e266:	bf00      	nop
 800e268:	0800e1a1 	.word	0x0800e1a1

0800e26c <__sfmoreglue>:
 800e26c:	b570      	push	{r4, r5, r6, lr}
 800e26e:	2268      	movs	r2, #104	; 0x68
 800e270:	1e4d      	subs	r5, r1, #1
 800e272:	4355      	muls	r5, r2
 800e274:	460e      	mov	r6, r1
 800e276:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e27a:	f000 fd4b 	bl	800ed14 <_malloc_r>
 800e27e:	4604      	mov	r4, r0
 800e280:	b140      	cbz	r0, 800e294 <__sfmoreglue+0x28>
 800e282:	2100      	movs	r1, #0
 800e284:	e9c0 1600 	strd	r1, r6, [r0]
 800e288:	300c      	adds	r0, #12
 800e28a:	60a0      	str	r0, [r4, #8]
 800e28c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e290:	f7fe fac4 	bl	800c81c <memset>
 800e294:	4620      	mov	r0, r4
 800e296:	bd70      	pop	{r4, r5, r6, pc}

0800e298 <__sfp_lock_acquire>:
 800e298:	4801      	ldr	r0, [pc, #4]	; (800e2a0 <__sfp_lock_acquire+0x8>)
 800e29a:	f000 b8b8 	b.w	800e40e <__retarget_lock_acquire_recursive>
 800e29e:	bf00      	nop
 800e2a0:	20000699 	.word	0x20000699

0800e2a4 <__sfp_lock_release>:
 800e2a4:	4801      	ldr	r0, [pc, #4]	; (800e2ac <__sfp_lock_release+0x8>)
 800e2a6:	f000 b8b3 	b.w	800e410 <__retarget_lock_release_recursive>
 800e2aa:	bf00      	nop
 800e2ac:	20000699 	.word	0x20000699

0800e2b0 <__sinit_lock_acquire>:
 800e2b0:	4801      	ldr	r0, [pc, #4]	; (800e2b8 <__sinit_lock_acquire+0x8>)
 800e2b2:	f000 b8ac 	b.w	800e40e <__retarget_lock_acquire_recursive>
 800e2b6:	bf00      	nop
 800e2b8:	2000069a 	.word	0x2000069a

0800e2bc <__sinit_lock_release>:
 800e2bc:	4801      	ldr	r0, [pc, #4]	; (800e2c4 <__sinit_lock_release+0x8>)
 800e2be:	f000 b8a7 	b.w	800e410 <__retarget_lock_release_recursive>
 800e2c2:	bf00      	nop
 800e2c4:	2000069a 	.word	0x2000069a

0800e2c8 <__sinit>:
 800e2c8:	b510      	push	{r4, lr}
 800e2ca:	4604      	mov	r4, r0
 800e2cc:	f7ff fff0 	bl	800e2b0 <__sinit_lock_acquire>
 800e2d0:	69a3      	ldr	r3, [r4, #24]
 800e2d2:	b11b      	cbz	r3, 800e2dc <__sinit+0x14>
 800e2d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2d8:	f7ff bff0 	b.w	800e2bc <__sinit_lock_release>
 800e2dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e2e0:	6523      	str	r3, [r4, #80]	; 0x50
 800e2e2:	4b13      	ldr	r3, [pc, #76]	; (800e330 <__sinit+0x68>)
 800e2e4:	4a13      	ldr	r2, [pc, #76]	; (800e334 <__sinit+0x6c>)
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	62a2      	str	r2, [r4, #40]	; 0x28
 800e2ea:	42a3      	cmp	r3, r4
 800e2ec:	bf04      	itt	eq
 800e2ee:	2301      	moveq	r3, #1
 800e2f0:	61a3      	streq	r3, [r4, #24]
 800e2f2:	4620      	mov	r0, r4
 800e2f4:	f000 f820 	bl	800e338 <__sfp>
 800e2f8:	6060      	str	r0, [r4, #4]
 800e2fa:	4620      	mov	r0, r4
 800e2fc:	f000 f81c 	bl	800e338 <__sfp>
 800e300:	60a0      	str	r0, [r4, #8]
 800e302:	4620      	mov	r0, r4
 800e304:	f000 f818 	bl	800e338 <__sfp>
 800e308:	2200      	movs	r2, #0
 800e30a:	60e0      	str	r0, [r4, #12]
 800e30c:	2104      	movs	r1, #4
 800e30e:	6860      	ldr	r0, [r4, #4]
 800e310:	f7ff ff82 	bl	800e218 <std>
 800e314:	68a0      	ldr	r0, [r4, #8]
 800e316:	2201      	movs	r2, #1
 800e318:	2109      	movs	r1, #9
 800e31a:	f7ff ff7d 	bl	800e218 <std>
 800e31e:	68e0      	ldr	r0, [r4, #12]
 800e320:	2202      	movs	r2, #2
 800e322:	2112      	movs	r1, #18
 800e324:	f7ff ff78 	bl	800e218 <std>
 800e328:	2301      	movs	r3, #1
 800e32a:	61a3      	str	r3, [r4, #24]
 800e32c:	e7d2      	b.n	800e2d4 <__sinit+0xc>
 800e32e:	bf00      	nop
 800e330:	0801047c 	.word	0x0801047c
 800e334:	0800e261 	.word	0x0800e261

0800e338 <__sfp>:
 800e338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e33a:	4607      	mov	r7, r0
 800e33c:	f7ff ffac 	bl	800e298 <__sfp_lock_acquire>
 800e340:	4b1e      	ldr	r3, [pc, #120]	; (800e3bc <__sfp+0x84>)
 800e342:	681e      	ldr	r6, [r3, #0]
 800e344:	69b3      	ldr	r3, [r6, #24]
 800e346:	b913      	cbnz	r3, 800e34e <__sfp+0x16>
 800e348:	4630      	mov	r0, r6
 800e34a:	f7ff ffbd 	bl	800e2c8 <__sinit>
 800e34e:	3648      	adds	r6, #72	; 0x48
 800e350:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e354:	3b01      	subs	r3, #1
 800e356:	d503      	bpl.n	800e360 <__sfp+0x28>
 800e358:	6833      	ldr	r3, [r6, #0]
 800e35a:	b30b      	cbz	r3, 800e3a0 <__sfp+0x68>
 800e35c:	6836      	ldr	r6, [r6, #0]
 800e35e:	e7f7      	b.n	800e350 <__sfp+0x18>
 800e360:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e364:	b9d5      	cbnz	r5, 800e39c <__sfp+0x64>
 800e366:	4b16      	ldr	r3, [pc, #88]	; (800e3c0 <__sfp+0x88>)
 800e368:	60e3      	str	r3, [r4, #12]
 800e36a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e36e:	6665      	str	r5, [r4, #100]	; 0x64
 800e370:	f000 f84c 	bl	800e40c <__retarget_lock_init_recursive>
 800e374:	f7ff ff96 	bl	800e2a4 <__sfp_lock_release>
 800e378:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e37c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e380:	6025      	str	r5, [r4, #0]
 800e382:	61a5      	str	r5, [r4, #24]
 800e384:	2208      	movs	r2, #8
 800e386:	4629      	mov	r1, r5
 800e388:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e38c:	f7fe fa46 	bl	800c81c <memset>
 800e390:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e394:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e398:	4620      	mov	r0, r4
 800e39a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e39c:	3468      	adds	r4, #104	; 0x68
 800e39e:	e7d9      	b.n	800e354 <__sfp+0x1c>
 800e3a0:	2104      	movs	r1, #4
 800e3a2:	4638      	mov	r0, r7
 800e3a4:	f7ff ff62 	bl	800e26c <__sfmoreglue>
 800e3a8:	4604      	mov	r4, r0
 800e3aa:	6030      	str	r0, [r6, #0]
 800e3ac:	2800      	cmp	r0, #0
 800e3ae:	d1d5      	bne.n	800e35c <__sfp+0x24>
 800e3b0:	f7ff ff78 	bl	800e2a4 <__sfp_lock_release>
 800e3b4:	230c      	movs	r3, #12
 800e3b6:	603b      	str	r3, [r7, #0]
 800e3b8:	e7ee      	b.n	800e398 <__sfp+0x60>
 800e3ba:	bf00      	nop
 800e3bc:	0801047c 	.word	0x0801047c
 800e3c0:	ffff0001 	.word	0xffff0001

0800e3c4 <_fwalk_reent>:
 800e3c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3c8:	4606      	mov	r6, r0
 800e3ca:	4688      	mov	r8, r1
 800e3cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e3d0:	2700      	movs	r7, #0
 800e3d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e3d6:	f1b9 0901 	subs.w	r9, r9, #1
 800e3da:	d505      	bpl.n	800e3e8 <_fwalk_reent+0x24>
 800e3dc:	6824      	ldr	r4, [r4, #0]
 800e3de:	2c00      	cmp	r4, #0
 800e3e0:	d1f7      	bne.n	800e3d2 <_fwalk_reent+0xe>
 800e3e2:	4638      	mov	r0, r7
 800e3e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3e8:	89ab      	ldrh	r3, [r5, #12]
 800e3ea:	2b01      	cmp	r3, #1
 800e3ec:	d907      	bls.n	800e3fe <_fwalk_reent+0x3a>
 800e3ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e3f2:	3301      	adds	r3, #1
 800e3f4:	d003      	beq.n	800e3fe <_fwalk_reent+0x3a>
 800e3f6:	4629      	mov	r1, r5
 800e3f8:	4630      	mov	r0, r6
 800e3fa:	47c0      	blx	r8
 800e3fc:	4307      	orrs	r7, r0
 800e3fe:	3568      	adds	r5, #104	; 0x68
 800e400:	e7e9      	b.n	800e3d6 <_fwalk_reent+0x12>
	...

0800e404 <_localeconv_r>:
 800e404:	4800      	ldr	r0, [pc, #0]	; (800e408 <_localeconv_r+0x4>)
 800e406:	4770      	bx	lr
 800e408:	20000164 	.word	0x20000164

0800e40c <__retarget_lock_init_recursive>:
 800e40c:	4770      	bx	lr

0800e40e <__retarget_lock_acquire_recursive>:
 800e40e:	4770      	bx	lr

0800e410 <__retarget_lock_release_recursive>:
 800e410:	4770      	bx	lr

0800e412 <__swhatbuf_r>:
 800e412:	b570      	push	{r4, r5, r6, lr}
 800e414:	460e      	mov	r6, r1
 800e416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e41a:	2900      	cmp	r1, #0
 800e41c:	b096      	sub	sp, #88	; 0x58
 800e41e:	4614      	mov	r4, r2
 800e420:	461d      	mov	r5, r3
 800e422:	da08      	bge.n	800e436 <__swhatbuf_r+0x24>
 800e424:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e428:	2200      	movs	r2, #0
 800e42a:	602a      	str	r2, [r5, #0]
 800e42c:	061a      	lsls	r2, r3, #24
 800e42e:	d410      	bmi.n	800e452 <__swhatbuf_r+0x40>
 800e430:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e434:	e00e      	b.n	800e454 <__swhatbuf_r+0x42>
 800e436:	466a      	mov	r2, sp
 800e438:	f000 fee0 	bl	800f1fc <_fstat_r>
 800e43c:	2800      	cmp	r0, #0
 800e43e:	dbf1      	blt.n	800e424 <__swhatbuf_r+0x12>
 800e440:	9a01      	ldr	r2, [sp, #4]
 800e442:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e446:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e44a:	425a      	negs	r2, r3
 800e44c:	415a      	adcs	r2, r3
 800e44e:	602a      	str	r2, [r5, #0]
 800e450:	e7ee      	b.n	800e430 <__swhatbuf_r+0x1e>
 800e452:	2340      	movs	r3, #64	; 0x40
 800e454:	2000      	movs	r0, #0
 800e456:	6023      	str	r3, [r4, #0]
 800e458:	b016      	add	sp, #88	; 0x58
 800e45a:	bd70      	pop	{r4, r5, r6, pc}

0800e45c <__smakebuf_r>:
 800e45c:	898b      	ldrh	r3, [r1, #12]
 800e45e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e460:	079d      	lsls	r5, r3, #30
 800e462:	4606      	mov	r6, r0
 800e464:	460c      	mov	r4, r1
 800e466:	d507      	bpl.n	800e478 <__smakebuf_r+0x1c>
 800e468:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e46c:	6023      	str	r3, [r4, #0]
 800e46e:	6123      	str	r3, [r4, #16]
 800e470:	2301      	movs	r3, #1
 800e472:	6163      	str	r3, [r4, #20]
 800e474:	b002      	add	sp, #8
 800e476:	bd70      	pop	{r4, r5, r6, pc}
 800e478:	ab01      	add	r3, sp, #4
 800e47a:	466a      	mov	r2, sp
 800e47c:	f7ff ffc9 	bl	800e412 <__swhatbuf_r>
 800e480:	9900      	ldr	r1, [sp, #0]
 800e482:	4605      	mov	r5, r0
 800e484:	4630      	mov	r0, r6
 800e486:	f000 fc45 	bl	800ed14 <_malloc_r>
 800e48a:	b948      	cbnz	r0, 800e4a0 <__smakebuf_r+0x44>
 800e48c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e490:	059a      	lsls	r2, r3, #22
 800e492:	d4ef      	bmi.n	800e474 <__smakebuf_r+0x18>
 800e494:	f023 0303 	bic.w	r3, r3, #3
 800e498:	f043 0302 	orr.w	r3, r3, #2
 800e49c:	81a3      	strh	r3, [r4, #12]
 800e49e:	e7e3      	b.n	800e468 <__smakebuf_r+0xc>
 800e4a0:	4b0d      	ldr	r3, [pc, #52]	; (800e4d8 <__smakebuf_r+0x7c>)
 800e4a2:	62b3      	str	r3, [r6, #40]	; 0x28
 800e4a4:	89a3      	ldrh	r3, [r4, #12]
 800e4a6:	6020      	str	r0, [r4, #0]
 800e4a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e4ac:	81a3      	strh	r3, [r4, #12]
 800e4ae:	9b00      	ldr	r3, [sp, #0]
 800e4b0:	6163      	str	r3, [r4, #20]
 800e4b2:	9b01      	ldr	r3, [sp, #4]
 800e4b4:	6120      	str	r0, [r4, #16]
 800e4b6:	b15b      	cbz	r3, 800e4d0 <__smakebuf_r+0x74>
 800e4b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e4bc:	4630      	mov	r0, r6
 800e4be:	f000 feaf 	bl	800f220 <_isatty_r>
 800e4c2:	b128      	cbz	r0, 800e4d0 <__smakebuf_r+0x74>
 800e4c4:	89a3      	ldrh	r3, [r4, #12]
 800e4c6:	f023 0303 	bic.w	r3, r3, #3
 800e4ca:	f043 0301 	orr.w	r3, r3, #1
 800e4ce:	81a3      	strh	r3, [r4, #12]
 800e4d0:	89a0      	ldrh	r0, [r4, #12]
 800e4d2:	4305      	orrs	r5, r0
 800e4d4:	81a5      	strh	r5, [r4, #12]
 800e4d6:	e7cd      	b.n	800e474 <__smakebuf_r+0x18>
 800e4d8:	0800e261 	.word	0x0800e261

0800e4dc <malloc>:
 800e4dc:	4b02      	ldr	r3, [pc, #8]	; (800e4e8 <malloc+0xc>)
 800e4de:	4601      	mov	r1, r0
 800e4e0:	6818      	ldr	r0, [r3, #0]
 800e4e2:	f000 bc17 	b.w	800ed14 <_malloc_r>
 800e4e6:	bf00      	nop
 800e4e8:	20000010 	.word	0x20000010

0800e4ec <memcpy>:
 800e4ec:	440a      	add	r2, r1
 800e4ee:	4291      	cmp	r1, r2
 800e4f0:	f100 33ff 	add.w	r3, r0, #4294967295
 800e4f4:	d100      	bne.n	800e4f8 <memcpy+0xc>
 800e4f6:	4770      	bx	lr
 800e4f8:	b510      	push	{r4, lr}
 800e4fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e4fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e502:	4291      	cmp	r1, r2
 800e504:	d1f9      	bne.n	800e4fa <memcpy+0xe>
 800e506:	bd10      	pop	{r4, pc}

0800e508 <_Balloc>:
 800e508:	b570      	push	{r4, r5, r6, lr}
 800e50a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e50c:	4604      	mov	r4, r0
 800e50e:	460d      	mov	r5, r1
 800e510:	b976      	cbnz	r6, 800e530 <_Balloc+0x28>
 800e512:	2010      	movs	r0, #16
 800e514:	f7ff ffe2 	bl	800e4dc <malloc>
 800e518:	4602      	mov	r2, r0
 800e51a:	6260      	str	r0, [r4, #36]	; 0x24
 800e51c:	b920      	cbnz	r0, 800e528 <_Balloc+0x20>
 800e51e:	4b18      	ldr	r3, [pc, #96]	; (800e580 <_Balloc+0x78>)
 800e520:	4818      	ldr	r0, [pc, #96]	; (800e584 <_Balloc+0x7c>)
 800e522:	2166      	movs	r1, #102	; 0x66
 800e524:	f000 fe2a 	bl	800f17c <__assert_func>
 800e528:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e52c:	6006      	str	r6, [r0, #0]
 800e52e:	60c6      	str	r6, [r0, #12]
 800e530:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e532:	68f3      	ldr	r3, [r6, #12]
 800e534:	b183      	cbz	r3, 800e558 <_Balloc+0x50>
 800e536:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e538:	68db      	ldr	r3, [r3, #12]
 800e53a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e53e:	b9b8      	cbnz	r0, 800e570 <_Balloc+0x68>
 800e540:	2101      	movs	r1, #1
 800e542:	fa01 f605 	lsl.w	r6, r1, r5
 800e546:	1d72      	adds	r2, r6, #5
 800e548:	0092      	lsls	r2, r2, #2
 800e54a:	4620      	mov	r0, r4
 800e54c:	f000 fb60 	bl	800ec10 <_calloc_r>
 800e550:	b160      	cbz	r0, 800e56c <_Balloc+0x64>
 800e552:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e556:	e00e      	b.n	800e576 <_Balloc+0x6e>
 800e558:	2221      	movs	r2, #33	; 0x21
 800e55a:	2104      	movs	r1, #4
 800e55c:	4620      	mov	r0, r4
 800e55e:	f000 fb57 	bl	800ec10 <_calloc_r>
 800e562:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e564:	60f0      	str	r0, [r6, #12]
 800e566:	68db      	ldr	r3, [r3, #12]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d1e4      	bne.n	800e536 <_Balloc+0x2e>
 800e56c:	2000      	movs	r0, #0
 800e56e:	bd70      	pop	{r4, r5, r6, pc}
 800e570:	6802      	ldr	r2, [r0, #0]
 800e572:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e576:	2300      	movs	r3, #0
 800e578:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e57c:	e7f7      	b.n	800e56e <_Balloc+0x66>
 800e57e:	bf00      	nop
 800e580:	080104c1 	.word	0x080104c1
 800e584:	080105a4 	.word	0x080105a4

0800e588 <_Bfree>:
 800e588:	b570      	push	{r4, r5, r6, lr}
 800e58a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e58c:	4605      	mov	r5, r0
 800e58e:	460c      	mov	r4, r1
 800e590:	b976      	cbnz	r6, 800e5b0 <_Bfree+0x28>
 800e592:	2010      	movs	r0, #16
 800e594:	f7ff ffa2 	bl	800e4dc <malloc>
 800e598:	4602      	mov	r2, r0
 800e59a:	6268      	str	r0, [r5, #36]	; 0x24
 800e59c:	b920      	cbnz	r0, 800e5a8 <_Bfree+0x20>
 800e59e:	4b09      	ldr	r3, [pc, #36]	; (800e5c4 <_Bfree+0x3c>)
 800e5a0:	4809      	ldr	r0, [pc, #36]	; (800e5c8 <_Bfree+0x40>)
 800e5a2:	218a      	movs	r1, #138	; 0x8a
 800e5a4:	f000 fdea 	bl	800f17c <__assert_func>
 800e5a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e5ac:	6006      	str	r6, [r0, #0]
 800e5ae:	60c6      	str	r6, [r0, #12]
 800e5b0:	b13c      	cbz	r4, 800e5c2 <_Bfree+0x3a>
 800e5b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e5b4:	6862      	ldr	r2, [r4, #4]
 800e5b6:	68db      	ldr	r3, [r3, #12]
 800e5b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e5bc:	6021      	str	r1, [r4, #0]
 800e5be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e5c2:	bd70      	pop	{r4, r5, r6, pc}
 800e5c4:	080104c1 	.word	0x080104c1
 800e5c8:	080105a4 	.word	0x080105a4

0800e5cc <__multadd>:
 800e5cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5d0:	690d      	ldr	r5, [r1, #16]
 800e5d2:	4607      	mov	r7, r0
 800e5d4:	460c      	mov	r4, r1
 800e5d6:	461e      	mov	r6, r3
 800e5d8:	f101 0c14 	add.w	ip, r1, #20
 800e5dc:	2000      	movs	r0, #0
 800e5de:	f8dc 3000 	ldr.w	r3, [ip]
 800e5e2:	b299      	uxth	r1, r3
 800e5e4:	fb02 6101 	mla	r1, r2, r1, r6
 800e5e8:	0c1e      	lsrs	r6, r3, #16
 800e5ea:	0c0b      	lsrs	r3, r1, #16
 800e5ec:	fb02 3306 	mla	r3, r2, r6, r3
 800e5f0:	b289      	uxth	r1, r1
 800e5f2:	3001      	adds	r0, #1
 800e5f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e5f8:	4285      	cmp	r5, r0
 800e5fa:	f84c 1b04 	str.w	r1, [ip], #4
 800e5fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e602:	dcec      	bgt.n	800e5de <__multadd+0x12>
 800e604:	b30e      	cbz	r6, 800e64a <__multadd+0x7e>
 800e606:	68a3      	ldr	r3, [r4, #8]
 800e608:	42ab      	cmp	r3, r5
 800e60a:	dc19      	bgt.n	800e640 <__multadd+0x74>
 800e60c:	6861      	ldr	r1, [r4, #4]
 800e60e:	4638      	mov	r0, r7
 800e610:	3101      	adds	r1, #1
 800e612:	f7ff ff79 	bl	800e508 <_Balloc>
 800e616:	4680      	mov	r8, r0
 800e618:	b928      	cbnz	r0, 800e626 <__multadd+0x5a>
 800e61a:	4602      	mov	r2, r0
 800e61c:	4b0c      	ldr	r3, [pc, #48]	; (800e650 <__multadd+0x84>)
 800e61e:	480d      	ldr	r0, [pc, #52]	; (800e654 <__multadd+0x88>)
 800e620:	21b5      	movs	r1, #181	; 0xb5
 800e622:	f000 fdab 	bl	800f17c <__assert_func>
 800e626:	6922      	ldr	r2, [r4, #16]
 800e628:	3202      	adds	r2, #2
 800e62a:	f104 010c 	add.w	r1, r4, #12
 800e62e:	0092      	lsls	r2, r2, #2
 800e630:	300c      	adds	r0, #12
 800e632:	f7ff ff5b 	bl	800e4ec <memcpy>
 800e636:	4621      	mov	r1, r4
 800e638:	4638      	mov	r0, r7
 800e63a:	f7ff ffa5 	bl	800e588 <_Bfree>
 800e63e:	4644      	mov	r4, r8
 800e640:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e644:	3501      	adds	r5, #1
 800e646:	615e      	str	r6, [r3, #20]
 800e648:	6125      	str	r5, [r4, #16]
 800e64a:	4620      	mov	r0, r4
 800e64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e650:	08010533 	.word	0x08010533
 800e654:	080105a4 	.word	0x080105a4

0800e658 <__hi0bits>:
 800e658:	0c03      	lsrs	r3, r0, #16
 800e65a:	041b      	lsls	r3, r3, #16
 800e65c:	b9d3      	cbnz	r3, 800e694 <__hi0bits+0x3c>
 800e65e:	0400      	lsls	r0, r0, #16
 800e660:	2310      	movs	r3, #16
 800e662:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e666:	bf04      	itt	eq
 800e668:	0200      	lsleq	r0, r0, #8
 800e66a:	3308      	addeq	r3, #8
 800e66c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e670:	bf04      	itt	eq
 800e672:	0100      	lsleq	r0, r0, #4
 800e674:	3304      	addeq	r3, #4
 800e676:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e67a:	bf04      	itt	eq
 800e67c:	0080      	lsleq	r0, r0, #2
 800e67e:	3302      	addeq	r3, #2
 800e680:	2800      	cmp	r0, #0
 800e682:	db05      	blt.n	800e690 <__hi0bits+0x38>
 800e684:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e688:	f103 0301 	add.w	r3, r3, #1
 800e68c:	bf08      	it	eq
 800e68e:	2320      	moveq	r3, #32
 800e690:	4618      	mov	r0, r3
 800e692:	4770      	bx	lr
 800e694:	2300      	movs	r3, #0
 800e696:	e7e4      	b.n	800e662 <__hi0bits+0xa>

0800e698 <__lo0bits>:
 800e698:	6803      	ldr	r3, [r0, #0]
 800e69a:	f013 0207 	ands.w	r2, r3, #7
 800e69e:	4601      	mov	r1, r0
 800e6a0:	d00b      	beq.n	800e6ba <__lo0bits+0x22>
 800e6a2:	07da      	lsls	r2, r3, #31
 800e6a4:	d423      	bmi.n	800e6ee <__lo0bits+0x56>
 800e6a6:	0798      	lsls	r0, r3, #30
 800e6a8:	bf49      	itett	mi
 800e6aa:	085b      	lsrmi	r3, r3, #1
 800e6ac:	089b      	lsrpl	r3, r3, #2
 800e6ae:	2001      	movmi	r0, #1
 800e6b0:	600b      	strmi	r3, [r1, #0]
 800e6b2:	bf5c      	itt	pl
 800e6b4:	600b      	strpl	r3, [r1, #0]
 800e6b6:	2002      	movpl	r0, #2
 800e6b8:	4770      	bx	lr
 800e6ba:	b298      	uxth	r0, r3
 800e6bc:	b9a8      	cbnz	r0, 800e6ea <__lo0bits+0x52>
 800e6be:	0c1b      	lsrs	r3, r3, #16
 800e6c0:	2010      	movs	r0, #16
 800e6c2:	b2da      	uxtb	r2, r3
 800e6c4:	b90a      	cbnz	r2, 800e6ca <__lo0bits+0x32>
 800e6c6:	3008      	adds	r0, #8
 800e6c8:	0a1b      	lsrs	r3, r3, #8
 800e6ca:	071a      	lsls	r2, r3, #28
 800e6cc:	bf04      	itt	eq
 800e6ce:	091b      	lsreq	r3, r3, #4
 800e6d0:	3004      	addeq	r0, #4
 800e6d2:	079a      	lsls	r2, r3, #30
 800e6d4:	bf04      	itt	eq
 800e6d6:	089b      	lsreq	r3, r3, #2
 800e6d8:	3002      	addeq	r0, #2
 800e6da:	07da      	lsls	r2, r3, #31
 800e6dc:	d403      	bmi.n	800e6e6 <__lo0bits+0x4e>
 800e6de:	085b      	lsrs	r3, r3, #1
 800e6e0:	f100 0001 	add.w	r0, r0, #1
 800e6e4:	d005      	beq.n	800e6f2 <__lo0bits+0x5a>
 800e6e6:	600b      	str	r3, [r1, #0]
 800e6e8:	4770      	bx	lr
 800e6ea:	4610      	mov	r0, r2
 800e6ec:	e7e9      	b.n	800e6c2 <__lo0bits+0x2a>
 800e6ee:	2000      	movs	r0, #0
 800e6f0:	4770      	bx	lr
 800e6f2:	2020      	movs	r0, #32
 800e6f4:	4770      	bx	lr
	...

0800e6f8 <__i2b>:
 800e6f8:	b510      	push	{r4, lr}
 800e6fa:	460c      	mov	r4, r1
 800e6fc:	2101      	movs	r1, #1
 800e6fe:	f7ff ff03 	bl	800e508 <_Balloc>
 800e702:	4602      	mov	r2, r0
 800e704:	b928      	cbnz	r0, 800e712 <__i2b+0x1a>
 800e706:	4b05      	ldr	r3, [pc, #20]	; (800e71c <__i2b+0x24>)
 800e708:	4805      	ldr	r0, [pc, #20]	; (800e720 <__i2b+0x28>)
 800e70a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e70e:	f000 fd35 	bl	800f17c <__assert_func>
 800e712:	2301      	movs	r3, #1
 800e714:	6144      	str	r4, [r0, #20]
 800e716:	6103      	str	r3, [r0, #16]
 800e718:	bd10      	pop	{r4, pc}
 800e71a:	bf00      	nop
 800e71c:	08010533 	.word	0x08010533
 800e720:	080105a4 	.word	0x080105a4

0800e724 <__multiply>:
 800e724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e728:	4691      	mov	r9, r2
 800e72a:	690a      	ldr	r2, [r1, #16]
 800e72c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e730:	429a      	cmp	r2, r3
 800e732:	bfb8      	it	lt
 800e734:	460b      	movlt	r3, r1
 800e736:	460c      	mov	r4, r1
 800e738:	bfbc      	itt	lt
 800e73a:	464c      	movlt	r4, r9
 800e73c:	4699      	movlt	r9, r3
 800e73e:	6927      	ldr	r7, [r4, #16]
 800e740:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e744:	68a3      	ldr	r3, [r4, #8]
 800e746:	6861      	ldr	r1, [r4, #4]
 800e748:	eb07 060a 	add.w	r6, r7, sl
 800e74c:	42b3      	cmp	r3, r6
 800e74e:	b085      	sub	sp, #20
 800e750:	bfb8      	it	lt
 800e752:	3101      	addlt	r1, #1
 800e754:	f7ff fed8 	bl	800e508 <_Balloc>
 800e758:	b930      	cbnz	r0, 800e768 <__multiply+0x44>
 800e75a:	4602      	mov	r2, r0
 800e75c:	4b44      	ldr	r3, [pc, #272]	; (800e870 <__multiply+0x14c>)
 800e75e:	4845      	ldr	r0, [pc, #276]	; (800e874 <__multiply+0x150>)
 800e760:	f240 115d 	movw	r1, #349	; 0x15d
 800e764:	f000 fd0a 	bl	800f17c <__assert_func>
 800e768:	f100 0514 	add.w	r5, r0, #20
 800e76c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e770:	462b      	mov	r3, r5
 800e772:	2200      	movs	r2, #0
 800e774:	4543      	cmp	r3, r8
 800e776:	d321      	bcc.n	800e7bc <__multiply+0x98>
 800e778:	f104 0314 	add.w	r3, r4, #20
 800e77c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e780:	f109 0314 	add.w	r3, r9, #20
 800e784:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e788:	9202      	str	r2, [sp, #8]
 800e78a:	1b3a      	subs	r2, r7, r4
 800e78c:	3a15      	subs	r2, #21
 800e78e:	f022 0203 	bic.w	r2, r2, #3
 800e792:	3204      	adds	r2, #4
 800e794:	f104 0115 	add.w	r1, r4, #21
 800e798:	428f      	cmp	r7, r1
 800e79a:	bf38      	it	cc
 800e79c:	2204      	movcc	r2, #4
 800e79e:	9201      	str	r2, [sp, #4]
 800e7a0:	9a02      	ldr	r2, [sp, #8]
 800e7a2:	9303      	str	r3, [sp, #12]
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	d80c      	bhi.n	800e7c2 <__multiply+0x9e>
 800e7a8:	2e00      	cmp	r6, #0
 800e7aa:	dd03      	ble.n	800e7b4 <__multiply+0x90>
 800e7ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d05a      	beq.n	800e86a <__multiply+0x146>
 800e7b4:	6106      	str	r6, [r0, #16]
 800e7b6:	b005      	add	sp, #20
 800e7b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7bc:	f843 2b04 	str.w	r2, [r3], #4
 800e7c0:	e7d8      	b.n	800e774 <__multiply+0x50>
 800e7c2:	f8b3 a000 	ldrh.w	sl, [r3]
 800e7c6:	f1ba 0f00 	cmp.w	sl, #0
 800e7ca:	d024      	beq.n	800e816 <__multiply+0xf2>
 800e7cc:	f104 0e14 	add.w	lr, r4, #20
 800e7d0:	46a9      	mov	r9, r5
 800e7d2:	f04f 0c00 	mov.w	ip, #0
 800e7d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e7da:	f8d9 1000 	ldr.w	r1, [r9]
 800e7de:	fa1f fb82 	uxth.w	fp, r2
 800e7e2:	b289      	uxth	r1, r1
 800e7e4:	fb0a 110b 	mla	r1, sl, fp, r1
 800e7e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e7ec:	f8d9 2000 	ldr.w	r2, [r9]
 800e7f0:	4461      	add	r1, ip
 800e7f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e7f6:	fb0a c20b 	mla	r2, sl, fp, ip
 800e7fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e7fe:	b289      	uxth	r1, r1
 800e800:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e804:	4577      	cmp	r7, lr
 800e806:	f849 1b04 	str.w	r1, [r9], #4
 800e80a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e80e:	d8e2      	bhi.n	800e7d6 <__multiply+0xb2>
 800e810:	9a01      	ldr	r2, [sp, #4]
 800e812:	f845 c002 	str.w	ip, [r5, r2]
 800e816:	9a03      	ldr	r2, [sp, #12]
 800e818:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e81c:	3304      	adds	r3, #4
 800e81e:	f1b9 0f00 	cmp.w	r9, #0
 800e822:	d020      	beq.n	800e866 <__multiply+0x142>
 800e824:	6829      	ldr	r1, [r5, #0]
 800e826:	f104 0c14 	add.w	ip, r4, #20
 800e82a:	46ae      	mov	lr, r5
 800e82c:	f04f 0a00 	mov.w	sl, #0
 800e830:	f8bc b000 	ldrh.w	fp, [ip]
 800e834:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e838:	fb09 220b 	mla	r2, r9, fp, r2
 800e83c:	4492      	add	sl, r2
 800e83e:	b289      	uxth	r1, r1
 800e840:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e844:	f84e 1b04 	str.w	r1, [lr], #4
 800e848:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e84c:	f8be 1000 	ldrh.w	r1, [lr]
 800e850:	0c12      	lsrs	r2, r2, #16
 800e852:	fb09 1102 	mla	r1, r9, r2, r1
 800e856:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e85a:	4567      	cmp	r7, ip
 800e85c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e860:	d8e6      	bhi.n	800e830 <__multiply+0x10c>
 800e862:	9a01      	ldr	r2, [sp, #4]
 800e864:	50a9      	str	r1, [r5, r2]
 800e866:	3504      	adds	r5, #4
 800e868:	e79a      	b.n	800e7a0 <__multiply+0x7c>
 800e86a:	3e01      	subs	r6, #1
 800e86c:	e79c      	b.n	800e7a8 <__multiply+0x84>
 800e86e:	bf00      	nop
 800e870:	08010533 	.word	0x08010533
 800e874:	080105a4 	.word	0x080105a4

0800e878 <__pow5mult>:
 800e878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e87c:	4615      	mov	r5, r2
 800e87e:	f012 0203 	ands.w	r2, r2, #3
 800e882:	4606      	mov	r6, r0
 800e884:	460f      	mov	r7, r1
 800e886:	d007      	beq.n	800e898 <__pow5mult+0x20>
 800e888:	4c25      	ldr	r4, [pc, #148]	; (800e920 <__pow5mult+0xa8>)
 800e88a:	3a01      	subs	r2, #1
 800e88c:	2300      	movs	r3, #0
 800e88e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e892:	f7ff fe9b 	bl	800e5cc <__multadd>
 800e896:	4607      	mov	r7, r0
 800e898:	10ad      	asrs	r5, r5, #2
 800e89a:	d03d      	beq.n	800e918 <__pow5mult+0xa0>
 800e89c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e89e:	b97c      	cbnz	r4, 800e8c0 <__pow5mult+0x48>
 800e8a0:	2010      	movs	r0, #16
 800e8a2:	f7ff fe1b 	bl	800e4dc <malloc>
 800e8a6:	4602      	mov	r2, r0
 800e8a8:	6270      	str	r0, [r6, #36]	; 0x24
 800e8aa:	b928      	cbnz	r0, 800e8b8 <__pow5mult+0x40>
 800e8ac:	4b1d      	ldr	r3, [pc, #116]	; (800e924 <__pow5mult+0xac>)
 800e8ae:	481e      	ldr	r0, [pc, #120]	; (800e928 <__pow5mult+0xb0>)
 800e8b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e8b4:	f000 fc62 	bl	800f17c <__assert_func>
 800e8b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e8bc:	6004      	str	r4, [r0, #0]
 800e8be:	60c4      	str	r4, [r0, #12]
 800e8c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e8c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e8c8:	b94c      	cbnz	r4, 800e8de <__pow5mult+0x66>
 800e8ca:	f240 2171 	movw	r1, #625	; 0x271
 800e8ce:	4630      	mov	r0, r6
 800e8d0:	f7ff ff12 	bl	800e6f8 <__i2b>
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800e8da:	4604      	mov	r4, r0
 800e8dc:	6003      	str	r3, [r0, #0]
 800e8de:	f04f 0900 	mov.w	r9, #0
 800e8e2:	07eb      	lsls	r3, r5, #31
 800e8e4:	d50a      	bpl.n	800e8fc <__pow5mult+0x84>
 800e8e6:	4639      	mov	r1, r7
 800e8e8:	4622      	mov	r2, r4
 800e8ea:	4630      	mov	r0, r6
 800e8ec:	f7ff ff1a 	bl	800e724 <__multiply>
 800e8f0:	4639      	mov	r1, r7
 800e8f2:	4680      	mov	r8, r0
 800e8f4:	4630      	mov	r0, r6
 800e8f6:	f7ff fe47 	bl	800e588 <_Bfree>
 800e8fa:	4647      	mov	r7, r8
 800e8fc:	106d      	asrs	r5, r5, #1
 800e8fe:	d00b      	beq.n	800e918 <__pow5mult+0xa0>
 800e900:	6820      	ldr	r0, [r4, #0]
 800e902:	b938      	cbnz	r0, 800e914 <__pow5mult+0x9c>
 800e904:	4622      	mov	r2, r4
 800e906:	4621      	mov	r1, r4
 800e908:	4630      	mov	r0, r6
 800e90a:	f7ff ff0b 	bl	800e724 <__multiply>
 800e90e:	6020      	str	r0, [r4, #0]
 800e910:	f8c0 9000 	str.w	r9, [r0]
 800e914:	4604      	mov	r4, r0
 800e916:	e7e4      	b.n	800e8e2 <__pow5mult+0x6a>
 800e918:	4638      	mov	r0, r7
 800e91a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e91e:	bf00      	nop
 800e920:	080106f0 	.word	0x080106f0
 800e924:	080104c1 	.word	0x080104c1
 800e928:	080105a4 	.word	0x080105a4

0800e92c <__lshift>:
 800e92c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e930:	460c      	mov	r4, r1
 800e932:	6849      	ldr	r1, [r1, #4]
 800e934:	6923      	ldr	r3, [r4, #16]
 800e936:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e93a:	68a3      	ldr	r3, [r4, #8]
 800e93c:	4607      	mov	r7, r0
 800e93e:	4691      	mov	r9, r2
 800e940:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e944:	f108 0601 	add.w	r6, r8, #1
 800e948:	42b3      	cmp	r3, r6
 800e94a:	db0b      	blt.n	800e964 <__lshift+0x38>
 800e94c:	4638      	mov	r0, r7
 800e94e:	f7ff fddb 	bl	800e508 <_Balloc>
 800e952:	4605      	mov	r5, r0
 800e954:	b948      	cbnz	r0, 800e96a <__lshift+0x3e>
 800e956:	4602      	mov	r2, r0
 800e958:	4b2a      	ldr	r3, [pc, #168]	; (800ea04 <__lshift+0xd8>)
 800e95a:	482b      	ldr	r0, [pc, #172]	; (800ea08 <__lshift+0xdc>)
 800e95c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e960:	f000 fc0c 	bl	800f17c <__assert_func>
 800e964:	3101      	adds	r1, #1
 800e966:	005b      	lsls	r3, r3, #1
 800e968:	e7ee      	b.n	800e948 <__lshift+0x1c>
 800e96a:	2300      	movs	r3, #0
 800e96c:	f100 0114 	add.w	r1, r0, #20
 800e970:	f100 0210 	add.w	r2, r0, #16
 800e974:	4618      	mov	r0, r3
 800e976:	4553      	cmp	r3, sl
 800e978:	db37      	blt.n	800e9ea <__lshift+0xbe>
 800e97a:	6920      	ldr	r0, [r4, #16]
 800e97c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e980:	f104 0314 	add.w	r3, r4, #20
 800e984:	f019 091f 	ands.w	r9, r9, #31
 800e988:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e98c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e990:	d02f      	beq.n	800e9f2 <__lshift+0xc6>
 800e992:	f1c9 0e20 	rsb	lr, r9, #32
 800e996:	468a      	mov	sl, r1
 800e998:	f04f 0c00 	mov.w	ip, #0
 800e99c:	681a      	ldr	r2, [r3, #0]
 800e99e:	fa02 f209 	lsl.w	r2, r2, r9
 800e9a2:	ea42 020c 	orr.w	r2, r2, ip
 800e9a6:	f84a 2b04 	str.w	r2, [sl], #4
 800e9aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9ae:	4298      	cmp	r0, r3
 800e9b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e9b4:	d8f2      	bhi.n	800e99c <__lshift+0x70>
 800e9b6:	1b03      	subs	r3, r0, r4
 800e9b8:	3b15      	subs	r3, #21
 800e9ba:	f023 0303 	bic.w	r3, r3, #3
 800e9be:	3304      	adds	r3, #4
 800e9c0:	f104 0215 	add.w	r2, r4, #21
 800e9c4:	4290      	cmp	r0, r2
 800e9c6:	bf38      	it	cc
 800e9c8:	2304      	movcc	r3, #4
 800e9ca:	f841 c003 	str.w	ip, [r1, r3]
 800e9ce:	f1bc 0f00 	cmp.w	ip, #0
 800e9d2:	d001      	beq.n	800e9d8 <__lshift+0xac>
 800e9d4:	f108 0602 	add.w	r6, r8, #2
 800e9d8:	3e01      	subs	r6, #1
 800e9da:	4638      	mov	r0, r7
 800e9dc:	612e      	str	r6, [r5, #16]
 800e9de:	4621      	mov	r1, r4
 800e9e0:	f7ff fdd2 	bl	800e588 <_Bfree>
 800e9e4:	4628      	mov	r0, r5
 800e9e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800e9ee:	3301      	adds	r3, #1
 800e9f0:	e7c1      	b.n	800e976 <__lshift+0x4a>
 800e9f2:	3904      	subs	r1, #4
 800e9f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800e9fc:	4298      	cmp	r0, r3
 800e9fe:	d8f9      	bhi.n	800e9f4 <__lshift+0xc8>
 800ea00:	e7ea      	b.n	800e9d8 <__lshift+0xac>
 800ea02:	bf00      	nop
 800ea04:	08010533 	.word	0x08010533
 800ea08:	080105a4 	.word	0x080105a4

0800ea0c <__mcmp>:
 800ea0c:	b530      	push	{r4, r5, lr}
 800ea0e:	6902      	ldr	r2, [r0, #16]
 800ea10:	690c      	ldr	r4, [r1, #16]
 800ea12:	1b12      	subs	r2, r2, r4
 800ea14:	d10e      	bne.n	800ea34 <__mcmp+0x28>
 800ea16:	f100 0314 	add.w	r3, r0, #20
 800ea1a:	3114      	adds	r1, #20
 800ea1c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ea20:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ea24:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ea28:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ea2c:	42a5      	cmp	r5, r4
 800ea2e:	d003      	beq.n	800ea38 <__mcmp+0x2c>
 800ea30:	d305      	bcc.n	800ea3e <__mcmp+0x32>
 800ea32:	2201      	movs	r2, #1
 800ea34:	4610      	mov	r0, r2
 800ea36:	bd30      	pop	{r4, r5, pc}
 800ea38:	4283      	cmp	r3, r0
 800ea3a:	d3f3      	bcc.n	800ea24 <__mcmp+0x18>
 800ea3c:	e7fa      	b.n	800ea34 <__mcmp+0x28>
 800ea3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ea42:	e7f7      	b.n	800ea34 <__mcmp+0x28>

0800ea44 <__mdiff>:
 800ea44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea48:	460c      	mov	r4, r1
 800ea4a:	4606      	mov	r6, r0
 800ea4c:	4611      	mov	r1, r2
 800ea4e:	4620      	mov	r0, r4
 800ea50:	4690      	mov	r8, r2
 800ea52:	f7ff ffdb 	bl	800ea0c <__mcmp>
 800ea56:	1e05      	subs	r5, r0, #0
 800ea58:	d110      	bne.n	800ea7c <__mdiff+0x38>
 800ea5a:	4629      	mov	r1, r5
 800ea5c:	4630      	mov	r0, r6
 800ea5e:	f7ff fd53 	bl	800e508 <_Balloc>
 800ea62:	b930      	cbnz	r0, 800ea72 <__mdiff+0x2e>
 800ea64:	4b3a      	ldr	r3, [pc, #232]	; (800eb50 <__mdiff+0x10c>)
 800ea66:	4602      	mov	r2, r0
 800ea68:	f240 2132 	movw	r1, #562	; 0x232
 800ea6c:	4839      	ldr	r0, [pc, #228]	; (800eb54 <__mdiff+0x110>)
 800ea6e:	f000 fb85 	bl	800f17c <__assert_func>
 800ea72:	2301      	movs	r3, #1
 800ea74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ea78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea7c:	bfa4      	itt	ge
 800ea7e:	4643      	movge	r3, r8
 800ea80:	46a0      	movge	r8, r4
 800ea82:	4630      	mov	r0, r6
 800ea84:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ea88:	bfa6      	itte	ge
 800ea8a:	461c      	movge	r4, r3
 800ea8c:	2500      	movge	r5, #0
 800ea8e:	2501      	movlt	r5, #1
 800ea90:	f7ff fd3a 	bl	800e508 <_Balloc>
 800ea94:	b920      	cbnz	r0, 800eaa0 <__mdiff+0x5c>
 800ea96:	4b2e      	ldr	r3, [pc, #184]	; (800eb50 <__mdiff+0x10c>)
 800ea98:	4602      	mov	r2, r0
 800ea9a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ea9e:	e7e5      	b.n	800ea6c <__mdiff+0x28>
 800eaa0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800eaa4:	6926      	ldr	r6, [r4, #16]
 800eaa6:	60c5      	str	r5, [r0, #12]
 800eaa8:	f104 0914 	add.w	r9, r4, #20
 800eaac:	f108 0514 	add.w	r5, r8, #20
 800eab0:	f100 0e14 	add.w	lr, r0, #20
 800eab4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800eab8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800eabc:	f108 0210 	add.w	r2, r8, #16
 800eac0:	46f2      	mov	sl, lr
 800eac2:	2100      	movs	r1, #0
 800eac4:	f859 3b04 	ldr.w	r3, [r9], #4
 800eac8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800eacc:	fa1f f883 	uxth.w	r8, r3
 800ead0:	fa11 f18b 	uxtah	r1, r1, fp
 800ead4:	0c1b      	lsrs	r3, r3, #16
 800ead6:	eba1 0808 	sub.w	r8, r1, r8
 800eada:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800eade:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800eae2:	fa1f f888 	uxth.w	r8, r8
 800eae6:	1419      	asrs	r1, r3, #16
 800eae8:	454e      	cmp	r6, r9
 800eaea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800eaee:	f84a 3b04 	str.w	r3, [sl], #4
 800eaf2:	d8e7      	bhi.n	800eac4 <__mdiff+0x80>
 800eaf4:	1b33      	subs	r3, r6, r4
 800eaf6:	3b15      	subs	r3, #21
 800eaf8:	f023 0303 	bic.w	r3, r3, #3
 800eafc:	3304      	adds	r3, #4
 800eafe:	3415      	adds	r4, #21
 800eb00:	42a6      	cmp	r6, r4
 800eb02:	bf38      	it	cc
 800eb04:	2304      	movcc	r3, #4
 800eb06:	441d      	add	r5, r3
 800eb08:	4473      	add	r3, lr
 800eb0a:	469e      	mov	lr, r3
 800eb0c:	462e      	mov	r6, r5
 800eb0e:	4566      	cmp	r6, ip
 800eb10:	d30e      	bcc.n	800eb30 <__mdiff+0xec>
 800eb12:	f10c 0203 	add.w	r2, ip, #3
 800eb16:	1b52      	subs	r2, r2, r5
 800eb18:	f022 0203 	bic.w	r2, r2, #3
 800eb1c:	3d03      	subs	r5, #3
 800eb1e:	45ac      	cmp	ip, r5
 800eb20:	bf38      	it	cc
 800eb22:	2200      	movcc	r2, #0
 800eb24:	441a      	add	r2, r3
 800eb26:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800eb2a:	b17b      	cbz	r3, 800eb4c <__mdiff+0x108>
 800eb2c:	6107      	str	r7, [r0, #16]
 800eb2e:	e7a3      	b.n	800ea78 <__mdiff+0x34>
 800eb30:	f856 8b04 	ldr.w	r8, [r6], #4
 800eb34:	fa11 f288 	uxtah	r2, r1, r8
 800eb38:	1414      	asrs	r4, r2, #16
 800eb3a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800eb3e:	b292      	uxth	r2, r2
 800eb40:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800eb44:	f84e 2b04 	str.w	r2, [lr], #4
 800eb48:	1421      	asrs	r1, r4, #16
 800eb4a:	e7e0      	b.n	800eb0e <__mdiff+0xca>
 800eb4c:	3f01      	subs	r7, #1
 800eb4e:	e7ea      	b.n	800eb26 <__mdiff+0xe2>
 800eb50:	08010533 	.word	0x08010533
 800eb54:	080105a4 	.word	0x080105a4

0800eb58 <__d2b>:
 800eb58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800eb5c:	4689      	mov	r9, r1
 800eb5e:	2101      	movs	r1, #1
 800eb60:	ec57 6b10 	vmov	r6, r7, d0
 800eb64:	4690      	mov	r8, r2
 800eb66:	f7ff fccf 	bl	800e508 <_Balloc>
 800eb6a:	4604      	mov	r4, r0
 800eb6c:	b930      	cbnz	r0, 800eb7c <__d2b+0x24>
 800eb6e:	4602      	mov	r2, r0
 800eb70:	4b25      	ldr	r3, [pc, #148]	; (800ec08 <__d2b+0xb0>)
 800eb72:	4826      	ldr	r0, [pc, #152]	; (800ec0c <__d2b+0xb4>)
 800eb74:	f240 310a 	movw	r1, #778	; 0x30a
 800eb78:	f000 fb00 	bl	800f17c <__assert_func>
 800eb7c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800eb80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800eb84:	bb35      	cbnz	r5, 800ebd4 <__d2b+0x7c>
 800eb86:	2e00      	cmp	r6, #0
 800eb88:	9301      	str	r3, [sp, #4]
 800eb8a:	d028      	beq.n	800ebde <__d2b+0x86>
 800eb8c:	4668      	mov	r0, sp
 800eb8e:	9600      	str	r6, [sp, #0]
 800eb90:	f7ff fd82 	bl	800e698 <__lo0bits>
 800eb94:	9900      	ldr	r1, [sp, #0]
 800eb96:	b300      	cbz	r0, 800ebda <__d2b+0x82>
 800eb98:	9a01      	ldr	r2, [sp, #4]
 800eb9a:	f1c0 0320 	rsb	r3, r0, #32
 800eb9e:	fa02 f303 	lsl.w	r3, r2, r3
 800eba2:	430b      	orrs	r3, r1
 800eba4:	40c2      	lsrs	r2, r0
 800eba6:	6163      	str	r3, [r4, #20]
 800eba8:	9201      	str	r2, [sp, #4]
 800ebaa:	9b01      	ldr	r3, [sp, #4]
 800ebac:	61a3      	str	r3, [r4, #24]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	bf14      	ite	ne
 800ebb2:	2202      	movne	r2, #2
 800ebb4:	2201      	moveq	r2, #1
 800ebb6:	6122      	str	r2, [r4, #16]
 800ebb8:	b1d5      	cbz	r5, 800ebf0 <__d2b+0x98>
 800ebba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ebbe:	4405      	add	r5, r0
 800ebc0:	f8c9 5000 	str.w	r5, [r9]
 800ebc4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ebc8:	f8c8 0000 	str.w	r0, [r8]
 800ebcc:	4620      	mov	r0, r4
 800ebce:	b003      	add	sp, #12
 800ebd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ebd8:	e7d5      	b.n	800eb86 <__d2b+0x2e>
 800ebda:	6161      	str	r1, [r4, #20]
 800ebdc:	e7e5      	b.n	800ebaa <__d2b+0x52>
 800ebde:	a801      	add	r0, sp, #4
 800ebe0:	f7ff fd5a 	bl	800e698 <__lo0bits>
 800ebe4:	9b01      	ldr	r3, [sp, #4]
 800ebe6:	6163      	str	r3, [r4, #20]
 800ebe8:	2201      	movs	r2, #1
 800ebea:	6122      	str	r2, [r4, #16]
 800ebec:	3020      	adds	r0, #32
 800ebee:	e7e3      	b.n	800ebb8 <__d2b+0x60>
 800ebf0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ebf4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ebf8:	f8c9 0000 	str.w	r0, [r9]
 800ebfc:	6918      	ldr	r0, [r3, #16]
 800ebfe:	f7ff fd2b 	bl	800e658 <__hi0bits>
 800ec02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ec06:	e7df      	b.n	800ebc8 <__d2b+0x70>
 800ec08:	08010533 	.word	0x08010533
 800ec0c:	080105a4 	.word	0x080105a4

0800ec10 <_calloc_r>:
 800ec10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec12:	fba1 2402 	umull	r2, r4, r1, r2
 800ec16:	b94c      	cbnz	r4, 800ec2c <_calloc_r+0x1c>
 800ec18:	4611      	mov	r1, r2
 800ec1a:	9201      	str	r2, [sp, #4]
 800ec1c:	f000 f87a 	bl	800ed14 <_malloc_r>
 800ec20:	9a01      	ldr	r2, [sp, #4]
 800ec22:	4605      	mov	r5, r0
 800ec24:	b930      	cbnz	r0, 800ec34 <_calloc_r+0x24>
 800ec26:	4628      	mov	r0, r5
 800ec28:	b003      	add	sp, #12
 800ec2a:	bd30      	pop	{r4, r5, pc}
 800ec2c:	220c      	movs	r2, #12
 800ec2e:	6002      	str	r2, [r0, #0]
 800ec30:	2500      	movs	r5, #0
 800ec32:	e7f8      	b.n	800ec26 <_calloc_r+0x16>
 800ec34:	4621      	mov	r1, r4
 800ec36:	f7fd fdf1 	bl	800c81c <memset>
 800ec3a:	e7f4      	b.n	800ec26 <_calloc_r+0x16>

0800ec3c <_free_r>:
 800ec3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec3e:	2900      	cmp	r1, #0
 800ec40:	d044      	beq.n	800eccc <_free_r+0x90>
 800ec42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec46:	9001      	str	r0, [sp, #4]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	f1a1 0404 	sub.w	r4, r1, #4
 800ec4e:	bfb8      	it	lt
 800ec50:	18e4      	addlt	r4, r4, r3
 800ec52:	f000 fb19 	bl	800f288 <__malloc_lock>
 800ec56:	4a1e      	ldr	r2, [pc, #120]	; (800ecd0 <_free_r+0x94>)
 800ec58:	9801      	ldr	r0, [sp, #4]
 800ec5a:	6813      	ldr	r3, [r2, #0]
 800ec5c:	b933      	cbnz	r3, 800ec6c <_free_r+0x30>
 800ec5e:	6063      	str	r3, [r4, #4]
 800ec60:	6014      	str	r4, [r2, #0]
 800ec62:	b003      	add	sp, #12
 800ec64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ec68:	f000 bb14 	b.w	800f294 <__malloc_unlock>
 800ec6c:	42a3      	cmp	r3, r4
 800ec6e:	d908      	bls.n	800ec82 <_free_r+0x46>
 800ec70:	6825      	ldr	r5, [r4, #0]
 800ec72:	1961      	adds	r1, r4, r5
 800ec74:	428b      	cmp	r3, r1
 800ec76:	bf01      	itttt	eq
 800ec78:	6819      	ldreq	r1, [r3, #0]
 800ec7a:	685b      	ldreq	r3, [r3, #4]
 800ec7c:	1949      	addeq	r1, r1, r5
 800ec7e:	6021      	streq	r1, [r4, #0]
 800ec80:	e7ed      	b.n	800ec5e <_free_r+0x22>
 800ec82:	461a      	mov	r2, r3
 800ec84:	685b      	ldr	r3, [r3, #4]
 800ec86:	b10b      	cbz	r3, 800ec8c <_free_r+0x50>
 800ec88:	42a3      	cmp	r3, r4
 800ec8a:	d9fa      	bls.n	800ec82 <_free_r+0x46>
 800ec8c:	6811      	ldr	r1, [r2, #0]
 800ec8e:	1855      	adds	r5, r2, r1
 800ec90:	42a5      	cmp	r5, r4
 800ec92:	d10b      	bne.n	800ecac <_free_r+0x70>
 800ec94:	6824      	ldr	r4, [r4, #0]
 800ec96:	4421      	add	r1, r4
 800ec98:	1854      	adds	r4, r2, r1
 800ec9a:	42a3      	cmp	r3, r4
 800ec9c:	6011      	str	r1, [r2, #0]
 800ec9e:	d1e0      	bne.n	800ec62 <_free_r+0x26>
 800eca0:	681c      	ldr	r4, [r3, #0]
 800eca2:	685b      	ldr	r3, [r3, #4]
 800eca4:	6053      	str	r3, [r2, #4]
 800eca6:	4421      	add	r1, r4
 800eca8:	6011      	str	r1, [r2, #0]
 800ecaa:	e7da      	b.n	800ec62 <_free_r+0x26>
 800ecac:	d902      	bls.n	800ecb4 <_free_r+0x78>
 800ecae:	230c      	movs	r3, #12
 800ecb0:	6003      	str	r3, [r0, #0]
 800ecb2:	e7d6      	b.n	800ec62 <_free_r+0x26>
 800ecb4:	6825      	ldr	r5, [r4, #0]
 800ecb6:	1961      	adds	r1, r4, r5
 800ecb8:	428b      	cmp	r3, r1
 800ecba:	bf04      	itt	eq
 800ecbc:	6819      	ldreq	r1, [r3, #0]
 800ecbe:	685b      	ldreq	r3, [r3, #4]
 800ecc0:	6063      	str	r3, [r4, #4]
 800ecc2:	bf04      	itt	eq
 800ecc4:	1949      	addeq	r1, r1, r5
 800ecc6:	6021      	streq	r1, [r4, #0]
 800ecc8:	6054      	str	r4, [r2, #4]
 800ecca:	e7ca      	b.n	800ec62 <_free_r+0x26>
 800eccc:	b003      	add	sp, #12
 800ecce:	bd30      	pop	{r4, r5, pc}
 800ecd0:	2000069c 	.word	0x2000069c

0800ecd4 <sbrk_aligned>:
 800ecd4:	b570      	push	{r4, r5, r6, lr}
 800ecd6:	4e0e      	ldr	r6, [pc, #56]	; (800ed10 <sbrk_aligned+0x3c>)
 800ecd8:	460c      	mov	r4, r1
 800ecda:	6831      	ldr	r1, [r6, #0]
 800ecdc:	4605      	mov	r5, r0
 800ecde:	b911      	cbnz	r1, 800ece6 <sbrk_aligned+0x12>
 800ece0:	f000 f9e6 	bl	800f0b0 <_sbrk_r>
 800ece4:	6030      	str	r0, [r6, #0]
 800ece6:	4621      	mov	r1, r4
 800ece8:	4628      	mov	r0, r5
 800ecea:	f000 f9e1 	bl	800f0b0 <_sbrk_r>
 800ecee:	1c43      	adds	r3, r0, #1
 800ecf0:	d00a      	beq.n	800ed08 <sbrk_aligned+0x34>
 800ecf2:	1cc4      	adds	r4, r0, #3
 800ecf4:	f024 0403 	bic.w	r4, r4, #3
 800ecf8:	42a0      	cmp	r0, r4
 800ecfa:	d007      	beq.n	800ed0c <sbrk_aligned+0x38>
 800ecfc:	1a21      	subs	r1, r4, r0
 800ecfe:	4628      	mov	r0, r5
 800ed00:	f000 f9d6 	bl	800f0b0 <_sbrk_r>
 800ed04:	3001      	adds	r0, #1
 800ed06:	d101      	bne.n	800ed0c <sbrk_aligned+0x38>
 800ed08:	f04f 34ff 	mov.w	r4, #4294967295
 800ed0c:	4620      	mov	r0, r4
 800ed0e:	bd70      	pop	{r4, r5, r6, pc}
 800ed10:	200006a0 	.word	0x200006a0

0800ed14 <_malloc_r>:
 800ed14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed18:	1ccd      	adds	r5, r1, #3
 800ed1a:	f025 0503 	bic.w	r5, r5, #3
 800ed1e:	3508      	adds	r5, #8
 800ed20:	2d0c      	cmp	r5, #12
 800ed22:	bf38      	it	cc
 800ed24:	250c      	movcc	r5, #12
 800ed26:	2d00      	cmp	r5, #0
 800ed28:	4607      	mov	r7, r0
 800ed2a:	db01      	blt.n	800ed30 <_malloc_r+0x1c>
 800ed2c:	42a9      	cmp	r1, r5
 800ed2e:	d905      	bls.n	800ed3c <_malloc_r+0x28>
 800ed30:	230c      	movs	r3, #12
 800ed32:	603b      	str	r3, [r7, #0]
 800ed34:	2600      	movs	r6, #0
 800ed36:	4630      	mov	r0, r6
 800ed38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed3c:	4e2e      	ldr	r6, [pc, #184]	; (800edf8 <_malloc_r+0xe4>)
 800ed3e:	f000 faa3 	bl	800f288 <__malloc_lock>
 800ed42:	6833      	ldr	r3, [r6, #0]
 800ed44:	461c      	mov	r4, r3
 800ed46:	bb34      	cbnz	r4, 800ed96 <_malloc_r+0x82>
 800ed48:	4629      	mov	r1, r5
 800ed4a:	4638      	mov	r0, r7
 800ed4c:	f7ff ffc2 	bl	800ecd4 <sbrk_aligned>
 800ed50:	1c43      	adds	r3, r0, #1
 800ed52:	4604      	mov	r4, r0
 800ed54:	d14d      	bne.n	800edf2 <_malloc_r+0xde>
 800ed56:	6834      	ldr	r4, [r6, #0]
 800ed58:	4626      	mov	r6, r4
 800ed5a:	2e00      	cmp	r6, #0
 800ed5c:	d140      	bne.n	800ede0 <_malloc_r+0xcc>
 800ed5e:	6823      	ldr	r3, [r4, #0]
 800ed60:	4631      	mov	r1, r6
 800ed62:	4638      	mov	r0, r7
 800ed64:	eb04 0803 	add.w	r8, r4, r3
 800ed68:	f000 f9a2 	bl	800f0b0 <_sbrk_r>
 800ed6c:	4580      	cmp	r8, r0
 800ed6e:	d13a      	bne.n	800ede6 <_malloc_r+0xd2>
 800ed70:	6821      	ldr	r1, [r4, #0]
 800ed72:	3503      	adds	r5, #3
 800ed74:	1a6d      	subs	r5, r5, r1
 800ed76:	f025 0503 	bic.w	r5, r5, #3
 800ed7a:	3508      	adds	r5, #8
 800ed7c:	2d0c      	cmp	r5, #12
 800ed7e:	bf38      	it	cc
 800ed80:	250c      	movcc	r5, #12
 800ed82:	4629      	mov	r1, r5
 800ed84:	4638      	mov	r0, r7
 800ed86:	f7ff ffa5 	bl	800ecd4 <sbrk_aligned>
 800ed8a:	3001      	adds	r0, #1
 800ed8c:	d02b      	beq.n	800ede6 <_malloc_r+0xd2>
 800ed8e:	6823      	ldr	r3, [r4, #0]
 800ed90:	442b      	add	r3, r5
 800ed92:	6023      	str	r3, [r4, #0]
 800ed94:	e00e      	b.n	800edb4 <_malloc_r+0xa0>
 800ed96:	6822      	ldr	r2, [r4, #0]
 800ed98:	1b52      	subs	r2, r2, r5
 800ed9a:	d41e      	bmi.n	800edda <_malloc_r+0xc6>
 800ed9c:	2a0b      	cmp	r2, #11
 800ed9e:	d916      	bls.n	800edce <_malloc_r+0xba>
 800eda0:	1961      	adds	r1, r4, r5
 800eda2:	42a3      	cmp	r3, r4
 800eda4:	6025      	str	r5, [r4, #0]
 800eda6:	bf18      	it	ne
 800eda8:	6059      	strne	r1, [r3, #4]
 800edaa:	6863      	ldr	r3, [r4, #4]
 800edac:	bf08      	it	eq
 800edae:	6031      	streq	r1, [r6, #0]
 800edb0:	5162      	str	r2, [r4, r5]
 800edb2:	604b      	str	r3, [r1, #4]
 800edb4:	4638      	mov	r0, r7
 800edb6:	f104 060b 	add.w	r6, r4, #11
 800edba:	f000 fa6b 	bl	800f294 <__malloc_unlock>
 800edbe:	f026 0607 	bic.w	r6, r6, #7
 800edc2:	1d23      	adds	r3, r4, #4
 800edc4:	1af2      	subs	r2, r6, r3
 800edc6:	d0b6      	beq.n	800ed36 <_malloc_r+0x22>
 800edc8:	1b9b      	subs	r3, r3, r6
 800edca:	50a3      	str	r3, [r4, r2]
 800edcc:	e7b3      	b.n	800ed36 <_malloc_r+0x22>
 800edce:	6862      	ldr	r2, [r4, #4]
 800edd0:	42a3      	cmp	r3, r4
 800edd2:	bf0c      	ite	eq
 800edd4:	6032      	streq	r2, [r6, #0]
 800edd6:	605a      	strne	r2, [r3, #4]
 800edd8:	e7ec      	b.n	800edb4 <_malloc_r+0xa0>
 800edda:	4623      	mov	r3, r4
 800eddc:	6864      	ldr	r4, [r4, #4]
 800edde:	e7b2      	b.n	800ed46 <_malloc_r+0x32>
 800ede0:	4634      	mov	r4, r6
 800ede2:	6876      	ldr	r6, [r6, #4]
 800ede4:	e7b9      	b.n	800ed5a <_malloc_r+0x46>
 800ede6:	230c      	movs	r3, #12
 800ede8:	603b      	str	r3, [r7, #0]
 800edea:	4638      	mov	r0, r7
 800edec:	f000 fa52 	bl	800f294 <__malloc_unlock>
 800edf0:	e7a1      	b.n	800ed36 <_malloc_r+0x22>
 800edf2:	6025      	str	r5, [r4, #0]
 800edf4:	e7de      	b.n	800edb4 <_malloc_r+0xa0>
 800edf6:	bf00      	nop
 800edf8:	2000069c 	.word	0x2000069c

0800edfc <__sfputc_r>:
 800edfc:	6893      	ldr	r3, [r2, #8]
 800edfe:	3b01      	subs	r3, #1
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	b410      	push	{r4}
 800ee04:	6093      	str	r3, [r2, #8]
 800ee06:	da08      	bge.n	800ee1a <__sfputc_r+0x1e>
 800ee08:	6994      	ldr	r4, [r2, #24]
 800ee0a:	42a3      	cmp	r3, r4
 800ee0c:	db01      	blt.n	800ee12 <__sfputc_r+0x16>
 800ee0e:	290a      	cmp	r1, #10
 800ee10:	d103      	bne.n	800ee1a <__sfputc_r+0x1e>
 800ee12:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee16:	f7fe ba01 	b.w	800d21c <__swbuf_r>
 800ee1a:	6813      	ldr	r3, [r2, #0]
 800ee1c:	1c58      	adds	r0, r3, #1
 800ee1e:	6010      	str	r0, [r2, #0]
 800ee20:	7019      	strb	r1, [r3, #0]
 800ee22:	4608      	mov	r0, r1
 800ee24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee28:	4770      	bx	lr

0800ee2a <__sfputs_r>:
 800ee2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee2c:	4606      	mov	r6, r0
 800ee2e:	460f      	mov	r7, r1
 800ee30:	4614      	mov	r4, r2
 800ee32:	18d5      	adds	r5, r2, r3
 800ee34:	42ac      	cmp	r4, r5
 800ee36:	d101      	bne.n	800ee3c <__sfputs_r+0x12>
 800ee38:	2000      	movs	r0, #0
 800ee3a:	e007      	b.n	800ee4c <__sfputs_r+0x22>
 800ee3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee40:	463a      	mov	r2, r7
 800ee42:	4630      	mov	r0, r6
 800ee44:	f7ff ffda 	bl	800edfc <__sfputc_r>
 800ee48:	1c43      	adds	r3, r0, #1
 800ee4a:	d1f3      	bne.n	800ee34 <__sfputs_r+0xa>
 800ee4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ee50 <_vfiprintf_r>:
 800ee50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee54:	460d      	mov	r5, r1
 800ee56:	b09d      	sub	sp, #116	; 0x74
 800ee58:	4614      	mov	r4, r2
 800ee5a:	4698      	mov	r8, r3
 800ee5c:	4606      	mov	r6, r0
 800ee5e:	b118      	cbz	r0, 800ee68 <_vfiprintf_r+0x18>
 800ee60:	6983      	ldr	r3, [r0, #24]
 800ee62:	b90b      	cbnz	r3, 800ee68 <_vfiprintf_r+0x18>
 800ee64:	f7ff fa30 	bl	800e2c8 <__sinit>
 800ee68:	4b89      	ldr	r3, [pc, #548]	; (800f090 <_vfiprintf_r+0x240>)
 800ee6a:	429d      	cmp	r5, r3
 800ee6c:	d11b      	bne.n	800eea6 <_vfiprintf_r+0x56>
 800ee6e:	6875      	ldr	r5, [r6, #4]
 800ee70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee72:	07d9      	lsls	r1, r3, #31
 800ee74:	d405      	bmi.n	800ee82 <_vfiprintf_r+0x32>
 800ee76:	89ab      	ldrh	r3, [r5, #12]
 800ee78:	059a      	lsls	r2, r3, #22
 800ee7a:	d402      	bmi.n	800ee82 <_vfiprintf_r+0x32>
 800ee7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee7e:	f7ff fac6 	bl	800e40e <__retarget_lock_acquire_recursive>
 800ee82:	89ab      	ldrh	r3, [r5, #12]
 800ee84:	071b      	lsls	r3, r3, #28
 800ee86:	d501      	bpl.n	800ee8c <_vfiprintf_r+0x3c>
 800ee88:	692b      	ldr	r3, [r5, #16]
 800ee8a:	b9eb      	cbnz	r3, 800eec8 <_vfiprintf_r+0x78>
 800ee8c:	4629      	mov	r1, r5
 800ee8e:	4630      	mov	r0, r6
 800ee90:	f7fe fa16 	bl	800d2c0 <__swsetup_r>
 800ee94:	b1c0      	cbz	r0, 800eec8 <_vfiprintf_r+0x78>
 800ee96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee98:	07dc      	lsls	r4, r3, #31
 800ee9a:	d50e      	bpl.n	800eeba <_vfiprintf_r+0x6a>
 800ee9c:	f04f 30ff 	mov.w	r0, #4294967295
 800eea0:	b01d      	add	sp, #116	; 0x74
 800eea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eea6:	4b7b      	ldr	r3, [pc, #492]	; (800f094 <_vfiprintf_r+0x244>)
 800eea8:	429d      	cmp	r5, r3
 800eeaa:	d101      	bne.n	800eeb0 <_vfiprintf_r+0x60>
 800eeac:	68b5      	ldr	r5, [r6, #8]
 800eeae:	e7df      	b.n	800ee70 <_vfiprintf_r+0x20>
 800eeb0:	4b79      	ldr	r3, [pc, #484]	; (800f098 <_vfiprintf_r+0x248>)
 800eeb2:	429d      	cmp	r5, r3
 800eeb4:	bf08      	it	eq
 800eeb6:	68f5      	ldreq	r5, [r6, #12]
 800eeb8:	e7da      	b.n	800ee70 <_vfiprintf_r+0x20>
 800eeba:	89ab      	ldrh	r3, [r5, #12]
 800eebc:	0598      	lsls	r0, r3, #22
 800eebe:	d4ed      	bmi.n	800ee9c <_vfiprintf_r+0x4c>
 800eec0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eec2:	f7ff faa5 	bl	800e410 <__retarget_lock_release_recursive>
 800eec6:	e7e9      	b.n	800ee9c <_vfiprintf_r+0x4c>
 800eec8:	2300      	movs	r3, #0
 800eeca:	9309      	str	r3, [sp, #36]	; 0x24
 800eecc:	2320      	movs	r3, #32
 800eece:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eed2:	f8cd 800c 	str.w	r8, [sp, #12]
 800eed6:	2330      	movs	r3, #48	; 0x30
 800eed8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f09c <_vfiprintf_r+0x24c>
 800eedc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eee0:	f04f 0901 	mov.w	r9, #1
 800eee4:	4623      	mov	r3, r4
 800eee6:	469a      	mov	sl, r3
 800eee8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eeec:	b10a      	cbz	r2, 800eef2 <_vfiprintf_r+0xa2>
 800eeee:	2a25      	cmp	r2, #37	; 0x25
 800eef0:	d1f9      	bne.n	800eee6 <_vfiprintf_r+0x96>
 800eef2:	ebba 0b04 	subs.w	fp, sl, r4
 800eef6:	d00b      	beq.n	800ef10 <_vfiprintf_r+0xc0>
 800eef8:	465b      	mov	r3, fp
 800eefa:	4622      	mov	r2, r4
 800eefc:	4629      	mov	r1, r5
 800eefe:	4630      	mov	r0, r6
 800ef00:	f7ff ff93 	bl	800ee2a <__sfputs_r>
 800ef04:	3001      	adds	r0, #1
 800ef06:	f000 80aa 	beq.w	800f05e <_vfiprintf_r+0x20e>
 800ef0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef0c:	445a      	add	r2, fp
 800ef0e:	9209      	str	r2, [sp, #36]	; 0x24
 800ef10:	f89a 3000 	ldrb.w	r3, [sl]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	f000 80a2 	beq.w	800f05e <_vfiprintf_r+0x20e>
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	f04f 32ff 	mov.w	r2, #4294967295
 800ef20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef24:	f10a 0a01 	add.w	sl, sl, #1
 800ef28:	9304      	str	r3, [sp, #16]
 800ef2a:	9307      	str	r3, [sp, #28]
 800ef2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ef30:	931a      	str	r3, [sp, #104]	; 0x68
 800ef32:	4654      	mov	r4, sl
 800ef34:	2205      	movs	r2, #5
 800ef36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef3a:	4858      	ldr	r0, [pc, #352]	; (800f09c <_vfiprintf_r+0x24c>)
 800ef3c:	f7f1 f950 	bl	80001e0 <memchr>
 800ef40:	9a04      	ldr	r2, [sp, #16]
 800ef42:	b9d8      	cbnz	r0, 800ef7c <_vfiprintf_r+0x12c>
 800ef44:	06d1      	lsls	r1, r2, #27
 800ef46:	bf44      	itt	mi
 800ef48:	2320      	movmi	r3, #32
 800ef4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef4e:	0713      	lsls	r3, r2, #28
 800ef50:	bf44      	itt	mi
 800ef52:	232b      	movmi	r3, #43	; 0x2b
 800ef54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef58:	f89a 3000 	ldrb.w	r3, [sl]
 800ef5c:	2b2a      	cmp	r3, #42	; 0x2a
 800ef5e:	d015      	beq.n	800ef8c <_vfiprintf_r+0x13c>
 800ef60:	9a07      	ldr	r2, [sp, #28]
 800ef62:	4654      	mov	r4, sl
 800ef64:	2000      	movs	r0, #0
 800ef66:	f04f 0c0a 	mov.w	ip, #10
 800ef6a:	4621      	mov	r1, r4
 800ef6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef70:	3b30      	subs	r3, #48	; 0x30
 800ef72:	2b09      	cmp	r3, #9
 800ef74:	d94e      	bls.n	800f014 <_vfiprintf_r+0x1c4>
 800ef76:	b1b0      	cbz	r0, 800efa6 <_vfiprintf_r+0x156>
 800ef78:	9207      	str	r2, [sp, #28]
 800ef7a:	e014      	b.n	800efa6 <_vfiprintf_r+0x156>
 800ef7c:	eba0 0308 	sub.w	r3, r0, r8
 800ef80:	fa09 f303 	lsl.w	r3, r9, r3
 800ef84:	4313      	orrs	r3, r2
 800ef86:	9304      	str	r3, [sp, #16]
 800ef88:	46a2      	mov	sl, r4
 800ef8a:	e7d2      	b.n	800ef32 <_vfiprintf_r+0xe2>
 800ef8c:	9b03      	ldr	r3, [sp, #12]
 800ef8e:	1d19      	adds	r1, r3, #4
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	9103      	str	r1, [sp, #12]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	bfbb      	ittet	lt
 800ef98:	425b      	neglt	r3, r3
 800ef9a:	f042 0202 	orrlt.w	r2, r2, #2
 800ef9e:	9307      	strge	r3, [sp, #28]
 800efa0:	9307      	strlt	r3, [sp, #28]
 800efa2:	bfb8      	it	lt
 800efa4:	9204      	strlt	r2, [sp, #16]
 800efa6:	7823      	ldrb	r3, [r4, #0]
 800efa8:	2b2e      	cmp	r3, #46	; 0x2e
 800efaa:	d10c      	bne.n	800efc6 <_vfiprintf_r+0x176>
 800efac:	7863      	ldrb	r3, [r4, #1]
 800efae:	2b2a      	cmp	r3, #42	; 0x2a
 800efb0:	d135      	bne.n	800f01e <_vfiprintf_r+0x1ce>
 800efb2:	9b03      	ldr	r3, [sp, #12]
 800efb4:	1d1a      	adds	r2, r3, #4
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	9203      	str	r2, [sp, #12]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	bfb8      	it	lt
 800efbe:	f04f 33ff 	movlt.w	r3, #4294967295
 800efc2:	3402      	adds	r4, #2
 800efc4:	9305      	str	r3, [sp, #20]
 800efc6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f0ac <_vfiprintf_r+0x25c>
 800efca:	7821      	ldrb	r1, [r4, #0]
 800efcc:	2203      	movs	r2, #3
 800efce:	4650      	mov	r0, sl
 800efd0:	f7f1 f906 	bl	80001e0 <memchr>
 800efd4:	b140      	cbz	r0, 800efe8 <_vfiprintf_r+0x198>
 800efd6:	2340      	movs	r3, #64	; 0x40
 800efd8:	eba0 000a 	sub.w	r0, r0, sl
 800efdc:	fa03 f000 	lsl.w	r0, r3, r0
 800efe0:	9b04      	ldr	r3, [sp, #16]
 800efe2:	4303      	orrs	r3, r0
 800efe4:	3401      	adds	r4, #1
 800efe6:	9304      	str	r3, [sp, #16]
 800efe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efec:	482c      	ldr	r0, [pc, #176]	; (800f0a0 <_vfiprintf_r+0x250>)
 800efee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eff2:	2206      	movs	r2, #6
 800eff4:	f7f1 f8f4 	bl	80001e0 <memchr>
 800eff8:	2800      	cmp	r0, #0
 800effa:	d03f      	beq.n	800f07c <_vfiprintf_r+0x22c>
 800effc:	4b29      	ldr	r3, [pc, #164]	; (800f0a4 <_vfiprintf_r+0x254>)
 800effe:	bb1b      	cbnz	r3, 800f048 <_vfiprintf_r+0x1f8>
 800f000:	9b03      	ldr	r3, [sp, #12]
 800f002:	3307      	adds	r3, #7
 800f004:	f023 0307 	bic.w	r3, r3, #7
 800f008:	3308      	adds	r3, #8
 800f00a:	9303      	str	r3, [sp, #12]
 800f00c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f00e:	443b      	add	r3, r7
 800f010:	9309      	str	r3, [sp, #36]	; 0x24
 800f012:	e767      	b.n	800eee4 <_vfiprintf_r+0x94>
 800f014:	fb0c 3202 	mla	r2, ip, r2, r3
 800f018:	460c      	mov	r4, r1
 800f01a:	2001      	movs	r0, #1
 800f01c:	e7a5      	b.n	800ef6a <_vfiprintf_r+0x11a>
 800f01e:	2300      	movs	r3, #0
 800f020:	3401      	adds	r4, #1
 800f022:	9305      	str	r3, [sp, #20]
 800f024:	4619      	mov	r1, r3
 800f026:	f04f 0c0a 	mov.w	ip, #10
 800f02a:	4620      	mov	r0, r4
 800f02c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f030:	3a30      	subs	r2, #48	; 0x30
 800f032:	2a09      	cmp	r2, #9
 800f034:	d903      	bls.n	800f03e <_vfiprintf_r+0x1ee>
 800f036:	2b00      	cmp	r3, #0
 800f038:	d0c5      	beq.n	800efc6 <_vfiprintf_r+0x176>
 800f03a:	9105      	str	r1, [sp, #20]
 800f03c:	e7c3      	b.n	800efc6 <_vfiprintf_r+0x176>
 800f03e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f042:	4604      	mov	r4, r0
 800f044:	2301      	movs	r3, #1
 800f046:	e7f0      	b.n	800f02a <_vfiprintf_r+0x1da>
 800f048:	ab03      	add	r3, sp, #12
 800f04a:	9300      	str	r3, [sp, #0]
 800f04c:	462a      	mov	r2, r5
 800f04e:	4b16      	ldr	r3, [pc, #88]	; (800f0a8 <_vfiprintf_r+0x258>)
 800f050:	a904      	add	r1, sp, #16
 800f052:	4630      	mov	r0, r6
 800f054:	f7fd fc8a 	bl	800c96c <_printf_float>
 800f058:	4607      	mov	r7, r0
 800f05a:	1c78      	adds	r0, r7, #1
 800f05c:	d1d6      	bne.n	800f00c <_vfiprintf_r+0x1bc>
 800f05e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f060:	07d9      	lsls	r1, r3, #31
 800f062:	d405      	bmi.n	800f070 <_vfiprintf_r+0x220>
 800f064:	89ab      	ldrh	r3, [r5, #12]
 800f066:	059a      	lsls	r2, r3, #22
 800f068:	d402      	bmi.n	800f070 <_vfiprintf_r+0x220>
 800f06a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f06c:	f7ff f9d0 	bl	800e410 <__retarget_lock_release_recursive>
 800f070:	89ab      	ldrh	r3, [r5, #12]
 800f072:	065b      	lsls	r3, r3, #25
 800f074:	f53f af12 	bmi.w	800ee9c <_vfiprintf_r+0x4c>
 800f078:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f07a:	e711      	b.n	800eea0 <_vfiprintf_r+0x50>
 800f07c:	ab03      	add	r3, sp, #12
 800f07e:	9300      	str	r3, [sp, #0]
 800f080:	462a      	mov	r2, r5
 800f082:	4b09      	ldr	r3, [pc, #36]	; (800f0a8 <_vfiprintf_r+0x258>)
 800f084:	a904      	add	r1, sp, #16
 800f086:	4630      	mov	r0, r6
 800f088:	f7fd ff14 	bl	800ceb4 <_printf_i>
 800f08c:	e7e4      	b.n	800f058 <_vfiprintf_r+0x208>
 800f08e:	bf00      	nop
 800f090:	08010564 	.word	0x08010564
 800f094:	08010584 	.word	0x08010584
 800f098:	08010544 	.word	0x08010544
 800f09c:	080106fc 	.word	0x080106fc
 800f0a0:	08010706 	.word	0x08010706
 800f0a4:	0800c96d 	.word	0x0800c96d
 800f0a8:	0800ee2b 	.word	0x0800ee2b
 800f0ac:	08010702 	.word	0x08010702

0800f0b0 <_sbrk_r>:
 800f0b0:	b538      	push	{r3, r4, r5, lr}
 800f0b2:	4d06      	ldr	r5, [pc, #24]	; (800f0cc <_sbrk_r+0x1c>)
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	4604      	mov	r4, r0
 800f0b8:	4608      	mov	r0, r1
 800f0ba:	602b      	str	r3, [r5, #0]
 800f0bc:	f7fc fd74 	bl	800bba8 <_sbrk>
 800f0c0:	1c43      	adds	r3, r0, #1
 800f0c2:	d102      	bne.n	800f0ca <_sbrk_r+0x1a>
 800f0c4:	682b      	ldr	r3, [r5, #0]
 800f0c6:	b103      	cbz	r3, 800f0ca <_sbrk_r+0x1a>
 800f0c8:	6023      	str	r3, [r4, #0]
 800f0ca:	bd38      	pop	{r3, r4, r5, pc}
 800f0cc:	200006a4 	.word	0x200006a4

0800f0d0 <__sread>:
 800f0d0:	b510      	push	{r4, lr}
 800f0d2:	460c      	mov	r4, r1
 800f0d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0d8:	f000 f8e2 	bl	800f2a0 <_read_r>
 800f0dc:	2800      	cmp	r0, #0
 800f0de:	bfab      	itete	ge
 800f0e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f0e2:	89a3      	ldrhlt	r3, [r4, #12]
 800f0e4:	181b      	addge	r3, r3, r0
 800f0e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f0ea:	bfac      	ite	ge
 800f0ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800f0ee:	81a3      	strhlt	r3, [r4, #12]
 800f0f0:	bd10      	pop	{r4, pc}

0800f0f2 <__swrite>:
 800f0f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0f6:	461f      	mov	r7, r3
 800f0f8:	898b      	ldrh	r3, [r1, #12]
 800f0fa:	05db      	lsls	r3, r3, #23
 800f0fc:	4605      	mov	r5, r0
 800f0fe:	460c      	mov	r4, r1
 800f100:	4616      	mov	r6, r2
 800f102:	d505      	bpl.n	800f110 <__swrite+0x1e>
 800f104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f108:	2302      	movs	r3, #2
 800f10a:	2200      	movs	r2, #0
 800f10c:	f000 f898 	bl	800f240 <_lseek_r>
 800f110:	89a3      	ldrh	r3, [r4, #12]
 800f112:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f116:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f11a:	81a3      	strh	r3, [r4, #12]
 800f11c:	4632      	mov	r2, r6
 800f11e:	463b      	mov	r3, r7
 800f120:	4628      	mov	r0, r5
 800f122:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f126:	f000 b817 	b.w	800f158 <_write_r>

0800f12a <__sseek>:
 800f12a:	b510      	push	{r4, lr}
 800f12c:	460c      	mov	r4, r1
 800f12e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f132:	f000 f885 	bl	800f240 <_lseek_r>
 800f136:	1c43      	adds	r3, r0, #1
 800f138:	89a3      	ldrh	r3, [r4, #12]
 800f13a:	bf15      	itete	ne
 800f13c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f13e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f142:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f146:	81a3      	strheq	r3, [r4, #12]
 800f148:	bf18      	it	ne
 800f14a:	81a3      	strhne	r3, [r4, #12]
 800f14c:	bd10      	pop	{r4, pc}

0800f14e <__sclose>:
 800f14e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f152:	f000 b831 	b.w	800f1b8 <_close_r>
	...

0800f158 <_write_r>:
 800f158:	b538      	push	{r3, r4, r5, lr}
 800f15a:	4d07      	ldr	r5, [pc, #28]	; (800f178 <_write_r+0x20>)
 800f15c:	4604      	mov	r4, r0
 800f15e:	4608      	mov	r0, r1
 800f160:	4611      	mov	r1, r2
 800f162:	2200      	movs	r2, #0
 800f164:	602a      	str	r2, [r5, #0]
 800f166:	461a      	mov	r2, r3
 800f168:	f7fa f806 	bl	8009178 <_write>
 800f16c:	1c43      	adds	r3, r0, #1
 800f16e:	d102      	bne.n	800f176 <_write_r+0x1e>
 800f170:	682b      	ldr	r3, [r5, #0]
 800f172:	b103      	cbz	r3, 800f176 <_write_r+0x1e>
 800f174:	6023      	str	r3, [r4, #0]
 800f176:	bd38      	pop	{r3, r4, r5, pc}
 800f178:	200006a4 	.word	0x200006a4

0800f17c <__assert_func>:
 800f17c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f17e:	4614      	mov	r4, r2
 800f180:	461a      	mov	r2, r3
 800f182:	4b09      	ldr	r3, [pc, #36]	; (800f1a8 <__assert_func+0x2c>)
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	4605      	mov	r5, r0
 800f188:	68d8      	ldr	r0, [r3, #12]
 800f18a:	b14c      	cbz	r4, 800f1a0 <__assert_func+0x24>
 800f18c:	4b07      	ldr	r3, [pc, #28]	; (800f1ac <__assert_func+0x30>)
 800f18e:	9100      	str	r1, [sp, #0]
 800f190:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f194:	4906      	ldr	r1, [pc, #24]	; (800f1b0 <__assert_func+0x34>)
 800f196:	462b      	mov	r3, r5
 800f198:	f000 f81e 	bl	800f1d8 <fiprintf>
 800f19c:	f000 f89f 	bl	800f2de <abort>
 800f1a0:	4b04      	ldr	r3, [pc, #16]	; (800f1b4 <__assert_func+0x38>)
 800f1a2:	461c      	mov	r4, r3
 800f1a4:	e7f3      	b.n	800f18e <__assert_func+0x12>
 800f1a6:	bf00      	nop
 800f1a8:	20000010 	.word	0x20000010
 800f1ac:	0801070d 	.word	0x0801070d
 800f1b0:	0801071a 	.word	0x0801071a
 800f1b4:	08010748 	.word	0x08010748

0800f1b8 <_close_r>:
 800f1b8:	b538      	push	{r3, r4, r5, lr}
 800f1ba:	4d06      	ldr	r5, [pc, #24]	; (800f1d4 <_close_r+0x1c>)
 800f1bc:	2300      	movs	r3, #0
 800f1be:	4604      	mov	r4, r0
 800f1c0:	4608      	mov	r0, r1
 800f1c2:	602b      	str	r3, [r5, #0]
 800f1c4:	f7fc fcbb 	bl	800bb3e <_close>
 800f1c8:	1c43      	adds	r3, r0, #1
 800f1ca:	d102      	bne.n	800f1d2 <_close_r+0x1a>
 800f1cc:	682b      	ldr	r3, [r5, #0]
 800f1ce:	b103      	cbz	r3, 800f1d2 <_close_r+0x1a>
 800f1d0:	6023      	str	r3, [r4, #0]
 800f1d2:	bd38      	pop	{r3, r4, r5, pc}
 800f1d4:	200006a4 	.word	0x200006a4

0800f1d8 <fiprintf>:
 800f1d8:	b40e      	push	{r1, r2, r3}
 800f1da:	b503      	push	{r0, r1, lr}
 800f1dc:	4601      	mov	r1, r0
 800f1de:	ab03      	add	r3, sp, #12
 800f1e0:	4805      	ldr	r0, [pc, #20]	; (800f1f8 <fiprintf+0x20>)
 800f1e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1e6:	6800      	ldr	r0, [r0, #0]
 800f1e8:	9301      	str	r3, [sp, #4]
 800f1ea:	f7ff fe31 	bl	800ee50 <_vfiprintf_r>
 800f1ee:	b002      	add	sp, #8
 800f1f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f1f4:	b003      	add	sp, #12
 800f1f6:	4770      	bx	lr
 800f1f8:	20000010 	.word	0x20000010

0800f1fc <_fstat_r>:
 800f1fc:	b538      	push	{r3, r4, r5, lr}
 800f1fe:	4d07      	ldr	r5, [pc, #28]	; (800f21c <_fstat_r+0x20>)
 800f200:	2300      	movs	r3, #0
 800f202:	4604      	mov	r4, r0
 800f204:	4608      	mov	r0, r1
 800f206:	4611      	mov	r1, r2
 800f208:	602b      	str	r3, [r5, #0]
 800f20a:	f7fc fca4 	bl	800bb56 <_fstat>
 800f20e:	1c43      	adds	r3, r0, #1
 800f210:	d102      	bne.n	800f218 <_fstat_r+0x1c>
 800f212:	682b      	ldr	r3, [r5, #0]
 800f214:	b103      	cbz	r3, 800f218 <_fstat_r+0x1c>
 800f216:	6023      	str	r3, [r4, #0]
 800f218:	bd38      	pop	{r3, r4, r5, pc}
 800f21a:	bf00      	nop
 800f21c:	200006a4 	.word	0x200006a4

0800f220 <_isatty_r>:
 800f220:	b538      	push	{r3, r4, r5, lr}
 800f222:	4d06      	ldr	r5, [pc, #24]	; (800f23c <_isatty_r+0x1c>)
 800f224:	2300      	movs	r3, #0
 800f226:	4604      	mov	r4, r0
 800f228:	4608      	mov	r0, r1
 800f22a:	602b      	str	r3, [r5, #0]
 800f22c:	f7fc fca3 	bl	800bb76 <_isatty>
 800f230:	1c43      	adds	r3, r0, #1
 800f232:	d102      	bne.n	800f23a <_isatty_r+0x1a>
 800f234:	682b      	ldr	r3, [r5, #0]
 800f236:	b103      	cbz	r3, 800f23a <_isatty_r+0x1a>
 800f238:	6023      	str	r3, [r4, #0]
 800f23a:	bd38      	pop	{r3, r4, r5, pc}
 800f23c:	200006a4 	.word	0x200006a4

0800f240 <_lseek_r>:
 800f240:	b538      	push	{r3, r4, r5, lr}
 800f242:	4d07      	ldr	r5, [pc, #28]	; (800f260 <_lseek_r+0x20>)
 800f244:	4604      	mov	r4, r0
 800f246:	4608      	mov	r0, r1
 800f248:	4611      	mov	r1, r2
 800f24a:	2200      	movs	r2, #0
 800f24c:	602a      	str	r2, [r5, #0]
 800f24e:	461a      	mov	r2, r3
 800f250:	f7fc fc9c 	bl	800bb8c <_lseek>
 800f254:	1c43      	adds	r3, r0, #1
 800f256:	d102      	bne.n	800f25e <_lseek_r+0x1e>
 800f258:	682b      	ldr	r3, [r5, #0]
 800f25a:	b103      	cbz	r3, 800f25e <_lseek_r+0x1e>
 800f25c:	6023      	str	r3, [r4, #0]
 800f25e:	bd38      	pop	{r3, r4, r5, pc}
 800f260:	200006a4 	.word	0x200006a4

0800f264 <__ascii_mbtowc>:
 800f264:	b082      	sub	sp, #8
 800f266:	b901      	cbnz	r1, 800f26a <__ascii_mbtowc+0x6>
 800f268:	a901      	add	r1, sp, #4
 800f26a:	b142      	cbz	r2, 800f27e <__ascii_mbtowc+0x1a>
 800f26c:	b14b      	cbz	r3, 800f282 <__ascii_mbtowc+0x1e>
 800f26e:	7813      	ldrb	r3, [r2, #0]
 800f270:	600b      	str	r3, [r1, #0]
 800f272:	7812      	ldrb	r2, [r2, #0]
 800f274:	1e10      	subs	r0, r2, #0
 800f276:	bf18      	it	ne
 800f278:	2001      	movne	r0, #1
 800f27a:	b002      	add	sp, #8
 800f27c:	4770      	bx	lr
 800f27e:	4610      	mov	r0, r2
 800f280:	e7fb      	b.n	800f27a <__ascii_mbtowc+0x16>
 800f282:	f06f 0001 	mvn.w	r0, #1
 800f286:	e7f8      	b.n	800f27a <__ascii_mbtowc+0x16>

0800f288 <__malloc_lock>:
 800f288:	4801      	ldr	r0, [pc, #4]	; (800f290 <__malloc_lock+0x8>)
 800f28a:	f7ff b8c0 	b.w	800e40e <__retarget_lock_acquire_recursive>
 800f28e:	bf00      	nop
 800f290:	20000698 	.word	0x20000698

0800f294 <__malloc_unlock>:
 800f294:	4801      	ldr	r0, [pc, #4]	; (800f29c <__malloc_unlock+0x8>)
 800f296:	f7ff b8bb 	b.w	800e410 <__retarget_lock_release_recursive>
 800f29a:	bf00      	nop
 800f29c:	20000698 	.word	0x20000698

0800f2a0 <_read_r>:
 800f2a0:	b538      	push	{r3, r4, r5, lr}
 800f2a2:	4d07      	ldr	r5, [pc, #28]	; (800f2c0 <_read_r+0x20>)
 800f2a4:	4604      	mov	r4, r0
 800f2a6:	4608      	mov	r0, r1
 800f2a8:	4611      	mov	r1, r2
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	602a      	str	r2, [r5, #0]
 800f2ae:	461a      	mov	r2, r3
 800f2b0:	f7fc fc28 	bl	800bb04 <_read>
 800f2b4:	1c43      	adds	r3, r0, #1
 800f2b6:	d102      	bne.n	800f2be <_read_r+0x1e>
 800f2b8:	682b      	ldr	r3, [r5, #0]
 800f2ba:	b103      	cbz	r3, 800f2be <_read_r+0x1e>
 800f2bc:	6023      	str	r3, [r4, #0]
 800f2be:	bd38      	pop	{r3, r4, r5, pc}
 800f2c0:	200006a4 	.word	0x200006a4

0800f2c4 <__ascii_wctomb>:
 800f2c4:	b149      	cbz	r1, 800f2da <__ascii_wctomb+0x16>
 800f2c6:	2aff      	cmp	r2, #255	; 0xff
 800f2c8:	bf85      	ittet	hi
 800f2ca:	238a      	movhi	r3, #138	; 0x8a
 800f2cc:	6003      	strhi	r3, [r0, #0]
 800f2ce:	700a      	strbls	r2, [r1, #0]
 800f2d0:	f04f 30ff 	movhi.w	r0, #4294967295
 800f2d4:	bf98      	it	ls
 800f2d6:	2001      	movls	r0, #1
 800f2d8:	4770      	bx	lr
 800f2da:	4608      	mov	r0, r1
 800f2dc:	4770      	bx	lr

0800f2de <abort>:
 800f2de:	b508      	push	{r3, lr}
 800f2e0:	2006      	movs	r0, #6
 800f2e2:	f000 f82b 	bl	800f33c <raise>
 800f2e6:	2001      	movs	r0, #1
 800f2e8:	f7fc fc02 	bl	800baf0 <_exit>

0800f2ec <_raise_r>:
 800f2ec:	291f      	cmp	r1, #31
 800f2ee:	b538      	push	{r3, r4, r5, lr}
 800f2f0:	4604      	mov	r4, r0
 800f2f2:	460d      	mov	r5, r1
 800f2f4:	d904      	bls.n	800f300 <_raise_r+0x14>
 800f2f6:	2316      	movs	r3, #22
 800f2f8:	6003      	str	r3, [r0, #0]
 800f2fa:	f04f 30ff 	mov.w	r0, #4294967295
 800f2fe:	bd38      	pop	{r3, r4, r5, pc}
 800f300:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f302:	b112      	cbz	r2, 800f30a <_raise_r+0x1e>
 800f304:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f308:	b94b      	cbnz	r3, 800f31e <_raise_r+0x32>
 800f30a:	4620      	mov	r0, r4
 800f30c:	f000 f830 	bl	800f370 <_getpid_r>
 800f310:	462a      	mov	r2, r5
 800f312:	4601      	mov	r1, r0
 800f314:	4620      	mov	r0, r4
 800f316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f31a:	f000 b817 	b.w	800f34c <_kill_r>
 800f31e:	2b01      	cmp	r3, #1
 800f320:	d00a      	beq.n	800f338 <_raise_r+0x4c>
 800f322:	1c59      	adds	r1, r3, #1
 800f324:	d103      	bne.n	800f32e <_raise_r+0x42>
 800f326:	2316      	movs	r3, #22
 800f328:	6003      	str	r3, [r0, #0]
 800f32a:	2001      	movs	r0, #1
 800f32c:	e7e7      	b.n	800f2fe <_raise_r+0x12>
 800f32e:	2400      	movs	r4, #0
 800f330:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f334:	4628      	mov	r0, r5
 800f336:	4798      	blx	r3
 800f338:	2000      	movs	r0, #0
 800f33a:	e7e0      	b.n	800f2fe <_raise_r+0x12>

0800f33c <raise>:
 800f33c:	4b02      	ldr	r3, [pc, #8]	; (800f348 <raise+0xc>)
 800f33e:	4601      	mov	r1, r0
 800f340:	6818      	ldr	r0, [r3, #0]
 800f342:	f7ff bfd3 	b.w	800f2ec <_raise_r>
 800f346:	bf00      	nop
 800f348:	20000010 	.word	0x20000010

0800f34c <_kill_r>:
 800f34c:	b538      	push	{r3, r4, r5, lr}
 800f34e:	4d07      	ldr	r5, [pc, #28]	; (800f36c <_kill_r+0x20>)
 800f350:	2300      	movs	r3, #0
 800f352:	4604      	mov	r4, r0
 800f354:	4608      	mov	r0, r1
 800f356:	4611      	mov	r1, r2
 800f358:	602b      	str	r3, [r5, #0]
 800f35a:	f7fc fbb9 	bl	800bad0 <_kill>
 800f35e:	1c43      	adds	r3, r0, #1
 800f360:	d102      	bne.n	800f368 <_kill_r+0x1c>
 800f362:	682b      	ldr	r3, [r5, #0]
 800f364:	b103      	cbz	r3, 800f368 <_kill_r+0x1c>
 800f366:	6023      	str	r3, [r4, #0]
 800f368:	bd38      	pop	{r3, r4, r5, pc}
 800f36a:	bf00      	nop
 800f36c:	200006a4 	.word	0x200006a4

0800f370 <_getpid_r>:
 800f370:	f7fc bba6 	b.w	800bac0 <_getpid>

0800f374 <asinf>:
 800f374:	b508      	push	{r3, lr}
 800f376:	ed2d 8b02 	vpush	{d8}
 800f37a:	eeb0 8a40 	vmov.f32	s16, s0
 800f37e:	f000 f87f 	bl	800f480 <__ieee754_asinf>
 800f382:	eeb4 8a48 	vcmp.f32	s16, s16
 800f386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f38a:	eef0 8a40 	vmov.f32	s17, s0
 800f38e:	d615      	bvs.n	800f3bc <asinf+0x48>
 800f390:	eeb0 0a48 	vmov.f32	s0, s16
 800f394:	f000 fdc2 	bl	800ff1c <fabsf>
 800f398:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f39c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f3a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3a4:	dd0a      	ble.n	800f3bc <asinf+0x48>
 800f3a6:	f7fd fa0f 	bl	800c7c8 <__errno>
 800f3aa:	ecbd 8b02 	vpop	{d8}
 800f3ae:	2321      	movs	r3, #33	; 0x21
 800f3b0:	6003      	str	r3, [r0, #0]
 800f3b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f3b6:	4804      	ldr	r0, [pc, #16]	; (800f3c8 <asinf+0x54>)
 800f3b8:	f000 bdc4 	b.w	800ff44 <nanf>
 800f3bc:	eeb0 0a68 	vmov.f32	s0, s17
 800f3c0:	ecbd 8b02 	vpop	{d8}
 800f3c4:	bd08      	pop	{r3, pc}
 800f3c6:	bf00      	nop
 800f3c8:	08010748 	.word	0x08010748

0800f3cc <atan2f>:
 800f3cc:	f000 b93e 	b.w	800f64c <__ieee754_atan2f>

0800f3d0 <powf>:
 800f3d0:	b508      	push	{r3, lr}
 800f3d2:	ed2d 8b04 	vpush	{d8-d9}
 800f3d6:	eeb0 8a60 	vmov.f32	s16, s1
 800f3da:	eeb0 9a40 	vmov.f32	s18, s0
 800f3de:	f000 f9d5 	bl	800f78c <__ieee754_powf>
 800f3e2:	eeb4 8a48 	vcmp.f32	s16, s16
 800f3e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3ea:	eef0 8a40 	vmov.f32	s17, s0
 800f3ee:	d63e      	bvs.n	800f46e <powf+0x9e>
 800f3f0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800f3f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3f8:	d112      	bne.n	800f420 <powf+0x50>
 800f3fa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f3fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f402:	d039      	beq.n	800f478 <powf+0xa8>
 800f404:	eeb0 0a48 	vmov.f32	s0, s16
 800f408:	f000 fd8f 	bl	800ff2a <finitef>
 800f40c:	b378      	cbz	r0, 800f46e <powf+0x9e>
 800f40e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f416:	d52a      	bpl.n	800f46e <powf+0x9e>
 800f418:	f7fd f9d6 	bl	800c7c8 <__errno>
 800f41c:	2322      	movs	r3, #34	; 0x22
 800f41e:	e014      	b.n	800f44a <powf+0x7a>
 800f420:	f000 fd83 	bl	800ff2a <finitef>
 800f424:	b998      	cbnz	r0, 800f44e <powf+0x7e>
 800f426:	eeb0 0a49 	vmov.f32	s0, s18
 800f42a:	f000 fd7e 	bl	800ff2a <finitef>
 800f42e:	b170      	cbz	r0, 800f44e <powf+0x7e>
 800f430:	eeb0 0a48 	vmov.f32	s0, s16
 800f434:	f000 fd79 	bl	800ff2a <finitef>
 800f438:	b148      	cbz	r0, 800f44e <powf+0x7e>
 800f43a:	eef4 8a68 	vcmp.f32	s17, s17
 800f43e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f442:	d7e9      	bvc.n	800f418 <powf+0x48>
 800f444:	f7fd f9c0 	bl	800c7c8 <__errno>
 800f448:	2321      	movs	r3, #33	; 0x21
 800f44a:	6003      	str	r3, [r0, #0]
 800f44c:	e00f      	b.n	800f46e <powf+0x9e>
 800f44e:	eef5 8a40 	vcmp.f32	s17, #0.0
 800f452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f456:	d10a      	bne.n	800f46e <powf+0x9e>
 800f458:	eeb0 0a49 	vmov.f32	s0, s18
 800f45c:	f000 fd65 	bl	800ff2a <finitef>
 800f460:	b128      	cbz	r0, 800f46e <powf+0x9e>
 800f462:	eeb0 0a48 	vmov.f32	s0, s16
 800f466:	f000 fd60 	bl	800ff2a <finitef>
 800f46a:	2800      	cmp	r0, #0
 800f46c:	d1d4      	bne.n	800f418 <powf+0x48>
 800f46e:	eeb0 0a68 	vmov.f32	s0, s17
 800f472:	ecbd 8b04 	vpop	{d8-d9}
 800f476:	bd08      	pop	{r3, pc}
 800f478:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800f47c:	e7f7      	b.n	800f46e <powf+0x9e>
	...

0800f480 <__ieee754_asinf>:
 800f480:	b538      	push	{r3, r4, r5, lr}
 800f482:	ee10 5a10 	vmov	r5, s0
 800f486:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800f48a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800f48e:	ed2d 8b04 	vpush	{d8-d9}
 800f492:	d10c      	bne.n	800f4ae <__ieee754_asinf+0x2e>
 800f494:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800f60c <__ieee754_asinf+0x18c>
 800f498:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800f610 <__ieee754_asinf+0x190>
 800f49c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800f4a0:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f4a4:	eeb0 0a67 	vmov.f32	s0, s15
 800f4a8:	ecbd 8b04 	vpop	{d8-d9}
 800f4ac:	bd38      	pop	{r3, r4, r5, pc}
 800f4ae:	dd04      	ble.n	800f4ba <__ieee754_asinf+0x3a>
 800f4b0:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f4b4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800f4b8:	e7f6      	b.n	800f4a8 <__ieee754_asinf+0x28>
 800f4ba:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800f4be:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800f4c2:	da0b      	bge.n	800f4dc <__ieee754_asinf+0x5c>
 800f4c4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800f4c8:	da52      	bge.n	800f570 <__ieee754_asinf+0xf0>
 800f4ca:	eddf 7a52 	vldr	s15, [pc, #328]	; 800f614 <__ieee754_asinf+0x194>
 800f4ce:	ee70 7a27 	vadd.f32	s15, s0, s15
 800f4d2:	eef4 7ae8 	vcmpe.f32	s15, s17
 800f4d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4da:	dce5      	bgt.n	800f4a8 <__ieee754_asinf+0x28>
 800f4dc:	f000 fd1e 	bl	800ff1c <fabsf>
 800f4e0:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800f4e4:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800f4e8:	ee20 8a08 	vmul.f32	s16, s0, s16
 800f4ec:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800f618 <__ieee754_asinf+0x198>
 800f4f0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800f61c <__ieee754_asinf+0x19c>
 800f4f4:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800f620 <__ieee754_asinf+0x1a0>
 800f4f8:	eea8 7a27 	vfma.f32	s14, s16, s15
 800f4fc:	eddf 7a49 	vldr	s15, [pc, #292]	; 800f624 <__ieee754_asinf+0x1a4>
 800f500:	eee7 7a08 	vfma.f32	s15, s14, s16
 800f504:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800f628 <__ieee754_asinf+0x1a8>
 800f508:	eea7 7a88 	vfma.f32	s14, s15, s16
 800f50c:	eddf 7a47 	vldr	s15, [pc, #284]	; 800f62c <__ieee754_asinf+0x1ac>
 800f510:	eee7 7a08 	vfma.f32	s15, s14, s16
 800f514:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800f630 <__ieee754_asinf+0x1b0>
 800f518:	eea7 9a88 	vfma.f32	s18, s15, s16
 800f51c:	eddf 7a45 	vldr	s15, [pc, #276]	; 800f634 <__ieee754_asinf+0x1b4>
 800f520:	eee8 7a07 	vfma.f32	s15, s16, s14
 800f524:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800f638 <__ieee754_asinf+0x1b8>
 800f528:	eea7 7a88 	vfma.f32	s14, s15, s16
 800f52c:	eddf 7a43 	vldr	s15, [pc, #268]	; 800f63c <__ieee754_asinf+0x1bc>
 800f530:	eee7 7a08 	vfma.f32	s15, s14, s16
 800f534:	eeb0 0a48 	vmov.f32	s0, s16
 800f538:	eee7 8a88 	vfma.f32	s17, s15, s16
 800f53c:	f000 fbf4 	bl	800fd28 <__ieee754_sqrtf>
 800f540:	4b3f      	ldr	r3, [pc, #252]	; (800f640 <__ieee754_asinf+0x1c0>)
 800f542:	ee29 9a08 	vmul.f32	s18, s18, s16
 800f546:	429c      	cmp	r4, r3
 800f548:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800f54c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800f550:	dd3d      	ble.n	800f5ce <__ieee754_asinf+0x14e>
 800f552:	eea0 0a06 	vfma.f32	s0, s0, s12
 800f556:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800f644 <__ieee754_asinf+0x1c4>
 800f55a:	eee0 7a26 	vfma.f32	s15, s0, s13
 800f55e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800f610 <__ieee754_asinf+0x190>
 800f562:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f566:	2d00      	cmp	r5, #0
 800f568:	bfd8      	it	le
 800f56a:	eeb1 0a40 	vnegle.f32	s0, s0
 800f56e:	e79b      	b.n	800f4a8 <__ieee754_asinf+0x28>
 800f570:	ee60 7a00 	vmul.f32	s15, s0, s0
 800f574:	eddf 6a28 	vldr	s13, [pc, #160]	; 800f618 <__ieee754_asinf+0x198>
 800f578:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800f61c <__ieee754_asinf+0x19c>
 800f57c:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800f630 <__ieee754_asinf+0x1b0>
 800f580:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800f584:	eddf 6a27 	vldr	s13, [pc, #156]	; 800f624 <__ieee754_asinf+0x1a4>
 800f588:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f58c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800f628 <__ieee754_asinf+0x1a8>
 800f590:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f594:	eddf 6a25 	vldr	s13, [pc, #148]	; 800f62c <__ieee754_asinf+0x1ac>
 800f598:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f59c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800f620 <__ieee754_asinf+0x1a0>
 800f5a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f5a4:	eddf 6a23 	vldr	s13, [pc, #140]	; 800f634 <__ieee754_asinf+0x1b4>
 800f5a8:	eee7 6a86 	vfma.f32	s13, s15, s12
 800f5ac:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800f638 <__ieee754_asinf+0x1b8>
 800f5b0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800f5b4:	eddf 6a21 	vldr	s13, [pc, #132]	; 800f63c <__ieee754_asinf+0x1bc>
 800f5b8:	eee6 6a27 	vfma.f32	s13, s12, s15
 800f5bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f5c0:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800f5c4:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800f5c8:	eea0 0a27 	vfma.f32	s0, s0, s15
 800f5cc:	e76c      	b.n	800f4a8 <__ieee754_asinf+0x28>
 800f5ce:	ee10 3a10 	vmov	r3, s0
 800f5d2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f5d6:	f023 030f 	bic.w	r3, r3, #15
 800f5da:	ee07 3a10 	vmov	s14, r3
 800f5de:	eea7 8a47 	vfms.f32	s16, s14, s14
 800f5e2:	ee70 7a07 	vadd.f32	s15, s0, s14
 800f5e6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f5ea:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800f5ee:	eddf 7a07 	vldr	s15, [pc, #28]	; 800f60c <__ieee754_asinf+0x18c>
 800f5f2:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800f5f6:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800f5fa:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800f648 <__ieee754_asinf+0x1c8>
 800f5fe:	eeb0 6a40 	vmov.f32	s12, s0
 800f602:	eea7 6a66 	vfms.f32	s12, s14, s13
 800f606:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800f60a:	e7aa      	b.n	800f562 <__ieee754_asinf+0xe2>
 800f60c:	b33bbd2e 	.word	0xb33bbd2e
 800f610:	3fc90fdb 	.word	0x3fc90fdb
 800f614:	7149f2ca 	.word	0x7149f2ca
 800f618:	3811ef08 	.word	0x3811ef08
 800f61c:	3a4f7f04 	.word	0x3a4f7f04
 800f620:	3e2aaaab 	.word	0x3e2aaaab
 800f624:	bd241146 	.word	0xbd241146
 800f628:	3e4e0aa8 	.word	0x3e4e0aa8
 800f62c:	bea6b090 	.word	0xbea6b090
 800f630:	3d9dc62e 	.word	0x3d9dc62e
 800f634:	bf303361 	.word	0xbf303361
 800f638:	4001572d 	.word	0x4001572d
 800f63c:	c019d139 	.word	0xc019d139
 800f640:	3f799999 	.word	0x3f799999
 800f644:	333bbd2e 	.word	0x333bbd2e
 800f648:	3f490fdb 	.word	0x3f490fdb

0800f64c <__ieee754_atan2f>:
 800f64c:	ee10 2a90 	vmov	r2, s1
 800f650:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800f654:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f658:	b510      	push	{r4, lr}
 800f65a:	eef0 7a40 	vmov.f32	s15, s0
 800f65e:	dc06      	bgt.n	800f66e <__ieee754_atan2f+0x22>
 800f660:	ee10 0a10 	vmov	r0, s0
 800f664:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800f668:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f66c:	dd04      	ble.n	800f678 <__ieee754_atan2f+0x2c>
 800f66e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800f672:	eeb0 0a67 	vmov.f32	s0, s15
 800f676:	bd10      	pop	{r4, pc}
 800f678:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800f67c:	d103      	bne.n	800f686 <__ieee754_atan2f+0x3a>
 800f67e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f682:	f000 bb77 	b.w	800fd74 <atanf>
 800f686:	1794      	asrs	r4, r2, #30
 800f688:	f004 0402 	and.w	r4, r4, #2
 800f68c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800f690:	b943      	cbnz	r3, 800f6a4 <__ieee754_atan2f+0x58>
 800f692:	2c02      	cmp	r4, #2
 800f694:	d05e      	beq.n	800f754 <__ieee754_atan2f+0x108>
 800f696:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800f768 <__ieee754_atan2f+0x11c>
 800f69a:	2c03      	cmp	r4, #3
 800f69c:	bf08      	it	eq
 800f69e:	eef0 7a47 	vmoveq.f32	s15, s14
 800f6a2:	e7e6      	b.n	800f672 <__ieee754_atan2f+0x26>
 800f6a4:	b941      	cbnz	r1, 800f6b8 <__ieee754_atan2f+0x6c>
 800f6a6:	eddf 7a31 	vldr	s15, [pc, #196]	; 800f76c <__ieee754_atan2f+0x120>
 800f6aa:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800f770 <__ieee754_atan2f+0x124>
 800f6ae:	2800      	cmp	r0, #0
 800f6b0:	bfb8      	it	lt
 800f6b2:	eef0 7a40 	vmovlt.f32	s15, s0
 800f6b6:	e7dc      	b.n	800f672 <__ieee754_atan2f+0x26>
 800f6b8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f6bc:	d110      	bne.n	800f6e0 <__ieee754_atan2f+0x94>
 800f6be:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f6c2:	f104 34ff 	add.w	r4, r4, #4294967295
 800f6c6:	d107      	bne.n	800f6d8 <__ieee754_atan2f+0x8c>
 800f6c8:	2c02      	cmp	r4, #2
 800f6ca:	d846      	bhi.n	800f75a <__ieee754_atan2f+0x10e>
 800f6cc:	4b29      	ldr	r3, [pc, #164]	; (800f774 <__ieee754_atan2f+0x128>)
 800f6ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f6d2:	edd4 7a00 	vldr	s15, [r4]
 800f6d6:	e7cc      	b.n	800f672 <__ieee754_atan2f+0x26>
 800f6d8:	2c02      	cmp	r4, #2
 800f6da:	d841      	bhi.n	800f760 <__ieee754_atan2f+0x114>
 800f6dc:	4b26      	ldr	r3, [pc, #152]	; (800f778 <__ieee754_atan2f+0x12c>)
 800f6de:	e7f6      	b.n	800f6ce <__ieee754_atan2f+0x82>
 800f6e0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f6e4:	d0df      	beq.n	800f6a6 <__ieee754_atan2f+0x5a>
 800f6e6:	1a5b      	subs	r3, r3, r1
 800f6e8:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800f6ec:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800f6f0:	da1a      	bge.n	800f728 <__ieee754_atan2f+0xdc>
 800f6f2:	2a00      	cmp	r2, #0
 800f6f4:	da01      	bge.n	800f6fa <__ieee754_atan2f+0xae>
 800f6f6:	313c      	adds	r1, #60	; 0x3c
 800f6f8:	db19      	blt.n	800f72e <__ieee754_atan2f+0xe2>
 800f6fa:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800f6fe:	f000 fc0d 	bl	800ff1c <fabsf>
 800f702:	f000 fb37 	bl	800fd74 <atanf>
 800f706:	eef0 7a40 	vmov.f32	s15, s0
 800f70a:	2c01      	cmp	r4, #1
 800f70c:	d012      	beq.n	800f734 <__ieee754_atan2f+0xe8>
 800f70e:	2c02      	cmp	r4, #2
 800f710:	d017      	beq.n	800f742 <__ieee754_atan2f+0xf6>
 800f712:	2c00      	cmp	r4, #0
 800f714:	d0ad      	beq.n	800f672 <__ieee754_atan2f+0x26>
 800f716:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800f77c <__ieee754_atan2f+0x130>
 800f71a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f71e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800f780 <__ieee754_atan2f+0x134>
 800f722:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f726:	e7a4      	b.n	800f672 <__ieee754_atan2f+0x26>
 800f728:	eddf 7a10 	vldr	s15, [pc, #64]	; 800f76c <__ieee754_atan2f+0x120>
 800f72c:	e7ed      	b.n	800f70a <__ieee754_atan2f+0xbe>
 800f72e:	eddf 7a15 	vldr	s15, [pc, #84]	; 800f784 <__ieee754_atan2f+0x138>
 800f732:	e7ea      	b.n	800f70a <__ieee754_atan2f+0xbe>
 800f734:	ee17 3a90 	vmov	r3, s15
 800f738:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f73c:	ee07 3a90 	vmov	s15, r3
 800f740:	e797      	b.n	800f672 <__ieee754_atan2f+0x26>
 800f742:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800f77c <__ieee754_atan2f+0x130>
 800f746:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f74a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800f780 <__ieee754_atan2f+0x134>
 800f74e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800f752:	e78e      	b.n	800f672 <__ieee754_atan2f+0x26>
 800f754:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800f780 <__ieee754_atan2f+0x134>
 800f758:	e78b      	b.n	800f672 <__ieee754_atan2f+0x26>
 800f75a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800f788 <__ieee754_atan2f+0x13c>
 800f75e:	e788      	b.n	800f672 <__ieee754_atan2f+0x26>
 800f760:	eddf 7a08 	vldr	s15, [pc, #32]	; 800f784 <__ieee754_atan2f+0x138>
 800f764:	e785      	b.n	800f672 <__ieee754_atan2f+0x26>
 800f766:	bf00      	nop
 800f768:	c0490fdb 	.word	0xc0490fdb
 800f76c:	3fc90fdb 	.word	0x3fc90fdb
 800f770:	bfc90fdb 	.word	0xbfc90fdb
 800f774:	08010854 	.word	0x08010854
 800f778:	08010860 	.word	0x08010860
 800f77c:	33bbbd2e 	.word	0x33bbbd2e
 800f780:	40490fdb 	.word	0x40490fdb
 800f784:	00000000 	.word	0x00000000
 800f788:	3f490fdb 	.word	0x3f490fdb

0800f78c <__ieee754_powf>:
 800f78c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f790:	ee10 4a90 	vmov	r4, s1
 800f794:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800f798:	ed2d 8b02 	vpush	{d8}
 800f79c:	ee10 6a10 	vmov	r6, s0
 800f7a0:	eeb0 8a40 	vmov.f32	s16, s0
 800f7a4:	eef0 8a60 	vmov.f32	s17, s1
 800f7a8:	d10c      	bne.n	800f7c4 <__ieee754_powf+0x38>
 800f7aa:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800f7ae:	0076      	lsls	r6, r6, #1
 800f7b0:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800f7b4:	f240 8296 	bls.w	800fce4 <__ieee754_powf+0x558>
 800f7b8:	ee38 0a28 	vadd.f32	s0, s16, s17
 800f7bc:	ecbd 8b02 	vpop	{d8}
 800f7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7c4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800f7c8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800f7cc:	dcf4      	bgt.n	800f7b8 <__ieee754_powf+0x2c>
 800f7ce:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800f7d2:	dd08      	ble.n	800f7e6 <__ieee754_powf+0x5a>
 800f7d4:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800f7d8:	d1ee      	bne.n	800f7b8 <__ieee754_powf+0x2c>
 800f7da:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800f7de:	0064      	lsls	r4, r4, #1
 800f7e0:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800f7e4:	e7e6      	b.n	800f7b4 <__ieee754_powf+0x28>
 800f7e6:	2e00      	cmp	r6, #0
 800f7e8:	da20      	bge.n	800f82c <__ieee754_powf+0xa0>
 800f7ea:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800f7ee:	da2d      	bge.n	800f84c <__ieee754_powf+0xc0>
 800f7f0:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800f7f4:	f2c0 827f 	blt.w	800fcf6 <__ieee754_powf+0x56a>
 800f7f8:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800f7fc:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800f800:	fa48 f703 	asr.w	r7, r8, r3
 800f804:	fa07 f303 	lsl.w	r3, r7, r3
 800f808:	4543      	cmp	r3, r8
 800f80a:	f040 8274 	bne.w	800fcf6 <__ieee754_powf+0x56a>
 800f80e:	f007 0701 	and.w	r7, r7, #1
 800f812:	f1c7 0702 	rsb	r7, r7, #2
 800f816:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800f81a:	d11f      	bne.n	800f85c <__ieee754_powf+0xd0>
 800f81c:	2c00      	cmp	r4, #0
 800f81e:	f280 8267 	bge.w	800fcf0 <__ieee754_powf+0x564>
 800f822:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f826:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800f82a:	e7c7      	b.n	800f7bc <__ieee754_powf+0x30>
 800f82c:	2700      	movs	r7, #0
 800f82e:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800f832:	d1f0      	bne.n	800f816 <__ieee754_powf+0x8a>
 800f834:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800f838:	f000 8254 	beq.w	800fce4 <__ieee754_powf+0x558>
 800f83c:	dd08      	ble.n	800f850 <__ieee754_powf+0xc4>
 800f83e:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800fb48 <__ieee754_powf+0x3bc>
 800f842:	2c00      	cmp	r4, #0
 800f844:	bfa8      	it	ge
 800f846:	eeb0 0a68 	vmovge.f32	s0, s17
 800f84a:	e7b7      	b.n	800f7bc <__ieee754_powf+0x30>
 800f84c:	2702      	movs	r7, #2
 800f84e:	e7ee      	b.n	800f82e <__ieee754_powf+0xa2>
 800f850:	2c00      	cmp	r4, #0
 800f852:	f280 824a 	bge.w	800fcea <__ieee754_powf+0x55e>
 800f856:	eeb1 0a68 	vneg.f32	s0, s17
 800f85a:	e7af      	b.n	800f7bc <__ieee754_powf+0x30>
 800f85c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800f860:	d102      	bne.n	800f868 <__ieee754_powf+0xdc>
 800f862:	ee28 0a08 	vmul.f32	s0, s16, s16
 800f866:	e7a9      	b.n	800f7bc <__ieee754_powf+0x30>
 800f868:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800f86c:	eeb0 0a48 	vmov.f32	s0, s16
 800f870:	d107      	bne.n	800f882 <__ieee754_powf+0xf6>
 800f872:	2e00      	cmp	r6, #0
 800f874:	db05      	blt.n	800f882 <__ieee754_powf+0xf6>
 800f876:	ecbd 8b02 	vpop	{d8}
 800f87a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f87e:	f000 ba53 	b.w	800fd28 <__ieee754_sqrtf>
 800f882:	f000 fb4b 	bl	800ff1c <fabsf>
 800f886:	b125      	cbz	r5, 800f892 <__ieee754_powf+0x106>
 800f888:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 800f88c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800f890:	d116      	bne.n	800f8c0 <__ieee754_powf+0x134>
 800f892:	2c00      	cmp	r4, #0
 800f894:	bfbc      	itt	lt
 800f896:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800f89a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800f89e:	2e00      	cmp	r6, #0
 800f8a0:	da8c      	bge.n	800f7bc <__ieee754_powf+0x30>
 800f8a2:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800f8a6:	ea55 0307 	orrs.w	r3, r5, r7
 800f8aa:	d104      	bne.n	800f8b6 <__ieee754_powf+0x12a>
 800f8ac:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f8b0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800f8b4:	e782      	b.n	800f7bc <__ieee754_powf+0x30>
 800f8b6:	2f01      	cmp	r7, #1
 800f8b8:	d180      	bne.n	800f7bc <__ieee754_powf+0x30>
 800f8ba:	eeb1 0a40 	vneg.f32	s0, s0
 800f8be:	e77d      	b.n	800f7bc <__ieee754_powf+0x30>
 800f8c0:	0ff0      	lsrs	r0, r6, #31
 800f8c2:	3801      	subs	r0, #1
 800f8c4:	ea57 0300 	orrs.w	r3, r7, r0
 800f8c8:	d104      	bne.n	800f8d4 <__ieee754_powf+0x148>
 800f8ca:	ee38 8a48 	vsub.f32	s16, s16, s16
 800f8ce:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800f8d2:	e773      	b.n	800f7bc <__ieee754_powf+0x30>
 800f8d4:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800f8d8:	dd74      	ble.n	800f9c4 <__ieee754_powf+0x238>
 800f8da:	4b9c      	ldr	r3, [pc, #624]	; (800fb4c <__ieee754_powf+0x3c0>)
 800f8dc:	429d      	cmp	r5, r3
 800f8de:	dc08      	bgt.n	800f8f2 <__ieee754_powf+0x166>
 800f8e0:	2c00      	cmp	r4, #0
 800f8e2:	da0b      	bge.n	800f8fc <__ieee754_powf+0x170>
 800f8e4:	2000      	movs	r0, #0
 800f8e6:	ecbd 8b02 	vpop	{d8}
 800f8ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f8ee:	f000 ba3b 	b.w	800fd68 <__math_oflowf>
 800f8f2:	4b97      	ldr	r3, [pc, #604]	; (800fb50 <__ieee754_powf+0x3c4>)
 800f8f4:	429d      	cmp	r5, r3
 800f8f6:	dd08      	ble.n	800f90a <__ieee754_powf+0x17e>
 800f8f8:	2c00      	cmp	r4, #0
 800f8fa:	dcf3      	bgt.n	800f8e4 <__ieee754_powf+0x158>
 800f8fc:	2000      	movs	r0, #0
 800f8fe:	ecbd 8b02 	vpop	{d8}
 800f902:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f906:	f000 ba29 	b.w	800fd5c <__math_uflowf>
 800f90a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f90e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f912:	eddf 6a90 	vldr	s13, [pc, #576]	; 800fb54 <__ieee754_powf+0x3c8>
 800f916:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800f91a:	eee0 6a67 	vfms.f32	s13, s0, s15
 800f91e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f922:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800f926:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f92a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f92e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800fb58 <__ieee754_powf+0x3cc>
 800f932:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800f936:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800fb5c <__ieee754_powf+0x3d0>
 800f93a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f93e:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800fb60 <__ieee754_powf+0x3d4>
 800f942:	eef0 6a67 	vmov.f32	s13, s15
 800f946:	eee0 6a07 	vfma.f32	s13, s0, s14
 800f94a:	ee16 3a90 	vmov	r3, s13
 800f94e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f952:	f023 030f 	bic.w	r3, r3, #15
 800f956:	ee00 3a90 	vmov	s1, r3
 800f95a:	eee0 0a47 	vfms.f32	s1, s0, s14
 800f95e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800f962:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800f966:	f024 040f 	bic.w	r4, r4, #15
 800f96a:	ee07 4a10 	vmov	s14, r4
 800f96e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800f972:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800f976:	ee07 3a90 	vmov	s15, r3
 800f97a:	eee7 0a27 	vfma.f32	s1, s14, s15
 800f97e:	3f01      	subs	r7, #1
 800f980:	ea57 0200 	orrs.w	r2, r7, r0
 800f984:	ee07 4a10 	vmov	s14, r4
 800f988:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f98c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800f990:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800f994:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800f998:	ee17 4a10 	vmov	r4, s14
 800f99c:	bf08      	it	eq
 800f99e:	eeb0 8a40 	vmoveq.f32	s16, s0
 800f9a2:	2c00      	cmp	r4, #0
 800f9a4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f9a8:	f340 817e 	ble.w	800fca8 <__ieee754_powf+0x51c>
 800f9ac:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800f9b0:	f340 80f8 	ble.w	800fba4 <__ieee754_powf+0x418>
 800f9b4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f9b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9bc:	bf4c      	ite	mi
 800f9be:	2001      	movmi	r0, #1
 800f9c0:	2000      	movpl	r0, #0
 800f9c2:	e790      	b.n	800f8e6 <__ieee754_powf+0x15a>
 800f9c4:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800f9c8:	bf01      	itttt	eq
 800f9ca:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800fb64 <__ieee754_powf+0x3d8>
 800f9ce:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800f9d2:	f06f 0217 	mvneq.w	r2, #23
 800f9d6:	ee17 5a90 	vmoveq	r5, s15
 800f9da:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800f9de:	bf18      	it	ne
 800f9e0:	2200      	movne	r2, #0
 800f9e2:	3b7f      	subs	r3, #127	; 0x7f
 800f9e4:	4413      	add	r3, r2
 800f9e6:	4a60      	ldr	r2, [pc, #384]	; (800fb68 <__ieee754_powf+0x3dc>)
 800f9e8:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800f9ec:	4295      	cmp	r5, r2
 800f9ee:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800f9f2:	dd06      	ble.n	800fa02 <__ieee754_powf+0x276>
 800f9f4:	4a5d      	ldr	r2, [pc, #372]	; (800fb6c <__ieee754_powf+0x3e0>)
 800f9f6:	4295      	cmp	r5, r2
 800f9f8:	f340 80a4 	ble.w	800fb44 <__ieee754_powf+0x3b8>
 800f9fc:	3301      	adds	r3, #1
 800f9fe:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800fa02:	2500      	movs	r5, #0
 800fa04:	4a5a      	ldr	r2, [pc, #360]	; (800fb70 <__ieee754_powf+0x3e4>)
 800fa06:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800fa0a:	ee07 1a90 	vmov	s15, r1
 800fa0e:	ed92 7a00 	vldr	s14, [r2]
 800fa12:	4a58      	ldr	r2, [pc, #352]	; (800fb74 <__ieee754_powf+0x3e8>)
 800fa14:	ee37 6a27 	vadd.f32	s12, s14, s15
 800fa18:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800fa1c:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800fa20:	1049      	asrs	r1, r1, #1
 800fa22:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800fa26:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800fa2a:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800fa2e:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800fa32:	ee06 1a10 	vmov	s12, r1
 800fa36:	ee65 4a26 	vmul.f32	s9, s10, s13
 800fa3a:	ee36 7a47 	vsub.f32	s14, s12, s14
 800fa3e:	ee14 6a90 	vmov	r6, s9
 800fa42:	4016      	ands	r6, r2
 800fa44:	ee05 6a90 	vmov	s11, r6
 800fa48:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800fa4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fa50:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800fb78 <__ieee754_powf+0x3ec>
 800fa54:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800fa58:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800fa5c:	ee25 6a26 	vmul.f32	s12, s10, s13
 800fa60:	eddf 6a46 	vldr	s13, [pc, #280]	; 800fb7c <__ieee754_powf+0x3f0>
 800fa64:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800fa68:	eddf 6a45 	vldr	s13, [pc, #276]	; 800fb80 <__ieee754_powf+0x3f4>
 800fa6c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800fa70:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800fb54 <__ieee754_powf+0x3c8>
 800fa74:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800fa78:	eddf 6a42 	vldr	s13, [pc, #264]	; 800fb84 <__ieee754_powf+0x3f8>
 800fa7c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800fa80:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800fb88 <__ieee754_powf+0x3fc>
 800fa84:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800fa88:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800fa8c:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800fa90:	ee66 6a86 	vmul.f32	s13, s13, s12
 800fa94:	eee5 6a07 	vfma.f32	s13, s10, s14
 800fa98:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800fa9c:	eef0 7a45 	vmov.f32	s15, s10
 800faa0:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800faa4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800faa8:	ee17 1a90 	vmov	r1, s15
 800faac:	4011      	ands	r1, r2
 800faae:	ee07 1a90 	vmov	s15, r1
 800fab2:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800fab6:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800faba:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800fabe:	ee27 7a24 	vmul.f32	s14, s14, s9
 800fac2:	eea6 7a27 	vfma.f32	s14, s12, s15
 800fac6:	eeb0 6a47 	vmov.f32	s12, s14
 800faca:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800face:	ee16 1a10 	vmov	r1, s12
 800fad2:	4011      	ands	r1, r2
 800fad4:	ee06 1a90 	vmov	s13, r1
 800fad8:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800fadc:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800fb8c <__ieee754_powf+0x400>
 800fae0:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800fb90 <__ieee754_powf+0x404>
 800fae4:	ee37 7a66 	vsub.f32	s14, s14, s13
 800fae8:	ee06 1a10 	vmov	s12, r1
 800faec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800faf0:	eddf 7a28 	vldr	s15, [pc, #160]	; 800fb94 <__ieee754_powf+0x408>
 800faf4:	4928      	ldr	r1, [pc, #160]	; (800fb98 <__ieee754_powf+0x40c>)
 800faf6:	eea6 7a27 	vfma.f32	s14, s12, s15
 800fafa:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800fafe:	edd1 7a00 	vldr	s15, [r1]
 800fb02:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fb06:	ee07 3a90 	vmov	s15, r3
 800fb0a:	4b24      	ldr	r3, [pc, #144]	; (800fb9c <__ieee754_powf+0x410>)
 800fb0c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800fb10:	eef0 7a47 	vmov.f32	s15, s14
 800fb14:	eee6 7a25 	vfma.f32	s15, s12, s11
 800fb18:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800fb1c:	edd5 0a00 	vldr	s1, [r5]
 800fb20:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800fb24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb28:	ee17 3a90 	vmov	r3, s15
 800fb2c:	4013      	ands	r3, r2
 800fb2e:	ee07 3a90 	vmov	s15, r3
 800fb32:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800fb36:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800fb3a:	eee6 6a65 	vfms.f32	s13, s12, s11
 800fb3e:	ee77 7a66 	vsub.f32	s15, s14, s13
 800fb42:	e70e      	b.n	800f962 <__ieee754_powf+0x1d6>
 800fb44:	2501      	movs	r5, #1
 800fb46:	e75d      	b.n	800fa04 <__ieee754_powf+0x278>
 800fb48:	00000000 	.word	0x00000000
 800fb4c:	3f7ffff3 	.word	0x3f7ffff3
 800fb50:	3f800007 	.word	0x3f800007
 800fb54:	3eaaaaab 	.word	0x3eaaaaab
 800fb58:	3fb8aa3b 	.word	0x3fb8aa3b
 800fb5c:	36eca570 	.word	0x36eca570
 800fb60:	3fb8aa00 	.word	0x3fb8aa00
 800fb64:	4b800000 	.word	0x4b800000
 800fb68:	001cc471 	.word	0x001cc471
 800fb6c:	005db3d6 	.word	0x005db3d6
 800fb70:	0801086c 	.word	0x0801086c
 800fb74:	fffff000 	.word	0xfffff000
 800fb78:	3e6c3255 	.word	0x3e6c3255
 800fb7c:	3e53f142 	.word	0x3e53f142
 800fb80:	3e8ba305 	.word	0x3e8ba305
 800fb84:	3edb6db7 	.word	0x3edb6db7
 800fb88:	3f19999a 	.word	0x3f19999a
 800fb8c:	3f76384f 	.word	0x3f76384f
 800fb90:	3f763800 	.word	0x3f763800
 800fb94:	369dc3a0 	.word	0x369dc3a0
 800fb98:	0801087c 	.word	0x0801087c
 800fb9c:	08010874 	.word	0x08010874
 800fba0:	3338aa3c 	.word	0x3338aa3c
 800fba4:	f040 8095 	bne.w	800fcd2 <__ieee754_powf+0x546>
 800fba8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800fba0 <__ieee754_powf+0x414>
 800fbac:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fbb0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800fbb4:	eef4 6ac7 	vcmpe.f32	s13, s14
 800fbb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbbc:	f73f aefa 	bgt.w	800f9b4 <__ieee754_powf+0x228>
 800fbc0:	15db      	asrs	r3, r3, #23
 800fbc2:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800fbc6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800fbca:	4103      	asrs	r3, r0
 800fbcc:	4423      	add	r3, r4
 800fbce:	494b      	ldr	r1, [pc, #300]	; (800fcfc <__ieee754_powf+0x570>)
 800fbd0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fbd4:	3a7f      	subs	r2, #127	; 0x7f
 800fbd6:	4111      	asrs	r1, r2
 800fbd8:	ea23 0101 	bic.w	r1, r3, r1
 800fbdc:	ee07 1a10 	vmov	s14, r1
 800fbe0:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800fbe4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800fbe8:	f1c2 0217 	rsb	r2, r2, #23
 800fbec:	4110      	asrs	r0, r2
 800fbee:	2c00      	cmp	r4, #0
 800fbf0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fbf4:	bfb8      	it	lt
 800fbf6:	4240      	neglt	r0, r0
 800fbf8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800fbfc:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800fd00 <__ieee754_powf+0x574>
 800fc00:	eddf 6a40 	vldr	s13, [pc, #256]	; 800fd04 <__ieee754_powf+0x578>
 800fc04:	ee17 3a10 	vmov	r3, s14
 800fc08:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800fc0c:	f023 030f 	bic.w	r3, r3, #15
 800fc10:	ee07 3a10 	vmov	s14, r3
 800fc14:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fc18:	ee27 0a00 	vmul.f32	s0, s14, s0
 800fc1c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800fc20:	eddf 7a39 	vldr	s15, [pc, #228]	; 800fd08 <__ieee754_powf+0x57c>
 800fc24:	eea0 0aa7 	vfma.f32	s0, s1, s15
 800fc28:	eef0 7a40 	vmov.f32	s15, s0
 800fc2c:	eee7 7a26 	vfma.f32	s15, s14, s13
 800fc30:	eeb0 6a67 	vmov.f32	s12, s15
 800fc34:	eea7 6a66 	vfms.f32	s12, s14, s13
 800fc38:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800fc3c:	ee30 0a46 	vsub.f32	s0, s0, s12
 800fc40:	eddf 6a32 	vldr	s13, [pc, #200]	; 800fd0c <__ieee754_powf+0x580>
 800fc44:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800fd10 <__ieee754_powf+0x584>
 800fc48:	eee7 6a06 	vfma.f32	s13, s14, s12
 800fc4c:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800fd14 <__ieee754_powf+0x588>
 800fc50:	eea6 6a87 	vfma.f32	s12, s13, s14
 800fc54:	eddf 6a30 	vldr	s13, [pc, #192]	; 800fd18 <__ieee754_powf+0x58c>
 800fc58:	eee6 6a07 	vfma.f32	s13, s12, s14
 800fc5c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800fd1c <__ieee754_powf+0x590>
 800fc60:	eea6 6a87 	vfma.f32	s12, s13, s14
 800fc64:	eef0 6a67 	vmov.f32	s13, s15
 800fc68:	eee6 6a47 	vfms.f32	s13, s12, s14
 800fc6c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800fc70:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800fc74:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800fc78:	eea7 0a80 	vfma.f32	s0, s15, s0
 800fc7c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800fc80:	ee37 0a40 	vsub.f32	s0, s14, s0
 800fc84:	ee70 7a67 	vsub.f32	s15, s0, s15
 800fc88:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fc8c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fc90:	ee10 3a10 	vmov	r3, s0
 800fc94:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800fc98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800fc9c:	da1f      	bge.n	800fcde <__ieee754_powf+0x552>
 800fc9e:	f000 f957 	bl	800ff50 <scalbnf>
 800fca2:	ee20 0a08 	vmul.f32	s0, s0, s16
 800fca6:	e589      	b.n	800f7bc <__ieee754_powf+0x30>
 800fca8:	4a1d      	ldr	r2, [pc, #116]	; (800fd20 <__ieee754_powf+0x594>)
 800fcaa:	4293      	cmp	r3, r2
 800fcac:	dd07      	ble.n	800fcbe <__ieee754_powf+0x532>
 800fcae:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800fcb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcb6:	bf4c      	ite	mi
 800fcb8:	2001      	movmi	r0, #1
 800fcba:	2000      	movpl	r0, #0
 800fcbc:	e61f      	b.n	800f8fe <__ieee754_powf+0x172>
 800fcbe:	d108      	bne.n	800fcd2 <__ieee754_powf+0x546>
 800fcc0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fcc4:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800fcc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fccc:	f6ff af78 	blt.w	800fbc0 <__ieee754_powf+0x434>
 800fcd0:	e7ed      	b.n	800fcae <__ieee754_powf+0x522>
 800fcd2:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800fcd6:	f73f af73 	bgt.w	800fbc0 <__ieee754_powf+0x434>
 800fcda:	2000      	movs	r0, #0
 800fcdc:	e78c      	b.n	800fbf8 <__ieee754_powf+0x46c>
 800fcde:	ee00 3a10 	vmov	s0, r3
 800fce2:	e7de      	b.n	800fca2 <__ieee754_powf+0x516>
 800fce4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fce8:	e568      	b.n	800f7bc <__ieee754_powf+0x30>
 800fcea:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800fd24 <__ieee754_powf+0x598>
 800fcee:	e565      	b.n	800f7bc <__ieee754_powf+0x30>
 800fcf0:	eeb0 0a48 	vmov.f32	s0, s16
 800fcf4:	e562      	b.n	800f7bc <__ieee754_powf+0x30>
 800fcf6:	2700      	movs	r7, #0
 800fcf8:	e58d      	b.n	800f816 <__ieee754_powf+0x8a>
 800fcfa:	bf00      	nop
 800fcfc:	007fffff 	.word	0x007fffff
 800fd00:	35bfbe8c 	.word	0x35bfbe8c
 800fd04:	3f317200 	.word	0x3f317200
 800fd08:	3f317218 	.word	0x3f317218
 800fd0c:	b5ddea0e 	.word	0xb5ddea0e
 800fd10:	3331bb4c 	.word	0x3331bb4c
 800fd14:	388ab355 	.word	0x388ab355
 800fd18:	bb360b61 	.word	0xbb360b61
 800fd1c:	3e2aaaab 	.word	0x3e2aaaab
 800fd20:	43160000 	.word	0x43160000
 800fd24:	00000000 	.word	0x00000000

0800fd28 <__ieee754_sqrtf>:
 800fd28:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800fd2c:	4770      	bx	lr

0800fd2e <with_errnof>:
 800fd2e:	b513      	push	{r0, r1, r4, lr}
 800fd30:	4604      	mov	r4, r0
 800fd32:	ed8d 0a01 	vstr	s0, [sp, #4]
 800fd36:	f7fc fd47 	bl	800c7c8 <__errno>
 800fd3a:	ed9d 0a01 	vldr	s0, [sp, #4]
 800fd3e:	6004      	str	r4, [r0, #0]
 800fd40:	b002      	add	sp, #8
 800fd42:	bd10      	pop	{r4, pc}

0800fd44 <xflowf>:
 800fd44:	b130      	cbz	r0, 800fd54 <xflowf+0x10>
 800fd46:	eef1 7a40 	vneg.f32	s15, s0
 800fd4a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fd4e:	2022      	movs	r0, #34	; 0x22
 800fd50:	f7ff bfed 	b.w	800fd2e <with_errnof>
 800fd54:	eef0 7a40 	vmov.f32	s15, s0
 800fd58:	e7f7      	b.n	800fd4a <xflowf+0x6>
	...

0800fd5c <__math_uflowf>:
 800fd5c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fd64 <__math_uflowf+0x8>
 800fd60:	f7ff bff0 	b.w	800fd44 <xflowf>
 800fd64:	10000000 	.word	0x10000000

0800fd68 <__math_oflowf>:
 800fd68:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fd70 <__math_oflowf+0x8>
 800fd6c:	f7ff bfea 	b.w	800fd44 <xflowf>
 800fd70:	70000000 	.word	0x70000000

0800fd74 <atanf>:
 800fd74:	b538      	push	{r3, r4, r5, lr}
 800fd76:	ee10 5a10 	vmov	r5, s0
 800fd7a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800fd7e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800fd82:	eef0 7a40 	vmov.f32	s15, s0
 800fd86:	db10      	blt.n	800fdaa <atanf+0x36>
 800fd88:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800fd8c:	dd04      	ble.n	800fd98 <atanf+0x24>
 800fd8e:	ee70 7a00 	vadd.f32	s15, s0, s0
 800fd92:	eeb0 0a67 	vmov.f32	s0, s15
 800fd96:	bd38      	pop	{r3, r4, r5, pc}
 800fd98:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800fed0 <atanf+0x15c>
 800fd9c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800fed4 <atanf+0x160>
 800fda0:	2d00      	cmp	r5, #0
 800fda2:	bfd8      	it	le
 800fda4:	eef0 7a40 	vmovle.f32	s15, s0
 800fda8:	e7f3      	b.n	800fd92 <atanf+0x1e>
 800fdaa:	4b4b      	ldr	r3, [pc, #300]	; (800fed8 <atanf+0x164>)
 800fdac:	429c      	cmp	r4, r3
 800fdae:	dc10      	bgt.n	800fdd2 <atanf+0x5e>
 800fdb0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800fdb4:	da0a      	bge.n	800fdcc <atanf+0x58>
 800fdb6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800fedc <atanf+0x168>
 800fdba:	ee30 7a07 	vadd.f32	s14, s0, s14
 800fdbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fdc2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800fdc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdca:	dce2      	bgt.n	800fd92 <atanf+0x1e>
 800fdcc:	f04f 33ff 	mov.w	r3, #4294967295
 800fdd0:	e013      	b.n	800fdfa <atanf+0x86>
 800fdd2:	f000 f8a3 	bl	800ff1c <fabsf>
 800fdd6:	4b42      	ldr	r3, [pc, #264]	; (800fee0 <atanf+0x16c>)
 800fdd8:	429c      	cmp	r4, r3
 800fdda:	dc4f      	bgt.n	800fe7c <atanf+0x108>
 800fddc:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800fde0:	429c      	cmp	r4, r3
 800fde2:	dc41      	bgt.n	800fe68 <atanf+0xf4>
 800fde4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800fde8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800fdec:	eea0 7a27 	vfma.f32	s14, s0, s15
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fdf6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fdfa:	1c5a      	adds	r2, r3, #1
 800fdfc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800fe00:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800fee4 <atanf+0x170>
 800fe04:	eddf 5a38 	vldr	s11, [pc, #224]	; 800fee8 <atanf+0x174>
 800fe08:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800feec <atanf+0x178>
 800fe0c:	ee66 6a06 	vmul.f32	s13, s12, s12
 800fe10:	eee6 5a87 	vfma.f32	s11, s13, s14
 800fe14:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800fef0 <atanf+0x17c>
 800fe18:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800fe1c:	eddf 5a35 	vldr	s11, [pc, #212]	; 800fef4 <atanf+0x180>
 800fe20:	eee7 5a26 	vfma.f32	s11, s14, s13
 800fe24:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800fef8 <atanf+0x184>
 800fe28:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800fe2c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800fefc <atanf+0x188>
 800fe30:	eee7 5a26 	vfma.f32	s11, s14, s13
 800fe34:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800ff00 <atanf+0x18c>
 800fe38:	eea6 5a87 	vfma.f32	s10, s13, s14
 800fe3c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800ff04 <atanf+0x190>
 800fe40:	eea5 7a26 	vfma.f32	s14, s10, s13
 800fe44:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800ff08 <atanf+0x194>
 800fe48:	eea7 5a26 	vfma.f32	s10, s14, s13
 800fe4c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800ff0c <atanf+0x198>
 800fe50:	eea5 7a26 	vfma.f32	s14, s10, s13
 800fe54:	ee27 7a26 	vmul.f32	s14, s14, s13
 800fe58:	eea5 7a86 	vfma.f32	s14, s11, s12
 800fe5c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800fe60:	d121      	bne.n	800fea6 <atanf+0x132>
 800fe62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fe66:	e794      	b.n	800fd92 <atanf+0x1e>
 800fe68:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fe6c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800fe70:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fe74:	2301      	movs	r3, #1
 800fe76:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fe7a:	e7be      	b.n	800fdfa <atanf+0x86>
 800fe7c:	4b24      	ldr	r3, [pc, #144]	; (800ff10 <atanf+0x19c>)
 800fe7e:	429c      	cmp	r4, r3
 800fe80:	dc0b      	bgt.n	800fe9a <atanf+0x126>
 800fe82:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800fe86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fe8a:	eea0 7a27 	vfma.f32	s14, s0, s15
 800fe8e:	2302      	movs	r3, #2
 800fe90:	ee70 6a67 	vsub.f32	s13, s0, s15
 800fe94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fe98:	e7af      	b.n	800fdfa <atanf+0x86>
 800fe9a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800fe9e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fea2:	2303      	movs	r3, #3
 800fea4:	e7a9      	b.n	800fdfa <atanf+0x86>
 800fea6:	4a1b      	ldr	r2, [pc, #108]	; (800ff14 <atanf+0x1a0>)
 800fea8:	491b      	ldr	r1, [pc, #108]	; (800ff18 <atanf+0x1a4>)
 800feaa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800feae:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800feb2:	ed93 0a00 	vldr	s0, [r3]
 800feb6:	ee37 7a40 	vsub.f32	s14, s14, s0
 800feba:	ed92 0a00 	vldr	s0, [r2]
 800febe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fec2:	2d00      	cmp	r5, #0
 800fec4:	ee70 7a67 	vsub.f32	s15, s0, s15
 800fec8:	bfb8      	it	lt
 800feca:	eef1 7a67 	vneglt.f32	s15, s15
 800fece:	e760      	b.n	800fd92 <atanf+0x1e>
 800fed0:	3fc90fdb 	.word	0x3fc90fdb
 800fed4:	bfc90fdb 	.word	0xbfc90fdb
 800fed8:	3edfffff 	.word	0x3edfffff
 800fedc:	7149f2ca 	.word	0x7149f2ca
 800fee0:	3f97ffff 	.word	0x3f97ffff
 800fee4:	3c8569d7 	.word	0x3c8569d7
 800fee8:	3d4bda59 	.word	0x3d4bda59
 800feec:	bd6ef16b 	.word	0xbd6ef16b
 800fef0:	3d886b35 	.word	0x3d886b35
 800fef4:	3dba2e6e 	.word	0x3dba2e6e
 800fef8:	3e124925 	.word	0x3e124925
 800fefc:	3eaaaaab 	.word	0x3eaaaaab
 800ff00:	bd15a221 	.word	0xbd15a221
 800ff04:	bd9d8795 	.word	0xbd9d8795
 800ff08:	bde38e38 	.word	0xbde38e38
 800ff0c:	be4ccccd 	.word	0xbe4ccccd
 800ff10:	401bffff 	.word	0x401bffff
 800ff14:	08010884 	.word	0x08010884
 800ff18:	08010894 	.word	0x08010894

0800ff1c <fabsf>:
 800ff1c:	ee10 3a10 	vmov	r3, s0
 800ff20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ff24:	ee00 3a10 	vmov	s0, r3
 800ff28:	4770      	bx	lr

0800ff2a <finitef>:
 800ff2a:	b082      	sub	sp, #8
 800ff2c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ff30:	9801      	ldr	r0, [sp, #4]
 800ff32:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ff36:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800ff3a:	bfac      	ite	ge
 800ff3c:	2000      	movge	r0, #0
 800ff3e:	2001      	movlt	r0, #1
 800ff40:	b002      	add	sp, #8
 800ff42:	4770      	bx	lr

0800ff44 <nanf>:
 800ff44:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ff4c <nanf+0x8>
 800ff48:	4770      	bx	lr
 800ff4a:	bf00      	nop
 800ff4c:	7fc00000 	.word	0x7fc00000

0800ff50 <scalbnf>:
 800ff50:	ee10 3a10 	vmov	r3, s0
 800ff54:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800ff58:	d025      	beq.n	800ffa6 <scalbnf+0x56>
 800ff5a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ff5e:	d302      	bcc.n	800ff66 <scalbnf+0x16>
 800ff60:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ff64:	4770      	bx	lr
 800ff66:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800ff6a:	d122      	bne.n	800ffb2 <scalbnf+0x62>
 800ff6c:	4b2a      	ldr	r3, [pc, #168]	; (8010018 <scalbnf+0xc8>)
 800ff6e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801001c <scalbnf+0xcc>
 800ff72:	4298      	cmp	r0, r3
 800ff74:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ff78:	db16      	blt.n	800ffa8 <scalbnf+0x58>
 800ff7a:	ee10 3a10 	vmov	r3, s0
 800ff7e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ff82:	3a19      	subs	r2, #25
 800ff84:	4402      	add	r2, r0
 800ff86:	2afe      	cmp	r2, #254	; 0xfe
 800ff88:	dd15      	ble.n	800ffb6 <scalbnf+0x66>
 800ff8a:	ee10 3a10 	vmov	r3, s0
 800ff8e:	eddf 7a24 	vldr	s15, [pc, #144]	; 8010020 <scalbnf+0xd0>
 800ff92:	eddf 6a24 	vldr	s13, [pc, #144]	; 8010024 <scalbnf+0xd4>
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	eeb0 7a67 	vmov.f32	s14, s15
 800ff9c:	bfb8      	it	lt
 800ff9e:	eef0 7a66 	vmovlt.f32	s15, s13
 800ffa2:	ee27 0a27 	vmul.f32	s0, s14, s15
 800ffa6:	4770      	bx	lr
 800ffa8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8010028 <scalbnf+0xd8>
 800ffac:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ffb0:	4770      	bx	lr
 800ffb2:	0dd2      	lsrs	r2, r2, #23
 800ffb4:	e7e6      	b.n	800ff84 <scalbnf+0x34>
 800ffb6:	2a00      	cmp	r2, #0
 800ffb8:	dd06      	ble.n	800ffc8 <scalbnf+0x78>
 800ffba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ffbe:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800ffc2:	ee00 3a10 	vmov	s0, r3
 800ffc6:	4770      	bx	lr
 800ffc8:	f112 0f16 	cmn.w	r2, #22
 800ffcc:	da1a      	bge.n	8010004 <scalbnf+0xb4>
 800ffce:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ffd2:	4298      	cmp	r0, r3
 800ffd4:	ee10 3a10 	vmov	r3, s0
 800ffd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ffdc:	dd0a      	ble.n	800fff4 <scalbnf+0xa4>
 800ffde:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8010020 <scalbnf+0xd0>
 800ffe2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8010024 <scalbnf+0xd4>
 800ffe6:	eef0 7a40 	vmov.f32	s15, s0
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	bf18      	it	ne
 800ffee:	eeb0 0a47 	vmovne.f32	s0, s14
 800fff2:	e7db      	b.n	800ffac <scalbnf+0x5c>
 800fff4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8010028 <scalbnf+0xd8>
 800fff8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801002c <scalbnf+0xdc>
 800fffc:	eef0 7a40 	vmov.f32	s15, s0
 8010000:	2b00      	cmp	r3, #0
 8010002:	e7f3      	b.n	800ffec <scalbnf+0x9c>
 8010004:	3219      	adds	r2, #25
 8010006:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801000a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801000e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8010030 <scalbnf+0xe0>
 8010012:	ee07 3a10 	vmov	s14, r3
 8010016:	e7c4      	b.n	800ffa2 <scalbnf+0x52>
 8010018:	ffff3cb0 	.word	0xffff3cb0
 801001c:	4c000000 	.word	0x4c000000
 8010020:	7149f2ca 	.word	0x7149f2ca
 8010024:	f149f2ca 	.word	0xf149f2ca
 8010028:	0da24260 	.word	0x0da24260
 801002c:	8da24260 	.word	0x8da24260
 8010030:	33000000 	.word	0x33000000

08010034 <_init>:
 8010034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010036:	bf00      	nop
 8010038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801003a:	bc08      	pop	{r3}
 801003c:	469e      	mov	lr, r3
 801003e:	4770      	bx	lr

08010040 <_fini>:
 8010040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010042:	bf00      	nop
 8010044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010046:	bc08      	pop	{r3}
 8010048:	469e      	mov	lr, r3
 801004a:	4770      	bx	lr
