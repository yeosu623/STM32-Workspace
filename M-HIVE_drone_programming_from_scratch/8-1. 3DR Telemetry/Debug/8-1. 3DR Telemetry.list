
8-1. 3DR Telemetry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000072c  0800abf8  0800abf8  0001abf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b324  0800b324  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b324  0800b324  0001b324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b32c  0800b32c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b32c  0800b32c  0001b32c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b330  0800b330  0001b330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b334  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  200001dc  0800b510  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  0800b510  00020454  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000159fc  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f1d  00000000  00000000  00035c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b8  00000000  00000000  00039b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001408  00000000  00000000  0003b0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024c7a  00000000  00000000  0003c4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000186c8  00000000  00000000  00061162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3475  00000000  00000000  0007982a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014cc9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069ec  00000000  00000000  0014ccf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800abdc 	.word	0x0800abdc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800abdc 	.word	0x0800abdc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <HAL_Init+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0d      	ldr	r2, [pc, #52]	; (8000eec <HAL_Init+0x40>)
 8000eb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <HAL_Init+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <HAL_Init+0x40>)
 8000ec2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ec6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a07      	ldr	r2, [pc, #28]	; (8000eec <HAL_Init+0x40>)
 8000ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed4:	2003      	movs	r0, #3
 8000ed6:	f000 fd43 	bl	8001960 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eda:	2000      	movs	r0, #0
 8000edc:	f000 f808 	bl	8000ef0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee0:	f006 f93c 	bl	800715c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40023c00 	.word	0x40023c00

08000ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <HAL_InitTick+0x54>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <HAL_InitTick+0x58>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4619      	mov	r1, r3
 8000f02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 fd5b 	bl	80019ca <HAL_SYSTICK_Config>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e00e      	b.n	8000f3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b0f      	cmp	r3, #15
 8000f22:	d80a      	bhi.n	8000f3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f24:	2200      	movs	r2, #0
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	f000 fd23 	bl	8001976 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f30:	4a06      	ldr	r2, [pc, #24]	; (8000f4c <HAL_InitTick+0x5c>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	e000      	b.n	8000f3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000008 	.word	0x20000008
 8000f48:	20000004 	.word	0x20000004
 8000f4c:	20000000 	.word	0x20000000

08000f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_IncTick+0x20>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_IncTick+0x24>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <HAL_IncTick+0x24>)
 8000f62:	6013      	str	r3, [r2, #0]
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000004 	.word	0x20000004
 8000f74:	200001f8 	.word	0x200001f8

08000f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <HAL_GetTick+0x14>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	200001f8 	.word	0x200001f8

08000f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f98:	f7ff ffee 	bl	8000f78 <HAL_GetTick>
 8000f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa8:	d005      	beq.n	8000fb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <HAL_Delay+0x44>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fb6:	bf00      	nop
 8000fb8:	f7ff ffde 	bl	8000f78 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d8f7      	bhi.n	8000fb8 <HAL_Delay+0x28>
  {
  }
}
 8000fc8:	bf00      	nop
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000004 	.word	0x20000004

08000fd8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d101      	bne.n	8000fee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e033      	b.n	8001056 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d109      	bne.n	800100a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f005 fb0a 	bl	8006610 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	f003 0310 	and.w	r3, r3, #16
 8001012:	2b00      	cmp	r3, #0
 8001014:	d118      	bne.n	8001048 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800101e:	f023 0302 	bic.w	r3, r3, #2
 8001022:	f043 0202 	orr.w	r2, r3, #2
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f000 fa4a 	bl	80014c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	f023 0303 	bic.w	r3, r3, #3
 800103e:	f043 0201 	orr.w	r2, r3, #1
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	641a      	str	r2, [r3, #64]	; 0x40
 8001046:	e001      	b.n	800104c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001054:	7bfb      	ldrb	r3, [r7, #15]
}
 8001056:	4618      	mov	r0, r3
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800106c:	2300      	movs	r3, #0
 800106e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001076:	2b01      	cmp	r3, #1
 8001078:	d101      	bne.n	800107e <HAL_ADC_Start_DMA+0x1e>
 800107a:	2302      	movs	r3, #2
 800107c:	e0cc      	b.n	8001218 <HAL_ADC_Start_DMA+0x1b8>
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2201      	movs	r2, #1
 8001082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	2b01      	cmp	r3, #1
 8001092:	d018      	beq.n	80010c6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	689a      	ldr	r2, [r3, #8]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f042 0201 	orr.w	r2, r2, #1
 80010a2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010a4:	4b5e      	ldr	r3, [pc, #376]	; (8001220 <HAL_ADC_Start_DMA+0x1c0>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a5e      	ldr	r2, [pc, #376]	; (8001224 <HAL_ADC_Start_DMA+0x1c4>)
 80010aa:	fba2 2303 	umull	r2, r3, r2, r3
 80010ae:	0c9a      	lsrs	r2, r3, #18
 80010b0:	4613      	mov	r3, r2
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	4413      	add	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80010b8:	e002      	b.n	80010c0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	3b01      	subs	r3, #1
 80010be:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1f9      	bne.n	80010ba <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	f040 80a0 	bne.w	8001216 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010de:	f023 0301 	bic.w	r3, r3, #1
 80010e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d007      	beq.n	8001108 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001100:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001114:	d106      	bne.n	8001124 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	f023 0206 	bic.w	r2, r3, #6
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	645a      	str	r2, [r3, #68]	; 0x44
 8001122:	e002      	b.n	800112a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2200      	movs	r2, #0
 8001128:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001132:	4b3d      	ldr	r3, [pc, #244]	; (8001228 <HAL_ADC_Start_DMA+0x1c8>)
 8001134:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800113a:	4a3c      	ldr	r2, [pc, #240]	; (800122c <HAL_ADC_Start_DMA+0x1cc>)
 800113c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001142:	4a3b      	ldr	r2, [pc, #236]	; (8001230 <HAL_ADC_Start_DMA+0x1d0>)
 8001144:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800114a:	4a3a      	ldr	r2, [pc, #232]	; (8001234 <HAL_ADC_Start_DMA+0x1d4>)
 800114c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001156:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	685a      	ldr	r2, [r3, #4]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001166:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	689a      	ldr	r2, [r3, #8]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001176:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	334c      	adds	r3, #76	; 0x4c
 8001182:	4619      	mov	r1, r3
 8001184:	68ba      	ldr	r2, [r7, #8]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f000 fcda 	bl	8001b40 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 031f 	and.w	r3, r3, #31
 8001194:	2b00      	cmp	r3, #0
 8001196:	d12a      	bne.n	80011ee <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a26      	ldr	r2, [pc, #152]	; (8001238 <HAL_ADC_Start_DMA+0x1d8>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d015      	beq.n	80011ce <HAL_ADC_Start_DMA+0x16e>
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a25      	ldr	r2, [pc, #148]	; (800123c <HAL_ADC_Start_DMA+0x1dc>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d105      	bne.n	80011b8 <HAL_ADC_Start_DMA+0x158>
 80011ac:	4b1e      	ldr	r3, [pc, #120]	; (8001228 <HAL_ADC_Start_DMA+0x1c8>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 031f 	and.w	r3, r3, #31
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d00a      	beq.n	80011ce <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a20      	ldr	r2, [pc, #128]	; (8001240 <HAL_ADC_Start_DMA+0x1e0>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d129      	bne.n	8001216 <HAL_ADC_Start_DMA+0x1b6>
 80011c2:	4b19      	ldr	r3, [pc, #100]	; (8001228 <HAL_ADC_Start_DMA+0x1c8>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 0310 	and.w	r3, r3, #16
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d123      	bne.n	8001216 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d11c      	bne.n	8001216 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	689a      	ldr	r2, [r3, #8]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	e013      	b.n	8001216 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a11      	ldr	r2, [pc, #68]	; (8001238 <HAL_ADC_Start_DMA+0x1d8>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d10e      	bne.n	8001216 <HAL_ADC_Start_DMA+0x1b6>
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d107      	bne.n	8001216 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001214:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000008 	.word	0x20000008
 8001224:	431bde83 	.word	0x431bde83
 8001228:	40012300 	.word	0x40012300
 800122c:	080016bd 	.word	0x080016bd
 8001230:	08001777 	.word	0x08001777
 8001234:	08001793 	.word	0x08001793
 8001238:	40012000 	.word	0x40012000
 800123c:	40012100 	.word	0x40012100
 8001240:	40012200 	.word	0x40012200

08001244 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001294:	2b01      	cmp	r3, #1
 8001296:	d101      	bne.n	800129c <HAL_ADC_ConfigChannel+0x1c>
 8001298:	2302      	movs	r3, #2
 800129a:	e105      	b.n	80014a8 <HAL_ADC_ConfigChannel+0x228>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2201      	movs	r2, #1
 80012a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b09      	cmp	r3, #9
 80012aa:	d925      	bls.n	80012f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	68d9      	ldr	r1, [r3, #12]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	461a      	mov	r2, r3
 80012ba:	4613      	mov	r3, r2
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4413      	add	r3, r2
 80012c0:	3b1e      	subs	r3, #30
 80012c2:	2207      	movs	r2, #7
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43da      	mvns	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	400a      	ands	r2, r1
 80012d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	68d9      	ldr	r1, [r3, #12]
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	4618      	mov	r0, r3
 80012e4:	4603      	mov	r3, r0
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	4403      	add	r3, r0
 80012ea:	3b1e      	subs	r3, #30
 80012ec:	409a      	lsls	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	430a      	orrs	r2, r1
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	e022      	b.n	800133e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6919      	ldr	r1, [r3, #16]
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	b29b      	uxth	r3, r3
 8001304:	461a      	mov	r2, r3
 8001306:	4613      	mov	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	4413      	add	r3, r2
 800130c:	2207      	movs	r2, #7
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43da      	mvns	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	400a      	ands	r2, r1
 800131a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6919      	ldr	r1, [r3, #16]
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	689a      	ldr	r2, [r3, #8]
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	b29b      	uxth	r3, r3
 800132c:	4618      	mov	r0, r3
 800132e:	4603      	mov	r3, r0
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	4403      	add	r3, r0
 8001334:	409a      	lsls	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	430a      	orrs	r2, r1
 800133c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	2b06      	cmp	r3, #6
 8001344:	d824      	bhi.n	8001390 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	4613      	mov	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4413      	add	r3, r2
 8001356:	3b05      	subs	r3, #5
 8001358:	221f      	movs	r2, #31
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43da      	mvns	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	400a      	ands	r2, r1
 8001366:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	b29b      	uxth	r3, r3
 8001374:	4618      	mov	r0, r3
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	4613      	mov	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	3b05      	subs	r3, #5
 8001382:	fa00 f203 	lsl.w	r2, r0, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	430a      	orrs	r2, r1
 800138c:	635a      	str	r2, [r3, #52]	; 0x34
 800138e:	e04c      	b.n	800142a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2b0c      	cmp	r3, #12
 8001396:	d824      	bhi.n	80013e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	4613      	mov	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	4413      	add	r3, r2
 80013a8:	3b23      	subs	r3, #35	; 0x23
 80013aa:	221f      	movs	r2, #31
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43da      	mvns	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	400a      	ands	r2, r1
 80013b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	4618      	mov	r0, r3
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	4613      	mov	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4413      	add	r3, r2
 80013d2:	3b23      	subs	r3, #35	; 0x23
 80013d4:	fa00 f203 	lsl.w	r2, r0, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	430a      	orrs	r2, r1
 80013de:	631a      	str	r2, [r3, #48]	; 0x30
 80013e0:	e023      	b.n	800142a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	4613      	mov	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4413      	add	r3, r2
 80013f2:	3b41      	subs	r3, #65	; 0x41
 80013f4:	221f      	movs	r2, #31
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43da      	mvns	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	400a      	ands	r2, r1
 8001402:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	b29b      	uxth	r3, r3
 8001410:	4618      	mov	r0, r3
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	4613      	mov	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	3b41      	subs	r3, #65	; 0x41
 800141e:	fa00 f203 	lsl.w	r2, r0, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	430a      	orrs	r2, r1
 8001428:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800142a:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <HAL_ADC_ConfigChannel+0x234>)
 800142c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a21      	ldr	r2, [pc, #132]	; (80014b8 <HAL_ADC_ConfigChannel+0x238>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d109      	bne.n	800144c <HAL_ADC_ConfigChannel+0x1cc>
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b12      	cmp	r3, #18
 800143e:	d105      	bne.n	800144c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a19      	ldr	r2, [pc, #100]	; (80014b8 <HAL_ADC_ConfigChannel+0x238>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d123      	bne.n	800149e <HAL_ADC_ConfigChannel+0x21e>
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b10      	cmp	r3, #16
 800145c:	d003      	beq.n	8001466 <HAL_ADC_ConfigChannel+0x1e6>
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2b11      	cmp	r3, #17
 8001464:	d11b      	bne.n	800149e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2b10      	cmp	r3, #16
 8001478:	d111      	bne.n	800149e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <HAL_ADC_ConfigChannel+0x23c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a10      	ldr	r2, [pc, #64]	; (80014c0 <HAL_ADC_ConfigChannel+0x240>)
 8001480:	fba2 2303 	umull	r2, r3, r2, r3
 8001484:	0c9a      	lsrs	r2, r3, #18
 8001486:	4613      	mov	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001490:	e002      	b.n	8001498 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	3b01      	subs	r3, #1
 8001496:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f9      	bne.n	8001492 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	40012300 	.word	0x40012300
 80014b8:	40012000 	.word	0x40012000
 80014bc:	20000008 	.word	0x20000008
 80014c0:	431bde83 	.word	0x431bde83

080014c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014cc:	4b79      	ldr	r3, [pc, #484]	; (80016b4 <ADC_Init+0x1f0>)
 80014ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	431a      	orrs	r2, r3
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6859      	ldr	r1, [r3, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	691b      	ldr	r3, [r3, #16]
 8001504:	021a      	lsls	r2, r3, #8
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	430a      	orrs	r2, r1
 800150c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800151c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6859      	ldr	r1, [r3, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	430a      	orrs	r2, r1
 800152e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800153e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6899      	ldr	r1, [r3, #8]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	68da      	ldr	r2, [r3, #12]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	430a      	orrs	r2, r1
 8001550:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001556:	4a58      	ldr	r2, [pc, #352]	; (80016b8 <ADC_Init+0x1f4>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d022      	beq.n	80015a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	689a      	ldr	r2, [r3, #8]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800156a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6899      	ldr	r1, [r3, #8]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	430a      	orrs	r2, r1
 800157c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800158c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6899      	ldr	r1, [r3, #8]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	430a      	orrs	r2, r1
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	e00f      	b.n	80015c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 0202 	bic.w	r2, r2, #2
 80015d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6899      	ldr	r1, [r3, #8]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	7e1b      	ldrb	r3, [r3, #24]
 80015dc:	005a      	lsls	r2, r3, #1
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	430a      	orrs	r2, r1
 80015e4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d01b      	beq.n	8001628 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015fe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800160e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6859      	ldr	r1, [r3, #4]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161a:	3b01      	subs	r3, #1
 800161c:	035a      	lsls	r2, r3, #13
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	e007      	b.n	8001638 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001636:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001646:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	3b01      	subs	r3, #1
 8001654:	051a      	lsls	r2, r3, #20
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800166c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6899      	ldr	r1, [r3, #8]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800167a:	025a      	lsls	r2, r3, #9
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	430a      	orrs	r2, r1
 8001682:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001692:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6899      	ldr	r1, [r3, #8]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	029a      	lsls	r2, r3, #10
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	430a      	orrs	r2, r1
 80016a6:	609a      	str	r2, [r3, #8]
}
 80016a8:	bf00      	nop
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	40012300 	.word	0x40012300
 80016b8:	0f000001 	.word	0x0f000001

080016bc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016c8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d13c      	bne.n	8001750 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d12b      	bne.n	8001748 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d127      	bne.n	8001748 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001702:	2b00      	cmp	r3, #0
 8001704:	d006      	beq.n	8001714 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001710:	2b00      	cmp	r3, #0
 8001712:	d119      	bne.n	8001748 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 0220 	bic.w	r2, r2, #32
 8001722:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d105      	bne.n	8001748 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	f043 0201 	orr.w	r2, r3, #1
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001748:	68f8      	ldr	r0, [r7, #12]
 800174a:	f7ff fd7b 	bl	8001244 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800174e:	e00e      	b.n	800176e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001754:	f003 0310 	and.w	r3, r3, #16
 8001758:	2b00      	cmp	r3, #0
 800175a:	d003      	beq.n	8001764 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800175c:	68f8      	ldr	r0, [r7, #12]
 800175e:	f7ff fd85 	bl	800126c <HAL_ADC_ErrorCallback>
}
 8001762:	e004      	b.n	800176e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	4798      	blx	r3
}
 800176e:	bf00      	nop
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b084      	sub	sp, #16
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001782:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	f7ff fd67 	bl	8001258 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b084      	sub	sp, #16
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800179e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2240      	movs	r2, #64	; 0x40
 80017a4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	f043 0204 	orr.w	r2, r3, #4
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80017b2:	68f8      	ldr	r0, [r7, #12]
 80017b4:	f7ff fd5a 	bl	800126c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017b8:	bf00      	nop
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d0:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <__NVIC_SetPriorityGrouping+0x44>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017d6:	68ba      	ldr	r2, [r7, #8]
 80017d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017dc:	4013      	ands	r3, r2
 80017de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017f2:	4a04      	ldr	r2, [pc, #16]	; (8001804 <__NVIC_SetPriorityGrouping+0x44>)
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	60d3      	str	r3, [r2, #12]
}
 80017f8:	bf00      	nop
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800180c:	4b04      	ldr	r3, [pc, #16]	; (8001820 <__NVIC_GetPriorityGrouping+0x18>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	0a1b      	lsrs	r3, r3, #8
 8001812:	f003 0307 	and.w	r3, r3, #7
}
 8001816:	4618      	mov	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	2b00      	cmp	r3, #0
 8001834:	db0b      	blt.n	800184e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	f003 021f 	and.w	r2, r3, #31
 800183c:	4907      	ldr	r1, [pc, #28]	; (800185c <__NVIC_EnableIRQ+0x38>)
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	095b      	lsrs	r3, r3, #5
 8001844:	2001      	movs	r0, #1
 8001846:	fa00 f202 	lsl.w	r2, r0, r2
 800184a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	e000e100 	.word	0xe000e100

08001860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	6039      	str	r1, [r7, #0]
 800186a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001870:	2b00      	cmp	r3, #0
 8001872:	db0a      	blt.n	800188a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	b2da      	uxtb	r2, r3
 8001878:	490c      	ldr	r1, [pc, #48]	; (80018ac <__NVIC_SetPriority+0x4c>)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	0112      	lsls	r2, r2, #4
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	440b      	add	r3, r1
 8001884:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001888:	e00a      	b.n	80018a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4908      	ldr	r1, [pc, #32]	; (80018b0 <__NVIC_SetPriority+0x50>)
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	3b04      	subs	r3, #4
 8001898:	0112      	lsls	r2, r2, #4
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	440b      	add	r3, r1
 800189e:	761a      	strb	r2, [r3, #24]
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000e100 	.word	0xe000e100
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b089      	sub	sp, #36	; 0x24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f1c3 0307 	rsb	r3, r3, #7
 80018ce:	2b04      	cmp	r3, #4
 80018d0:	bf28      	it	cs
 80018d2:	2304      	movcs	r3, #4
 80018d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3304      	adds	r3, #4
 80018da:	2b06      	cmp	r3, #6
 80018dc:	d902      	bls.n	80018e4 <NVIC_EncodePriority+0x30>
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3b03      	subs	r3, #3
 80018e2:	e000      	b.n	80018e6 <NVIC_EncodePriority+0x32>
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43da      	mvns	r2, r3
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	401a      	ands	r2, r3
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	fa01 f303 	lsl.w	r3, r1, r3
 8001906:	43d9      	mvns	r1, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800190c:	4313      	orrs	r3, r2
         );
}
 800190e:	4618      	mov	r0, r3
 8001910:	3724      	adds	r7, #36	; 0x24
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
	...

0800191c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3b01      	subs	r3, #1
 8001928:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800192c:	d301      	bcc.n	8001932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800192e:	2301      	movs	r3, #1
 8001930:	e00f      	b.n	8001952 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001932:	4a0a      	ldr	r2, [pc, #40]	; (800195c <SysTick_Config+0x40>)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3b01      	subs	r3, #1
 8001938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800193a:	210f      	movs	r1, #15
 800193c:	f04f 30ff 	mov.w	r0, #4294967295
 8001940:	f7ff ff8e 	bl	8001860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001944:	4b05      	ldr	r3, [pc, #20]	; (800195c <SysTick_Config+0x40>)
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800194a:	4b04      	ldr	r3, [pc, #16]	; (800195c <SysTick_Config+0x40>)
 800194c:	2207      	movs	r2, #7
 800194e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	e000e010 	.word	0xe000e010

08001960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7ff ff29 	bl	80017c0 <__NVIC_SetPriorityGrouping>
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001976:	b580      	push	{r7, lr}
 8001978:	b086      	sub	sp, #24
 800197a:	af00      	add	r7, sp, #0
 800197c:	4603      	mov	r3, r0
 800197e:	60b9      	str	r1, [r7, #8]
 8001980:	607a      	str	r2, [r7, #4]
 8001982:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001988:	f7ff ff3e 	bl	8001808 <__NVIC_GetPriorityGrouping>
 800198c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	68b9      	ldr	r1, [r7, #8]
 8001992:	6978      	ldr	r0, [r7, #20]
 8001994:	f7ff ff8e 	bl	80018b4 <NVIC_EncodePriority>
 8001998:	4602      	mov	r2, r0
 800199a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800199e:	4611      	mov	r1, r2
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff5d 	bl	8001860 <__NVIC_SetPriority>
}
 80019a6:	bf00      	nop
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	4603      	mov	r3, r0
 80019b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff31 	bl	8001824 <__NVIC_EnableIRQ>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff ffa2 	bl	800191c <SysTick_Config>
 80019d8:	4603      	mov	r3, r0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019f0:	f7ff fac2 	bl	8000f78 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e099      	b.n	8001b34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f022 0201 	bic.w	r2, r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a20:	e00f      	b.n	8001a42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a22:	f7ff faa9 	bl	8000f78 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b05      	cmp	r3, #5
 8001a2e:	d908      	bls.n	8001a42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2220      	movs	r2, #32
 8001a34:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2203      	movs	r2, #3
 8001a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e078      	b.n	8001b34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1e8      	bne.n	8001a22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	4b38      	ldr	r3, [pc, #224]	; (8001b3c <HAL_DMA_Init+0x158>)
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	d107      	bne.n	8001aac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	f023 0307 	bic.w	r3, r3, #7
 8001ac2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	d117      	bne.n	8001b06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d00e      	beq.n	8001b06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 fa91 	bl	8002010 <DMA_CheckFifoParam>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d008      	beq.n	8001b06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2240      	movs	r2, #64	; 0x40
 8001af8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b02:	2301      	movs	r3, #1
 8001b04:	e016      	b.n	8001b34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 fa48 	bl	8001fa4 <DMA_CalcBaseAndBitshift>
 8001b14:	4603      	mov	r3, r0
 8001b16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b1c:	223f      	movs	r2, #63	; 0x3f
 8001b1e:	409a      	lsls	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	f010803f 	.word	0xf010803f

08001b40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
 8001b4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d101      	bne.n	8001b66 <HAL_DMA_Start_IT+0x26>
 8001b62:	2302      	movs	r3, #2
 8001b64:	e040      	b.n	8001be8 <HAL_DMA_Start_IT+0xa8>
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d12f      	bne.n	8001bda <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2202      	movs	r2, #2
 8001b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	68b9      	ldr	r1, [r7, #8]
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f000 f9da 	bl	8001f48 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b98:	223f      	movs	r2, #63	; 0x3f
 8001b9a:	409a      	lsls	r2, r3
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f042 0216 	orr.w	r2, r2, #22
 8001bae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d007      	beq.n	8001bc8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f042 0208 	orr.w	r2, r2, #8
 8001bc6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f042 0201 	orr.w	r2, r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	e005      	b.n	8001be6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001be2:	2302      	movs	r3, #2
 8001be4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d004      	beq.n	8001c0e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2280      	movs	r2, #128	; 0x80
 8001c08:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e00c      	b.n	8001c28 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2205      	movs	r2, #5
 8001c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 0201 	bic.w	r2, r2, #1
 8001c24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c40:	4b8e      	ldr	r3, [pc, #568]	; (8001e7c <HAL_DMA_IRQHandler+0x248>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a8e      	ldr	r2, [pc, #568]	; (8001e80 <HAL_DMA_IRQHandler+0x24c>)
 8001c46:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4a:	0a9b      	lsrs	r3, r3, #10
 8001c4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5e:	2208      	movs	r2, #8
 8001c60:	409a      	lsls	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4013      	ands	r3, r2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d01a      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d013      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f022 0204 	bic.w	r2, r2, #4
 8001c86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8c:	2208      	movs	r2, #8
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c98:	f043 0201 	orr.w	r2, r3, #1
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	409a      	lsls	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4013      	ands	r3, r2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d012      	beq.n	8001cd6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00b      	beq.n	8001cd6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cce:	f043 0202 	orr.w	r2, r3, #2
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cda:	2204      	movs	r2, #4
 8001cdc:	409a      	lsls	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d012      	beq.n	8001d0c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00b      	beq.n	8001d0c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf8:	2204      	movs	r2, #4
 8001cfa:	409a      	lsls	r2, r3
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d04:	f043 0204 	orr.w	r2, r3, #4
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d10:	2210      	movs	r2, #16
 8001d12:	409a      	lsls	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4013      	ands	r3, r2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d043      	beq.n	8001da4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0308 	and.w	r3, r3, #8
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d03c      	beq.n	8001da4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2e:	2210      	movs	r2, #16
 8001d30:	409a      	lsls	r2, r3
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d018      	beq.n	8001d76 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d108      	bne.n	8001d64 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d024      	beq.n	8001da4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	4798      	blx	r3
 8001d62:	e01f      	b.n	8001da4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d01b      	beq.n	8001da4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	4798      	blx	r3
 8001d74:	e016      	b.n	8001da4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d107      	bne.n	8001d94 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 0208 	bic.w	r2, r2, #8
 8001d92:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da8:	2220      	movs	r2, #32
 8001daa:	409a      	lsls	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4013      	ands	r3, r2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f000 808f 	beq.w	8001ed4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0310 	and.w	r3, r3, #16
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 8087 	beq.w	8001ed4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dca:	2220      	movs	r2, #32
 8001dcc:	409a      	lsls	r2, r3
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b05      	cmp	r3, #5
 8001ddc:	d136      	bne.n	8001e4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 0216 	bic.w	r2, r2, #22
 8001dec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	695a      	ldr	r2, [r3, #20]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dfc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d103      	bne.n	8001e0e <HAL_DMA_IRQHandler+0x1da>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d007      	beq.n	8001e1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 0208 	bic.w	r2, r2, #8
 8001e1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e22:	223f      	movs	r2, #63	; 0x3f
 8001e24:	409a      	lsls	r2, r3
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d07e      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	4798      	blx	r3
        }
        return;
 8001e4a:	e079      	b.n	8001f40 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d01d      	beq.n	8001e96 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10d      	bne.n	8001e84 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d031      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	4798      	blx	r3
 8001e78:	e02c      	b.n	8001ed4 <HAL_DMA_IRQHandler+0x2a0>
 8001e7a:	bf00      	nop
 8001e7c:	20000008 	.word	0x20000008
 8001e80:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d023      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	4798      	blx	r3
 8001e94:	e01e      	b.n	8001ed4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10f      	bne.n	8001ec4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0210 	bic.w	r2, r2, #16
 8001eb2:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d032      	beq.n	8001f42 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d022      	beq.n	8001f2e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2205      	movs	r2, #5
 8001eec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 0201 	bic.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	3301      	adds	r3, #1
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d307      	bcc.n	8001f1c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f2      	bne.n	8001f00 <HAL_DMA_IRQHandler+0x2cc>
 8001f1a:	e000      	b.n	8001f1e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f1c:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d005      	beq.n	8001f42 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	4798      	blx	r3
 8001f3e:	e000      	b.n	8001f42 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f40:	bf00      	nop
    }
  }
}
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
 8001f54:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f64:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2b40      	cmp	r3, #64	; 0x40
 8001f74:	d108      	bne.n	8001f88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f86:	e007      	b.n	8001f98 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68ba      	ldr	r2, [r7, #8]
 8001f8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	60da      	str	r2, [r3, #12]
}
 8001f98:	bf00      	nop
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	3b10      	subs	r3, #16
 8001fb4:	4a14      	ldr	r2, [pc, #80]	; (8002008 <DMA_CalcBaseAndBitshift+0x64>)
 8001fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fba:	091b      	lsrs	r3, r3, #4
 8001fbc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001fbe:	4a13      	ldr	r2, [pc, #76]	; (800200c <DMA_CalcBaseAndBitshift+0x68>)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	d909      	bls.n	8001fe6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fda:	f023 0303 	bic.w	r3, r3, #3
 8001fde:	1d1a      	adds	r2, r3, #4
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	659a      	str	r2, [r3, #88]	; 0x58
 8001fe4:	e007      	b.n	8001ff6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fee:	f023 0303 	bic.w	r3, r3, #3
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	aaaaaaab 	.word	0xaaaaaaab
 800200c:	0800aec4 	.word	0x0800aec4

08002010 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002018:	2300      	movs	r3, #0
 800201a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002020:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d11f      	bne.n	800206a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	2b03      	cmp	r3, #3
 800202e:	d856      	bhi.n	80020de <DMA_CheckFifoParam+0xce>
 8002030:	a201      	add	r2, pc, #4	; (adr r2, 8002038 <DMA_CheckFifoParam+0x28>)
 8002032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002036:	bf00      	nop
 8002038:	08002049 	.word	0x08002049
 800203c:	0800205b 	.word	0x0800205b
 8002040:	08002049 	.word	0x08002049
 8002044:	080020df 	.word	0x080020df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d046      	beq.n	80020e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002058:	e043      	b.n	80020e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002062:	d140      	bne.n	80020e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002068:	e03d      	b.n	80020e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002072:	d121      	bne.n	80020b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	2b03      	cmp	r3, #3
 8002078:	d837      	bhi.n	80020ea <DMA_CheckFifoParam+0xda>
 800207a:	a201      	add	r2, pc, #4	; (adr r2, 8002080 <DMA_CheckFifoParam+0x70>)
 800207c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002080:	08002091 	.word	0x08002091
 8002084:	08002097 	.word	0x08002097
 8002088:	08002091 	.word	0x08002091
 800208c:	080020a9 	.word	0x080020a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	73fb      	strb	r3, [r7, #15]
      break;
 8002094:	e030      	b.n	80020f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d025      	beq.n	80020ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020a6:	e022      	b.n	80020ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020b0:	d11f      	bne.n	80020f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020b6:	e01c      	b.n	80020f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d903      	bls.n	80020c6 <DMA_CheckFifoParam+0xb6>
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	2b03      	cmp	r3, #3
 80020c2:	d003      	beq.n	80020cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020c4:	e018      	b.n	80020f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	73fb      	strb	r3, [r7, #15]
      break;
 80020ca:	e015      	b.n	80020f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00e      	beq.n	80020f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	73fb      	strb	r3, [r7, #15]
      break;
 80020dc:	e00b      	b.n	80020f6 <DMA_CheckFifoParam+0xe6>
      break;
 80020de:	bf00      	nop
 80020e0:	e00a      	b.n	80020f8 <DMA_CheckFifoParam+0xe8>
      break;
 80020e2:	bf00      	nop
 80020e4:	e008      	b.n	80020f8 <DMA_CheckFifoParam+0xe8>
      break;
 80020e6:	bf00      	nop
 80020e8:	e006      	b.n	80020f8 <DMA_CheckFifoParam+0xe8>
      break;
 80020ea:	bf00      	nop
 80020ec:	e004      	b.n	80020f8 <DMA_CheckFifoParam+0xe8>
      break;
 80020ee:	bf00      	nop
 80020f0:	e002      	b.n	80020f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80020f2:	bf00      	nop
 80020f4:	e000      	b.n	80020f8 <DMA_CheckFifoParam+0xe8>
      break;
 80020f6:	bf00      	nop
    }
  } 
  
  return status; 
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop

08002108 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002108:	b480      	push	{r7}
 800210a:	b089      	sub	sp, #36	; 0x24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002116:	2300      	movs	r3, #0
 8002118:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800211a:	2300      	movs	r3, #0
 800211c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800211e:	2300      	movs	r3, #0
 8002120:	61fb      	str	r3, [r7, #28]
 8002122:	e16b      	b.n	80023fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002124:	2201      	movs	r2, #1
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	4013      	ands	r3, r2
 8002136:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	429a      	cmp	r2, r3
 800213e:	f040 815a 	bne.w	80023f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d00b      	beq.n	8002162 <HAL_GPIO_Init+0x5a>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b02      	cmp	r3, #2
 8002150:	d007      	beq.n	8002162 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002156:	2b11      	cmp	r3, #17
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b12      	cmp	r3, #18
 8002160:	d130      	bne.n	80021c4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	2203      	movs	r2, #3
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4013      	ands	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4313      	orrs	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002198:	2201      	movs	r2, #1
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	f003 0201 	and.w	r2, r3, #1
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	2203      	movs	r2, #3
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4013      	ands	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d003      	beq.n	8002204 <HAL_GPIO_Init+0xfc>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b12      	cmp	r3, #18
 8002202:	d123      	bne.n	800224c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	08da      	lsrs	r2, r3, #3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3208      	adds	r2, #8
 800220c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002210:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	220f      	movs	r2, #15
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	691a      	ldr	r2, [r3, #16]
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	08da      	lsrs	r2, r3, #3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	3208      	adds	r2, #8
 8002246:	69b9      	ldr	r1, [r7, #24]
 8002248:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	2203      	movs	r2, #3
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f003 0203 	and.w	r2, r3, #3
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4313      	orrs	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 80b4 	beq.w	80023f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	4b60      	ldr	r3, [pc, #384]	; (8002414 <HAL_GPIO_Init+0x30c>)
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	4a5f      	ldr	r2, [pc, #380]	; (8002414 <HAL_GPIO_Init+0x30c>)
 8002298:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800229c:	6453      	str	r3, [r2, #68]	; 0x44
 800229e:	4b5d      	ldr	r3, [pc, #372]	; (8002414 <HAL_GPIO_Init+0x30c>)
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022aa:	4a5b      	ldr	r2, [pc, #364]	; (8002418 <HAL_GPIO_Init+0x310>)
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	089b      	lsrs	r3, r3, #2
 80022b0:	3302      	adds	r3, #2
 80022b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	220f      	movs	r2, #15
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43db      	mvns	r3, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4013      	ands	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a52      	ldr	r2, [pc, #328]	; (800241c <HAL_GPIO_Init+0x314>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d02b      	beq.n	800232e <HAL_GPIO_Init+0x226>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a51      	ldr	r2, [pc, #324]	; (8002420 <HAL_GPIO_Init+0x318>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d025      	beq.n	800232a <HAL_GPIO_Init+0x222>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a50      	ldr	r2, [pc, #320]	; (8002424 <HAL_GPIO_Init+0x31c>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d01f      	beq.n	8002326 <HAL_GPIO_Init+0x21e>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a4f      	ldr	r2, [pc, #316]	; (8002428 <HAL_GPIO_Init+0x320>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d019      	beq.n	8002322 <HAL_GPIO_Init+0x21a>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a4e      	ldr	r2, [pc, #312]	; (800242c <HAL_GPIO_Init+0x324>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d013      	beq.n	800231e <HAL_GPIO_Init+0x216>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a4d      	ldr	r2, [pc, #308]	; (8002430 <HAL_GPIO_Init+0x328>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d00d      	beq.n	800231a <HAL_GPIO_Init+0x212>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a4c      	ldr	r2, [pc, #304]	; (8002434 <HAL_GPIO_Init+0x32c>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d007      	beq.n	8002316 <HAL_GPIO_Init+0x20e>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a4b      	ldr	r2, [pc, #300]	; (8002438 <HAL_GPIO_Init+0x330>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d101      	bne.n	8002312 <HAL_GPIO_Init+0x20a>
 800230e:	2307      	movs	r3, #7
 8002310:	e00e      	b.n	8002330 <HAL_GPIO_Init+0x228>
 8002312:	2308      	movs	r3, #8
 8002314:	e00c      	b.n	8002330 <HAL_GPIO_Init+0x228>
 8002316:	2306      	movs	r3, #6
 8002318:	e00a      	b.n	8002330 <HAL_GPIO_Init+0x228>
 800231a:	2305      	movs	r3, #5
 800231c:	e008      	b.n	8002330 <HAL_GPIO_Init+0x228>
 800231e:	2304      	movs	r3, #4
 8002320:	e006      	b.n	8002330 <HAL_GPIO_Init+0x228>
 8002322:	2303      	movs	r3, #3
 8002324:	e004      	b.n	8002330 <HAL_GPIO_Init+0x228>
 8002326:	2302      	movs	r3, #2
 8002328:	e002      	b.n	8002330 <HAL_GPIO_Init+0x228>
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <HAL_GPIO_Init+0x228>
 800232e:	2300      	movs	r3, #0
 8002330:	69fa      	ldr	r2, [r7, #28]
 8002332:	f002 0203 	and.w	r2, r2, #3
 8002336:	0092      	lsls	r2, r2, #2
 8002338:	4093      	lsls	r3, r2
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4313      	orrs	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002340:	4935      	ldr	r1, [pc, #212]	; (8002418 <HAL_GPIO_Init+0x310>)
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	089b      	lsrs	r3, r3, #2
 8002346:	3302      	adds	r3, #2
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800234e:	4b3b      	ldr	r3, [pc, #236]	; (800243c <HAL_GPIO_Init+0x334>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	43db      	mvns	r3, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4013      	ands	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4313      	orrs	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002372:	4a32      	ldr	r2, [pc, #200]	; (800243c <HAL_GPIO_Init+0x334>)
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002378:	4b30      	ldr	r3, [pc, #192]	; (800243c <HAL_GPIO_Init+0x334>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800239c:	4a27      	ldr	r2, [pc, #156]	; (800243c <HAL_GPIO_Init+0x334>)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023a2:	4b26      	ldr	r3, [pc, #152]	; (800243c <HAL_GPIO_Init+0x334>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	43db      	mvns	r3, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4013      	ands	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023c6:	4a1d      	ldr	r2, [pc, #116]	; (800243c <HAL_GPIO_Init+0x334>)
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023cc:	4b1b      	ldr	r3, [pc, #108]	; (800243c <HAL_GPIO_Init+0x334>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023f0:	4a12      	ldr	r2, [pc, #72]	; (800243c <HAL_GPIO_Init+0x334>)
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	3301      	adds	r3, #1
 80023fa:	61fb      	str	r3, [r7, #28]
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	2b0f      	cmp	r3, #15
 8002400:	f67f ae90 	bls.w	8002124 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002404:	bf00      	nop
 8002406:	bf00      	nop
 8002408:	3724      	adds	r7, #36	; 0x24
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40023800 	.word	0x40023800
 8002418:	40013800 	.word	0x40013800
 800241c:	40020000 	.word	0x40020000
 8002420:	40020400 	.word	0x40020400
 8002424:	40020800 	.word	0x40020800
 8002428:	40020c00 	.word	0x40020c00
 800242c:	40021000 	.word	0x40021000
 8002430:	40021400 	.word	0x40021400
 8002434:	40021800 	.word	0x40021800
 8002438:	40021c00 	.word	0x40021c00
 800243c:	40013c00 	.word	0x40013c00

08002440 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e12b      	b.n	80026aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d106      	bne.n	800246c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f004 fa4c 	bl	8006904 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2224      	movs	r2, #36	; 0x24
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0201 	bic.w	r2, r2, #1
 8002482:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002492:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024a4:	f000 fd76 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 80024a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	4a81      	ldr	r2, [pc, #516]	; (80026b4 <HAL_I2C_Init+0x274>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d807      	bhi.n	80024c4 <HAL_I2C_Init+0x84>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4a80      	ldr	r2, [pc, #512]	; (80026b8 <HAL_I2C_Init+0x278>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	bf94      	ite	ls
 80024bc:	2301      	movls	r3, #1
 80024be:	2300      	movhi	r3, #0
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	e006      	b.n	80024d2 <HAL_I2C_Init+0x92>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4a7d      	ldr	r2, [pc, #500]	; (80026bc <HAL_I2C_Init+0x27c>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	bf94      	ite	ls
 80024cc:	2301      	movls	r3, #1
 80024ce:	2300      	movhi	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e0e7      	b.n	80026aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	4a78      	ldr	r2, [pc, #480]	; (80026c0 <HAL_I2C_Init+0x280>)
 80024de:	fba2 2303 	umull	r2, r3, r2, r3
 80024e2:	0c9b      	lsrs	r3, r3, #18
 80024e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68ba      	ldr	r2, [r7, #8]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	4a6a      	ldr	r2, [pc, #424]	; (80026b4 <HAL_I2C_Init+0x274>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d802      	bhi.n	8002514 <HAL_I2C_Init+0xd4>
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	3301      	adds	r3, #1
 8002512:	e009      	b.n	8002528 <HAL_I2C_Init+0xe8>
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800251a:	fb02 f303 	mul.w	r3, r2, r3
 800251e:	4a69      	ldr	r2, [pc, #420]	; (80026c4 <HAL_I2C_Init+0x284>)
 8002520:	fba2 2303 	umull	r2, r3, r2, r3
 8002524:	099b      	lsrs	r3, r3, #6
 8002526:	3301      	adds	r3, #1
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	430b      	orrs	r3, r1
 800252e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800253a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	495c      	ldr	r1, [pc, #368]	; (80026b4 <HAL_I2C_Init+0x274>)
 8002544:	428b      	cmp	r3, r1
 8002546:	d819      	bhi.n	800257c <HAL_I2C_Init+0x13c>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	1e59      	subs	r1, r3, #1
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	fbb1 f3f3 	udiv	r3, r1, r3
 8002556:	1c59      	adds	r1, r3, #1
 8002558:	f640 73fc 	movw	r3, #4092	; 0xffc
 800255c:	400b      	ands	r3, r1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00a      	beq.n	8002578 <HAL_I2C_Init+0x138>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	1e59      	subs	r1, r3, #1
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002570:	3301      	adds	r3, #1
 8002572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002576:	e051      	b.n	800261c <HAL_I2C_Init+0x1dc>
 8002578:	2304      	movs	r3, #4
 800257a:	e04f      	b.n	800261c <HAL_I2C_Init+0x1dc>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d111      	bne.n	80025a8 <HAL_I2C_Init+0x168>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	1e58      	subs	r0, r3, #1
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6859      	ldr	r1, [r3, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	440b      	add	r3, r1
 8002592:	fbb0 f3f3 	udiv	r3, r0, r3
 8002596:	3301      	adds	r3, #1
 8002598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800259c:	2b00      	cmp	r3, #0
 800259e:	bf0c      	ite	eq
 80025a0:	2301      	moveq	r3, #1
 80025a2:	2300      	movne	r3, #0
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	e012      	b.n	80025ce <HAL_I2C_Init+0x18e>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	1e58      	subs	r0, r3, #1
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6859      	ldr	r1, [r3, #4]
 80025b0:	460b      	mov	r3, r1
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	0099      	lsls	r1, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80025be:	3301      	adds	r3, #1
 80025c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	bf0c      	ite	eq
 80025c8:	2301      	moveq	r3, #1
 80025ca:	2300      	movne	r3, #0
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_I2C_Init+0x196>
 80025d2:	2301      	movs	r3, #1
 80025d4:	e022      	b.n	800261c <HAL_I2C_Init+0x1dc>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10e      	bne.n	80025fc <HAL_I2C_Init+0x1bc>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	1e58      	subs	r0, r3, #1
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6859      	ldr	r1, [r3, #4]
 80025e6:	460b      	mov	r3, r1
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	440b      	add	r3, r1
 80025ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80025f0:	3301      	adds	r3, #1
 80025f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025fa:	e00f      	b.n	800261c <HAL_I2C_Init+0x1dc>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	1e58      	subs	r0, r3, #1
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6859      	ldr	r1, [r3, #4]
 8002604:	460b      	mov	r3, r1
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	0099      	lsls	r1, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002612:	3301      	adds	r3, #1
 8002614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002618:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	6809      	ldr	r1, [r1, #0]
 8002620:	4313      	orrs	r3, r2
 8002622:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69da      	ldr	r2, [r3, #28]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	431a      	orrs	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800264a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	6911      	ldr	r1, [r2, #16]
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	68d2      	ldr	r2, [r2, #12]
 8002656:	4311      	orrs	r1, r2
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6812      	ldr	r2, [r2, #0]
 800265c:	430b      	orrs	r3, r1
 800265e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	695a      	ldr	r2, [r3, #20]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 0201 	orr.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2220      	movs	r2, #32
 8002696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	000186a0 	.word	0x000186a0
 80026b8:	001e847f 	.word	0x001e847f
 80026bc:	003d08ff 	.word	0x003d08ff
 80026c0:	431bde83 	.word	0x431bde83
 80026c4:	10624dd3 	.word	0x10624dd3

080026c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e25e      	b.n	8002b98 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d075      	beq.n	80027d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026e6:	4b88      	ldr	r3, [pc, #544]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 030c 	and.w	r3, r3, #12
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d00c      	beq.n	800270c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026f2:	4b85      	ldr	r3, [pc, #532]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026fa:	2b08      	cmp	r3, #8
 80026fc:	d112      	bne.n	8002724 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026fe:	4b82      	ldr	r3, [pc, #520]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002706:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800270a:	d10b      	bne.n	8002724 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800270c:	4b7e      	ldr	r3, [pc, #504]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d05b      	beq.n	80027d0 <HAL_RCC_OscConfig+0x108>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d157      	bne.n	80027d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e239      	b.n	8002b98 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800272c:	d106      	bne.n	800273c <HAL_RCC_OscConfig+0x74>
 800272e:	4b76      	ldr	r3, [pc, #472]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a75      	ldr	r2, [pc, #468]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	e01d      	b.n	8002778 <HAL_RCC_OscConfig+0xb0>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002744:	d10c      	bne.n	8002760 <HAL_RCC_OscConfig+0x98>
 8002746:	4b70      	ldr	r3, [pc, #448]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a6f      	ldr	r2, [pc, #444]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 800274c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	4b6d      	ldr	r3, [pc, #436]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a6c      	ldr	r2, [pc, #432]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	e00b      	b.n	8002778 <HAL_RCC_OscConfig+0xb0>
 8002760:	4b69      	ldr	r3, [pc, #420]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a68      	ldr	r2, [pc, #416]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800276a:	6013      	str	r3, [r2, #0]
 800276c:	4b66      	ldr	r3, [pc, #408]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a65      	ldr	r2, [pc, #404]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d013      	beq.n	80027a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002780:	f7fe fbfa 	bl	8000f78 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002788:	f7fe fbf6 	bl	8000f78 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b64      	cmp	r3, #100	; 0x64
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e1fe      	b.n	8002b98 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279a:	4b5b      	ldr	r3, [pc, #364]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0f0      	beq.n	8002788 <HAL_RCC_OscConfig+0xc0>
 80027a6:	e014      	b.n	80027d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a8:	f7fe fbe6 	bl	8000f78 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027b0:	f7fe fbe2 	bl	8000f78 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b64      	cmp	r3, #100	; 0x64
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e1ea      	b.n	8002b98 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027c2:	4b51      	ldr	r3, [pc, #324]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f0      	bne.n	80027b0 <HAL_RCC_OscConfig+0xe8>
 80027ce:	e000      	b.n	80027d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d063      	beq.n	80028a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027de:	4b4a      	ldr	r3, [pc, #296]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 030c 	and.w	r3, r3, #12
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00b      	beq.n	8002802 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ea:	4b47      	ldr	r3, [pc, #284]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027f2:	2b08      	cmp	r3, #8
 80027f4:	d11c      	bne.n	8002830 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027f6:	4b44      	ldr	r3, [pc, #272]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d116      	bne.n	8002830 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002802:	4b41      	ldr	r3, [pc, #260]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d005      	beq.n	800281a <HAL_RCC_OscConfig+0x152>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d001      	beq.n	800281a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e1be      	b.n	8002b98 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281a:	4b3b      	ldr	r3, [pc, #236]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	4937      	ldr	r1, [pc, #220]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 800282a:	4313      	orrs	r3, r2
 800282c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800282e:	e03a      	b.n	80028a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d020      	beq.n	800287a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002838:	4b34      	ldr	r3, [pc, #208]	; (800290c <HAL_RCC_OscConfig+0x244>)
 800283a:	2201      	movs	r2, #1
 800283c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283e:	f7fe fb9b 	bl	8000f78 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002846:	f7fe fb97 	bl	8000f78 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e19f      	b.n	8002b98 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002858:	4b2b      	ldr	r3, [pc, #172]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0f0      	beq.n	8002846 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002864:	4b28      	ldr	r3, [pc, #160]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	4925      	ldr	r1, [pc, #148]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002874:	4313      	orrs	r3, r2
 8002876:	600b      	str	r3, [r1, #0]
 8002878:	e015      	b.n	80028a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800287a:	4b24      	ldr	r3, [pc, #144]	; (800290c <HAL_RCC_OscConfig+0x244>)
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002880:	f7fe fb7a 	bl	8000f78 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002888:	f7fe fb76 	bl	8000f78 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e17e      	b.n	8002b98 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800289a:	4b1b      	ldr	r3, [pc, #108]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f0      	bne.n	8002888 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0308 	and.w	r3, r3, #8
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d036      	beq.n	8002920 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d016      	beq.n	80028e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ba:	4b15      	ldr	r3, [pc, #84]	; (8002910 <HAL_RCC_OscConfig+0x248>)
 80028bc:	2201      	movs	r2, #1
 80028be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c0:	f7fe fb5a 	bl	8000f78 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028c8:	f7fe fb56 	bl	8000f78 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e15e      	b.n	8002b98 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028da:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 80028dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCC_OscConfig+0x200>
 80028e6:	e01b      	b.n	8002920 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028e8:	4b09      	ldr	r3, [pc, #36]	; (8002910 <HAL_RCC_OscConfig+0x248>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ee:	f7fe fb43 	bl	8000f78 <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f4:	e00e      	b.n	8002914 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028f6:	f7fe fb3f 	bl	8000f78 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d907      	bls.n	8002914 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e147      	b.n	8002b98 <HAL_RCC_OscConfig+0x4d0>
 8002908:	40023800 	.word	0x40023800
 800290c:	42470000 	.word	0x42470000
 8002910:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002914:	4b88      	ldr	r3, [pc, #544]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1ea      	bne.n	80028f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 8097 	beq.w	8002a5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800292e:	2300      	movs	r3, #0
 8002930:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002932:	4b81      	ldr	r3, [pc, #516]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10f      	bne.n	800295e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	4b7d      	ldr	r3, [pc, #500]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	4a7c      	ldr	r2, [pc, #496]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800294c:	6413      	str	r3, [r2, #64]	; 0x40
 800294e:	4b7a      	ldr	r3, [pc, #488]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002956:	60bb      	str	r3, [r7, #8]
 8002958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800295a:	2301      	movs	r3, #1
 800295c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800295e:	4b77      	ldr	r3, [pc, #476]	; (8002b3c <HAL_RCC_OscConfig+0x474>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002966:	2b00      	cmp	r3, #0
 8002968:	d118      	bne.n	800299c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800296a:	4b74      	ldr	r3, [pc, #464]	; (8002b3c <HAL_RCC_OscConfig+0x474>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a73      	ldr	r2, [pc, #460]	; (8002b3c <HAL_RCC_OscConfig+0x474>)
 8002970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002976:	f7fe faff 	bl	8000f78 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800297e:	f7fe fafb 	bl	8000f78 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e103      	b.n	8002b98 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002990:	4b6a      	ldr	r3, [pc, #424]	; (8002b3c <HAL_RCC_OscConfig+0x474>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0f0      	beq.n	800297e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d106      	bne.n	80029b2 <HAL_RCC_OscConfig+0x2ea>
 80029a4:	4b64      	ldr	r3, [pc, #400]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a8:	4a63      	ldr	r2, [pc, #396]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	6713      	str	r3, [r2, #112]	; 0x70
 80029b0:	e01c      	b.n	80029ec <HAL_RCC_OscConfig+0x324>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	2b05      	cmp	r3, #5
 80029b8:	d10c      	bne.n	80029d4 <HAL_RCC_OscConfig+0x30c>
 80029ba:	4b5f      	ldr	r3, [pc, #380]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029be:	4a5e      	ldr	r2, [pc, #376]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029c0:	f043 0304 	orr.w	r3, r3, #4
 80029c4:	6713      	str	r3, [r2, #112]	; 0x70
 80029c6:	4b5c      	ldr	r3, [pc, #368]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ca:	4a5b      	ldr	r2, [pc, #364]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	6713      	str	r3, [r2, #112]	; 0x70
 80029d2:	e00b      	b.n	80029ec <HAL_RCC_OscConfig+0x324>
 80029d4:	4b58      	ldr	r3, [pc, #352]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d8:	4a57      	ldr	r2, [pc, #348]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029da:	f023 0301 	bic.w	r3, r3, #1
 80029de:	6713      	str	r3, [r2, #112]	; 0x70
 80029e0:	4b55      	ldr	r3, [pc, #340]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e4:	4a54      	ldr	r2, [pc, #336]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029e6:	f023 0304 	bic.w	r3, r3, #4
 80029ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d015      	beq.n	8002a20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f4:	f7fe fac0 	bl	8000f78 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029fa:	e00a      	b.n	8002a12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029fc:	f7fe fabc 	bl	8000f78 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e0c2      	b.n	8002b98 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a12:	4b49      	ldr	r3, [pc, #292]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0ee      	beq.n	80029fc <HAL_RCC_OscConfig+0x334>
 8002a1e:	e014      	b.n	8002a4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a20:	f7fe faaa 	bl	8000f78 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a26:	e00a      	b.n	8002a3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a28:	f7fe faa6 	bl	8000f78 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e0ac      	b.n	8002b98 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a3e:	4b3e      	ldr	r3, [pc, #248]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1ee      	bne.n	8002a28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a4a:	7dfb      	ldrb	r3, [r7, #23]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d105      	bne.n	8002a5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a50:	4b39      	ldr	r3, [pc, #228]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	4a38      	ldr	r2, [pc, #224]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002a56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 8098 	beq.w	8002b96 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a66:	4b34      	ldr	r3, [pc, #208]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 030c 	and.w	r3, r3, #12
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d05c      	beq.n	8002b2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d141      	bne.n	8002afe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a7a:	4b31      	ldr	r3, [pc, #196]	; (8002b40 <HAL_RCC_OscConfig+0x478>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a80:	f7fe fa7a 	bl	8000f78 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a88:	f7fe fa76 	bl	8000f78 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e07e      	b.n	8002b98 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a9a:	4b27      	ldr	r3, [pc, #156]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f0      	bne.n	8002a88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69da      	ldr	r2, [r3, #28]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	019b      	lsls	r3, r3, #6
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abc:	085b      	lsrs	r3, r3, #1
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	041b      	lsls	r3, r3, #16
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac8:	061b      	lsls	r3, r3, #24
 8002aca:	491b      	ldr	r1, [pc, #108]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ad0:	4b1b      	ldr	r3, [pc, #108]	; (8002b40 <HAL_RCC_OscConfig+0x478>)
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad6:	f7fe fa4f 	bl	8000f78 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ade:	f7fe fa4b 	bl	8000f78 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e053      	b.n	8002b98 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af0:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0f0      	beq.n	8002ade <HAL_RCC_OscConfig+0x416>
 8002afc:	e04b      	b.n	8002b96 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002afe:	4b10      	ldr	r3, [pc, #64]	; (8002b40 <HAL_RCC_OscConfig+0x478>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b04:	f7fe fa38 	bl	8000f78 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b0c:	f7fe fa34 	bl	8000f78 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e03c      	b.n	8002b98 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b1e:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCC_OscConfig+0x444>
 8002b2a:	e034      	b.n	8002b96 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d107      	bne.n	8002b44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e02f      	b.n	8002b98 <HAL_RCC_OscConfig+0x4d0>
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	40007000 	.word	0x40007000
 8002b40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b44:	4b16      	ldr	r3, [pc, #88]	; (8002ba0 <HAL_RCC_OscConfig+0x4d8>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d11c      	bne.n	8002b92 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d115      	bne.n	8002b92 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d10d      	bne.n	8002b92 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d106      	bne.n	8002b92 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d001      	beq.n	8002b96 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3718      	adds	r7, #24
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40023800 	.word	0x40023800

08002ba4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e0cc      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bb8:	4b68      	ldr	r3, [pc, #416]	; (8002d5c <HAL_RCC_ClockConfig+0x1b8>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 030f 	and.w	r3, r3, #15
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d90c      	bls.n	8002be0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc6:	4b65      	ldr	r3, [pc, #404]	; (8002d5c <HAL_RCC_ClockConfig+0x1b8>)
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bce:	4b63      	ldr	r3, [pc, #396]	; (8002d5c <HAL_RCC_ClockConfig+0x1b8>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d001      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e0b8      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d020      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d005      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bf8:	4b59      	ldr	r3, [pc, #356]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	4a58      	ldr	r2, [pc, #352]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c10:	4b53      	ldr	r3, [pc, #332]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	4a52      	ldr	r2, [pc, #328]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c1c:	4b50      	ldr	r3, [pc, #320]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	494d      	ldr	r1, [pc, #308]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d044      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d107      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c42:	4b47      	ldr	r3, [pc, #284]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d119      	bne.n	8002c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e07f      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d003      	beq.n	8002c62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c5e:	2b03      	cmp	r3, #3
 8002c60:	d107      	bne.n	8002c72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c62:	4b3f      	ldr	r3, [pc, #252]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d109      	bne.n	8002c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e06f      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c72:	4b3b      	ldr	r3, [pc, #236]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e067      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c82:	4b37      	ldr	r3, [pc, #220]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f023 0203 	bic.w	r2, r3, #3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	4934      	ldr	r1, [pc, #208]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c94:	f7fe f970 	bl	8000f78 <HAL_GetTick>
 8002c98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9a:	e00a      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c9c:	f7fe f96c 	bl	8000f78 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e04f      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb2:	4b2b      	ldr	r3, [pc, #172]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 020c 	and.w	r2, r3, #12
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d1eb      	bne.n	8002c9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cc4:	4b25      	ldr	r3, [pc, #148]	; (8002d5c <HAL_RCC_ClockConfig+0x1b8>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 030f 	and.w	r3, r3, #15
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d20c      	bcs.n	8002cec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd2:	4b22      	ldr	r3, [pc, #136]	; (8002d5c <HAL_RCC_ClockConfig+0x1b8>)
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cda:	4b20      	ldr	r3, [pc, #128]	; (8002d5c <HAL_RCC_ClockConfig+0x1b8>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d001      	beq.n	8002cec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e032      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d008      	beq.n	8002d0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cf8:	4b19      	ldr	r3, [pc, #100]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	4916      	ldr	r1, [pc, #88]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d009      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d16:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	490e      	ldr	r1, [pc, #56]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d2a:	f000 f821 	bl	8002d70 <HAL_RCC_GetSysClockFreq>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	091b      	lsrs	r3, r3, #4
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	490a      	ldr	r1, [pc, #40]	; (8002d64 <HAL_RCC_ClockConfig+0x1c0>)
 8002d3c:	5ccb      	ldrb	r3, [r1, r3]
 8002d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d42:	4a09      	ldr	r2, [pc, #36]	; (8002d68 <HAL_RCC_ClockConfig+0x1c4>)
 8002d44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d46:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <HAL_RCC_ClockConfig+0x1c8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fe f8d0 	bl	8000ef0 <HAL_InitTick>

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40023c00 	.word	0x40023c00
 8002d60:	40023800 	.word	0x40023800
 8002d64:	0800af20 	.word	0x0800af20
 8002d68:	20000008 	.word	0x20000008
 8002d6c:	20000000 	.word	0x20000000

08002d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d74:	b094      	sub	sp, #80	; 0x50
 8002d76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	647b      	str	r3, [r7, #68]	; 0x44
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d80:	2300      	movs	r3, #0
 8002d82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d88:	4b79      	ldr	r3, [pc, #484]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 030c 	and.w	r3, r3, #12
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d00d      	beq.n	8002db0 <HAL_RCC_GetSysClockFreq+0x40>
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	f200 80e1 	bhi.w	8002f5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <HAL_RCC_GetSysClockFreq+0x34>
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d003      	beq.n	8002daa <HAL_RCC_GetSysClockFreq+0x3a>
 8002da2:	e0db      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002da4:	4b73      	ldr	r3, [pc, #460]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x204>)
 8002da6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002da8:	e0db      	b.n	8002f62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002daa:	4b73      	ldr	r3, [pc, #460]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x208>)
 8002dac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dae:	e0d8      	b.n	8002f62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002db0:	4b6f      	ldr	r3, [pc, #444]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002db8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dba:	4b6d      	ldr	r3, [pc, #436]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d063      	beq.n	8002e8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dc6:	4b6a      	ldr	r3, [pc, #424]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	099b      	lsrs	r3, r3, #6
 8002dcc:	2200      	movs	r2, #0
 8002dce:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dd0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dd8:	633b      	str	r3, [r7, #48]	; 0x30
 8002dda:	2300      	movs	r3, #0
 8002ddc:	637b      	str	r3, [r7, #52]	; 0x34
 8002dde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002de2:	4622      	mov	r2, r4
 8002de4:	462b      	mov	r3, r5
 8002de6:	f04f 0000 	mov.w	r0, #0
 8002dea:	f04f 0100 	mov.w	r1, #0
 8002dee:	0159      	lsls	r1, r3, #5
 8002df0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002df4:	0150      	lsls	r0, r2, #5
 8002df6:	4602      	mov	r2, r0
 8002df8:	460b      	mov	r3, r1
 8002dfa:	4621      	mov	r1, r4
 8002dfc:	1a51      	subs	r1, r2, r1
 8002dfe:	6139      	str	r1, [r7, #16]
 8002e00:	4629      	mov	r1, r5
 8002e02:	eb63 0301 	sbc.w	r3, r3, r1
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	f04f 0300 	mov.w	r3, #0
 8002e10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e14:	4659      	mov	r1, fp
 8002e16:	018b      	lsls	r3, r1, #6
 8002e18:	4651      	mov	r1, sl
 8002e1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e1e:	4651      	mov	r1, sl
 8002e20:	018a      	lsls	r2, r1, #6
 8002e22:	4651      	mov	r1, sl
 8002e24:	ebb2 0801 	subs.w	r8, r2, r1
 8002e28:	4659      	mov	r1, fp
 8002e2a:	eb63 0901 	sbc.w	r9, r3, r1
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e42:	4690      	mov	r8, r2
 8002e44:	4699      	mov	r9, r3
 8002e46:	4623      	mov	r3, r4
 8002e48:	eb18 0303 	adds.w	r3, r8, r3
 8002e4c:	60bb      	str	r3, [r7, #8]
 8002e4e:	462b      	mov	r3, r5
 8002e50:	eb49 0303 	adc.w	r3, r9, r3
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e62:	4629      	mov	r1, r5
 8002e64:	024b      	lsls	r3, r1, #9
 8002e66:	4621      	mov	r1, r4
 8002e68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e6c:	4621      	mov	r1, r4
 8002e6e:	024a      	lsls	r2, r1, #9
 8002e70:	4610      	mov	r0, r2
 8002e72:	4619      	mov	r1, r3
 8002e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e76:	2200      	movs	r2, #0
 8002e78:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e80:	f7fd fe92 	bl	8000ba8 <__aeabi_uldivmod>
 8002e84:	4602      	mov	r2, r0
 8002e86:	460b      	mov	r3, r1
 8002e88:	4613      	mov	r3, r2
 8002e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e8c:	e058      	b.n	8002f40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e8e:	4b38      	ldr	r3, [pc, #224]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	099b      	lsrs	r3, r3, #6
 8002e94:	2200      	movs	r2, #0
 8002e96:	4618      	mov	r0, r3
 8002e98:	4611      	mov	r1, r2
 8002e9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e9e:	623b      	str	r3, [r7, #32]
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ea8:	4642      	mov	r2, r8
 8002eaa:	464b      	mov	r3, r9
 8002eac:	f04f 0000 	mov.w	r0, #0
 8002eb0:	f04f 0100 	mov.w	r1, #0
 8002eb4:	0159      	lsls	r1, r3, #5
 8002eb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eba:	0150      	lsls	r0, r2, #5
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4641      	mov	r1, r8
 8002ec2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ec6:	4649      	mov	r1, r9
 8002ec8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	f04f 0300 	mov.w	r3, #0
 8002ed4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ed8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002edc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ee0:	ebb2 040a 	subs.w	r4, r2, sl
 8002ee4:	eb63 050b 	sbc.w	r5, r3, fp
 8002ee8:	f04f 0200 	mov.w	r2, #0
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	00eb      	lsls	r3, r5, #3
 8002ef2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ef6:	00e2      	lsls	r2, r4, #3
 8002ef8:	4614      	mov	r4, r2
 8002efa:	461d      	mov	r5, r3
 8002efc:	4643      	mov	r3, r8
 8002efe:	18e3      	adds	r3, r4, r3
 8002f00:	603b      	str	r3, [r7, #0]
 8002f02:	464b      	mov	r3, r9
 8002f04:	eb45 0303 	adc.w	r3, r5, r3
 8002f08:	607b      	str	r3, [r7, #4]
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	f04f 0300 	mov.w	r3, #0
 8002f12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f16:	4629      	mov	r1, r5
 8002f18:	028b      	lsls	r3, r1, #10
 8002f1a:	4621      	mov	r1, r4
 8002f1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f20:	4621      	mov	r1, r4
 8002f22:	028a      	lsls	r2, r1, #10
 8002f24:	4610      	mov	r0, r2
 8002f26:	4619      	mov	r1, r3
 8002f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	61bb      	str	r3, [r7, #24]
 8002f2e:	61fa      	str	r2, [r7, #28]
 8002f30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f34:	f7fd fe38 	bl	8000ba8 <__aeabi_uldivmod>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f40:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	0c1b      	lsrs	r3, r3, #16
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002f50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f5a:	e002      	b.n	8002f62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f5c:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f5e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3750      	adds	r7, #80	; 0x50
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f6e:	bf00      	nop
 8002f70:	40023800 	.word	0x40023800
 8002f74:	00f42400 	.word	0x00f42400
 8002f78:	007a1200 	.word	0x007a1200

08002f7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f80:	4b03      	ldr	r3, [pc, #12]	; (8002f90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f82:	681b      	ldr	r3, [r3, #0]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	20000008 	.word	0x20000008

08002f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f98:	f7ff fff0 	bl	8002f7c <HAL_RCC_GetHCLKFreq>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	0a9b      	lsrs	r3, r3, #10
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	4903      	ldr	r1, [pc, #12]	; (8002fb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002faa:	5ccb      	ldrb	r3, [r1, r3]
 8002fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	0800af30 	.word	0x0800af30

08002fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fc0:	f7ff ffdc 	bl	8002f7c <HAL_RCC_GetHCLKFreq>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	4b05      	ldr	r3, [pc, #20]	; (8002fdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	0b5b      	lsrs	r3, r3, #13
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	4903      	ldr	r1, [pc, #12]	; (8002fe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fd2:	5ccb      	ldrb	r3, [r1, r3]
 8002fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	0800af30 	.word	0x0800af30

08002fe4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e03f      	b.n	8003076 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d106      	bne.n	8003010 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f004 ff96 	bl	8007f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2224      	movs	r2, #36	; 0x24
 8003014:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003026:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 faf9 	bl	8003620 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	691a      	ldr	r2, [r3, #16]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800303c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	695a      	ldr	r2, [r3, #20]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800304c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68da      	ldr	r2, [r3, #12]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800305c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2220      	movs	r2, #32
 8003068:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2220      	movs	r2, #32
 8003070:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800307e:	b480      	push	{r7}
 8003080:	b085      	sub	sp, #20
 8003082:	af00      	add	r7, sp, #0
 8003084:	60f8      	str	r0, [r7, #12]
 8003086:	60b9      	str	r1, [r7, #8]
 8003088:	4613      	mov	r3, r2
 800308a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b20      	cmp	r3, #32
 8003096:	d130      	bne.n	80030fa <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d002      	beq.n	80030a4 <HAL_UART_Transmit_IT+0x26>
 800309e:	88fb      	ldrh	r3, [r7, #6]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e029      	b.n	80030fc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d101      	bne.n	80030b6 <HAL_UART_Transmit_IT+0x38>
 80030b2:	2302      	movs	r3, #2
 80030b4:	e022      	b.n	80030fc <HAL_UART_Transmit_IT+0x7e>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	88fa      	ldrh	r2, [r7, #6]
 80030c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	88fa      	ldrh	r2, [r7, #6]
 80030ce:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2221      	movs	r2, #33	; 0x21
 80030da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030f4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80030f6:	2300      	movs	r3, #0
 80030f8:	e000      	b.n	80030fc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80030fa:	2302      	movs	r3, #2
  }
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	4613      	mov	r3, r2
 8003114:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b20      	cmp	r3, #32
 8003120:	d140      	bne.n	80031a4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d002      	beq.n	800312e <HAL_UART_Receive_IT+0x26>
 8003128:	88fb      	ldrh	r3, [r7, #6]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e039      	b.n	80031a6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003138:	2b01      	cmp	r3, #1
 800313a:	d101      	bne.n	8003140 <HAL_UART_Receive_IT+0x38>
 800313c:	2302      	movs	r3, #2
 800313e:	e032      	b.n	80031a6 <HAL_UART_Receive_IT+0x9e>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	88fa      	ldrh	r2, [r7, #6]
 8003152:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	88fa      	ldrh	r2, [r7, #6]
 8003158:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2222      	movs	r2, #34	; 0x22
 8003164:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68da      	ldr	r2, [r3, #12]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800317e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	695a      	ldr	r2, [r3, #20]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0201 	orr.w	r2, r2, #1
 800318e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68da      	ldr	r2, [r3, #12]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0220 	orr.w	r2, r2, #32
 800319e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80031a0:	2300      	movs	r3, #0
 80031a2:	e000      	b.n	80031a6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80031a4:	2302      	movs	r3, #2
  }
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
	...

080031b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b088      	sub	sp, #32
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80031d8:	2300      	movs	r3, #0
 80031da:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10d      	bne.n	8003206 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	f003 0320 	and.w	r3, r3, #32
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d008      	beq.n	8003206 <HAL_UART_IRQHandler+0x52>
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	f003 0320 	and.w	r3, r3, #32
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f98c 	bl	800351c <UART_Receive_IT>
      return;
 8003204:	e0d0      	b.n	80033a8 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 80b0 	beq.w	800336e <HAL_UART_IRQHandler+0x1ba>
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b00      	cmp	r3, #0
 8003216:	d105      	bne.n	8003224 <HAL_UART_IRQHandler+0x70>
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800321e:	2b00      	cmp	r3, #0
 8003220:	f000 80a5 	beq.w	800336e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00a      	beq.n	8003244 <HAL_UART_IRQHandler+0x90>
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003234:	2b00      	cmp	r3, #0
 8003236:	d005      	beq.n	8003244 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323c:	f043 0201 	orr.w	r2, r3, #1
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	f003 0304 	and.w	r3, r3, #4
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00a      	beq.n	8003264 <HAL_UART_IRQHandler+0xb0>
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b00      	cmp	r3, #0
 8003256:	d005      	beq.n	8003264 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325c:	f043 0202 	orr.w	r2, r3, #2
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00a      	beq.n	8003284 <HAL_UART_IRQHandler+0xd0>
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b00      	cmp	r3, #0
 8003276:	d005      	beq.n	8003284 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800327c:	f043 0204 	orr.w	r2, r3, #4
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00f      	beq.n	80032ae <HAL_UART_IRQHandler+0xfa>
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	f003 0320 	and.w	r3, r3, #32
 8003294:	2b00      	cmp	r3, #0
 8003296:	d104      	bne.n	80032a2 <HAL_UART_IRQHandler+0xee>
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d005      	beq.n	80032ae <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a6:	f043 0208 	orr.w	r2, r3, #8
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d077      	beq.n	80033a6 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	f003 0320 	and.w	r3, r3, #32
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d007      	beq.n	80032d0 <HAL_UART_IRQHandler+0x11c>
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	f003 0320 	and.w	r3, r3, #32
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d002      	beq.n	80032d0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f926 	bl	800351c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032da:	2b40      	cmp	r3, #64	; 0x40
 80032dc:	bf0c      	ite	eq
 80032de:	2301      	moveq	r3, #1
 80032e0:	2300      	movne	r3, #0
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d102      	bne.n	80032f8 <HAL_UART_IRQHandler+0x144>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d031      	beq.n	800335c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 f86f 	bl	80033dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003308:	2b40      	cmp	r3, #64	; 0x40
 800330a:	d123      	bne.n	8003354 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695a      	ldr	r2, [r3, #20]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800331a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003320:	2b00      	cmp	r3, #0
 8003322:	d013      	beq.n	800334c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003328:	4a21      	ldr	r2, [pc, #132]	; (80033b0 <HAL_UART_IRQHandler+0x1fc>)
 800332a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003330:	4618      	mov	r0, r3
 8003332:	f7fe fc5d 	bl	8001bf0 <HAL_DMA_Abort_IT>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d016      	beq.n	800336a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003346:	4610      	mov	r0, r2
 8003348:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800334a:	e00e      	b.n	800336a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f83b 	bl	80033c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003352:	e00a      	b.n	800336a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 f837 	bl	80033c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800335a:	e006      	b.n	800336a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 f833 	bl	80033c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003368:	e01d      	b.n	80033a6 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800336a:	bf00      	nop
    return;
 800336c:	e01b      	b.n	80033a6 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003374:	2b00      	cmp	r3, #0
 8003376:	d008      	beq.n	800338a <HAL_UART_IRQHandler+0x1d6>
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f85c 	bl	8003440 <UART_Transmit_IT>
    return;
 8003388:	e00e      	b.n	80033a8 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003390:	2b00      	cmp	r3, #0
 8003392:	d009      	beq.n	80033a8 <HAL_UART_IRQHandler+0x1f4>
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800339a:	2b00      	cmp	r3, #0
 800339c:	d004      	beq.n	80033a8 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f8a4 	bl	80034ec <UART_EndTransmit_IT>
    return;
 80033a4:	e000      	b.n	80033a8 <HAL_UART_IRQHandler+0x1f4>
    return;
 80033a6:	bf00      	nop
  }
}
 80033a8:	3720      	adds	r7, #32
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	08003419 	.word	0x08003419

080033b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68da      	ldr	r2, [r3, #12]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80033f2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	695a      	ldr	r2, [r3, #20]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0201 	bic.w	r2, r2, #1
 8003402:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003424:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f7ff ffc8 	bl	80033c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003438:	bf00      	nop
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b21      	cmp	r3, #33	; 0x21
 8003452:	d144      	bne.n	80034de <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800345c:	d11a      	bne.n	8003494 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	461a      	mov	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003472:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d105      	bne.n	8003488 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	1c9a      	adds	r2, r3, #2
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	621a      	str	r2, [r3, #32]
 8003486:	e00e      	b.n	80034a6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	621a      	str	r2, [r3, #32]
 8003492:	e008      	b.n	80034a6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	1c59      	adds	r1, r3, #1
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6211      	str	r1, [r2, #32]
 800349e:	781a      	ldrb	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	4619      	mov	r1, r3
 80034b4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10f      	bne.n	80034da <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68da      	ldr	r2, [r3, #12]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	e000      	b.n	80034e0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80034de:	2302      	movs	r3, #2
  }
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003502:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2220      	movs	r2, #32
 8003508:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f7ff ff51 	bl	80033b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b22      	cmp	r3, #34	; 0x22
 800352e:	d171      	bne.n	8003614 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003538:	d123      	bne.n	8003582 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10e      	bne.n	8003566 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	b29b      	uxth	r3, r3
 8003550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003554:	b29a      	uxth	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355e:	1c9a      	adds	r2, r3, #2
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	629a      	str	r2, [r3, #40]	; 0x28
 8003564:	e029      	b.n	80035ba <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	b29b      	uxth	r3, r3
 800356e:	b2db      	uxtb	r3, r3
 8003570:	b29a      	uxth	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357a:	1c5a      	adds	r2, r3, #1
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	629a      	str	r2, [r3, #40]	; 0x28
 8003580:	e01b      	b.n	80035ba <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10a      	bne.n	80035a0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6858      	ldr	r0, [r3, #4]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003594:	1c59      	adds	r1, r3, #1
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	6291      	str	r1, [r2, #40]	; 0x28
 800359a:	b2c2      	uxtb	r2, r0
 800359c:	701a      	strb	r2, [r3, #0]
 800359e:	e00c      	b.n	80035ba <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ac:	1c58      	adds	r0, r3, #1
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	6288      	str	r0, [r1, #40]	; 0x28
 80035b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035be:	b29b      	uxth	r3, r3
 80035c0:	3b01      	subs	r3, #1
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	4619      	mov	r1, r3
 80035c8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d120      	bne.n	8003610 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68da      	ldr	r2, [r3, #12]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0220 	bic.w	r2, r2, #32
 80035dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68da      	ldr	r2, [r3, #12]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695a      	ldr	r2, [r3, #20]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0201 	bic.w	r2, r2, #1
 80035fc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2220      	movs	r2, #32
 8003602:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f003 fc30 	bl	8006e6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800360c:	2300      	movs	r3, #0
 800360e:	e002      	b.n	8003616 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003610:	2300      	movs	r3, #0
 8003612:	e000      	b.n	8003616 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003614:	2302      	movs	r3, #2
  }
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
	...

08003620 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003624:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003628:	af00      	add	r7, sp, #0
 800362a:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800362e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800363a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800363e:	68d9      	ldr	r1, [r3, #12]
 8003640:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	ea40 0301 	orr.w	r3, r0, r1
 800364a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800364c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003650:	689a      	ldr	r2, [r3, #8]
 8003652:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	431a      	orrs	r2, r3
 800365a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	431a      	orrs	r2, r3
 8003662:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	4313      	orrs	r3, r2
 800366a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 800366e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800367a:	f021 010c 	bic.w	r1, r1, #12
 800367e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8003688:	430b      	orrs	r3, r1
 800368a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800368c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003698:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800369c:	6999      	ldr	r1, [r3, #24]
 800369e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	ea40 0301 	orr.w	r3, r0, r1
 80036a8:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036aa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036b4:	f040 824a 	bne.w	8003b4c <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036b8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	4b96      	ldr	r3, [pc, #600]	; (8003918 <UART_SetConfig+0x2f8>)
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d006      	beq.n	80036d2 <UART_SetConfig+0xb2>
 80036c4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	4b94      	ldr	r3, [pc, #592]	; (800391c <UART_SetConfig+0x2fc>)
 80036cc:	429a      	cmp	r2, r3
 80036ce:	f040 8129 	bne.w	8003924 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036d2:	f7ff fc73 	bl	8002fbc <HAL_RCC_GetPCLK2Freq>
 80036d6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036da:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80036de:	2200      	movs	r2, #0
 80036e0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80036e4:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 80036e8:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 80036ec:	4622      	mov	r2, r4
 80036ee:	462b      	mov	r3, r5
 80036f0:	1891      	adds	r1, r2, r2
 80036f2:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80036f6:	415b      	adcs	r3, r3
 80036f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80036fc:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8003700:	4621      	mov	r1, r4
 8003702:	1851      	adds	r1, r2, r1
 8003704:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8003708:	4629      	mov	r1, r5
 800370a:	414b      	adcs	r3, r1
 800370c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	f04f 0300 	mov.w	r3, #0
 8003718:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 800371c:	4649      	mov	r1, r9
 800371e:	00cb      	lsls	r3, r1, #3
 8003720:	4641      	mov	r1, r8
 8003722:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003726:	4641      	mov	r1, r8
 8003728:	00ca      	lsls	r2, r1, #3
 800372a:	4610      	mov	r0, r2
 800372c:	4619      	mov	r1, r3
 800372e:	4603      	mov	r3, r0
 8003730:	4622      	mov	r2, r4
 8003732:	189b      	adds	r3, r3, r2
 8003734:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003738:	462b      	mov	r3, r5
 800373a:	460a      	mov	r2, r1
 800373c:	eb42 0303 	adc.w	r3, r2, r3
 8003740:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8003744:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003750:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8003754:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8003758:	460b      	mov	r3, r1
 800375a:	18db      	adds	r3, r3, r3
 800375c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003760:	4613      	mov	r3, r2
 8003762:	eb42 0303 	adc.w	r3, r2, r3
 8003766:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800376a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800376e:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8003772:	f7fd fa19 	bl	8000ba8 <__aeabi_uldivmod>
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	4b69      	ldr	r3, [pc, #420]	; (8003920 <UART_SetConfig+0x300>)
 800377c:	fba3 2302 	umull	r2, r3, r3, r2
 8003780:	095b      	lsrs	r3, r3, #5
 8003782:	011c      	lsls	r4, r3, #4
 8003784:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003788:	2200      	movs	r2, #0
 800378a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 800378e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003792:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8003796:	4642      	mov	r2, r8
 8003798:	464b      	mov	r3, r9
 800379a:	1891      	adds	r1, r2, r2
 800379c:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80037a0:	415b      	adcs	r3, r3
 80037a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80037a6:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80037aa:	4641      	mov	r1, r8
 80037ac:	1851      	adds	r1, r2, r1
 80037ae:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80037b2:	4649      	mov	r1, r9
 80037b4:	414b      	adcs	r3, r1
 80037b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037ba:	f04f 0200 	mov.w	r2, #0
 80037be:	f04f 0300 	mov.w	r3, #0
 80037c2:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 80037c6:	4659      	mov	r1, fp
 80037c8:	00cb      	lsls	r3, r1, #3
 80037ca:	4651      	mov	r1, sl
 80037cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037d0:	4651      	mov	r1, sl
 80037d2:	00ca      	lsls	r2, r1, #3
 80037d4:	4610      	mov	r0, r2
 80037d6:	4619      	mov	r1, r3
 80037d8:	4603      	mov	r3, r0
 80037da:	4642      	mov	r2, r8
 80037dc:	189b      	adds	r3, r3, r2
 80037de:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80037e2:	464b      	mov	r3, r9
 80037e4:	460a      	mov	r2, r1
 80037e6:	eb42 0303 	adc.w	r3, r2, r3
 80037ea:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80037ee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80037fa:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 80037fe:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8003802:	460b      	mov	r3, r1
 8003804:	18db      	adds	r3, r3, r3
 8003806:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800380a:	4613      	mov	r3, r2
 800380c:	eb42 0303 	adc.w	r3, r2, r3
 8003810:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003814:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8003818:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 800381c:	f7fd f9c4 	bl	8000ba8 <__aeabi_uldivmod>
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	4611      	mov	r1, r2
 8003826:	4b3e      	ldr	r3, [pc, #248]	; (8003920 <UART_SetConfig+0x300>)
 8003828:	fba3 2301 	umull	r2, r3, r3, r1
 800382c:	095b      	lsrs	r3, r3, #5
 800382e:	2264      	movs	r2, #100	; 0x64
 8003830:	fb02 f303 	mul.w	r3, r2, r3
 8003834:	1acb      	subs	r3, r1, r3
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800383c:	4b38      	ldr	r3, [pc, #224]	; (8003920 <UART_SetConfig+0x300>)
 800383e:	fba3 2302 	umull	r2, r3, r3, r2
 8003842:	095b      	lsrs	r3, r3, #5
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800384a:	441c      	add	r4, r3
 800384c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003850:	2200      	movs	r2, #0
 8003852:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003856:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 800385a:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 800385e:	4642      	mov	r2, r8
 8003860:	464b      	mov	r3, r9
 8003862:	1891      	adds	r1, r2, r2
 8003864:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8003868:	415b      	adcs	r3, r3
 800386a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800386e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8003872:	4641      	mov	r1, r8
 8003874:	1851      	adds	r1, r2, r1
 8003876:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800387a:	4649      	mov	r1, r9
 800387c:	414b      	adcs	r3, r1
 800387e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003882:	f04f 0200 	mov.w	r2, #0
 8003886:	f04f 0300 	mov.w	r3, #0
 800388a:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 800388e:	4659      	mov	r1, fp
 8003890:	00cb      	lsls	r3, r1, #3
 8003892:	4651      	mov	r1, sl
 8003894:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003898:	4651      	mov	r1, sl
 800389a:	00ca      	lsls	r2, r1, #3
 800389c:	4610      	mov	r0, r2
 800389e:	4619      	mov	r1, r3
 80038a0:	4603      	mov	r3, r0
 80038a2:	4642      	mov	r2, r8
 80038a4:	189b      	adds	r3, r3, r2
 80038a6:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80038aa:	464b      	mov	r3, r9
 80038ac:	460a      	mov	r2, r1
 80038ae:	eb42 0303 	adc.w	r3, r2, r3
 80038b2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80038b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80038c2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 80038c6:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 80038ca:	460b      	mov	r3, r1
 80038cc:	18db      	adds	r3, r3, r3
 80038ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80038d2:	4613      	mov	r3, r2
 80038d4:	eb42 0303 	adc.w	r3, r2, r3
 80038d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80038dc:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80038e0:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 80038e4:	f7fd f960 	bl	8000ba8 <__aeabi_uldivmod>
 80038e8:	4602      	mov	r2, r0
 80038ea:	460b      	mov	r3, r1
 80038ec:	4b0c      	ldr	r3, [pc, #48]	; (8003920 <UART_SetConfig+0x300>)
 80038ee:	fba3 1302 	umull	r1, r3, r3, r2
 80038f2:	095b      	lsrs	r3, r3, #5
 80038f4:	2164      	movs	r1, #100	; 0x64
 80038f6:	fb01 f303 	mul.w	r3, r1, r3
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	3332      	adds	r3, #50	; 0x32
 8003900:	4a07      	ldr	r2, [pc, #28]	; (8003920 <UART_SetConfig+0x300>)
 8003902:	fba2 2303 	umull	r2, r3, r2, r3
 8003906:	095b      	lsrs	r3, r3, #5
 8003908:	f003 0207 	and.w	r2, r3, #7
 800390c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4422      	add	r2, r4
 8003914:	609a      	str	r2, [r3, #8]
 8003916:	e349      	b.n	8003fac <UART_SetConfig+0x98c>
 8003918:	40011000 	.word	0x40011000
 800391c:	40011400 	.word	0x40011400
 8003920:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003924:	f7ff fb36 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 8003928:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800392c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003930:	2200      	movs	r2, #0
 8003932:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003936:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 800393a:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 800393e:	4622      	mov	r2, r4
 8003940:	462b      	mov	r3, r5
 8003942:	1891      	adds	r1, r2, r2
 8003944:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8003948:	415b      	adcs	r3, r3
 800394a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800394e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003952:	4621      	mov	r1, r4
 8003954:	eb12 0a01 	adds.w	sl, r2, r1
 8003958:	4629      	mov	r1, r5
 800395a:	eb43 0b01 	adc.w	fp, r3, r1
 800395e:	f04f 0200 	mov.w	r2, #0
 8003962:	f04f 0300 	mov.w	r3, #0
 8003966:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800396a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800396e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003972:	4692      	mov	sl, r2
 8003974:	469b      	mov	fp, r3
 8003976:	4623      	mov	r3, r4
 8003978:	eb1a 0303 	adds.w	r3, sl, r3
 800397c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003980:	462b      	mov	r3, r5
 8003982:	eb4b 0303 	adc.w	r3, fp, r3
 8003986:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800398a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8003996:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800399a:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 800399e:	460b      	mov	r3, r1
 80039a0:	18db      	adds	r3, r3, r3
 80039a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80039a6:	4613      	mov	r3, r2
 80039a8:	eb42 0303 	adc.w	r3, r2, r3
 80039ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80039b0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80039b4:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 80039b8:	f7fd f8f6 	bl	8000ba8 <__aeabi_uldivmod>
 80039bc:	4602      	mov	r2, r0
 80039be:	460b      	mov	r3, r1
 80039c0:	4b61      	ldr	r3, [pc, #388]	; (8003b48 <UART_SetConfig+0x528>)
 80039c2:	fba3 2302 	umull	r2, r3, r3, r2
 80039c6:	095b      	lsrs	r3, r3, #5
 80039c8:	011c      	lsls	r4, r3, #4
 80039ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80039ce:	2200      	movs	r2, #0
 80039d0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 80039d4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 80039d8:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 80039dc:	4642      	mov	r2, r8
 80039de:	464b      	mov	r3, r9
 80039e0:	1891      	adds	r1, r2, r2
 80039e2:	67b9      	str	r1, [r7, #120]	; 0x78
 80039e4:	415b      	adcs	r3, r3
 80039e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80039e8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80039ec:	4641      	mov	r1, r8
 80039ee:	1851      	adds	r1, r2, r1
 80039f0:	6739      	str	r1, [r7, #112]	; 0x70
 80039f2:	4649      	mov	r1, r9
 80039f4:	414b      	adcs	r3, r1
 80039f6:	677b      	str	r3, [r7, #116]	; 0x74
 80039f8:	f04f 0200 	mov.w	r2, #0
 80039fc:	f04f 0300 	mov.w	r3, #0
 8003a00:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8003a04:	4659      	mov	r1, fp
 8003a06:	00cb      	lsls	r3, r1, #3
 8003a08:	4651      	mov	r1, sl
 8003a0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a0e:	4651      	mov	r1, sl
 8003a10:	00ca      	lsls	r2, r1, #3
 8003a12:	4610      	mov	r0, r2
 8003a14:	4619      	mov	r1, r3
 8003a16:	4603      	mov	r3, r0
 8003a18:	4642      	mov	r2, r8
 8003a1a:	189b      	adds	r3, r3, r2
 8003a1c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003a20:	464b      	mov	r3, r9
 8003a22:	460a      	mov	r2, r1
 8003a24:	eb42 0303 	adc.w	r3, r2, r3
 8003a28:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8003a2c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003a38:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8003a3c:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8003a40:	460b      	mov	r3, r1
 8003a42:	18db      	adds	r3, r3, r3
 8003a44:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a46:	4613      	mov	r3, r2
 8003a48:	eb42 0303 	adc.w	r3, r2, r3
 8003a4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a4e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003a52:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003a56:	f7fd f8a7 	bl	8000ba8 <__aeabi_uldivmod>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	4611      	mov	r1, r2
 8003a60:	4b39      	ldr	r3, [pc, #228]	; (8003b48 <UART_SetConfig+0x528>)
 8003a62:	fba3 2301 	umull	r2, r3, r3, r1
 8003a66:	095b      	lsrs	r3, r3, #5
 8003a68:	2264      	movs	r2, #100	; 0x64
 8003a6a:	fb02 f303 	mul.w	r3, r2, r3
 8003a6e:	1acb      	subs	r3, r1, r3
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a76:	4b34      	ldr	r3, [pc, #208]	; (8003b48 <UART_SetConfig+0x528>)
 8003a78:	fba3 2302 	umull	r2, r3, r3, r2
 8003a7c:	095b      	lsrs	r3, r3, #5
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a84:	441c      	add	r4, r3
 8003a86:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8003a90:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003a94:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8003a98:	4642      	mov	r2, r8
 8003a9a:	464b      	mov	r3, r9
 8003a9c:	1891      	adds	r1, r2, r2
 8003a9e:	6639      	str	r1, [r7, #96]	; 0x60
 8003aa0:	415b      	adcs	r3, r3
 8003aa2:	667b      	str	r3, [r7, #100]	; 0x64
 8003aa4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003aa8:	4641      	mov	r1, r8
 8003aaa:	1851      	adds	r1, r2, r1
 8003aac:	65b9      	str	r1, [r7, #88]	; 0x58
 8003aae:	4649      	mov	r1, r9
 8003ab0:	414b      	adcs	r3, r1
 8003ab2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8003ac0:	4659      	mov	r1, fp
 8003ac2:	00cb      	lsls	r3, r1, #3
 8003ac4:	4651      	mov	r1, sl
 8003ac6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003aca:	4651      	mov	r1, sl
 8003acc:	00ca      	lsls	r2, r1, #3
 8003ace:	4610      	mov	r0, r2
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	4642      	mov	r2, r8
 8003ad6:	189b      	adds	r3, r3, r2
 8003ad8:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8003adc:	464b      	mov	r3, r9
 8003ade:	460a      	mov	r2, r1
 8003ae0:	eb42 0303 	adc.w	r3, r2, r3
 8003ae4:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8003ae8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8003af4:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8003af8:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8003afc:	460b      	mov	r3, r1
 8003afe:	18db      	adds	r3, r3, r3
 8003b00:	653b      	str	r3, [r7, #80]	; 0x50
 8003b02:	4613      	mov	r3, r2
 8003b04:	eb42 0303 	adc.w	r3, r2, r3
 8003b08:	657b      	str	r3, [r7, #84]	; 0x54
 8003b0a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003b0e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8003b12:	f7fd f849 	bl	8000ba8 <__aeabi_uldivmod>
 8003b16:	4602      	mov	r2, r0
 8003b18:	460b      	mov	r3, r1
 8003b1a:	4b0b      	ldr	r3, [pc, #44]	; (8003b48 <UART_SetConfig+0x528>)
 8003b1c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b20:	095b      	lsrs	r3, r3, #5
 8003b22:	2164      	movs	r1, #100	; 0x64
 8003b24:	fb01 f303 	mul.w	r3, r1, r3
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	3332      	adds	r3, #50	; 0x32
 8003b2e:	4a06      	ldr	r2, [pc, #24]	; (8003b48 <UART_SetConfig+0x528>)
 8003b30:	fba2 2303 	umull	r2, r3, r2, r3
 8003b34:	095b      	lsrs	r3, r3, #5
 8003b36:	f003 0207 	and.w	r2, r3, #7
 8003b3a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4422      	add	r2, r4
 8003b42:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003b44:	e232      	b.n	8003fac <UART_SetConfig+0x98c>
 8003b46:	bf00      	nop
 8003b48:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b4c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	4b8d      	ldr	r3, [pc, #564]	; (8003d88 <UART_SetConfig+0x768>)
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d006      	beq.n	8003b66 <UART_SetConfig+0x546>
 8003b58:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	4b8b      	ldr	r3, [pc, #556]	; (8003d8c <UART_SetConfig+0x76c>)
 8003b60:	429a      	cmp	r2, r3
 8003b62:	f040 8117 	bne.w	8003d94 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b66:	f7ff fa29 	bl	8002fbc <HAL_RCC_GetPCLK2Freq>
 8003b6a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b6e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b72:	2200      	movs	r2, #0
 8003b74:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8003b78:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8003b7c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8003b80:	4622      	mov	r2, r4
 8003b82:	462b      	mov	r3, r5
 8003b84:	1891      	adds	r1, r2, r2
 8003b86:	64b9      	str	r1, [r7, #72]	; 0x48
 8003b88:	415b      	adcs	r3, r3
 8003b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003b90:	4621      	mov	r1, r4
 8003b92:	eb12 0801 	adds.w	r8, r2, r1
 8003b96:	4629      	mov	r1, r5
 8003b98:	eb43 0901 	adc.w	r9, r3, r1
 8003b9c:	f04f 0200 	mov.w	r2, #0
 8003ba0:	f04f 0300 	mov.w	r3, #0
 8003ba4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ba8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bb0:	4690      	mov	r8, r2
 8003bb2:	4699      	mov	r9, r3
 8003bb4:	4623      	mov	r3, r4
 8003bb6:	eb18 0303 	adds.w	r3, r8, r3
 8003bba:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003bbe:	462b      	mov	r3, r5
 8003bc0:	eb49 0303 	adc.w	r3, r9, r3
 8003bc4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003bc8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003bd4:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	f04f 0300 	mov.w	r3, #0
 8003be0:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8003be4:	4629      	mov	r1, r5
 8003be6:	008b      	lsls	r3, r1, #2
 8003be8:	4621      	mov	r1, r4
 8003bea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bee:	4621      	mov	r1, r4
 8003bf0:	008a      	lsls	r2, r1, #2
 8003bf2:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8003bf6:	f7fc ffd7 	bl	8000ba8 <__aeabi_uldivmod>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4b64      	ldr	r3, [pc, #400]	; (8003d90 <UART_SetConfig+0x770>)
 8003c00:	fba3 2302 	umull	r2, r3, r3, r2
 8003c04:	095b      	lsrs	r3, r3, #5
 8003c06:	011c      	lsls	r4, r3, #4
 8003c08:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8003c12:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003c16:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8003c1a:	4642      	mov	r2, r8
 8003c1c:	464b      	mov	r3, r9
 8003c1e:	1891      	adds	r1, r2, r2
 8003c20:	6439      	str	r1, [r7, #64]	; 0x40
 8003c22:	415b      	adcs	r3, r3
 8003c24:	647b      	str	r3, [r7, #68]	; 0x44
 8003c26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c2a:	4641      	mov	r1, r8
 8003c2c:	1851      	adds	r1, r2, r1
 8003c2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c30:	4649      	mov	r1, r9
 8003c32:	414b      	adcs	r3, r1
 8003c34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c36:	f04f 0200 	mov.w	r2, #0
 8003c3a:	f04f 0300 	mov.w	r3, #0
 8003c3e:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8003c42:	4659      	mov	r1, fp
 8003c44:	00cb      	lsls	r3, r1, #3
 8003c46:	4651      	mov	r1, sl
 8003c48:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c4c:	4651      	mov	r1, sl
 8003c4e:	00ca      	lsls	r2, r1, #3
 8003c50:	4610      	mov	r0, r2
 8003c52:	4619      	mov	r1, r3
 8003c54:	4603      	mov	r3, r0
 8003c56:	4642      	mov	r2, r8
 8003c58:	189b      	adds	r3, r3, r2
 8003c5a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8003c5e:	464b      	mov	r3, r9
 8003c60:	460a      	mov	r2, r1
 8003c62:	eb42 0303 	adc.w	r3, r2, r3
 8003c66:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003c6a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003c76:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8003c7a:	f04f 0200 	mov.w	r2, #0
 8003c7e:	f04f 0300 	mov.w	r3, #0
 8003c82:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8003c86:	4649      	mov	r1, r9
 8003c88:	008b      	lsls	r3, r1, #2
 8003c8a:	4641      	mov	r1, r8
 8003c8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c90:	4641      	mov	r1, r8
 8003c92:	008a      	lsls	r2, r1, #2
 8003c94:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8003c98:	f7fc ff86 	bl	8000ba8 <__aeabi_uldivmod>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	4b3b      	ldr	r3, [pc, #236]	; (8003d90 <UART_SetConfig+0x770>)
 8003ca2:	fba3 1302 	umull	r1, r3, r3, r2
 8003ca6:	095b      	lsrs	r3, r3, #5
 8003ca8:	2164      	movs	r1, #100	; 0x64
 8003caa:	fb01 f303 	mul.w	r3, r1, r3
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	3332      	adds	r3, #50	; 0x32
 8003cb4:	4a36      	ldr	r2, [pc, #216]	; (8003d90 <UART_SetConfig+0x770>)
 8003cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cba:	095b      	lsrs	r3, r3, #5
 8003cbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cc0:	441c      	add	r4, r3
 8003cc2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8003ccc:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8003cd0:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8003cd4:	4642      	mov	r2, r8
 8003cd6:	464b      	mov	r3, r9
 8003cd8:	1891      	adds	r1, r2, r2
 8003cda:	6339      	str	r1, [r7, #48]	; 0x30
 8003cdc:	415b      	adcs	r3, r3
 8003cde:	637b      	str	r3, [r7, #52]	; 0x34
 8003ce0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003ce4:	4641      	mov	r1, r8
 8003ce6:	1851      	adds	r1, r2, r1
 8003ce8:	62b9      	str	r1, [r7, #40]	; 0x28
 8003cea:	4649      	mov	r1, r9
 8003cec:	414b      	adcs	r3, r1
 8003cee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cf0:	f04f 0200 	mov.w	r2, #0
 8003cf4:	f04f 0300 	mov.w	r3, #0
 8003cf8:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8003cfc:	4659      	mov	r1, fp
 8003cfe:	00cb      	lsls	r3, r1, #3
 8003d00:	4651      	mov	r1, sl
 8003d02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d06:	4651      	mov	r1, sl
 8003d08:	00ca      	lsls	r2, r1, #3
 8003d0a:	4610      	mov	r0, r2
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	4603      	mov	r3, r0
 8003d10:	4642      	mov	r2, r8
 8003d12:	189b      	adds	r3, r3, r2
 8003d14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003d18:	464b      	mov	r3, r9
 8003d1a:	460a      	mov	r2, r1
 8003d1c:	eb42 0303 	adc.w	r3, r2, r3
 8003d20:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003d24:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003d30:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8003d34:	f04f 0200 	mov.w	r2, #0
 8003d38:	f04f 0300 	mov.w	r3, #0
 8003d3c:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8003d40:	4649      	mov	r1, r9
 8003d42:	008b      	lsls	r3, r1, #2
 8003d44:	4641      	mov	r1, r8
 8003d46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d4a:	4641      	mov	r1, r8
 8003d4c:	008a      	lsls	r2, r1, #2
 8003d4e:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8003d52:	f7fc ff29 	bl	8000ba8 <__aeabi_uldivmod>
 8003d56:	4602      	mov	r2, r0
 8003d58:	460b      	mov	r3, r1
 8003d5a:	4b0d      	ldr	r3, [pc, #52]	; (8003d90 <UART_SetConfig+0x770>)
 8003d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d60:	095b      	lsrs	r3, r3, #5
 8003d62:	2164      	movs	r1, #100	; 0x64
 8003d64:	fb01 f303 	mul.w	r3, r1, r3
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	011b      	lsls	r3, r3, #4
 8003d6c:	3332      	adds	r3, #50	; 0x32
 8003d6e:	4a08      	ldr	r2, [pc, #32]	; (8003d90 <UART_SetConfig+0x770>)
 8003d70:	fba2 2303 	umull	r2, r3, r2, r3
 8003d74:	095b      	lsrs	r3, r3, #5
 8003d76:	f003 020f 	and.w	r2, r3, #15
 8003d7a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4422      	add	r2, r4
 8003d82:	609a      	str	r2, [r3, #8]
 8003d84:	e112      	b.n	8003fac <UART_SetConfig+0x98c>
 8003d86:	bf00      	nop
 8003d88:	40011000 	.word	0x40011000
 8003d8c:	40011400 	.word	0x40011400
 8003d90:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d94:	f7ff f8fe 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 8003d98:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d9c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003da0:	2200      	movs	r2, #0
 8003da2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003da6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003daa:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8003dae:	4642      	mov	r2, r8
 8003db0:	464b      	mov	r3, r9
 8003db2:	1891      	adds	r1, r2, r2
 8003db4:	6239      	str	r1, [r7, #32]
 8003db6:	415b      	adcs	r3, r3
 8003db8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dbe:	4641      	mov	r1, r8
 8003dc0:	1854      	adds	r4, r2, r1
 8003dc2:	4649      	mov	r1, r9
 8003dc4:	eb43 0501 	adc.w	r5, r3, r1
 8003dc8:	f04f 0200 	mov.w	r2, #0
 8003dcc:	f04f 0300 	mov.w	r3, #0
 8003dd0:	00eb      	lsls	r3, r5, #3
 8003dd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dd6:	00e2      	lsls	r2, r4, #3
 8003dd8:	4614      	mov	r4, r2
 8003dda:	461d      	mov	r5, r3
 8003ddc:	4643      	mov	r3, r8
 8003dde:	18e3      	adds	r3, r4, r3
 8003de0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003de4:	464b      	mov	r3, r9
 8003de6:	eb45 0303 	adc.w	r3, r5, r3
 8003dea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003dee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003dfa:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8003dfe:	f04f 0200 	mov.w	r2, #0
 8003e02:	f04f 0300 	mov.w	r3, #0
 8003e06:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8003e0a:	4629      	mov	r1, r5
 8003e0c:	008b      	lsls	r3, r1, #2
 8003e0e:	4621      	mov	r1, r4
 8003e10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e14:	4621      	mov	r1, r4
 8003e16:	008a      	lsls	r2, r1, #2
 8003e18:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8003e1c:	f7fc fec4 	bl	8000ba8 <__aeabi_uldivmod>
 8003e20:	4602      	mov	r2, r0
 8003e22:	460b      	mov	r3, r1
 8003e24:	4b64      	ldr	r3, [pc, #400]	; (8003fb8 <UART_SetConfig+0x998>)
 8003e26:	fba3 2302 	umull	r2, r3, r3, r2
 8003e2a:	095b      	lsrs	r3, r3, #5
 8003e2c:	011c      	lsls	r4, r3, #4
 8003e2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003e32:	2200      	movs	r2, #0
 8003e34:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003e38:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8003e3c:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8003e40:	4642      	mov	r2, r8
 8003e42:	464b      	mov	r3, r9
 8003e44:	1891      	adds	r1, r2, r2
 8003e46:	61b9      	str	r1, [r7, #24]
 8003e48:	415b      	adcs	r3, r3
 8003e4a:	61fb      	str	r3, [r7, #28]
 8003e4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e50:	4641      	mov	r1, r8
 8003e52:	1851      	adds	r1, r2, r1
 8003e54:	6139      	str	r1, [r7, #16]
 8003e56:	4649      	mov	r1, r9
 8003e58:	414b      	adcs	r3, r1
 8003e5a:	617b      	str	r3, [r7, #20]
 8003e5c:	f04f 0200 	mov.w	r2, #0
 8003e60:	f04f 0300 	mov.w	r3, #0
 8003e64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e68:	4659      	mov	r1, fp
 8003e6a:	00cb      	lsls	r3, r1, #3
 8003e6c:	4651      	mov	r1, sl
 8003e6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e72:	4651      	mov	r1, sl
 8003e74:	00ca      	lsls	r2, r1, #3
 8003e76:	4610      	mov	r0, r2
 8003e78:	4619      	mov	r1, r3
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	4642      	mov	r2, r8
 8003e7e:	189b      	adds	r3, r3, r2
 8003e80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003e84:	464b      	mov	r3, r9
 8003e86:	460a      	mov	r2, r1
 8003e88:	eb42 0303 	adc.w	r3, r2, r3
 8003e8c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003e90:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003e9c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	f04f 0300 	mov.w	r3, #0
 8003ea8:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8003eac:	4649      	mov	r1, r9
 8003eae:	008b      	lsls	r3, r1, #2
 8003eb0:	4641      	mov	r1, r8
 8003eb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003eb6:	4641      	mov	r1, r8
 8003eb8:	008a      	lsls	r2, r1, #2
 8003eba:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8003ebe:	f7fc fe73 	bl	8000ba8 <__aeabi_uldivmod>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4b3c      	ldr	r3, [pc, #240]	; (8003fb8 <UART_SetConfig+0x998>)
 8003ec8:	fba3 1302 	umull	r1, r3, r3, r2
 8003ecc:	095b      	lsrs	r3, r3, #5
 8003ece:	2164      	movs	r1, #100	; 0x64
 8003ed0:	fb01 f303 	mul.w	r3, r1, r3
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	3332      	adds	r3, #50	; 0x32
 8003eda:	4a37      	ldr	r2, [pc, #220]	; (8003fb8 <UART_SetConfig+0x998>)
 8003edc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee0:	095b      	lsrs	r3, r3, #5
 8003ee2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ee6:	441c      	add	r4, r3
 8003ee8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003eec:	2200      	movs	r2, #0
 8003eee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ef2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003ef6:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8003efa:	4642      	mov	r2, r8
 8003efc:	464b      	mov	r3, r9
 8003efe:	1891      	adds	r1, r2, r2
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	415b      	adcs	r3, r3
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f0a:	4641      	mov	r1, r8
 8003f0c:	1851      	adds	r1, r2, r1
 8003f0e:	6039      	str	r1, [r7, #0]
 8003f10:	4649      	mov	r1, r9
 8003f12:	414b      	adcs	r3, r1
 8003f14:	607b      	str	r3, [r7, #4]
 8003f16:	f04f 0200 	mov.w	r2, #0
 8003f1a:	f04f 0300 	mov.w	r3, #0
 8003f1e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f22:	4659      	mov	r1, fp
 8003f24:	00cb      	lsls	r3, r1, #3
 8003f26:	4651      	mov	r1, sl
 8003f28:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f2c:	4651      	mov	r1, sl
 8003f2e:	00ca      	lsls	r2, r1, #3
 8003f30:	4610      	mov	r0, r2
 8003f32:	4619      	mov	r1, r3
 8003f34:	4603      	mov	r3, r0
 8003f36:	4642      	mov	r2, r8
 8003f38:	189b      	adds	r3, r3, r2
 8003f3a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f3e:	464b      	mov	r3, r9
 8003f40:	460a      	mov	r2, r1
 8003f42:	eb42 0303 	adc.w	r3, r2, r3
 8003f46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f4a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f56:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003f5a:	f04f 0200 	mov.w	r2, #0
 8003f5e:	f04f 0300 	mov.w	r3, #0
 8003f62:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8003f66:	4649      	mov	r1, r9
 8003f68:	008b      	lsls	r3, r1, #2
 8003f6a:	4641      	mov	r1, r8
 8003f6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f70:	4641      	mov	r1, r8
 8003f72:	008a      	lsls	r2, r1, #2
 8003f74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003f78:	f7fc fe16 	bl	8000ba8 <__aeabi_uldivmod>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	460b      	mov	r3, r1
 8003f80:	4b0d      	ldr	r3, [pc, #52]	; (8003fb8 <UART_SetConfig+0x998>)
 8003f82:	fba3 1302 	umull	r1, r3, r3, r2
 8003f86:	095b      	lsrs	r3, r3, #5
 8003f88:	2164      	movs	r1, #100	; 0x64
 8003f8a:	fb01 f303 	mul.w	r3, r1, r3
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	011b      	lsls	r3, r3, #4
 8003f92:	3332      	adds	r3, #50	; 0x32
 8003f94:	4a08      	ldr	r2, [pc, #32]	; (8003fb8 <UART_SetConfig+0x998>)
 8003f96:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9a:	095b      	lsrs	r3, r3, #5
 8003f9c:	f003 020f 	and.w	r2, r3, #15
 8003fa0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4422      	add	r2, r4
 8003fa8:	609a      	str	r2, [r3, #8]
}
 8003faa:	e7ff      	b.n	8003fac <UART_SetConfig+0x98c>
 8003fac:	bf00      	nop
 8003fae:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fb8:	51eb851f 	.word	0x51eb851f

08003fbc <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b089      	sub	sp, #36	; 0x24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	fa93 f3a3 	rbit	r3, r3
 8003fd6:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	fab3 f383 	clz	r3, r3
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	2103      	movs	r1, #3
 8003fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	401a      	ands	r2, r3
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	fa93 f3a3 	rbit	r3, r3
 8003ff6:	61bb      	str	r3, [r7, #24]
  return result;
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	fab3 f383 	clz	r3, r3
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	fa01 f303 	lsl.w	r3, r1, r3
 8004008:	431a      	orrs	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	601a      	str	r2, [r3, #0]
}
 800400e:	bf00      	nop
 8004010:	3724      	adds	r7, #36	; 0x24
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 800401a:	b480      	push	{r7}
 800401c:	b089      	sub	sp, #36	; 0x24
 800401e:	af00      	add	r7, sp, #0
 8004020:	60f8      	str	r0, [r7, #12]
 8004022:	60b9      	str	r1, [r7, #8]
 8004024:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, (GPIO_OTYPER_OT_0 << POSITION_VAL(Pin)), (OutputType << POSITION_VAL(Pin)));
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	fa93 f3a3 	rbit	r3, r3
 8004034:	613b      	str	r3, [r7, #16]
  return result;
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	fab3 f383 	clz	r3, r3
 800403c:	b2db      	uxtb	r3, r3
 800403e:	4619      	mov	r1, r3
 8004040:	2301      	movs	r3, #1
 8004042:	408b      	lsls	r3, r1
 8004044:	43db      	mvns	r3, r3
 8004046:	401a      	ands	r2, r3
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	fa93 f3a3 	rbit	r3, r3
 8004052:	61bb      	str	r3, [r7, #24]
  return result;
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	fab3 f383 	clz	r3, r3
 800405a:	b2db      	uxtb	r3, r3
 800405c:	4619      	mov	r1, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	408b      	lsls	r3, r1
 8004062:	431a      	orrs	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	605a      	str	r2, [r3, #4]
}
 8004068:	bf00      	nop
 800406a:	3724      	adds	r7, #36	; 0x24
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8004074:	b480      	push	{r7}
 8004076:	b089      	sub	sp, #36	; 0x24
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	fa93 f3a3 	rbit	r3, r3
 800408e:	613b      	str	r3, [r7, #16]
  return result;
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	fab3 f383 	clz	r3, r3
 8004096:	b2db      	uxtb	r3, r3
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	2103      	movs	r1, #3
 800409c:	fa01 f303 	lsl.w	r3, r1, r3
 80040a0:	43db      	mvns	r3, r3
 80040a2:	401a      	ands	r2, r3
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	fa93 f3a3 	rbit	r3, r3
 80040ae:	61bb      	str	r3, [r7, #24]
  return result;
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	fab3 f383 	clz	r3, r3
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	6879      	ldr	r1, [r7, #4]
 80040bc:	fa01 f303 	lsl.w	r3, r1, r3
 80040c0:	431a      	orrs	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80040c6:	bf00      	nop
 80040c8:	3724      	adds	r7, #36	; 0x24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b089      	sub	sp, #36	; 0x24
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	60f8      	str	r0, [r7, #12]
 80040da:	60b9      	str	r1, [r7, #8]
 80040dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	fa93 f3a3 	rbit	r3, r3
 80040ec:	613b      	str	r3, [r7, #16]
  return result;
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	fab3 f383 	clz	r3, r3
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	2103      	movs	r1, #3
 80040fa:	fa01 f303 	lsl.w	r3, r1, r3
 80040fe:	43db      	mvns	r3, r3
 8004100:	401a      	ands	r2, r3
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	fa93 f3a3 	rbit	r3, r3
 800410c:	61bb      	str	r3, [r7, #24]
  return result;
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	fab3 f383 	clz	r3, r3
 8004114:	b2db      	uxtb	r3, r3
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	6879      	ldr	r1, [r7, #4]
 800411a:	fa01 f303 	lsl.w	r3, r1, r3
 800411e:	431a      	orrs	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	60da      	str	r2, [r3, #12]
}
 8004124:	bf00      	nop
 8004126:	3724      	adds	r7, #36	; 0x24
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004130:	b480      	push	{r7}
 8004132:	b089      	sub	sp, #36	; 0x24
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6a1a      	ldr	r2, [r3, #32]
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	fa93 f3a3 	rbit	r3, r3
 800414a:	613b      	str	r3, [r7, #16]
  return result;
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	fab3 f383 	clz	r3, r3
 8004152:	b2db      	uxtb	r3, r3
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	210f      	movs	r1, #15
 8004158:	fa01 f303 	lsl.w	r3, r1, r3
 800415c:	43db      	mvns	r3, r3
 800415e:	401a      	ands	r2, r3
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	fa93 f3a3 	rbit	r3, r3
 800416a:	61bb      	str	r3, [r7, #24]
  return result;
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	fab3 f383 	clz	r3, r3
 8004172:	b2db      	uxtb	r3, r3
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	6879      	ldr	r1, [r7, #4]
 8004178:	fa01 f303 	lsl.w	r3, r1, r3
 800417c:	431a      	orrs	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8004182:	bf00      	nop
 8004184:	3724      	adds	r7, #36	; 0x24
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800418e:	b480      	push	{r7}
 8004190:	b089      	sub	sp, #36	; 0x24
 8004192:	af00      	add	r7, sp, #0
 8004194:	60f8      	str	r0, [r7, #12]
 8004196:	60b9      	str	r1, [r7, #8]
 8004198:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	0a1b      	lsrs	r3, r3, #8
 80041a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	fa93 f3a3 	rbit	r3, r3
 80041aa:	613b      	str	r3, [r7, #16]
  return result;
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	fab3 f383 	clz	r3, r3
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	210f      	movs	r1, #15
 80041b8:	fa01 f303 	lsl.w	r3, r1, r3
 80041bc:	43db      	mvns	r3, r3
 80041be:	401a      	ands	r2, r3
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	0a1b      	lsrs	r3, r3, #8
 80041c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	fa93 f3a3 	rbit	r3, r3
 80041cc:	61bb      	str	r3, [r7, #24]
  return result;
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	fab3 f383 	clz	r3, r3
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	fa01 f303 	lsl.w	r3, r1, r3
 80041de:	431a      	orrs	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80041e4:	bf00      	nop
 80041e6:	3724      	adds	r7, #36	; 0x24
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b088      	sub	sp, #32
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80041fe:	2300      	movs	r3, #0
 8004200:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	fa93 f3a3 	rbit	r3, r3
 800420e:	613b      	str	r3, [r7, #16]
  return result;
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	fab3 f383 	clz	r3, r3
 8004216:	b2db      	uxtb	r3, r3
 8004218:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800421a:	e050      	b.n	80042be <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	2101      	movs	r1, #1
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	fa01 f303 	lsl.w	r3, r1, r3
 8004228:	4013      	ands	r3, r2
 800422a:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d042      	beq.n	80042b8 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d003      	beq.n	8004242 <LL_GPIO_Init+0x52>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	2b02      	cmp	r3, #2
 8004240:	d10d      	bne.n	800425e <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	461a      	mov	r2, r3
 8004248:	69b9      	ldr	r1, [r7, #24]
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7ff ff12 	bl	8004074 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	461a      	mov	r2, r3
 8004256:	69b9      	ldr	r1, [r7, #24]
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f7ff fede 	bl	800401a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	461a      	mov	r2, r3
 8004264:	69b9      	ldr	r1, [r7, #24]
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7ff ff33 	bl	80040d2 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	2b02      	cmp	r3, #2
 8004272:	d11a      	bne.n	80042aa <LL_GPIO_Init+0xba>
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	fa93 f3a3 	rbit	r3, r3
 800427e:	60bb      	str	r3, [r7, #8]
  return result;
 8004280:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004282:	fab3 f383 	clz	r3, r3
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b07      	cmp	r3, #7
 800428a:	d807      	bhi.n	800429c <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	461a      	mov	r2, r3
 8004292:	69b9      	ldr	r1, [r7, #24]
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f7ff ff4b 	bl	8004130 <LL_GPIO_SetAFPin_0_7>
 800429a:	e006      	b.n	80042aa <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	461a      	mov	r2, r3
 80042a2:	69b9      	ldr	r1, [r7, #24]
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7ff ff72 	bl	800418e <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	461a      	mov	r2, r3
 80042b0:	69b9      	ldr	r1, [r7, #24]
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7ff fe82 	bl	8003fbc <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	3301      	adds	r3, #1
 80042bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	fa22 f303 	lsr.w	r3, r2, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1a7      	bne.n	800421c <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3720      	adds	r7, #32
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80042dc:	4b04      	ldr	r3, [pc, #16]	; (80042f0 <LL_RCC_GetSysClkSource+0x18>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f003 030c 	and.w	r3, r3, #12
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	40023800 	.word	0x40023800

080042f4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80042f8:	4b04      	ldr	r3, [pc, #16]	; (800430c <LL_RCC_GetAHBPrescaler+0x18>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004300:	4618      	mov	r0, r3
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	40023800 	.word	0x40023800

08004310 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004314:	4b04      	ldr	r3, [pc, #16]	; (8004328 <LL_RCC_GetAPB1Prescaler+0x18>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 800431c:	4618      	mov	r0, r3
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	40023800 	.word	0x40023800

0800432c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004330:	4b04      	ldr	r3, [pc, #16]	; (8004344 <LL_RCC_GetAPB2Prescaler+0x18>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004338:	4618      	mov	r0, r3
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	40023800 	.word	0x40023800

08004348 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800434c:	4b04      	ldr	r3, [pc, #16]	; (8004360 <LL_RCC_PLL_GetMainSource+0x18>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8004354:	4618      	mov	r0, r3
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	40023800 	.word	0x40023800

08004364 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004368:	4b04      	ldr	r3, [pc, #16]	; (800437c <LL_RCC_PLL_GetN+0x18>)
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	099b      	lsrs	r3, r3, #6
 800436e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8004372:	4618      	mov	r0, r3
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	40023800 	.word	0x40023800

08004380 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8004384:	4b04      	ldr	r3, [pc, #16]	; (8004398 <LL_RCC_PLL_GetP+0x18>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800438c:	4618      	mov	r0, r3
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	40023800 	.word	0x40023800

0800439c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80043a0:	4b04      	ldr	r3, [pc, #16]	; (80043b4 <LL_RCC_PLL_GetDivider+0x18>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	40023800 	.word	0x40023800

080043b8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80043c0:	f000 f820 	bl	8004404 <RCC_GetSystemClockFreq>
 80043c4:	4602      	mov	r2, r0
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 f840 	bl	8004454 <RCC_GetHCLKClockFreq>
 80043d4:	4602      	mov	r2, r0
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 f84e 	bl	8004480 <RCC_GetPCLK1ClockFreq>
 80043e4:	4602      	mov	r2, r0
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 f85a 	bl	80044a8 <RCC_GetPCLK2ClockFreq>
 80043f4:	4602      	mov	r2, r0
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	60da      	str	r2, [r3, #12]
}
 80043fa:	bf00      	nop
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800440a:	2300      	movs	r3, #0
 800440c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800440e:	f7ff ff63 	bl	80042d8 <LL_RCC_GetSysClkSource>
 8004412:	4603      	mov	r3, r0
 8004414:	2b08      	cmp	r3, #8
 8004416:	d00c      	beq.n	8004432 <RCC_GetSystemClockFreq+0x2e>
 8004418:	2b08      	cmp	r3, #8
 800441a:	d80f      	bhi.n	800443c <RCC_GetSystemClockFreq+0x38>
 800441c:	2b00      	cmp	r3, #0
 800441e:	d002      	beq.n	8004426 <RCC_GetSystemClockFreq+0x22>
 8004420:	2b04      	cmp	r3, #4
 8004422:	d003      	beq.n	800442c <RCC_GetSystemClockFreq+0x28>
 8004424:	e00a      	b.n	800443c <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004426:	4b09      	ldr	r3, [pc, #36]	; (800444c <RCC_GetSystemClockFreq+0x48>)
 8004428:	607b      	str	r3, [r7, #4]
      break;
 800442a:	e00a      	b.n	8004442 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800442c:	4b08      	ldr	r3, [pc, #32]	; (8004450 <RCC_GetSystemClockFreq+0x4c>)
 800442e:	607b      	str	r3, [r7, #4]
      break;
 8004430:	e007      	b.n	8004442 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8004432:	2008      	movs	r0, #8
 8004434:	f000 f84c 	bl	80044d0 <RCC_PLL_GetFreqDomain_SYS>
 8004438:	6078      	str	r0, [r7, #4]
      break;
 800443a:	e002      	b.n	8004442 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800443c:	4b03      	ldr	r3, [pc, #12]	; (800444c <RCC_GetSystemClockFreq+0x48>)
 800443e:	607b      	str	r3, [r7, #4]
      break;
 8004440:	bf00      	nop
  }

  return frequency;
 8004442:	687b      	ldr	r3, [r7, #4]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	00f42400 	.word	0x00f42400
 8004450:	007a1200 	.word	0x007a1200

08004454 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800445c:	f7ff ff4a 	bl	80042f4 <LL_RCC_GetAHBPrescaler>
 8004460:	4603      	mov	r3, r0
 8004462:	091b      	lsrs	r3, r3, #4
 8004464:	f003 030f 	and.w	r3, r3, #15
 8004468:	4a04      	ldr	r2, [pc, #16]	; (800447c <RCC_GetHCLKClockFreq+0x28>)
 800446a:	5cd3      	ldrb	r3, [r2, r3]
 800446c:	461a      	mov	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	40d3      	lsrs	r3, r2
}
 8004472:	4618      	mov	r0, r3
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	0800af20 	.word	0x0800af20

08004480 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004488:	f7ff ff42 	bl	8004310 <LL_RCC_GetAPB1Prescaler>
 800448c:	4603      	mov	r3, r0
 800448e:	0a9b      	lsrs	r3, r3, #10
 8004490:	4a04      	ldr	r2, [pc, #16]	; (80044a4 <RCC_GetPCLK1ClockFreq+0x24>)
 8004492:	5cd3      	ldrb	r3, [r2, r3]
 8004494:	461a      	mov	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	40d3      	lsrs	r3, r2
}
 800449a:	4618      	mov	r0, r3
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	0800af30 	.word	0x0800af30

080044a8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80044b0:	f7ff ff3c 	bl	800432c <LL_RCC_GetAPB2Prescaler>
 80044b4:	4603      	mov	r3, r0
 80044b6:	0b5b      	lsrs	r3, r3, #13
 80044b8:	4a04      	ldr	r2, [pc, #16]	; (80044cc <RCC_GetPCLK2ClockFreq+0x24>)
 80044ba:	5cd3      	ldrb	r3, [r2, r3]
 80044bc:	461a      	mov	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	40d3      	lsrs	r3, r2
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	0800af30 	.word	0x0800af30

080044d0 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80044d0:	b590      	push	{r4, r7, lr}
 80044d2:	b087      	sub	sp, #28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	617b      	str	r3, [r7, #20]
 80044dc:	2300      	movs	r3, #0
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	2300      	movs	r3, #0
 80044e2:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80044e4:	f7ff ff30 	bl	8004348 <LL_RCC_PLL_GetMainSource>
 80044e8:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d004      	beq.n	80044fa <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044f6:	d003      	beq.n	8004500 <RCC_PLL_GetFreqDomain_SYS+0x30>
 80044f8:	e005      	b.n	8004506 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80044fa:	4b12      	ldr	r3, [pc, #72]	; (8004544 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80044fc:	617b      	str	r3, [r7, #20]
      break;
 80044fe:	e005      	b.n	800450c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004500:	4b11      	ldr	r3, [pc, #68]	; (8004548 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8004502:	617b      	str	r3, [r7, #20]
      break;
 8004504:	e002      	b.n	800450c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8004506:	4b0f      	ldr	r3, [pc, #60]	; (8004544 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004508:	617b      	str	r3, [r7, #20]
      break;
 800450a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b08      	cmp	r3, #8
 8004510:	d113      	bne.n	800453a <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004512:	f7ff ff43 	bl	800439c <LL_RCC_PLL_GetDivider>
 8004516:	4602      	mov	r2, r0
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	fbb3 f4f2 	udiv	r4, r3, r2
 800451e:	f7ff ff21 	bl	8004364 <LL_RCC_PLL_GetN>
 8004522:	4603      	mov	r3, r0
 8004524:	fb03 f404 	mul.w	r4, r3, r4
 8004528:	f7ff ff2a 	bl	8004380 <LL_RCC_PLL_GetP>
 800452c:	4603      	mov	r3, r0
 800452e:	0c1b      	lsrs	r3, r3, #16
 8004530:	3301      	adds	r3, #1
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	fbb4 f3f3 	udiv	r3, r4, r3
 8004538:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800453a:	693b      	ldr	r3, [r7, #16]
}
 800453c:	4618      	mov	r0, r3
 800453e:	371c      	adds	r7, #28
 8004540:	46bd      	mov	sp, r7
 8004542:	bd90      	pop	{r4, r7, pc}
 8004544:	00f42400 	.word	0x00f42400
 8004548:	007a1200 	.word	0x007a1200

0800454c <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455c:	2b40      	cmp	r3, #64	; 0x40
 800455e:	d101      	bne.n	8004564 <LL_SPI_IsEnabled+0x18>
 8004560:	2301      	movs	r3, #1
 8004562:	e000      	b.n	8004566 <LL_SPI_IsEnabled+0x1a>
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8004572:	b480      	push	{r7}
 8004574:	b083      	sub	sp, #12
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
 800457a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	b29b      	uxth	r3, r3
 8004580:	461a      	mov	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	611a      	str	r2, [r3, #16]
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b084      	sub	sp, #16
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f7ff ffd3 	bl	800454c <LL_SPI_IsEnabled>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d139      	bne.n	8004620 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045b4:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	6811      	ldr	r1, [r2, #0]
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	6852      	ldr	r2, [r2, #4]
 80045c0:	4311      	orrs	r1, r2
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	6892      	ldr	r2, [r2, #8]
 80045c6:	4311      	orrs	r1, r2
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	68d2      	ldr	r2, [r2, #12]
 80045cc:	4311      	orrs	r1, r2
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	6912      	ldr	r2, [r2, #16]
 80045d2:	4311      	orrs	r1, r2
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	6952      	ldr	r2, [r2, #20]
 80045d8:	4311      	orrs	r1, r2
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	6992      	ldr	r2, [r2, #24]
 80045de:	4311      	orrs	r1, r2
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	69d2      	ldr	r2, [r2, #28]
 80045e4:	4311      	orrs	r1, r2
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	6a12      	ldr	r2, [r2, #32]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	431a      	orrs	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f023 0204 	bic.w	r2, r3, #4
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	0c1b      	lsrs	r3, r3, #16
 8004600:	431a      	orrs	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800460e:	d105      	bne.n	800461c <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	4619      	mov	r1, r3
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f7ff ffab 	bl	8004572 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800461c:	2300      	movs	r3, #0
 800461e:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	61da      	str	r2, [r3, #28]
  return status;
 800462c:	7bfb      	ldrb	r3, [r7, #15]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8004636:	b480      	push	{r7}
 8004638:	b083      	sub	sp, #12
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
 800463e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8004652:	b480      	push	{r7}
 8004654:	b083      	sub	sp, #12
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
 800465a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004662:	bf00      	nop
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
 8004676:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800467e:	bf00      	nop
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
 8004692:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	635a      	str	r2, [r3, #52]	; 0x34
}
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b083      	sub	sp, #12
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
 80046ae:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b083      	sub	sp, #12
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
 80046ca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80046d2:	bf00      	nop
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
 80046e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	641a      	str	r2, [r3, #64]	; 0x40
}
 80046ee:	bf00      	nop
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b083      	sub	sp, #12
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	f043 0201 	orr.w	r2, r3, #1
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	615a      	str	r2, [r3, #20]
}
 800470e:	bf00      	nop
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
	...

0800471c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a3d      	ldr	r2, [pc, #244]	; (8004824 <LL_TIM_Init+0x108>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d013      	beq.n	800475c <LL_TIM_Init+0x40>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800473a:	d00f      	beq.n	800475c <LL_TIM_Init+0x40>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a3a      	ldr	r2, [pc, #232]	; (8004828 <LL_TIM_Init+0x10c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d00b      	beq.n	800475c <LL_TIM_Init+0x40>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a39      	ldr	r2, [pc, #228]	; (800482c <LL_TIM_Init+0x110>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d007      	beq.n	800475c <LL_TIM_Init+0x40>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a38      	ldr	r2, [pc, #224]	; (8004830 <LL_TIM_Init+0x114>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d003      	beq.n	800475c <LL_TIM_Init+0x40>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a37      	ldr	r2, [pc, #220]	; (8004834 <LL_TIM_Init+0x118>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d106      	bne.n	800476a <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	4313      	orrs	r3, r2
 8004768:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a2d      	ldr	r2, [pc, #180]	; (8004824 <LL_TIM_Init+0x108>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d02b      	beq.n	80047ca <LL_TIM_Init+0xae>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004778:	d027      	beq.n	80047ca <LL_TIM_Init+0xae>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a2a      	ldr	r2, [pc, #168]	; (8004828 <LL_TIM_Init+0x10c>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d023      	beq.n	80047ca <LL_TIM_Init+0xae>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a29      	ldr	r2, [pc, #164]	; (800482c <LL_TIM_Init+0x110>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d01f      	beq.n	80047ca <LL_TIM_Init+0xae>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a28      	ldr	r2, [pc, #160]	; (8004830 <LL_TIM_Init+0x114>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d01b      	beq.n	80047ca <LL_TIM_Init+0xae>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a27      	ldr	r2, [pc, #156]	; (8004834 <LL_TIM_Init+0x118>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d017      	beq.n	80047ca <LL_TIM_Init+0xae>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a26      	ldr	r2, [pc, #152]	; (8004838 <LL_TIM_Init+0x11c>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d013      	beq.n	80047ca <LL_TIM_Init+0xae>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a25      	ldr	r2, [pc, #148]	; (800483c <LL_TIM_Init+0x120>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d00f      	beq.n	80047ca <LL_TIM_Init+0xae>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a24      	ldr	r2, [pc, #144]	; (8004840 <LL_TIM_Init+0x124>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d00b      	beq.n	80047ca <LL_TIM_Init+0xae>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a23      	ldr	r2, [pc, #140]	; (8004844 <LL_TIM_Init+0x128>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d007      	beq.n	80047ca <LL_TIM_Init+0xae>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a22      	ldr	r2, [pc, #136]	; (8004848 <LL_TIM_Init+0x12c>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d003      	beq.n	80047ca <LL_TIM_Init+0xae>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a21      	ldr	r2, [pc, #132]	; (800484c <LL_TIM_Init+0x130>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d106      	bne.n	80047d8 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	4619      	mov	r1, r3
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7ff ff34 	bl	8004652 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	881b      	ldrh	r3, [r3, #0]
 80047ee:	4619      	mov	r1, r3
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f7ff ff20 	bl	8004636 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a0a      	ldr	r2, [pc, #40]	; (8004824 <LL_TIM_Init+0x108>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d003      	beq.n	8004806 <LL_TIM_Init+0xea>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a0c      	ldr	r2, [pc, #48]	; (8004834 <LL_TIM_Init+0x118>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d105      	bne.n	8004812 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	7c1b      	ldrb	r3, [r3, #16]
 800480a:	4619      	mov	r1, r3
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7ff ff2e 	bl	800466e <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7ff ff71 	bl	80046fa <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	40010000 	.word	0x40010000
 8004828:	40000400 	.word	0x40000400
 800482c:	40000800 	.word	0x40000800
 8004830:	40000c00 	.word	0x40000c00
 8004834:	40010400 	.word	0x40010400
 8004838:	40014000 	.word	0x40014000
 800483c:	40014400 	.word	0x40014400
 8004840:	40014800 	.word	0x40014800
 8004844:	40001800 	.word	0x40001800
 8004848:	40001c00 	.word	0x40001c00
 800484c:	40002000 	.word	0x40002000

08004850 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004866:	d027      	beq.n	80048b8 <LL_TIM_OC_Init+0x68>
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800486e:	d82a      	bhi.n	80048c6 <LL_TIM_OC_Init+0x76>
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004876:	d018      	beq.n	80048aa <LL_TIM_OC_Init+0x5a>
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800487e:	d822      	bhi.n	80048c6 <LL_TIM_OC_Init+0x76>
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d003      	beq.n	800488e <LL_TIM_OC_Init+0x3e>
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	2b10      	cmp	r3, #16
 800488a:	d007      	beq.n	800489c <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800488c:	e01b      	b.n	80048c6 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800488e:	6879      	ldr	r1, [r7, #4]
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f000 f81f 	bl	80048d4 <OC1Config>
 8004896:	4603      	mov	r3, r0
 8004898:	75fb      	strb	r3, [r7, #23]
      break;
 800489a:	e015      	b.n	80048c8 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800489c:	6879      	ldr	r1, [r7, #4]
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 f884 	bl	80049ac <OC2Config>
 80048a4:	4603      	mov	r3, r0
 80048a6:	75fb      	strb	r3, [r7, #23]
      break;
 80048a8:	e00e      	b.n	80048c8 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80048aa:	6879      	ldr	r1, [r7, #4]
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f000 f8ed 	bl	8004a8c <OC3Config>
 80048b2:	4603      	mov	r3, r0
 80048b4:	75fb      	strb	r3, [r7, #23]
      break;
 80048b6:	e007      	b.n	80048c8 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80048b8:	6879      	ldr	r1, [r7, #4]
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 f956 	bl	8004b6c <OC4Config>
 80048c0:	4603      	mov	r3, r0
 80048c2:	75fb      	strb	r3, [r7, #23]
      break;
 80048c4:	e000      	b.n	80048c8 <LL_TIM_OC_Init+0x78>
      break;
 80048c6:	bf00      	nop
  }

  return result;
 80048c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3718      	adds	r7, #24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
	...

080048d4 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	f023 0201 	bic.w	r2, r3, #1
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f023 0303 	bic.w	r3, r3, #3
 8004902:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4313      	orrs	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f023 0202 	bic.w	r2, r3, #2
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	4313      	orrs	r3, r2
 800491e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f023 0201 	bic.w	r2, r3, #1
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	4313      	orrs	r3, r2
 800492c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a1c      	ldr	r2, [pc, #112]	; (80049a4 <OC1Config+0xd0>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d003      	beq.n	800493e <OC1Config+0x6a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a1b      	ldr	r2, [pc, #108]	; (80049a8 <OC1Config+0xd4>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d11e      	bne.n	800497c <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f023 0208 	bic.w	r2, r3, #8
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4313      	orrs	r3, r2
 800494c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f023 0204 	bic.w	r2, r3, #4
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	4313      	orrs	r3, r2
 800495c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	4313      	orrs	r3, r2
 800496a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	4313      	orrs	r3, r2
 800497a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	4619      	mov	r1, r3
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7ff fe7b 	bl	800468a <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3718      	adds	r7, #24
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40010000 	.word	0x40010000
 80049a8:	40010400 	.word	0x40010400

080049ac <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b086      	sub	sp, #24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	f023 0210 	bic.w	r2, r3, #16
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	021b      	lsls	r3, r3, #8
 80049e8:	4313      	orrs	r3, r2
 80049ea:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f023 0220 	bic.w	r2, r3, #32
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	011b      	lsls	r3, r3, #4
 80049f8:	4313      	orrs	r3, r2
 80049fa:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	f023 0210 	bic.w	r2, r3, #16
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	011b      	lsls	r3, r3, #4
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a1d      	ldr	r2, [pc, #116]	; (8004a84 <OC2Config+0xd8>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d003      	beq.n	8004a1c <OC2Config+0x70>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a1c      	ldr	r2, [pc, #112]	; (8004a88 <OC2Config+0xdc>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d11f      	bne.n	8004a5c <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	019b      	lsls	r3, r3, #6
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	019b      	lsls	r3, r3, #6
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	00db      	lsls	r3, r3, #3
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7ff fe19 	bl	80046a6 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3718      	adds	r7, #24
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	40010000 	.word	0x40010000
 8004a88:	40010400 	.word	0x40010400

08004a8c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f023 0303 	bic.w	r3, r3, #3
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	021b      	lsls	r3, r3, #8
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	021b      	lsls	r3, r3, #8
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a1d      	ldr	r2, [pc, #116]	; (8004b64 <OC3Config+0xd8>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d003      	beq.n	8004afa <OC3Config+0x6e>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a1c      	ldr	r2, [pc, #112]	; (8004b68 <OC3Config+0xdc>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d11f      	bne.n	8004b3a <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	029b      	lsls	r3, r3, #10
 8004b06:	4313      	orrs	r3, r2
 8004b08:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	029b      	lsls	r3, r3, #10
 8004b16:	4313      	orrs	r3, r2
 8004b18:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	011b      	lsls	r3, r3, #4
 8004b26:	4313      	orrs	r3, r2
 8004b28:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	015b      	lsls	r3, r3, #5
 8004b36:	4313      	orrs	r3, r2
 8004b38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7ff fdb8 	bl	80046c2 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3718      	adds	r7, #24
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	40010000 	.word	0x40010000
 8004b68:	40010400 	.word	0x40010400

08004b6c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	69db      	ldr	r3, [r3, #28]
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	021b      	lsls	r3, r3, #8
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	031b      	lsls	r3, r3, #12
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	031b      	lsls	r3, r3, #12
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a11      	ldr	r2, [pc, #68]	; (8004c14 <OC4Config+0xa8>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d003      	beq.n	8004bdc <OC4Config+0x70>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a10      	ldr	r2, [pc, #64]	; (8004c18 <OC4Config+0xac>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d107      	bne.n	8004bec <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	019b      	lsls	r3, r3, #6
 8004be8:	4313      	orrs	r3, r2
 8004bea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f7ff fd6d 	bl	80046de <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3718      	adds	r7, #24
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	40010000 	.word	0x40010000
 8004c18:	40010400 	.word	0x40010400

08004c1c <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c30:	bf0c      	ite	eq
 8004c32:	2301      	moveq	r3, #1
 8004c34:	2300      	movne	r3, #0
 8004c36:	b2db      	uxtb	r3, r3
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	611a      	str	r2, [r3, #16]
}
 8004c5e:	bf00      	nop
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b083      	sub	sp, #12
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
 8004c72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	695b      	ldr	r3, [r3, #20]
 8004c78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	615a      	str	r2, [r3, #20]
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8004c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c94:	b0c0      	sub	sp, #256	; 0x100
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004c9c:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8004ca0:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004ca4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cb0:	f040 810c 	bne.w	8004ecc <LL_USART_SetBaudRate+0x23c>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004cb4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004cbe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004cc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004cc6:	4622      	mov	r2, r4
 8004cc8:	462b      	mov	r3, r5
 8004cca:	1891      	adds	r1, r2, r2
 8004ccc:	6639      	str	r1, [r7, #96]	; 0x60
 8004cce:	415b      	adcs	r3, r3
 8004cd0:	667b      	str	r3, [r7, #100]	; 0x64
 8004cd2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004cd6:	4621      	mov	r1, r4
 8004cd8:	eb12 0801 	adds.w	r8, r2, r1
 8004cdc:	4629      	mov	r1, r5
 8004cde:	eb43 0901 	adc.w	r9, r3, r1
 8004ce2:	f04f 0200 	mov.w	r2, #0
 8004ce6:	f04f 0300 	mov.w	r3, #0
 8004cea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cf6:	4690      	mov	r8, r2
 8004cf8:	4699      	mov	r9, r3
 8004cfa:	4623      	mov	r3, r4
 8004cfc:	eb18 0303 	adds.w	r3, r8, r3
 8004d00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d04:	462b      	mov	r3, r5
 8004d06:	eb49 0303 	adc.w	r3, r9, r3
 8004d0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d0e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004d12:	2200      	movs	r2, #0
 8004d14:	469a      	mov	sl, r3
 8004d16:	4693      	mov	fp, r2
 8004d18:	eb1a 030a 	adds.w	r3, sl, sl
 8004d1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d1e:	eb4b 030b 	adc.w	r3, fp, fp
 8004d22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d24:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004d2c:	f7fb ff3c 	bl	8000ba8 <__aeabi_uldivmod>
 8004d30:	4602      	mov	r2, r0
 8004d32:	460b      	mov	r3, r1
 8004d34:	4b64      	ldr	r3, [pc, #400]	; (8004ec8 <LL_USART_SetBaudRate+0x238>)
 8004d36:	fba3 2302 	umull	r2, r3, r3, r2
 8004d3a:	095b      	lsrs	r3, r3, #5
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	011b      	lsls	r3, r3, #4
 8004d40:	b29c      	uxth	r4, r3
 8004d42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d46:	2200      	movs	r2, #0
 8004d48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d4c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004d50:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8004d54:	4642      	mov	r2, r8
 8004d56:	464b      	mov	r3, r9
 8004d58:	1891      	adds	r1, r2, r2
 8004d5a:	6539      	str	r1, [r7, #80]	; 0x50
 8004d5c:	415b      	adcs	r3, r3
 8004d5e:	657b      	str	r3, [r7, #84]	; 0x54
 8004d60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004d64:	4641      	mov	r1, r8
 8004d66:	1851      	adds	r1, r2, r1
 8004d68:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d6a:	4649      	mov	r1, r9
 8004d6c:	414b      	adcs	r3, r1
 8004d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d70:	f04f 0200 	mov.w	r2, #0
 8004d74:	f04f 0300 	mov.w	r3, #0
 8004d78:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8004d7c:	4659      	mov	r1, fp
 8004d7e:	00cb      	lsls	r3, r1, #3
 8004d80:	4651      	mov	r1, sl
 8004d82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d86:	4651      	mov	r1, sl
 8004d88:	00ca      	lsls	r2, r1, #3
 8004d8a:	4610      	mov	r0, r2
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	4603      	mov	r3, r0
 8004d90:	4642      	mov	r2, r8
 8004d92:	189b      	adds	r3, r3, r2
 8004d94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d98:	464b      	mov	r3, r9
 8004d9a:	460a      	mov	r2, r1
 8004d9c:	eb42 0303 	adc.w	r3, r2, r3
 8004da0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004da4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004da8:	2200      	movs	r2, #0
 8004daa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004dae:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8004db2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004db6:	460b      	mov	r3, r1
 8004db8:	18db      	adds	r3, r3, r3
 8004dba:	643b      	str	r3, [r7, #64]	; 0x40
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	eb42 0303 	adc.w	r3, r2, r3
 8004dc2:	647b      	str	r3, [r7, #68]	; 0x44
 8004dc4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004dc8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004dcc:	f7fb feec 	bl	8000ba8 <__aeabi_uldivmod>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	4611      	mov	r1, r2
 8004dd6:	4b3c      	ldr	r3, [pc, #240]	; (8004ec8 <LL_USART_SetBaudRate+0x238>)
 8004dd8:	fba3 2301 	umull	r2, r3, r3, r1
 8004ddc:	095b      	lsrs	r3, r3, #5
 8004dde:	2264      	movs	r2, #100	; 0x64
 8004de0:	fb02 f303 	mul.w	r3, r2, r3
 8004de4:	1acb      	subs	r3, r1, r3
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004dec:	4b36      	ldr	r3, [pc, #216]	; (8004ec8 <LL_USART_SetBaudRate+0x238>)
 8004dee:	fba3 2302 	umull	r2, r3, r3, r2
 8004df2:	095b      	lsrs	r3, r3, #5
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	005b      	lsls	r3, r3, #1
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	4423      	add	r3, r4
 8004e02:	b29c      	uxth	r4, r3
 8004e04:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e0e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e12:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8004e16:	4642      	mov	r2, r8
 8004e18:	464b      	mov	r3, r9
 8004e1a:	1891      	adds	r1, r2, r2
 8004e1c:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e1e:	415b      	adcs	r3, r3
 8004e20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e22:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e26:	4641      	mov	r1, r8
 8004e28:	1851      	adds	r1, r2, r1
 8004e2a:	6339      	str	r1, [r7, #48]	; 0x30
 8004e2c:	4649      	mov	r1, r9
 8004e2e:	414b      	adcs	r3, r1
 8004e30:	637b      	str	r3, [r7, #52]	; 0x34
 8004e32:	f04f 0200 	mov.w	r2, #0
 8004e36:	f04f 0300 	mov.w	r3, #0
 8004e3a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004e3e:	4659      	mov	r1, fp
 8004e40:	00cb      	lsls	r3, r1, #3
 8004e42:	4651      	mov	r1, sl
 8004e44:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e48:	4651      	mov	r1, sl
 8004e4a:	00ca      	lsls	r2, r1, #3
 8004e4c:	4610      	mov	r0, r2
 8004e4e:	4619      	mov	r1, r3
 8004e50:	4603      	mov	r3, r0
 8004e52:	4642      	mov	r2, r8
 8004e54:	189b      	adds	r3, r3, r2
 8004e56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e5a:	464b      	mov	r3, r9
 8004e5c:	460a      	mov	r2, r1
 8004e5e:	eb42 0303 	adc.w	r3, r2, r3
 8004e62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004e66:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e70:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8004e74:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004e78:	460b      	mov	r3, r1
 8004e7a:	18db      	adds	r3, r3, r3
 8004e7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e7e:	4613      	mov	r3, r2
 8004e80:	eb42 0303 	adc.w	r3, r2, r3
 8004e84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e8a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8004e8e:	f7fb fe8b 	bl	8000ba8 <__aeabi_uldivmod>
 8004e92:	4602      	mov	r2, r0
 8004e94:	460b      	mov	r3, r1
 8004e96:	4b0c      	ldr	r3, [pc, #48]	; (8004ec8 <LL_USART_SetBaudRate+0x238>)
 8004e98:	fba3 1302 	umull	r1, r3, r3, r2
 8004e9c:	095b      	lsrs	r3, r3, #5
 8004e9e:	2164      	movs	r1, #100	; 0x64
 8004ea0:	fb01 f303 	mul.w	r3, r1, r3
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	3332      	adds	r3, #50	; 0x32
 8004eaa:	4a07      	ldr	r2, [pc, #28]	; (8004ec8 <LL_USART_SetBaudRate+0x238>)
 8004eac:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb0:	095b      	lsrs	r3, r3, #5
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	f003 0307 	and.w	r3, r3, #7
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	4423      	add	r3, r4
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ec4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 8004ec6:	e107      	b.n	80050d8 <LL_USART_SetBaudRate+0x448>
 8004ec8:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004ecc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004ed6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004eda:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8004ede:	4642      	mov	r2, r8
 8004ee0:	464b      	mov	r3, r9
 8004ee2:	1891      	adds	r1, r2, r2
 8004ee4:	6239      	str	r1, [r7, #32]
 8004ee6:	415b      	adcs	r3, r3
 8004ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004eee:	4641      	mov	r1, r8
 8004ef0:	1854      	adds	r4, r2, r1
 8004ef2:	4649      	mov	r1, r9
 8004ef4:	eb43 0501 	adc.w	r5, r3, r1
 8004ef8:	f04f 0200 	mov.w	r2, #0
 8004efc:	f04f 0300 	mov.w	r3, #0
 8004f00:	00eb      	lsls	r3, r5, #3
 8004f02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f06:	00e2      	lsls	r2, r4, #3
 8004f08:	4614      	mov	r4, r2
 8004f0a:	461d      	mov	r5, r3
 8004f0c:	4643      	mov	r3, r8
 8004f0e:	18e3      	adds	r3, r4, r3
 8004f10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f14:	464b      	mov	r3, r9
 8004f16:	eb45 0303 	adc.w	r3, r5, r3
 8004f1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004f1e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004f22:	2200      	movs	r2, #0
 8004f24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f28:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004f2c:	f04f 0200 	mov.w	r2, #0
 8004f30:	f04f 0300 	mov.w	r3, #0
 8004f34:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8004f38:	4629      	mov	r1, r5
 8004f3a:	008b      	lsls	r3, r1, #2
 8004f3c:	4621      	mov	r1, r4
 8004f3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f42:	4621      	mov	r1, r4
 8004f44:	008a      	lsls	r2, r1, #2
 8004f46:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8004f4a:	f7fb fe2d 	bl	8000ba8 <__aeabi_uldivmod>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	460b      	mov	r3, r1
 8004f52:	4b64      	ldr	r3, [pc, #400]	; (80050e4 <LL_USART_SetBaudRate+0x454>)
 8004f54:	fba3 2302 	umull	r2, r3, r3, r2
 8004f58:	095b      	lsrs	r3, r3, #5
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	011b      	lsls	r3, r3, #4
 8004f5e:	b29c      	uxth	r4, r3
 8004f60:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f64:	2200      	movs	r2, #0
 8004f66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f6e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8004f72:	4642      	mov	r2, r8
 8004f74:	464b      	mov	r3, r9
 8004f76:	1891      	adds	r1, r2, r2
 8004f78:	61b9      	str	r1, [r7, #24]
 8004f7a:	415b      	adcs	r3, r3
 8004f7c:	61fb      	str	r3, [r7, #28]
 8004f7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f82:	4641      	mov	r1, r8
 8004f84:	1851      	adds	r1, r2, r1
 8004f86:	6139      	str	r1, [r7, #16]
 8004f88:	4649      	mov	r1, r9
 8004f8a:	414b      	adcs	r3, r1
 8004f8c:	617b      	str	r3, [r7, #20]
 8004f8e:	f04f 0200 	mov.w	r2, #0
 8004f92:	f04f 0300 	mov.w	r3, #0
 8004f96:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f9a:	4659      	mov	r1, fp
 8004f9c:	00cb      	lsls	r3, r1, #3
 8004f9e:	4651      	mov	r1, sl
 8004fa0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fa4:	4651      	mov	r1, sl
 8004fa6:	00ca      	lsls	r2, r1, #3
 8004fa8:	4610      	mov	r0, r2
 8004faa:	4619      	mov	r1, r3
 8004fac:	4603      	mov	r3, r0
 8004fae:	4642      	mov	r2, r8
 8004fb0:	189b      	adds	r3, r3, r2
 8004fb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004fb6:	464b      	mov	r3, r9
 8004fb8:	460a      	mov	r2, r1
 8004fba:	eb42 0303 	adc.w	r3, r2, r3
 8004fbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004fc2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fcc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	f04f 0300 	mov.w	r3, #0
 8004fd8:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8004fdc:	4649      	mov	r1, r9
 8004fde:	008b      	lsls	r3, r1, #2
 8004fe0:	4641      	mov	r1, r8
 8004fe2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fe6:	4641      	mov	r1, r8
 8004fe8:	008a      	lsls	r2, r1, #2
 8004fea:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8004fee:	f7fb fddb 	bl	8000ba8 <__aeabi_uldivmod>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	4b3b      	ldr	r3, [pc, #236]	; (80050e4 <LL_USART_SetBaudRate+0x454>)
 8004ff8:	fba3 1302 	umull	r1, r3, r3, r2
 8004ffc:	095b      	lsrs	r3, r3, #5
 8004ffe:	2164      	movs	r1, #100	; 0x64
 8005000:	fb01 f303 	mul.w	r3, r1, r3
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	011b      	lsls	r3, r3, #4
 8005008:	3332      	adds	r3, #50	; 0x32
 800500a:	4a36      	ldr	r2, [pc, #216]	; (80050e4 <LL_USART_SetBaudRate+0x454>)
 800500c:	fba2 2303 	umull	r2, r3, r2, r3
 8005010:	095b      	lsrs	r3, r3, #5
 8005012:	b29b      	uxth	r3, r3
 8005014:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005018:	b29b      	uxth	r3, r3
 800501a:	4423      	add	r3, r4
 800501c:	b29c      	uxth	r4, r3
 800501e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005022:	2200      	movs	r2, #0
 8005024:	67bb      	str	r3, [r7, #120]	; 0x78
 8005026:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005028:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800502c:	4642      	mov	r2, r8
 800502e:	464b      	mov	r3, r9
 8005030:	1891      	adds	r1, r2, r2
 8005032:	60b9      	str	r1, [r7, #8]
 8005034:	415b      	adcs	r3, r3
 8005036:	60fb      	str	r3, [r7, #12]
 8005038:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800503c:	4641      	mov	r1, r8
 800503e:	1851      	adds	r1, r2, r1
 8005040:	6039      	str	r1, [r7, #0]
 8005042:	4649      	mov	r1, r9
 8005044:	414b      	adcs	r3, r1
 8005046:	607b      	str	r3, [r7, #4]
 8005048:	f04f 0200 	mov.w	r2, #0
 800504c:	f04f 0300 	mov.w	r3, #0
 8005050:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005054:	4659      	mov	r1, fp
 8005056:	00cb      	lsls	r3, r1, #3
 8005058:	4651      	mov	r1, sl
 800505a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800505e:	4651      	mov	r1, sl
 8005060:	00ca      	lsls	r2, r1, #3
 8005062:	4610      	mov	r0, r2
 8005064:	4619      	mov	r1, r3
 8005066:	4603      	mov	r3, r0
 8005068:	4642      	mov	r2, r8
 800506a:	189b      	adds	r3, r3, r2
 800506c:	673b      	str	r3, [r7, #112]	; 0x70
 800506e:	464b      	mov	r3, r9
 8005070:	460a      	mov	r2, r1
 8005072:	eb42 0303 	adc.w	r3, r2, r3
 8005076:	677b      	str	r3, [r7, #116]	; 0x74
 8005078:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800507c:	2200      	movs	r2, #0
 800507e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005080:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005082:	f04f 0200 	mov.w	r2, #0
 8005086:	f04f 0300 	mov.w	r3, #0
 800508a:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 800508e:	4649      	mov	r1, r9
 8005090:	008b      	lsls	r3, r1, #2
 8005092:	4641      	mov	r1, r8
 8005094:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005098:	4641      	mov	r1, r8
 800509a:	008a      	lsls	r2, r1, #2
 800509c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80050a0:	f7fb fd82 	bl	8000ba8 <__aeabi_uldivmod>
 80050a4:	4602      	mov	r2, r0
 80050a6:	460b      	mov	r3, r1
 80050a8:	4b0e      	ldr	r3, [pc, #56]	; (80050e4 <LL_USART_SetBaudRate+0x454>)
 80050aa:	fba3 1302 	umull	r1, r3, r3, r2
 80050ae:	095b      	lsrs	r3, r3, #5
 80050b0:	2164      	movs	r1, #100	; 0x64
 80050b2:	fb01 f303 	mul.w	r3, r1, r3
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	011b      	lsls	r3, r3, #4
 80050ba:	3332      	adds	r3, #50	; 0x32
 80050bc:	4a09      	ldr	r2, [pc, #36]	; (80050e4 <LL_USART_SetBaudRate+0x454>)
 80050be:	fba2 2303 	umull	r2, r3, r2, r3
 80050c2:	095b      	lsrs	r3, r3, #5
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	f003 030f 	and.w	r3, r3, #15
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	4423      	add	r3, r4
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	461a      	mov	r2, r3
 80050d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050d6:	609a      	str	r2, [r3, #8]
}
 80050d8:	bf00      	nop
 80050da:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80050de:	46bd      	mov	sp, r7
 80050e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050e4:	51eb851f 	.word	0x51eb851f

080050e8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b088      	sub	sp, #32
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80050f6:	2300      	movs	r3, #0
 80050f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f7ff fd8e 	bl	8004c1c <LL_USART_IsEnabled>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d15e      	bne.n	80051c4 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800510e:	f023 030c 	bic.w	r3, r3, #12
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	6851      	ldr	r1, [r2, #4]
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	68d2      	ldr	r2, [r2, #12]
 800511a:	4311      	orrs	r1, r2
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	6912      	ldr	r2, [r2, #16]
 8005120:	4311      	orrs	r1, r2
 8005122:	683a      	ldr	r2, [r7, #0]
 8005124:	6992      	ldr	r2, [r2, #24]
 8005126:	430a      	orrs	r2, r1
 8005128:	431a      	orrs	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	4619      	mov	r1, r3
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f7ff fd85 	bl	8004c44 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	4619      	mov	r1, r3
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f7ff fd92 	bl	8004c6a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8005146:	f107 0308 	add.w	r3, r7, #8
 800514a:	4618      	mov	r0, r3
 800514c:	f7ff f934 	bl	80043b8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a1f      	ldr	r2, [pc, #124]	; (80051d0 <LL_USART_Init+0xe8>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d102      	bne.n	800515e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	61bb      	str	r3, [r7, #24]
 800515c:	e021      	b.n	80051a2 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a1c      	ldr	r2, [pc, #112]	; (80051d4 <LL_USART_Init+0xec>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d102      	bne.n	800516c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	61bb      	str	r3, [r7, #24]
 800516a:	e01a      	b.n	80051a2 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a1a      	ldr	r2, [pc, #104]	; (80051d8 <LL_USART_Init+0xf0>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d102      	bne.n	800517a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	61bb      	str	r3, [r7, #24]
 8005178:	e013      	b.n	80051a2 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a17      	ldr	r2, [pc, #92]	; (80051dc <LL_USART_Init+0xf4>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d102      	bne.n	8005188 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	61bb      	str	r3, [r7, #24]
 8005186:	e00c      	b.n	80051a2 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a15      	ldr	r2, [pc, #84]	; (80051e0 <LL_USART_Init+0xf8>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d102      	bne.n	8005196 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	61bb      	str	r3, [r7, #24]
 8005194:	e005      	b.n	80051a2 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a12      	ldr	r2, [pc, #72]	; (80051e4 <LL_USART_Init+0xfc>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d101      	bne.n	80051a2 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00d      	beq.n	80051c4 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d009      	beq.n	80051c4 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 80051b0:	2300      	movs	r3, #0
 80051b2:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	699a      	ldr	r2, [r3, #24]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	69b9      	ldr	r1, [r7, #24]
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7ff fd66 	bl	8004c90 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80051c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3720      	adds	r7, #32
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	40011000 	.word	0x40011000
 80051d4:	40004400 	.word	0x40004400
 80051d8:	40004800 	.word	0x40004800
 80051dc:	40011400 	.word	0x40011400
 80051e0:	40004c00 	.word	0x40004c00
 80051e4:	40005000 	.word	0x40005000

080051e8 <LL_SPI_Enable>:
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	601a      	str	r2, [r3, #0]
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <LL_SPI_SetStandard>:
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f023 0210 	bic.w	r2, r3, #16
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	431a      	orrs	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	605a      	str	r2, [r3, #4]
}
 8005222:	bf00      	nop
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr

0800522e <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 800522e:	b480      	push	{r7}
 8005230:	b083      	sub	sp, #12
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b01      	cmp	r3, #1
 8005240:	d101      	bne.n	8005246 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8005242:	2301      	movs	r3, #1
 8005244:	e000      	b.n	8005248 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f003 0302 	and.w	r3, r3, #2
 8005264:	2b02      	cmp	r3, #2
 8005266:	d101      	bne.n	800526c <LL_SPI_IsActiveFlag_TXE+0x18>
 8005268:	2301      	movs	r3, #1
 800526a:	e000      	b.n	800526e <LL_SPI_IsActiveFlag_TXE+0x1a>
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 800527a:	b480      	push	{r7}
 800527c:	b083      	sub	sp, #12
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	b2db      	uxtb	r3, r3
}
 8005288:	4618      	mov	r0, r3
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	460b      	mov	r3, r1
 800529e:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	330c      	adds	r3, #12
 80052a4:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	78fa      	ldrb	r2, [r7, #3]
 80052aa:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80052ac:	bf00      	nop
 80052ae:	3714      	adds	r7, #20
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	691a      	ldr	r2, [r3, #16]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	4013      	ands	r3, r2
 80052ca:	683a      	ldr	r2, [r7, #0]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	bf0c      	ite	eq
 80052d0:	2301      	moveq	r3, #1
 80052d2:	2300      	movne	r3, #0
 80052d4:	b2db      	uxtb	r3, r3
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80052e2:	b480      	push	{r7}
 80052e4:	b083      	sub	sp, #12
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
 80052ea:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	619a      	str	r2, [r3, #24]
}
 80052f2:	bf00      	nop
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80052fe:	b480      	push	{r7}
 8005300:	b083      	sub	sp, #12
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
 8005306:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	041a      	lsls	r2, r3, #16
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	619a      	str	r2, [r3, #24]
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8005324:	4b08      	ldr	r3, [pc, #32]	; (8005348 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005326:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005328:	4907      	ldr	r1, [pc, #28]	; (8005348 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4313      	orrs	r3, r2
 800532e:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8005330:	4b05      	ldr	r3, [pc, #20]	; (8005348 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4013      	ands	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800533a:	68fb      	ldr	r3, [r7, #12]
}
 800533c:	bf00      	nop
 800533e:	3714      	adds	r7, #20
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr
 8005348:	40023800 	.word	0x40023800

0800534c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8005354:	4b08      	ldr	r3, [pc, #32]	; (8005378 <LL_APB1_GRP1_EnableClock+0x2c>)
 8005356:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005358:	4907      	ldr	r1, [pc, #28]	; (8005378 <LL_APB1_GRP1_EnableClock+0x2c>)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4313      	orrs	r3, r2
 800535e:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8005360:	4b05      	ldr	r3, [pc, #20]	; (8005378 <LL_APB1_GRP1_EnableClock+0x2c>)
 8005362:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4013      	ands	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800536a:	68fb      	ldr	r3, [r7, #12]
}
 800536c:	bf00      	nop
 800536e:	3714      	adds	r7, #20
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr
 8005378:	40023800 	.word	0x40023800

0800537c <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b090      	sub	sp, #64	; 0x40
 8005380:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8005382:	f107 0318 	add.w	r3, r7, #24
 8005386:	2228      	movs	r2, #40	; 0x28
 8005388:	2100      	movs	r1, #0
 800538a:	4618      	mov	r0, r3
 800538c:	f002 fe7a 	bl	8008084 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005390:	463b      	mov	r3, r7
 8005392:	2200      	movs	r2, #0
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	605a      	str	r2, [r3, #4]
 8005398:	609a      	str	r2, [r3, #8]
 800539a:	60da      	str	r2, [r3, #12]
 800539c:	611a      	str	r2, [r3, #16]
 800539e:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80053a0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80053a4:	f7ff ffd2 	bl	800534c <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80053a8:	2002      	movs	r0, #2
 80053aa:	f7ff ffb7 	bl	800531c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80053ae:	2004      	movs	r0, #4
 80053b0:	f7ff ffb4 	bl	800531c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80053b4:	2001      	movs	r0, #1
 80053b6:	f7ff ffb1 	bl	800531c <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 80053ba:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80053be:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80053c0:	2302      	movs	r3, #2
 80053c2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80053c4:	2303      	movs	r3, #3
 80053c6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80053c8:	2300      	movs	r3, #0
 80053ca:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80053cc:	2300      	movs	r3, #0
 80053ce:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80053d0:	2305      	movs	r3, #5
 80053d2:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053d4:	463b      	mov	r3, r7
 80053d6:	4619      	mov	r1, r3
 80053d8:	4841      	ldr	r0, [pc, #260]	; (80054e0 <BNO080_GPIO_SPI_Initialization+0x164>)
 80053da:	f7fe ff09 	bl	80041f0 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80053de:	2300      	movs	r3, #0
 80053e0:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80053e2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80053e6:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80053e8:	2300      	movs	r3, #0
 80053ea:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80053ec:	2302      	movs	r3, #2
 80053ee:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80053f0:	2301      	movs	r3, #1
 80053f2:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80053f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80053fa:	2318      	movs	r3, #24
 80053fc:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80053fe:	2300      	movs	r3, #0
 8005400:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8005402:	2300      	movs	r3, #0
 8005404:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8005406:	230a      	movs	r3, #10
 8005408:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 800540a:	f107 0318 	add.w	r3, r7, #24
 800540e:	4619      	mov	r1, r3
 8005410:	4834      	ldr	r0, [pc, #208]	; (80054e4 <BNO080_GPIO_SPI_Initialization+0x168>)
 8005412:	f7ff f8be 	bl	8004592 <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8005416:	2100      	movs	r1, #0
 8005418:	4832      	ldr	r0, [pc, #200]	; (80054e4 <BNO080_GPIO_SPI_Initialization+0x168>)
 800541a:	f7ff fef5 	bl	8005208 <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 800541e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005422:	4831      	ldr	r0, [pc, #196]	; (80054e8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8005424:	f7ff ff6b 	bl	80052fe <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 8005428:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800542c:	482c      	ldr	r0, [pc, #176]	; (80054e0 <BNO080_GPIO_SPI_Initialization+0x164>)
 800542e:	f7ff ff66 	bl	80052fe <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 8005432:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005436:	482d      	ldr	r0, [pc, #180]	; (80054ec <BNO080_GPIO_SPI_Initialization+0x170>)
 8005438:	f7ff ff61 	bl	80052fe <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 800543c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005440:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8005442:	2301      	movs	r3, #1
 8005444:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005446:	2303      	movs	r3, #3
 8005448:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800544a:	2300      	movs	r3, #0
 800544c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800544e:	2300      	movs	r3, #0
 8005450:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 8005452:	463b      	mov	r3, r7
 8005454:	4619      	mov	r1, r3
 8005456:	4822      	ldr	r0, [pc, #136]	; (80054e0 <BNO080_GPIO_SPI_Initialization+0x164>)
 8005458:	f7fe feca 	bl	80041f0 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 800545c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005460:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8005462:	2301      	movs	r3, #1
 8005464:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005466:	2303      	movs	r3, #3
 8005468:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800546a:	2300      	movs	r3, #0
 800546c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800546e:	2300      	movs	r3, #0
 8005470:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 8005472:	463b      	mov	r3, r7
 8005474:	4619      	mov	r1, r3
 8005476:	481c      	ldr	r0, [pc, #112]	; (80054e8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8005478:	f7fe feba 	bl	80041f0 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 800547c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005480:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8005482:	2301      	movs	r3, #1
 8005484:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005486:	2303      	movs	r3, #3
 8005488:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800548a:	2300      	movs	r3, #0
 800548c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800548e:	2300      	movs	r3, #0
 8005490:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 8005492:	463b      	mov	r3, r7
 8005494:	4619      	mov	r1, r3
 8005496:	4815      	ldr	r0, [pc, #84]	; (80054ec <BNO080_GPIO_SPI_Initialization+0x170>)
 8005498:	f7fe feaa 	bl	80041f0 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 800549c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054a0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80054a2:	2300      	movs	r3, #0
 80054a4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80054a6:	2301      	movs	r3, #1
 80054a8:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 80054aa:	463b      	mov	r3, r7
 80054ac:	4619      	mov	r1, r3
 80054ae:	480e      	ldr	r0, [pc, #56]	; (80054e8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80054b0:	f7fe fe9e 	bl	80041f0 <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 80054b4:	480b      	ldr	r0, [pc, #44]	; (80054e4 <BNO080_GPIO_SPI_Initialization+0x168>)
 80054b6:	f7ff fe97 	bl	80051e8 <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 80054ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80054be:	4808      	ldr	r0, [pc, #32]	; (80054e0 <BNO080_GPIO_SPI_Initialization+0x164>)
 80054c0:	f7ff ff0f 	bl	80052e2 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 80054c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054c8:	4808      	ldr	r0, [pc, #32]	; (80054ec <BNO080_GPIO_SPI_Initialization+0x170>)
 80054ca:	f7ff ff0a 	bl	80052e2 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 80054ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80054d2:	4805      	ldr	r0, [pc, #20]	; (80054e8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80054d4:	f7ff ff05 	bl	80052e2 <LL_GPIO_SetOutputPin>
}
 80054d8:	bf00      	nop
 80054da:	3740      	adds	r7, #64	; 0x40
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	40020400 	.word	0x40020400
 80054e4:	40003800 	.word	0x40003800
 80054e8:	40020800 	.word	0x40020800
 80054ec:	40020000 	.word	0x40020000

080054f0 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 80054f6:	f7ff ff41 	bl	800537c <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 80054fa:	482e      	ldr	r0, [pc, #184]	; (80055b4 <BNO080_Initialization+0xc4>)
 80054fc:	f003 fa34 	bl	8008968 <iprintf>
	
	CHIP_DESELECT(BNO080);
 8005500:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005504:	482c      	ldr	r0, [pc, #176]	; (80055b8 <BNO080_Initialization+0xc8>)
 8005506:	f7ff feec 	bl	80052e2 <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 800550a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800550e:	482b      	ldr	r0, [pc, #172]	; (80055bc <BNO080_Initialization+0xcc>)
 8005510:	f7ff fee7 	bl	80052e2 <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 8005514:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005518:	4829      	ldr	r0, [pc, #164]	; (80055c0 <BNO080_Initialization+0xd0>)
 800551a:	f7ff fef0 	bl	80052fe <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 800551e:	20c8      	movs	r0, #200	; 0xc8
 8005520:	f7fb fd36 	bl	8000f90 <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 8005524:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005528:	4825      	ldr	r0, [pc, #148]	; (80055c0 <BNO080_Initialization+0xd0>)
 800552a:	f7ff feda 	bl	80052e2 <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 800552e:	f000 f8d7 	bl	80056e0 <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 8005532:	f000 f8d5 	bl	80056e0 <BNO080_waitForSPI>
	BNO080_receivePacket();
 8005536:	f000 f8f7 	bl	8005728 <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 800553a:	f000 f8d1 	bl	80056e0 <BNO080_waitForSPI>
	BNO080_receivePacket();
 800553e:	f000 f8f3 	bl	8005728 <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8005542:	4b20      	ldr	r3, [pc, #128]	; (80055c4 <BNO080_Initialization+0xd4>)
 8005544:	22f9      	movs	r2, #249	; 0xf9
 8005546:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 8005548:	4b1e      	ldr	r3, [pc, #120]	; (80055c4 <BNO080_Initialization+0xd4>)
 800554a:	2200      	movs	r2, #0
 800554c:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 800554e:	2102      	movs	r1, #2
 8005550:	2002      	movs	r0, #2
 8005552:	f000 f959 	bl	8005808 <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 8005556:	f000 f8c3 	bl	80056e0 <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 800555a:	f000 f8e5 	bl	8005728 <BNO080_receivePacket>
 800555e:	4603      	mov	r3, r0
 8005560:	2b01      	cmp	r3, #1
 8005562:	d11b      	bne.n	800559c <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 8005564:	4b18      	ldr	r3, [pc, #96]	; (80055c8 <BNO080_Initialization+0xd8>)
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	4619      	mov	r1, r3
 800556a:	4b17      	ldr	r3, [pc, #92]	; (80055c8 <BNO080_Initialization+0xd8>)
 800556c:	785b      	ldrb	r3, [r3, #1]
 800556e:	461a      	mov	r2, r3
 8005570:	4b15      	ldr	r3, [pc, #84]	; (80055c8 <BNO080_Initialization+0xd8>)
 8005572:	789b      	ldrb	r3, [r3, #2]
 8005574:	4618      	mov	r0, r3
 8005576:	4b14      	ldr	r3, [pc, #80]	; (80055c8 <BNO080_Initialization+0xd8>)
 8005578:	78db      	ldrb	r3, [r3, #3]
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	4603      	mov	r3, r0
 800557e:	4813      	ldr	r0, [pc, #76]	; (80055cc <BNO080_Initialization+0xdc>)
 8005580:	f003 f9f2 	bl	8008968 <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8005584:	4b0f      	ldr	r3, [pc, #60]	; (80055c4 <BNO080_Initialization+0xd4>)
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	2bf8      	cmp	r3, #248	; 0xf8
 800558a:	d107      	bne.n	800559c <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 800558c:	4b0d      	ldr	r3, [pc, #52]	; (80055c4 <BNO080_Initialization+0xd4>)
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	4619      	mov	r1, r3
 8005592:	480f      	ldr	r0, [pc, #60]	; (80055d0 <BNO080_Initialization+0xe0>)
 8005594:	f003 f9e8 	bl	8008968 <iprintf>
			return (0);
 8005598:	2300      	movs	r3, #0
 800559a:	e007      	b.n	80055ac <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 800559c:	4b09      	ldr	r3, [pc, #36]	; (80055c4 <BNO080_Initialization+0xd4>)
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	22f8      	movs	r2, #248	; 0xf8
 80055a2:	4619      	mov	r1, r3
 80055a4:	480b      	ldr	r0, [pc, #44]	; (80055d4 <BNO080_Initialization+0xe4>)
 80055a6:	f003 f9df 	bl	8008968 <iprintf>
	return (1); //Something went wrong
 80055aa:	2301      	movs	r3, #1
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	0800abf8 	.word	0x0800abf8
 80055b8:	40020400 	.word	0x40020400
 80055bc:	40020000 	.word	0x40020000
 80055c0:	40020800 	.word	0x40020800
 80055c4:	20000200 	.word	0x20000200
 80055c8:	200001fc 	.word	0x200001fc
 80055cc:	0800ac0c 	.word	0x0800ac0c
 80055d0:	0800ac24 	.word	0x0800ac24
 80055d4:	0800ac44 	.word	0x0800ac44

080055d8 <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	4603      	mov	r3, r0
 80055e0:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 80055e2:	bf00      	nop
 80055e4:	480c      	ldr	r0, [pc, #48]	; (8005618 <SPI2_SendByte+0x40>)
 80055e6:	f7ff fe35 	bl	8005254 <LL_SPI_IsActiveFlag_TXE>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d0f9      	beq.n	80055e4 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 80055f0:	79fb      	ldrb	r3, [r7, #7]
 80055f2:	4619      	mov	r1, r3
 80055f4:	4808      	ldr	r0, [pc, #32]	; (8005618 <SPI2_SendByte+0x40>)
 80055f6:	f7ff fe4d 	bl	8005294 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 80055fa:	bf00      	nop
 80055fc:	4806      	ldr	r0, [pc, #24]	; (8005618 <SPI2_SendByte+0x40>)
 80055fe:	f7ff fe16 	bl	800522e <LL_SPI_IsActiveFlag_RXNE>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d0f9      	beq.n	80055fc <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 8005608:	4803      	ldr	r0, [pc, #12]	; (8005618 <SPI2_SendByte+0x40>)
 800560a:	f7ff fe36 	bl	800527a <LL_SPI_ReceiveData8>
 800560e:	4603      	mov	r3, r0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	40003800 	.word	0x40003800

0800561c <BNO080_enableRotationVector>:
	return fixedPointValue * powf(2, qPoint * -1);
}

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	4603      	mov	r3, r0
 8005624:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 8005626:	88fb      	ldrh	r3, [r7, #6]
 8005628:	2200      	movs	r2, #0
 800562a:	4619      	mov	r1, r3
 800562c:	2005      	movs	r0, #5
 800562e:	f000 f805 	bl	800563c <BNO080_setFeatureCommand>
}
 8005632:	bf00      	nop
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
	...

0800563c <BNO080_setFeatureCommand>:
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	4603      	mov	r3, r0
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
 8005648:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 800564a:	4b24      	ldr	r3, [pc, #144]	; (80056dc <BNO080_setFeatureCommand+0xa0>)
 800564c:	22fd      	movs	r2, #253	; 0xfd
 800564e:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8005650:	4a22      	ldr	r2, [pc, #136]	; (80056dc <BNO080_setFeatureCommand+0xa0>)
 8005652:	7bfb      	ldrb	r3, [r7, #15]
 8005654:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 8005656:	4b21      	ldr	r3, [pc, #132]	; (80056dc <BNO080_setFeatureCommand+0xa0>)
 8005658:	2200      	movs	r2, #0
 800565a:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 800565c:	4b1f      	ldr	r3, [pc, #124]	; (80056dc <BNO080_setFeatureCommand+0xa0>)
 800565e:	2200      	movs	r2, #0
 8005660:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 8005662:	4b1e      	ldr	r3, [pc, #120]	; (80056dc <BNO080_setFeatureCommand+0xa0>)
 8005664:	2200      	movs	r2, #0
 8005666:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	b2da      	uxtb	r2, r3
 800566c:	4b1b      	ldr	r3, [pc, #108]	; (80056dc <BNO080_setFeatureCommand+0xa0>)
 800566e:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	0a1b      	lsrs	r3, r3, #8
 8005674:	b2da      	uxtb	r2, r3
 8005676:	4b19      	ldr	r3, [pc, #100]	; (80056dc <BNO080_setFeatureCommand+0xa0>)
 8005678:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	0c1b      	lsrs	r3, r3, #16
 800567e:	b2da      	uxtb	r2, r3
 8005680:	4b16      	ldr	r3, [pc, #88]	; (80056dc <BNO080_setFeatureCommand+0xa0>)
 8005682:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	0e1b      	lsrs	r3, r3, #24
 8005688:	b2da      	uxtb	r2, r3
 800568a:	4b14      	ldr	r3, [pc, #80]	; (80056dc <BNO080_setFeatureCommand+0xa0>)
 800568c:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 800568e:	4b13      	ldr	r3, [pc, #76]	; (80056dc <BNO080_setFeatureCommand+0xa0>)
 8005690:	2200      	movs	r2, #0
 8005692:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8005694:	4b11      	ldr	r3, [pc, #68]	; (80056dc <BNO080_setFeatureCommand+0xa0>)
 8005696:	2200      	movs	r2, #0
 8005698:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 800569a:	4b10      	ldr	r3, [pc, #64]	; (80056dc <BNO080_setFeatureCommand+0xa0>)
 800569c:	2200      	movs	r2, #0
 800569e:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 80056a0:	4b0e      	ldr	r3, [pc, #56]	; (80056dc <BNO080_setFeatureCommand+0xa0>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	b2da      	uxtb	r2, r3
 80056aa:	4b0c      	ldr	r3, [pc, #48]	; (80056dc <BNO080_setFeatureCommand+0xa0>)
 80056ac:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	0a1b      	lsrs	r3, r3, #8
 80056b2:	b2da      	uxtb	r2, r3
 80056b4:	4b09      	ldr	r3, [pc, #36]	; (80056dc <BNO080_setFeatureCommand+0xa0>)
 80056b6:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	0c1b      	lsrs	r3, r3, #16
 80056bc:	b2da      	uxtb	r2, r3
 80056be:	4b07      	ldr	r3, [pc, #28]	; (80056dc <BNO080_setFeatureCommand+0xa0>)
 80056c0:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	0e1b      	lsrs	r3, r3, #24
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	4b04      	ldr	r3, [pc, #16]	; (80056dc <BNO080_setFeatureCommand+0xa0>)
 80056ca:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 80056cc:	2111      	movs	r1, #17
 80056ce:	2002      	movs	r0, #2
 80056d0:	f000 f89a 	bl	8005808 <BNO080_sendPacket>
}
 80056d4:	bf00      	nop
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	20000200 	.word	0x20000200

080056e0 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 80056e6:	2300      	movs	r3, #0
 80056e8:	607b      	str	r3, [r7, #4]
 80056ea:	e00c      	b.n	8005706 <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 80056ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80056f0:	480b      	ldr	r0, [pc, #44]	; (8005720 <BNO080_waitForSPI+0x40>)
 80056f2:	f7ff fde1 	bl	80052b8 <LL_GPIO_IsInputPinSet>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 80056fc:	2301      	movs	r3, #1
 80056fe:	e00a      	b.n	8005716 <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	3301      	adds	r3, #1
 8005704:	607b      	str	r3, [r7, #4]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800570c:	d1ee      	bne.n	80056ec <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 800570e:	4805      	ldr	r0, [pc, #20]	; (8005724 <BNO080_waitForSPI+0x44>)
 8005710:	f003 f9b0 	bl	8008a74 <puts>
	return (0);
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3708      	adds	r7, #8
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	40020800 	.word	0x40020800
 8005724:	0800ac90 	.word	0x0800ac90

08005728 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 800572e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005732:	4831      	ldr	r0, [pc, #196]	; (80057f8 <BNO080_receivePacket+0xd0>)
 8005734:	f7ff fdc0 	bl	80052b8 <LL_GPIO_IsInputPinSet>
 8005738:	4603      	mov	r3, r0
 800573a:	2b01      	cmp	r3, #1
 800573c:	d101      	bne.n	8005742 <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 800573e:	2300      	movs	r3, #0
 8005740:	e056      	b.n	80057f0 <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 8005742:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005746:	482d      	ldr	r0, [pc, #180]	; (80057fc <BNO080_receivePacket+0xd4>)
 8005748:	f7ff fdd9 	bl	80052fe <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 800574c:	2000      	movs	r0, #0
 800574e:	f7ff ff43 	bl	80055d8 <SPI2_SendByte>
 8005752:	4603      	mov	r3, r0
 8005754:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 8005756:	2000      	movs	r0, #0
 8005758:	f7ff ff3e 	bl	80055d8 <SPI2_SendByte>
 800575c:	4603      	mov	r3, r0
 800575e:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 8005760:	2000      	movs	r0, #0
 8005762:	f7ff ff39 	bl	80055d8 <SPI2_SendByte>
 8005766:	4603      	mov	r3, r0
 8005768:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 800576a:	2000      	movs	r0, #0
 800576c:	f7ff ff34 	bl	80055d8 <SPI2_SendByte>
 8005770:	4603      	mov	r3, r0
 8005772:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 8005774:	4a22      	ldr	r2, [pc, #136]	; (8005800 <BNO080_receivePacket+0xd8>)
 8005776:	7b7b      	ldrb	r3, [r7, #13]
 8005778:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 800577a:	4a21      	ldr	r2, [pc, #132]	; (8005800 <BNO080_receivePacket+0xd8>)
 800577c:	7b3b      	ldrb	r3, [r7, #12]
 800577e:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8005780:	4a1f      	ldr	r2, [pc, #124]	; (8005800 <BNO080_receivePacket+0xd8>)
 8005782:	7afb      	ldrb	r3, [r7, #11]
 8005784:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 8005786:	4a1e      	ldr	r2, [pc, #120]	; (8005800 <BNO080_receivePacket+0xd8>)
 8005788:	7abb      	ldrb	r3, [r7, #10]
 800578a:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 800578c:	7b3b      	ldrb	r3, [r7, #12]
 800578e:	021b      	lsls	r3, r3, #8
 8005790:	b21a      	sxth	r2, r3
 8005792:	7b7b      	ldrb	r3, [r7, #13]
 8005794:	b21b      	sxth	r3, r3
 8005796:	4313      	orrs	r3, r2
 8005798:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 800579a:	893b      	ldrh	r3, [r7, #8]
 800579c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80057a0:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 80057a2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d101      	bne.n	80057ae <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 80057aa:	2300      	movs	r3, #0
 80057ac:	e020      	b.n	80057f0 <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 80057ae:	893b      	ldrh	r3, [r7, #8]
 80057b0:	3b04      	subs	r3, #4
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 80057b6:	2300      	movs	r3, #0
 80057b8:	81fb      	strh	r3, [r7, #14]
 80057ba:	e00e      	b.n	80057da <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 80057bc:	20ff      	movs	r0, #255	; 0xff
 80057be:	f7ff ff0b 	bl	80055d8 <SPI2_SendByte>
 80057c2:	4603      	mov	r3, r0
 80057c4:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 80057c6:	89fb      	ldrh	r3, [r7, #14]
 80057c8:	2b7f      	cmp	r3, #127	; 0x7f
 80057ca:	d803      	bhi.n	80057d4 <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 80057cc:	89fb      	ldrh	r3, [r7, #14]
 80057ce:	490d      	ldr	r1, [pc, #52]	; (8005804 <BNO080_receivePacket+0xdc>)
 80057d0:	79fa      	ldrb	r2, [r7, #7]
 80057d2:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 80057d4:	89fb      	ldrh	r3, [r7, #14]
 80057d6:	3301      	adds	r3, #1
 80057d8:	81fb      	strh	r3, [r7, #14]
 80057da:	89fa      	ldrh	r2, [r7, #14]
 80057dc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	dbeb      	blt.n	80057bc <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 80057e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80057e8:	4804      	ldr	r0, [pc, #16]	; (80057fc <BNO080_receivePacket+0xd4>)
 80057ea:	f7ff fd7a 	bl	80052e2 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 80057ee:	2301      	movs	r3, #1
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	40020800 	.word	0x40020800
 80057fc:	40020400 	.word	0x40020400
 8005800:	200001fc 	.word	0x200001fc
 8005804:	20000200 	.word	0x20000200

08005808 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	4603      	mov	r3, r0
 8005810:	460a      	mov	r2, r1
 8005812:	71fb      	strb	r3, [r7, #7]
 8005814:	4613      	mov	r3, r2
 8005816:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8005818:	79bb      	ldrb	r3, [r7, #6]
 800581a:	3304      	adds	r3, #4
 800581c:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 800581e:	f7ff ff5f 	bl	80056e0 <BNO080_waitForSPI>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 8005828:	2300      	movs	r3, #0
 800582a:	e032      	b.n	8005892 <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 800582c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005830:	481a      	ldr	r0, [pc, #104]	; (800589c <BNO080_sendPacket+0x94>)
 8005832:	f7ff fd64 	bl	80052fe <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 8005836:	7bbb      	ldrb	r3, [r7, #14]
 8005838:	4618      	mov	r0, r3
 800583a:	f7ff fecd 	bl	80055d8 <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 800583e:	7bbb      	ldrb	r3, [r7, #14]
 8005840:	121b      	asrs	r3, r3, #8
 8005842:	b2db      	uxtb	r3, r3
 8005844:	4618      	mov	r0, r3
 8005846:	f7ff fec7 	bl	80055d8 <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 800584a:	79fb      	ldrb	r3, [r7, #7]
 800584c:	4618      	mov	r0, r3
 800584e:	f7ff fec3 	bl	80055d8 <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 8005852:	79fb      	ldrb	r3, [r7, #7]
 8005854:	4a12      	ldr	r2, [pc, #72]	; (80058a0 <BNO080_sendPacket+0x98>)
 8005856:	5cd2      	ldrb	r2, [r2, r3]
 8005858:	1c51      	adds	r1, r2, #1
 800585a:	b2c8      	uxtb	r0, r1
 800585c:	4910      	ldr	r1, [pc, #64]	; (80058a0 <BNO080_sendPacket+0x98>)
 800585e:	54c8      	strb	r0, [r1, r3]
 8005860:	4610      	mov	r0, r2
 8005862:	f7ff feb9 	bl	80055d8 <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 8005866:	2300      	movs	r3, #0
 8005868:	73fb      	strb	r3, [r7, #15]
 800586a:	e008      	b.n	800587e <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 800586c:	7bfb      	ldrb	r3, [r7, #15]
 800586e:	4a0d      	ldr	r2, [pc, #52]	; (80058a4 <BNO080_sendPacket+0x9c>)
 8005870:	5cd3      	ldrb	r3, [r2, r3]
 8005872:	4618      	mov	r0, r3
 8005874:	f7ff feb0 	bl	80055d8 <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 8005878:	7bfb      	ldrb	r3, [r7, #15]
 800587a:	3301      	adds	r3, #1
 800587c:	73fb      	strb	r3, [r7, #15]
 800587e:	7bfa      	ldrb	r2, [r7, #15]
 8005880:	79bb      	ldrb	r3, [r7, #6]
 8005882:	429a      	cmp	r2, r3
 8005884:	d3f2      	bcc.n	800586c <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 8005886:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800588a:	4804      	ldr	r0, [pc, #16]	; (800589c <BNO080_sendPacket+0x94>)
 800588c:	f7ff fd29 	bl	80052e2 <LL_GPIO_SetOutputPin>

	return (1);
 8005890:	2301      	movs	r3, #1
}
 8005892:	4618      	mov	r0, r3
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	40020400 	.word	0x40020400
 80058a0:	20000280 	.word	0x20000280
 80058a4:	20000200 	.word	0x20000200

080058a8 <LL_SPI_Enable>:
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	601a      	str	r2, [r3, #0]
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <LL_SPI_SetStandard>:
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f023 0210 	bic.w	r2, r3, #16
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	431a      	orrs	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	605a      	str	r2, [r3, #4]
}
 80058e2:	bf00      	nop
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <LL_SPI_IsActiveFlag_RXNE>:
{
 80058ee:	b480      	push	{r7}
 80058f0:	b083      	sub	sp, #12
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d101      	bne.n	8005906 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8005902:	2301      	movs	r3, #1
 8005904:	e000      	b.n	8005908 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <LL_SPI_IsActiveFlag_TXE>:
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b02      	cmp	r3, #2
 8005926:	d101      	bne.n	800592c <LL_SPI_IsActiveFlag_TXE+0x18>
 8005928:	2301      	movs	r3, #1
 800592a:	e000      	b.n	800592e <LL_SPI_IsActiveFlag_TXE+0x1a>
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr

0800593a <LL_SPI_ReceiveData8>:
{
 800593a:	b480      	push	{r7}
 800593c:	b083      	sub	sp, #12
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	b2db      	uxtb	r3, r3
}
 8005948:	4618      	mov	r0, r3
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <LL_SPI_TransmitData8>:
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	460b      	mov	r3, r1
 800595e:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	330c      	adds	r3, #12
 8005964:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	78fa      	ldrb	r2, [r7, #3]
 800596a:	701a      	strb	r2, [r3, #0]
}
 800596c:	bf00      	nop
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <LL_GPIO_IsInputPinSet>:
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	691a      	ldr	r2, [r3, #16]
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	4013      	ands	r3, r2
 800598a:	683a      	ldr	r2, [r7, #0]
 800598c:	429a      	cmp	r2, r3
 800598e:	bf0c      	ite	eq
 8005990:	2301      	moveq	r3, #1
 8005992:	2300      	movne	r3, #0
 8005994:	b2db      	uxtb	r3, r3
}
 8005996:	4618      	mov	r0, r3
 8005998:	370c      	adds	r7, #12
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <LL_GPIO_SetOutputPin>:
{
 80059a2:	b480      	push	{r7}
 80059a4:	b083      	sub	sp, #12
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
 80059aa:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	619a      	str	r2, [r3, #24]
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <LL_GPIO_ResetOutputPin>:
{
 80059be:	b480      	push	{r7}
 80059c0:	b083      	sub	sp, #12
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
 80059c6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	041a      	lsls	r2, r3, #16
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	619a      	str	r2, [r3, #24]
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <LL_AHB1_GRP1_EnableClock>:
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80059e4:	4b08      	ldr	r3, [pc, #32]	; (8005a08 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80059e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059e8:	4907      	ldr	r1, [pc, #28]	; (8005a08 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80059f0:	4b05      	ldr	r3, [pc, #20]	; (8005a08 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80059f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4013      	ands	r3, r2
 80059f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80059fa:	68fb      	ldr	r3, [r7, #12]
}
 80059fc:	bf00      	nop
 80059fe:	3714      	adds	r7, #20
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr
 8005a08:	40023800 	.word	0x40023800

08005a0c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8005a14:	4b08      	ldr	r3, [pc, #32]	; (8005a38 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005a16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a18:	4907      	ldr	r1, [pc, #28]	; (8005a38 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005a20:	4b05      	ldr	r3, [pc, #20]	; (8005a38 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005a22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4013      	ands	r3, r2
 8005a28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
}
 8005a2c:	bf00      	nop
 8005a2e:	3714      	adds	r7, #20
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr
 8005a38:	40023800 	.word	0x40023800

08005a3c <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b090      	sub	sp, #64	; 0x40
 8005a40:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8005a42:	f107 0318 	add.w	r3, r7, #24
 8005a46:	2228      	movs	r2, #40	; 0x28
 8005a48:	2100      	movs	r1, #0
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f002 fb1a 	bl	8008084 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a50:	463b      	mov	r3, r7
 8005a52:	2200      	movs	r2, #0
 8005a54:	601a      	str	r2, [r3, #0]
 8005a56:	605a      	str	r2, [r3, #4]
 8005a58:	609a      	str	r2, [r3, #8]
 8005a5a:	60da      	str	r2, [r3, #12]
 8005a5c:	611a      	str	r2, [r3, #16]
 8005a5e:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8005a60:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005a64:	f7ff ffd2 	bl	8005a0c <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8005a68:	2001      	movs	r0, #1
 8005a6a:	f7ff ffb7 	bl	80059dc <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8005a6e:	2004      	movs	r0, #4
 8005a70:	f7ff ffb4 	bl	80059dc <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8005a74:	23e0      	movs	r3, #224	; 0xe0
 8005a76:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005a78:	2302      	movs	r3, #2
 8005a7a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005a80:	2300      	movs	r3, #0
 8005a82:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005a84:	2300      	movs	r3, #0
 8005a86:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8005a88:	2305      	movs	r3, #5
 8005a8a:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a8c:	463b      	mov	r3, r7
 8005a8e:	4619      	mov	r1, r3
 8005a90:	4825      	ldr	r0, [pc, #148]	; (8005b28 <ICM20602_GPIO_SPI_Initialization+0xec>)
 8005a92:	f7fe fbad 	bl	80041f0 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8005a96:	2300      	movs	r3, #0
 8005a98:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8005a9a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005a9e:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8005aac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 8005ab2:	2310      	movs	r3, #16
 8005ab4:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8005aba:	2300      	movs	r3, #0
 8005abc:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8005abe:	230a      	movs	r3, #10
 8005ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 8005ac2:	f107 0318 	add.w	r3, r7, #24
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	4818      	ldr	r0, [pc, #96]	; (8005b2c <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8005aca:	f7fe fd62 	bl	8004592 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8005ace:	2100      	movs	r1, #0
 8005ad0:	4816      	ldr	r0, [pc, #88]	; (8005b2c <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8005ad2:	f7ff fef9 	bl	80058c8 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 8005ad6:	2110      	movs	r1, #16
 8005ad8:	4815      	ldr	r0, [pc, #84]	; (8005b30 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8005ada:	f7ff ff70 	bl	80059be <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 8005ade:	2310      	movs	r3, #16
 8005ae0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005aea:	2300      	movs	r3, #0
 8005aec:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005aee:	2300      	movs	r3, #0
 8005af0:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 8005af2:	463b      	mov	r3, r7
 8005af4:	4619      	mov	r1, r3
 8005af6:	480e      	ldr	r0, [pc, #56]	; (8005b30 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8005af8:	f7fe fb7a 	bl	80041f0 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 8005afc:	2320      	movs	r3, #32
 8005afe:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8005b00:	2300      	movs	r3, #0
 8005b02:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8005b04:	2301      	movs	r3, #1
 8005b06:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 8005b08:	463b      	mov	r3, r7
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	4808      	ldr	r0, [pc, #32]	; (8005b30 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8005b0e:	f7fe fb6f 	bl	80041f0 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 8005b12:	4806      	ldr	r0, [pc, #24]	; (8005b2c <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8005b14:	f7ff fec8 	bl	80058a8 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8005b18:	2110      	movs	r1, #16
 8005b1a:	4805      	ldr	r0, [pc, #20]	; (8005b30 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8005b1c:	f7ff ff41 	bl	80059a2 <LL_GPIO_SetOutputPin>
}
 8005b20:	bf00      	nop
 8005b22:	3740      	adds	r7, #64	; 0x40
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	40020000 	.word	0x40020000
 8005b2c:	40013000 	.word	0x40013000
 8005b30:	40020800 	.word	0x40020800

08005b34 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b082      	sub	sp, #8
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 8005b3e:	bf00      	nop
 8005b40:	480c      	ldr	r0, [pc, #48]	; (8005b74 <SPI1_SendByte+0x40>)
 8005b42:	f7ff fee7 	bl	8005914 <LL_SPI_IsActiveFlag_TXE>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d0f9      	beq.n	8005b40 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 8005b4c:	79fb      	ldrb	r3, [r7, #7]
 8005b4e:	4619      	mov	r1, r3
 8005b50:	4808      	ldr	r0, [pc, #32]	; (8005b74 <SPI1_SendByte+0x40>)
 8005b52:	f7ff feff 	bl	8005954 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 8005b56:	bf00      	nop
 8005b58:	4806      	ldr	r0, [pc, #24]	; (8005b74 <SPI1_SendByte+0x40>)
 8005b5a:	f7ff fec8 	bl	80058ee <LL_SPI_IsActiveFlag_RXNE>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d0f9      	beq.n	8005b58 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 8005b64:	4803      	ldr	r0, [pc, #12]	; (8005b74 <SPI1_SendByte+0x40>)
 8005b66:	f7ff fee8 	bl	800593a <LL_SPI_ReceiveData8>
 8005b6a:	4603      	mov	r3, r0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3708      	adds	r7, #8
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	40013000 	.word	0x40013000

08005b78 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	4603      	mov	r3, r0
 8005b80:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 8005b82:	2110      	movs	r1, #16
 8005b84:	480b      	ldr	r0, [pc, #44]	; (8005bb4 <ICM20602_Readbyte+0x3c>)
 8005b86:	f7ff ff1a 	bl	80059be <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8005b8a:	79fb      	ldrb	r3, [r7, #7]
 8005b8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7ff ffce 	bl	8005b34 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8005b98:	2000      	movs	r0, #0
 8005b9a:	f7ff ffcb 	bl	8005b34 <SPI1_SendByte>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 8005ba2:	2110      	movs	r1, #16
 8005ba4:	4803      	ldr	r0, [pc, #12]	; (8005bb4 <ICM20602_Readbyte+0x3c>)
 8005ba6:	f7ff fefc 	bl	80059a2 <LL_GPIO_SetOutputPin>
	
	return val;
 8005baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	40020800 	.word	0x40020800

08005bb8 <ICM20602_Readbytes>:

void ICM20602_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8005bb8:	b590      	push	{r4, r7, lr}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	603a      	str	r2, [r7, #0]
 8005bc2:	71fb      	strb	r3, [r7, #7]
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM20602);
 8005bcc:	2110      	movs	r1, #16
 8005bce:	4810      	ldr	r0, [pc, #64]	; (8005c10 <ICM20602_Readbytes+0x58>)
 8005bd0:	f7ff fef5 	bl	80059be <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8005bd4:	79fb      	ldrb	r3, [r7, #7]
 8005bd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7ff ffa9 	bl	8005b34 <SPI1_SendByte>
	while(i < len)
 8005be2:	e009      	b.n	8005bf8 <ICM20602_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	1c5a      	adds	r2, r3, #1
 8005be8:	60fa      	str	r2, [r7, #12]
 8005bea:	683a      	ldr	r2, [r7, #0]
 8005bec:	18d4      	adds	r4, r2, r3
 8005bee:	2000      	movs	r0, #0
 8005bf0:	f7ff ffa0 	bl	8005b34 <SPI1_SendByte>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	7023      	strb	r3, [r4, #0]
	while(i < len)
 8005bf8:	79bb      	ldrb	r3, [r7, #6]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d3f1      	bcc.n	8005be4 <ICM20602_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM20602);
 8005c00:	2110      	movs	r1, #16
 8005c02:	4803      	ldr	r0, [pc, #12]	; (8005c10 <ICM20602_Readbytes+0x58>)
 8005c04:	f7ff fecd 	bl	80059a2 <LL_GPIO_SetOutputPin>
}
 8005c08:	bf00      	nop
 8005c0a:	3714      	adds	r7, #20
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd90      	pop	{r4, r7, pc}
 8005c10:	40020800 	.word	0x40020800

08005c14 <ICM20602_Writebyte>:

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	460a      	mov	r2, r1
 8005c1e:	71fb      	strb	r3, [r7, #7]
 8005c20:	4613      	mov	r3, r2
 8005c22:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 8005c24:	2110      	movs	r1, #16
 8005c26:	480b      	ldr	r0, [pc, #44]	; (8005c54 <ICM20602_Writebyte+0x40>)
 8005c28:	f7ff fec9 	bl	80059be <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8005c2c:	79fb      	ldrb	r3, [r7, #7]
 8005c2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7ff ff7d 	bl	8005b34 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 8005c3a:	79bb      	ldrb	r3, [r7, #6]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f7ff ff79 	bl	8005b34 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 8005c42:	2110      	movs	r1, #16
 8005c44:	4803      	ldr	r0, [pc, #12]	; (8005c54 <ICM20602_Writebyte+0x40>)
 8005c46:	f7ff feac 	bl	80059a2 <LL_GPIO_SetOutputPin>
}
 8005c4a:	bf00      	nop
 8005c4c:	3708      	adds	r7, #8
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	40020800 	.word	0x40020800

08005c58 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8005c62:	f107 0308 	add.w	r3, r7, #8
 8005c66:	2200      	movs	r2, #0
 8005c68:	601a      	str	r2, [r3, #0]
 8005c6a:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8005c6c:	463b      	mov	r3, r7
 8005c6e:	2200      	movs	r2, #0
 8005c70:	601a      	str	r2, [r3, #0]
 8005c72:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 8005c74:	f7ff fee2 	bl	8005a3c <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 8005c78:	4833      	ldr	r0, [pc, #204]	; (8005d48 <ICM20602_Initialization+0xf0>)
 8005c7a:	f002 fe75 	bl	8008968 <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 8005c7e:	2075      	movs	r0, #117	; 0x75
 8005c80:	f7ff ff7a 	bl	8005b78 <ICM20602_Readbyte>
 8005c84:	4603      	mov	r3, r0
 8005c86:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 8005c88:	7bfb      	ldrb	r3, [r7, #15]
 8005c8a:	2b12      	cmp	r3, #18
 8005c8c:	d105      	bne.n	8005c9a <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 8005c8e:	7bfb      	ldrb	r3, [r7, #15]
 8005c90:	4619      	mov	r1, r3
 8005c92:	482e      	ldr	r0, [pc, #184]	; (8005d4c <ICM20602_Initialization+0xf4>)
 8005c94:	f002 fe68 	bl	8008968 <iprintf>
 8005c98:	e012      	b.n	8005cc0 <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 8005c9a:	7bfb      	ldrb	r3, [r7, #15]
 8005c9c:	2b12      	cmp	r3, #18
 8005c9e:	d00f      	beq.n	8005cc0 <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8005ca0:	2075      	movs	r0, #117	; 0x75
 8005ca2:	f7ff ff69 	bl	8005b78 <ICM20602_Readbyte>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8005caa:	7bfb      	ldrb	r3, [r7, #15]
 8005cac:	2b12      	cmp	r3, #18
 8005cae:	d007      	beq.n	8005cc0 <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8005cb0:	7bfb      	ldrb	r3, [r7, #15]
 8005cb2:	2212      	movs	r2, #18
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	4826      	ldr	r0, [pc, #152]	; (8005d50 <ICM20602_Initialization+0xf8>)
 8005cb8:	f002 fe56 	bl	8008968 <iprintf>
			return 1; //ERROR
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e03f      	b.n	8005d40 <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8005cc0:	2180      	movs	r1, #128	; 0x80
 8005cc2:	206b      	movs	r0, #107	; 0x6b
 8005cc4:	f7ff ffa6 	bl	8005c14 <ICM20602_Writebyte>
	HAL_Delay(50);
 8005cc8:	2032      	movs	r0, #50	; 0x32
 8005cca:	f7fb f961 	bl	8000f90 <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 8005cce:	2101      	movs	r1, #1
 8005cd0:	206b      	movs	r0, #107	; 0x6b
 8005cd2:	f7ff ff9f 	bl	8005c14 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 8005cd6:	2032      	movs	r0, #50	; 0x32
 8005cd8:	f7fb f95a 	bl	8000f90 <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 8005cdc:	2138      	movs	r1, #56	; 0x38
 8005cde:	206c      	movs	r0, #108	; 0x6c
 8005ce0:	f7ff ff98 	bl	8005c14 <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 8005ce4:	2032      	movs	r0, #50	; 0x32
 8005ce6:	f7fb f953 	bl	8000f90 <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 8005cea:	2100      	movs	r1, #0
 8005cec:	2019      	movs	r0, #25
 8005cee:	f7ff ff91 	bl	8005c14 <ICM20602_Writebyte>
	HAL_Delay(50);
 8005cf2:	2032      	movs	r0, #50	; 0x32
 8005cf4:	f7fb f94c 	bl	8000f90 <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8005cf8:	2105      	movs	r1, #5
 8005cfa:	201a      	movs	r0, #26
 8005cfc:	f7ff ff8a 	bl	8005c14 <ICM20602_Writebyte>
	HAL_Delay(50);
 8005d00:	2032      	movs	r0, #50	; 0x32
 8005d02:	f7fb f945 	bl	8000f90 <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 8005d06:	2118      	movs	r1, #24
 8005d08:	201b      	movs	r0, #27
 8005d0a:	f7ff ff83 	bl	8005c14 <ICM20602_Writebyte>
	HAL_Delay(50);
 8005d0e:	2032      	movs	r0, #50	; 0x32
 8005d10:	f7fb f93e 	bl	8000f90 <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 8005d14:	2118      	movs	r1, #24
 8005d16:	201c      	movs	r0, #28
 8005d18:	f7ff ff7c 	bl	8005c14 <ICM20602_Writebyte>
	HAL_Delay(50);
 8005d1c:	2032      	movs	r0, #50	; 0x32
 8005d1e:	f7fb f937 	bl	8000f90 <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8005d22:	2103      	movs	r1, #3
 8005d24:	201d      	movs	r0, #29
 8005d26:	f7ff ff75 	bl	8005c14 <ICM20602_Writebyte>
	HAL_Delay(50);
 8005d2a:	2032      	movs	r0, #50	; 0x32
 8005d2c:	f7fb f930 	bl	8000f90 <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8005d30:	2101      	movs	r1, #1
 8005d32:	2038      	movs	r0, #56	; 0x38
 8005d34:	f7ff ff6e 	bl	8005c14 <ICM20602_Writebyte>
	HAL_Delay(50);
 8005d38:	2032      	movs	r0, #50	; 0x32
 8005d3a:	f7fb f929 	bl	8000f90 <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	0800aca4 	.word	0x0800aca4
 8005d4c:	0800acbc 	.word	0x0800acbc
 8005d50:	0800ace0 	.word	0x0800ace0

08005d54 <ICM20602_Get3AxisGyroRawData>:
	gyro[1] = ((data[10] << 8) | data[11]);
	gyro[2] = ((data[12] << 8) | data[13]);
}

void ICM20602_Get3AxisGyroRawData(short* gyro)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
	unsigned char data[6];
	ICM20602_Readbytes(GYRO_XOUT_H, 6, data);
 8005d5c:	f107 0308 	add.w	r3, r7, #8
 8005d60:	461a      	mov	r2, r3
 8005d62:	2106      	movs	r1, #6
 8005d64:	2043      	movs	r0, #67	; 0x43
 8005d66:	f7ff ff27 	bl	8005bb8 <ICM20602_Readbytes>
	
	gyro[0] = ((data[0] << 8) | data[1]);
 8005d6a:	7a3b      	ldrb	r3, [r7, #8]
 8005d6c:	021b      	lsls	r3, r3, #8
 8005d6e:	b21a      	sxth	r2, r3
 8005d70:	7a7b      	ldrb	r3, [r7, #9]
 8005d72:	b21b      	sxth	r3, r3
 8005d74:	4313      	orrs	r3, r2
 8005d76:	b21a      	sxth	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	801a      	strh	r2, [r3, #0]
	gyro[1] = ((data[2] << 8) | data[3]);
 8005d7c:	7abb      	ldrb	r3, [r7, #10]
 8005d7e:	021b      	lsls	r3, r3, #8
 8005d80:	b219      	sxth	r1, r3
 8005d82:	7afb      	ldrb	r3, [r7, #11]
 8005d84:	b21a      	sxth	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	3302      	adds	r3, #2
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	b212      	sxth	r2, r2
 8005d8e:	801a      	strh	r2, [r3, #0]
	gyro[2] = ((data[4] << 8) | data[5]);
 8005d90:	7b3b      	ldrb	r3, [r7, #12]
 8005d92:	021b      	lsls	r3, r3, #8
 8005d94:	b219      	sxth	r1, r3
 8005d96:	7b7b      	ldrb	r3, [r7, #13]
 8005d98:	b21a      	sxth	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	3304      	adds	r3, #4
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	b212      	sxth	r2, r2
 8005da2:	801a      	strh	r2, [r3, #0]
}
 8005da4:	bf00      	nop
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <ICM20602_DataReady>:
	accel[1] = ((data[2] << 8) | data[3]);
	accel[2] = ((data[4] << 8) | data[5]);
}

int ICM20602_DataReady(void)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(ICM20602_INT_PORT, ICM20602_INT_PIN);
 8005db0:	2120      	movs	r1, #32
 8005db2:	4803      	ldr	r0, [pc, #12]	; (8005dc0 <ICM20602_DataReady+0x14>)
 8005db4:	f7ff fde0 	bl	8005978 <LL_GPIO_IsInputPinSet>
 8005db8:	4603      	mov	r3, r0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	40020800 	.word	0x40020800

08005dc4 <LL_SPI_Enable>:
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	601a      	str	r2, [r3, #0]
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <LL_SPI_SetStandard>:
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f023 0210 	bic.w	r2, r3, #16
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	431a      	orrs	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	605a      	str	r2, [r3, #4]
}
 8005dfe:	bf00      	nop
 8005e00:	370c      	adds	r7, #12
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <LL_SPI_IsActiveFlag_RXNE>:
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	b083      	sub	sp, #12
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f003 0301 	and.w	r3, r3, #1
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d101      	bne.n	8005e22 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e000      	b.n	8005e24 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <LL_SPI_IsActiveFlag_TXE>:
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f003 0302 	and.w	r3, r3, #2
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d101      	bne.n	8005e48 <LL_SPI_IsActiveFlag_TXE+0x18>
 8005e44:	2301      	movs	r3, #1
 8005e46:	e000      	b.n	8005e4a <LL_SPI_IsActiveFlag_TXE+0x1a>
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	370c      	adds	r7, #12
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr

08005e56 <LL_SPI_ReceiveData8>:
{
 8005e56:	b480      	push	{r7}
 8005e58:	b083      	sub	sp, #12
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	b2db      	uxtb	r3, r3
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <LL_SPI_TransmitData8>:
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	460b      	mov	r3, r1
 8005e7a:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	330c      	adds	r3, #12
 8005e80:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	78fa      	ldrb	r2, [r7, #3]
 8005e86:	701a      	strb	r2, [r3, #0]
}
 8005e88:	bf00      	nop
 8005e8a:	3714      	adds	r7, #20
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <LL_GPIO_SetOutputPin>:
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	683a      	ldr	r2, [r7, #0]
 8005ea2:	619a      	str	r2, [r3, #24]
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <LL_GPIO_ResetOutputPin>:
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	041a      	lsls	r2, r3, #16
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	619a      	str	r2, [r3, #24]
}
 8005ec2:	bf00      	nop
 8005ec4:	370c      	adds	r7, #12
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
	...

08005ed0 <LL_AHB1_GRP1_EnableClock>:
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8005ed8:	4b08      	ldr	r3, [pc, #32]	; (8005efc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005eda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005edc:	4907      	ldr	r1, [pc, #28]	; (8005efc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8005ee4:	4b05      	ldr	r3, [pc, #20]	; (8005efc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005ee6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4013      	ands	r3, r2
 8005eec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005eee:	68fb      	ldr	r3, [r7, #12]
}
 8005ef0:	bf00      	nop
 8005ef2:	3714      	adds	r7, #20
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr
 8005efc:	40023800 	.word	0x40023800

08005f00 <LL_APB1_GRP1_EnableClock>:
{
 8005f00:	b480      	push	{r7}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8005f08:	4b08      	ldr	r3, [pc, #32]	; (8005f2c <LL_APB1_GRP1_EnableClock+0x2c>)
 8005f0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f0c:	4907      	ldr	r1, [pc, #28]	; (8005f2c <LL_APB1_GRP1_EnableClock+0x2c>)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8005f14:	4b05      	ldr	r3, [pc, #20]	; (8005f2c <LL_APB1_GRP1_EnableClock+0x2c>)
 8005f16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
}
 8005f20:	bf00      	nop
 8005f22:	3714      	adds	r7, #20
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	40023800 	.word	0x40023800

08005f30 <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b090      	sub	sp, #64	; 0x40
 8005f34:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8005f36:	f107 0318 	add.w	r3, r7, #24
 8005f3a:	2228      	movs	r2, #40	; 0x28
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f002 f8a0 	bl	8008084 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f44:	463b      	mov	r3, r7
 8005f46:	2200      	movs	r2, #0
 8005f48:	601a      	str	r2, [r3, #0]
 8005f4a:	605a      	str	r2, [r3, #4]
 8005f4c:	609a      	str	r2, [r3, #8]
 8005f4e:	60da      	str	r2, [r3, #12]
 8005f50:	611a      	str	r2, [r3, #16]
 8005f52:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8005f54:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005f58:	f7ff ffd2 	bl	8005f00 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8005f5c:	2002      	movs	r0, #2
 8005f5e:	f7ff ffb7 	bl	8005ed0 <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8005f62:	2338      	movs	r3, #56	; 0x38
 8005f64:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005f66:	2302      	movs	r3, #2
 8005f68:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005f72:	2300      	movs	r3, #0
 8005f74:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8005f76:	2306      	movs	r3, #6
 8005f78:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f7a:	463b      	mov	r3, r7
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	4826      	ldr	r0, [pc, #152]	; (8006018 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8005f80:	f7fe f936 	bl	80041f0 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8005f84:	2300      	movs	r3, #0
 8005f86:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8005f88:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005f8c:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8005f92:	2302      	movs	r3, #2
 8005f94:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8005f96:	2301      	movs	r3, #1
 8005f98:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8005f9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8005fa0:	2308      	movs	r3, #8
 8005fa2:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8005fac:	230a      	movs	r3, #10
 8005fae:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 8005fb0:	f107 0318 	add.w	r3, r7, #24
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	4819      	ldr	r0, [pc, #100]	; (800601c <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8005fb8:	f7fe faeb 	bl	8004592 <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	4817      	ldr	r0, [pc, #92]	; (800601c <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8005fc0:	f7ff ff10 	bl	8005de4 <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 8005fc4:	2140      	movs	r1, #64	; 0x40
 8005fc6:	4814      	ldr	r0, [pc, #80]	; (8006018 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8005fc8:	f7ff ff72 	bl	8005eb0 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 8005fcc:	2340      	movs	r3, #64	; 0x40
 8005fce:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 8005fe0:	463b      	mov	r3, r7
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	480c      	ldr	r0, [pc, #48]	; (8006018 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8005fe6:	f7fe f903 	bl	80041f0 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 8005fea:	2380      	movs	r3, #128	; 0x80
 8005fec:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 8005ff6:	463b      	mov	r3, r7
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	4807      	ldr	r0, [pc, #28]	; (8006018 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8005ffc:	f7fe f8f8 	bl	80041f0 <LL_GPIO_Init>
	
	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 8006000:	4806      	ldr	r0, [pc, #24]	; (800601c <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8006002:	f7ff fedf 	bl	8005dc4 <LL_SPI_Enable>
	
	CHIP_DESELECT(LPS22HH);
 8006006:	2140      	movs	r1, #64	; 0x40
 8006008:	4803      	ldr	r0, [pc, #12]	; (8006018 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 800600a:	f7ff ff43 	bl	8005e94 <LL_GPIO_SetOutputPin>
}
 800600e:	bf00      	nop
 8006010:	3740      	adds	r7, #64	; 0x40
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	40020400 	.word	0x40020400
 800601c:	40003c00 	.word	0x40003c00

08006020 <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	4603      	mov	r3, r0
 8006028:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 800602a:	bf00      	nop
 800602c:	480c      	ldr	r0, [pc, #48]	; (8006060 <SPI3_SendByte+0x40>)
 800602e:	f7ff feff 	bl	8005e30 <LL_SPI_IsActiveFlag_TXE>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d0f9      	beq.n	800602c <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 8006038:	79fb      	ldrb	r3, [r7, #7]
 800603a:	4619      	mov	r1, r3
 800603c:	4808      	ldr	r0, [pc, #32]	; (8006060 <SPI3_SendByte+0x40>)
 800603e:	f7ff ff17 	bl	8005e70 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 8006042:	bf00      	nop
 8006044:	4806      	ldr	r0, [pc, #24]	; (8006060 <SPI3_SendByte+0x40>)
 8006046:	f7ff fee0 	bl	8005e0a <LL_SPI_IsActiveFlag_RXNE>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d0f9      	beq.n	8006044 <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 8006050:	4803      	ldr	r0, [pc, #12]	; (8006060 <SPI3_SendByte+0x40>)
 8006052:	f7ff ff00 	bl	8005e56 <LL_SPI_ReceiveData8>
 8006056:	4603      	mov	r3, r0
}
 8006058:	4618      	mov	r0, r3
 800605a:	3708      	adds	r7, #8
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	40003c00 	.word	0x40003c00

08006064 <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	4603      	mov	r3, r0
 800606c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 800606e:	2140      	movs	r1, #64	; 0x40
 8006070:	480b      	ldr	r0, [pc, #44]	; (80060a0 <LPS22HH_Readbyte+0x3c>)
 8006072:	f7ff ff1d 	bl	8005eb0 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8006076:	79fb      	ldrb	r3, [r7, #7]
 8006078:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800607c:	b2db      	uxtb	r3, r3
 800607e:	4618      	mov	r0, r3
 8006080:	f7ff ffce 	bl	8006020 <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 8006084:	2000      	movs	r0, #0
 8006086:	f7ff ffcb 	bl	8006020 <SPI3_SendByte>
 800608a:	4603      	mov	r3, r0
 800608c:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 800608e:	2140      	movs	r1, #64	; 0x40
 8006090:	4803      	ldr	r0, [pc, #12]	; (80060a0 <LPS22HH_Readbyte+0x3c>)
 8006092:	f7ff feff 	bl	8005e94 <LL_GPIO_SetOutputPin>
	
	return val;
 8006096:	7bfb      	ldrb	r3, [r7, #15]
}
 8006098:	4618      	mov	r0, r3
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	40020400 	.word	0x40020400

080060a4 <LPS22HH_Writebyte>:
	}
	CHIP_DESELECT(LPS22HH);
}

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	4603      	mov	r3, r0
 80060ac:	460a      	mov	r2, r1
 80060ae:	71fb      	strb	r3, [r7, #7]
 80060b0:	4613      	mov	r3, r2
 80060b2:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 80060b4:	2140      	movs	r1, #64	; 0x40
 80060b6:	480b      	ldr	r0, [pc, #44]	; (80060e4 <LPS22HH_Writebyte+0x40>)
 80060b8:	f7ff fefa 	bl	8005eb0 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80060bc:	79fb      	ldrb	r3, [r7, #7]
 80060be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7ff ffab 	bl	8006020 <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 80060ca:	79bb      	ldrb	r3, [r7, #6]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7ff ffa7 	bl	8006020 <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 80060d2:	2140      	movs	r1, #64	; 0x40
 80060d4:	4803      	ldr	r0, [pc, #12]	; (80060e4 <LPS22HH_Writebyte+0x40>)
 80060d6:	f7ff fedd 	bl	8005e94 <LL_GPIO_SetOutputPin>
}
 80060da:	bf00      	nop
 80060dc:	3708      	adds	r7, #8
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	40020400 	.word	0x40020400

080060e8 <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 80060ee:	2300      	movs	r3, #0
 80060f0:	71fb      	strb	r3, [r7, #7]
	
	LPS22HH_GPIO_SPI_Initialization();
 80060f2:	f7ff ff1d 	bl	8005f30 <LPS22HH_GPIO_SPI_Initialization>
	
	printf("Checking LPS22HH...");
 80060f6:	4841      	ldr	r0, [pc, #260]	; (80061fc <LPS22HH_Initialization+0x114>)
 80060f8:	f002 fc36 	bl	8008968 <iprintf>
	
	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F); 
 80060fc:	200f      	movs	r0, #15
 80060fe:	f7ff ffb1 	bl	8006064 <LPS22HH_Readbyte>
 8006102:	4603      	mov	r3, r0
 8006104:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 8006106:	79fb      	ldrb	r3, [r7, #7]
 8006108:	2bb3      	cmp	r3, #179	; 0xb3
 800610a:	d105      	bne.n	8006118 <LPS22HH_Initialization+0x30>
	{
		printf("\nLPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 800610c:	79fb      	ldrb	r3, [r7, #7]
 800610e:	4619      	mov	r1, r3
 8006110:	483b      	ldr	r0, [pc, #236]	; (8006200 <LPS22HH_Initialization+0x118>)
 8006112:	f002 fc29 	bl	8008968 <iprintf>
 8006116:	e012      	b.n	800613e <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 8006118:	79fb      	ldrb	r3, [r7, #7]
 800611a:	2bb3      	cmp	r3, #179	; 0xb3
 800611c:	d00f      	beq.n	800613e <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 800611e:	200f      	movs	r0, #15
 8006120:	f7ff ffa0 	bl	8006064 <LPS22HH_Readbyte>
 8006124:	4603      	mov	r3, r0
 8006126:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 8006128:	79fb      	ldrb	r3, [r7, #7]
 800612a:	2bb3      	cmp	r3, #179	; 0xb3
 800612c:	d007      	beq.n	800613e <LPS22HH_Initialization+0x56>
			printf( "nLPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 800612e:	79fb      	ldrb	r3, [r7, #7]
 8006130:	22b3      	movs	r2, #179	; 0xb3
 8006132:	4619      	mov	r1, r3
 8006134:	4833      	ldr	r0, [pc, #204]	; (8006204 <LPS22HH_Initialization+0x11c>)
 8006136:	f002 fc17 	bl	8008968 <iprintf>
			return 1; //ERROR
 800613a:	2301      	movs	r3, #1
 800613c:	e059      	b.n	80061f2 <LPS22HH_Initialization+0x10a>
		}
	}
	
	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 800613e:	2104      	movs	r1, #4
 8006140:	2011      	movs	r0, #17
 8006142:	f7ff ffaf 	bl	80060a4 <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 8006146:	2011      	movs	r0, #17
 8006148:	f7ff ff8c 	bl	8006064 <LPS22HH_Readbyte>
 800614c:	4603      	mov	r3, r0
 800614e:	f003 0304 	and.w	r3, r3, #4
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1f7      	bne.n	8006146 <LPS22HH_Initialization+0x5e>
	
	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8006156:	2010      	movs	r0, #16
 8006158:	f7ff ff84 	bl	8006064 <LPS22HH_Readbyte>
 800615c:	4603      	mov	r3, r0
 800615e:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 8006160:	79bb      	ldrb	r3, [r7, #6]
 8006162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006166:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8006168:	79bb      	ldrb	r3, [r7, #6]
 800616a:	4619      	mov	r1, r3
 800616c:	2010      	movs	r0, #16
 800616e:	f7ff ff99 	bl	80060a4 <LPS22HH_Writebyte>
	temp_reg = 0;
 8006172:	2300      	movs	r3, #0
 8006174:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8006176:	2010      	movs	r0, #16
 8006178:	f7ff ff74 	bl	8006064 <LPS22HH_Readbyte>
 800617c:	4603      	mov	r3, r0
 800617e:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);
	
	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8006180:	2010      	movs	r0, #16
 8006182:	f7ff ff6f 	bl	8006064 <LPS22HH_Readbyte>
 8006186:	4603      	mov	r3, r0
 8006188:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 800618a:	79bb      	ldrb	r3, [r7, #6]
 800618c:	f043 030c 	orr.w	r3, r3, #12
 8006190:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8006192:	79bb      	ldrb	r3, [r7, #6]
 8006194:	4619      	mov	r1, r3
 8006196:	2010      	movs	r0, #16
 8006198:	f7ff ff84 	bl	80060a4 <LPS22HH_Writebyte>
	
	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 800619c:	2010      	movs	r0, #16
 800619e:	f7ff ff61 	bl	8006064 <LPS22HH_Readbyte>
 80061a2:	4603      	mov	r3, r0
 80061a4:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 80061a6:	79bb      	ldrb	r3, [r7, #6]
 80061a8:	f043 0302 	orr.w	r3, r3, #2
 80061ac:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 80061ae:	79bb      	ldrb	r3, [r7, #6]
 80061b0:	4619      	mov	r1, r3
 80061b2:	2010      	movs	r0, #16
 80061b4:	f7ff ff76 	bl	80060a4 <LPS22HH_Writebyte>
	
	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 80061b8:	2011      	movs	r0, #17
 80061ba:	f7ff ff53 	bl	8006064 <LPS22HH_Readbyte>
 80061be:	4603      	mov	r3, r0
 80061c0:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 80061c2:	79bb      	ldrb	r3, [r7, #6]
 80061c4:	f043 0302 	orr.w	r3, r3, #2
 80061c8:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 80061ca:	79bb      	ldrb	r3, [r7, #6]
 80061cc:	4619      	mov	r1, r3
 80061ce:	2011      	movs	r0, #17
 80061d0:	f7ff ff68 	bl	80060a4 <LPS22HH_Writebyte>
	
	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 80061d4:	2012      	movs	r0, #18
 80061d6:	f7ff ff45 	bl	8006064 <LPS22HH_Readbyte>
 80061da:	4603      	mov	r3, r0
 80061dc:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 80061de:	79bb      	ldrb	r3, [r7, #6]
 80061e0:	f043 0304 	orr.w	r3, r3, #4
 80061e4:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 80061e6:	79bb      	ldrb	r3, [r7, #6]
 80061e8:	4619      	mov	r1, r3
 80061ea:	2012      	movs	r0, #18
 80061ec:	f7ff ff5a 	bl	80060a4 <LPS22HH_Writebyte>
	
	return 0; //OK
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3708      	adds	r7, #8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	0800ad0c 	.word	0x0800ad0c
 8006200:	0800ad20 	.word	0x0800ad20
 8006204:	0800ad44 	.word	0x0800ad44

08006208 <__NVIC_GetPriorityGrouping>:
{
 8006208:	b480      	push	{r7}
 800620a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800620c:	4b04      	ldr	r3, [pc, #16]	; (8006220 <__NVIC_GetPriorityGrouping+0x18>)
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	0a1b      	lsrs	r3, r3, #8
 8006212:	f003 0307 	and.w	r3, r3, #7
}
 8006216:	4618      	mov	r0, r3
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr
 8006220:	e000ed00 	.word	0xe000ed00

08006224 <__NVIC_EnableIRQ>:
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	4603      	mov	r3, r0
 800622c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800622e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006232:	2b00      	cmp	r3, #0
 8006234:	db0b      	blt.n	800624e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006236:	79fb      	ldrb	r3, [r7, #7]
 8006238:	f003 021f 	and.w	r2, r3, #31
 800623c:	4907      	ldr	r1, [pc, #28]	; (800625c <__NVIC_EnableIRQ+0x38>)
 800623e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006242:	095b      	lsrs	r3, r3, #5
 8006244:	2001      	movs	r0, #1
 8006246:	fa00 f202 	lsl.w	r2, r0, r2
 800624a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800624e:	bf00      	nop
 8006250:	370c      	adds	r7, #12
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	e000e100 	.word	0xe000e100

08006260 <__NVIC_SetPriority>:
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	4603      	mov	r3, r0
 8006268:	6039      	str	r1, [r7, #0]
 800626a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800626c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006270:	2b00      	cmp	r3, #0
 8006272:	db0a      	blt.n	800628a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	b2da      	uxtb	r2, r3
 8006278:	490c      	ldr	r1, [pc, #48]	; (80062ac <__NVIC_SetPriority+0x4c>)
 800627a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800627e:	0112      	lsls	r2, r2, #4
 8006280:	b2d2      	uxtb	r2, r2
 8006282:	440b      	add	r3, r1
 8006284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006288:	e00a      	b.n	80062a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	b2da      	uxtb	r2, r3
 800628e:	4908      	ldr	r1, [pc, #32]	; (80062b0 <__NVIC_SetPriority+0x50>)
 8006290:	79fb      	ldrb	r3, [r7, #7]
 8006292:	f003 030f 	and.w	r3, r3, #15
 8006296:	3b04      	subs	r3, #4
 8006298:	0112      	lsls	r2, r2, #4
 800629a:	b2d2      	uxtb	r2, r2
 800629c:	440b      	add	r3, r1
 800629e:	761a      	strb	r2, [r3, #24]
}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr
 80062ac:	e000e100 	.word	0xe000e100
 80062b0:	e000ed00 	.word	0xe000ed00

080062b4 <NVIC_EncodePriority>:
{
 80062b4:	b480      	push	{r7}
 80062b6:	b089      	sub	sp, #36	; 0x24
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f003 0307 	and.w	r3, r3, #7
 80062c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	f1c3 0307 	rsb	r3, r3, #7
 80062ce:	2b04      	cmp	r3, #4
 80062d0:	bf28      	it	cs
 80062d2:	2304      	movcs	r3, #4
 80062d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	3304      	adds	r3, #4
 80062da:	2b06      	cmp	r3, #6
 80062dc:	d902      	bls.n	80062e4 <NVIC_EncodePriority+0x30>
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	3b03      	subs	r3, #3
 80062e2:	e000      	b.n	80062e6 <NVIC_EncodePriority+0x32>
 80062e4:	2300      	movs	r3, #0
 80062e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062e8:	f04f 32ff 	mov.w	r2, #4294967295
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	fa02 f303 	lsl.w	r3, r2, r3
 80062f2:	43da      	mvns	r2, r3
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	401a      	ands	r2, r3
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80062fc:	f04f 31ff 	mov.w	r1, #4294967295
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	fa01 f303 	lsl.w	r3, r1, r3
 8006306:	43d9      	mvns	r1, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800630c:	4313      	orrs	r3, r2
}
 800630e:	4618      	mov	r0, r3
 8006310:	3724      	adds	r7, #36	; 0x24
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr

0800631a <LL_USART_Enable>:
{
 800631a:	b480      	push	{r7}
 800631c:	b083      	sub	sp, #12
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	60da      	str	r2, [r3, #12]
}
 800632e:	bf00      	nop
 8006330:	370c      	adds	r7, #12
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr

0800633a <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800633a:	b480      	push	{r7}
 800633c:	b083      	sub	sp, #12
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	615a      	str	r2, [r3, #20]
}
 800635a:	bf00      	nop
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8006366:	b480      	push	{r7}
 8006368:	b083      	sub	sp, #12
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006376:	2b80      	cmp	r3, #128	; 0x80
 8006378:	bf0c      	ite	eq
 800637a:	2301      	moveq	r3, #1
 800637c:	2300      	movne	r3, #0
 800637e:	b2db      	uxtb	r3, r3
}
 8006380:	4618      	mov	r0, r3
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	460b      	mov	r3, r1
 8006396:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8006398:	78fa      	ldrb	r2, [r7, #3]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	605a      	str	r2, [r3, #4]
}
 800639e:	bf00      	nop
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
	...

080063ac <LL_AHB1_GRP1_EnableClock>:
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80063b4:	4b08      	ldr	r3, [pc, #32]	; (80063d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80063b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063b8:	4907      	ldr	r1, [pc, #28]	; (80063d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4313      	orrs	r3, r2
 80063be:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80063c0:	4b05      	ldr	r3, [pc, #20]	; (80063d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80063c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4013      	ands	r3, r2
 80063c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80063ca:	68fb      	ldr	r3, [r7, #12]
}
 80063cc:	bf00      	nop
 80063ce:	3714      	adds	r7, #20
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr
 80063d8:	40023800 	.word	0x40023800

080063dc <LL_APB1_GRP1_EnableClock>:
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80063e4:	4b08      	ldr	r3, [pc, #32]	; (8006408 <LL_APB1_GRP1_EnableClock+0x2c>)
 80063e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063e8:	4907      	ldr	r1, [pc, #28]	; (8006408 <LL_APB1_GRP1_EnableClock+0x2c>)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80063f0:	4b05      	ldr	r3, [pc, #20]	; (8006408 <LL_APB1_GRP1_EnableClock+0x2c>)
 80063f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4013      	ands	r3, r2
 80063f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80063fa:	68fb      	ldr	r3, [r7, #12]
}
 80063fc:	bf00      	nop
 80063fe:	3714      	adds	r7, #20
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr
 8006408:	40023800 	.word	0x40023800

0800640c <M8N_TransmitData>:
	0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x31,
	0xBF
};

void M8N_TransmitData(unsigned char* data, unsigned char len)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	460b      	mov	r3, r1
 8006416:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<len;i++)
 8006418:	2300      	movs	r3, #0
 800641a:	60fb      	str	r3, [r7, #12]
 800641c:	e011      	b.n	8006442 <M8N_TransmitData+0x36>
	{
		while(!LL_USART_IsActiveFlag_TXE(UART4));
 800641e:	bf00      	nop
 8006420:	480c      	ldr	r0, [pc, #48]	; (8006454 <M8N_TransmitData+0x48>)
 8006422:	f7ff ffa0 	bl	8006366 <LL_USART_IsActiveFlag_TXE>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d0f9      	beq.n	8006420 <M8N_TransmitData+0x14>
		LL_USART_TransmitData8(UART4, *(data+i));
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	4413      	add	r3, r2
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	4619      	mov	r1, r3
 8006436:	4807      	ldr	r0, [pc, #28]	; (8006454 <M8N_TransmitData+0x48>)
 8006438:	f7ff ffa8 	bl	800638c <LL_USART_TransmitData8>
	for(int i=0;i<len;i++)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	3301      	adds	r3, #1
 8006440:	60fb      	str	r3, [r7, #12]
 8006442:	78fb      	ldrb	r3, [r7, #3]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	429a      	cmp	r2, r3
 8006448:	dbe9      	blt.n	800641e <M8N_TransmitData+0x12>
	}
}
 800644a:	bf00      	nop
 800644c:	bf00      	nop
 800644e:	3710      	adds	r7, #16
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	40004c00 	.word	0x40004c00

08006458 <M8N_UART4_Initialization>:

void M8N_UART4_Initialization(void)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b08e      	sub	sp, #56	; 0x38
 800645c:	af00      	add	r7, sp, #0
	LL_USART_InitTypeDef USART_InitStruct = {0};
 800645e:	f107 031c 	add.w	r3, r7, #28
 8006462:	2200      	movs	r2, #0
 8006464:	601a      	str	r2, [r3, #0]
 8006466:	605a      	str	r2, [r3, #4]
 8006468:	609a      	str	r2, [r3, #8]
 800646a:	60da      	str	r2, [r3, #12]
 800646c:	611a      	str	r2, [r3, #16]
 800646e:	615a      	str	r2, [r3, #20]
 8006470:	619a      	str	r2, [r3, #24]

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006472:	1d3b      	adds	r3, r7, #4
 8006474:	2200      	movs	r2, #0
 8006476:	601a      	str	r2, [r3, #0]
 8006478:	605a      	str	r2, [r3, #4]
 800647a:	609a      	str	r2, [r3, #8]
 800647c:	60da      	str	r2, [r3, #12]
 800647e:	611a      	str	r2, [r3, #16]
 8006480:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8006482:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006486:	f7ff ffa9 	bl	80063dc <LL_APB1_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800648a:	2004      	movs	r0, #4
 800648c:	f7ff ff8e 	bl	80063ac <LL_AHB1_GRP1_EnableClock>
	/**UART4 GPIO Configuration
	PC10   ------> UART4_TX
	PC11   ------> UART4_RX
	*/
	GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 8006490:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006494:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006496:	2302      	movs	r3, #2
 8006498:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800649a:	2303      	movs	r3, #3
 800649c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800649e:	2300      	movs	r3, #0
 80064a0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80064a2:	2301      	movs	r3, #1
 80064a4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80064a6:	2308      	movs	r3, #8
 80064a8:	61bb      	str	r3, [r7, #24]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064aa:	1d3b      	adds	r3, r7, #4
 80064ac:	4619      	mov	r1, r3
 80064ae:	4819      	ldr	r0, [pc, #100]	; (8006514 <M8N_UART4_Initialization+0xbc>)
 80064b0:	f7fd fe9e 	bl	80041f0 <LL_GPIO_Init>

	/* UART4 interrupt Init */
	NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80064b4:	f7ff fea8 	bl	8006208 <__NVIC_GetPriorityGrouping>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2200      	movs	r2, #0
 80064bc:	2100      	movs	r1, #0
 80064be:	4618      	mov	r0, r3
 80064c0:	f7ff fef8 	bl	80062b4 <NVIC_EncodePriority>
 80064c4:	4603      	mov	r3, r0
 80064c6:	4619      	mov	r1, r3
 80064c8:	2034      	movs	r0, #52	; 0x34
 80064ca:	f7ff fec9 	bl	8006260 <__NVIC_SetPriority>
	NVIC_EnableIRQ(UART4_IRQn);
 80064ce:	2034      	movs	r0, #52	; 0x34
 80064d0:	f7ff fea8 	bl	8006224 <__NVIC_EnableIRQ>

	USART_InitStruct.BaudRate = 9600;
 80064d4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80064d8:	61fb      	str	r3, [r7, #28]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80064da:	2300      	movs	r3, #0
 80064dc:	623b      	str	r3, [r7, #32]
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80064de:	2300      	movs	r3, #0
 80064e0:	627b      	str	r3, [r7, #36]	; 0x24
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80064e2:	2300      	movs	r3, #0
 80064e4:	62bb      	str	r3, [r7, #40]	; 0x28
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80064e6:	230c      	movs	r3, #12
 80064e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80064ea:	2300      	movs	r3, #0
 80064ec:	633b      	str	r3, [r7, #48]	; 0x30
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80064ee:	2300      	movs	r3, #0
 80064f0:	637b      	str	r3, [r7, #52]	; 0x34
	LL_USART_Init(UART4, &USART_InitStruct);
 80064f2:	f107 031c 	add.w	r3, r7, #28
 80064f6:	4619      	mov	r1, r3
 80064f8:	4807      	ldr	r0, [pc, #28]	; (8006518 <M8N_UART4_Initialization+0xc0>)
 80064fa:	f7fe fdf5 	bl	80050e8 <LL_USART_Init>
	LL_USART_ConfigAsyncMode(UART4);
 80064fe:	4806      	ldr	r0, [pc, #24]	; (8006518 <M8N_UART4_Initialization+0xc0>)
 8006500:	f7ff ff1b 	bl	800633a <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(UART4);
 8006504:	4804      	ldr	r0, [pc, #16]	; (8006518 <M8N_UART4_Initialization+0xc0>)
 8006506:	f7ff ff08 	bl	800631a <LL_USART_Enable>
}
 800650a:	bf00      	nop
 800650c:	3738      	adds	r7, #56	; 0x38
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	40020800 	.word	0x40020800
 8006518:	40004c00 	.word	0x40004c00

0800651c <M8N_Initialization>:

void M8N_Initialization(void)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	af00      	add	r7, sp, #0
	M8N_UART4_Initialization();
 8006520:	f7ff ff9a 	bl	8006458 <M8N_UART4_Initialization>

	M8N_TransmitData(&UBX_CFG_PRT[0], sizeof(UBX_CFG_PRT));
 8006524:	211c      	movs	r1, #28
 8006526:	480d      	ldr	r0, [pc, #52]	; (800655c <M8N_Initialization+0x40>)
 8006528:	f7ff ff70 	bl	800640c <M8N_TransmitData>
	HAL_Delay(100);
 800652c:	2064      	movs	r0, #100	; 0x64
 800652e:	f7fa fd2f 	bl	8000f90 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_MSG[0], sizeof(UBX_CFG_MSG));
 8006532:	2110      	movs	r1, #16
 8006534:	480a      	ldr	r0, [pc, #40]	; (8006560 <M8N_Initialization+0x44>)
 8006536:	f7ff ff69 	bl	800640c <M8N_TransmitData>
	HAL_Delay(100);
 800653a:	2064      	movs	r0, #100	; 0x64
 800653c:	f7fa fd28 	bl	8000f90 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_RATE[0], sizeof(UBX_CFG_RATE));
 8006540:	210e      	movs	r1, #14
 8006542:	4808      	ldr	r0, [pc, #32]	; (8006564 <M8N_Initialization+0x48>)
 8006544:	f7ff ff62 	bl	800640c <M8N_TransmitData>
	HAL_Delay(100);
 8006548:	2064      	movs	r0, #100	; 0x64
 800654a:	f7fa fd21 	bl	8000f90 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_CFG[0], sizeof(UBX_CFG_CFG));
 800654e:	2115      	movs	r1, #21
 8006550:	4805      	ldr	r0, [pc, #20]	; (8006568 <M8N_Initialization+0x4c>)
 8006552:	f7ff ff5b 	bl	800640c <M8N_TransmitData>
}
 8006556:	bf00      	nop
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	0800aecc 	.word	0x0800aecc
 8006560:	0800aee8 	.word	0x0800aee8
 8006564:	0800aef8 	.word	0x0800aef8
 8006568:	0800af08 	.word	0x0800af08

0800656c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8006572:	463b      	mov	r3, r7
 8006574:	2200      	movs	r2, #0
 8006576:	601a      	str	r2, [r3, #0]
 8006578:	605a      	str	r2, [r3, #4]
 800657a:	609a      	str	r2, [r3, #8]
 800657c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800657e:	4b21      	ldr	r3, [pc, #132]	; (8006604 <MX_ADC1_Init+0x98>)
 8006580:	4a21      	ldr	r2, [pc, #132]	; (8006608 <MX_ADC1_Init+0x9c>)
 8006582:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8006584:	4b1f      	ldr	r3, [pc, #124]	; (8006604 <MX_ADC1_Init+0x98>)
 8006586:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800658a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800658c:	4b1d      	ldr	r3, [pc, #116]	; (8006604 <MX_ADC1_Init+0x98>)
 800658e:	2200      	movs	r2, #0
 8006590:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8006592:	4b1c      	ldr	r3, [pc, #112]	; (8006604 <MX_ADC1_Init+0x98>)
 8006594:	2200      	movs	r2, #0
 8006596:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8006598:	4b1a      	ldr	r3, [pc, #104]	; (8006604 <MX_ADC1_Init+0x98>)
 800659a:	2201      	movs	r2, #1
 800659c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800659e:	4b19      	ldr	r3, [pc, #100]	; (8006604 <MX_ADC1_Init+0x98>)
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80065a6:	4b17      	ldr	r3, [pc, #92]	; (8006604 <MX_ADC1_Init+0x98>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80065ac:	4b15      	ldr	r3, [pc, #84]	; (8006604 <MX_ADC1_Init+0x98>)
 80065ae:	4a17      	ldr	r2, [pc, #92]	; (800660c <MX_ADC1_Init+0xa0>)
 80065b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80065b2:	4b14      	ldr	r3, [pc, #80]	; (8006604 <MX_ADC1_Init+0x98>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80065b8:	4b12      	ldr	r3, [pc, #72]	; (8006604 <MX_ADC1_Init+0x98>)
 80065ba:	2201      	movs	r2, #1
 80065bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80065be:	4b11      	ldr	r3, [pc, #68]	; (8006604 <MX_ADC1_Init+0x98>)
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80065c6:	4b0f      	ldr	r3, [pc, #60]	; (8006604 <MX_ADC1_Init+0x98>)
 80065c8:	2201      	movs	r2, #1
 80065ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80065cc:	480d      	ldr	r0, [pc, #52]	; (8006604 <MX_ADC1_Init+0x98>)
 80065ce:	f7fa fd03 	bl	8000fd8 <HAL_ADC_Init>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d001      	beq.n	80065dc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80065d8:	f000 fc66 	bl	8006ea8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80065dc:	2308      	movs	r3, #8
 80065de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80065e0:	2301      	movs	r3, #1
 80065e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80065e4:	2307      	movs	r3, #7
 80065e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80065e8:	463b      	mov	r3, r7
 80065ea:	4619      	mov	r1, r3
 80065ec:	4805      	ldr	r0, [pc, #20]	; (8006604 <MX_ADC1_Init+0x98>)
 80065ee:	f7fa fe47 	bl	8001280 <HAL_ADC_ConfigChannel>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d001      	beq.n	80065fc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80065f8:	f000 fc56 	bl	8006ea8 <Error_Handler>
  }

}
 80065fc:	bf00      	nop
 80065fe:	3710      	adds	r7, #16
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	200002b0 	.word	0x200002b0
 8006608:	40012000 	.word	0x40012000
 800660c:	0f000001 	.word	0x0f000001

08006610 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b08a      	sub	sp, #40	; 0x28
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006618:	f107 0314 	add.w	r3, r7, #20
 800661c:	2200      	movs	r2, #0
 800661e:	601a      	str	r2, [r3, #0]
 8006620:	605a      	str	r2, [r3, #4]
 8006622:	609a      	str	r2, [r3, #8]
 8006624:	60da      	str	r2, [r3, #12]
 8006626:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a2e      	ldr	r2, [pc, #184]	; (80066e8 <HAL_ADC_MspInit+0xd8>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d156      	bne.n	80066e0 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006632:	2300      	movs	r3, #0
 8006634:	613b      	str	r3, [r7, #16]
 8006636:	4b2d      	ldr	r3, [pc, #180]	; (80066ec <HAL_ADC_MspInit+0xdc>)
 8006638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800663a:	4a2c      	ldr	r2, [pc, #176]	; (80066ec <HAL_ADC_MspInit+0xdc>)
 800663c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006640:	6453      	str	r3, [r2, #68]	; 0x44
 8006642:	4b2a      	ldr	r3, [pc, #168]	; (80066ec <HAL_ADC_MspInit+0xdc>)
 8006644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800664a:	613b      	str	r3, [r7, #16]
 800664c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800664e:	2300      	movs	r3, #0
 8006650:	60fb      	str	r3, [r7, #12]
 8006652:	4b26      	ldr	r3, [pc, #152]	; (80066ec <HAL_ADC_MspInit+0xdc>)
 8006654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006656:	4a25      	ldr	r2, [pc, #148]	; (80066ec <HAL_ADC_MspInit+0xdc>)
 8006658:	f043 0302 	orr.w	r3, r3, #2
 800665c:	6313      	str	r3, [r2, #48]	; 0x30
 800665e:	4b23      	ldr	r3, [pc, #140]	; (80066ec <HAL_ADC_MspInit+0xdc>)
 8006660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006662:	f003 0302 	and.w	r3, r3, #2
 8006666:	60fb      	str	r3, [r7, #12]
 8006668:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800666a:	2301      	movs	r3, #1
 800666c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800666e:	2303      	movs	r3, #3
 8006670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006672:	2300      	movs	r3, #0
 8006674:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006676:	f107 0314 	add.w	r3, r7, #20
 800667a:	4619      	mov	r1, r3
 800667c:	481c      	ldr	r0, [pc, #112]	; (80066f0 <HAL_ADC_MspInit+0xe0>)
 800667e:	f7fb fd43 	bl	8002108 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8006682:	4b1c      	ldr	r3, [pc, #112]	; (80066f4 <HAL_ADC_MspInit+0xe4>)
 8006684:	4a1c      	ldr	r2, [pc, #112]	; (80066f8 <HAL_ADC_MspInit+0xe8>)
 8006686:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8006688:	4b1a      	ldr	r3, [pc, #104]	; (80066f4 <HAL_ADC_MspInit+0xe4>)
 800668a:	2200      	movs	r2, #0
 800668c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800668e:	4b19      	ldr	r3, [pc, #100]	; (80066f4 <HAL_ADC_MspInit+0xe4>)
 8006690:	2200      	movs	r2, #0
 8006692:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006694:	4b17      	ldr	r3, [pc, #92]	; (80066f4 <HAL_ADC_MspInit+0xe4>)
 8006696:	2200      	movs	r2, #0
 8006698:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 800669a:	4b16      	ldr	r3, [pc, #88]	; (80066f4 <HAL_ADC_MspInit+0xe4>)
 800669c:	2200      	movs	r2, #0
 800669e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80066a0:	4b14      	ldr	r3, [pc, #80]	; (80066f4 <HAL_ADC_MspInit+0xe4>)
 80066a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066a6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80066a8:	4b12      	ldr	r3, [pc, #72]	; (80066f4 <HAL_ADC_MspInit+0xe4>)
 80066aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80066ae:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80066b0:	4b10      	ldr	r3, [pc, #64]	; (80066f4 <HAL_ADC_MspInit+0xe4>)
 80066b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066b6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80066b8:	4b0e      	ldr	r3, [pc, #56]	; (80066f4 <HAL_ADC_MspInit+0xe4>)
 80066ba:	2200      	movs	r2, #0
 80066bc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80066be:	4b0d      	ldr	r3, [pc, #52]	; (80066f4 <HAL_ADC_MspInit+0xe4>)
 80066c0:	2200      	movs	r2, #0
 80066c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80066c4:	480b      	ldr	r0, [pc, #44]	; (80066f4 <HAL_ADC_MspInit+0xe4>)
 80066c6:	f7fb f98d 	bl	80019e4 <HAL_DMA_Init>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d001      	beq.n	80066d4 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80066d0:	f000 fbea 	bl	8006ea8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a07      	ldr	r2, [pc, #28]	; (80066f4 <HAL_ADC_MspInit+0xe4>)
 80066d8:	639a      	str	r2, [r3, #56]	; 0x38
 80066da:	4a06      	ldr	r2, [pc, #24]	; (80066f4 <HAL_ADC_MspInit+0xe4>)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80066e0:	bf00      	nop
 80066e2:	3728      	adds	r7, #40	; 0x28
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	40012000 	.word	0x40012000
 80066ec:	40023800 	.word	0x40023800
 80066f0:	40020400 	.word	0x40020400
 80066f4:	200002f8 	.word	0x200002f8
 80066f8:	40026410 	.word	0x40026410

080066fc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006702:	2300      	movs	r3, #0
 8006704:	607b      	str	r3, [r7, #4]
 8006706:	4b0c      	ldr	r3, [pc, #48]	; (8006738 <MX_DMA_Init+0x3c>)
 8006708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670a:	4a0b      	ldr	r2, [pc, #44]	; (8006738 <MX_DMA_Init+0x3c>)
 800670c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006710:	6313      	str	r3, [r2, #48]	; 0x30
 8006712:	4b09      	ldr	r3, [pc, #36]	; (8006738 <MX_DMA_Init+0x3c>)
 8006714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800671a:	607b      	str	r3, [r7, #4]
 800671c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800671e:	2200      	movs	r2, #0
 8006720:	2100      	movs	r1, #0
 8006722:	2038      	movs	r0, #56	; 0x38
 8006724:	f7fb f927 	bl	8001976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8006728:	2038      	movs	r0, #56	; 0x38
 800672a:	f7fb f940 	bl	80019ae <HAL_NVIC_EnableIRQ>

}
 800672e:	bf00      	nop
 8006730:	3708      	adds	r7, #8
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	40023800 	.word	0x40023800

0800673c <LL_GPIO_SetOutputPin>:
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	683a      	ldr	r2, [r7, #0]
 800674a:	619a      	str	r2, [r3, #24]
}
 800674c:	bf00      	nop
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <LL_GPIO_ResetOutputPin>:
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	041a      	lsls	r2, r3, #16
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	619a      	str	r2, [r3, #24]
}
 800676a:	bf00      	nop
 800676c:	370c      	adds	r7, #12
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
	...

08006778 <LL_AHB1_GRP1_EnableClock>:
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8006780:	4b08      	ldr	r3, [pc, #32]	; (80067a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006782:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006784:	4907      	ldr	r1, [pc, #28]	; (80067a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4313      	orrs	r3, r2
 800678a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800678c:	4b05      	ldr	r3, [pc, #20]	; (80067a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800678e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4013      	ands	r3, r2
 8006794:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006796:	68fb      	ldr	r3, [r7, #12]
}
 8006798:	bf00      	nop
 800679a:	3714      	adds	r7, #20
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr
 80067a4:	40023800 	.word	0x40023800

080067a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b086      	sub	sp, #24
 80067ac:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067ae:	463b      	mov	r3, r7
 80067b0:	2200      	movs	r2, #0
 80067b2:	601a      	str	r2, [r3, #0]
 80067b4:	605a      	str	r2, [r3, #4]
 80067b6:	609a      	str	r2, [r3, #8]
 80067b8:	60da      	str	r2, [r3, #12]
 80067ba:	611a      	str	r2, [r3, #16]
 80067bc:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80067be:	2004      	movs	r0, #4
 80067c0:	f7ff ffda 	bl	8006778 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80067c4:	2080      	movs	r0, #128	; 0x80
 80067c6:	f7ff ffd7 	bl	8006778 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80067ca:	2001      	movs	r0, #1
 80067cc:	f7ff ffd4 	bl	8006778 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80067d0:	2002      	movs	r0, #2
 80067d2:	f7ff ffd1 	bl	8006778 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80067d6:	2008      	movs	r0, #8
 80067d8:	f7ff ffce 	bl	8006778 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 80067dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80067e0:	482e      	ldr	r0, [pc, #184]	; (800689c <MX_GPIO_Init+0xf4>)
 80067e2:	f7ff ffab 	bl	800673c <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4 
 80067e6:	f240 2117 	movw	r1, #535	; 0x217
 80067ea:	482c      	ldr	r0, [pc, #176]	; (800689c <MX_GPIO_Init+0xf4>)
 80067ec:	f7ff ffb4 	bl	8006758 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12|LL_GPIO_PIN_6);
 80067f0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80067f4:	482a      	ldr	r0, [pc, #168]	; (80068a0 <MX_GPIO_Init+0xf8>)
 80067f6:	f7ff ffaf 	bl	8006758 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 80067fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80067fe:	4829      	ldr	r0, [pc, #164]	; (80068a4 <MX_GPIO_Init+0xfc>)
 8006800:	f7ff ffaa 	bl	8006758 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2 
 8006804:	f242 2317 	movw	r3, #8727	; 0x2217
 8006808:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800680a:	2301      	movs	r3, #1
 800680c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800680e:	2300      	movs	r3, #0
 8006810:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006812:	2300      	movs	r3, #0
 8006814:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006816:	2300      	movs	r3, #0
 8006818:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800681a:	463b      	mov	r3, r7
 800681c:	4619      	mov	r1, r3
 800681e:	481f      	ldr	r0, [pc, #124]	; (800689c <MX_GPIO_Init+0xf4>)
 8006820:	f7fd fce6 	bl	80041f0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_8;
 8006824:	f44f 7390 	mov.w	r3, #288	; 0x120
 8006828:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800682a:	2300      	movs	r3, #0
 800682c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800682e:	2300      	movs	r3, #0
 8006830:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006832:	463b      	mov	r3, r7
 8006834:	4619      	mov	r1, r3
 8006836:	4819      	ldr	r0, [pc, #100]	; (800689c <MX_GPIO_Init+0xf4>)
 8006838:	f7fd fcda 	bl	80041f0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_6;
 800683c:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8006840:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006842:	2301      	movs	r3, #1
 8006844:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006846:	2300      	movs	r3, #0
 8006848:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800684a:	2300      	movs	r3, #0
 800684c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800684e:	2300      	movs	r3, #0
 8006850:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006852:	463b      	mov	r3, r7
 8006854:	4619      	mov	r1, r3
 8006856:	4812      	ldr	r0, [pc, #72]	; (80068a0 <MX_GPIO_Init+0xf8>)
 8006858:	f7fd fcca 	bl	80041f0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 800685c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006860:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006862:	2301      	movs	r3, #1
 8006864:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006866:	2300      	movs	r3, #0
 8006868:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800686a:	2300      	movs	r3, #0
 800686c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800686e:	2300      	movs	r3, #0
 8006870:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006872:	463b      	mov	r3, r7
 8006874:	4619      	mov	r1, r3
 8006876:	480b      	ldr	r0, [pc, #44]	; (80068a4 <MX_GPIO_Init+0xfc>)
 8006878:	f7fd fcba 	bl	80041f0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 800687c:	2380      	movs	r3, #128	; 0x80
 800687e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8006880:	2300      	movs	r3, #0
 8006882:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006884:	2300      	movs	r3, #0
 8006886:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006888:	463b      	mov	r3, r7
 800688a:	4619      	mov	r1, r3
 800688c:	4804      	ldr	r0, [pc, #16]	; (80068a0 <MX_GPIO_Init+0xf8>)
 800688e:	f7fd fcaf 	bl	80041f0 <LL_GPIO_Init>

}
 8006892:	bf00      	nop
 8006894:	3718      	adds	r7, #24
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	40020800 	.word	0x40020800
 80068a0:	40020400 	.word	0x40020400
 80068a4:	40020000 	.word	0x40020000

080068a8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80068ac:	4b12      	ldr	r3, [pc, #72]	; (80068f8 <MX_I2C1_Init+0x50>)
 80068ae:	4a13      	ldr	r2, [pc, #76]	; (80068fc <MX_I2C1_Init+0x54>)
 80068b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80068b2:	4b11      	ldr	r3, [pc, #68]	; (80068f8 <MX_I2C1_Init+0x50>)
 80068b4:	4a12      	ldr	r2, [pc, #72]	; (8006900 <MX_I2C1_Init+0x58>)
 80068b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80068b8:	4b0f      	ldr	r3, [pc, #60]	; (80068f8 <MX_I2C1_Init+0x50>)
 80068ba:	2200      	movs	r2, #0
 80068bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80068be:	4b0e      	ldr	r3, [pc, #56]	; (80068f8 <MX_I2C1_Init+0x50>)
 80068c0:	2200      	movs	r2, #0
 80068c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80068c4:	4b0c      	ldr	r3, [pc, #48]	; (80068f8 <MX_I2C1_Init+0x50>)
 80068c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80068ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80068cc:	4b0a      	ldr	r3, [pc, #40]	; (80068f8 <MX_I2C1_Init+0x50>)
 80068ce:	2200      	movs	r2, #0
 80068d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80068d2:	4b09      	ldr	r3, [pc, #36]	; (80068f8 <MX_I2C1_Init+0x50>)
 80068d4:	2200      	movs	r2, #0
 80068d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80068d8:	4b07      	ldr	r3, [pc, #28]	; (80068f8 <MX_I2C1_Init+0x50>)
 80068da:	2200      	movs	r2, #0
 80068dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80068de:	4b06      	ldr	r3, [pc, #24]	; (80068f8 <MX_I2C1_Init+0x50>)
 80068e0:	2200      	movs	r2, #0
 80068e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80068e4:	4804      	ldr	r0, [pc, #16]	; (80068f8 <MX_I2C1_Init+0x50>)
 80068e6:	f7fb fdab 	bl	8002440 <HAL_I2C_Init>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d001      	beq.n	80068f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80068f0:	f000 fada 	bl	8006ea8 <Error_Handler>
  }

}
 80068f4:	bf00      	nop
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	20000358 	.word	0x20000358
 80068fc:	40005400 	.word	0x40005400
 8006900:	00061a80 	.word	0x00061a80

08006904 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b08a      	sub	sp, #40	; 0x28
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800690c:	f107 0314 	add.w	r3, r7, #20
 8006910:	2200      	movs	r2, #0
 8006912:	601a      	str	r2, [r3, #0]
 8006914:	605a      	str	r2, [r3, #4]
 8006916:	609a      	str	r2, [r3, #8]
 8006918:	60da      	str	r2, [r3, #12]
 800691a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a19      	ldr	r2, [pc, #100]	; (8006988 <HAL_I2C_MspInit+0x84>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d12c      	bne.n	8006980 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006926:	2300      	movs	r3, #0
 8006928:	613b      	str	r3, [r7, #16]
 800692a:	4b18      	ldr	r3, [pc, #96]	; (800698c <HAL_I2C_MspInit+0x88>)
 800692c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800692e:	4a17      	ldr	r2, [pc, #92]	; (800698c <HAL_I2C_MspInit+0x88>)
 8006930:	f043 0302 	orr.w	r3, r3, #2
 8006934:	6313      	str	r3, [r2, #48]	; 0x30
 8006936:	4b15      	ldr	r3, [pc, #84]	; (800698c <HAL_I2C_MspInit+0x88>)
 8006938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800693a:	f003 0302 	and.w	r3, r3, #2
 800693e:	613b      	str	r3, [r7, #16]
 8006940:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006942:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006946:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006948:	2312      	movs	r3, #18
 800694a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800694c:	2301      	movs	r3, #1
 800694e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006950:	2303      	movs	r3, #3
 8006952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006954:	2304      	movs	r3, #4
 8006956:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006958:	f107 0314 	add.w	r3, r7, #20
 800695c:	4619      	mov	r1, r3
 800695e:	480c      	ldr	r0, [pc, #48]	; (8006990 <HAL_I2C_MspInit+0x8c>)
 8006960:	f7fb fbd2 	bl	8002108 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006964:	2300      	movs	r3, #0
 8006966:	60fb      	str	r3, [r7, #12]
 8006968:	4b08      	ldr	r3, [pc, #32]	; (800698c <HAL_I2C_MspInit+0x88>)
 800696a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696c:	4a07      	ldr	r2, [pc, #28]	; (800698c <HAL_I2C_MspInit+0x88>)
 800696e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006972:	6413      	str	r3, [r2, #64]	; 0x40
 8006974:	4b05      	ldr	r3, [pc, #20]	; (800698c <HAL_I2C_MspInit+0x88>)
 8006976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800697c:	60fb      	str	r3, [r7, #12]
 800697e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8006980:	bf00      	nop
 8006982:	3728      	adds	r7, #40	; 0x28
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	40005400 	.word	0x40005400
 800698c:	40023800 	.word	0x40023800
 8006990:	40020400 	.word	0x40020400

08006994 <LL_TIM_EnableCounter>:
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f043 0201 	orr.w	r2, r3, #1
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	601a      	str	r2, [r3, #0]
}
 80069a8:	bf00      	nop
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <LL_TIM_CC_EnableChannel>:
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a1a      	ldr	r2, [r3, #32]
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	431a      	orrs	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	621a      	str	r2, [r3, #32]
}
 80069ca:	bf00      	nop
 80069cc:	370c      	adds	r7, #12
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr

080069d6 <LL_TIM_CC_DisableChannel>:
{
 80069d6:	b480      	push	{r7}
 80069d8:	b083      	sub	sp, #12
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
 80069de:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a1a      	ldr	r2, [r3, #32]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	43db      	mvns	r3, r3
 80069e8:	401a      	ands	r2, r3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	621a      	str	r2, [r3, #32]
}
 80069ee:	bf00      	nop
 80069f0:	370c      	adds	r7, #12
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr

080069fa <LL_USART_IsActiveFlag_TXE>:
{
 80069fa:	b480      	push	{r7}
 80069fc:	b083      	sub	sp, #12
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a0a:	2b80      	cmp	r3, #128	; 0x80
 8006a0c:	bf0c      	ite	eq
 8006a0e:	2301      	moveq	r3, #1
 8006a10:	2300      	movne	r3, #0
 8006a12:	b2db      	uxtb	r3, r3
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <LL_USART_EnableIT_RXNE>:
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	f043 0220 	orr.w	r2, r3, #32
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	60da      	str	r2, [r3, #12]
}
 8006a34:	bf00      	nop
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <LL_USART_TransmitData8>:
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	460b      	mov	r3, r1
 8006a4a:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8006a4c:	78fa      	ldrb	r2, [r7, #3]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	605a      	str	r2, [r3, #4]
}
 8006a52:	bf00      	nop
 8006a54:	370c      	adds	r7, #12
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr

08006a5e <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8006a5e:	b480      	push	{r7}
 8006a60:	b083      	sub	sp, #12
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
 8006a66:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ PinMask);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	695a      	ldr	r2, [r3, #20]
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	405a      	eors	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	615a      	str	r2, [r3, #20]
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char* p, int len)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
	for(int i=0;i<len;i++)
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	617b      	str	r3, [r7, #20]
 8006a90:	e011      	b.n	8006ab6 <_write+0x36>
	{
		while(!LL_USART_IsActiveFlag_TXE(USART6));
 8006a92:	bf00      	nop
 8006a94:	480c      	ldr	r0, [pc, #48]	; (8006ac8 <_write+0x48>)
 8006a96:	f7ff ffb0 	bl	80069fa <LL_USART_IsActiveFlag_TXE>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d0f9      	beq.n	8006a94 <_write+0x14>
		LL_USART_TransmitData8(USART6, *(p+i));
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	4807      	ldr	r0, [pc, #28]	; (8006ac8 <_write+0x48>)
 8006aac:	f7ff ffc8 	bl	8006a40 <LL_USART_TransmitData8>
	for(int i=0;i<len;i++)
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	617b      	str	r3, [r7, #20]
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	dbe9      	blt.n	8006a92 <_write+0x12>
	}
	return len;
 8006abe:	687b      	ldr	r3, [r7, #4]
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3718      	adds	r7, #24
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	40011400 	.word	0x40011400

08006acc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006acc:	b590      	push	{r4, r7, lr}
 8006ace:	b091      	sub	sp, #68	; 0x44
 8006ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	float q[4];
	float quatRadianAccuracy;
	unsigned char buf_read[16] = {1};
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	617b      	str	r3, [r7, #20]
 8006ad6:	f107 0318 	add.w	r3, r7, #24
 8006ada:	2200      	movs	r2, #0
 8006adc:	601a      	str	r2, [r3, #0]
 8006ade:	605a      	str	r2, [r3, #4]
 8006ae0:	609a      	str	r2, [r3, #8]
	unsigned char buf_write[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8006ae2:	4b9c      	ldr	r3, [pc, #624]	; (8006d54 <main+0x288>)
 8006ae4:	1d3c      	adds	r4, r7, #4
 8006ae6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006ae8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	unsigned short adcVal;
	float batVolt;
	short gyro_x_offset = 1, gyro_y_offset = -23, gyro_z_offset = -3;
 8006aec:	2301      	movs	r3, #1
 8006aee:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006af0:	f64f 73e9 	movw	r3, #65513	; 0xffe9
 8006af4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006af6:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8006afa:	877b      	strh	r3, [r7, #58]	; 0x3a
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006afc:	f7fa f9d6 	bl	8000eac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006b00:	f000 f94a 	bl	8006d98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006b04:	f7ff fe50 	bl	80067a8 <MX_GPIO_Init>
  MX_TIM3_Init();
 8006b08:	f000 fe9c 	bl	8007844 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8006b0c:	f001 f9b6 	bl	8007e7c <MX_USART6_UART_Init>
  MX_SPI2_Init();
 8006b10:	f000 fa7e 	bl	8007010 <MX_SPI2_Init>
  MX_SPI1_Init();
 8006b14:	f000 fa2a 	bl	8006f6c <MX_SPI1_Init>
  MX_SPI3_Init();
 8006b18:	f000 face 	bl	80070b8 <MX_SPI3_Init>
  MX_UART4_Init();
 8006b1c:	f001 f8aa 	bl	8007c74 <MX_UART4_Init>
  MX_UART5_Init();
 8006b20:	f001 f90a 	bl	8007d38 <MX_UART5_Init>
  MX_TIM5_Init();
 8006b24:	f000 ff00 	bl	8007928 <MX_TIM5_Init>
  MX_I2C1_Init();
 8006b28:	f7ff febe 	bl	80068a8 <MX_I2C1_Init>
  MX_DMA_Init();
 8006b2c:	f7ff fde6 	bl	80066fc <MX_DMA_Init>
  MX_ADC1_Init();
 8006b30:	f7ff fd1c 	bl	800656c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8006b34:	f001 f978 	bl	8007e28 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM3);
 8006b38:	4887      	ldr	r0, [pc, #540]	; (8006d58 <main+0x28c>)
 8006b3a:	f7ff ff2b 	bl	8006994 <LL_TIM_EnableCounter>

  LL_USART_EnableIT_RXNE(USART6);
 8006b3e:	4887      	ldr	r0, [pc, #540]	; (8006d5c <main+0x290>)
 8006b40:	f7ff ff6e 	bl	8006a20 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(UART4);
 8006b44:	4886      	ldr	r0, [pc, #536]	; (8006d60 <main+0x294>)
 8006b46:	f7ff ff6b 	bl	8006a20 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(UART5);
 8006b4a:	4886      	ldr	r0, [pc, #536]	; (8006d64 <main+0x298>)
 8006b4c:	f7ff ff68 	bl	8006a20 <LL_USART_EnableIT_RXNE>

  BNO080_Initialization();
 8006b50:	f7fe fcce 	bl	80054f0 <BNO080_Initialization>
  BNO080_enableRotationVector(2500);
 8006b54:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8006b58:	f7fe fd60 	bl	800561c <BNO080_enableRotationVector>

  ICM20602_Initialization();
 8006b5c:	f7ff f87c 	bl	8005c58 <ICM20602_Initialization>
  LPS22HH_Initialization();
 8006b60:	f7ff fac2 	bl	80060e8 <LPS22HH_Initialization>
  M8N_Initialization();
 8006b64:	f7ff fcda 	bl	800651c <M8N_Initialization>

  LL_TIM_EnableCounter(TIM5);
 8006b68:	487f      	ldr	r0, [pc, #508]	; (8006d68 <main+0x29c>)
 8006b6a:	f7ff ff13 	bl	8006994 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH1);
 8006b6e:	2101      	movs	r1, #1
 8006b70:	487d      	ldr	r0, [pc, #500]	; (8006d68 <main+0x29c>)
 8006b72:	f7ff ff1f 	bl	80069b4 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH2);
 8006b76:	2110      	movs	r1, #16
 8006b78:	487b      	ldr	r0, [pc, #492]	; (8006d68 <main+0x29c>)
 8006b7a:	f7ff ff1b 	bl	80069b4 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH3);
 8006b7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b82:	4879      	ldr	r0, [pc, #484]	; (8006d68 <main+0x29c>)
 8006b84:	f7ff ff16 	bl	80069b4 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH4);
 8006b88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006b8c:	4876      	ldr	r0, [pc, #472]	; (8006d68 <main+0x29c>)
 8006b8e:	f7ff ff11 	bl	80069b4 <LL_TIM_CC_EnableChannel>

  HAL_ADC_Start_DMA(&hadc1, &adcVal, 1);
 8006b92:	1cbb      	adds	r3, r7, #2
 8006b94:	2201      	movs	r2, #1
 8006b96:	4619      	mov	r1, r3
 8006b98:	4874      	ldr	r0, [pc, #464]	; (8006d6c <main+0x2a0>)
 8006b9a:	f7fa fa61 	bl	8001060 <HAL_ADC_Start_DMA>

  HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	4973      	ldr	r1, [pc, #460]	; (8006d70 <main+0x2a4>)
 8006ba2:	4874      	ldr	r0, [pc, #464]	; (8006d74 <main+0x2a8>)
 8006ba4:	f7fc fab0 	bl	8003108 <HAL_UART_Receive_IT>

  ICM20602_Writebyte(0x13, (gyro_x_offset*-2)>>8);
 8006ba8:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 8006bac:	4613      	mov	r3, r2
 8006bae:	07db      	lsls	r3, r3, #31
 8006bb0:	1a9b      	subs	r3, r3, r2
 8006bb2:	005b      	lsls	r3, r3, #1
 8006bb4:	121b      	asrs	r3, r3, #8
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	2013      	movs	r0, #19
 8006bba:	f7ff f82b 	bl	8005c14 <ICM20602_Writebyte>
  ICM20602_Writebyte(0x14, (gyro_x_offset*-2));
 8006bbe:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	07db      	lsls	r3, r3, #31
 8006bc6:	1a9b      	subs	r3, r3, r2
 8006bc8:	005b      	lsls	r3, r3, #1
 8006bca:	4619      	mov	r1, r3
 8006bcc:	2014      	movs	r0, #20
 8006bce:	f7ff f821 	bl	8005c14 <ICM20602_Writebyte>

  ICM20602_Writebyte(0x15, (gyro_y_offset*-2)>>8);
 8006bd2:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	07db      	lsls	r3, r3, #31
 8006bda:	1a9b      	subs	r3, r3, r2
 8006bdc:	005b      	lsls	r3, r3, #1
 8006bde:	121b      	asrs	r3, r3, #8
 8006be0:	4619      	mov	r1, r3
 8006be2:	2015      	movs	r0, #21
 8006be4:	f7ff f816 	bl	8005c14 <ICM20602_Writebyte>
  ICM20602_Writebyte(0x16, (gyro_y_offset*-2));
 8006be8:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 8006bec:	4613      	mov	r3, r2
 8006bee:	07db      	lsls	r3, r3, #31
 8006bf0:	1a9b      	subs	r3, r3, r2
 8006bf2:	005b      	lsls	r3, r3, #1
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	2016      	movs	r0, #22
 8006bf8:	f7ff f80c 	bl	8005c14 <ICM20602_Writebyte>

  ICM20602_Writebyte(0x17, (gyro_z_offset*-2)>>8);
 8006bfc:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 8006c00:	4613      	mov	r3, r2
 8006c02:	07db      	lsls	r3, r3, #31
 8006c04:	1a9b      	subs	r3, r3, r2
 8006c06:	005b      	lsls	r3, r3, #1
 8006c08:	121b      	asrs	r3, r3, #8
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	2017      	movs	r0, #23
 8006c0e:	f7ff f801 	bl	8005c14 <ICM20602_Writebyte>
  ICM20602_Writebyte(0x18, (gyro_z_offset*-2));
 8006c12:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 8006c16:	4613      	mov	r3, r2
 8006c18:	07db      	lsls	r3, r3, #31
 8006c1a:	1a9b      	subs	r3, r3, r2
 8006c1c:	005b      	lsls	r3, r3, #1
 8006c1e:	4619      	mov	r1, r3
 8006c20:	2018      	movs	r0, #24
 8006c22:	f7fe fff7 	bl	8005c14 <ICM20602_Writebyte>
//  EP_PIDGain_Read(0, &p, &i, &d);
//
//  printf("%f %f %f", p, i, d);


  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8006c26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c2a:	484b      	ldr	r0, [pc, #300]	; (8006d58 <main+0x28c>)
 8006c2c:	f7ff fec2 	bl	80069b4 <LL_TIM_CC_EnableChannel>

  TIM3->PSC = 2000;
 8006c30:	4b49      	ldr	r3, [pc, #292]	; (8006d58 <main+0x28c>)
 8006c32:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006c36:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8006c38:	2064      	movs	r0, #100	; 0x64
 8006c3a:	f7fa f9a9 	bl	8000f90 <HAL_Delay>
  TIM3->PSC = 1500;
 8006c3e:	4b46      	ldr	r3, [pc, #280]	; (8006d58 <main+0x28c>)
 8006c40:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006c44:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8006c46:	2064      	movs	r0, #100	; 0x64
 8006c48:	f7fa f9a2 	bl	8000f90 <HAL_Delay>
  TIM3->PSC = 1000;
 8006c4c:	4b42      	ldr	r3, [pc, #264]	; (8006d58 <main+0x28c>)
 8006c4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006c52:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8006c54:	2064      	movs	r0, #100	; 0x64
 8006c56:	f7fa f99b 	bl	8000f90 <HAL_Delay>

  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8006c5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c5e:	483e      	ldr	r0, [pc, #248]	; (8006d58 <main+0x28c>)
 8006c60:	f7ff feb9 	bl	80069d6 <LL_TIM_CC_DisableChannel>

  printf("Start\n");
 8006c64:	4844      	ldr	r0, [pc, #272]	; (8006d78 <main+0x2ac>)
 8006c66:	f001 ff05 	bl	8008a74 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  batVolt = adcVal * 0.003619f;
 8006c6a:	887b      	ldrh	r3, [r7, #2]
 8006c6c:	ee07 3a90 	vmov	s15, r3
 8006c70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c74:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8006d7c <main+0x2b0>
 8006c78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006c7c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	  //printf("%d\t%.2f\n", adcVal, batVolt);
	  if(batVolt < 10.0f)
 8006c80:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006c84:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006c88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c90:	d509      	bpl.n	8006ca6 <main+0x1da>
	  {
		  TIM3->PSC = 1000;
 8006c92:	4b31      	ldr	r3, [pc, #196]	; (8006d58 <main+0x28c>)
 8006c94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006c98:	629a      	str	r2, [r3, #40]	; 0x28
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8006c9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c9e:	482e      	ldr	r0, [pc, #184]	; (8006d58 <main+0x28c>)
 8006ca0:	f7ff fe88 	bl	80069b4 <LL_TIM_CC_EnableChannel>
 8006ca4:	e004      	b.n	8006cb0 <main+0x1e4>
	  }
	  else
	  {
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8006ca6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006caa:	482b      	ldr	r0, [pc, #172]	; (8006d58 <main+0x28c>)
 8006cac:	f7ff fe93 	bl	80069d6 <LL_TIM_CC_DisableChannel>
//
//		  //printf("%.2f\t%.2f\n", BNO080_Roll, BNO080_Pitch);
//		  printf("%.2f\n", BNO080_Yaw);
//	  }

	  if(ICM20602_DataReady() == 1)
 8006cb0:	f7ff f87c 	bl	8005dac <ICM20602_DataReady>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d1d7      	bne.n	8006c6a <main+0x19e>
	  {
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_1);
 8006cba:	2102      	movs	r1, #2
 8006cbc:	4830      	ldr	r0, [pc, #192]	; (8006d80 <main+0x2b4>)
 8006cbe:	f7ff fece 	bl	8006a5e <LL_GPIO_TogglePin>

		  ICM20602_Get3AxisGyroRawData(&ICM20602.gyro_x_raw);
 8006cc2:	4830      	ldr	r0, [pc, #192]	; (8006d84 <main+0x2b8>)
 8006cc4:	f7ff f846 	bl	8005d54 <ICM20602_Get3AxisGyroRawData>

		  ICM20602.gyro_x = ICM20602.gyro_x_raw * 2000.f / 32768.f;
 8006cc8:	4b2f      	ldr	r3, [pc, #188]	; (8006d88 <main+0x2bc>)
 8006cca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006cce:	ee07 3a90 	vmov	s15, r3
 8006cd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006cd6:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8006d8c <main+0x2c0>
 8006cda:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006cde:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8006d90 <main+0x2c4>
 8006ce2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006ce6:	4b28      	ldr	r3, [pc, #160]	; (8006d88 <main+0x2bc>)
 8006ce8:	edc3 7a07 	vstr	s15, [r3, #28]
		  ICM20602.gyro_y = ICM20602.gyro_y_raw * 2000.f / 32768.f;
 8006cec:	4b26      	ldr	r3, [pc, #152]	; (8006d88 <main+0x2bc>)
 8006cee:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8006cf2:	ee07 3a90 	vmov	s15, r3
 8006cf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006cfa:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8006d8c <main+0x2c0>
 8006cfe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006d02:	eddf 6a23 	vldr	s13, [pc, #140]	; 8006d90 <main+0x2c4>
 8006d06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006d0a:	4b1f      	ldr	r3, [pc, #124]	; (8006d88 <main+0x2bc>)
 8006d0c:	edc3 7a08 	vstr	s15, [r3, #32]
		  ICM20602.gyro_z = ICM20602.gyro_z_raw * 2000.f / 32768.f;
 8006d10:	4b1d      	ldr	r3, [pc, #116]	; (8006d88 <main+0x2bc>)
 8006d12:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8006d16:	ee07 3a90 	vmov	s15, r3
 8006d1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d1e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8006d8c <main+0x2c0>
 8006d22:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006d26:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8006d90 <main+0x2c4>
 8006d2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006d2e:	4b16      	ldr	r3, [pc, #88]	; (8006d88 <main+0x2bc>)
 8006d30:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

		  printf("%d,%d,%d\n", ICM20602.gyro_x_raw, ICM20602.gyro_y_raw, ICM20602.gyro_z_raw);
 8006d34:	4b14      	ldr	r3, [pc, #80]	; (8006d88 <main+0x2bc>)
 8006d36:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	4b12      	ldr	r3, [pc, #72]	; (8006d88 <main+0x2bc>)
 8006d3e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8006d42:	461a      	mov	r2, r3
 8006d44:	4b10      	ldr	r3, [pc, #64]	; (8006d88 <main+0x2bc>)
 8006d46:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8006d4a:	4812      	ldr	r0, [pc, #72]	; (8006d94 <main+0x2c8>)
 8006d4c:	f001 fe0c 	bl	8008968 <iprintf>
	  batVolt = adcVal * 0.003619f;
 8006d50:	e78b      	b.n	8006c6a <main+0x19e>
 8006d52:	bf00      	nop
 8006d54:	0800ad84 	.word	0x0800ad84
 8006d58:	40000400 	.word	0x40000400
 8006d5c:	40011400 	.word	0x40011400
 8006d60:	40004c00 	.word	0x40004c00
 8006d64:	40005000 	.word	0x40005000
 8006d68:	40000c00 	.word	0x40000c00
 8006d6c:	200002b0 	.word	0x200002b0
 8006d70:	200003fd 	.word	0x200003fd
 8006d74:	20000404 	.word	0x20000404
 8006d78:	0800ad70 	.word	0x0800ad70
 8006d7c:	3b6d2cbf 	.word	0x3b6d2cbf
 8006d80:	40020800 	.word	0x40020800
 8006d84:	20000290 	.word	0x20000290
 8006d88:	20000288 	.word	0x20000288
 8006d8c:	44fa0000 	.word	0x44fa0000
 8006d90:	47000000 	.word	0x47000000
 8006d94:	0800ad78 	.word	0x0800ad78

08006d98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b094      	sub	sp, #80	; 0x50
 8006d9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006d9e:	f107 0320 	add.w	r3, r7, #32
 8006da2:	2230      	movs	r2, #48	; 0x30
 8006da4:	2100      	movs	r1, #0
 8006da6:	4618      	mov	r0, r3
 8006da8:	f001 f96c 	bl	8008084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006dac:	f107 030c 	add.w	r3, r7, #12
 8006db0:	2200      	movs	r2, #0
 8006db2:	601a      	str	r2, [r3, #0]
 8006db4:	605a      	str	r2, [r3, #4]
 8006db6:	609a      	str	r2, [r3, #8]
 8006db8:	60da      	str	r2, [r3, #12]
 8006dba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	60bb      	str	r3, [r7, #8]
 8006dc0:	4b28      	ldr	r3, [pc, #160]	; (8006e64 <SystemClock_Config+0xcc>)
 8006dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc4:	4a27      	ldr	r2, [pc, #156]	; (8006e64 <SystemClock_Config+0xcc>)
 8006dc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dca:	6413      	str	r3, [r2, #64]	; 0x40
 8006dcc:	4b25      	ldr	r3, [pc, #148]	; (8006e64 <SystemClock_Config+0xcc>)
 8006dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dd4:	60bb      	str	r3, [r7, #8]
 8006dd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006dd8:	2300      	movs	r3, #0
 8006dda:	607b      	str	r3, [r7, #4]
 8006ddc:	4b22      	ldr	r3, [pc, #136]	; (8006e68 <SystemClock_Config+0xd0>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a21      	ldr	r2, [pc, #132]	; (8006e68 <SystemClock_Config+0xd0>)
 8006de2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006de6:	6013      	str	r3, [r2, #0]
 8006de8:	4b1f      	ldr	r3, [pc, #124]	; (8006e68 <SystemClock_Config+0xd0>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006df0:	607b      	str	r3, [r7, #4]
 8006df2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006df4:	2301      	movs	r3, #1
 8006df6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006df8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006dfc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006dfe:	2302      	movs	r3, #2
 8006e00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006e02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006e06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8006e08:	2304      	movs	r3, #4
 8006e0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8006e0c:	23a8      	movs	r3, #168	; 0xa8
 8006e0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006e10:	2302      	movs	r3, #2
 8006e12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006e14:	2304      	movs	r3, #4
 8006e16:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006e18:	f107 0320 	add.w	r3, r7, #32
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f7fb fc53 	bl	80026c8 <HAL_RCC_OscConfig>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d001      	beq.n	8006e2c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8006e28:	f000 f83e 	bl	8006ea8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006e2c:	230f      	movs	r3, #15
 8006e2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006e30:	2302      	movs	r3, #2
 8006e32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006e34:	2300      	movs	r3, #0
 8006e36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006e38:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006e3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006e3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e42:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006e44:	f107 030c 	add.w	r3, r7, #12
 8006e48:	2105      	movs	r1, #5
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7fb feaa 	bl	8002ba4 <HAL_RCC_ClockConfig>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d001      	beq.n	8006e5a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8006e56:	f000 f827 	bl	8006ea8 <Error_Handler>
  }
}
 8006e5a:	bf00      	nop
 8006e5c:	3750      	adds	r7, #80	; 0x50
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	40023800 	.word	0x40023800
 8006e68:	40007000 	.word	0x40007000

08006e6c <HAL_UART_RxCpltCallback>:
	BNO080_Initialization();
	BNO080_enableRotationVector(2500); //Send data update every 2.5ms (400Hz)
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a08      	ldr	r2, [pc, #32]	; (8006e9c <HAL_UART_RxCpltCallback+0x30>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d109      	bne.n	8006e92 <HAL_UART_RxCpltCallback+0x26>
	{
		HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 8006e7e:	2201      	movs	r2, #1
 8006e80:	4907      	ldr	r1, [pc, #28]	; (8006ea0 <HAL_UART_RxCpltCallback+0x34>)
 8006e82:	4808      	ldr	r0, [pc, #32]	; (8006ea4 <HAL_UART_RxCpltCallback+0x38>)
 8006e84:	f7fc f940 	bl	8003108 <HAL_UART_Receive_IT>
		HAL_UART_Transmit_IT(&huart1, &uart1_rx_data, 1);
 8006e88:	2201      	movs	r2, #1
 8006e8a:	4905      	ldr	r1, [pc, #20]	; (8006ea0 <HAL_UART_RxCpltCallback+0x34>)
 8006e8c:	4805      	ldr	r0, [pc, #20]	; (8006ea4 <HAL_UART_RxCpltCallback+0x38>)
 8006e8e:	f7fc f8f6 	bl	800307e <HAL_UART_Transmit_IT>
	}
}
 8006e92:	bf00      	nop
 8006e94:	3708      	adds	r7, #8
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	40011000 	.word	0x40011000
 8006ea0:	200003fd 	.word	0x200003fd
 8006ea4:	20000404 	.word	0x20000404

08006ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006eac:	bf00      	nop
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr

08006eb6 <LL_SPI_SetStandard>:
{
 8006eb6:	b480      	push	{r7}
 8006eb8:	b083      	sub	sp, #12
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
 8006ebe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	f023 0210 	bic.w	r2, r3, #16
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	431a      	orrs	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	605a      	str	r2, [r3, #4]
}
 8006ed0:	bf00      	nop
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <LL_AHB1_GRP1_EnableClock>:
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8006ee4:	4b08      	ldr	r3, [pc, #32]	; (8006f08 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006ee6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ee8:	4907      	ldr	r1, [pc, #28]	; (8006f08 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8006ef0:	4b05      	ldr	r3, [pc, #20]	; (8006f08 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006ef2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006efa:	68fb      	ldr	r3, [r7, #12]
}
 8006efc:	bf00      	nop
 8006efe:	3714      	adds	r7, #20
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr
 8006f08:	40023800 	.word	0x40023800

08006f0c <LL_APB1_GRP1_EnableClock>:
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8006f14:	4b08      	ldr	r3, [pc, #32]	; (8006f38 <LL_APB1_GRP1_EnableClock+0x2c>)
 8006f16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f18:	4907      	ldr	r1, [pc, #28]	; (8006f38 <LL_APB1_GRP1_EnableClock+0x2c>)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8006f20:	4b05      	ldr	r3, [pc, #20]	; (8006f38 <LL_APB1_GRP1_EnableClock+0x2c>)
 8006f22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4013      	ands	r3, r2
 8006f28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
}
 8006f2c:	bf00      	nop
 8006f2e:	3714      	adds	r7, #20
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr
 8006f38:	40023800 	.word	0x40023800

08006f3c <LL_APB2_GRP1_EnableClock>:
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8006f44:	4b08      	ldr	r3, [pc, #32]	; (8006f68 <LL_APB2_GRP1_EnableClock+0x2c>)
 8006f46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f48:	4907      	ldr	r1, [pc, #28]	; (8006f68 <LL_APB2_GRP1_EnableClock+0x2c>)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006f50:	4b05      	ldr	r3, [pc, #20]	; (8006f68 <LL_APB2_GRP1_EnableClock+0x2c>)
 8006f52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4013      	ands	r3, r2
 8006f58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
}
 8006f5c:	bf00      	nop
 8006f5e:	3714      	adds	r7, #20
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr
 8006f68:	40023800 	.word	0x40023800

08006f6c <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b090      	sub	sp, #64	; 0x40
 8006f70:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8006f72:	f107 0318 	add.w	r3, r7, #24
 8006f76:	2228      	movs	r2, #40	; 0x28
 8006f78:	2100      	movs	r1, #0
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f001 f882 	bl	8008084 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f80:	463b      	mov	r3, r7
 8006f82:	2200      	movs	r2, #0
 8006f84:	601a      	str	r2, [r3, #0]
 8006f86:	605a      	str	r2, [r3, #4]
 8006f88:	609a      	str	r2, [r3, #8]
 8006f8a:	60da      	str	r2, [r3, #12]
 8006f8c:	611a      	str	r2, [r3, #16]
 8006f8e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8006f90:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006f94:	f7ff ffd2 	bl	8006f3c <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8006f98:	2001      	movs	r0, #1
 8006f9a:	f7ff ff9f 	bl	8006edc <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration  
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8006f9e:	23e0      	movs	r3, #224	; 0xe0
 8006fa0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006fa2:	2302      	movs	r3, #2
 8006fa4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006faa:	2300      	movs	r3, #0
 8006fac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8006fb2:	2305      	movs	r3, #5
 8006fb4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fb6:	463b      	mov	r3, r7
 8006fb8:	4619      	mov	r1, r3
 8006fba:	4813      	ldr	r0, [pc, #76]	; (8007008 <MX_SPI1_Init+0x9c>)
 8006fbc:	f7fd f918 	bl	80041f0 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8006fc4:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006fc8:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8006fce:	2302      	movs	r3, #2
 8006fd0:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8006fd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8006fdc:	2310      	movs	r3, #16
 8006fde:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8006fe8:	230a      	movs	r3, #10
 8006fea:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8006fec:	f107 0318 	add.w	r3, r7, #24
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	4806      	ldr	r0, [pc, #24]	; (800700c <MX_SPI1_Init+0xa0>)
 8006ff4:	f7fd facd 	bl	8004592 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8006ff8:	2100      	movs	r1, #0
 8006ffa:	4804      	ldr	r0, [pc, #16]	; (800700c <MX_SPI1_Init+0xa0>)
 8006ffc:	f7ff ff5b 	bl	8006eb6 <LL_SPI_SetStandard>

}
 8007000:	bf00      	nop
 8007002:	3740      	adds	r7, #64	; 0x40
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}
 8007008:	40020000 	.word	0x40020000
 800700c:	40013000 	.word	0x40013000

08007010 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b090      	sub	sp, #64	; 0x40
 8007014:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8007016:	f107 0318 	add.w	r3, r7, #24
 800701a:	2228      	movs	r2, #40	; 0x28
 800701c:	2100      	movs	r1, #0
 800701e:	4618      	mov	r0, r3
 8007020:	f001 f830 	bl	8008084 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007024:	463b      	mov	r3, r7
 8007026:	2200      	movs	r2, #0
 8007028:	601a      	str	r2, [r3, #0]
 800702a:	605a      	str	r2, [r3, #4]
 800702c:	609a      	str	r2, [r3, #8]
 800702e:	60da      	str	r2, [r3, #12]
 8007030:	611a      	str	r2, [r3, #16]
 8007032:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8007034:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007038:	f7ff ff68 	bl	8006f0c <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800703c:	2002      	movs	r0, #2
 800703e:	f7ff ff4d 	bl	8006edc <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration  
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8007042:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8007046:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007048:	2302      	movs	r3, #2
 800704a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800704c:	2303      	movs	r3, #3
 800704e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007050:	2300      	movs	r3, #0
 8007052:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007054:	2300      	movs	r3, #0
 8007056:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8007058:	2305      	movs	r3, #5
 800705a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800705c:	463b      	mov	r3, r7
 800705e:	4619      	mov	r1, r3
 8007060:	4813      	ldr	r0, [pc, #76]	; (80070b0 <MX_SPI2_Init+0xa0>)
 8007062:	f7fd f8c5 	bl	80041f0 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8007066:	2300      	movs	r3, #0
 8007068:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800706a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800706e:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8007070:	2300      	movs	r3, #0
 8007072:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8007074:	2302      	movs	r3, #2
 8007076:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8007078:	2301      	movs	r3, #1
 800707a:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800707c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007080:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8007082:	2318      	movs	r3, #24
 8007084:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8007086:	2300      	movs	r3, #0
 8007088:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800708a:	2300      	movs	r3, #0
 800708c:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 800708e:	230a      	movs	r3, #10
 8007090:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8007092:	f107 0318 	add.w	r3, r7, #24
 8007096:	4619      	mov	r1, r3
 8007098:	4806      	ldr	r0, [pc, #24]	; (80070b4 <MX_SPI2_Init+0xa4>)
 800709a:	f7fd fa7a 	bl	8004592 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 800709e:	2100      	movs	r1, #0
 80070a0:	4804      	ldr	r0, [pc, #16]	; (80070b4 <MX_SPI2_Init+0xa4>)
 80070a2:	f7ff ff08 	bl	8006eb6 <LL_SPI_SetStandard>

}
 80070a6:	bf00      	nop
 80070a8:	3740      	adds	r7, #64	; 0x40
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	40020400 	.word	0x40020400
 80070b4:	40003800 	.word	0x40003800

080070b8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b090      	sub	sp, #64	; 0x40
 80070bc:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80070be:	f107 0318 	add.w	r3, r7, #24
 80070c2:	2228      	movs	r2, #40	; 0x28
 80070c4:	2100      	movs	r1, #0
 80070c6:	4618      	mov	r0, r3
 80070c8:	f000 ffdc 	bl	8008084 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070cc:	463b      	mov	r3, r7
 80070ce:	2200      	movs	r2, #0
 80070d0:	601a      	str	r2, [r3, #0]
 80070d2:	605a      	str	r2, [r3, #4]
 80070d4:	609a      	str	r2, [r3, #8]
 80070d6:	60da      	str	r2, [r3, #12]
 80070d8:	611a      	str	r2, [r3, #16]
 80070da:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 80070dc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80070e0:	f7ff ff14 	bl	8006f0c <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80070e4:	2002      	movs	r0, #2
 80070e6:	f7ff fef9 	bl	8006edc <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration  
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 80070ea:	2338      	movs	r3, #56	; 0x38
 80070ec:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80070ee:	2302      	movs	r3, #2
 80070f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80070f2:	2303      	movs	r3, #3
 80070f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80070f6:	2300      	movs	r3, #0
 80070f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80070fa:	2300      	movs	r3, #0
 80070fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80070fe:	2306      	movs	r3, #6
 8007100:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007102:	463b      	mov	r3, r7
 8007104:	4619      	mov	r1, r3
 8007106:	4813      	ldr	r0, [pc, #76]	; (8007154 <MX_SPI3_Init+0x9c>)
 8007108:	f7fd f872 	bl	80041f0 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800710c:	2300      	movs	r3, #0
 800710e:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8007110:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007114:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8007116:	2300      	movs	r3, #0
 8007118:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800711a:	2302      	movs	r3, #2
 800711c:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800711e:	2301      	movs	r3, #1
 8007120:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8007122:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007126:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8007128:	2308      	movs	r3, #8
 800712a:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800712c:	2300      	movs	r3, #0
 800712e:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8007130:	2300      	movs	r3, #0
 8007132:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8007134:	230a      	movs	r3, #10
 8007136:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8007138:	f107 0318 	add.w	r3, r7, #24
 800713c:	4619      	mov	r1, r3
 800713e:	4806      	ldr	r0, [pc, #24]	; (8007158 <MX_SPI3_Init+0xa0>)
 8007140:	f7fd fa27 	bl	8004592 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8007144:	2100      	movs	r1, #0
 8007146:	4804      	ldr	r0, [pc, #16]	; (8007158 <MX_SPI3_Init+0xa0>)
 8007148:	f7ff feb5 	bl	8006eb6 <LL_SPI_SetStandard>

}
 800714c:	bf00      	nop
 800714e:	3740      	adds	r7, #64	; 0x40
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}
 8007154:	40020400 	.word	0x40020400
 8007158:	40003c00 	.word	0x40003c00

0800715c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007162:	2300      	movs	r3, #0
 8007164:	607b      	str	r3, [r7, #4]
 8007166:	4b10      	ldr	r3, [pc, #64]	; (80071a8 <HAL_MspInit+0x4c>)
 8007168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800716a:	4a0f      	ldr	r2, [pc, #60]	; (80071a8 <HAL_MspInit+0x4c>)
 800716c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007170:	6453      	str	r3, [r2, #68]	; 0x44
 8007172:	4b0d      	ldr	r3, [pc, #52]	; (80071a8 <HAL_MspInit+0x4c>)
 8007174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800717a:	607b      	str	r3, [r7, #4]
 800717c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800717e:	2300      	movs	r3, #0
 8007180:	603b      	str	r3, [r7, #0]
 8007182:	4b09      	ldr	r3, [pc, #36]	; (80071a8 <HAL_MspInit+0x4c>)
 8007184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007186:	4a08      	ldr	r2, [pc, #32]	; (80071a8 <HAL_MspInit+0x4c>)
 8007188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800718c:	6413      	str	r3, [r2, #64]	; 0x40
 800718e:	4b06      	ldr	r3, [pc, #24]	; (80071a8 <HAL_MspInit+0x4c>)
 8007190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007196:	603b      	str	r3, [r7, #0]
 8007198:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800719a:	bf00      	nop
 800719c:	370c      	adds	r7, #12
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	40023800 	.word	0x40023800

080071ac <LL_USART_IsActiveFlag_RXNE>:
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0320 	and.w	r3, r3, #32
 80071bc:	2b20      	cmp	r3, #32
 80071be:	bf0c      	ite	eq
 80071c0:	2301      	moveq	r3, #1
 80071c2:	2300      	movne	r3, #0
 80071c4:	b2db      	uxtb	r3, r3
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	370c      	adds	r7, #12
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr

080071d2 <LL_USART_ClearFlag_RXNE>:
{
 80071d2:	b480      	push	{r7}
 80071d4:	b083      	sub	sp, #12
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f06f 0220 	mvn.w	r2, #32
 80071e0:	601a      	str	r2, [r3, #0]
}
 80071e2:	bf00      	nop
 80071e4:	370c      	adds	r7, #12
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr

080071ee <LL_USART_ReceiveData8>:
{
 80071ee:	b480      	push	{r7}
 80071f0:	b083      	sub	sp, #12
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	b2db      	uxtb	r3, r3
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007208:	b480      	push	{r7}
 800720a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800720c:	bf00      	nop
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr

08007216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007216:	b480      	push	{r7}
 8007218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800721a:	e7fe      	b.n	800721a <HardFault_Handler+0x4>

0800721c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800721c:	b480      	push	{r7}
 800721e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007220:	e7fe      	b.n	8007220 <MemManage_Handler+0x4>

08007222 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007222:	b480      	push	{r7}
 8007224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007226:	e7fe      	b.n	8007226 <BusFault_Handler+0x4>

08007228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007228:	b480      	push	{r7}
 800722a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800722c:	e7fe      	b.n	800722c <UsageFault_Handler+0x4>

0800722e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800722e:	b480      	push	{r7}
 8007230:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007232:	bf00      	nop
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800723c:	b480      	push	{r7}
 800723e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007240:	bf00      	nop
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr

0800724a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800724a:	b480      	push	{r7}
 800724c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800724e:	bf00      	nop
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800725c:	f7f9 fe78 	bl	8000f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007260:	bf00      	nop
 8007262:	bd80      	pop	{r7, pc}

08007264 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007268:	4802      	ldr	r0, [pc, #8]	; (8007274 <USART1_IRQHandler+0x10>)
 800726a:	f7fb ffa3 	bl	80031b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800726e:	bf00      	nop
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	20000404 	.word	0x20000404

08007278 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	static unsigned char cnt = 0;

	if(LL_USART_IsActiveFlag_RXNE(UART4))
 800727c:	4833      	ldr	r0, [pc, #204]	; (800734c <UART4_IRQHandler+0xd4>)
 800727e:	f7ff ff95 	bl	80071ac <LL_USART_IsActiveFlag_RXNE>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d05b      	beq.n	8007340 <UART4_IRQHandler+0xc8>
	{
		LL_USART_ClearFlag_RXNE(UART4);
 8007288:	4830      	ldr	r0, [pc, #192]	; (800734c <UART4_IRQHandler+0xd4>)
 800728a:	f7ff ffa2 	bl	80071d2 <LL_USART_ClearFlag_RXNE>
		uart4_rx_data = LL_USART_ReceiveData8(UART4);
 800728e:	482f      	ldr	r0, [pc, #188]	; (800734c <UART4_IRQHandler+0xd4>)
 8007290:	f7ff ffad 	bl	80071ee <LL_USART_ReceiveData8>
 8007294:	4603      	mov	r3, r0
 8007296:	461a      	mov	r2, r3
 8007298:	4b2d      	ldr	r3, [pc, #180]	; (8007350 <UART4_IRQHandler+0xd8>)
 800729a:	701a      	strb	r2, [r3, #0]
		uart4_rx_flag = 1;
 800729c:	4b2d      	ldr	r3, [pc, #180]	; (8007354 <UART4_IRQHandler+0xdc>)
 800729e:	2201      	movs	r2, #1
 80072a0:	701a      	strb	r2, [r3, #0]

		//LL_USART_TransmitData8(USART6, uart4_rx_data);

		switch(cnt)
 80072a2:	4b2d      	ldr	r3, [pc, #180]	; (8007358 <UART4_IRQHandler+0xe0>)
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	2b23      	cmp	r3, #35	; 0x23
 80072a8:	d02e      	beq.n	8007308 <UART4_IRQHandler+0x90>
 80072aa:	2b23      	cmp	r3, #35	; 0x23
 80072ac:	dc3a      	bgt.n	8007324 <UART4_IRQHandler+0xac>
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d002      	beq.n	80072b8 <UART4_IRQHandler+0x40>
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d012      	beq.n	80072dc <UART4_IRQHandler+0x64>
 80072b6:	e035      	b.n	8007324 <UART4_IRQHandler+0xac>
		{
		case 0:
			if(uart4_rx_data == 0xb5)
 80072b8:	4b25      	ldr	r3, [pc, #148]	; (8007350 <UART4_IRQHandler+0xd8>)
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	2bb5      	cmp	r3, #181	; 0xb5
 80072be:	d141      	bne.n	8007344 <UART4_IRQHandler+0xcc>
			{
				m8n_rx_buf[cnt] = uart4_rx_data;
 80072c0:	4b25      	ldr	r3, [pc, #148]	; (8007358 <UART4_IRQHandler+0xe0>)
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	461a      	mov	r2, r3
 80072c6:	4b22      	ldr	r3, [pc, #136]	; (8007350 <UART4_IRQHandler+0xd8>)
 80072c8:	7819      	ldrb	r1, [r3, #0]
 80072ca:	4b24      	ldr	r3, [pc, #144]	; (800735c <UART4_IRQHandler+0xe4>)
 80072cc:	5499      	strb	r1, [r3, r2]
				cnt++;
 80072ce:	4b22      	ldr	r3, [pc, #136]	; (8007358 <UART4_IRQHandler+0xe0>)
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	3301      	adds	r3, #1
 80072d4:	b2da      	uxtb	r2, r3
 80072d6:	4b20      	ldr	r3, [pc, #128]	; (8007358 <UART4_IRQHandler+0xe0>)
 80072d8:	701a      	strb	r2, [r3, #0]
			}
			break;
 80072da:	e033      	b.n	8007344 <UART4_IRQHandler+0xcc>
		case 1:
			if(uart4_rx_data == 0x62)
 80072dc:	4b1c      	ldr	r3, [pc, #112]	; (8007350 <UART4_IRQHandler+0xd8>)
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	2b62      	cmp	r3, #98	; 0x62
 80072e2:	d10d      	bne.n	8007300 <UART4_IRQHandler+0x88>
			{
				m8n_rx_buf[cnt] = uart4_rx_data;
 80072e4:	4b1c      	ldr	r3, [pc, #112]	; (8007358 <UART4_IRQHandler+0xe0>)
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	461a      	mov	r2, r3
 80072ea:	4b19      	ldr	r3, [pc, #100]	; (8007350 <UART4_IRQHandler+0xd8>)
 80072ec:	7819      	ldrb	r1, [r3, #0]
 80072ee:	4b1b      	ldr	r3, [pc, #108]	; (800735c <UART4_IRQHandler+0xe4>)
 80072f0:	5499      	strb	r1, [r3, r2]
				cnt++;
 80072f2:	4b19      	ldr	r3, [pc, #100]	; (8007358 <UART4_IRQHandler+0xe0>)
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	3301      	adds	r3, #1
 80072f8:	b2da      	uxtb	r2, r3
 80072fa:	4b17      	ldr	r3, [pc, #92]	; (8007358 <UART4_IRQHandler+0xe0>)
 80072fc:	701a      	strb	r2, [r3, #0]
			}
			else
				cnt = 0;
			break;
 80072fe:	e022      	b.n	8007346 <UART4_IRQHandler+0xce>
				cnt = 0;
 8007300:	4b15      	ldr	r3, [pc, #84]	; (8007358 <UART4_IRQHandler+0xe0>)
 8007302:	2200      	movs	r2, #0
 8007304:	701a      	strb	r2, [r3, #0]
			break;
 8007306:	e01e      	b.n	8007346 <UART4_IRQHandler+0xce>
		case 35:
			m8n_rx_buf[cnt] = uart4_rx_data;
 8007308:	4b13      	ldr	r3, [pc, #76]	; (8007358 <UART4_IRQHandler+0xe0>)
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	461a      	mov	r2, r3
 800730e:	4b10      	ldr	r3, [pc, #64]	; (8007350 <UART4_IRQHandler+0xd8>)
 8007310:	7819      	ldrb	r1, [r3, #0]
 8007312:	4b12      	ldr	r3, [pc, #72]	; (800735c <UART4_IRQHandler+0xe4>)
 8007314:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 8007316:	4b10      	ldr	r3, [pc, #64]	; (8007358 <UART4_IRQHandler+0xe0>)
 8007318:	2200      	movs	r2, #0
 800731a:	701a      	strb	r2, [r3, #0]
			m8n_rx_cplt_flag = 1;
 800731c:	4b10      	ldr	r3, [pc, #64]	; (8007360 <UART4_IRQHandler+0xe8>)
 800731e:	2201      	movs	r2, #1
 8007320:	701a      	strb	r2, [r3, #0]
			break;
 8007322:	e010      	b.n	8007346 <UART4_IRQHandler+0xce>
		default:
			m8n_rx_buf[cnt] = uart4_rx_data;
 8007324:	4b0c      	ldr	r3, [pc, #48]	; (8007358 <UART4_IRQHandler+0xe0>)
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	461a      	mov	r2, r3
 800732a:	4b09      	ldr	r3, [pc, #36]	; (8007350 <UART4_IRQHandler+0xd8>)
 800732c:	7819      	ldrb	r1, [r3, #0]
 800732e:	4b0b      	ldr	r3, [pc, #44]	; (800735c <UART4_IRQHandler+0xe4>)
 8007330:	5499      	strb	r1, [r3, r2]
			cnt++;
 8007332:	4b09      	ldr	r3, [pc, #36]	; (8007358 <UART4_IRQHandler+0xe0>)
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	3301      	adds	r3, #1
 8007338:	b2da      	uxtb	r2, r3
 800733a:	4b07      	ldr	r3, [pc, #28]	; (8007358 <UART4_IRQHandler+0xe0>)
 800733c:	701a      	strb	r2, [r3, #0]
			break;
 800733e:	e002      	b.n	8007346 <UART4_IRQHandler+0xce>
		}
	}
 8007340:	bf00      	nop
 8007342:	e000      	b.n	8007346 <UART4_IRQHandler+0xce>
			break;
 8007344:	bf00      	nop
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8007346:	bf00      	nop
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	40004c00 	.word	0x40004c00
 8007350:	200003af 	.word	0x200003af
 8007354:	200003ae 	.word	0x200003ae
 8007358:	200003fe 	.word	0x200003fe
 800735c:	200003b4 	.word	0x200003b4
 8007360:	200003d8 	.word	0x200003d8

08007364 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	static unsigned char cnt = 0;
	if(LL_USART_IsActiveFlag_RXNE(UART5))
 8007368:	4833      	ldr	r0, [pc, #204]	; (8007438 <UART5_IRQHandler+0xd4>)
 800736a:	f7ff ff1f 	bl	80071ac <LL_USART_IsActiveFlag_RXNE>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d05b      	beq.n	800742c <UART5_IRQHandler+0xc8>
	{
		LL_USART_ClearFlag_RXNE(UART5);
 8007374:	4830      	ldr	r0, [pc, #192]	; (8007438 <UART5_IRQHandler+0xd4>)
 8007376:	f7ff ff2c 	bl	80071d2 <LL_USART_ClearFlag_RXNE>
		uart5_rx_data = LL_USART_ReceiveData8(UART5);
 800737a:	482f      	ldr	r0, [pc, #188]	; (8007438 <UART5_IRQHandler+0xd4>)
 800737c:	f7ff ff37 	bl	80071ee <LL_USART_ReceiveData8>
 8007380:	4603      	mov	r3, r0
 8007382:	461a      	mov	r2, r3
 8007384:	4b2d      	ldr	r3, [pc, #180]	; (800743c <UART5_IRQHandler+0xd8>)
 8007386:	701a      	strb	r2, [r3, #0]
		uart5_rx_flag = 1;
 8007388:	4b2d      	ldr	r3, [pc, #180]	; (8007440 <UART5_IRQHandler+0xdc>)
 800738a:	2201      	movs	r2, #1
 800738c:	701a      	strb	r2, [r3, #0]

		switch(cnt)
 800738e:	4b2d      	ldr	r3, [pc, #180]	; (8007444 <UART5_IRQHandler+0xe0>)
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	2b1f      	cmp	r3, #31
 8007394:	d02e      	beq.n	80073f4 <UART5_IRQHandler+0x90>
 8007396:	2b1f      	cmp	r3, #31
 8007398:	dc3a      	bgt.n	8007410 <UART5_IRQHandler+0xac>
 800739a:	2b00      	cmp	r3, #0
 800739c:	d002      	beq.n	80073a4 <UART5_IRQHandler+0x40>
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d012      	beq.n	80073c8 <UART5_IRQHandler+0x64>
 80073a2:	e035      	b.n	8007410 <UART5_IRQHandler+0xac>
		{
		case 0:
			if(uart5_rx_data == 0x20)
 80073a4:	4b25      	ldr	r3, [pc, #148]	; (800743c <UART5_IRQHandler+0xd8>)
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	2b20      	cmp	r3, #32
 80073aa:	d141      	bne.n	8007430 <UART5_IRQHandler+0xcc>
			{
				ibus_rx_buf[cnt] = uart5_rx_data;
 80073ac:	4b25      	ldr	r3, [pc, #148]	; (8007444 <UART5_IRQHandler+0xe0>)
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	461a      	mov	r2, r3
 80073b2:	4b22      	ldr	r3, [pc, #136]	; (800743c <UART5_IRQHandler+0xd8>)
 80073b4:	7819      	ldrb	r1, [r3, #0]
 80073b6:	4b24      	ldr	r3, [pc, #144]	; (8007448 <UART5_IRQHandler+0xe4>)
 80073b8:	5499      	strb	r1, [r3, r2]
				cnt++;
 80073ba:	4b22      	ldr	r3, [pc, #136]	; (8007444 <UART5_IRQHandler+0xe0>)
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	3301      	adds	r3, #1
 80073c0:	b2da      	uxtb	r2, r3
 80073c2:	4b20      	ldr	r3, [pc, #128]	; (8007444 <UART5_IRQHandler+0xe0>)
 80073c4:	701a      	strb	r2, [r3, #0]
			}
			break;
 80073c6:	e033      	b.n	8007430 <UART5_IRQHandler+0xcc>
		case 1:
			if(uart5_rx_data == 0x40)
 80073c8:	4b1c      	ldr	r3, [pc, #112]	; (800743c <UART5_IRQHandler+0xd8>)
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	2b40      	cmp	r3, #64	; 0x40
 80073ce:	d10d      	bne.n	80073ec <UART5_IRQHandler+0x88>
			{
				ibus_rx_buf[cnt] = uart5_rx_data;
 80073d0:	4b1c      	ldr	r3, [pc, #112]	; (8007444 <UART5_IRQHandler+0xe0>)
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	461a      	mov	r2, r3
 80073d6:	4b19      	ldr	r3, [pc, #100]	; (800743c <UART5_IRQHandler+0xd8>)
 80073d8:	7819      	ldrb	r1, [r3, #0]
 80073da:	4b1b      	ldr	r3, [pc, #108]	; (8007448 <UART5_IRQHandler+0xe4>)
 80073dc:	5499      	strb	r1, [r3, r2]
				cnt++;
 80073de:	4b19      	ldr	r3, [pc, #100]	; (8007444 <UART5_IRQHandler+0xe0>)
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	3301      	adds	r3, #1
 80073e4:	b2da      	uxtb	r2, r3
 80073e6:	4b17      	ldr	r3, [pc, #92]	; (8007444 <UART5_IRQHandler+0xe0>)
 80073e8:	701a      	strb	r2, [r3, #0]
			}
			else
				cnt = 0;
			break;
 80073ea:	e022      	b.n	8007432 <UART5_IRQHandler+0xce>
				cnt = 0;
 80073ec:	4b15      	ldr	r3, [pc, #84]	; (8007444 <UART5_IRQHandler+0xe0>)
 80073ee:	2200      	movs	r2, #0
 80073f0:	701a      	strb	r2, [r3, #0]
			break;
 80073f2:	e01e      	b.n	8007432 <UART5_IRQHandler+0xce>
		case 31:
			ibus_rx_buf[cnt] = uart5_rx_data;
 80073f4:	4b13      	ldr	r3, [pc, #76]	; (8007444 <UART5_IRQHandler+0xe0>)
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	461a      	mov	r2, r3
 80073fa:	4b10      	ldr	r3, [pc, #64]	; (800743c <UART5_IRQHandler+0xd8>)
 80073fc:	7819      	ldrb	r1, [r3, #0]
 80073fe:	4b12      	ldr	r3, [pc, #72]	; (8007448 <UART5_IRQHandler+0xe4>)
 8007400:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 8007402:	4b10      	ldr	r3, [pc, #64]	; (8007444 <UART5_IRQHandler+0xe0>)
 8007404:	2200      	movs	r2, #0
 8007406:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 8007408:	4b10      	ldr	r3, [pc, #64]	; (800744c <UART5_IRQHandler+0xe8>)
 800740a:	2201      	movs	r2, #1
 800740c:	701a      	strb	r2, [r3, #0]
			break;
 800740e:	e010      	b.n	8007432 <UART5_IRQHandler+0xce>
		default:
			ibus_rx_buf[cnt] = uart5_rx_data;
 8007410:	4b0c      	ldr	r3, [pc, #48]	; (8007444 <UART5_IRQHandler+0xe0>)
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	461a      	mov	r2, r3
 8007416:	4b09      	ldr	r3, [pc, #36]	; (800743c <UART5_IRQHandler+0xd8>)
 8007418:	7819      	ldrb	r1, [r3, #0]
 800741a:	4b0b      	ldr	r3, [pc, #44]	; (8007448 <UART5_IRQHandler+0xe4>)
 800741c:	5499      	strb	r1, [r3, r2]
			cnt++;
 800741e:	4b09      	ldr	r3, [pc, #36]	; (8007444 <UART5_IRQHandler+0xe0>)
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	3301      	adds	r3, #1
 8007424:	b2da      	uxtb	r2, r3
 8007426:	4b07      	ldr	r3, [pc, #28]	; (8007444 <UART5_IRQHandler+0xe0>)
 8007428:	701a      	strb	r2, [r3, #0]
			break;
 800742a:	e002      	b.n	8007432 <UART5_IRQHandler+0xce>
		}

//		while(!LL_USART_IsActiveFlag_TXE(USART6));
//		LL_USART_TransmitData8(USART6, uart5_rx_data);
	}
 800742c:	bf00      	nop
 800742e:	e000      	b.n	8007432 <UART5_IRQHandler+0xce>
			break;
 8007430:	bf00      	nop
  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8007432:	bf00      	nop
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	40005000 	.word	0x40005000
 800743c:	200003b1 	.word	0x200003b1
 8007440:	200003b0 	.word	0x200003b0
 8007444:	200003ff 	.word	0x200003ff
 8007448:	200003dc 	.word	0x200003dc
 800744c:	200003fc 	.word	0x200003fc

08007450 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007454:	4802      	ldr	r0, [pc, #8]	; (8007460 <DMA2_Stream0_IRQHandler+0x10>)
 8007456:	f7fa fbed 	bl	8001c34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800745a:	bf00      	nop
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	200002f8 	.word	0x200002f8

08007464 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART6))
 8007468:	480a      	ldr	r0, [pc, #40]	; (8007494 <USART6_IRQHandler+0x30>)
 800746a:	f7ff fe9f 	bl	80071ac <LL_USART_IsActiveFlag_RXNE>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00c      	beq.n	800748e <USART6_IRQHandler+0x2a>
	{
		LL_USART_ClearFlag_RXNE(USART6);
 8007474:	4807      	ldr	r0, [pc, #28]	; (8007494 <USART6_IRQHandler+0x30>)
 8007476:	f7ff feac 	bl	80071d2 <LL_USART_ClearFlag_RXNE>
		uart6_rx_data = LL_USART_ReceiveData8(USART6);
 800747a:	4806      	ldr	r0, [pc, #24]	; (8007494 <USART6_IRQHandler+0x30>)
 800747c:	f7ff feb7 	bl	80071ee <LL_USART_ReceiveData8>
 8007480:	4603      	mov	r3, r0
 8007482:	461a      	mov	r2, r3
 8007484:	4b04      	ldr	r3, [pc, #16]	; (8007498 <USART6_IRQHandler+0x34>)
 8007486:	701a      	strb	r2, [r3, #0]
		uart6_rx_flag = 1;
 8007488:	4b04      	ldr	r3, [pc, #16]	; (800749c <USART6_IRQHandler+0x38>)
 800748a:	2201      	movs	r2, #1
 800748c:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800748e:	bf00      	nop
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	40011400 	.word	0x40011400
 8007498:	200003ad 	.word	0x200003ad
 800749c:	200003ac 	.word	0x200003ac

080074a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80074a0:	b480      	push	{r7}
 80074a2:	af00      	add	r7, sp, #0
	return 1;
 80074a4:	2301      	movs	r3, #1
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <_kill>:

int _kill(int pid, int sig)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80074ba:	f000 fdb9 	bl	8008030 <__errno>
 80074be:	4603      	mov	r3, r0
 80074c0:	2216      	movs	r2, #22
 80074c2:	601a      	str	r2, [r3, #0]
	return -1;
 80074c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3708      	adds	r7, #8
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <_exit>:

void _exit (int status)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80074d8:	f04f 31ff 	mov.w	r1, #4294967295
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f7ff ffe7 	bl	80074b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80074e2:	e7fe      	b.n	80074e2 <_exit+0x12>

080074e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b086      	sub	sp, #24
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80074f0:	2300      	movs	r3, #0
 80074f2:	617b      	str	r3, [r7, #20]
 80074f4:	e00a      	b.n	800750c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80074f6:	f3af 8000 	nop.w
 80074fa:	4601      	mov	r1, r0
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	1c5a      	adds	r2, r3, #1
 8007500:	60ba      	str	r2, [r7, #8]
 8007502:	b2ca      	uxtb	r2, r1
 8007504:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	3301      	adds	r3, #1
 800750a:	617b      	str	r3, [r7, #20]
 800750c:	697a      	ldr	r2, [r7, #20]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	429a      	cmp	r2, r3
 8007512:	dbf0      	blt.n	80074f6 <_read+0x12>
	}

return len;
 8007514:	687b      	ldr	r3, [r7, #4]
}
 8007516:	4618      	mov	r0, r3
 8007518:	3718      	adds	r7, #24
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <_close>:
	}
	return len;
}

int _close(int file)
{
 800751e:	b480      	push	{r7}
 8007520:	b083      	sub	sp, #12
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
	return -1;
 8007526:	f04f 33ff 	mov.w	r3, #4294967295
}
 800752a:	4618      	mov	r0, r3
 800752c:	370c      	adds	r7, #12
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr

08007536 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007536:	b480      	push	{r7}
 8007538:	b083      	sub	sp, #12
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
 800753e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007546:	605a      	str	r2, [r3, #4]
	return 0;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	370c      	adds	r7, #12
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr

08007556 <_isatty>:

int _isatty(int file)
{
 8007556:	b480      	push	{r7}
 8007558:	b083      	sub	sp, #12
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
	return 1;
 800755e:	2301      	movs	r3, #1
}
 8007560:	4618      	mov	r0, r3
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	607a      	str	r2, [r7, #4]
	return 0;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3714      	adds	r7, #20
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
	...

08007588 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007590:	4b11      	ldr	r3, [pc, #68]	; (80075d8 <_sbrk+0x50>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d102      	bne.n	800759e <_sbrk+0x16>
		heap_end = &end;
 8007598:	4b0f      	ldr	r3, [pc, #60]	; (80075d8 <_sbrk+0x50>)
 800759a:	4a10      	ldr	r2, [pc, #64]	; (80075dc <_sbrk+0x54>)
 800759c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800759e:	4b0e      	ldr	r3, [pc, #56]	; (80075d8 <_sbrk+0x50>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80075a4:	4b0c      	ldr	r3, [pc, #48]	; (80075d8 <_sbrk+0x50>)
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4413      	add	r3, r2
 80075ac:	466a      	mov	r2, sp
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d907      	bls.n	80075c2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80075b2:	f000 fd3d 	bl	8008030 <__errno>
 80075b6:	4603      	mov	r3, r0
 80075b8:	220c      	movs	r2, #12
 80075ba:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80075bc:	f04f 33ff 	mov.w	r3, #4294967295
 80075c0:	e006      	b.n	80075d0 <_sbrk+0x48>
	}

	heap_end += incr;
 80075c2:	4b05      	ldr	r3, [pc, #20]	; (80075d8 <_sbrk+0x50>)
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4413      	add	r3, r2
 80075ca:	4a03      	ldr	r2, [pc, #12]	; (80075d8 <_sbrk+0x50>)
 80075cc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80075ce:	68fb      	ldr	r3, [r7, #12]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	20000400 	.word	0x20000400
 80075dc:	20000458 	.word	0x20000458

080075e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80075e0:	b480      	push	{r7}
 80075e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80075e4:	4b16      	ldr	r3, [pc, #88]	; (8007640 <SystemInit+0x60>)
 80075e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ea:	4a15      	ldr	r2, [pc, #84]	; (8007640 <SystemInit+0x60>)
 80075ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80075f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80075f4:	4b13      	ldr	r3, [pc, #76]	; (8007644 <SystemInit+0x64>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a12      	ldr	r2, [pc, #72]	; (8007644 <SystemInit+0x64>)
 80075fa:	f043 0301 	orr.w	r3, r3, #1
 80075fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007600:	4b10      	ldr	r3, [pc, #64]	; (8007644 <SystemInit+0x64>)
 8007602:	2200      	movs	r2, #0
 8007604:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007606:	4b0f      	ldr	r3, [pc, #60]	; (8007644 <SystemInit+0x64>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a0e      	ldr	r2, [pc, #56]	; (8007644 <SystemInit+0x64>)
 800760c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8007610:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007614:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007616:	4b0b      	ldr	r3, [pc, #44]	; (8007644 <SystemInit+0x64>)
 8007618:	4a0b      	ldr	r2, [pc, #44]	; (8007648 <SystemInit+0x68>)
 800761a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800761c:	4b09      	ldr	r3, [pc, #36]	; (8007644 <SystemInit+0x64>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a08      	ldr	r2, [pc, #32]	; (8007644 <SystemInit+0x64>)
 8007622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007626:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007628:	4b06      	ldr	r3, [pc, #24]	; (8007644 <SystemInit+0x64>)
 800762a:	2200      	movs	r2, #0
 800762c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800762e:	4b04      	ldr	r3, [pc, #16]	; (8007640 <SystemInit+0x60>)
 8007630:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007634:	609a      	str	r2, [r3, #8]
#endif
}
 8007636:	bf00      	nop
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr
 8007640:	e000ed00 	.word	0xe000ed00
 8007644:	40023800 	.word	0x40023800
 8007648:	24003010 	.word	0x24003010

0800764c <LL_TIM_EnableARRPreload>:
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	601a      	str	r2, [r3, #0]
}
 8007660:	bf00      	nop
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <LL_TIM_OC_EnableFast>:
{
 800766c:	b4b0      	push	{r4, r5, r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d01c      	beq.n	80076b6 <LL_TIM_OC_EnableFast+0x4a>
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	2b04      	cmp	r3, #4
 8007680:	d017      	beq.n	80076b2 <LL_TIM_OC_EnableFast+0x46>
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	2b10      	cmp	r3, #16
 8007686:	d012      	beq.n	80076ae <LL_TIM_OC_EnableFast+0x42>
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	2b40      	cmp	r3, #64	; 0x40
 800768c:	d00d      	beq.n	80076aa <LL_TIM_OC_EnableFast+0x3e>
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007694:	d007      	beq.n	80076a6 <LL_TIM_OC_EnableFast+0x3a>
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800769c:	d101      	bne.n	80076a2 <LL_TIM_OC_EnableFast+0x36>
 800769e:	2305      	movs	r3, #5
 80076a0:	e00a      	b.n	80076b8 <LL_TIM_OC_EnableFast+0x4c>
 80076a2:	2306      	movs	r3, #6
 80076a4:	e008      	b.n	80076b8 <LL_TIM_OC_EnableFast+0x4c>
 80076a6:	2304      	movs	r3, #4
 80076a8:	e006      	b.n	80076b8 <LL_TIM_OC_EnableFast+0x4c>
 80076aa:	2303      	movs	r3, #3
 80076ac:	e004      	b.n	80076b8 <LL_TIM_OC_EnableFast+0x4c>
 80076ae:	2302      	movs	r3, #2
 80076b0:	e002      	b.n	80076b8 <LL_TIM_OC_EnableFast+0x4c>
 80076b2:	2301      	movs	r3, #1
 80076b4:	e000      	b.n	80076b8 <LL_TIM_OC_EnableFast+0x4c>
 80076b6:	2300      	movs	r3, #0
 80076b8:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	3318      	adds	r3, #24
 80076be:	461a      	mov	r2, r3
 80076c0:	4629      	mov	r1, r5
 80076c2:	4b09      	ldr	r3, [pc, #36]	; (80076e8 <LL_TIM_OC_EnableFast+0x7c>)
 80076c4:	5c5b      	ldrb	r3, [r3, r1]
 80076c6:	4413      	add	r3, r2
 80076c8:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80076ca:	6822      	ldr	r2, [r4, #0]
 80076cc:	4629      	mov	r1, r5
 80076ce:	4b07      	ldr	r3, [pc, #28]	; (80076ec <LL_TIM_OC_EnableFast+0x80>)
 80076d0:	5c5b      	ldrb	r3, [r3, r1]
 80076d2:	4619      	mov	r1, r3
 80076d4:	2304      	movs	r3, #4
 80076d6:	408b      	lsls	r3, r1
 80076d8:	4313      	orrs	r3, r2
 80076da:	6023      	str	r3, [r4, #0]
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bcb0      	pop	{r4, r5, r7}
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop
 80076e8:	0800af38 	.word	0x0800af38
 80076ec:	0800af40 	.word	0x0800af40

080076f0 <LL_TIM_OC_EnablePreload>:
{
 80076f0:	b4b0      	push	{r4, r5, r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d01c      	beq.n	800773a <LL_TIM_OC_EnablePreload+0x4a>
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	2b04      	cmp	r3, #4
 8007704:	d017      	beq.n	8007736 <LL_TIM_OC_EnablePreload+0x46>
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	2b10      	cmp	r3, #16
 800770a:	d012      	beq.n	8007732 <LL_TIM_OC_EnablePreload+0x42>
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	2b40      	cmp	r3, #64	; 0x40
 8007710:	d00d      	beq.n	800772e <LL_TIM_OC_EnablePreload+0x3e>
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007718:	d007      	beq.n	800772a <LL_TIM_OC_EnablePreload+0x3a>
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007720:	d101      	bne.n	8007726 <LL_TIM_OC_EnablePreload+0x36>
 8007722:	2305      	movs	r3, #5
 8007724:	e00a      	b.n	800773c <LL_TIM_OC_EnablePreload+0x4c>
 8007726:	2306      	movs	r3, #6
 8007728:	e008      	b.n	800773c <LL_TIM_OC_EnablePreload+0x4c>
 800772a:	2304      	movs	r3, #4
 800772c:	e006      	b.n	800773c <LL_TIM_OC_EnablePreload+0x4c>
 800772e:	2303      	movs	r3, #3
 8007730:	e004      	b.n	800773c <LL_TIM_OC_EnablePreload+0x4c>
 8007732:	2302      	movs	r3, #2
 8007734:	e002      	b.n	800773c <LL_TIM_OC_EnablePreload+0x4c>
 8007736:	2301      	movs	r3, #1
 8007738:	e000      	b.n	800773c <LL_TIM_OC_EnablePreload+0x4c>
 800773a:	2300      	movs	r3, #0
 800773c:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	3318      	adds	r3, #24
 8007742:	461a      	mov	r2, r3
 8007744:	4629      	mov	r1, r5
 8007746:	4b09      	ldr	r3, [pc, #36]	; (800776c <LL_TIM_OC_EnablePreload+0x7c>)
 8007748:	5c5b      	ldrb	r3, [r3, r1]
 800774a:	4413      	add	r3, r2
 800774c:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800774e:	6822      	ldr	r2, [r4, #0]
 8007750:	4629      	mov	r1, r5
 8007752:	4b07      	ldr	r3, [pc, #28]	; (8007770 <LL_TIM_OC_EnablePreload+0x80>)
 8007754:	5c5b      	ldrb	r3, [r3, r1]
 8007756:	4619      	mov	r1, r3
 8007758:	2308      	movs	r3, #8
 800775a:	408b      	lsls	r3, r1
 800775c:	4313      	orrs	r3, r2
 800775e:	6023      	str	r3, [r4, #0]
}
 8007760:	bf00      	nop
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	bcb0      	pop	{r4, r5, r7}
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	0800af38 	.word	0x0800af38
 8007770:	0800af40 	.word	0x0800af40

08007774 <LL_TIM_SetClockSource>:
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007786:	f023 0307 	bic.w	r3, r3, #7
 800778a:	683a      	ldr	r2, [r7, #0]
 800778c:	431a      	orrs	r2, r3
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	609a      	str	r2, [r3, #8]
}
 8007792:	bf00      	nop
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <LL_TIM_SetTriggerOutput>:
{
 800779e:	b480      	push	{r7}
 80077a0:	b083      	sub	sp, #12
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
 80077a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	431a      	orrs	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	605a      	str	r2, [r3, #4]
}
 80077b8:	bf00      	nop
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <LL_TIM_DisableMasterSlaveMode>:
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	609a      	str	r2, [r3, #8]
}
 80077d8:	bf00      	nop
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <LL_AHB1_GRP1_EnableClock>:
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80077ec:	4b08      	ldr	r3, [pc, #32]	; (8007810 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80077ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077f0:	4907      	ldr	r1, [pc, #28]	; (8007810 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80077f8:	4b05      	ldr	r3, [pc, #20]	; (8007810 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80077fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4013      	ands	r3, r2
 8007800:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007802:	68fb      	ldr	r3, [r7, #12]
}
 8007804:	bf00      	nop
 8007806:	3714      	adds	r7, #20
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr
 8007810:	40023800 	.word	0x40023800

08007814 <LL_APB1_GRP1_EnableClock>:
{
 8007814:	b480      	push	{r7}
 8007816:	b085      	sub	sp, #20
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800781c:	4b08      	ldr	r3, [pc, #32]	; (8007840 <LL_APB1_GRP1_EnableClock+0x2c>)
 800781e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007820:	4907      	ldr	r1, [pc, #28]	; (8007840 <LL_APB1_GRP1_EnableClock+0x2c>)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4313      	orrs	r3, r2
 8007826:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8007828:	4b05      	ldr	r3, [pc, #20]	; (8007840 <LL_APB1_GRP1_EnableClock+0x2c>)
 800782a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4013      	ands	r3, r2
 8007830:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007832:	68fb      	ldr	r3, [r7, #12]
}
 8007834:	bf00      	nop
 8007836:	3714      	adds	r7, #20
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr
 8007840:	40023800 	.word	0x40023800

08007844 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b094      	sub	sp, #80	; 0x50
 8007848:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800784a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800784e:	2200      	movs	r2, #0
 8007850:	601a      	str	r2, [r3, #0]
 8007852:	605a      	str	r2, [r3, #4]
 8007854:	609a      	str	r2, [r3, #8]
 8007856:	60da      	str	r2, [r3, #12]
 8007858:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800785a:	f107 031c 	add.w	r3, r7, #28
 800785e:	2220      	movs	r2, #32
 8007860:	2100      	movs	r1, #0
 8007862:	4618      	mov	r0, r3
 8007864:	f000 fc0e 	bl	8008084 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007868:	1d3b      	adds	r3, r7, #4
 800786a:	2200      	movs	r2, #0
 800786c:	601a      	str	r2, [r3, #0]
 800786e:	605a      	str	r2, [r3, #4]
 8007870:	609a      	str	r2, [r3, #8]
 8007872:	60da      	str	r2, [r3, #12]
 8007874:	611a      	str	r2, [r3, #16]
 8007876:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8007878:	2002      	movs	r0, #2
 800787a:	f7ff ffcb 	bl	8007814 <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 999;
 800787e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8007882:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8007884:	2300      	movs	r3, #0
 8007886:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 20;
 8007888:	2314      	movs	r3, #20
 800788a:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800788c:	2300      	movs	r3, #0
 800788e:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8007890:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007894:	4619      	mov	r1, r3
 8007896:	4822      	ldr	r0, [pc, #136]	; (8007920 <MX_TIM3_Init+0xdc>)
 8007898:	f7fc ff40 	bl	800471c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 800789c:	4820      	ldr	r0, [pc, #128]	; (8007920 <MX_TIM3_Init+0xdc>)
 800789e:	f7ff fed5 	bl	800764c <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80078a2:	2100      	movs	r1, #0
 80078a4:	481e      	ldr	r0, [pc, #120]	; (8007920 <MX_TIM3_Init+0xdc>)
 80078a6:	f7ff ff65 	bl	8007774 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 80078aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80078ae:	481c      	ldr	r0, [pc, #112]	; (8007920 <MX_TIM3_Init+0xdc>)
 80078b0:	f7ff ff1e 	bl	80076f0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80078b4:	2360      	movs	r3, #96	; 0x60
 80078b6:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80078b8:	2300      	movs	r3, #0
 80078ba:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80078bc:	2300      	movs	r3, #0
 80078be:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 80078c0:	230a      	movs	r3, #10
 80078c2:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80078c4:	2300      	movs	r3, #0
 80078c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80078c8:	f107 031c 	add.w	r3, r7, #28
 80078cc:	461a      	mov	r2, r3
 80078ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80078d2:	4813      	ldr	r0, [pc, #76]	; (8007920 <MX_TIM3_Init+0xdc>)
 80078d4:	f7fc ffbc 	bl	8004850 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 80078d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80078dc:	4810      	ldr	r0, [pc, #64]	; (8007920 <MX_TIM3_Init+0xdc>)
 80078de:	f7ff fec5 	bl	800766c <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80078e2:	2100      	movs	r1, #0
 80078e4:	480e      	ldr	r0, [pc, #56]	; (8007920 <MX_TIM3_Init+0xdc>)
 80078e6:	f7ff ff5a 	bl	800779e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80078ea:	480d      	ldr	r0, [pc, #52]	; (8007920 <MX_TIM3_Init+0xdc>)
 80078ec:	f7ff ff6a 	bl	80077c4 <LL_TIM_DisableMasterSlaveMode>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80078f0:	2002      	movs	r0, #2
 80078f2:	f7ff ff77 	bl	80077e4 <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration    
    PB1     ------> TIM3_CH4 
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80078f6:	2302      	movs	r3, #2
 80078f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80078fa:	2302      	movs	r3, #2
 80078fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80078fe:	2300      	movs	r3, #0
 8007900:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007902:	2300      	movs	r3, #0
 8007904:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007906:	2300      	movs	r3, #0
 8007908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800790a:	2302      	movs	r3, #2
 800790c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800790e:	1d3b      	adds	r3, r7, #4
 8007910:	4619      	mov	r1, r3
 8007912:	4804      	ldr	r0, [pc, #16]	; (8007924 <MX_TIM3_Init+0xe0>)
 8007914:	f7fc fc6c 	bl	80041f0 <LL_GPIO_Init>

}
 8007918:	bf00      	nop
 800791a:	3750      	adds	r7, #80	; 0x50
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}
 8007920:	40000400 	.word	0x40000400
 8007924:	40020400 	.word	0x40020400

08007928 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b094      	sub	sp, #80	; 0x50
 800792c:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800792e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007932:	2200      	movs	r2, #0
 8007934:	601a      	str	r2, [r3, #0]
 8007936:	605a      	str	r2, [r3, #4]
 8007938:	609a      	str	r2, [r3, #8]
 800793a:	60da      	str	r2, [r3, #12]
 800793c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800793e:	f107 031c 	add.w	r3, r7, #28
 8007942:	2220      	movs	r2, #32
 8007944:	2100      	movs	r1, #0
 8007946:	4618      	mov	r0, r3
 8007948:	f000 fb9c 	bl	8008084 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800794c:	1d3b      	adds	r3, r7, #4
 800794e:	2200      	movs	r2, #0
 8007950:	601a      	str	r2, [r3, #0]
 8007952:	605a      	str	r2, [r3, #4]
 8007954:	609a      	str	r2, [r3, #8]
 8007956:	60da      	str	r2, [r3, #12]
 8007958:	611a      	str	r2, [r3, #16]
 800795a:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 800795c:	2008      	movs	r0, #8
 800795e:	f7ff ff59 	bl	8007814 <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 0;
 8007962:	2300      	movs	r3, #0
 8007964:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8007966:	2300      	movs	r3, #0
 8007968:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 41999;
 800796a:	f24a 430f 	movw	r3, #41999	; 0xa40f
 800796e:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8007970:	2300      	movs	r3, #0
 8007972:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 8007974:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007978:	4619      	mov	r1, r3
 800797a:	4840      	ldr	r0, [pc, #256]	; (8007a7c <MX_TIM5_Init+0x154>)
 800797c:	f7fc fece 	bl	800471c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM5);
 8007980:	483e      	ldr	r0, [pc, #248]	; (8007a7c <MX_TIM5_Init+0x154>)
 8007982:	f7ff fe63 	bl	800764c <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 8007986:	2100      	movs	r1, #0
 8007988:	483c      	ldr	r0, [pc, #240]	; (8007a7c <MX_TIM5_Init+0x154>)
 800798a:	f7ff fef3 	bl	8007774 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH1);
 800798e:	2101      	movs	r1, #1
 8007990:	483a      	ldr	r0, [pc, #232]	; (8007a7c <MX_TIM5_Init+0x154>)
 8007992:	f7ff fead 	bl	80076f0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8007996:	2360      	movs	r3, #96	; 0x60
 8007998:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800799a:	2300      	movs	r3, #0
 800799c:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800799e:	2300      	movs	r3, #0
 80079a0:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 80079a2:	2300      	movs	r3, #0
 80079a4:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80079a6:	2300      	movs	r3, #0
 80079a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80079aa:	f107 031c 	add.w	r3, r7, #28
 80079ae:	461a      	mov	r2, r3
 80079b0:	2101      	movs	r1, #1
 80079b2:	4832      	ldr	r0, [pc, #200]	; (8007a7c <MX_TIM5_Init+0x154>)
 80079b4:	f7fc ff4c 	bl	8004850 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH1);
 80079b8:	2101      	movs	r1, #1
 80079ba:	4830      	ldr	r0, [pc, #192]	; (8007a7c <MX_TIM5_Init+0x154>)
 80079bc:	f7ff fe56 	bl	800766c <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH2);
 80079c0:	2110      	movs	r1, #16
 80079c2:	482e      	ldr	r0, [pc, #184]	; (8007a7c <MX_TIM5_Init+0x154>)
 80079c4:	f7ff fe94 	bl	80076f0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80079c8:	2300      	movs	r3, #0
 80079ca:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80079cc:	2300      	movs	r3, #0
 80079ce:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80079d0:	f107 031c 	add.w	r3, r7, #28
 80079d4:	461a      	mov	r2, r3
 80079d6:	2110      	movs	r1, #16
 80079d8:	4828      	ldr	r0, [pc, #160]	; (8007a7c <MX_TIM5_Init+0x154>)
 80079da:	f7fc ff39 	bl	8004850 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH2);
 80079de:	2110      	movs	r1, #16
 80079e0:	4826      	ldr	r0, [pc, #152]	; (8007a7c <MX_TIM5_Init+0x154>)
 80079e2:	f7ff fe43 	bl	800766c <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH3);
 80079e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80079ea:	4824      	ldr	r0, [pc, #144]	; (8007a7c <MX_TIM5_Init+0x154>)
 80079ec:	f7ff fe80 	bl	80076f0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80079f0:	2300      	movs	r3, #0
 80079f2:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80079f4:	2300      	movs	r3, #0
 80079f6:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 80079f8:	f107 031c 	add.w	r3, r7, #28
 80079fc:	461a      	mov	r2, r3
 80079fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007a02:	481e      	ldr	r0, [pc, #120]	; (8007a7c <MX_TIM5_Init+0x154>)
 8007a04:	f7fc ff24 	bl	8004850 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH3);
 8007a08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007a0c:	481b      	ldr	r0, [pc, #108]	; (8007a7c <MX_TIM5_Init+0x154>)
 8007a0e:	f7ff fe2d 	bl	800766c <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH4);
 8007a12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007a16:	4819      	ldr	r0, [pc, #100]	; (8007a7c <MX_TIM5_Init+0x154>)
 8007a18:	f7ff fe6a 	bl	80076f0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8007a20:	2300      	movs	r3, #0
 8007a22:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8007a24:	f107 031c 	add.w	r3, r7, #28
 8007a28:	461a      	mov	r2, r3
 8007a2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007a2e:	4813      	ldr	r0, [pc, #76]	; (8007a7c <MX_TIM5_Init+0x154>)
 8007a30:	f7fc ff0e 	bl	8004850 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH4);
 8007a34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007a38:	4810      	ldr	r0, [pc, #64]	; (8007a7c <MX_TIM5_Init+0x154>)
 8007a3a:	f7ff fe17 	bl	800766c <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 8007a3e:	2100      	movs	r1, #0
 8007a40:	480e      	ldr	r0, [pc, #56]	; (8007a7c <MX_TIM5_Init+0x154>)
 8007a42:	f7ff feac 	bl	800779e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 8007a46:	480d      	ldr	r0, [pc, #52]	; (8007a7c <MX_TIM5_Init+0x154>)
 8007a48:	f7ff febc 	bl	80077c4 <LL_TIM_DisableMasterSlaveMode>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8007a4c:	2001      	movs	r0, #1
 8007a4e:	f7ff fec9 	bl	80077e4 <LL_AHB1_GRP1_EnableClock>
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4 
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8007a52:	230f      	movs	r3, #15
 8007a54:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007a56:	2302      	movs	r3, #2
 8007a58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007a62:	2300      	movs	r3, #0
 8007a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8007a66:	2302      	movs	r3, #2
 8007a68:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a6a:	1d3b      	adds	r3, r7, #4
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	4804      	ldr	r0, [pc, #16]	; (8007a80 <MX_TIM5_Init+0x158>)
 8007a70:	f7fc fbbe 	bl	80041f0 <LL_GPIO_Init>

}
 8007a74:	bf00      	nop
 8007a76:	3750      	adds	r7, #80	; 0x50
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	40000c00 	.word	0x40000c00
 8007a80:	40020000 	.word	0x40020000

08007a84 <__NVIC_GetPriorityGrouping>:
{
 8007a84:	b480      	push	{r7}
 8007a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007a88:	4b04      	ldr	r3, [pc, #16]	; (8007a9c <__NVIC_GetPriorityGrouping+0x18>)
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	0a1b      	lsrs	r3, r3, #8
 8007a8e:	f003 0307 	and.w	r3, r3, #7
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr
 8007a9c:	e000ed00 	.word	0xe000ed00

08007aa0 <__NVIC_EnableIRQ>:
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	db0b      	blt.n	8007aca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ab2:	79fb      	ldrb	r3, [r7, #7]
 8007ab4:	f003 021f 	and.w	r2, r3, #31
 8007ab8:	4907      	ldr	r1, [pc, #28]	; (8007ad8 <__NVIC_EnableIRQ+0x38>)
 8007aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007abe:	095b      	lsrs	r3, r3, #5
 8007ac0:	2001      	movs	r0, #1
 8007ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8007ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007aca:	bf00      	nop
 8007acc:	370c      	adds	r7, #12
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop
 8007ad8:	e000e100 	.word	0xe000e100

08007adc <__NVIC_SetPriority>:
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	6039      	str	r1, [r7, #0]
 8007ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	db0a      	blt.n	8007b06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	b2da      	uxtb	r2, r3
 8007af4:	490c      	ldr	r1, [pc, #48]	; (8007b28 <__NVIC_SetPriority+0x4c>)
 8007af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007afa:	0112      	lsls	r2, r2, #4
 8007afc:	b2d2      	uxtb	r2, r2
 8007afe:	440b      	add	r3, r1
 8007b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007b04:	e00a      	b.n	8007b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	b2da      	uxtb	r2, r3
 8007b0a:	4908      	ldr	r1, [pc, #32]	; (8007b2c <__NVIC_SetPriority+0x50>)
 8007b0c:	79fb      	ldrb	r3, [r7, #7]
 8007b0e:	f003 030f 	and.w	r3, r3, #15
 8007b12:	3b04      	subs	r3, #4
 8007b14:	0112      	lsls	r2, r2, #4
 8007b16:	b2d2      	uxtb	r2, r2
 8007b18:	440b      	add	r3, r1
 8007b1a:	761a      	strb	r2, [r3, #24]
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr
 8007b28:	e000e100 	.word	0xe000e100
 8007b2c:	e000ed00 	.word	0xe000ed00

08007b30 <NVIC_EncodePriority>:
{
 8007b30:	b480      	push	{r7}
 8007b32:	b089      	sub	sp, #36	; 0x24
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f003 0307 	and.w	r3, r3, #7
 8007b42:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	f1c3 0307 	rsb	r3, r3, #7
 8007b4a:	2b04      	cmp	r3, #4
 8007b4c:	bf28      	it	cs
 8007b4e:	2304      	movcs	r3, #4
 8007b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	3304      	adds	r3, #4
 8007b56:	2b06      	cmp	r3, #6
 8007b58:	d902      	bls.n	8007b60 <NVIC_EncodePriority+0x30>
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	3b03      	subs	r3, #3
 8007b5e:	e000      	b.n	8007b62 <NVIC_EncodePriority+0x32>
 8007b60:	2300      	movs	r3, #0
 8007b62:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b64:	f04f 32ff 	mov.w	r2, #4294967295
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b6e:	43da      	mvns	r2, r3
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	401a      	ands	r2, r3
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007b78:	f04f 31ff 	mov.w	r1, #4294967295
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8007b82:	43d9      	mvns	r1, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b88:	4313      	orrs	r3, r2
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3724      	adds	r7, #36	; 0x24
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr

08007b96 <LL_USART_Enable>:
{
 8007b96:	b480      	push	{r7}
 8007b98:	b083      	sub	sp, #12
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	60da      	str	r2, [r3, #12]
}
 8007baa:	bf00      	nop
 8007bac:	370c      	adds	r7, #12
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <LL_USART_ConfigAsyncMode>:
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b083      	sub	sp, #12
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	695b      	ldr	r3, [r3, #20]
 8007bce:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	615a      	str	r2, [r3, #20]
}
 8007bd6:	bf00      	nop
 8007bd8:	370c      	adds	r7, #12
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr
	...

08007be4 <LL_AHB1_GRP1_EnableClock>:
{
 8007be4:	b480      	push	{r7}
 8007be6:	b085      	sub	sp, #20
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8007bec:	4b08      	ldr	r3, [pc, #32]	; (8007c10 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007bee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bf0:	4907      	ldr	r1, [pc, #28]	; (8007c10 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8007bf8:	4b05      	ldr	r3, [pc, #20]	; (8007c10 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007bfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4013      	ands	r3, r2
 8007c00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007c02:	68fb      	ldr	r3, [r7, #12]
}
 8007c04:	bf00      	nop
 8007c06:	3714      	adds	r7, #20
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr
 8007c10:	40023800 	.word	0x40023800

08007c14 <LL_APB1_GRP1_EnableClock>:
{
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8007c1c:	4b08      	ldr	r3, [pc, #32]	; (8007c40 <LL_APB1_GRP1_EnableClock+0x2c>)
 8007c1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c20:	4907      	ldr	r1, [pc, #28]	; (8007c40 <LL_APB1_GRP1_EnableClock+0x2c>)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4313      	orrs	r3, r2
 8007c26:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8007c28:	4b05      	ldr	r3, [pc, #20]	; (8007c40 <LL_APB1_GRP1_EnableClock+0x2c>)
 8007c2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4013      	ands	r3, r2
 8007c30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007c32:	68fb      	ldr	r3, [r7, #12]
}
 8007c34:	bf00      	nop
 8007c36:	3714      	adds	r7, #20
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr
 8007c40:	40023800 	.word	0x40023800

08007c44 <LL_APB2_GRP1_EnableClock>:
{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8007c4c:	4b08      	ldr	r3, [pc, #32]	; (8007c70 <LL_APB2_GRP1_EnableClock+0x2c>)
 8007c4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c50:	4907      	ldr	r1, [pc, #28]	; (8007c70 <LL_APB2_GRP1_EnableClock+0x2c>)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8007c58:	4b05      	ldr	r3, [pc, #20]	; (8007c70 <LL_APB2_GRP1_EnableClock+0x2c>)
 8007c5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4013      	ands	r3, r2
 8007c60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007c62:	68fb      	ldr	r3, [r7, #12]
}
 8007c64:	bf00      	nop
 8007c66:	3714      	adds	r7, #20
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr
 8007c70:	40023800 	.word	0x40023800

08007c74 <MX_UART4_Init>:

UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b08e      	sub	sp, #56	; 0x38
 8007c78:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8007c7a:	f107 031c 	add.w	r3, r7, #28
 8007c7e:	2200      	movs	r2, #0
 8007c80:	601a      	str	r2, [r3, #0]
 8007c82:	605a      	str	r2, [r3, #4]
 8007c84:	609a      	str	r2, [r3, #8]
 8007c86:	60da      	str	r2, [r3, #12]
 8007c88:	611a      	str	r2, [r3, #16]
 8007c8a:	615a      	str	r2, [r3, #20]
 8007c8c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c8e:	1d3b      	adds	r3, r7, #4
 8007c90:	2200      	movs	r2, #0
 8007c92:	601a      	str	r2, [r3, #0]
 8007c94:	605a      	str	r2, [r3, #4]
 8007c96:	609a      	str	r2, [r3, #8]
 8007c98:	60da      	str	r2, [r3, #12]
 8007c9a:	611a      	str	r2, [r3, #16]
 8007c9c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8007c9e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007ca2:	f7ff ffb7 	bl	8007c14 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8007ca6:	2004      	movs	r0, #4
 8007ca8:	f7ff ff9c 	bl	8007be4 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration  
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX 
  */
  GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 8007cac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007cb0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007cb2:	2302      	movs	r3, #2
 8007cb4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8007cc2:	2308      	movs	r3, #8
 8007cc4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007cc6:	1d3b      	adds	r3, r7, #4
 8007cc8:	4619      	mov	r1, r3
 8007cca:	4819      	ldr	r0, [pc, #100]	; (8007d30 <MX_UART4_Init+0xbc>)
 8007ccc:	f7fc fa90 	bl	80041f0 <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007cd0:	f7ff fed8 	bl	8007a84 <__NVIC_GetPriorityGrouping>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	2100      	movs	r1, #0
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7ff ff28 	bl	8007b30 <NVIC_EncodePriority>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	2034      	movs	r0, #52	; 0x34
 8007ce6:	f7ff fef9 	bl	8007adc <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 8007cea:	2034      	movs	r0, #52	; 0x34
 8007cec:	f7ff fed8 	bl	8007aa0 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 9600;
 8007cf0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8007cf4:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8007d02:	230c      	movs	r3, #12
 8007d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8007d06:	2300      	movs	r3, #0
 8007d08:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 8007d0e:	f107 031c 	add.w	r3, r7, #28
 8007d12:	4619      	mov	r1, r3
 8007d14:	4807      	ldr	r0, [pc, #28]	; (8007d34 <MX_UART4_Init+0xc0>)
 8007d16:	f7fd f9e7 	bl	80050e8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 8007d1a:	4806      	ldr	r0, [pc, #24]	; (8007d34 <MX_UART4_Init+0xc0>)
 8007d1c:	f7ff ff4b 	bl	8007bb6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 8007d20:	4804      	ldr	r0, [pc, #16]	; (8007d34 <MX_UART4_Init+0xc0>)
 8007d22:	f7ff ff38 	bl	8007b96 <LL_USART_Enable>

}
 8007d26:	bf00      	nop
 8007d28:	3738      	adds	r7, #56	; 0x38
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	40020800 	.word	0x40020800
 8007d34:	40004c00 	.word	0x40004c00

08007d38 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b08e      	sub	sp, #56	; 0x38
 8007d3c:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8007d3e:	f107 031c 	add.w	r3, r7, #28
 8007d42:	2200      	movs	r2, #0
 8007d44:	601a      	str	r2, [r3, #0]
 8007d46:	605a      	str	r2, [r3, #4]
 8007d48:	609a      	str	r2, [r3, #8]
 8007d4a:	60da      	str	r2, [r3, #12]
 8007d4c:	611a      	str	r2, [r3, #16]
 8007d4e:	615a      	str	r2, [r3, #20]
 8007d50:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d52:	1d3b      	adds	r3, r7, #4
 8007d54:	2200      	movs	r2, #0
 8007d56:	601a      	str	r2, [r3, #0]
 8007d58:	605a      	str	r2, [r3, #4]
 8007d5a:	609a      	str	r2, [r3, #8]
 8007d5c:	60da      	str	r2, [r3, #12]
 8007d5e:	611a      	str	r2, [r3, #16]
 8007d60:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 8007d62:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007d66:	f7ff ff55 	bl	8007c14 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8007d6a:	2004      	movs	r0, #4
 8007d6c:	f7ff ff3a 	bl	8007be4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8007d70:	2008      	movs	r0, #8
 8007d72:	f7ff ff37 	bl	8007be4 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration  
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8007d76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d7a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007d7c:	2302      	movs	r3, #2
 8007d7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007d80:	2303      	movs	r3, #3
 8007d82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007d84:	2300      	movs	r3, #0
 8007d86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8007d8c:	2308      	movs	r3, #8
 8007d8e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d90:	1d3b      	adds	r3, r7, #4
 8007d92:	4619      	mov	r1, r3
 8007d94:	4821      	ldr	r0, [pc, #132]	; (8007e1c <MX_UART5_Init+0xe4>)
 8007d96:	f7fc fa2b 	bl	80041f0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8007d9a:	2304      	movs	r3, #4
 8007d9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007d9e:	2302      	movs	r3, #2
 8007da0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007da2:	2303      	movs	r3, #3
 8007da4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007da6:	2300      	movs	r3, #0
 8007da8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8007daa:	2301      	movs	r3, #1
 8007dac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8007dae:	2308      	movs	r3, #8
 8007db0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007db2:	1d3b      	adds	r3, r7, #4
 8007db4:	4619      	mov	r1, r3
 8007db6:	481a      	ldr	r0, [pc, #104]	; (8007e20 <MX_UART5_Init+0xe8>)
 8007db8:	f7fc fa1a 	bl	80041f0 <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007dbc:	f7ff fe62 	bl	8007a84 <__NVIC_GetPriorityGrouping>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	2100      	movs	r1, #0
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7ff feb2 	bl	8007b30 <NVIC_EncodePriority>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	4619      	mov	r1, r3
 8007dd0:	2035      	movs	r0, #53	; 0x35
 8007dd2:	f7ff fe83 	bl	8007adc <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 8007dd6:	2035      	movs	r0, #53	; 0x35
 8007dd8:	f7ff fe62 	bl	8007aa0 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8007ddc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8007de0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8007de2:	2300      	movs	r3, #0
 8007de4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8007de6:	2300      	movs	r3, #0
 8007de8:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8007dea:	2300      	movs	r3, #0
 8007dec:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 8007dee:	2304      	movs	r3, #4
 8007df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8007df2:	2300      	movs	r3, #0
 8007df4:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8007df6:	2300      	movs	r3, #0
 8007df8:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 8007dfa:	f107 031c 	add.w	r3, r7, #28
 8007dfe:	4619      	mov	r1, r3
 8007e00:	4808      	ldr	r0, [pc, #32]	; (8007e24 <MX_UART5_Init+0xec>)
 8007e02:	f7fd f971 	bl	80050e8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 8007e06:	4807      	ldr	r0, [pc, #28]	; (8007e24 <MX_UART5_Init+0xec>)
 8007e08:	f7ff fed5 	bl	8007bb6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 8007e0c:	4805      	ldr	r0, [pc, #20]	; (8007e24 <MX_UART5_Init+0xec>)
 8007e0e:	f7ff fec2 	bl	8007b96 <LL_USART_Enable>

}
 8007e12:	bf00      	nop
 8007e14:	3738      	adds	r7, #56	; 0x38
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	40020800 	.word	0x40020800
 8007e20:	40020c00 	.word	0x40020c00
 8007e24:	40005000 	.word	0x40005000

08007e28 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8007e2c:	4b11      	ldr	r3, [pc, #68]	; (8007e74 <MX_USART1_UART_Init+0x4c>)
 8007e2e:	4a12      	ldr	r2, [pc, #72]	; (8007e78 <MX_USART1_UART_Init+0x50>)
 8007e30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007e32:	4b10      	ldr	r3, [pc, #64]	; (8007e74 <MX_USART1_UART_Init+0x4c>)
 8007e34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007e38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007e3a:	4b0e      	ldr	r3, [pc, #56]	; (8007e74 <MX_USART1_UART_Init+0x4c>)
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007e40:	4b0c      	ldr	r3, [pc, #48]	; (8007e74 <MX_USART1_UART_Init+0x4c>)
 8007e42:	2200      	movs	r2, #0
 8007e44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007e46:	4b0b      	ldr	r3, [pc, #44]	; (8007e74 <MX_USART1_UART_Init+0x4c>)
 8007e48:	2200      	movs	r2, #0
 8007e4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007e4c:	4b09      	ldr	r3, [pc, #36]	; (8007e74 <MX_USART1_UART_Init+0x4c>)
 8007e4e:	220c      	movs	r2, #12
 8007e50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007e52:	4b08      	ldr	r3, [pc, #32]	; (8007e74 <MX_USART1_UART_Init+0x4c>)
 8007e54:	2200      	movs	r2, #0
 8007e56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007e58:	4b06      	ldr	r3, [pc, #24]	; (8007e74 <MX_USART1_UART_Init+0x4c>)
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007e5e:	4805      	ldr	r0, [pc, #20]	; (8007e74 <MX_USART1_UART_Init+0x4c>)
 8007e60:	f7fb f8c0 	bl	8002fe4 <HAL_UART_Init>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d001      	beq.n	8007e6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007e6a:	f7ff f81d 	bl	8006ea8 <Error_Handler>
  }

}
 8007e6e:	bf00      	nop
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	20000404 	.word	0x20000404
 8007e78:	40011000 	.word	0x40011000

08007e7c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b08e      	sub	sp, #56	; 0x38
 8007e80:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8007e82:	f107 031c 	add.w	r3, r7, #28
 8007e86:	2200      	movs	r2, #0
 8007e88:	601a      	str	r2, [r3, #0]
 8007e8a:	605a      	str	r2, [r3, #4]
 8007e8c:	609a      	str	r2, [r3, #8]
 8007e8e:	60da      	str	r2, [r3, #12]
 8007e90:	611a      	str	r2, [r3, #16]
 8007e92:	615a      	str	r2, [r3, #20]
 8007e94:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e96:	1d3b      	adds	r3, r7, #4
 8007e98:	2200      	movs	r2, #0
 8007e9a:	601a      	str	r2, [r3, #0]
 8007e9c:	605a      	str	r2, [r3, #4]
 8007e9e:	609a      	str	r2, [r3, #8]
 8007ea0:	60da      	str	r2, [r3, #12]
 8007ea2:	611a      	str	r2, [r3, #16]
 8007ea4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8007ea6:	2020      	movs	r0, #32
 8007ea8:	f7ff fecc 	bl	8007c44 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8007eac:	2004      	movs	r0, #4
 8007eae:	f7ff fe99 	bl	8007be4 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration  
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8007eb2:	23c0      	movs	r3, #192	; 0xc0
 8007eb4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007eb6:	2302      	movs	r3, #2
 8007eb8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8007ec6:	2308      	movs	r3, #8
 8007ec8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007eca:	1d3b      	adds	r3, r7, #4
 8007ecc:	4619      	mov	r1, r3
 8007ece:	4819      	ldr	r0, [pc, #100]	; (8007f34 <MX_USART6_UART_Init+0xb8>)
 8007ed0:	f7fc f98e 	bl	80041f0 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007ed4:	f7ff fdd6 	bl	8007a84 <__NVIC_GetPriorityGrouping>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2200      	movs	r2, #0
 8007edc:	2100      	movs	r1, #0
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7ff fe26 	bl	8007b30 <NVIC_EncodePriority>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	2047      	movs	r0, #71	; 0x47
 8007eea:	f7ff fdf7 	bl	8007adc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8007eee:	2047      	movs	r0, #71	; 0x47
 8007ef0:	f7ff fdd6 	bl	8007aa0 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8007ef4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8007ef8:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8007efa:	2300      	movs	r3, #0
 8007efc:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8007efe:	2300      	movs	r3, #0
 8007f00:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8007f02:	2300      	movs	r3, #0
 8007f04:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8007f06:	230c      	movs	r3, #12
 8007f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8007f12:	f107 031c 	add.w	r3, r7, #28
 8007f16:	4619      	mov	r1, r3
 8007f18:	4807      	ldr	r0, [pc, #28]	; (8007f38 <MX_USART6_UART_Init+0xbc>)
 8007f1a:	f7fd f8e5 	bl	80050e8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8007f1e:	4806      	ldr	r0, [pc, #24]	; (8007f38 <MX_USART6_UART_Init+0xbc>)
 8007f20:	f7ff fe49 	bl	8007bb6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8007f24:	4804      	ldr	r0, [pc, #16]	; (8007f38 <MX_USART6_UART_Init+0xbc>)
 8007f26:	f7ff fe36 	bl	8007b96 <LL_USART_Enable>

}
 8007f2a:	bf00      	nop
 8007f2c:	3738      	adds	r7, #56	; 0x38
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	40020800 	.word	0x40020800
 8007f38:	40011400 	.word	0x40011400

08007f3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b08a      	sub	sp, #40	; 0x28
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f44:	f107 0314 	add.w	r3, r7, #20
 8007f48:	2200      	movs	r2, #0
 8007f4a:	601a      	str	r2, [r3, #0]
 8007f4c:	605a      	str	r2, [r3, #4]
 8007f4e:	609a      	str	r2, [r3, #8]
 8007f50:	60da      	str	r2, [r3, #12]
 8007f52:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a1d      	ldr	r2, [pc, #116]	; (8007fd0 <HAL_UART_MspInit+0x94>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d134      	bne.n	8007fc8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007f5e:	2300      	movs	r3, #0
 8007f60:	613b      	str	r3, [r7, #16]
 8007f62:	4b1c      	ldr	r3, [pc, #112]	; (8007fd4 <HAL_UART_MspInit+0x98>)
 8007f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f66:	4a1b      	ldr	r2, [pc, #108]	; (8007fd4 <HAL_UART_MspInit+0x98>)
 8007f68:	f043 0310 	orr.w	r3, r3, #16
 8007f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8007f6e:	4b19      	ldr	r3, [pc, #100]	; (8007fd4 <HAL_UART_MspInit+0x98>)
 8007f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f72:	f003 0310 	and.w	r3, r3, #16
 8007f76:	613b      	str	r3, [r7, #16]
 8007f78:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	60fb      	str	r3, [r7, #12]
 8007f7e:	4b15      	ldr	r3, [pc, #84]	; (8007fd4 <HAL_UART_MspInit+0x98>)
 8007f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f82:	4a14      	ldr	r2, [pc, #80]	; (8007fd4 <HAL_UART_MspInit+0x98>)
 8007f84:	f043 0301 	orr.w	r3, r3, #1
 8007f88:	6313      	str	r3, [r2, #48]	; 0x30
 8007f8a:	4b12      	ldr	r3, [pc, #72]	; (8007fd4 <HAL_UART_MspInit+0x98>)
 8007f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f8e:	f003 0301 	and.w	r3, r3, #1
 8007f92:	60fb      	str	r3, [r7, #12]
 8007f94:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007f96:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f9c:	2302      	movs	r3, #2
 8007f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007fa4:	2303      	movs	r3, #3
 8007fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007fa8:	2307      	movs	r3, #7
 8007faa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007fac:	f107 0314 	add.w	r3, r7, #20
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	4809      	ldr	r0, [pc, #36]	; (8007fd8 <HAL_UART_MspInit+0x9c>)
 8007fb4:	f7fa f8a8 	bl	8002108 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007fb8:	2200      	movs	r2, #0
 8007fba:	2100      	movs	r1, #0
 8007fbc:	2025      	movs	r0, #37	; 0x25
 8007fbe:	f7f9 fcda 	bl	8001976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007fc2:	2025      	movs	r0, #37	; 0x25
 8007fc4:	f7f9 fcf3 	bl	80019ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8007fc8:	bf00      	nop
 8007fca:	3728      	adds	r7, #40	; 0x28
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	40011000 	.word	0x40011000
 8007fd4:	40023800 	.word	0x40023800
 8007fd8:	40020000 	.word	0x40020000

08007fdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007fdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008014 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007fe0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007fe2:	e003      	b.n	8007fec <LoopCopyDataInit>

08007fe4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007fe4:	4b0c      	ldr	r3, [pc, #48]	; (8008018 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007fe6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007fe8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007fea:	3104      	adds	r1, #4

08007fec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007fec:	480b      	ldr	r0, [pc, #44]	; (800801c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007fee:	4b0c      	ldr	r3, [pc, #48]	; (8008020 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007ff0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007ff2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007ff4:	d3f6      	bcc.n	8007fe4 <CopyDataInit>
  ldr  r2, =_sbss
 8007ff6:	4a0b      	ldr	r2, [pc, #44]	; (8008024 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007ff8:	e002      	b.n	8008000 <LoopFillZerobss>

08007ffa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007ffa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007ffc:	f842 3b04 	str.w	r3, [r2], #4

08008000 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008000:	4b09      	ldr	r3, [pc, #36]	; (8008028 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008002:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008004:	d3f9      	bcc.n	8007ffa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008006:	f7ff faeb 	bl	80075e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800800a:	f000 f817 	bl	800803c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800800e:	f7fe fd5d 	bl	8006acc <main>
  bx  lr    
 8008012:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008014:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008018:	0800b334 	.word	0x0800b334
  ldr  r0, =_sdata
 800801c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008020:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8008024:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8008028:	20000454 	.word	0x20000454

0800802c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800802c:	e7fe      	b.n	800802c <ADC_IRQHandler>
	...

08008030 <__errno>:
 8008030:	4b01      	ldr	r3, [pc, #4]	; (8008038 <__errno+0x8>)
 8008032:	6818      	ldr	r0, [r3, #0]
 8008034:	4770      	bx	lr
 8008036:	bf00      	nop
 8008038:	2000000c 	.word	0x2000000c

0800803c <__libc_init_array>:
 800803c:	b570      	push	{r4, r5, r6, lr}
 800803e:	4d0d      	ldr	r5, [pc, #52]	; (8008074 <__libc_init_array+0x38>)
 8008040:	4c0d      	ldr	r4, [pc, #52]	; (8008078 <__libc_init_array+0x3c>)
 8008042:	1b64      	subs	r4, r4, r5
 8008044:	10a4      	asrs	r4, r4, #2
 8008046:	2600      	movs	r6, #0
 8008048:	42a6      	cmp	r6, r4
 800804a:	d109      	bne.n	8008060 <__libc_init_array+0x24>
 800804c:	4d0b      	ldr	r5, [pc, #44]	; (800807c <__libc_init_array+0x40>)
 800804e:	4c0c      	ldr	r4, [pc, #48]	; (8008080 <__libc_init_array+0x44>)
 8008050:	f002 fdc4 	bl	800abdc <_init>
 8008054:	1b64      	subs	r4, r4, r5
 8008056:	10a4      	asrs	r4, r4, #2
 8008058:	2600      	movs	r6, #0
 800805a:	42a6      	cmp	r6, r4
 800805c:	d105      	bne.n	800806a <__libc_init_array+0x2e>
 800805e:	bd70      	pop	{r4, r5, r6, pc}
 8008060:	f855 3b04 	ldr.w	r3, [r5], #4
 8008064:	4798      	blx	r3
 8008066:	3601      	adds	r6, #1
 8008068:	e7ee      	b.n	8008048 <__libc_init_array+0xc>
 800806a:	f855 3b04 	ldr.w	r3, [r5], #4
 800806e:	4798      	blx	r3
 8008070:	3601      	adds	r6, #1
 8008072:	e7f2      	b.n	800805a <__libc_init_array+0x1e>
 8008074:	0800b32c 	.word	0x0800b32c
 8008078:	0800b32c 	.word	0x0800b32c
 800807c:	0800b32c 	.word	0x0800b32c
 8008080:	0800b330 	.word	0x0800b330

08008084 <memset>:
 8008084:	4402      	add	r2, r0
 8008086:	4603      	mov	r3, r0
 8008088:	4293      	cmp	r3, r2
 800808a:	d100      	bne.n	800808e <memset+0xa>
 800808c:	4770      	bx	lr
 800808e:	f803 1b01 	strb.w	r1, [r3], #1
 8008092:	e7f9      	b.n	8008088 <memset+0x4>

08008094 <__cvt>:
 8008094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008098:	ec55 4b10 	vmov	r4, r5, d0
 800809c:	2d00      	cmp	r5, #0
 800809e:	460e      	mov	r6, r1
 80080a0:	4619      	mov	r1, r3
 80080a2:	462b      	mov	r3, r5
 80080a4:	bfbb      	ittet	lt
 80080a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80080aa:	461d      	movlt	r5, r3
 80080ac:	2300      	movge	r3, #0
 80080ae:	232d      	movlt	r3, #45	; 0x2d
 80080b0:	700b      	strb	r3, [r1, #0]
 80080b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80080b8:	4691      	mov	r9, r2
 80080ba:	f023 0820 	bic.w	r8, r3, #32
 80080be:	bfbc      	itt	lt
 80080c0:	4622      	movlt	r2, r4
 80080c2:	4614      	movlt	r4, r2
 80080c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080c8:	d005      	beq.n	80080d6 <__cvt+0x42>
 80080ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80080ce:	d100      	bne.n	80080d2 <__cvt+0x3e>
 80080d0:	3601      	adds	r6, #1
 80080d2:	2102      	movs	r1, #2
 80080d4:	e000      	b.n	80080d8 <__cvt+0x44>
 80080d6:	2103      	movs	r1, #3
 80080d8:	ab03      	add	r3, sp, #12
 80080da:	9301      	str	r3, [sp, #4]
 80080dc:	ab02      	add	r3, sp, #8
 80080de:	9300      	str	r3, [sp, #0]
 80080e0:	ec45 4b10 	vmov	d0, r4, r5
 80080e4:	4653      	mov	r3, sl
 80080e6:	4632      	mov	r2, r6
 80080e8:	f000 fe1a 	bl	8008d20 <_dtoa_r>
 80080ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80080f0:	4607      	mov	r7, r0
 80080f2:	d102      	bne.n	80080fa <__cvt+0x66>
 80080f4:	f019 0f01 	tst.w	r9, #1
 80080f8:	d022      	beq.n	8008140 <__cvt+0xac>
 80080fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080fe:	eb07 0906 	add.w	r9, r7, r6
 8008102:	d110      	bne.n	8008126 <__cvt+0x92>
 8008104:	783b      	ldrb	r3, [r7, #0]
 8008106:	2b30      	cmp	r3, #48	; 0x30
 8008108:	d10a      	bne.n	8008120 <__cvt+0x8c>
 800810a:	2200      	movs	r2, #0
 800810c:	2300      	movs	r3, #0
 800810e:	4620      	mov	r0, r4
 8008110:	4629      	mov	r1, r5
 8008112:	f7f8 fcd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008116:	b918      	cbnz	r0, 8008120 <__cvt+0x8c>
 8008118:	f1c6 0601 	rsb	r6, r6, #1
 800811c:	f8ca 6000 	str.w	r6, [sl]
 8008120:	f8da 3000 	ldr.w	r3, [sl]
 8008124:	4499      	add	r9, r3
 8008126:	2200      	movs	r2, #0
 8008128:	2300      	movs	r3, #0
 800812a:	4620      	mov	r0, r4
 800812c:	4629      	mov	r1, r5
 800812e:	f7f8 fccb 	bl	8000ac8 <__aeabi_dcmpeq>
 8008132:	b108      	cbz	r0, 8008138 <__cvt+0xa4>
 8008134:	f8cd 900c 	str.w	r9, [sp, #12]
 8008138:	2230      	movs	r2, #48	; 0x30
 800813a:	9b03      	ldr	r3, [sp, #12]
 800813c:	454b      	cmp	r3, r9
 800813e:	d307      	bcc.n	8008150 <__cvt+0xbc>
 8008140:	9b03      	ldr	r3, [sp, #12]
 8008142:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008144:	1bdb      	subs	r3, r3, r7
 8008146:	4638      	mov	r0, r7
 8008148:	6013      	str	r3, [r2, #0]
 800814a:	b004      	add	sp, #16
 800814c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008150:	1c59      	adds	r1, r3, #1
 8008152:	9103      	str	r1, [sp, #12]
 8008154:	701a      	strb	r2, [r3, #0]
 8008156:	e7f0      	b.n	800813a <__cvt+0xa6>

08008158 <__exponent>:
 8008158:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800815a:	4603      	mov	r3, r0
 800815c:	2900      	cmp	r1, #0
 800815e:	bfb8      	it	lt
 8008160:	4249      	neglt	r1, r1
 8008162:	f803 2b02 	strb.w	r2, [r3], #2
 8008166:	bfb4      	ite	lt
 8008168:	222d      	movlt	r2, #45	; 0x2d
 800816a:	222b      	movge	r2, #43	; 0x2b
 800816c:	2909      	cmp	r1, #9
 800816e:	7042      	strb	r2, [r0, #1]
 8008170:	dd2a      	ble.n	80081c8 <__exponent+0x70>
 8008172:	f10d 0407 	add.w	r4, sp, #7
 8008176:	46a4      	mov	ip, r4
 8008178:	270a      	movs	r7, #10
 800817a:	46a6      	mov	lr, r4
 800817c:	460a      	mov	r2, r1
 800817e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008182:	fb07 1516 	mls	r5, r7, r6, r1
 8008186:	3530      	adds	r5, #48	; 0x30
 8008188:	2a63      	cmp	r2, #99	; 0x63
 800818a:	f104 34ff 	add.w	r4, r4, #4294967295
 800818e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008192:	4631      	mov	r1, r6
 8008194:	dcf1      	bgt.n	800817a <__exponent+0x22>
 8008196:	3130      	adds	r1, #48	; 0x30
 8008198:	f1ae 0502 	sub.w	r5, lr, #2
 800819c:	f804 1c01 	strb.w	r1, [r4, #-1]
 80081a0:	1c44      	adds	r4, r0, #1
 80081a2:	4629      	mov	r1, r5
 80081a4:	4561      	cmp	r1, ip
 80081a6:	d30a      	bcc.n	80081be <__exponent+0x66>
 80081a8:	f10d 0209 	add.w	r2, sp, #9
 80081ac:	eba2 020e 	sub.w	r2, r2, lr
 80081b0:	4565      	cmp	r5, ip
 80081b2:	bf88      	it	hi
 80081b4:	2200      	movhi	r2, #0
 80081b6:	4413      	add	r3, r2
 80081b8:	1a18      	subs	r0, r3, r0
 80081ba:	b003      	add	sp, #12
 80081bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80081c6:	e7ed      	b.n	80081a4 <__exponent+0x4c>
 80081c8:	2330      	movs	r3, #48	; 0x30
 80081ca:	3130      	adds	r1, #48	; 0x30
 80081cc:	7083      	strb	r3, [r0, #2]
 80081ce:	70c1      	strb	r1, [r0, #3]
 80081d0:	1d03      	adds	r3, r0, #4
 80081d2:	e7f1      	b.n	80081b8 <__exponent+0x60>

080081d4 <_printf_float>:
 80081d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d8:	ed2d 8b02 	vpush	{d8}
 80081dc:	b08d      	sub	sp, #52	; 0x34
 80081de:	460c      	mov	r4, r1
 80081e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80081e4:	4616      	mov	r6, r2
 80081e6:	461f      	mov	r7, r3
 80081e8:	4605      	mov	r5, r0
 80081ea:	f001 fd3f 	bl	8009c6c <_localeconv_r>
 80081ee:	f8d0 a000 	ldr.w	sl, [r0]
 80081f2:	4650      	mov	r0, sl
 80081f4:	f7f7 ffec 	bl	80001d0 <strlen>
 80081f8:	2300      	movs	r3, #0
 80081fa:	930a      	str	r3, [sp, #40]	; 0x28
 80081fc:	6823      	ldr	r3, [r4, #0]
 80081fe:	9305      	str	r3, [sp, #20]
 8008200:	f8d8 3000 	ldr.w	r3, [r8]
 8008204:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008208:	3307      	adds	r3, #7
 800820a:	f023 0307 	bic.w	r3, r3, #7
 800820e:	f103 0208 	add.w	r2, r3, #8
 8008212:	f8c8 2000 	str.w	r2, [r8]
 8008216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800821e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008222:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008226:	9307      	str	r3, [sp, #28]
 8008228:	f8cd 8018 	str.w	r8, [sp, #24]
 800822c:	ee08 0a10 	vmov	s16, r0
 8008230:	4b9f      	ldr	r3, [pc, #636]	; (80084b0 <_printf_float+0x2dc>)
 8008232:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008236:	f04f 32ff 	mov.w	r2, #4294967295
 800823a:	f7f8 fc77 	bl	8000b2c <__aeabi_dcmpun>
 800823e:	bb88      	cbnz	r0, 80082a4 <_printf_float+0xd0>
 8008240:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008244:	4b9a      	ldr	r3, [pc, #616]	; (80084b0 <_printf_float+0x2dc>)
 8008246:	f04f 32ff 	mov.w	r2, #4294967295
 800824a:	f7f8 fc51 	bl	8000af0 <__aeabi_dcmple>
 800824e:	bb48      	cbnz	r0, 80082a4 <_printf_float+0xd0>
 8008250:	2200      	movs	r2, #0
 8008252:	2300      	movs	r3, #0
 8008254:	4640      	mov	r0, r8
 8008256:	4649      	mov	r1, r9
 8008258:	f7f8 fc40 	bl	8000adc <__aeabi_dcmplt>
 800825c:	b110      	cbz	r0, 8008264 <_printf_float+0x90>
 800825e:	232d      	movs	r3, #45	; 0x2d
 8008260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008264:	4b93      	ldr	r3, [pc, #588]	; (80084b4 <_printf_float+0x2e0>)
 8008266:	4894      	ldr	r0, [pc, #592]	; (80084b8 <_printf_float+0x2e4>)
 8008268:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800826c:	bf94      	ite	ls
 800826e:	4698      	movls	r8, r3
 8008270:	4680      	movhi	r8, r0
 8008272:	2303      	movs	r3, #3
 8008274:	6123      	str	r3, [r4, #16]
 8008276:	9b05      	ldr	r3, [sp, #20]
 8008278:	f023 0204 	bic.w	r2, r3, #4
 800827c:	6022      	str	r2, [r4, #0]
 800827e:	f04f 0900 	mov.w	r9, #0
 8008282:	9700      	str	r7, [sp, #0]
 8008284:	4633      	mov	r3, r6
 8008286:	aa0b      	add	r2, sp, #44	; 0x2c
 8008288:	4621      	mov	r1, r4
 800828a:	4628      	mov	r0, r5
 800828c:	f000 f9d8 	bl	8008640 <_printf_common>
 8008290:	3001      	adds	r0, #1
 8008292:	f040 8090 	bne.w	80083b6 <_printf_float+0x1e2>
 8008296:	f04f 30ff 	mov.w	r0, #4294967295
 800829a:	b00d      	add	sp, #52	; 0x34
 800829c:	ecbd 8b02 	vpop	{d8}
 80082a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082a4:	4642      	mov	r2, r8
 80082a6:	464b      	mov	r3, r9
 80082a8:	4640      	mov	r0, r8
 80082aa:	4649      	mov	r1, r9
 80082ac:	f7f8 fc3e 	bl	8000b2c <__aeabi_dcmpun>
 80082b0:	b140      	cbz	r0, 80082c4 <_printf_float+0xf0>
 80082b2:	464b      	mov	r3, r9
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	bfbc      	itt	lt
 80082b8:	232d      	movlt	r3, #45	; 0x2d
 80082ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80082be:	487f      	ldr	r0, [pc, #508]	; (80084bc <_printf_float+0x2e8>)
 80082c0:	4b7f      	ldr	r3, [pc, #508]	; (80084c0 <_printf_float+0x2ec>)
 80082c2:	e7d1      	b.n	8008268 <_printf_float+0x94>
 80082c4:	6863      	ldr	r3, [r4, #4]
 80082c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80082ca:	9206      	str	r2, [sp, #24]
 80082cc:	1c5a      	adds	r2, r3, #1
 80082ce:	d13f      	bne.n	8008350 <_printf_float+0x17c>
 80082d0:	2306      	movs	r3, #6
 80082d2:	6063      	str	r3, [r4, #4]
 80082d4:	9b05      	ldr	r3, [sp, #20]
 80082d6:	6861      	ldr	r1, [r4, #4]
 80082d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80082dc:	2300      	movs	r3, #0
 80082de:	9303      	str	r3, [sp, #12]
 80082e0:	ab0a      	add	r3, sp, #40	; 0x28
 80082e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80082e6:	ab09      	add	r3, sp, #36	; 0x24
 80082e8:	ec49 8b10 	vmov	d0, r8, r9
 80082ec:	9300      	str	r3, [sp, #0]
 80082ee:	6022      	str	r2, [r4, #0]
 80082f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80082f4:	4628      	mov	r0, r5
 80082f6:	f7ff fecd 	bl	8008094 <__cvt>
 80082fa:	9b06      	ldr	r3, [sp, #24]
 80082fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082fe:	2b47      	cmp	r3, #71	; 0x47
 8008300:	4680      	mov	r8, r0
 8008302:	d108      	bne.n	8008316 <_printf_float+0x142>
 8008304:	1cc8      	adds	r0, r1, #3
 8008306:	db02      	blt.n	800830e <_printf_float+0x13a>
 8008308:	6863      	ldr	r3, [r4, #4]
 800830a:	4299      	cmp	r1, r3
 800830c:	dd41      	ble.n	8008392 <_printf_float+0x1be>
 800830e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008312:	fa5f fb8b 	uxtb.w	fp, fp
 8008316:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800831a:	d820      	bhi.n	800835e <_printf_float+0x18a>
 800831c:	3901      	subs	r1, #1
 800831e:	465a      	mov	r2, fp
 8008320:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008324:	9109      	str	r1, [sp, #36]	; 0x24
 8008326:	f7ff ff17 	bl	8008158 <__exponent>
 800832a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800832c:	1813      	adds	r3, r2, r0
 800832e:	2a01      	cmp	r2, #1
 8008330:	4681      	mov	r9, r0
 8008332:	6123      	str	r3, [r4, #16]
 8008334:	dc02      	bgt.n	800833c <_printf_float+0x168>
 8008336:	6822      	ldr	r2, [r4, #0]
 8008338:	07d2      	lsls	r2, r2, #31
 800833a:	d501      	bpl.n	8008340 <_printf_float+0x16c>
 800833c:	3301      	adds	r3, #1
 800833e:	6123      	str	r3, [r4, #16]
 8008340:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008344:	2b00      	cmp	r3, #0
 8008346:	d09c      	beq.n	8008282 <_printf_float+0xae>
 8008348:	232d      	movs	r3, #45	; 0x2d
 800834a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800834e:	e798      	b.n	8008282 <_printf_float+0xae>
 8008350:	9a06      	ldr	r2, [sp, #24]
 8008352:	2a47      	cmp	r2, #71	; 0x47
 8008354:	d1be      	bne.n	80082d4 <_printf_float+0x100>
 8008356:	2b00      	cmp	r3, #0
 8008358:	d1bc      	bne.n	80082d4 <_printf_float+0x100>
 800835a:	2301      	movs	r3, #1
 800835c:	e7b9      	b.n	80082d2 <_printf_float+0xfe>
 800835e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008362:	d118      	bne.n	8008396 <_printf_float+0x1c2>
 8008364:	2900      	cmp	r1, #0
 8008366:	6863      	ldr	r3, [r4, #4]
 8008368:	dd0b      	ble.n	8008382 <_printf_float+0x1ae>
 800836a:	6121      	str	r1, [r4, #16]
 800836c:	b913      	cbnz	r3, 8008374 <_printf_float+0x1a0>
 800836e:	6822      	ldr	r2, [r4, #0]
 8008370:	07d0      	lsls	r0, r2, #31
 8008372:	d502      	bpl.n	800837a <_printf_float+0x1a6>
 8008374:	3301      	adds	r3, #1
 8008376:	440b      	add	r3, r1
 8008378:	6123      	str	r3, [r4, #16]
 800837a:	65a1      	str	r1, [r4, #88]	; 0x58
 800837c:	f04f 0900 	mov.w	r9, #0
 8008380:	e7de      	b.n	8008340 <_printf_float+0x16c>
 8008382:	b913      	cbnz	r3, 800838a <_printf_float+0x1b6>
 8008384:	6822      	ldr	r2, [r4, #0]
 8008386:	07d2      	lsls	r2, r2, #31
 8008388:	d501      	bpl.n	800838e <_printf_float+0x1ba>
 800838a:	3302      	adds	r3, #2
 800838c:	e7f4      	b.n	8008378 <_printf_float+0x1a4>
 800838e:	2301      	movs	r3, #1
 8008390:	e7f2      	b.n	8008378 <_printf_float+0x1a4>
 8008392:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008398:	4299      	cmp	r1, r3
 800839a:	db05      	blt.n	80083a8 <_printf_float+0x1d4>
 800839c:	6823      	ldr	r3, [r4, #0]
 800839e:	6121      	str	r1, [r4, #16]
 80083a0:	07d8      	lsls	r0, r3, #31
 80083a2:	d5ea      	bpl.n	800837a <_printf_float+0x1a6>
 80083a4:	1c4b      	adds	r3, r1, #1
 80083a6:	e7e7      	b.n	8008378 <_printf_float+0x1a4>
 80083a8:	2900      	cmp	r1, #0
 80083aa:	bfd4      	ite	le
 80083ac:	f1c1 0202 	rsble	r2, r1, #2
 80083b0:	2201      	movgt	r2, #1
 80083b2:	4413      	add	r3, r2
 80083b4:	e7e0      	b.n	8008378 <_printf_float+0x1a4>
 80083b6:	6823      	ldr	r3, [r4, #0]
 80083b8:	055a      	lsls	r2, r3, #21
 80083ba:	d407      	bmi.n	80083cc <_printf_float+0x1f8>
 80083bc:	6923      	ldr	r3, [r4, #16]
 80083be:	4642      	mov	r2, r8
 80083c0:	4631      	mov	r1, r6
 80083c2:	4628      	mov	r0, r5
 80083c4:	47b8      	blx	r7
 80083c6:	3001      	adds	r0, #1
 80083c8:	d12c      	bne.n	8008424 <_printf_float+0x250>
 80083ca:	e764      	b.n	8008296 <_printf_float+0xc2>
 80083cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80083d0:	f240 80e0 	bls.w	8008594 <_printf_float+0x3c0>
 80083d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80083d8:	2200      	movs	r2, #0
 80083da:	2300      	movs	r3, #0
 80083dc:	f7f8 fb74 	bl	8000ac8 <__aeabi_dcmpeq>
 80083e0:	2800      	cmp	r0, #0
 80083e2:	d034      	beq.n	800844e <_printf_float+0x27a>
 80083e4:	4a37      	ldr	r2, [pc, #220]	; (80084c4 <_printf_float+0x2f0>)
 80083e6:	2301      	movs	r3, #1
 80083e8:	4631      	mov	r1, r6
 80083ea:	4628      	mov	r0, r5
 80083ec:	47b8      	blx	r7
 80083ee:	3001      	adds	r0, #1
 80083f0:	f43f af51 	beq.w	8008296 <_printf_float+0xc2>
 80083f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083f8:	429a      	cmp	r2, r3
 80083fa:	db02      	blt.n	8008402 <_printf_float+0x22e>
 80083fc:	6823      	ldr	r3, [r4, #0]
 80083fe:	07d8      	lsls	r0, r3, #31
 8008400:	d510      	bpl.n	8008424 <_printf_float+0x250>
 8008402:	ee18 3a10 	vmov	r3, s16
 8008406:	4652      	mov	r2, sl
 8008408:	4631      	mov	r1, r6
 800840a:	4628      	mov	r0, r5
 800840c:	47b8      	blx	r7
 800840e:	3001      	adds	r0, #1
 8008410:	f43f af41 	beq.w	8008296 <_printf_float+0xc2>
 8008414:	f04f 0800 	mov.w	r8, #0
 8008418:	f104 091a 	add.w	r9, r4, #26
 800841c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800841e:	3b01      	subs	r3, #1
 8008420:	4543      	cmp	r3, r8
 8008422:	dc09      	bgt.n	8008438 <_printf_float+0x264>
 8008424:	6823      	ldr	r3, [r4, #0]
 8008426:	079b      	lsls	r3, r3, #30
 8008428:	f100 8105 	bmi.w	8008636 <_printf_float+0x462>
 800842c:	68e0      	ldr	r0, [r4, #12]
 800842e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008430:	4298      	cmp	r0, r3
 8008432:	bfb8      	it	lt
 8008434:	4618      	movlt	r0, r3
 8008436:	e730      	b.n	800829a <_printf_float+0xc6>
 8008438:	2301      	movs	r3, #1
 800843a:	464a      	mov	r2, r9
 800843c:	4631      	mov	r1, r6
 800843e:	4628      	mov	r0, r5
 8008440:	47b8      	blx	r7
 8008442:	3001      	adds	r0, #1
 8008444:	f43f af27 	beq.w	8008296 <_printf_float+0xc2>
 8008448:	f108 0801 	add.w	r8, r8, #1
 800844c:	e7e6      	b.n	800841c <_printf_float+0x248>
 800844e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008450:	2b00      	cmp	r3, #0
 8008452:	dc39      	bgt.n	80084c8 <_printf_float+0x2f4>
 8008454:	4a1b      	ldr	r2, [pc, #108]	; (80084c4 <_printf_float+0x2f0>)
 8008456:	2301      	movs	r3, #1
 8008458:	4631      	mov	r1, r6
 800845a:	4628      	mov	r0, r5
 800845c:	47b8      	blx	r7
 800845e:	3001      	adds	r0, #1
 8008460:	f43f af19 	beq.w	8008296 <_printf_float+0xc2>
 8008464:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008468:	4313      	orrs	r3, r2
 800846a:	d102      	bne.n	8008472 <_printf_float+0x29e>
 800846c:	6823      	ldr	r3, [r4, #0]
 800846e:	07d9      	lsls	r1, r3, #31
 8008470:	d5d8      	bpl.n	8008424 <_printf_float+0x250>
 8008472:	ee18 3a10 	vmov	r3, s16
 8008476:	4652      	mov	r2, sl
 8008478:	4631      	mov	r1, r6
 800847a:	4628      	mov	r0, r5
 800847c:	47b8      	blx	r7
 800847e:	3001      	adds	r0, #1
 8008480:	f43f af09 	beq.w	8008296 <_printf_float+0xc2>
 8008484:	f04f 0900 	mov.w	r9, #0
 8008488:	f104 0a1a 	add.w	sl, r4, #26
 800848c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800848e:	425b      	negs	r3, r3
 8008490:	454b      	cmp	r3, r9
 8008492:	dc01      	bgt.n	8008498 <_printf_float+0x2c4>
 8008494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008496:	e792      	b.n	80083be <_printf_float+0x1ea>
 8008498:	2301      	movs	r3, #1
 800849a:	4652      	mov	r2, sl
 800849c:	4631      	mov	r1, r6
 800849e:	4628      	mov	r0, r5
 80084a0:	47b8      	blx	r7
 80084a2:	3001      	adds	r0, #1
 80084a4:	f43f aef7 	beq.w	8008296 <_printf_float+0xc2>
 80084a8:	f109 0901 	add.w	r9, r9, #1
 80084ac:	e7ee      	b.n	800848c <_printf_float+0x2b8>
 80084ae:	bf00      	nop
 80084b0:	7fefffff 	.word	0x7fefffff
 80084b4:	0800af4c 	.word	0x0800af4c
 80084b8:	0800af50 	.word	0x0800af50
 80084bc:	0800af58 	.word	0x0800af58
 80084c0:	0800af54 	.word	0x0800af54
 80084c4:	0800af5c 	.word	0x0800af5c
 80084c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084cc:	429a      	cmp	r2, r3
 80084ce:	bfa8      	it	ge
 80084d0:	461a      	movge	r2, r3
 80084d2:	2a00      	cmp	r2, #0
 80084d4:	4691      	mov	r9, r2
 80084d6:	dc37      	bgt.n	8008548 <_printf_float+0x374>
 80084d8:	f04f 0b00 	mov.w	fp, #0
 80084dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084e0:	f104 021a 	add.w	r2, r4, #26
 80084e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084e6:	9305      	str	r3, [sp, #20]
 80084e8:	eba3 0309 	sub.w	r3, r3, r9
 80084ec:	455b      	cmp	r3, fp
 80084ee:	dc33      	bgt.n	8008558 <_printf_float+0x384>
 80084f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084f4:	429a      	cmp	r2, r3
 80084f6:	db3b      	blt.n	8008570 <_printf_float+0x39c>
 80084f8:	6823      	ldr	r3, [r4, #0]
 80084fa:	07da      	lsls	r2, r3, #31
 80084fc:	d438      	bmi.n	8008570 <_printf_float+0x39c>
 80084fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008500:	9a05      	ldr	r2, [sp, #20]
 8008502:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008504:	1a9a      	subs	r2, r3, r2
 8008506:	eba3 0901 	sub.w	r9, r3, r1
 800850a:	4591      	cmp	r9, r2
 800850c:	bfa8      	it	ge
 800850e:	4691      	movge	r9, r2
 8008510:	f1b9 0f00 	cmp.w	r9, #0
 8008514:	dc35      	bgt.n	8008582 <_printf_float+0x3ae>
 8008516:	f04f 0800 	mov.w	r8, #0
 800851a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800851e:	f104 0a1a 	add.w	sl, r4, #26
 8008522:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008526:	1a9b      	subs	r3, r3, r2
 8008528:	eba3 0309 	sub.w	r3, r3, r9
 800852c:	4543      	cmp	r3, r8
 800852e:	f77f af79 	ble.w	8008424 <_printf_float+0x250>
 8008532:	2301      	movs	r3, #1
 8008534:	4652      	mov	r2, sl
 8008536:	4631      	mov	r1, r6
 8008538:	4628      	mov	r0, r5
 800853a:	47b8      	blx	r7
 800853c:	3001      	adds	r0, #1
 800853e:	f43f aeaa 	beq.w	8008296 <_printf_float+0xc2>
 8008542:	f108 0801 	add.w	r8, r8, #1
 8008546:	e7ec      	b.n	8008522 <_printf_float+0x34e>
 8008548:	4613      	mov	r3, r2
 800854a:	4631      	mov	r1, r6
 800854c:	4642      	mov	r2, r8
 800854e:	4628      	mov	r0, r5
 8008550:	47b8      	blx	r7
 8008552:	3001      	adds	r0, #1
 8008554:	d1c0      	bne.n	80084d8 <_printf_float+0x304>
 8008556:	e69e      	b.n	8008296 <_printf_float+0xc2>
 8008558:	2301      	movs	r3, #1
 800855a:	4631      	mov	r1, r6
 800855c:	4628      	mov	r0, r5
 800855e:	9205      	str	r2, [sp, #20]
 8008560:	47b8      	blx	r7
 8008562:	3001      	adds	r0, #1
 8008564:	f43f ae97 	beq.w	8008296 <_printf_float+0xc2>
 8008568:	9a05      	ldr	r2, [sp, #20]
 800856a:	f10b 0b01 	add.w	fp, fp, #1
 800856e:	e7b9      	b.n	80084e4 <_printf_float+0x310>
 8008570:	ee18 3a10 	vmov	r3, s16
 8008574:	4652      	mov	r2, sl
 8008576:	4631      	mov	r1, r6
 8008578:	4628      	mov	r0, r5
 800857a:	47b8      	blx	r7
 800857c:	3001      	adds	r0, #1
 800857e:	d1be      	bne.n	80084fe <_printf_float+0x32a>
 8008580:	e689      	b.n	8008296 <_printf_float+0xc2>
 8008582:	9a05      	ldr	r2, [sp, #20]
 8008584:	464b      	mov	r3, r9
 8008586:	4442      	add	r2, r8
 8008588:	4631      	mov	r1, r6
 800858a:	4628      	mov	r0, r5
 800858c:	47b8      	blx	r7
 800858e:	3001      	adds	r0, #1
 8008590:	d1c1      	bne.n	8008516 <_printf_float+0x342>
 8008592:	e680      	b.n	8008296 <_printf_float+0xc2>
 8008594:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008596:	2a01      	cmp	r2, #1
 8008598:	dc01      	bgt.n	800859e <_printf_float+0x3ca>
 800859a:	07db      	lsls	r3, r3, #31
 800859c:	d538      	bpl.n	8008610 <_printf_float+0x43c>
 800859e:	2301      	movs	r3, #1
 80085a0:	4642      	mov	r2, r8
 80085a2:	4631      	mov	r1, r6
 80085a4:	4628      	mov	r0, r5
 80085a6:	47b8      	blx	r7
 80085a8:	3001      	adds	r0, #1
 80085aa:	f43f ae74 	beq.w	8008296 <_printf_float+0xc2>
 80085ae:	ee18 3a10 	vmov	r3, s16
 80085b2:	4652      	mov	r2, sl
 80085b4:	4631      	mov	r1, r6
 80085b6:	4628      	mov	r0, r5
 80085b8:	47b8      	blx	r7
 80085ba:	3001      	adds	r0, #1
 80085bc:	f43f ae6b 	beq.w	8008296 <_printf_float+0xc2>
 80085c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80085c4:	2200      	movs	r2, #0
 80085c6:	2300      	movs	r3, #0
 80085c8:	f7f8 fa7e 	bl	8000ac8 <__aeabi_dcmpeq>
 80085cc:	b9d8      	cbnz	r0, 8008606 <_printf_float+0x432>
 80085ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085d0:	f108 0201 	add.w	r2, r8, #1
 80085d4:	3b01      	subs	r3, #1
 80085d6:	4631      	mov	r1, r6
 80085d8:	4628      	mov	r0, r5
 80085da:	47b8      	blx	r7
 80085dc:	3001      	adds	r0, #1
 80085de:	d10e      	bne.n	80085fe <_printf_float+0x42a>
 80085e0:	e659      	b.n	8008296 <_printf_float+0xc2>
 80085e2:	2301      	movs	r3, #1
 80085e4:	4652      	mov	r2, sl
 80085e6:	4631      	mov	r1, r6
 80085e8:	4628      	mov	r0, r5
 80085ea:	47b8      	blx	r7
 80085ec:	3001      	adds	r0, #1
 80085ee:	f43f ae52 	beq.w	8008296 <_printf_float+0xc2>
 80085f2:	f108 0801 	add.w	r8, r8, #1
 80085f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085f8:	3b01      	subs	r3, #1
 80085fa:	4543      	cmp	r3, r8
 80085fc:	dcf1      	bgt.n	80085e2 <_printf_float+0x40e>
 80085fe:	464b      	mov	r3, r9
 8008600:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008604:	e6dc      	b.n	80083c0 <_printf_float+0x1ec>
 8008606:	f04f 0800 	mov.w	r8, #0
 800860a:	f104 0a1a 	add.w	sl, r4, #26
 800860e:	e7f2      	b.n	80085f6 <_printf_float+0x422>
 8008610:	2301      	movs	r3, #1
 8008612:	4642      	mov	r2, r8
 8008614:	e7df      	b.n	80085d6 <_printf_float+0x402>
 8008616:	2301      	movs	r3, #1
 8008618:	464a      	mov	r2, r9
 800861a:	4631      	mov	r1, r6
 800861c:	4628      	mov	r0, r5
 800861e:	47b8      	blx	r7
 8008620:	3001      	adds	r0, #1
 8008622:	f43f ae38 	beq.w	8008296 <_printf_float+0xc2>
 8008626:	f108 0801 	add.w	r8, r8, #1
 800862a:	68e3      	ldr	r3, [r4, #12]
 800862c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800862e:	1a5b      	subs	r3, r3, r1
 8008630:	4543      	cmp	r3, r8
 8008632:	dcf0      	bgt.n	8008616 <_printf_float+0x442>
 8008634:	e6fa      	b.n	800842c <_printf_float+0x258>
 8008636:	f04f 0800 	mov.w	r8, #0
 800863a:	f104 0919 	add.w	r9, r4, #25
 800863e:	e7f4      	b.n	800862a <_printf_float+0x456>

08008640 <_printf_common>:
 8008640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008644:	4616      	mov	r6, r2
 8008646:	4699      	mov	r9, r3
 8008648:	688a      	ldr	r2, [r1, #8]
 800864a:	690b      	ldr	r3, [r1, #16]
 800864c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008650:	4293      	cmp	r3, r2
 8008652:	bfb8      	it	lt
 8008654:	4613      	movlt	r3, r2
 8008656:	6033      	str	r3, [r6, #0]
 8008658:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800865c:	4607      	mov	r7, r0
 800865e:	460c      	mov	r4, r1
 8008660:	b10a      	cbz	r2, 8008666 <_printf_common+0x26>
 8008662:	3301      	adds	r3, #1
 8008664:	6033      	str	r3, [r6, #0]
 8008666:	6823      	ldr	r3, [r4, #0]
 8008668:	0699      	lsls	r1, r3, #26
 800866a:	bf42      	ittt	mi
 800866c:	6833      	ldrmi	r3, [r6, #0]
 800866e:	3302      	addmi	r3, #2
 8008670:	6033      	strmi	r3, [r6, #0]
 8008672:	6825      	ldr	r5, [r4, #0]
 8008674:	f015 0506 	ands.w	r5, r5, #6
 8008678:	d106      	bne.n	8008688 <_printf_common+0x48>
 800867a:	f104 0a19 	add.w	sl, r4, #25
 800867e:	68e3      	ldr	r3, [r4, #12]
 8008680:	6832      	ldr	r2, [r6, #0]
 8008682:	1a9b      	subs	r3, r3, r2
 8008684:	42ab      	cmp	r3, r5
 8008686:	dc26      	bgt.n	80086d6 <_printf_common+0x96>
 8008688:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800868c:	1e13      	subs	r3, r2, #0
 800868e:	6822      	ldr	r2, [r4, #0]
 8008690:	bf18      	it	ne
 8008692:	2301      	movne	r3, #1
 8008694:	0692      	lsls	r2, r2, #26
 8008696:	d42b      	bmi.n	80086f0 <_printf_common+0xb0>
 8008698:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800869c:	4649      	mov	r1, r9
 800869e:	4638      	mov	r0, r7
 80086a0:	47c0      	blx	r8
 80086a2:	3001      	adds	r0, #1
 80086a4:	d01e      	beq.n	80086e4 <_printf_common+0xa4>
 80086a6:	6823      	ldr	r3, [r4, #0]
 80086a8:	68e5      	ldr	r5, [r4, #12]
 80086aa:	6832      	ldr	r2, [r6, #0]
 80086ac:	f003 0306 	and.w	r3, r3, #6
 80086b0:	2b04      	cmp	r3, #4
 80086b2:	bf08      	it	eq
 80086b4:	1aad      	subeq	r5, r5, r2
 80086b6:	68a3      	ldr	r3, [r4, #8]
 80086b8:	6922      	ldr	r2, [r4, #16]
 80086ba:	bf0c      	ite	eq
 80086bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086c0:	2500      	movne	r5, #0
 80086c2:	4293      	cmp	r3, r2
 80086c4:	bfc4      	itt	gt
 80086c6:	1a9b      	subgt	r3, r3, r2
 80086c8:	18ed      	addgt	r5, r5, r3
 80086ca:	2600      	movs	r6, #0
 80086cc:	341a      	adds	r4, #26
 80086ce:	42b5      	cmp	r5, r6
 80086d0:	d11a      	bne.n	8008708 <_printf_common+0xc8>
 80086d2:	2000      	movs	r0, #0
 80086d4:	e008      	b.n	80086e8 <_printf_common+0xa8>
 80086d6:	2301      	movs	r3, #1
 80086d8:	4652      	mov	r2, sl
 80086da:	4649      	mov	r1, r9
 80086dc:	4638      	mov	r0, r7
 80086de:	47c0      	blx	r8
 80086e0:	3001      	adds	r0, #1
 80086e2:	d103      	bne.n	80086ec <_printf_common+0xac>
 80086e4:	f04f 30ff 	mov.w	r0, #4294967295
 80086e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ec:	3501      	adds	r5, #1
 80086ee:	e7c6      	b.n	800867e <_printf_common+0x3e>
 80086f0:	18e1      	adds	r1, r4, r3
 80086f2:	1c5a      	adds	r2, r3, #1
 80086f4:	2030      	movs	r0, #48	; 0x30
 80086f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086fa:	4422      	add	r2, r4
 80086fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008700:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008704:	3302      	adds	r3, #2
 8008706:	e7c7      	b.n	8008698 <_printf_common+0x58>
 8008708:	2301      	movs	r3, #1
 800870a:	4622      	mov	r2, r4
 800870c:	4649      	mov	r1, r9
 800870e:	4638      	mov	r0, r7
 8008710:	47c0      	blx	r8
 8008712:	3001      	adds	r0, #1
 8008714:	d0e6      	beq.n	80086e4 <_printf_common+0xa4>
 8008716:	3601      	adds	r6, #1
 8008718:	e7d9      	b.n	80086ce <_printf_common+0x8e>
	...

0800871c <_printf_i>:
 800871c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008720:	7e0f      	ldrb	r7, [r1, #24]
 8008722:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008724:	2f78      	cmp	r7, #120	; 0x78
 8008726:	4691      	mov	r9, r2
 8008728:	4680      	mov	r8, r0
 800872a:	460c      	mov	r4, r1
 800872c:	469a      	mov	sl, r3
 800872e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008732:	d807      	bhi.n	8008744 <_printf_i+0x28>
 8008734:	2f62      	cmp	r7, #98	; 0x62
 8008736:	d80a      	bhi.n	800874e <_printf_i+0x32>
 8008738:	2f00      	cmp	r7, #0
 800873a:	f000 80d8 	beq.w	80088ee <_printf_i+0x1d2>
 800873e:	2f58      	cmp	r7, #88	; 0x58
 8008740:	f000 80a3 	beq.w	800888a <_printf_i+0x16e>
 8008744:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008748:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800874c:	e03a      	b.n	80087c4 <_printf_i+0xa8>
 800874e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008752:	2b15      	cmp	r3, #21
 8008754:	d8f6      	bhi.n	8008744 <_printf_i+0x28>
 8008756:	a101      	add	r1, pc, #4	; (adr r1, 800875c <_printf_i+0x40>)
 8008758:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800875c:	080087b5 	.word	0x080087b5
 8008760:	080087c9 	.word	0x080087c9
 8008764:	08008745 	.word	0x08008745
 8008768:	08008745 	.word	0x08008745
 800876c:	08008745 	.word	0x08008745
 8008770:	08008745 	.word	0x08008745
 8008774:	080087c9 	.word	0x080087c9
 8008778:	08008745 	.word	0x08008745
 800877c:	08008745 	.word	0x08008745
 8008780:	08008745 	.word	0x08008745
 8008784:	08008745 	.word	0x08008745
 8008788:	080088d5 	.word	0x080088d5
 800878c:	080087f9 	.word	0x080087f9
 8008790:	080088b7 	.word	0x080088b7
 8008794:	08008745 	.word	0x08008745
 8008798:	08008745 	.word	0x08008745
 800879c:	080088f7 	.word	0x080088f7
 80087a0:	08008745 	.word	0x08008745
 80087a4:	080087f9 	.word	0x080087f9
 80087a8:	08008745 	.word	0x08008745
 80087ac:	08008745 	.word	0x08008745
 80087b0:	080088bf 	.word	0x080088bf
 80087b4:	682b      	ldr	r3, [r5, #0]
 80087b6:	1d1a      	adds	r2, r3, #4
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	602a      	str	r2, [r5, #0]
 80087bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087c4:	2301      	movs	r3, #1
 80087c6:	e0a3      	b.n	8008910 <_printf_i+0x1f4>
 80087c8:	6820      	ldr	r0, [r4, #0]
 80087ca:	6829      	ldr	r1, [r5, #0]
 80087cc:	0606      	lsls	r6, r0, #24
 80087ce:	f101 0304 	add.w	r3, r1, #4
 80087d2:	d50a      	bpl.n	80087ea <_printf_i+0xce>
 80087d4:	680e      	ldr	r6, [r1, #0]
 80087d6:	602b      	str	r3, [r5, #0]
 80087d8:	2e00      	cmp	r6, #0
 80087da:	da03      	bge.n	80087e4 <_printf_i+0xc8>
 80087dc:	232d      	movs	r3, #45	; 0x2d
 80087de:	4276      	negs	r6, r6
 80087e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087e4:	485e      	ldr	r0, [pc, #376]	; (8008960 <_printf_i+0x244>)
 80087e6:	230a      	movs	r3, #10
 80087e8:	e019      	b.n	800881e <_printf_i+0x102>
 80087ea:	680e      	ldr	r6, [r1, #0]
 80087ec:	602b      	str	r3, [r5, #0]
 80087ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80087f2:	bf18      	it	ne
 80087f4:	b236      	sxthne	r6, r6
 80087f6:	e7ef      	b.n	80087d8 <_printf_i+0xbc>
 80087f8:	682b      	ldr	r3, [r5, #0]
 80087fa:	6820      	ldr	r0, [r4, #0]
 80087fc:	1d19      	adds	r1, r3, #4
 80087fe:	6029      	str	r1, [r5, #0]
 8008800:	0601      	lsls	r1, r0, #24
 8008802:	d501      	bpl.n	8008808 <_printf_i+0xec>
 8008804:	681e      	ldr	r6, [r3, #0]
 8008806:	e002      	b.n	800880e <_printf_i+0xf2>
 8008808:	0646      	lsls	r6, r0, #25
 800880a:	d5fb      	bpl.n	8008804 <_printf_i+0xe8>
 800880c:	881e      	ldrh	r6, [r3, #0]
 800880e:	4854      	ldr	r0, [pc, #336]	; (8008960 <_printf_i+0x244>)
 8008810:	2f6f      	cmp	r7, #111	; 0x6f
 8008812:	bf0c      	ite	eq
 8008814:	2308      	moveq	r3, #8
 8008816:	230a      	movne	r3, #10
 8008818:	2100      	movs	r1, #0
 800881a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800881e:	6865      	ldr	r5, [r4, #4]
 8008820:	60a5      	str	r5, [r4, #8]
 8008822:	2d00      	cmp	r5, #0
 8008824:	bfa2      	ittt	ge
 8008826:	6821      	ldrge	r1, [r4, #0]
 8008828:	f021 0104 	bicge.w	r1, r1, #4
 800882c:	6021      	strge	r1, [r4, #0]
 800882e:	b90e      	cbnz	r6, 8008834 <_printf_i+0x118>
 8008830:	2d00      	cmp	r5, #0
 8008832:	d04d      	beq.n	80088d0 <_printf_i+0x1b4>
 8008834:	4615      	mov	r5, r2
 8008836:	fbb6 f1f3 	udiv	r1, r6, r3
 800883a:	fb03 6711 	mls	r7, r3, r1, r6
 800883e:	5dc7      	ldrb	r7, [r0, r7]
 8008840:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008844:	4637      	mov	r7, r6
 8008846:	42bb      	cmp	r3, r7
 8008848:	460e      	mov	r6, r1
 800884a:	d9f4      	bls.n	8008836 <_printf_i+0x11a>
 800884c:	2b08      	cmp	r3, #8
 800884e:	d10b      	bne.n	8008868 <_printf_i+0x14c>
 8008850:	6823      	ldr	r3, [r4, #0]
 8008852:	07de      	lsls	r6, r3, #31
 8008854:	d508      	bpl.n	8008868 <_printf_i+0x14c>
 8008856:	6923      	ldr	r3, [r4, #16]
 8008858:	6861      	ldr	r1, [r4, #4]
 800885a:	4299      	cmp	r1, r3
 800885c:	bfde      	ittt	le
 800885e:	2330      	movle	r3, #48	; 0x30
 8008860:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008864:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008868:	1b52      	subs	r2, r2, r5
 800886a:	6122      	str	r2, [r4, #16]
 800886c:	f8cd a000 	str.w	sl, [sp]
 8008870:	464b      	mov	r3, r9
 8008872:	aa03      	add	r2, sp, #12
 8008874:	4621      	mov	r1, r4
 8008876:	4640      	mov	r0, r8
 8008878:	f7ff fee2 	bl	8008640 <_printf_common>
 800887c:	3001      	adds	r0, #1
 800887e:	d14c      	bne.n	800891a <_printf_i+0x1fe>
 8008880:	f04f 30ff 	mov.w	r0, #4294967295
 8008884:	b004      	add	sp, #16
 8008886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800888a:	4835      	ldr	r0, [pc, #212]	; (8008960 <_printf_i+0x244>)
 800888c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008890:	6829      	ldr	r1, [r5, #0]
 8008892:	6823      	ldr	r3, [r4, #0]
 8008894:	f851 6b04 	ldr.w	r6, [r1], #4
 8008898:	6029      	str	r1, [r5, #0]
 800889a:	061d      	lsls	r5, r3, #24
 800889c:	d514      	bpl.n	80088c8 <_printf_i+0x1ac>
 800889e:	07df      	lsls	r7, r3, #31
 80088a0:	bf44      	itt	mi
 80088a2:	f043 0320 	orrmi.w	r3, r3, #32
 80088a6:	6023      	strmi	r3, [r4, #0]
 80088a8:	b91e      	cbnz	r6, 80088b2 <_printf_i+0x196>
 80088aa:	6823      	ldr	r3, [r4, #0]
 80088ac:	f023 0320 	bic.w	r3, r3, #32
 80088b0:	6023      	str	r3, [r4, #0]
 80088b2:	2310      	movs	r3, #16
 80088b4:	e7b0      	b.n	8008818 <_printf_i+0xfc>
 80088b6:	6823      	ldr	r3, [r4, #0]
 80088b8:	f043 0320 	orr.w	r3, r3, #32
 80088bc:	6023      	str	r3, [r4, #0]
 80088be:	2378      	movs	r3, #120	; 0x78
 80088c0:	4828      	ldr	r0, [pc, #160]	; (8008964 <_printf_i+0x248>)
 80088c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088c6:	e7e3      	b.n	8008890 <_printf_i+0x174>
 80088c8:	0659      	lsls	r1, r3, #25
 80088ca:	bf48      	it	mi
 80088cc:	b2b6      	uxthmi	r6, r6
 80088ce:	e7e6      	b.n	800889e <_printf_i+0x182>
 80088d0:	4615      	mov	r5, r2
 80088d2:	e7bb      	b.n	800884c <_printf_i+0x130>
 80088d4:	682b      	ldr	r3, [r5, #0]
 80088d6:	6826      	ldr	r6, [r4, #0]
 80088d8:	6961      	ldr	r1, [r4, #20]
 80088da:	1d18      	adds	r0, r3, #4
 80088dc:	6028      	str	r0, [r5, #0]
 80088de:	0635      	lsls	r5, r6, #24
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	d501      	bpl.n	80088e8 <_printf_i+0x1cc>
 80088e4:	6019      	str	r1, [r3, #0]
 80088e6:	e002      	b.n	80088ee <_printf_i+0x1d2>
 80088e8:	0670      	lsls	r0, r6, #25
 80088ea:	d5fb      	bpl.n	80088e4 <_printf_i+0x1c8>
 80088ec:	8019      	strh	r1, [r3, #0]
 80088ee:	2300      	movs	r3, #0
 80088f0:	6123      	str	r3, [r4, #16]
 80088f2:	4615      	mov	r5, r2
 80088f4:	e7ba      	b.n	800886c <_printf_i+0x150>
 80088f6:	682b      	ldr	r3, [r5, #0]
 80088f8:	1d1a      	adds	r2, r3, #4
 80088fa:	602a      	str	r2, [r5, #0]
 80088fc:	681d      	ldr	r5, [r3, #0]
 80088fe:	6862      	ldr	r2, [r4, #4]
 8008900:	2100      	movs	r1, #0
 8008902:	4628      	mov	r0, r5
 8008904:	f7f7 fc6c 	bl	80001e0 <memchr>
 8008908:	b108      	cbz	r0, 800890e <_printf_i+0x1f2>
 800890a:	1b40      	subs	r0, r0, r5
 800890c:	6060      	str	r0, [r4, #4]
 800890e:	6863      	ldr	r3, [r4, #4]
 8008910:	6123      	str	r3, [r4, #16]
 8008912:	2300      	movs	r3, #0
 8008914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008918:	e7a8      	b.n	800886c <_printf_i+0x150>
 800891a:	6923      	ldr	r3, [r4, #16]
 800891c:	462a      	mov	r2, r5
 800891e:	4649      	mov	r1, r9
 8008920:	4640      	mov	r0, r8
 8008922:	47d0      	blx	sl
 8008924:	3001      	adds	r0, #1
 8008926:	d0ab      	beq.n	8008880 <_printf_i+0x164>
 8008928:	6823      	ldr	r3, [r4, #0]
 800892a:	079b      	lsls	r3, r3, #30
 800892c:	d413      	bmi.n	8008956 <_printf_i+0x23a>
 800892e:	68e0      	ldr	r0, [r4, #12]
 8008930:	9b03      	ldr	r3, [sp, #12]
 8008932:	4298      	cmp	r0, r3
 8008934:	bfb8      	it	lt
 8008936:	4618      	movlt	r0, r3
 8008938:	e7a4      	b.n	8008884 <_printf_i+0x168>
 800893a:	2301      	movs	r3, #1
 800893c:	4632      	mov	r2, r6
 800893e:	4649      	mov	r1, r9
 8008940:	4640      	mov	r0, r8
 8008942:	47d0      	blx	sl
 8008944:	3001      	adds	r0, #1
 8008946:	d09b      	beq.n	8008880 <_printf_i+0x164>
 8008948:	3501      	adds	r5, #1
 800894a:	68e3      	ldr	r3, [r4, #12]
 800894c:	9903      	ldr	r1, [sp, #12]
 800894e:	1a5b      	subs	r3, r3, r1
 8008950:	42ab      	cmp	r3, r5
 8008952:	dcf2      	bgt.n	800893a <_printf_i+0x21e>
 8008954:	e7eb      	b.n	800892e <_printf_i+0x212>
 8008956:	2500      	movs	r5, #0
 8008958:	f104 0619 	add.w	r6, r4, #25
 800895c:	e7f5      	b.n	800894a <_printf_i+0x22e>
 800895e:	bf00      	nop
 8008960:	0800af5e 	.word	0x0800af5e
 8008964:	0800af6f 	.word	0x0800af6f

08008968 <iprintf>:
 8008968:	b40f      	push	{r0, r1, r2, r3}
 800896a:	4b0a      	ldr	r3, [pc, #40]	; (8008994 <iprintf+0x2c>)
 800896c:	b513      	push	{r0, r1, r4, lr}
 800896e:	681c      	ldr	r4, [r3, #0]
 8008970:	b124      	cbz	r4, 800897c <iprintf+0x14>
 8008972:	69a3      	ldr	r3, [r4, #24]
 8008974:	b913      	cbnz	r3, 800897c <iprintf+0x14>
 8008976:	4620      	mov	r0, r4
 8008978:	f001 f8da 	bl	8009b30 <__sinit>
 800897c:	ab05      	add	r3, sp, #20
 800897e:	9a04      	ldr	r2, [sp, #16]
 8008980:	68a1      	ldr	r1, [r4, #8]
 8008982:	9301      	str	r3, [sp, #4]
 8008984:	4620      	mov	r0, r4
 8008986:	f001 fe97 	bl	800a6b8 <_vfiprintf_r>
 800898a:	b002      	add	sp, #8
 800898c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008990:	b004      	add	sp, #16
 8008992:	4770      	bx	lr
 8008994:	2000000c 	.word	0x2000000c

08008998 <_puts_r>:
 8008998:	b570      	push	{r4, r5, r6, lr}
 800899a:	460e      	mov	r6, r1
 800899c:	4605      	mov	r5, r0
 800899e:	b118      	cbz	r0, 80089a8 <_puts_r+0x10>
 80089a0:	6983      	ldr	r3, [r0, #24]
 80089a2:	b90b      	cbnz	r3, 80089a8 <_puts_r+0x10>
 80089a4:	f001 f8c4 	bl	8009b30 <__sinit>
 80089a8:	69ab      	ldr	r3, [r5, #24]
 80089aa:	68ac      	ldr	r4, [r5, #8]
 80089ac:	b913      	cbnz	r3, 80089b4 <_puts_r+0x1c>
 80089ae:	4628      	mov	r0, r5
 80089b0:	f001 f8be 	bl	8009b30 <__sinit>
 80089b4:	4b2c      	ldr	r3, [pc, #176]	; (8008a68 <_puts_r+0xd0>)
 80089b6:	429c      	cmp	r4, r3
 80089b8:	d120      	bne.n	80089fc <_puts_r+0x64>
 80089ba:	686c      	ldr	r4, [r5, #4]
 80089bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089be:	07db      	lsls	r3, r3, #31
 80089c0:	d405      	bmi.n	80089ce <_puts_r+0x36>
 80089c2:	89a3      	ldrh	r3, [r4, #12]
 80089c4:	0598      	lsls	r0, r3, #22
 80089c6:	d402      	bmi.n	80089ce <_puts_r+0x36>
 80089c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089ca:	f001 f954 	bl	8009c76 <__retarget_lock_acquire_recursive>
 80089ce:	89a3      	ldrh	r3, [r4, #12]
 80089d0:	0719      	lsls	r1, r3, #28
 80089d2:	d51d      	bpl.n	8008a10 <_puts_r+0x78>
 80089d4:	6923      	ldr	r3, [r4, #16]
 80089d6:	b1db      	cbz	r3, 8008a10 <_puts_r+0x78>
 80089d8:	3e01      	subs	r6, #1
 80089da:	68a3      	ldr	r3, [r4, #8]
 80089dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80089e0:	3b01      	subs	r3, #1
 80089e2:	60a3      	str	r3, [r4, #8]
 80089e4:	bb39      	cbnz	r1, 8008a36 <_puts_r+0x9e>
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	da38      	bge.n	8008a5c <_puts_r+0xc4>
 80089ea:	4622      	mov	r2, r4
 80089ec:	210a      	movs	r1, #10
 80089ee:	4628      	mov	r0, r5
 80089f0:	f000 f848 	bl	8008a84 <__swbuf_r>
 80089f4:	3001      	adds	r0, #1
 80089f6:	d011      	beq.n	8008a1c <_puts_r+0x84>
 80089f8:	250a      	movs	r5, #10
 80089fa:	e011      	b.n	8008a20 <_puts_r+0x88>
 80089fc:	4b1b      	ldr	r3, [pc, #108]	; (8008a6c <_puts_r+0xd4>)
 80089fe:	429c      	cmp	r4, r3
 8008a00:	d101      	bne.n	8008a06 <_puts_r+0x6e>
 8008a02:	68ac      	ldr	r4, [r5, #8]
 8008a04:	e7da      	b.n	80089bc <_puts_r+0x24>
 8008a06:	4b1a      	ldr	r3, [pc, #104]	; (8008a70 <_puts_r+0xd8>)
 8008a08:	429c      	cmp	r4, r3
 8008a0a:	bf08      	it	eq
 8008a0c:	68ec      	ldreq	r4, [r5, #12]
 8008a0e:	e7d5      	b.n	80089bc <_puts_r+0x24>
 8008a10:	4621      	mov	r1, r4
 8008a12:	4628      	mov	r0, r5
 8008a14:	f000 f888 	bl	8008b28 <__swsetup_r>
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	d0dd      	beq.n	80089d8 <_puts_r+0x40>
 8008a1c:	f04f 35ff 	mov.w	r5, #4294967295
 8008a20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a22:	07da      	lsls	r2, r3, #31
 8008a24:	d405      	bmi.n	8008a32 <_puts_r+0x9a>
 8008a26:	89a3      	ldrh	r3, [r4, #12]
 8008a28:	059b      	lsls	r3, r3, #22
 8008a2a:	d402      	bmi.n	8008a32 <_puts_r+0x9a>
 8008a2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a2e:	f001 f923 	bl	8009c78 <__retarget_lock_release_recursive>
 8008a32:	4628      	mov	r0, r5
 8008a34:	bd70      	pop	{r4, r5, r6, pc}
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	da04      	bge.n	8008a44 <_puts_r+0xac>
 8008a3a:	69a2      	ldr	r2, [r4, #24]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	dc06      	bgt.n	8008a4e <_puts_r+0xb6>
 8008a40:	290a      	cmp	r1, #10
 8008a42:	d004      	beq.n	8008a4e <_puts_r+0xb6>
 8008a44:	6823      	ldr	r3, [r4, #0]
 8008a46:	1c5a      	adds	r2, r3, #1
 8008a48:	6022      	str	r2, [r4, #0]
 8008a4a:	7019      	strb	r1, [r3, #0]
 8008a4c:	e7c5      	b.n	80089da <_puts_r+0x42>
 8008a4e:	4622      	mov	r2, r4
 8008a50:	4628      	mov	r0, r5
 8008a52:	f000 f817 	bl	8008a84 <__swbuf_r>
 8008a56:	3001      	adds	r0, #1
 8008a58:	d1bf      	bne.n	80089da <_puts_r+0x42>
 8008a5a:	e7df      	b.n	8008a1c <_puts_r+0x84>
 8008a5c:	6823      	ldr	r3, [r4, #0]
 8008a5e:	250a      	movs	r5, #10
 8008a60:	1c5a      	adds	r2, r3, #1
 8008a62:	6022      	str	r2, [r4, #0]
 8008a64:	701d      	strb	r5, [r3, #0]
 8008a66:	e7db      	b.n	8008a20 <_puts_r+0x88>
 8008a68:	0800b030 	.word	0x0800b030
 8008a6c:	0800b050 	.word	0x0800b050
 8008a70:	0800b010 	.word	0x0800b010

08008a74 <puts>:
 8008a74:	4b02      	ldr	r3, [pc, #8]	; (8008a80 <puts+0xc>)
 8008a76:	4601      	mov	r1, r0
 8008a78:	6818      	ldr	r0, [r3, #0]
 8008a7a:	f7ff bf8d 	b.w	8008998 <_puts_r>
 8008a7e:	bf00      	nop
 8008a80:	2000000c 	.word	0x2000000c

08008a84 <__swbuf_r>:
 8008a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a86:	460e      	mov	r6, r1
 8008a88:	4614      	mov	r4, r2
 8008a8a:	4605      	mov	r5, r0
 8008a8c:	b118      	cbz	r0, 8008a96 <__swbuf_r+0x12>
 8008a8e:	6983      	ldr	r3, [r0, #24]
 8008a90:	b90b      	cbnz	r3, 8008a96 <__swbuf_r+0x12>
 8008a92:	f001 f84d 	bl	8009b30 <__sinit>
 8008a96:	4b21      	ldr	r3, [pc, #132]	; (8008b1c <__swbuf_r+0x98>)
 8008a98:	429c      	cmp	r4, r3
 8008a9a:	d12b      	bne.n	8008af4 <__swbuf_r+0x70>
 8008a9c:	686c      	ldr	r4, [r5, #4]
 8008a9e:	69a3      	ldr	r3, [r4, #24]
 8008aa0:	60a3      	str	r3, [r4, #8]
 8008aa2:	89a3      	ldrh	r3, [r4, #12]
 8008aa4:	071a      	lsls	r2, r3, #28
 8008aa6:	d52f      	bpl.n	8008b08 <__swbuf_r+0x84>
 8008aa8:	6923      	ldr	r3, [r4, #16]
 8008aaa:	b36b      	cbz	r3, 8008b08 <__swbuf_r+0x84>
 8008aac:	6923      	ldr	r3, [r4, #16]
 8008aae:	6820      	ldr	r0, [r4, #0]
 8008ab0:	1ac0      	subs	r0, r0, r3
 8008ab2:	6963      	ldr	r3, [r4, #20]
 8008ab4:	b2f6      	uxtb	r6, r6
 8008ab6:	4283      	cmp	r3, r0
 8008ab8:	4637      	mov	r7, r6
 8008aba:	dc04      	bgt.n	8008ac6 <__swbuf_r+0x42>
 8008abc:	4621      	mov	r1, r4
 8008abe:	4628      	mov	r0, r5
 8008ac0:	f000 ffa2 	bl	8009a08 <_fflush_r>
 8008ac4:	bb30      	cbnz	r0, 8008b14 <__swbuf_r+0x90>
 8008ac6:	68a3      	ldr	r3, [r4, #8]
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	60a3      	str	r3, [r4, #8]
 8008acc:	6823      	ldr	r3, [r4, #0]
 8008ace:	1c5a      	adds	r2, r3, #1
 8008ad0:	6022      	str	r2, [r4, #0]
 8008ad2:	701e      	strb	r6, [r3, #0]
 8008ad4:	6963      	ldr	r3, [r4, #20]
 8008ad6:	3001      	adds	r0, #1
 8008ad8:	4283      	cmp	r3, r0
 8008ada:	d004      	beq.n	8008ae6 <__swbuf_r+0x62>
 8008adc:	89a3      	ldrh	r3, [r4, #12]
 8008ade:	07db      	lsls	r3, r3, #31
 8008ae0:	d506      	bpl.n	8008af0 <__swbuf_r+0x6c>
 8008ae2:	2e0a      	cmp	r6, #10
 8008ae4:	d104      	bne.n	8008af0 <__swbuf_r+0x6c>
 8008ae6:	4621      	mov	r1, r4
 8008ae8:	4628      	mov	r0, r5
 8008aea:	f000 ff8d 	bl	8009a08 <_fflush_r>
 8008aee:	b988      	cbnz	r0, 8008b14 <__swbuf_r+0x90>
 8008af0:	4638      	mov	r0, r7
 8008af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008af4:	4b0a      	ldr	r3, [pc, #40]	; (8008b20 <__swbuf_r+0x9c>)
 8008af6:	429c      	cmp	r4, r3
 8008af8:	d101      	bne.n	8008afe <__swbuf_r+0x7a>
 8008afa:	68ac      	ldr	r4, [r5, #8]
 8008afc:	e7cf      	b.n	8008a9e <__swbuf_r+0x1a>
 8008afe:	4b09      	ldr	r3, [pc, #36]	; (8008b24 <__swbuf_r+0xa0>)
 8008b00:	429c      	cmp	r4, r3
 8008b02:	bf08      	it	eq
 8008b04:	68ec      	ldreq	r4, [r5, #12]
 8008b06:	e7ca      	b.n	8008a9e <__swbuf_r+0x1a>
 8008b08:	4621      	mov	r1, r4
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	f000 f80c 	bl	8008b28 <__swsetup_r>
 8008b10:	2800      	cmp	r0, #0
 8008b12:	d0cb      	beq.n	8008aac <__swbuf_r+0x28>
 8008b14:	f04f 37ff 	mov.w	r7, #4294967295
 8008b18:	e7ea      	b.n	8008af0 <__swbuf_r+0x6c>
 8008b1a:	bf00      	nop
 8008b1c:	0800b030 	.word	0x0800b030
 8008b20:	0800b050 	.word	0x0800b050
 8008b24:	0800b010 	.word	0x0800b010

08008b28 <__swsetup_r>:
 8008b28:	4b32      	ldr	r3, [pc, #200]	; (8008bf4 <__swsetup_r+0xcc>)
 8008b2a:	b570      	push	{r4, r5, r6, lr}
 8008b2c:	681d      	ldr	r5, [r3, #0]
 8008b2e:	4606      	mov	r6, r0
 8008b30:	460c      	mov	r4, r1
 8008b32:	b125      	cbz	r5, 8008b3e <__swsetup_r+0x16>
 8008b34:	69ab      	ldr	r3, [r5, #24]
 8008b36:	b913      	cbnz	r3, 8008b3e <__swsetup_r+0x16>
 8008b38:	4628      	mov	r0, r5
 8008b3a:	f000 fff9 	bl	8009b30 <__sinit>
 8008b3e:	4b2e      	ldr	r3, [pc, #184]	; (8008bf8 <__swsetup_r+0xd0>)
 8008b40:	429c      	cmp	r4, r3
 8008b42:	d10f      	bne.n	8008b64 <__swsetup_r+0x3c>
 8008b44:	686c      	ldr	r4, [r5, #4]
 8008b46:	89a3      	ldrh	r3, [r4, #12]
 8008b48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b4c:	0719      	lsls	r1, r3, #28
 8008b4e:	d42c      	bmi.n	8008baa <__swsetup_r+0x82>
 8008b50:	06dd      	lsls	r5, r3, #27
 8008b52:	d411      	bmi.n	8008b78 <__swsetup_r+0x50>
 8008b54:	2309      	movs	r3, #9
 8008b56:	6033      	str	r3, [r6, #0]
 8008b58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b5c:	81a3      	strh	r3, [r4, #12]
 8008b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b62:	e03e      	b.n	8008be2 <__swsetup_r+0xba>
 8008b64:	4b25      	ldr	r3, [pc, #148]	; (8008bfc <__swsetup_r+0xd4>)
 8008b66:	429c      	cmp	r4, r3
 8008b68:	d101      	bne.n	8008b6e <__swsetup_r+0x46>
 8008b6a:	68ac      	ldr	r4, [r5, #8]
 8008b6c:	e7eb      	b.n	8008b46 <__swsetup_r+0x1e>
 8008b6e:	4b24      	ldr	r3, [pc, #144]	; (8008c00 <__swsetup_r+0xd8>)
 8008b70:	429c      	cmp	r4, r3
 8008b72:	bf08      	it	eq
 8008b74:	68ec      	ldreq	r4, [r5, #12]
 8008b76:	e7e6      	b.n	8008b46 <__swsetup_r+0x1e>
 8008b78:	0758      	lsls	r0, r3, #29
 8008b7a:	d512      	bpl.n	8008ba2 <__swsetup_r+0x7a>
 8008b7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b7e:	b141      	cbz	r1, 8008b92 <__swsetup_r+0x6a>
 8008b80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b84:	4299      	cmp	r1, r3
 8008b86:	d002      	beq.n	8008b8e <__swsetup_r+0x66>
 8008b88:	4630      	mov	r0, r6
 8008b8a:	f001 fc8b 	bl	800a4a4 <_free_r>
 8008b8e:	2300      	movs	r3, #0
 8008b90:	6363      	str	r3, [r4, #52]	; 0x34
 8008b92:	89a3      	ldrh	r3, [r4, #12]
 8008b94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b98:	81a3      	strh	r3, [r4, #12]
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	6063      	str	r3, [r4, #4]
 8008b9e:	6923      	ldr	r3, [r4, #16]
 8008ba0:	6023      	str	r3, [r4, #0]
 8008ba2:	89a3      	ldrh	r3, [r4, #12]
 8008ba4:	f043 0308 	orr.w	r3, r3, #8
 8008ba8:	81a3      	strh	r3, [r4, #12]
 8008baa:	6923      	ldr	r3, [r4, #16]
 8008bac:	b94b      	cbnz	r3, 8008bc2 <__swsetup_r+0x9a>
 8008bae:	89a3      	ldrh	r3, [r4, #12]
 8008bb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008bb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bb8:	d003      	beq.n	8008bc2 <__swsetup_r+0x9a>
 8008bba:	4621      	mov	r1, r4
 8008bbc:	4630      	mov	r0, r6
 8008bbe:	f001 f881 	bl	8009cc4 <__smakebuf_r>
 8008bc2:	89a0      	ldrh	r0, [r4, #12]
 8008bc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008bc8:	f010 0301 	ands.w	r3, r0, #1
 8008bcc:	d00a      	beq.n	8008be4 <__swsetup_r+0xbc>
 8008bce:	2300      	movs	r3, #0
 8008bd0:	60a3      	str	r3, [r4, #8]
 8008bd2:	6963      	ldr	r3, [r4, #20]
 8008bd4:	425b      	negs	r3, r3
 8008bd6:	61a3      	str	r3, [r4, #24]
 8008bd8:	6923      	ldr	r3, [r4, #16]
 8008bda:	b943      	cbnz	r3, 8008bee <__swsetup_r+0xc6>
 8008bdc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008be0:	d1ba      	bne.n	8008b58 <__swsetup_r+0x30>
 8008be2:	bd70      	pop	{r4, r5, r6, pc}
 8008be4:	0781      	lsls	r1, r0, #30
 8008be6:	bf58      	it	pl
 8008be8:	6963      	ldrpl	r3, [r4, #20]
 8008bea:	60a3      	str	r3, [r4, #8]
 8008bec:	e7f4      	b.n	8008bd8 <__swsetup_r+0xb0>
 8008bee:	2000      	movs	r0, #0
 8008bf0:	e7f7      	b.n	8008be2 <__swsetup_r+0xba>
 8008bf2:	bf00      	nop
 8008bf4:	2000000c 	.word	0x2000000c
 8008bf8:	0800b030 	.word	0x0800b030
 8008bfc:	0800b050 	.word	0x0800b050
 8008c00:	0800b010 	.word	0x0800b010

08008c04 <quorem>:
 8008c04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c08:	6903      	ldr	r3, [r0, #16]
 8008c0a:	690c      	ldr	r4, [r1, #16]
 8008c0c:	42a3      	cmp	r3, r4
 8008c0e:	4607      	mov	r7, r0
 8008c10:	f2c0 8081 	blt.w	8008d16 <quorem+0x112>
 8008c14:	3c01      	subs	r4, #1
 8008c16:	f101 0814 	add.w	r8, r1, #20
 8008c1a:	f100 0514 	add.w	r5, r0, #20
 8008c1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c22:	9301      	str	r3, [sp, #4]
 8008c24:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008c28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008c34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008c38:	fbb2 f6f3 	udiv	r6, r2, r3
 8008c3c:	d331      	bcc.n	8008ca2 <quorem+0x9e>
 8008c3e:	f04f 0e00 	mov.w	lr, #0
 8008c42:	4640      	mov	r0, r8
 8008c44:	46ac      	mov	ip, r5
 8008c46:	46f2      	mov	sl, lr
 8008c48:	f850 2b04 	ldr.w	r2, [r0], #4
 8008c4c:	b293      	uxth	r3, r2
 8008c4e:	fb06 e303 	mla	r3, r6, r3, lr
 8008c52:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	ebaa 0303 	sub.w	r3, sl, r3
 8008c5c:	f8dc a000 	ldr.w	sl, [ip]
 8008c60:	0c12      	lsrs	r2, r2, #16
 8008c62:	fa13 f38a 	uxtah	r3, r3, sl
 8008c66:	fb06 e202 	mla	r2, r6, r2, lr
 8008c6a:	9300      	str	r3, [sp, #0]
 8008c6c:	9b00      	ldr	r3, [sp, #0]
 8008c6e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008c72:	b292      	uxth	r2, r2
 8008c74:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008c78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c7c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008c80:	4581      	cmp	r9, r0
 8008c82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c86:	f84c 3b04 	str.w	r3, [ip], #4
 8008c8a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008c8e:	d2db      	bcs.n	8008c48 <quorem+0x44>
 8008c90:	f855 300b 	ldr.w	r3, [r5, fp]
 8008c94:	b92b      	cbnz	r3, 8008ca2 <quorem+0x9e>
 8008c96:	9b01      	ldr	r3, [sp, #4]
 8008c98:	3b04      	subs	r3, #4
 8008c9a:	429d      	cmp	r5, r3
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	d32e      	bcc.n	8008cfe <quorem+0xfa>
 8008ca0:	613c      	str	r4, [r7, #16]
 8008ca2:	4638      	mov	r0, r7
 8008ca4:	f001 fae6 	bl	800a274 <__mcmp>
 8008ca8:	2800      	cmp	r0, #0
 8008caa:	db24      	blt.n	8008cf6 <quorem+0xf2>
 8008cac:	3601      	adds	r6, #1
 8008cae:	4628      	mov	r0, r5
 8008cb0:	f04f 0c00 	mov.w	ip, #0
 8008cb4:	f858 2b04 	ldr.w	r2, [r8], #4
 8008cb8:	f8d0 e000 	ldr.w	lr, [r0]
 8008cbc:	b293      	uxth	r3, r2
 8008cbe:	ebac 0303 	sub.w	r3, ip, r3
 8008cc2:	0c12      	lsrs	r2, r2, #16
 8008cc4:	fa13 f38e 	uxtah	r3, r3, lr
 8008cc8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008ccc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008cd6:	45c1      	cmp	r9, r8
 8008cd8:	f840 3b04 	str.w	r3, [r0], #4
 8008cdc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008ce0:	d2e8      	bcs.n	8008cb4 <quorem+0xb0>
 8008ce2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ce6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008cea:	b922      	cbnz	r2, 8008cf6 <quorem+0xf2>
 8008cec:	3b04      	subs	r3, #4
 8008cee:	429d      	cmp	r5, r3
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	d30a      	bcc.n	8008d0a <quorem+0x106>
 8008cf4:	613c      	str	r4, [r7, #16]
 8008cf6:	4630      	mov	r0, r6
 8008cf8:	b003      	add	sp, #12
 8008cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cfe:	6812      	ldr	r2, [r2, #0]
 8008d00:	3b04      	subs	r3, #4
 8008d02:	2a00      	cmp	r2, #0
 8008d04:	d1cc      	bne.n	8008ca0 <quorem+0x9c>
 8008d06:	3c01      	subs	r4, #1
 8008d08:	e7c7      	b.n	8008c9a <quorem+0x96>
 8008d0a:	6812      	ldr	r2, [r2, #0]
 8008d0c:	3b04      	subs	r3, #4
 8008d0e:	2a00      	cmp	r2, #0
 8008d10:	d1f0      	bne.n	8008cf4 <quorem+0xf0>
 8008d12:	3c01      	subs	r4, #1
 8008d14:	e7eb      	b.n	8008cee <quorem+0xea>
 8008d16:	2000      	movs	r0, #0
 8008d18:	e7ee      	b.n	8008cf8 <quorem+0xf4>
 8008d1a:	0000      	movs	r0, r0
 8008d1c:	0000      	movs	r0, r0
	...

08008d20 <_dtoa_r>:
 8008d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d24:	ed2d 8b04 	vpush	{d8-d9}
 8008d28:	ec57 6b10 	vmov	r6, r7, d0
 8008d2c:	b093      	sub	sp, #76	; 0x4c
 8008d2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008d30:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008d34:	9106      	str	r1, [sp, #24]
 8008d36:	ee10 aa10 	vmov	sl, s0
 8008d3a:	4604      	mov	r4, r0
 8008d3c:	9209      	str	r2, [sp, #36]	; 0x24
 8008d3e:	930c      	str	r3, [sp, #48]	; 0x30
 8008d40:	46bb      	mov	fp, r7
 8008d42:	b975      	cbnz	r5, 8008d62 <_dtoa_r+0x42>
 8008d44:	2010      	movs	r0, #16
 8008d46:	f000 fffd 	bl	8009d44 <malloc>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	6260      	str	r0, [r4, #36]	; 0x24
 8008d4e:	b920      	cbnz	r0, 8008d5a <_dtoa_r+0x3a>
 8008d50:	4ba7      	ldr	r3, [pc, #668]	; (8008ff0 <_dtoa_r+0x2d0>)
 8008d52:	21ea      	movs	r1, #234	; 0xea
 8008d54:	48a7      	ldr	r0, [pc, #668]	; (8008ff4 <_dtoa_r+0x2d4>)
 8008d56:	f001 fe45 	bl	800a9e4 <__assert_func>
 8008d5a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008d5e:	6005      	str	r5, [r0, #0]
 8008d60:	60c5      	str	r5, [r0, #12]
 8008d62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d64:	6819      	ldr	r1, [r3, #0]
 8008d66:	b151      	cbz	r1, 8008d7e <_dtoa_r+0x5e>
 8008d68:	685a      	ldr	r2, [r3, #4]
 8008d6a:	604a      	str	r2, [r1, #4]
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	4093      	lsls	r3, r2
 8008d70:	608b      	str	r3, [r1, #8]
 8008d72:	4620      	mov	r0, r4
 8008d74:	f001 f83c 	bl	8009df0 <_Bfree>
 8008d78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	601a      	str	r2, [r3, #0]
 8008d7e:	1e3b      	subs	r3, r7, #0
 8008d80:	bfaa      	itet	ge
 8008d82:	2300      	movge	r3, #0
 8008d84:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008d88:	f8c8 3000 	strge.w	r3, [r8]
 8008d8c:	4b9a      	ldr	r3, [pc, #616]	; (8008ff8 <_dtoa_r+0x2d8>)
 8008d8e:	bfbc      	itt	lt
 8008d90:	2201      	movlt	r2, #1
 8008d92:	f8c8 2000 	strlt.w	r2, [r8]
 8008d96:	ea33 030b 	bics.w	r3, r3, fp
 8008d9a:	d11b      	bne.n	8008dd4 <_dtoa_r+0xb4>
 8008d9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d9e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008da2:	6013      	str	r3, [r2, #0]
 8008da4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008da8:	4333      	orrs	r3, r6
 8008daa:	f000 8592 	beq.w	80098d2 <_dtoa_r+0xbb2>
 8008dae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008db0:	b963      	cbnz	r3, 8008dcc <_dtoa_r+0xac>
 8008db2:	4b92      	ldr	r3, [pc, #584]	; (8008ffc <_dtoa_r+0x2dc>)
 8008db4:	e022      	b.n	8008dfc <_dtoa_r+0xdc>
 8008db6:	4b92      	ldr	r3, [pc, #584]	; (8009000 <_dtoa_r+0x2e0>)
 8008db8:	9301      	str	r3, [sp, #4]
 8008dba:	3308      	adds	r3, #8
 8008dbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008dbe:	6013      	str	r3, [r2, #0]
 8008dc0:	9801      	ldr	r0, [sp, #4]
 8008dc2:	b013      	add	sp, #76	; 0x4c
 8008dc4:	ecbd 8b04 	vpop	{d8-d9}
 8008dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dcc:	4b8b      	ldr	r3, [pc, #556]	; (8008ffc <_dtoa_r+0x2dc>)
 8008dce:	9301      	str	r3, [sp, #4]
 8008dd0:	3303      	adds	r3, #3
 8008dd2:	e7f3      	b.n	8008dbc <_dtoa_r+0x9c>
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	4650      	mov	r0, sl
 8008dda:	4659      	mov	r1, fp
 8008ddc:	f7f7 fe74 	bl	8000ac8 <__aeabi_dcmpeq>
 8008de0:	ec4b ab19 	vmov	d9, sl, fp
 8008de4:	4680      	mov	r8, r0
 8008de6:	b158      	cbz	r0, 8008e00 <_dtoa_r+0xe0>
 8008de8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008dea:	2301      	movs	r3, #1
 8008dec:	6013      	str	r3, [r2, #0]
 8008dee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	f000 856b 	beq.w	80098cc <_dtoa_r+0xbac>
 8008df6:	4883      	ldr	r0, [pc, #524]	; (8009004 <_dtoa_r+0x2e4>)
 8008df8:	6018      	str	r0, [r3, #0]
 8008dfa:	1e43      	subs	r3, r0, #1
 8008dfc:	9301      	str	r3, [sp, #4]
 8008dfe:	e7df      	b.n	8008dc0 <_dtoa_r+0xa0>
 8008e00:	ec4b ab10 	vmov	d0, sl, fp
 8008e04:	aa10      	add	r2, sp, #64	; 0x40
 8008e06:	a911      	add	r1, sp, #68	; 0x44
 8008e08:	4620      	mov	r0, r4
 8008e0a:	f001 fad9 	bl	800a3c0 <__d2b>
 8008e0e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008e12:	ee08 0a10 	vmov	s16, r0
 8008e16:	2d00      	cmp	r5, #0
 8008e18:	f000 8084 	beq.w	8008f24 <_dtoa_r+0x204>
 8008e1c:	ee19 3a90 	vmov	r3, s19
 8008e20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e24:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008e28:	4656      	mov	r6, sl
 8008e2a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008e2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008e32:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008e36:	4b74      	ldr	r3, [pc, #464]	; (8009008 <_dtoa_r+0x2e8>)
 8008e38:	2200      	movs	r2, #0
 8008e3a:	4630      	mov	r0, r6
 8008e3c:	4639      	mov	r1, r7
 8008e3e:	f7f7 fa23 	bl	8000288 <__aeabi_dsub>
 8008e42:	a365      	add	r3, pc, #404	; (adr r3, 8008fd8 <_dtoa_r+0x2b8>)
 8008e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e48:	f7f7 fbd6 	bl	80005f8 <__aeabi_dmul>
 8008e4c:	a364      	add	r3, pc, #400	; (adr r3, 8008fe0 <_dtoa_r+0x2c0>)
 8008e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e52:	f7f7 fa1b 	bl	800028c <__adddf3>
 8008e56:	4606      	mov	r6, r0
 8008e58:	4628      	mov	r0, r5
 8008e5a:	460f      	mov	r7, r1
 8008e5c:	f7f7 fb62 	bl	8000524 <__aeabi_i2d>
 8008e60:	a361      	add	r3, pc, #388	; (adr r3, 8008fe8 <_dtoa_r+0x2c8>)
 8008e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e66:	f7f7 fbc7 	bl	80005f8 <__aeabi_dmul>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	4630      	mov	r0, r6
 8008e70:	4639      	mov	r1, r7
 8008e72:	f7f7 fa0b 	bl	800028c <__adddf3>
 8008e76:	4606      	mov	r6, r0
 8008e78:	460f      	mov	r7, r1
 8008e7a:	f7f7 fe6d 	bl	8000b58 <__aeabi_d2iz>
 8008e7e:	2200      	movs	r2, #0
 8008e80:	9000      	str	r0, [sp, #0]
 8008e82:	2300      	movs	r3, #0
 8008e84:	4630      	mov	r0, r6
 8008e86:	4639      	mov	r1, r7
 8008e88:	f7f7 fe28 	bl	8000adc <__aeabi_dcmplt>
 8008e8c:	b150      	cbz	r0, 8008ea4 <_dtoa_r+0x184>
 8008e8e:	9800      	ldr	r0, [sp, #0]
 8008e90:	f7f7 fb48 	bl	8000524 <__aeabi_i2d>
 8008e94:	4632      	mov	r2, r6
 8008e96:	463b      	mov	r3, r7
 8008e98:	f7f7 fe16 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e9c:	b910      	cbnz	r0, 8008ea4 <_dtoa_r+0x184>
 8008e9e:	9b00      	ldr	r3, [sp, #0]
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	9300      	str	r3, [sp, #0]
 8008ea4:	9b00      	ldr	r3, [sp, #0]
 8008ea6:	2b16      	cmp	r3, #22
 8008ea8:	d85a      	bhi.n	8008f60 <_dtoa_r+0x240>
 8008eaa:	9a00      	ldr	r2, [sp, #0]
 8008eac:	4b57      	ldr	r3, [pc, #348]	; (800900c <_dtoa_r+0x2ec>)
 8008eae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb6:	ec51 0b19 	vmov	r0, r1, d9
 8008eba:	f7f7 fe0f 	bl	8000adc <__aeabi_dcmplt>
 8008ebe:	2800      	cmp	r0, #0
 8008ec0:	d050      	beq.n	8008f64 <_dtoa_r+0x244>
 8008ec2:	9b00      	ldr	r3, [sp, #0]
 8008ec4:	3b01      	subs	r3, #1
 8008ec6:	9300      	str	r3, [sp, #0]
 8008ec8:	2300      	movs	r3, #0
 8008eca:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ecc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ece:	1b5d      	subs	r5, r3, r5
 8008ed0:	1e6b      	subs	r3, r5, #1
 8008ed2:	9305      	str	r3, [sp, #20]
 8008ed4:	bf45      	ittet	mi
 8008ed6:	f1c5 0301 	rsbmi	r3, r5, #1
 8008eda:	9304      	strmi	r3, [sp, #16]
 8008edc:	2300      	movpl	r3, #0
 8008ede:	2300      	movmi	r3, #0
 8008ee0:	bf4c      	ite	mi
 8008ee2:	9305      	strmi	r3, [sp, #20]
 8008ee4:	9304      	strpl	r3, [sp, #16]
 8008ee6:	9b00      	ldr	r3, [sp, #0]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	db3d      	blt.n	8008f68 <_dtoa_r+0x248>
 8008eec:	9b05      	ldr	r3, [sp, #20]
 8008eee:	9a00      	ldr	r2, [sp, #0]
 8008ef0:	920a      	str	r2, [sp, #40]	; 0x28
 8008ef2:	4413      	add	r3, r2
 8008ef4:	9305      	str	r3, [sp, #20]
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	9307      	str	r3, [sp, #28]
 8008efa:	9b06      	ldr	r3, [sp, #24]
 8008efc:	2b09      	cmp	r3, #9
 8008efe:	f200 8089 	bhi.w	8009014 <_dtoa_r+0x2f4>
 8008f02:	2b05      	cmp	r3, #5
 8008f04:	bfc4      	itt	gt
 8008f06:	3b04      	subgt	r3, #4
 8008f08:	9306      	strgt	r3, [sp, #24]
 8008f0a:	9b06      	ldr	r3, [sp, #24]
 8008f0c:	f1a3 0302 	sub.w	r3, r3, #2
 8008f10:	bfcc      	ite	gt
 8008f12:	2500      	movgt	r5, #0
 8008f14:	2501      	movle	r5, #1
 8008f16:	2b03      	cmp	r3, #3
 8008f18:	f200 8087 	bhi.w	800902a <_dtoa_r+0x30a>
 8008f1c:	e8df f003 	tbb	[pc, r3]
 8008f20:	59383a2d 	.word	0x59383a2d
 8008f24:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008f28:	441d      	add	r5, r3
 8008f2a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008f2e:	2b20      	cmp	r3, #32
 8008f30:	bfc1      	itttt	gt
 8008f32:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008f36:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008f3a:	fa0b f303 	lslgt.w	r3, fp, r3
 8008f3e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008f42:	bfda      	itte	le
 8008f44:	f1c3 0320 	rsble	r3, r3, #32
 8008f48:	fa06 f003 	lslle.w	r0, r6, r3
 8008f4c:	4318      	orrgt	r0, r3
 8008f4e:	f7f7 fad9 	bl	8000504 <__aeabi_ui2d>
 8008f52:	2301      	movs	r3, #1
 8008f54:	4606      	mov	r6, r0
 8008f56:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008f5a:	3d01      	subs	r5, #1
 8008f5c:	930e      	str	r3, [sp, #56]	; 0x38
 8008f5e:	e76a      	b.n	8008e36 <_dtoa_r+0x116>
 8008f60:	2301      	movs	r3, #1
 8008f62:	e7b2      	b.n	8008eca <_dtoa_r+0x1aa>
 8008f64:	900b      	str	r0, [sp, #44]	; 0x2c
 8008f66:	e7b1      	b.n	8008ecc <_dtoa_r+0x1ac>
 8008f68:	9b04      	ldr	r3, [sp, #16]
 8008f6a:	9a00      	ldr	r2, [sp, #0]
 8008f6c:	1a9b      	subs	r3, r3, r2
 8008f6e:	9304      	str	r3, [sp, #16]
 8008f70:	4253      	negs	r3, r2
 8008f72:	9307      	str	r3, [sp, #28]
 8008f74:	2300      	movs	r3, #0
 8008f76:	930a      	str	r3, [sp, #40]	; 0x28
 8008f78:	e7bf      	b.n	8008efa <_dtoa_r+0x1da>
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	9308      	str	r3, [sp, #32]
 8008f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	dc55      	bgt.n	8009030 <_dtoa_r+0x310>
 8008f84:	2301      	movs	r3, #1
 8008f86:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	9209      	str	r2, [sp, #36]	; 0x24
 8008f8e:	e00c      	b.n	8008faa <_dtoa_r+0x28a>
 8008f90:	2301      	movs	r3, #1
 8008f92:	e7f3      	b.n	8008f7c <_dtoa_r+0x25c>
 8008f94:	2300      	movs	r3, #0
 8008f96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f98:	9308      	str	r3, [sp, #32]
 8008f9a:	9b00      	ldr	r3, [sp, #0]
 8008f9c:	4413      	add	r3, r2
 8008f9e:	9302      	str	r3, [sp, #8]
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	9303      	str	r3, [sp, #12]
 8008fa6:	bfb8      	it	lt
 8008fa8:	2301      	movlt	r3, #1
 8008faa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008fac:	2200      	movs	r2, #0
 8008fae:	6042      	str	r2, [r0, #4]
 8008fb0:	2204      	movs	r2, #4
 8008fb2:	f102 0614 	add.w	r6, r2, #20
 8008fb6:	429e      	cmp	r6, r3
 8008fb8:	6841      	ldr	r1, [r0, #4]
 8008fba:	d93d      	bls.n	8009038 <_dtoa_r+0x318>
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	f000 fed7 	bl	8009d70 <_Balloc>
 8008fc2:	9001      	str	r0, [sp, #4]
 8008fc4:	2800      	cmp	r0, #0
 8008fc6:	d13b      	bne.n	8009040 <_dtoa_r+0x320>
 8008fc8:	4b11      	ldr	r3, [pc, #68]	; (8009010 <_dtoa_r+0x2f0>)
 8008fca:	4602      	mov	r2, r0
 8008fcc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008fd0:	e6c0      	b.n	8008d54 <_dtoa_r+0x34>
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e7df      	b.n	8008f96 <_dtoa_r+0x276>
 8008fd6:	bf00      	nop
 8008fd8:	636f4361 	.word	0x636f4361
 8008fdc:	3fd287a7 	.word	0x3fd287a7
 8008fe0:	8b60c8b3 	.word	0x8b60c8b3
 8008fe4:	3fc68a28 	.word	0x3fc68a28
 8008fe8:	509f79fb 	.word	0x509f79fb
 8008fec:	3fd34413 	.word	0x3fd34413
 8008ff0:	0800af8d 	.word	0x0800af8d
 8008ff4:	0800afa4 	.word	0x0800afa4
 8008ff8:	7ff00000 	.word	0x7ff00000
 8008ffc:	0800af89 	.word	0x0800af89
 8009000:	0800af80 	.word	0x0800af80
 8009004:	0800af5d 	.word	0x0800af5d
 8009008:	3ff80000 	.word	0x3ff80000
 800900c:	0800b0f8 	.word	0x0800b0f8
 8009010:	0800afff 	.word	0x0800afff
 8009014:	2501      	movs	r5, #1
 8009016:	2300      	movs	r3, #0
 8009018:	9306      	str	r3, [sp, #24]
 800901a:	9508      	str	r5, [sp, #32]
 800901c:	f04f 33ff 	mov.w	r3, #4294967295
 8009020:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009024:	2200      	movs	r2, #0
 8009026:	2312      	movs	r3, #18
 8009028:	e7b0      	b.n	8008f8c <_dtoa_r+0x26c>
 800902a:	2301      	movs	r3, #1
 800902c:	9308      	str	r3, [sp, #32]
 800902e:	e7f5      	b.n	800901c <_dtoa_r+0x2fc>
 8009030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009032:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009036:	e7b8      	b.n	8008faa <_dtoa_r+0x28a>
 8009038:	3101      	adds	r1, #1
 800903a:	6041      	str	r1, [r0, #4]
 800903c:	0052      	lsls	r2, r2, #1
 800903e:	e7b8      	b.n	8008fb2 <_dtoa_r+0x292>
 8009040:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009042:	9a01      	ldr	r2, [sp, #4]
 8009044:	601a      	str	r2, [r3, #0]
 8009046:	9b03      	ldr	r3, [sp, #12]
 8009048:	2b0e      	cmp	r3, #14
 800904a:	f200 809d 	bhi.w	8009188 <_dtoa_r+0x468>
 800904e:	2d00      	cmp	r5, #0
 8009050:	f000 809a 	beq.w	8009188 <_dtoa_r+0x468>
 8009054:	9b00      	ldr	r3, [sp, #0]
 8009056:	2b00      	cmp	r3, #0
 8009058:	dd32      	ble.n	80090c0 <_dtoa_r+0x3a0>
 800905a:	4ab7      	ldr	r2, [pc, #732]	; (8009338 <_dtoa_r+0x618>)
 800905c:	f003 030f 	and.w	r3, r3, #15
 8009060:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009064:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009068:	9b00      	ldr	r3, [sp, #0]
 800906a:	05d8      	lsls	r0, r3, #23
 800906c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009070:	d516      	bpl.n	80090a0 <_dtoa_r+0x380>
 8009072:	4bb2      	ldr	r3, [pc, #712]	; (800933c <_dtoa_r+0x61c>)
 8009074:	ec51 0b19 	vmov	r0, r1, d9
 8009078:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800907c:	f7f7 fbe6 	bl	800084c <__aeabi_ddiv>
 8009080:	f007 070f 	and.w	r7, r7, #15
 8009084:	4682      	mov	sl, r0
 8009086:	468b      	mov	fp, r1
 8009088:	2503      	movs	r5, #3
 800908a:	4eac      	ldr	r6, [pc, #688]	; (800933c <_dtoa_r+0x61c>)
 800908c:	b957      	cbnz	r7, 80090a4 <_dtoa_r+0x384>
 800908e:	4642      	mov	r2, r8
 8009090:	464b      	mov	r3, r9
 8009092:	4650      	mov	r0, sl
 8009094:	4659      	mov	r1, fp
 8009096:	f7f7 fbd9 	bl	800084c <__aeabi_ddiv>
 800909a:	4682      	mov	sl, r0
 800909c:	468b      	mov	fp, r1
 800909e:	e028      	b.n	80090f2 <_dtoa_r+0x3d2>
 80090a0:	2502      	movs	r5, #2
 80090a2:	e7f2      	b.n	800908a <_dtoa_r+0x36a>
 80090a4:	07f9      	lsls	r1, r7, #31
 80090a6:	d508      	bpl.n	80090ba <_dtoa_r+0x39a>
 80090a8:	4640      	mov	r0, r8
 80090aa:	4649      	mov	r1, r9
 80090ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 80090b0:	f7f7 faa2 	bl	80005f8 <__aeabi_dmul>
 80090b4:	3501      	adds	r5, #1
 80090b6:	4680      	mov	r8, r0
 80090b8:	4689      	mov	r9, r1
 80090ba:	107f      	asrs	r7, r7, #1
 80090bc:	3608      	adds	r6, #8
 80090be:	e7e5      	b.n	800908c <_dtoa_r+0x36c>
 80090c0:	f000 809b 	beq.w	80091fa <_dtoa_r+0x4da>
 80090c4:	9b00      	ldr	r3, [sp, #0]
 80090c6:	4f9d      	ldr	r7, [pc, #628]	; (800933c <_dtoa_r+0x61c>)
 80090c8:	425e      	negs	r6, r3
 80090ca:	4b9b      	ldr	r3, [pc, #620]	; (8009338 <_dtoa_r+0x618>)
 80090cc:	f006 020f 	and.w	r2, r6, #15
 80090d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d8:	ec51 0b19 	vmov	r0, r1, d9
 80090dc:	f7f7 fa8c 	bl	80005f8 <__aeabi_dmul>
 80090e0:	1136      	asrs	r6, r6, #4
 80090e2:	4682      	mov	sl, r0
 80090e4:	468b      	mov	fp, r1
 80090e6:	2300      	movs	r3, #0
 80090e8:	2502      	movs	r5, #2
 80090ea:	2e00      	cmp	r6, #0
 80090ec:	d17a      	bne.n	80091e4 <_dtoa_r+0x4c4>
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d1d3      	bne.n	800909a <_dtoa_r+0x37a>
 80090f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	f000 8082 	beq.w	80091fe <_dtoa_r+0x4de>
 80090fa:	4b91      	ldr	r3, [pc, #580]	; (8009340 <_dtoa_r+0x620>)
 80090fc:	2200      	movs	r2, #0
 80090fe:	4650      	mov	r0, sl
 8009100:	4659      	mov	r1, fp
 8009102:	f7f7 fceb 	bl	8000adc <__aeabi_dcmplt>
 8009106:	2800      	cmp	r0, #0
 8009108:	d079      	beq.n	80091fe <_dtoa_r+0x4de>
 800910a:	9b03      	ldr	r3, [sp, #12]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d076      	beq.n	80091fe <_dtoa_r+0x4de>
 8009110:	9b02      	ldr	r3, [sp, #8]
 8009112:	2b00      	cmp	r3, #0
 8009114:	dd36      	ble.n	8009184 <_dtoa_r+0x464>
 8009116:	9b00      	ldr	r3, [sp, #0]
 8009118:	4650      	mov	r0, sl
 800911a:	4659      	mov	r1, fp
 800911c:	1e5f      	subs	r7, r3, #1
 800911e:	2200      	movs	r2, #0
 8009120:	4b88      	ldr	r3, [pc, #544]	; (8009344 <_dtoa_r+0x624>)
 8009122:	f7f7 fa69 	bl	80005f8 <__aeabi_dmul>
 8009126:	9e02      	ldr	r6, [sp, #8]
 8009128:	4682      	mov	sl, r0
 800912a:	468b      	mov	fp, r1
 800912c:	3501      	adds	r5, #1
 800912e:	4628      	mov	r0, r5
 8009130:	f7f7 f9f8 	bl	8000524 <__aeabi_i2d>
 8009134:	4652      	mov	r2, sl
 8009136:	465b      	mov	r3, fp
 8009138:	f7f7 fa5e 	bl	80005f8 <__aeabi_dmul>
 800913c:	4b82      	ldr	r3, [pc, #520]	; (8009348 <_dtoa_r+0x628>)
 800913e:	2200      	movs	r2, #0
 8009140:	f7f7 f8a4 	bl	800028c <__adddf3>
 8009144:	46d0      	mov	r8, sl
 8009146:	46d9      	mov	r9, fp
 8009148:	4682      	mov	sl, r0
 800914a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800914e:	2e00      	cmp	r6, #0
 8009150:	d158      	bne.n	8009204 <_dtoa_r+0x4e4>
 8009152:	4b7e      	ldr	r3, [pc, #504]	; (800934c <_dtoa_r+0x62c>)
 8009154:	2200      	movs	r2, #0
 8009156:	4640      	mov	r0, r8
 8009158:	4649      	mov	r1, r9
 800915a:	f7f7 f895 	bl	8000288 <__aeabi_dsub>
 800915e:	4652      	mov	r2, sl
 8009160:	465b      	mov	r3, fp
 8009162:	4680      	mov	r8, r0
 8009164:	4689      	mov	r9, r1
 8009166:	f7f7 fcd7 	bl	8000b18 <__aeabi_dcmpgt>
 800916a:	2800      	cmp	r0, #0
 800916c:	f040 8295 	bne.w	800969a <_dtoa_r+0x97a>
 8009170:	4652      	mov	r2, sl
 8009172:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009176:	4640      	mov	r0, r8
 8009178:	4649      	mov	r1, r9
 800917a:	f7f7 fcaf 	bl	8000adc <__aeabi_dcmplt>
 800917e:	2800      	cmp	r0, #0
 8009180:	f040 8289 	bne.w	8009696 <_dtoa_r+0x976>
 8009184:	ec5b ab19 	vmov	sl, fp, d9
 8009188:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800918a:	2b00      	cmp	r3, #0
 800918c:	f2c0 8148 	blt.w	8009420 <_dtoa_r+0x700>
 8009190:	9a00      	ldr	r2, [sp, #0]
 8009192:	2a0e      	cmp	r2, #14
 8009194:	f300 8144 	bgt.w	8009420 <_dtoa_r+0x700>
 8009198:	4b67      	ldr	r3, [pc, #412]	; (8009338 <_dtoa_r+0x618>)
 800919a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800919e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80091a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	f280 80d5 	bge.w	8009354 <_dtoa_r+0x634>
 80091aa:	9b03      	ldr	r3, [sp, #12]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f300 80d1 	bgt.w	8009354 <_dtoa_r+0x634>
 80091b2:	f040 826f 	bne.w	8009694 <_dtoa_r+0x974>
 80091b6:	4b65      	ldr	r3, [pc, #404]	; (800934c <_dtoa_r+0x62c>)
 80091b8:	2200      	movs	r2, #0
 80091ba:	4640      	mov	r0, r8
 80091bc:	4649      	mov	r1, r9
 80091be:	f7f7 fa1b 	bl	80005f8 <__aeabi_dmul>
 80091c2:	4652      	mov	r2, sl
 80091c4:	465b      	mov	r3, fp
 80091c6:	f7f7 fc9d 	bl	8000b04 <__aeabi_dcmpge>
 80091ca:	9e03      	ldr	r6, [sp, #12]
 80091cc:	4637      	mov	r7, r6
 80091ce:	2800      	cmp	r0, #0
 80091d0:	f040 8245 	bne.w	800965e <_dtoa_r+0x93e>
 80091d4:	9d01      	ldr	r5, [sp, #4]
 80091d6:	2331      	movs	r3, #49	; 0x31
 80091d8:	f805 3b01 	strb.w	r3, [r5], #1
 80091dc:	9b00      	ldr	r3, [sp, #0]
 80091de:	3301      	adds	r3, #1
 80091e0:	9300      	str	r3, [sp, #0]
 80091e2:	e240      	b.n	8009666 <_dtoa_r+0x946>
 80091e4:	07f2      	lsls	r2, r6, #31
 80091e6:	d505      	bpl.n	80091f4 <_dtoa_r+0x4d4>
 80091e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091ec:	f7f7 fa04 	bl	80005f8 <__aeabi_dmul>
 80091f0:	3501      	adds	r5, #1
 80091f2:	2301      	movs	r3, #1
 80091f4:	1076      	asrs	r6, r6, #1
 80091f6:	3708      	adds	r7, #8
 80091f8:	e777      	b.n	80090ea <_dtoa_r+0x3ca>
 80091fa:	2502      	movs	r5, #2
 80091fc:	e779      	b.n	80090f2 <_dtoa_r+0x3d2>
 80091fe:	9f00      	ldr	r7, [sp, #0]
 8009200:	9e03      	ldr	r6, [sp, #12]
 8009202:	e794      	b.n	800912e <_dtoa_r+0x40e>
 8009204:	9901      	ldr	r1, [sp, #4]
 8009206:	4b4c      	ldr	r3, [pc, #304]	; (8009338 <_dtoa_r+0x618>)
 8009208:	4431      	add	r1, r6
 800920a:	910d      	str	r1, [sp, #52]	; 0x34
 800920c:	9908      	ldr	r1, [sp, #32]
 800920e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009212:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009216:	2900      	cmp	r1, #0
 8009218:	d043      	beq.n	80092a2 <_dtoa_r+0x582>
 800921a:	494d      	ldr	r1, [pc, #308]	; (8009350 <_dtoa_r+0x630>)
 800921c:	2000      	movs	r0, #0
 800921e:	f7f7 fb15 	bl	800084c <__aeabi_ddiv>
 8009222:	4652      	mov	r2, sl
 8009224:	465b      	mov	r3, fp
 8009226:	f7f7 f82f 	bl	8000288 <__aeabi_dsub>
 800922a:	9d01      	ldr	r5, [sp, #4]
 800922c:	4682      	mov	sl, r0
 800922e:	468b      	mov	fp, r1
 8009230:	4649      	mov	r1, r9
 8009232:	4640      	mov	r0, r8
 8009234:	f7f7 fc90 	bl	8000b58 <__aeabi_d2iz>
 8009238:	4606      	mov	r6, r0
 800923a:	f7f7 f973 	bl	8000524 <__aeabi_i2d>
 800923e:	4602      	mov	r2, r0
 8009240:	460b      	mov	r3, r1
 8009242:	4640      	mov	r0, r8
 8009244:	4649      	mov	r1, r9
 8009246:	f7f7 f81f 	bl	8000288 <__aeabi_dsub>
 800924a:	3630      	adds	r6, #48	; 0x30
 800924c:	f805 6b01 	strb.w	r6, [r5], #1
 8009250:	4652      	mov	r2, sl
 8009252:	465b      	mov	r3, fp
 8009254:	4680      	mov	r8, r0
 8009256:	4689      	mov	r9, r1
 8009258:	f7f7 fc40 	bl	8000adc <__aeabi_dcmplt>
 800925c:	2800      	cmp	r0, #0
 800925e:	d163      	bne.n	8009328 <_dtoa_r+0x608>
 8009260:	4642      	mov	r2, r8
 8009262:	464b      	mov	r3, r9
 8009264:	4936      	ldr	r1, [pc, #216]	; (8009340 <_dtoa_r+0x620>)
 8009266:	2000      	movs	r0, #0
 8009268:	f7f7 f80e 	bl	8000288 <__aeabi_dsub>
 800926c:	4652      	mov	r2, sl
 800926e:	465b      	mov	r3, fp
 8009270:	f7f7 fc34 	bl	8000adc <__aeabi_dcmplt>
 8009274:	2800      	cmp	r0, #0
 8009276:	f040 80b5 	bne.w	80093e4 <_dtoa_r+0x6c4>
 800927a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800927c:	429d      	cmp	r5, r3
 800927e:	d081      	beq.n	8009184 <_dtoa_r+0x464>
 8009280:	4b30      	ldr	r3, [pc, #192]	; (8009344 <_dtoa_r+0x624>)
 8009282:	2200      	movs	r2, #0
 8009284:	4650      	mov	r0, sl
 8009286:	4659      	mov	r1, fp
 8009288:	f7f7 f9b6 	bl	80005f8 <__aeabi_dmul>
 800928c:	4b2d      	ldr	r3, [pc, #180]	; (8009344 <_dtoa_r+0x624>)
 800928e:	4682      	mov	sl, r0
 8009290:	468b      	mov	fp, r1
 8009292:	4640      	mov	r0, r8
 8009294:	4649      	mov	r1, r9
 8009296:	2200      	movs	r2, #0
 8009298:	f7f7 f9ae 	bl	80005f8 <__aeabi_dmul>
 800929c:	4680      	mov	r8, r0
 800929e:	4689      	mov	r9, r1
 80092a0:	e7c6      	b.n	8009230 <_dtoa_r+0x510>
 80092a2:	4650      	mov	r0, sl
 80092a4:	4659      	mov	r1, fp
 80092a6:	f7f7 f9a7 	bl	80005f8 <__aeabi_dmul>
 80092aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092ac:	9d01      	ldr	r5, [sp, #4]
 80092ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80092b0:	4682      	mov	sl, r0
 80092b2:	468b      	mov	fp, r1
 80092b4:	4649      	mov	r1, r9
 80092b6:	4640      	mov	r0, r8
 80092b8:	f7f7 fc4e 	bl	8000b58 <__aeabi_d2iz>
 80092bc:	4606      	mov	r6, r0
 80092be:	f7f7 f931 	bl	8000524 <__aeabi_i2d>
 80092c2:	3630      	adds	r6, #48	; 0x30
 80092c4:	4602      	mov	r2, r0
 80092c6:	460b      	mov	r3, r1
 80092c8:	4640      	mov	r0, r8
 80092ca:	4649      	mov	r1, r9
 80092cc:	f7f6 ffdc 	bl	8000288 <__aeabi_dsub>
 80092d0:	f805 6b01 	strb.w	r6, [r5], #1
 80092d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092d6:	429d      	cmp	r5, r3
 80092d8:	4680      	mov	r8, r0
 80092da:	4689      	mov	r9, r1
 80092dc:	f04f 0200 	mov.w	r2, #0
 80092e0:	d124      	bne.n	800932c <_dtoa_r+0x60c>
 80092e2:	4b1b      	ldr	r3, [pc, #108]	; (8009350 <_dtoa_r+0x630>)
 80092e4:	4650      	mov	r0, sl
 80092e6:	4659      	mov	r1, fp
 80092e8:	f7f6 ffd0 	bl	800028c <__adddf3>
 80092ec:	4602      	mov	r2, r0
 80092ee:	460b      	mov	r3, r1
 80092f0:	4640      	mov	r0, r8
 80092f2:	4649      	mov	r1, r9
 80092f4:	f7f7 fc10 	bl	8000b18 <__aeabi_dcmpgt>
 80092f8:	2800      	cmp	r0, #0
 80092fa:	d173      	bne.n	80093e4 <_dtoa_r+0x6c4>
 80092fc:	4652      	mov	r2, sl
 80092fe:	465b      	mov	r3, fp
 8009300:	4913      	ldr	r1, [pc, #76]	; (8009350 <_dtoa_r+0x630>)
 8009302:	2000      	movs	r0, #0
 8009304:	f7f6 ffc0 	bl	8000288 <__aeabi_dsub>
 8009308:	4602      	mov	r2, r0
 800930a:	460b      	mov	r3, r1
 800930c:	4640      	mov	r0, r8
 800930e:	4649      	mov	r1, r9
 8009310:	f7f7 fbe4 	bl	8000adc <__aeabi_dcmplt>
 8009314:	2800      	cmp	r0, #0
 8009316:	f43f af35 	beq.w	8009184 <_dtoa_r+0x464>
 800931a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800931c:	1e6b      	subs	r3, r5, #1
 800931e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009320:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009324:	2b30      	cmp	r3, #48	; 0x30
 8009326:	d0f8      	beq.n	800931a <_dtoa_r+0x5fa>
 8009328:	9700      	str	r7, [sp, #0]
 800932a:	e049      	b.n	80093c0 <_dtoa_r+0x6a0>
 800932c:	4b05      	ldr	r3, [pc, #20]	; (8009344 <_dtoa_r+0x624>)
 800932e:	f7f7 f963 	bl	80005f8 <__aeabi_dmul>
 8009332:	4680      	mov	r8, r0
 8009334:	4689      	mov	r9, r1
 8009336:	e7bd      	b.n	80092b4 <_dtoa_r+0x594>
 8009338:	0800b0f8 	.word	0x0800b0f8
 800933c:	0800b0d0 	.word	0x0800b0d0
 8009340:	3ff00000 	.word	0x3ff00000
 8009344:	40240000 	.word	0x40240000
 8009348:	401c0000 	.word	0x401c0000
 800934c:	40140000 	.word	0x40140000
 8009350:	3fe00000 	.word	0x3fe00000
 8009354:	9d01      	ldr	r5, [sp, #4]
 8009356:	4656      	mov	r6, sl
 8009358:	465f      	mov	r7, fp
 800935a:	4642      	mov	r2, r8
 800935c:	464b      	mov	r3, r9
 800935e:	4630      	mov	r0, r6
 8009360:	4639      	mov	r1, r7
 8009362:	f7f7 fa73 	bl	800084c <__aeabi_ddiv>
 8009366:	f7f7 fbf7 	bl	8000b58 <__aeabi_d2iz>
 800936a:	4682      	mov	sl, r0
 800936c:	f7f7 f8da 	bl	8000524 <__aeabi_i2d>
 8009370:	4642      	mov	r2, r8
 8009372:	464b      	mov	r3, r9
 8009374:	f7f7 f940 	bl	80005f8 <__aeabi_dmul>
 8009378:	4602      	mov	r2, r0
 800937a:	460b      	mov	r3, r1
 800937c:	4630      	mov	r0, r6
 800937e:	4639      	mov	r1, r7
 8009380:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009384:	f7f6 ff80 	bl	8000288 <__aeabi_dsub>
 8009388:	f805 6b01 	strb.w	r6, [r5], #1
 800938c:	9e01      	ldr	r6, [sp, #4]
 800938e:	9f03      	ldr	r7, [sp, #12]
 8009390:	1bae      	subs	r6, r5, r6
 8009392:	42b7      	cmp	r7, r6
 8009394:	4602      	mov	r2, r0
 8009396:	460b      	mov	r3, r1
 8009398:	d135      	bne.n	8009406 <_dtoa_r+0x6e6>
 800939a:	f7f6 ff77 	bl	800028c <__adddf3>
 800939e:	4642      	mov	r2, r8
 80093a0:	464b      	mov	r3, r9
 80093a2:	4606      	mov	r6, r0
 80093a4:	460f      	mov	r7, r1
 80093a6:	f7f7 fbb7 	bl	8000b18 <__aeabi_dcmpgt>
 80093aa:	b9d0      	cbnz	r0, 80093e2 <_dtoa_r+0x6c2>
 80093ac:	4642      	mov	r2, r8
 80093ae:	464b      	mov	r3, r9
 80093b0:	4630      	mov	r0, r6
 80093b2:	4639      	mov	r1, r7
 80093b4:	f7f7 fb88 	bl	8000ac8 <__aeabi_dcmpeq>
 80093b8:	b110      	cbz	r0, 80093c0 <_dtoa_r+0x6a0>
 80093ba:	f01a 0f01 	tst.w	sl, #1
 80093be:	d110      	bne.n	80093e2 <_dtoa_r+0x6c2>
 80093c0:	4620      	mov	r0, r4
 80093c2:	ee18 1a10 	vmov	r1, s16
 80093c6:	f000 fd13 	bl	8009df0 <_Bfree>
 80093ca:	2300      	movs	r3, #0
 80093cc:	9800      	ldr	r0, [sp, #0]
 80093ce:	702b      	strb	r3, [r5, #0]
 80093d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093d2:	3001      	adds	r0, #1
 80093d4:	6018      	str	r0, [r3, #0]
 80093d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093d8:	2b00      	cmp	r3, #0
 80093da:	f43f acf1 	beq.w	8008dc0 <_dtoa_r+0xa0>
 80093de:	601d      	str	r5, [r3, #0]
 80093e0:	e4ee      	b.n	8008dc0 <_dtoa_r+0xa0>
 80093e2:	9f00      	ldr	r7, [sp, #0]
 80093e4:	462b      	mov	r3, r5
 80093e6:	461d      	mov	r5, r3
 80093e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80093ec:	2a39      	cmp	r2, #57	; 0x39
 80093ee:	d106      	bne.n	80093fe <_dtoa_r+0x6de>
 80093f0:	9a01      	ldr	r2, [sp, #4]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d1f7      	bne.n	80093e6 <_dtoa_r+0x6c6>
 80093f6:	9901      	ldr	r1, [sp, #4]
 80093f8:	2230      	movs	r2, #48	; 0x30
 80093fa:	3701      	adds	r7, #1
 80093fc:	700a      	strb	r2, [r1, #0]
 80093fe:	781a      	ldrb	r2, [r3, #0]
 8009400:	3201      	adds	r2, #1
 8009402:	701a      	strb	r2, [r3, #0]
 8009404:	e790      	b.n	8009328 <_dtoa_r+0x608>
 8009406:	4ba6      	ldr	r3, [pc, #664]	; (80096a0 <_dtoa_r+0x980>)
 8009408:	2200      	movs	r2, #0
 800940a:	f7f7 f8f5 	bl	80005f8 <__aeabi_dmul>
 800940e:	2200      	movs	r2, #0
 8009410:	2300      	movs	r3, #0
 8009412:	4606      	mov	r6, r0
 8009414:	460f      	mov	r7, r1
 8009416:	f7f7 fb57 	bl	8000ac8 <__aeabi_dcmpeq>
 800941a:	2800      	cmp	r0, #0
 800941c:	d09d      	beq.n	800935a <_dtoa_r+0x63a>
 800941e:	e7cf      	b.n	80093c0 <_dtoa_r+0x6a0>
 8009420:	9a08      	ldr	r2, [sp, #32]
 8009422:	2a00      	cmp	r2, #0
 8009424:	f000 80d7 	beq.w	80095d6 <_dtoa_r+0x8b6>
 8009428:	9a06      	ldr	r2, [sp, #24]
 800942a:	2a01      	cmp	r2, #1
 800942c:	f300 80ba 	bgt.w	80095a4 <_dtoa_r+0x884>
 8009430:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009432:	2a00      	cmp	r2, #0
 8009434:	f000 80b2 	beq.w	800959c <_dtoa_r+0x87c>
 8009438:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800943c:	9e07      	ldr	r6, [sp, #28]
 800943e:	9d04      	ldr	r5, [sp, #16]
 8009440:	9a04      	ldr	r2, [sp, #16]
 8009442:	441a      	add	r2, r3
 8009444:	9204      	str	r2, [sp, #16]
 8009446:	9a05      	ldr	r2, [sp, #20]
 8009448:	2101      	movs	r1, #1
 800944a:	441a      	add	r2, r3
 800944c:	4620      	mov	r0, r4
 800944e:	9205      	str	r2, [sp, #20]
 8009450:	f000 fd86 	bl	8009f60 <__i2b>
 8009454:	4607      	mov	r7, r0
 8009456:	2d00      	cmp	r5, #0
 8009458:	dd0c      	ble.n	8009474 <_dtoa_r+0x754>
 800945a:	9b05      	ldr	r3, [sp, #20]
 800945c:	2b00      	cmp	r3, #0
 800945e:	dd09      	ble.n	8009474 <_dtoa_r+0x754>
 8009460:	42ab      	cmp	r3, r5
 8009462:	9a04      	ldr	r2, [sp, #16]
 8009464:	bfa8      	it	ge
 8009466:	462b      	movge	r3, r5
 8009468:	1ad2      	subs	r2, r2, r3
 800946a:	9204      	str	r2, [sp, #16]
 800946c:	9a05      	ldr	r2, [sp, #20]
 800946e:	1aed      	subs	r5, r5, r3
 8009470:	1ad3      	subs	r3, r2, r3
 8009472:	9305      	str	r3, [sp, #20]
 8009474:	9b07      	ldr	r3, [sp, #28]
 8009476:	b31b      	cbz	r3, 80094c0 <_dtoa_r+0x7a0>
 8009478:	9b08      	ldr	r3, [sp, #32]
 800947a:	2b00      	cmp	r3, #0
 800947c:	f000 80af 	beq.w	80095de <_dtoa_r+0x8be>
 8009480:	2e00      	cmp	r6, #0
 8009482:	dd13      	ble.n	80094ac <_dtoa_r+0x78c>
 8009484:	4639      	mov	r1, r7
 8009486:	4632      	mov	r2, r6
 8009488:	4620      	mov	r0, r4
 800948a:	f000 fe29 	bl	800a0e0 <__pow5mult>
 800948e:	ee18 2a10 	vmov	r2, s16
 8009492:	4601      	mov	r1, r0
 8009494:	4607      	mov	r7, r0
 8009496:	4620      	mov	r0, r4
 8009498:	f000 fd78 	bl	8009f8c <__multiply>
 800949c:	ee18 1a10 	vmov	r1, s16
 80094a0:	4680      	mov	r8, r0
 80094a2:	4620      	mov	r0, r4
 80094a4:	f000 fca4 	bl	8009df0 <_Bfree>
 80094a8:	ee08 8a10 	vmov	s16, r8
 80094ac:	9b07      	ldr	r3, [sp, #28]
 80094ae:	1b9a      	subs	r2, r3, r6
 80094b0:	d006      	beq.n	80094c0 <_dtoa_r+0x7a0>
 80094b2:	ee18 1a10 	vmov	r1, s16
 80094b6:	4620      	mov	r0, r4
 80094b8:	f000 fe12 	bl	800a0e0 <__pow5mult>
 80094bc:	ee08 0a10 	vmov	s16, r0
 80094c0:	2101      	movs	r1, #1
 80094c2:	4620      	mov	r0, r4
 80094c4:	f000 fd4c 	bl	8009f60 <__i2b>
 80094c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	4606      	mov	r6, r0
 80094ce:	f340 8088 	ble.w	80095e2 <_dtoa_r+0x8c2>
 80094d2:	461a      	mov	r2, r3
 80094d4:	4601      	mov	r1, r0
 80094d6:	4620      	mov	r0, r4
 80094d8:	f000 fe02 	bl	800a0e0 <__pow5mult>
 80094dc:	9b06      	ldr	r3, [sp, #24]
 80094de:	2b01      	cmp	r3, #1
 80094e0:	4606      	mov	r6, r0
 80094e2:	f340 8081 	ble.w	80095e8 <_dtoa_r+0x8c8>
 80094e6:	f04f 0800 	mov.w	r8, #0
 80094ea:	6933      	ldr	r3, [r6, #16]
 80094ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80094f0:	6918      	ldr	r0, [r3, #16]
 80094f2:	f000 fce5 	bl	8009ec0 <__hi0bits>
 80094f6:	f1c0 0020 	rsb	r0, r0, #32
 80094fa:	9b05      	ldr	r3, [sp, #20]
 80094fc:	4418      	add	r0, r3
 80094fe:	f010 001f 	ands.w	r0, r0, #31
 8009502:	f000 8092 	beq.w	800962a <_dtoa_r+0x90a>
 8009506:	f1c0 0320 	rsb	r3, r0, #32
 800950a:	2b04      	cmp	r3, #4
 800950c:	f340 808a 	ble.w	8009624 <_dtoa_r+0x904>
 8009510:	f1c0 001c 	rsb	r0, r0, #28
 8009514:	9b04      	ldr	r3, [sp, #16]
 8009516:	4403      	add	r3, r0
 8009518:	9304      	str	r3, [sp, #16]
 800951a:	9b05      	ldr	r3, [sp, #20]
 800951c:	4403      	add	r3, r0
 800951e:	4405      	add	r5, r0
 8009520:	9305      	str	r3, [sp, #20]
 8009522:	9b04      	ldr	r3, [sp, #16]
 8009524:	2b00      	cmp	r3, #0
 8009526:	dd07      	ble.n	8009538 <_dtoa_r+0x818>
 8009528:	ee18 1a10 	vmov	r1, s16
 800952c:	461a      	mov	r2, r3
 800952e:	4620      	mov	r0, r4
 8009530:	f000 fe30 	bl	800a194 <__lshift>
 8009534:	ee08 0a10 	vmov	s16, r0
 8009538:	9b05      	ldr	r3, [sp, #20]
 800953a:	2b00      	cmp	r3, #0
 800953c:	dd05      	ble.n	800954a <_dtoa_r+0x82a>
 800953e:	4631      	mov	r1, r6
 8009540:	461a      	mov	r2, r3
 8009542:	4620      	mov	r0, r4
 8009544:	f000 fe26 	bl	800a194 <__lshift>
 8009548:	4606      	mov	r6, r0
 800954a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800954c:	2b00      	cmp	r3, #0
 800954e:	d06e      	beq.n	800962e <_dtoa_r+0x90e>
 8009550:	ee18 0a10 	vmov	r0, s16
 8009554:	4631      	mov	r1, r6
 8009556:	f000 fe8d 	bl	800a274 <__mcmp>
 800955a:	2800      	cmp	r0, #0
 800955c:	da67      	bge.n	800962e <_dtoa_r+0x90e>
 800955e:	9b00      	ldr	r3, [sp, #0]
 8009560:	3b01      	subs	r3, #1
 8009562:	ee18 1a10 	vmov	r1, s16
 8009566:	9300      	str	r3, [sp, #0]
 8009568:	220a      	movs	r2, #10
 800956a:	2300      	movs	r3, #0
 800956c:	4620      	mov	r0, r4
 800956e:	f000 fc61 	bl	8009e34 <__multadd>
 8009572:	9b08      	ldr	r3, [sp, #32]
 8009574:	ee08 0a10 	vmov	s16, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	f000 81b1 	beq.w	80098e0 <_dtoa_r+0xbc0>
 800957e:	2300      	movs	r3, #0
 8009580:	4639      	mov	r1, r7
 8009582:	220a      	movs	r2, #10
 8009584:	4620      	mov	r0, r4
 8009586:	f000 fc55 	bl	8009e34 <__multadd>
 800958a:	9b02      	ldr	r3, [sp, #8]
 800958c:	2b00      	cmp	r3, #0
 800958e:	4607      	mov	r7, r0
 8009590:	f300 808e 	bgt.w	80096b0 <_dtoa_r+0x990>
 8009594:	9b06      	ldr	r3, [sp, #24]
 8009596:	2b02      	cmp	r3, #2
 8009598:	dc51      	bgt.n	800963e <_dtoa_r+0x91e>
 800959a:	e089      	b.n	80096b0 <_dtoa_r+0x990>
 800959c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800959e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80095a2:	e74b      	b.n	800943c <_dtoa_r+0x71c>
 80095a4:	9b03      	ldr	r3, [sp, #12]
 80095a6:	1e5e      	subs	r6, r3, #1
 80095a8:	9b07      	ldr	r3, [sp, #28]
 80095aa:	42b3      	cmp	r3, r6
 80095ac:	bfbf      	itttt	lt
 80095ae:	9b07      	ldrlt	r3, [sp, #28]
 80095b0:	9607      	strlt	r6, [sp, #28]
 80095b2:	1af2      	sublt	r2, r6, r3
 80095b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80095b6:	bfb6      	itet	lt
 80095b8:	189b      	addlt	r3, r3, r2
 80095ba:	1b9e      	subge	r6, r3, r6
 80095bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80095be:	9b03      	ldr	r3, [sp, #12]
 80095c0:	bfb8      	it	lt
 80095c2:	2600      	movlt	r6, #0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	bfb7      	itett	lt
 80095c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80095cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80095d0:	1a9d      	sublt	r5, r3, r2
 80095d2:	2300      	movlt	r3, #0
 80095d4:	e734      	b.n	8009440 <_dtoa_r+0x720>
 80095d6:	9e07      	ldr	r6, [sp, #28]
 80095d8:	9d04      	ldr	r5, [sp, #16]
 80095da:	9f08      	ldr	r7, [sp, #32]
 80095dc:	e73b      	b.n	8009456 <_dtoa_r+0x736>
 80095de:	9a07      	ldr	r2, [sp, #28]
 80095e0:	e767      	b.n	80094b2 <_dtoa_r+0x792>
 80095e2:	9b06      	ldr	r3, [sp, #24]
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	dc18      	bgt.n	800961a <_dtoa_r+0x8fa>
 80095e8:	f1ba 0f00 	cmp.w	sl, #0
 80095ec:	d115      	bne.n	800961a <_dtoa_r+0x8fa>
 80095ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80095f2:	b993      	cbnz	r3, 800961a <_dtoa_r+0x8fa>
 80095f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80095f8:	0d1b      	lsrs	r3, r3, #20
 80095fa:	051b      	lsls	r3, r3, #20
 80095fc:	b183      	cbz	r3, 8009620 <_dtoa_r+0x900>
 80095fe:	9b04      	ldr	r3, [sp, #16]
 8009600:	3301      	adds	r3, #1
 8009602:	9304      	str	r3, [sp, #16]
 8009604:	9b05      	ldr	r3, [sp, #20]
 8009606:	3301      	adds	r3, #1
 8009608:	9305      	str	r3, [sp, #20]
 800960a:	f04f 0801 	mov.w	r8, #1
 800960e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009610:	2b00      	cmp	r3, #0
 8009612:	f47f af6a 	bne.w	80094ea <_dtoa_r+0x7ca>
 8009616:	2001      	movs	r0, #1
 8009618:	e76f      	b.n	80094fa <_dtoa_r+0x7da>
 800961a:	f04f 0800 	mov.w	r8, #0
 800961e:	e7f6      	b.n	800960e <_dtoa_r+0x8ee>
 8009620:	4698      	mov	r8, r3
 8009622:	e7f4      	b.n	800960e <_dtoa_r+0x8ee>
 8009624:	f43f af7d 	beq.w	8009522 <_dtoa_r+0x802>
 8009628:	4618      	mov	r0, r3
 800962a:	301c      	adds	r0, #28
 800962c:	e772      	b.n	8009514 <_dtoa_r+0x7f4>
 800962e:	9b03      	ldr	r3, [sp, #12]
 8009630:	2b00      	cmp	r3, #0
 8009632:	dc37      	bgt.n	80096a4 <_dtoa_r+0x984>
 8009634:	9b06      	ldr	r3, [sp, #24]
 8009636:	2b02      	cmp	r3, #2
 8009638:	dd34      	ble.n	80096a4 <_dtoa_r+0x984>
 800963a:	9b03      	ldr	r3, [sp, #12]
 800963c:	9302      	str	r3, [sp, #8]
 800963e:	9b02      	ldr	r3, [sp, #8]
 8009640:	b96b      	cbnz	r3, 800965e <_dtoa_r+0x93e>
 8009642:	4631      	mov	r1, r6
 8009644:	2205      	movs	r2, #5
 8009646:	4620      	mov	r0, r4
 8009648:	f000 fbf4 	bl	8009e34 <__multadd>
 800964c:	4601      	mov	r1, r0
 800964e:	4606      	mov	r6, r0
 8009650:	ee18 0a10 	vmov	r0, s16
 8009654:	f000 fe0e 	bl	800a274 <__mcmp>
 8009658:	2800      	cmp	r0, #0
 800965a:	f73f adbb 	bgt.w	80091d4 <_dtoa_r+0x4b4>
 800965e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009660:	9d01      	ldr	r5, [sp, #4]
 8009662:	43db      	mvns	r3, r3
 8009664:	9300      	str	r3, [sp, #0]
 8009666:	f04f 0800 	mov.w	r8, #0
 800966a:	4631      	mov	r1, r6
 800966c:	4620      	mov	r0, r4
 800966e:	f000 fbbf 	bl	8009df0 <_Bfree>
 8009672:	2f00      	cmp	r7, #0
 8009674:	f43f aea4 	beq.w	80093c0 <_dtoa_r+0x6a0>
 8009678:	f1b8 0f00 	cmp.w	r8, #0
 800967c:	d005      	beq.n	800968a <_dtoa_r+0x96a>
 800967e:	45b8      	cmp	r8, r7
 8009680:	d003      	beq.n	800968a <_dtoa_r+0x96a>
 8009682:	4641      	mov	r1, r8
 8009684:	4620      	mov	r0, r4
 8009686:	f000 fbb3 	bl	8009df0 <_Bfree>
 800968a:	4639      	mov	r1, r7
 800968c:	4620      	mov	r0, r4
 800968e:	f000 fbaf 	bl	8009df0 <_Bfree>
 8009692:	e695      	b.n	80093c0 <_dtoa_r+0x6a0>
 8009694:	2600      	movs	r6, #0
 8009696:	4637      	mov	r7, r6
 8009698:	e7e1      	b.n	800965e <_dtoa_r+0x93e>
 800969a:	9700      	str	r7, [sp, #0]
 800969c:	4637      	mov	r7, r6
 800969e:	e599      	b.n	80091d4 <_dtoa_r+0x4b4>
 80096a0:	40240000 	.word	0x40240000
 80096a4:	9b08      	ldr	r3, [sp, #32]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	f000 80ca 	beq.w	8009840 <_dtoa_r+0xb20>
 80096ac:	9b03      	ldr	r3, [sp, #12]
 80096ae:	9302      	str	r3, [sp, #8]
 80096b0:	2d00      	cmp	r5, #0
 80096b2:	dd05      	ble.n	80096c0 <_dtoa_r+0x9a0>
 80096b4:	4639      	mov	r1, r7
 80096b6:	462a      	mov	r2, r5
 80096b8:	4620      	mov	r0, r4
 80096ba:	f000 fd6b 	bl	800a194 <__lshift>
 80096be:	4607      	mov	r7, r0
 80096c0:	f1b8 0f00 	cmp.w	r8, #0
 80096c4:	d05b      	beq.n	800977e <_dtoa_r+0xa5e>
 80096c6:	6879      	ldr	r1, [r7, #4]
 80096c8:	4620      	mov	r0, r4
 80096ca:	f000 fb51 	bl	8009d70 <_Balloc>
 80096ce:	4605      	mov	r5, r0
 80096d0:	b928      	cbnz	r0, 80096de <_dtoa_r+0x9be>
 80096d2:	4b87      	ldr	r3, [pc, #540]	; (80098f0 <_dtoa_r+0xbd0>)
 80096d4:	4602      	mov	r2, r0
 80096d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80096da:	f7ff bb3b 	b.w	8008d54 <_dtoa_r+0x34>
 80096de:	693a      	ldr	r2, [r7, #16]
 80096e0:	3202      	adds	r2, #2
 80096e2:	0092      	lsls	r2, r2, #2
 80096e4:	f107 010c 	add.w	r1, r7, #12
 80096e8:	300c      	adds	r0, #12
 80096ea:	f000 fb33 	bl	8009d54 <memcpy>
 80096ee:	2201      	movs	r2, #1
 80096f0:	4629      	mov	r1, r5
 80096f2:	4620      	mov	r0, r4
 80096f4:	f000 fd4e 	bl	800a194 <__lshift>
 80096f8:	9b01      	ldr	r3, [sp, #4]
 80096fa:	f103 0901 	add.w	r9, r3, #1
 80096fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009702:	4413      	add	r3, r2
 8009704:	9305      	str	r3, [sp, #20]
 8009706:	f00a 0301 	and.w	r3, sl, #1
 800970a:	46b8      	mov	r8, r7
 800970c:	9304      	str	r3, [sp, #16]
 800970e:	4607      	mov	r7, r0
 8009710:	4631      	mov	r1, r6
 8009712:	ee18 0a10 	vmov	r0, s16
 8009716:	f7ff fa75 	bl	8008c04 <quorem>
 800971a:	4641      	mov	r1, r8
 800971c:	9002      	str	r0, [sp, #8]
 800971e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009722:	ee18 0a10 	vmov	r0, s16
 8009726:	f000 fda5 	bl	800a274 <__mcmp>
 800972a:	463a      	mov	r2, r7
 800972c:	9003      	str	r0, [sp, #12]
 800972e:	4631      	mov	r1, r6
 8009730:	4620      	mov	r0, r4
 8009732:	f000 fdbb 	bl	800a2ac <__mdiff>
 8009736:	68c2      	ldr	r2, [r0, #12]
 8009738:	f109 3bff 	add.w	fp, r9, #4294967295
 800973c:	4605      	mov	r5, r0
 800973e:	bb02      	cbnz	r2, 8009782 <_dtoa_r+0xa62>
 8009740:	4601      	mov	r1, r0
 8009742:	ee18 0a10 	vmov	r0, s16
 8009746:	f000 fd95 	bl	800a274 <__mcmp>
 800974a:	4602      	mov	r2, r0
 800974c:	4629      	mov	r1, r5
 800974e:	4620      	mov	r0, r4
 8009750:	9207      	str	r2, [sp, #28]
 8009752:	f000 fb4d 	bl	8009df0 <_Bfree>
 8009756:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800975a:	ea43 0102 	orr.w	r1, r3, r2
 800975e:	9b04      	ldr	r3, [sp, #16]
 8009760:	430b      	orrs	r3, r1
 8009762:	464d      	mov	r5, r9
 8009764:	d10f      	bne.n	8009786 <_dtoa_r+0xa66>
 8009766:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800976a:	d02a      	beq.n	80097c2 <_dtoa_r+0xaa2>
 800976c:	9b03      	ldr	r3, [sp, #12]
 800976e:	2b00      	cmp	r3, #0
 8009770:	dd02      	ble.n	8009778 <_dtoa_r+0xa58>
 8009772:	9b02      	ldr	r3, [sp, #8]
 8009774:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009778:	f88b a000 	strb.w	sl, [fp]
 800977c:	e775      	b.n	800966a <_dtoa_r+0x94a>
 800977e:	4638      	mov	r0, r7
 8009780:	e7ba      	b.n	80096f8 <_dtoa_r+0x9d8>
 8009782:	2201      	movs	r2, #1
 8009784:	e7e2      	b.n	800974c <_dtoa_r+0xa2c>
 8009786:	9b03      	ldr	r3, [sp, #12]
 8009788:	2b00      	cmp	r3, #0
 800978a:	db04      	blt.n	8009796 <_dtoa_r+0xa76>
 800978c:	9906      	ldr	r1, [sp, #24]
 800978e:	430b      	orrs	r3, r1
 8009790:	9904      	ldr	r1, [sp, #16]
 8009792:	430b      	orrs	r3, r1
 8009794:	d122      	bne.n	80097dc <_dtoa_r+0xabc>
 8009796:	2a00      	cmp	r2, #0
 8009798:	ddee      	ble.n	8009778 <_dtoa_r+0xa58>
 800979a:	ee18 1a10 	vmov	r1, s16
 800979e:	2201      	movs	r2, #1
 80097a0:	4620      	mov	r0, r4
 80097a2:	f000 fcf7 	bl	800a194 <__lshift>
 80097a6:	4631      	mov	r1, r6
 80097a8:	ee08 0a10 	vmov	s16, r0
 80097ac:	f000 fd62 	bl	800a274 <__mcmp>
 80097b0:	2800      	cmp	r0, #0
 80097b2:	dc03      	bgt.n	80097bc <_dtoa_r+0xa9c>
 80097b4:	d1e0      	bne.n	8009778 <_dtoa_r+0xa58>
 80097b6:	f01a 0f01 	tst.w	sl, #1
 80097ba:	d0dd      	beq.n	8009778 <_dtoa_r+0xa58>
 80097bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80097c0:	d1d7      	bne.n	8009772 <_dtoa_r+0xa52>
 80097c2:	2339      	movs	r3, #57	; 0x39
 80097c4:	f88b 3000 	strb.w	r3, [fp]
 80097c8:	462b      	mov	r3, r5
 80097ca:	461d      	mov	r5, r3
 80097cc:	3b01      	subs	r3, #1
 80097ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80097d2:	2a39      	cmp	r2, #57	; 0x39
 80097d4:	d071      	beq.n	80098ba <_dtoa_r+0xb9a>
 80097d6:	3201      	adds	r2, #1
 80097d8:	701a      	strb	r2, [r3, #0]
 80097da:	e746      	b.n	800966a <_dtoa_r+0x94a>
 80097dc:	2a00      	cmp	r2, #0
 80097de:	dd07      	ble.n	80097f0 <_dtoa_r+0xad0>
 80097e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80097e4:	d0ed      	beq.n	80097c2 <_dtoa_r+0xaa2>
 80097e6:	f10a 0301 	add.w	r3, sl, #1
 80097ea:	f88b 3000 	strb.w	r3, [fp]
 80097ee:	e73c      	b.n	800966a <_dtoa_r+0x94a>
 80097f0:	9b05      	ldr	r3, [sp, #20]
 80097f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80097f6:	4599      	cmp	r9, r3
 80097f8:	d047      	beq.n	800988a <_dtoa_r+0xb6a>
 80097fa:	ee18 1a10 	vmov	r1, s16
 80097fe:	2300      	movs	r3, #0
 8009800:	220a      	movs	r2, #10
 8009802:	4620      	mov	r0, r4
 8009804:	f000 fb16 	bl	8009e34 <__multadd>
 8009808:	45b8      	cmp	r8, r7
 800980a:	ee08 0a10 	vmov	s16, r0
 800980e:	f04f 0300 	mov.w	r3, #0
 8009812:	f04f 020a 	mov.w	r2, #10
 8009816:	4641      	mov	r1, r8
 8009818:	4620      	mov	r0, r4
 800981a:	d106      	bne.n	800982a <_dtoa_r+0xb0a>
 800981c:	f000 fb0a 	bl	8009e34 <__multadd>
 8009820:	4680      	mov	r8, r0
 8009822:	4607      	mov	r7, r0
 8009824:	f109 0901 	add.w	r9, r9, #1
 8009828:	e772      	b.n	8009710 <_dtoa_r+0x9f0>
 800982a:	f000 fb03 	bl	8009e34 <__multadd>
 800982e:	4639      	mov	r1, r7
 8009830:	4680      	mov	r8, r0
 8009832:	2300      	movs	r3, #0
 8009834:	220a      	movs	r2, #10
 8009836:	4620      	mov	r0, r4
 8009838:	f000 fafc 	bl	8009e34 <__multadd>
 800983c:	4607      	mov	r7, r0
 800983e:	e7f1      	b.n	8009824 <_dtoa_r+0xb04>
 8009840:	9b03      	ldr	r3, [sp, #12]
 8009842:	9302      	str	r3, [sp, #8]
 8009844:	9d01      	ldr	r5, [sp, #4]
 8009846:	ee18 0a10 	vmov	r0, s16
 800984a:	4631      	mov	r1, r6
 800984c:	f7ff f9da 	bl	8008c04 <quorem>
 8009850:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009854:	9b01      	ldr	r3, [sp, #4]
 8009856:	f805 ab01 	strb.w	sl, [r5], #1
 800985a:	1aea      	subs	r2, r5, r3
 800985c:	9b02      	ldr	r3, [sp, #8]
 800985e:	4293      	cmp	r3, r2
 8009860:	dd09      	ble.n	8009876 <_dtoa_r+0xb56>
 8009862:	ee18 1a10 	vmov	r1, s16
 8009866:	2300      	movs	r3, #0
 8009868:	220a      	movs	r2, #10
 800986a:	4620      	mov	r0, r4
 800986c:	f000 fae2 	bl	8009e34 <__multadd>
 8009870:	ee08 0a10 	vmov	s16, r0
 8009874:	e7e7      	b.n	8009846 <_dtoa_r+0xb26>
 8009876:	9b02      	ldr	r3, [sp, #8]
 8009878:	2b00      	cmp	r3, #0
 800987a:	bfc8      	it	gt
 800987c:	461d      	movgt	r5, r3
 800987e:	9b01      	ldr	r3, [sp, #4]
 8009880:	bfd8      	it	le
 8009882:	2501      	movle	r5, #1
 8009884:	441d      	add	r5, r3
 8009886:	f04f 0800 	mov.w	r8, #0
 800988a:	ee18 1a10 	vmov	r1, s16
 800988e:	2201      	movs	r2, #1
 8009890:	4620      	mov	r0, r4
 8009892:	f000 fc7f 	bl	800a194 <__lshift>
 8009896:	4631      	mov	r1, r6
 8009898:	ee08 0a10 	vmov	s16, r0
 800989c:	f000 fcea 	bl	800a274 <__mcmp>
 80098a0:	2800      	cmp	r0, #0
 80098a2:	dc91      	bgt.n	80097c8 <_dtoa_r+0xaa8>
 80098a4:	d102      	bne.n	80098ac <_dtoa_r+0xb8c>
 80098a6:	f01a 0f01 	tst.w	sl, #1
 80098aa:	d18d      	bne.n	80097c8 <_dtoa_r+0xaa8>
 80098ac:	462b      	mov	r3, r5
 80098ae:	461d      	mov	r5, r3
 80098b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80098b4:	2a30      	cmp	r2, #48	; 0x30
 80098b6:	d0fa      	beq.n	80098ae <_dtoa_r+0xb8e>
 80098b8:	e6d7      	b.n	800966a <_dtoa_r+0x94a>
 80098ba:	9a01      	ldr	r2, [sp, #4]
 80098bc:	429a      	cmp	r2, r3
 80098be:	d184      	bne.n	80097ca <_dtoa_r+0xaaa>
 80098c0:	9b00      	ldr	r3, [sp, #0]
 80098c2:	3301      	adds	r3, #1
 80098c4:	9300      	str	r3, [sp, #0]
 80098c6:	2331      	movs	r3, #49	; 0x31
 80098c8:	7013      	strb	r3, [r2, #0]
 80098ca:	e6ce      	b.n	800966a <_dtoa_r+0x94a>
 80098cc:	4b09      	ldr	r3, [pc, #36]	; (80098f4 <_dtoa_r+0xbd4>)
 80098ce:	f7ff ba95 	b.w	8008dfc <_dtoa_r+0xdc>
 80098d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	f47f aa6e 	bne.w	8008db6 <_dtoa_r+0x96>
 80098da:	4b07      	ldr	r3, [pc, #28]	; (80098f8 <_dtoa_r+0xbd8>)
 80098dc:	f7ff ba8e 	b.w	8008dfc <_dtoa_r+0xdc>
 80098e0:	9b02      	ldr	r3, [sp, #8]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	dcae      	bgt.n	8009844 <_dtoa_r+0xb24>
 80098e6:	9b06      	ldr	r3, [sp, #24]
 80098e8:	2b02      	cmp	r3, #2
 80098ea:	f73f aea8 	bgt.w	800963e <_dtoa_r+0x91e>
 80098ee:	e7a9      	b.n	8009844 <_dtoa_r+0xb24>
 80098f0:	0800afff 	.word	0x0800afff
 80098f4:	0800af5c 	.word	0x0800af5c
 80098f8:	0800af80 	.word	0x0800af80

080098fc <__sflush_r>:
 80098fc:	898a      	ldrh	r2, [r1, #12]
 80098fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009902:	4605      	mov	r5, r0
 8009904:	0710      	lsls	r0, r2, #28
 8009906:	460c      	mov	r4, r1
 8009908:	d458      	bmi.n	80099bc <__sflush_r+0xc0>
 800990a:	684b      	ldr	r3, [r1, #4]
 800990c:	2b00      	cmp	r3, #0
 800990e:	dc05      	bgt.n	800991c <__sflush_r+0x20>
 8009910:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009912:	2b00      	cmp	r3, #0
 8009914:	dc02      	bgt.n	800991c <__sflush_r+0x20>
 8009916:	2000      	movs	r0, #0
 8009918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800991c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800991e:	2e00      	cmp	r6, #0
 8009920:	d0f9      	beq.n	8009916 <__sflush_r+0x1a>
 8009922:	2300      	movs	r3, #0
 8009924:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009928:	682f      	ldr	r7, [r5, #0]
 800992a:	602b      	str	r3, [r5, #0]
 800992c:	d032      	beq.n	8009994 <__sflush_r+0x98>
 800992e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009930:	89a3      	ldrh	r3, [r4, #12]
 8009932:	075a      	lsls	r2, r3, #29
 8009934:	d505      	bpl.n	8009942 <__sflush_r+0x46>
 8009936:	6863      	ldr	r3, [r4, #4]
 8009938:	1ac0      	subs	r0, r0, r3
 800993a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800993c:	b10b      	cbz	r3, 8009942 <__sflush_r+0x46>
 800993e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009940:	1ac0      	subs	r0, r0, r3
 8009942:	2300      	movs	r3, #0
 8009944:	4602      	mov	r2, r0
 8009946:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009948:	6a21      	ldr	r1, [r4, #32]
 800994a:	4628      	mov	r0, r5
 800994c:	47b0      	blx	r6
 800994e:	1c43      	adds	r3, r0, #1
 8009950:	89a3      	ldrh	r3, [r4, #12]
 8009952:	d106      	bne.n	8009962 <__sflush_r+0x66>
 8009954:	6829      	ldr	r1, [r5, #0]
 8009956:	291d      	cmp	r1, #29
 8009958:	d82c      	bhi.n	80099b4 <__sflush_r+0xb8>
 800995a:	4a2a      	ldr	r2, [pc, #168]	; (8009a04 <__sflush_r+0x108>)
 800995c:	40ca      	lsrs	r2, r1
 800995e:	07d6      	lsls	r6, r2, #31
 8009960:	d528      	bpl.n	80099b4 <__sflush_r+0xb8>
 8009962:	2200      	movs	r2, #0
 8009964:	6062      	str	r2, [r4, #4]
 8009966:	04d9      	lsls	r1, r3, #19
 8009968:	6922      	ldr	r2, [r4, #16]
 800996a:	6022      	str	r2, [r4, #0]
 800996c:	d504      	bpl.n	8009978 <__sflush_r+0x7c>
 800996e:	1c42      	adds	r2, r0, #1
 8009970:	d101      	bne.n	8009976 <__sflush_r+0x7a>
 8009972:	682b      	ldr	r3, [r5, #0]
 8009974:	b903      	cbnz	r3, 8009978 <__sflush_r+0x7c>
 8009976:	6560      	str	r0, [r4, #84]	; 0x54
 8009978:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800997a:	602f      	str	r7, [r5, #0]
 800997c:	2900      	cmp	r1, #0
 800997e:	d0ca      	beq.n	8009916 <__sflush_r+0x1a>
 8009980:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009984:	4299      	cmp	r1, r3
 8009986:	d002      	beq.n	800998e <__sflush_r+0x92>
 8009988:	4628      	mov	r0, r5
 800998a:	f000 fd8b 	bl	800a4a4 <_free_r>
 800998e:	2000      	movs	r0, #0
 8009990:	6360      	str	r0, [r4, #52]	; 0x34
 8009992:	e7c1      	b.n	8009918 <__sflush_r+0x1c>
 8009994:	6a21      	ldr	r1, [r4, #32]
 8009996:	2301      	movs	r3, #1
 8009998:	4628      	mov	r0, r5
 800999a:	47b0      	blx	r6
 800999c:	1c41      	adds	r1, r0, #1
 800999e:	d1c7      	bne.n	8009930 <__sflush_r+0x34>
 80099a0:	682b      	ldr	r3, [r5, #0]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d0c4      	beq.n	8009930 <__sflush_r+0x34>
 80099a6:	2b1d      	cmp	r3, #29
 80099a8:	d001      	beq.n	80099ae <__sflush_r+0xb2>
 80099aa:	2b16      	cmp	r3, #22
 80099ac:	d101      	bne.n	80099b2 <__sflush_r+0xb6>
 80099ae:	602f      	str	r7, [r5, #0]
 80099b0:	e7b1      	b.n	8009916 <__sflush_r+0x1a>
 80099b2:	89a3      	ldrh	r3, [r4, #12]
 80099b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099b8:	81a3      	strh	r3, [r4, #12]
 80099ba:	e7ad      	b.n	8009918 <__sflush_r+0x1c>
 80099bc:	690f      	ldr	r7, [r1, #16]
 80099be:	2f00      	cmp	r7, #0
 80099c0:	d0a9      	beq.n	8009916 <__sflush_r+0x1a>
 80099c2:	0793      	lsls	r3, r2, #30
 80099c4:	680e      	ldr	r6, [r1, #0]
 80099c6:	bf08      	it	eq
 80099c8:	694b      	ldreq	r3, [r1, #20]
 80099ca:	600f      	str	r7, [r1, #0]
 80099cc:	bf18      	it	ne
 80099ce:	2300      	movne	r3, #0
 80099d0:	eba6 0807 	sub.w	r8, r6, r7
 80099d4:	608b      	str	r3, [r1, #8]
 80099d6:	f1b8 0f00 	cmp.w	r8, #0
 80099da:	dd9c      	ble.n	8009916 <__sflush_r+0x1a>
 80099dc:	6a21      	ldr	r1, [r4, #32]
 80099de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80099e0:	4643      	mov	r3, r8
 80099e2:	463a      	mov	r2, r7
 80099e4:	4628      	mov	r0, r5
 80099e6:	47b0      	blx	r6
 80099e8:	2800      	cmp	r0, #0
 80099ea:	dc06      	bgt.n	80099fa <__sflush_r+0xfe>
 80099ec:	89a3      	ldrh	r3, [r4, #12]
 80099ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099f2:	81a3      	strh	r3, [r4, #12]
 80099f4:	f04f 30ff 	mov.w	r0, #4294967295
 80099f8:	e78e      	b.n	8009918 <__sflush_r+0x1c>
 80099fa:	4407      	add	r7, r0
 80099fc:	eba8 0800 	sub.w	r8, r8, r0
 8009a00:	e7e9      	b.n	80099d6 <__sflush_r+0xda>
 8009a02:	bf00      	nop
 8009a04:	20400001 	.word	0x20400001

08009a08 <_fflush_r>:
 8009a08:	b538      	push	{r3, r4, r5, lr}
 8009a0a:	690b      	ldr	r3, [r1, #16]
 8009a0c:	4605      	mov	r5, r0
 8009a0e:	460c      	mov	r4, r1
 8009a10:	b913      	cbnz	r3, 8009a18 <_fflush_r+0x10>
 8009a12:	2500      	movs	r5, #0
 8009a14:	4628      	mov	r0, r5
 8009a16:	bd38      	pop	{r3, r4, r5, pc}
 8009a18:	b118      	cbz	r0, 8009a22 <_fflush_r+0x1a>
 8009a1a:	6983      	ldr	r3, [r0, #24]
 8009a1c:	b90b      	cbnz	r3, 8009a22 <_fflush_r+0x1a>
 8009a1e:	f000 f887 	bl	8009b30 <__sinit>
 8009a22:	4b14      	ldr	r3, [pc, #80]	; (8009a74 <_fflush_r+0x6c>)
 8009a24:	429c      	cmp	r4, r3
 8009a26:	d11b      	bne.n	8009a60 <_fflush_r+0x58>
 8009a28:	686c      	ldr	r4, [r5, #4]
 8009a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d0ef      	beq.n	8009a12 <_fflush_r+0xa>
 8009a32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a34:	07d0      	lsls	r0, r2, #31
 8009a36:	d404      	bmi.n	8009a42 <_fflush_r+0x3a>
 8009a38:	0599      	lsls	r1, r3, #22
 8009a3a:	d402      	bmi.n	8009a42 <_fflush_r+0x3a>
 8009a3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a3e:	f000 f91a 	bl	8009c76 <__retarget_lock_acquire_recursive>
 8009a42:	4628      	mov	r0, r5
 8009a44:	4621      	mov	r1, r4
 8009a46:	f7ff ff59 	bl	80098fc <__sflush_r>
 8009a4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a4c:	07da      	lsls	r2, r3, #31
 8009a4e:	4605      	mov	r5, r0
 8009a50:	d4e0      	bmi.n	8009a14 <_fflush_r+0xc>
 8009a52:	89a3      	ldrh	r3, [r4, #12]
 8009a54:	059b      	lsls	r3, r3, #22
 8009a56:	d4dd      	bmi.n	8009a14 <_fflush_r+0xc>
 8009a58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a5a:	f000 f90d 	bl	8009c78 <__retarget_lock_release_recursive>
 8009a5e:	e7d9      	b.n	8009a14 <_fflush_r+0xc>
 8009a60:	4b05      	ldr	r3, [pc, #20]	; (8009a78 <_fflush_r+0x70>)
 8009a62:	429c      	cmp	r4, r3
 8009a64:	d101      	bne.n	8009a6a <_fflush_r+0x62>
 8009a66:	68ac      	ldr	r4, [r5, #8]
 8009a68:	e7df      	b.n	8009a2a <_fflush_r+0x22>
 8009a6a:	4b04      	ldr	r3, [pc, #16]	; (8009a7c <_fflush_r+0x74>)
 8009a6c:	429c      	cmp	r4, r3
 8009a6e:	bf08      	it	eq
 8009a70:	68ec      	ldreq	r4, [r5, #12]
 8009a72:	e7da      	b.n	8009a2a <_fflush_r+0x22>
 8009a74:	0800b030 	.word	0x0800b030
 8009a78:	0800b050 	.word	0x0800b050
 8009a7c:	0800b010 	.word	0x0800b010

08009a80 <std>:
 8009a80:	2300      	movs	r3, #0
 8009a82:	b510      	push	{r4, lr}
 8009a84:	4604      	mov	r4, r0
 8009a86:	e9c0 3300 	strd	r3, r3, [r0]
 8009a8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a8e:	6083      	str	r3, [r0, #8]
 8009a90:	8181      	strh	r1, [r0, #12]
 8009a92:	6643      	str	r3, [r0, #100]	; 0x64
 8009a94:	81c2      	strh	r2, [r0, #14]
 8009a96:	6183      	str	r3, [r0, #24]
 8009a98:	4619      	mov	r1, r3
 8009a9a:	2208      	movs	r2, #8
 8009a9c:	305c      	adds	r0, #92	; 0x5c
 8009a9e:	f7fe faf1 	bl	8008084 <memset>
 8009aa2:	4b05      	ldr	r3, [pc, #20]	; (8009ab8 <std+0x38>)
 8009aa4:	6263      	str	r3, [r4, #36]	; 0x24
 8009aa6:	4b05      	ldr	r3, [pc, #20]	; (8009abc <std+0x3c>)
 8009aa8:	62a3      	str	r3, [r4, #40]	; 0x28
 8009aaa:	4b05      	ldr	r3, [pc, #20]	; (8009ac0 <std+0x40>)
 8009aac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009aae:	4b05      	ldr	r3, [pc, #20]	; (8009ac4 <std+0x44>)
 8009ab0:	6224      	str	r4, [r4, #32]
 8009ab2:	6323      	str	r3, [r4, #48]	; 0x30
 8009ab4:	bd10      	pop	{r4, pc}
 8009ab6:	bf00      	nop
 8009ab8:	0800a939 	.word	0x0800a939
 8009abc:	0800a95b 	.word	0x0800a95b
 8009ac0:	0800a993 	.word	0x0800a993
 8009ac4:	0800a9b7 	.word	0x0800a9b7

08009ac8 <_cleanup_r>:
 8009ac8:	4901      	ldr	r1, [pc, #4]	; (8009ad0 <_cleanup_r+0x8>)
 8009aca:	f000 b8af 	b.w	8009c2c <_fwalk_reent>
 8009ace:	bf00      	nop
 8009ad0:	08009a09 	.word	0x08009a09

08009ad4 <__sfmoreglue>:
 8009ad4:	b570      	push	{r4, r5, r6, lr}
 8009ad6:	2268      	movs	r2, #104	; 0x68
 8009ad8:	1e4d      	subs	r5, r1, #1
 8009ada:	4355      	muls	r5, r2
 8009adc:	460e      	mov	r6, r1
 8009ade:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009ae2:	f000 fd4b 	bl	800a57c <_malloc_r>
 8009ae6:	4604      	mov	r4, r0
 8009ae8:	b140      	cbz	r0, 8009afc <__sfmoreglue+0x28>
 8009aea:	2100      	movs	r1, #0
 8009aec:	e9c0 1600 	strd	r1, r6, [r0]
 8009af0:	300c      	adds	r0, #12
 8009af2:	60a0      	str	r0, [r4, #8]
 8009af4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009af8:	f7fe fac4 	bl	8008084 <memset>
 8009afc:	4620      	mov	r0, r4
 8009afe:	bd70      	pop	{r4, r5, r6, pc}

08009b00 <__sfp_lock_acquire>:
 8009b00:	4801      	ldr	r0, [pc, #4]	; (8009b08 <__sfp_lock_acquire+0x8>)
 8009b02:	f000 b8b8 	b.w	8009c76 <__retarget_lock_acquire_recursive>
 8009b06:	bf00      	nop
 8009b08:	20000445 	.word	0x20000445

08009b0c <__sfp_lock_release>:
 8009b0c:	4801      	ldr	r0, [pc, #4]	; (8009b14 <__sfp_lock_release+0x8>)
 8009b0e:	f000 b8b3 	b.w	8009c78 <__retarget_lock_release_recursive>
 8009b12:	bf00      	nop
 8009b14:	20000445 	.word	0x20000445

08009b18 <__sinit_lock_acquire>:
 8009b18:	4801      	ldr	r0, [pc, #4]	; (8009b20 <__sinit_lock_acquire+0x8>)
 8009b1a:	f000 b8ac 	b.w	8009c76 <__retarget_lock_acquire_recursive>
 8009b1e:	bf00      	nop
 8009b20:	20000446 	.word	0x20000446

08009b24 <__sinit_lock_release>:
 8009b24:	4801      	ldr	r0, [pc, #4]	; (8009b2c <__sinit_lock_release+0x8>)
 8009b26:	f000 b8a7 	b.w	8009c78 <__retarget_lock_release_recursive>
 8009b2a:	bf00      	nop
 8009b2c:	20000446 	.word	0x20000446

08009b30 <__sinit>:
 8009b30:	b510      	push	{r4, lr}
 8009b32:	4604      	mov	r4, r0
 8009b34:	f7ff fff0 	bl	8009b18 <__sinit_lock_acquire>
 8009b38:	69a3      	ldr	r3, [r4, #24]
 8009b3a:	b11b      	cbz	r3, 8009b44 <__sinit+0x14>
 8009b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b40:	f7ff bff0 	b.w	8009b24 <__sinit_lock_release>
 8009b44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009b48:	6523      	str	r3, [r4, #80]	; 0x50
 8009b4a:	4b13      	ldr	r3, [pc, #76]	; (8009b98 <__sinit+0x68>)
 8009b4c:	4a13      	ldr	r2, [pc, #76]	; (8009b9c <__sinit+0x6c>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	62a2      	str	r2, [r4, #40]	; 0x28
 8009b52:	42a3      	cmp	r3, r4
 8009b54:	bf04      	itt	eq
 8009b56:	2301      	moveq	r3, #1
 8009b58:	61a3      	streq	r3, [r4, #24]
 8009b5a:	4620      	mov	r0, r4
 8009b5c:	f000 f820 	bl	8009ba0 <__sfp>
 8009b60:	6060      	str	r0, [r4, #4]
 8009b62:	4620      	mov	r0, r4
 8009b64:	f000 f81c 	bl	8009ba0 <__sfp>
 8009b68:	60a0      	str	r0, [r4, #8]
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	f000 f818 	bl	8009ba0 <__sfp>
 8009b70:	2200      	movs	r2, #0
 8009b72:	60e0      	str	r0, [r4, #12]
 8009b74:	2104      	movs	r1, #4
 8009b76:	6860      	ldr	r0, [r4, #4]
 8009b78:	f7ff ff82 	bl	8009a80 <std>
 8009b7c:	68a0      	ldr	r0, [r4, #8]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	2109      	movs	r1, #9
 8009b82:	f7ff ff7d 	bl	8009a80 <std>
 8009b86:	68e0      	ldr	r0, [r4, #12]
 8009b88:	2202      	movs	r2, #2
 8009b8a:	2112      	movs	r1, #18
 8009b8c:	f7ff ff78 	bl	8009a80 <std>
 8009b90:	2301      	movs	r3, #1
 8009b92:	61a3      	str	r3, [r4, #24]
 8009b94:	e7d2      	b.n	8009b3c <__sinit+0xc>
 8009b96:	bf00      	nop
 8009b98:	0800af48 	.word	0x0800af48
 8009b9c:	08009ac9 	.word	0x08009ac9

08009ba0 <__sfp>:
 8009ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ba2:	4607      	mov	r7, r0
 8009ba4:	f7ff ffac 	bl	8009b00 <__sfp_lock_acquire>
 8009ba8:	4b1e      	ldr	r3, [pc, #120]	; (8009c24 <__sfp+0x84>)
 8009baa:	681e      	ldr	r6, [r3, #0]
 8009bac:	69b3      	ldr	r3, [r6, #24]
 8009bae:	b913      	cbnz	r3, 8009bb6 <__sfp+0x16>
 8009bb0:	4630      	mov	r0, r6
 8009bb2:	f7ff ffbd 	bl	8009b30 <__sinit>
 8009bb6:	3648      	adds	r6, #72	; 0x48
 8009bb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009bbc:	3b01      	subs	r3, #1
 8009bbe:	d503      	bpl.n	8009bc8 <__sfp+0x28>
 8009bc0:	6833      	ldr	r3, [r6, #0]
 8009bc2:	b30b      	cbz	r3, 8009c08 <__sfp+0x68>
 8009bc4:	6836      	ldr	r6, [r6, #0]
 8009bc6:	e7f7      	b.n	8009bb8 <__sfp+0x18>
 8009bc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009bcc:	b9d5      	cbnz	r5, 8009c04 <__sfp+0x64>
 8009bce:	4b16      	ldr	r3, [pc, #88]	; (8009c28 <__sfp+0x88>)
 8009bd0:	60e3      	str	r3, [r4, #12]
 8009bd2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009bd6:	6665      	str	r5, [r4, #100]	; 0x64
 8009bd8:	f000 f84c 	bl	8009c74 <__retarget_lock_init_recursive>
 8009bdc:	f7ff ff96 	bl	8009b0c <__sfp_lock_release>
 8009be0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009be4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009be8:	6025      	str	r5, [r4, #0]
 8009bea:	61a5      	str	r5, [r4, #24]
 8009bec:	2208      	movs	r2, #8
 8009bee:	4629      	mov	r1, r5
 8009bf0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009bf4:	f7fe fa46 	bl	8008084 <memset>
 8009bf8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009bfc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009c00:	4620      	mov	r0, r4
 8009c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c04:	3468      	adds	r4, #104	; 0x68
 8009c06:	e7d9      	b.n	8009bbc <__sfp+0x1c>
 8009c08:	2104      	movs	r1, #4
 8009c0a:	4638      	mov	r0, r7
 8009c0c:	f7ff ff62 	bl	8009ad4 <__sfmoreglue>
 8009c10:	4604      	mov	r4, r0
 8009c12:	6030      	str	r0, [r6, #0]
 8009c14:	2800      	cmp	r0, #0
 8009c16:	d1d5      	bne.n	8009bc4 <__sfp+0x24>
 8009c18:	f7ff ff78 	bl	8009b0c <__sfp_lock_release>
 8009c1c:	230c      	movs	r3, #12
 8009c1e:	603b      	str	r3, [r7, #0]
 8009c20:	e7ee      	b.n	8009c00 <__sfp+0x60>
 8009c22:	bf00      	nop
 8009c24:	0800af48 	.word	0x0800af48
 8009c28:	ffff0001 	.word	0xffff0001

08009c2c <_fwalk_reent>:
 8009c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c30:	4606      	mov	r6, r0
 8009c32:	4688      	mov	r8, r1
 8009c34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009c38:	2700      	movs	r7, #0
 8009c3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c3e:	f1b9 0901 	subs.w	r9, r9, #1
 8009c42:	d505      	bpl.n	8009c50 <_fwalk_reent+0x24>
 8009c44:	6824      	ldr	r4, [r4, #0]
 8009c46:	2c00      	cmp	r4, #0
 8009c48:	d1f7      	bne.n	8009c3a <_fwalk_reent+0xe>
 8009c4a:	4638      	mov	r0, r7
 8009c4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c50:	89ab      	ldrh	r3, [r5, #12]
 8009c52:	2b01      	cmp	r3, #1
 8009c54:	d907      	bls.n	8009c66 <_fwalk_reent+0x3a>
 8009c56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	d003      	beq.n	8009c66 <_fwalk_reent+0x3a>
 8009c5e:	4629      	mov	r1, r5
 8009c60:	4630      	mov	r0, r6
 8009c62:	47c0      	blx	r8
 8009c64:	4307      	orrs	r7, r0
 8009c66:	3568      	adds	r5, #104	; 0x68
 8009c68:	e7e9      	b.n	8009c3e <_fwalk_reent+0x12>
	...

08009c6c <_localeconv_r>:
 8009c6c:	4800      	ldr	r0, [pc, #0]	; (8009c70 <_localeconv_r+0x4>)
 8009c6e:	4770      	bx	lr
 8009c70:	20000160 	.word	0x20000160

08009c74 <__retarget_lock_init_recursive>:
 8009c74:	4770      	bx	lr

08009c76 <__retarget_lock_acquire_recursive>:
 8009c76:	4770      	bx	lr

08009c78 <__retarget_lock_release_recursive>:
 8009c78:	4770      	bx	lr

08009c7a <__swhatbuf_r>:
 8009c7a:	b570      	push	{r4, r5, r6, lr}
 8009c7c:	460e      	mov	r6, r1
 8009c7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c82:	2900      	cmp	r1, #0
 8009c84:	b096      	sub	sp, #88	; 0x58
 8009c86:	4614      	mov	r4, r2
 8009c88:	461d      	mov	r5, r3
 8009c8a:	da08      	bge.n	8009c9e <__swhatbuf_r+0x24>
 8009c8c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009c90:	2200      	movs	r2, #0
 8009c92:	602a      	str	r2, [r5, #0]
 8009c94:	061a      	lsls	r2, r3, #24
 8009c96:	d410      	bmi.n	8009cba <__swhatbuf_r+0x40>
 8009c98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c9c:	e00e      	b.n	8009cbc <__swhatbuf_r+0x42>
 8009c9e:	466a      	mov	r2, sp
 8009ca0:	f000 fee0 	bl	800aa64 <_fstat_r>
 8009ca4:	2800      	cmp	r0, #0
 8009ca6:	dbf1      	blt.n	8009c8c <__swhatbuf_r+0x12>
 8009ca8:	9a01      	ldr	r2, [sp, #4]
 8009caa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009cae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009cb2:	425a      	negs	r2, r3
 8009cb4:	415a      	adcs	r2, r3
 8009cb6:	602a      	str	r2, [r5, #0]
 8009cb8:	e7ee      	b.n	8009c98 <__swhatbuf_r+0x1e>
 8009cba:	2340      	movs	r3, #64	; 0x40
 8009cbc:	2000      	movs	r0, #0
 8009cbe:	6023      	str	r3, [r4, #0]
 8009cc0:	b016      	add	sp, #88	; 0x58
 8009cc2:	bd70      	pop	{r4, r5, r6, pc}

08009cc4 <__smakebuf_r>:
 8009cc4:	898b      	ldrh	r3, [r1, #12]
 8009cc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009cc8:	079d      	lsls	r5, r3, #30
 8009cca:	4606      	mov	r6, r0
 8009ccc:	460c      	mov	r4, r1
 8009cce:	d507      	bpl.n	8009ce0 <__smakebuf_r+0x1c>
 8009cd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009cd4:	6023      	str	r3, [r4, #0]
 8009cd6:	6123      	str	r3, [r4, #16]
 8009cd8:	2301      	movs	r3, #1
 8009cda:	6163      	str	r3, [r4, #20]
 8009cdc:	b002      	add	sp, #8
 8009cde:	bd70      	pop	{r4, r5, r6, pc}
 8009ce0:	ab01      	add	r3, sp, #4
 8009ce2:	466a      	mov	r2, sp
 8009ce4:	f7ff ffc9 	bl	8009c7a <__swhatbuf_r>
 8009ce8:	9900      	ldr	r1, [sp, #0]
 8009cea:	4605      	mov	r5, r0
 8009cec:	4630      	mov	r0, r6
 8009cee:	f000 fc45 	bl	800a57c <_malloc_r>
 8009cf2:	b948      	cbnz	r0, 8009d08 <__smakebuf_r+0x44>
 8009cf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cf8:	059a      	lsls	r2, r3, #22
 8009cfa:	d4ef      	bmi.n	8009cdc <__smakebuf_r+0x18>
 8009cfc:	f023 0303 	bic.w	r3, r3, #3
 8009d00:	f043 0302 	orr.w	r3, r3, #2
 8009d04:	81a3      	strh	r3, [r4, #12]
 8009d06:	e7e3      	b.n	8009cd0 <__smakebuf_r+0xc>
 8009d08:	4b0d      	ldr	r3, [pc, #52]	; (8009d40 <__smakebuf_r+0x7c>)
 8009d0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d0c:	89a3      	ldrh	r3, [r4, #12]
 8009d0e:	6020      	str	r0, [r4, #0]
 8009d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d14:	81a3      	strh	r3, [r4, #12]
 8009d16:	9b00      	ldr	r3, [sp, #0]
 8009d18:	6163      	str	r3, [r4, #20]
 8009d1a:	9b01      	ldr	r3, [sp, #4]
 8009d1c:	6120      	str	r0, [r4, #16]
 8009d1e:	b15b      	cbz	r3, 8009d38 <__smakebuf_r+0x74>
 8009d20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d24:	4630      	mov	r0, r6
 8009d26:	f000 feaf 	bl	800aa88 <_isatty_r>
 8009d2a:	b128      	cbz	r0, 8009d38 <__smakebuf_r+0x74>
 8009d2c:	89a3      	ldrh	r3, [r4, #12]
 8009d2e:	f023 0303 	bic.w	r3, r3, #3
 8009d32:	f043 0301 	orr.w	r3, r3, #1
 8009d36:	81a3      	strh	r3, [r4, #12]
 8009d38:	89a0      	ldrh	r0, [r4, #12]
 8009d3a:	4305      	orrs	r5, r0
 8009d3c:	81a5      	strh	r5, [r4, #12]
 8009d3e:	e7cd      	b.n	8009cdc <__smakebuf_r+0x18>
 8009d40:	08009ac9 	.word	0x08009ac9

08009d44 <malloc>:
 8009d44:	4b02      	ldr	r3, [pc, #8]	; (8009d50 <malloc+0xc>)
 8009d46:	4601      	mov	r1, r0
 8009d48:	6818      	ldr	r0, [r3, #0]
 8009d4a:	f000 bc17 	b.w	800a57c <_malloc_r>
 8009d4e:	bf00      	nop
 8009d50:	2000000c 	.word	0x2000000c

08009d54 <memcpy>:
 8009d54:	440a      	add	r2, r1
 8009d56:	4291      	cmp	r1, r2
 8009d58:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d5c:	d100      	bne.n	8009d60 <memcpy+0xc>
 8009d5e:	4770      	bx	lr
 8009d60:	b510      	push	{r4, lr}
 8009d62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d6a:	4291      	cmp	r1, r2
 8009d6c:	d1f9      	bne.n	8009d62 <memcpy+0xe>
 8009d6e:	bd10      	pop	{r4, pc}

08009d70 <_Balloc>:
 8009d70:	b570      	push	{r4, r5, r6, lr}
 8009d72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009d74:	4604      	mov	r4, r0
 8009d76:	460d      	mov	r5, r1
 8009d78:	b976      	cbnz	r6, 8009d98 <_Balloc+0x28>
 8009d7a:	2010      	movs	r0, #16
 8009d7c:	f7ff ffe2 	bl	8009d44 <malloc>
 8009d80:	4602      	mov	r2, r0
 8009d82:	6260      	str	r0, [r4, #36]	; 0x24
 8009d84:	b920      	cbnz	r0, 8009d90 <_Balloc+0x20>
 8009d86:	4b18      	ldr	r3, [pc, #96]	; (8009de8 <_Balloc+0x78>)
 8009d88:	4818      	ldr	r0, [pc, #96]	; (8009dec <_Balloc+0x7c>)
 8009d8a:	2166      	movs	r1, #102	; 0x66
 8009d8c:	f000 fe2a 	bl	800a9e4 <__assert_func>
 8009d90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d94:	6006      	str	r6, [r0, #0]
 8009d96:	60c6      	str	r6, [r0, #12]
 8009d98:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009d9a:	68f3      	ldr	r3, [r6, #12]
 8009d9c:	b183      	cbz	r3, 8009dc0 <_Balloc+0x50>
 8009d9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009da0:	68db      	ldr	r3, [r3, #12]
 8009da2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009da6:	b9b8      	cbnz	r0, 8009dd8 <_Balloc+0x68>
 8009da8:	2101      	movs	r1, #1
 8009daa:	fa01 f605 	lsl.w	r6, r1, r5
 8009dae:	1d72      	adds	r2, r6, #5
 8009db0:	0092      	lsls	r2, r2, #2
 8009db2:	4620      	mov	r0, r4
 8009db4:	f000 fb60 	bl	800a478 <_calloc_r>
 8009db8:	b160      	cbz	r0, 8009dd4 <_Balloc+0x64>
 8009dba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009dbe:	e00e      	b.n	8009dde <_Balloc+0x6e>
 8009dc0:	2221      	movs	r2, #33	; 0x21
 8009dc2:	2104      	movs	r1, #4
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	f000 fb57 	bl	800a478 <_calloc_r>
 8009dca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009dcc:	60f0      	str	r0, [r6, #12]
 8009dce:	68db      	ldr	r3, [r3, #12]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d1e4      	bne.n	8009d9e <_Balloc+0x2e>
 8009dd4:	2000      	movs	r0, #0
 8009dd6:	bd70      	pop	{r4, r5, r6, pc}
 8009dd8:	6802      	ldr	r2, [r0, #0]
 8009dda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009dde:	2300      	movs	r3, #0
 8009de0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009de4:	e7f7      	b.n	8009dd6 <_Balloc+0x66>
 8009de6:	bf00      	nop
 8009de8:	0800af8d 	.word	0x0800af8d
 8009dec:	0800b070 	.word	0x0800b070

08009df0 <_Bfree>:
 8009df0:	b570      	push	{r4, r5, r6, lr}
 8009df2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009df4:	4605      	mov	r5, r0
 8009df6:	460c      	mov	r4, r1
 8009df8:	b976      	cbnz	r6, 8009e18 <_Bfree+0x28>
 8009dfa:	2010      	movs	r0, #16
 8009dfc:	f7ff ffa2 	bl	8009d44 <malloc>
 8009e00:	4602      	mov	r2, r0
 8009e02:	6268      	str	r0, [r5, #36]	; 0x24
 8009e04:	b920      	cbnz	r0, 8009e10 <_Bfree+0x20>
 8009e06:	4b09      	ldr	r3, [pc, #36]	; (8009e2c <_Bfree+0x3c>)
 8009e08:	4809      	ldr	r0, [pc, #36]	; (8009e30 <_Bfree+0x40>)
 8009e0a:	218a      	movs	r1, #138	; 0x8a
 8009e0c:	f000 fdea 	bl	800a9e4 <__assert_func>
 8009e10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e14:	6006      	str	r6, [r0, #0]
 8009e16:	60c6      	str	r6, [r0, #12]
 8009e18:	b13c      	cbz	r4, 8009e2a <_Bfree+0x3a>
 8009e1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009e1c:	6862      	ldr	r2, [r4, #4]
 8009e1e:	68db      	ldr	r3, [r3, #12]
 8009e20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e24:	6021      	str	r1, [r4, #0]
 8009e26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009e2a:	bd70      	pop	{r4, r5, r6, pc}
 8009e2c:	0800af8d 	.word	0x0800af8d
 8009e30:	0800b070 	.word	0x0800b070

08009e34 <__multadd>:
 8009e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e38:	690d      	ldr	r5, [r1, #16]
 8009e3a:	4607      	mov	r7, r0
 8009e3c:	460c      	mov	r4, r1
 8009e3e:	461e      	mov	r6, r3
 8009e40:	f101 0c14 	add.w	ip, r1, #20
 8009e44:	2000      	movs	r0, #0
 8009e46:	f8dc 3000 	ldr.w	r3, [ip]
 8009e4a:	b299      	uxth	r1, r3
 8009e4c:	fb02 6101 	mla	r1, r2, r1, r6
 8009e50:	0c1e      	lsrs	r6, r3, #16
 8009e52:	0c0b      	lsrs	r3, r1, #16
 8009e54:	fb02 3306 	mla	r3, r2, r6, r3
 8009e58:	b289      	uxth	r1, r1
 8009e5a:	3001      	adds	r0, #1
 8009e5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009e60:	4285      	cmp	r5, r0
 8009e62:	f84c 1b04 	str.w	r1, [ip], #4
 8009e66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009e6a:	dcec      	bgt.n	8009e46 <__multadd+0x12>
 8009e6c:	b30e      	cbz	r6, 8009eb2 <__multadd+0x7e>
 8009e6e:	68a3      	ldr	r3, [r4, #8]
 8009e70:	42ab      	cmp	r3, r5
 8009e72:	dc19      	bgt.n	8009ea8 <__multadd+0x74>
 8009e74:	6861      	ldr	r1, [r4, #4]
 8009e76:	4638      	mov	r0, r7
 8009e78:	3101      	adds	r1, #1
 8009e7a:	f7ff ff79 	bl	8009d70 <_Balloc>
 8009e7e:	4680      	mov	r8, r0
 8009e80:	b928      	cbnz	r0, 8009e8e <__multadd+0x5a>
 8009e82:	4602      	mov	r2, r0
 8009e84:	4b0c      	ldr	r3, [pc, #48]	; (8009eb8 <__multadd+0x84>)
 8009e86:	480d      	ldr	r0, [pc, #52]	; (8009ebc <__multadd+0x88>)
 8009e88:	21b5      	movs	r1, #181	; 0xb5
 8009e8a:	f000 fdab 	bl	800a9e4 <__assert_func>
 8009e8e:	6922      	ldr	r2, [r4, #16]
 8009e90:	3202      	adds	r2, #2
 8009e92:	f104 010c 	add.w	r1, r4, #12
 8009e96:	0092      	lsls	r2, r2, #2
 8009e98:	300c      	adds	r0, #12
 8009e9a:	f7ff ff5b 	bl	8009d54 <memcpy>
 8009e9e:	4621      	mov	r1, r4
 8009ea0:	4638      	mov	r0, r7
 8009ea2:	f7ff ffa5 	bl	8009df0 <_Bfree>
 8009ea6:	4644      	mov	r4, r8
 8009ea8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009eac:	3501      	adds	r5, #1
 8009eae:	615e      	str	r6, [r3, #20]
 8009eb0:	6125      	str	r5, [r4, #16]
 8009eb2:	4620      	mov	r0, r4
 8009eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009eb8:	0800afff 	.word	0x0800afff
 8009ebc:	0800b070 	.word	0x0800b070

08009ec0 <__hi0bits>:
 8009ec0:	0c03      	lsrs	r3, r0, #16
 8009ec2:	041b      	lsls	r3, r3, #16
 8009ec4:	b9d3      	cbnz	r3, 8009efc <__hi0bits+0x3c>
 8009ec6:	0400      	lsls	r0, r0, #16
 8009ec8:	2310      	movs	r3, #16
 8009eca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009ece:	bf04      	itt	eq
 8009ed0:	0200      	lsleq	r0, r0, #8
 8009ed2:	3308      	addeq	r3, #8
 8009ed4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009ed8:	bf04      	itt	eq
 8009eda:	0100      	lsleq	r0, r0, #4
 8009edc:	3304      	addeq	r3, #4
 8009ede:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009ee2:	bf04      	itt	eq
 8009ee4:	0080      	lsleq	r0, r0, #2
 8009ee6:	3302      	addeq	r3, #2
 8009ee8:	2800      	cmp	r0, #0
 8009eea:	db05      	blt.n	8009ef8 <__hi0bits+0x38>
 8009eec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009ef0:	f103 0301 	add.w	r3, r3, #1
 8009ef4:	bf08      	it	eq
 8009ef6:	2320      	moveq	r3, #32
 8009ef8:	4618      	mov	r0, r3
 8009efa:	4770      	bx	lr
 8009efc:	2300      	movs	r3, #0
 8009efe:	e7e4      	b.n	8009eca <__hi0bits+0xa>

08009f00 <__lo0bits>:
 8009f00:	6803      	ldr	r3, [r0, #0]
 8009f02:	f013 0207 	ands.w	r2, r3, #7
 8009f06:	4601      	mov	r1, r0
 8009f08:	d00b      	beq.n	8009f22 <__lo0bits+0x22>
 8009f0a:	07da      	lsls	r2, r3, #31
 8009f0c:	d423      	bmi.n	8009f56 <__lo0bits+0x56>
 8009f0e:	0798      	lsls	r0, r3, #30
 8009f10:	bf49      	itett	mi
 8009f12:	085b      	lsrmi	r3, r3, #1
 8009f14:	089b      	lsrpl	r3, r3, #2
 8009f16:	2001      	movmi	r0, #1
 8009f18:	600b      	strmi	r3, [r1, #0]
 8009f1a:	bf5c      	itt	pl
 8009f1c:	600b      	strpl	r3, [r1, #0]
 8009f1e:	2002      	movpl	r0, #2
 8009f20:	4770      	bx	lr
 8009f22:	b298      	uxth	r0, r3
 8009f24:	b9a8      	cbnz	r0, 8009f52 <__lo0bits+0x52>
 8009f26:	0c1b      	lsrs	r3, r3, #16
 8009f28:	2010      	movs	r0, #16
 8009f2a:	b2da      	uxtb	r2, r3
 8009f2c:	b90a      	cbnz	r2, 8009f32 <__lo0bits+0x32>
 8009f2e:	3008      	adds	r0, #8
 8009f30:	0a1b      	lsrs	r3, r3, #8
 8009f32:	071a      	lsls	r2, r3, #28
 8009f34:	bf04      	itt	eq
 8009f36:	091b      	lsreq	r3, r3, #4
 8009f38:	3004      	addeq	r0, #4
 8009f3a:	079a      	lsls	r2, r3, #30
 8009f3c:	bf04      	itt	eq
 8009f3e:	089b      	lsreq	r3, r3, #2
 8009f40:	3002      	addeq	r0, #2
 8009f42:	07da      	lsls	r2, r3, #31
 8009f44:	d403      	bmi.n	8009f4e <__lo0bits+0x4e>
 8009f46:	085b      	lsrs	r3, r3, #1
 8009f48:	f100 0001 	add.w	r0, r0, #1
 8009f4c:	d005      	beq.n	8009f5a <__lo0bits+0x5a>
 8009f4e:	600b      	str	r3, [r1, #0]
 8009f50:	4770      	bx	lr
 8009f52:	4610      	mov	r0, r2
 8009f54:	e7e9      	b.n	8009f2a <__lo0bits+0x2a>
 8009f56:	2000      	movs	r0, #0
 8009f58:	4770      	bx	lr
 8009f5a:	2020      	movs	r0, #32
 8009f5c:	4770      	bx	lr
	...

08009f60 <__i2b>:
 8009f60:	b510      	push	{r4, lr}
 8009f62:	460c      	mov	r4, r1
 8009f64:	2101      	movs	r1, #1
 8009f66:	f7ff ff03 	bl	8009d70 <_Balloc>
 8009f6a:	4602      	mov	r2, r0
 8009f6c:	b928      	cbnz	r0, 8009f7a <__i2b+0x1a>
 8009f6e:	4b05      	ldr	r3, [pc, #20]	; (8009f84 <__i2b+0x24>)
 8009f70:	4805      	ldr	r0, [pc, #20]	; (8009f88 <__i2b+0x28>)
 8009f72:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009f76:	f000 fd35 	bl	800a9e4 <__assert_func>
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	6144      	str	r4, [r0, #20]
 8009f7e:	6103      	str	r3, [r0, #16]
 8009f80:	bd10      	pop	{r4, pc}
 8009f82:	bf00      	nop
 8009f84:	0800afff 	.word	0x0800afff
 8009f88:	0800b070 	.word	0x0800b070

08009f8c <__multiply>:
 8009f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f90:	4691      	mov	r9, r2
 8009f92:	690a      	ldr	r2, [r1, #16]
 8009f94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	bfb8      	it	lt
 8009f9c:	460b      	movlt	r3, r1
 8009f9e:	460c      	mov	r4, r1
 8009fa0:	bfbc      	itt	lt
 8009fa2:	464c      	movlt	r4, r9
 8009fa4:	4699      	movlt	r9, r3
 8009fa6:	6927      	ldr	r7, [r4, #16]
 8009fa8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009fac:	68a3      	ldr	r3, [r4, #8]
 8009fae:	6861      	ldr	r1, [r4, #4]
 8009fb0:	eb07 060a 	add.w	r6, r7, sl
 8009fb4:	42b3      	cmp	r3, r6
 8009fb6:	b085      	sub	sp, #20
 8009fb8:	bfb8      	it	lt
 8009fba:	3101      	addlt	r1, #1
 8009fbc:	f7ff fed8 	bl	8009d70 <_Balloc>
 8009fc0:	b930      	cbnz	r0, 8009fd0 <__multiply+0x44>
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	4b44      	ldr	r3, [pc, #272]	; (800a0d8 <__multiply+0x14c>)
 8009fc6:	4845      	ldr	r0, [pc, #276]	; (800a0dc <__multiply+0x150>)
 8009fc8:	f240 115d 	movw	r1, #349	; 0x15d
 8009fcc:	f000 fd0a 	bl	800a9e4 <__assert_func>
 8009fd0:	f100 0514 	add.w	r5, r0, #20
 8009fd4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009fd8:	462b      	mov	r3, r5
 8009fda:	2200      	movs	r2, #0
 8009fdc:	4543      	cmp	r3, r8
 8009fde:	d321      	bcc.n	800a024 <__multiply+0x98>
 8009fe0:	f104 0314 	add.w	r3, r4, #20
 8009fe4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009fe8:	f109 0314 	add.w	r3, r9, #20
 8009fec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009ff0:	9202      	str	r2, [sp, #8]
 8009ff2:	1b3a      	subs	r2, r7, r4
 8009ff4:	3a15      	subs	r2, #21
 8009ff6:	f022 0203 	bic.w	r2, r2, #3
 8009ffa:	3204      	adds	r2, #4
 8009ffc:	f104 0115 	add.w	r1, r4, #21
 800a000:	428f      	cmp	r7, r1
 800a002:	bf38      	it	cc
 800a004:	2204      	movcc	r2, #4
 800a006:	9201      	str	r2, [sp, #4]
 800a008:	9a02      	ldr	r2, [sp, #8]
 800a00a:	9303      	str	r3, [sp, #12]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d80c      	bhi.n	800a02a <__multiply+0x9e>
 800a010:	2e00      	cmp	r6, #0
 800a012:	dd03      	ble.n	800a01c <__multiply+0x90>
 800a014:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d05a      	beq.n	800a0d2 <__multiply+0x146>
 800a01c:	6106      	str	r6, [r0, #16]
 800a01e:	b005      	add	sp, #20
 800a020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a024:	f843 2b04 	str.w	r2, [r3], #4
 800a028:	e7d8      	b.n	8009fdc <__multiply+0x50>
 800a02a:	f8b3 a000 	ldrh.w	sl, [r3]
 800a02e:	f1ba 0f00 	cmp.w	sl, #0
 800a032:	d024      	beq.n	800a07e <__multiply+0xf2>
 800a034:	f104 0e14 	add.w	lr, r4, #20
 800a038:	46a9      	mov	r9, r5
 800a03a:	f04f 0c00 	mov.w	ip, #0
 800a03e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a042:	f8d9 1000 	ldr.w	r1, [r9]
 800a046:	fa1f fb82 	uxth.w	fp, r2
 800a04a:	b289      	uxth	r1, r1
 800a04c:	fb0a 110b 	mla	r1, sl, fp, r1
 800a050:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a054:	f8d9 2000 	ldr.w	r2, [r9]
 800a058:	4461      	add	r1, ip
 800a05a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a05e:	fb0a c20b 	mla	r2, sl, fp, ip
 800a062:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a066:	b289      	uxth	r1, r1
 800a068:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a06c:	4577      	cmp	r7, lr
 800a06e:	f849 1b04 	str.w	r1, [r9], #4
 800a072:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a076:	d8e2      	bhi.n	800a03e <__multiply+0xb2>
 800a078:	9a01      	ldr	r2, [sp, #4]
 800a07a:	f845 c002 	str.w	ip, [r5, r2]
 800a07e:	9a03      	ldr	r2, [sp, #12]
 800a080:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a084:	3304      	adds	r3, #4
 800a086:	f1b9 0f00 	cmp.w	r9, #0
 800a08a:	d020      	beq.n	800a0ce <__multiply+0x142>
 800a08c:	6829      	ldr	r1, [r5, #0]
 800a08e:	f104 0c14 	add.w	ip, r4, #20
 800a092:	46ae      	mov	lr, r5
 800a094:	f04f 0a00 	mov.w	sl, #0
 800a098:	f8bc b000 	ldrh.w	fp, [ip]
 800a09c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a0a0:	fb09 220b 	mla	r2, r9, fp, r2
 800a0a4:	4492      	add	sl, r2
 800a0a6:	b289      	uxth	r1, r1
 800a0a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a0ac:	f84e 1b04 	str.w	r1, [lr], #4
 800a0b0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a0b4:	f8be 1000 	ldrh.w	r1, [lr]
 800a0b8:	0c12      	lsrs	r2, r2, #16
 800a0ba:	fb09 1102 	mla	r1, r9, r2, r1
 800a0be:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a0c2:	4567      	cmp	r7, ip
 800a0c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a0c8:	d8e6      	bhi.n	800a098 <__multiply+0x10c>
 800a0ca:	9a01      	ldr	r2, [sp, #4]
 800a0cc:	50a9      	str	r1, [r5, r2]
 800a0ce:	3504      	adds	r5, #4
 800a0d0:	e79a      	b.n	800a008 <__multiply+0x7c>
 800a0d2:	3e01      	subs	r6, #1
 800a0d4:	e79c      	b.n	800a010 <__multiply+0x84>
 800a0d6:	bf00      	nop
 800a0d8:	0800afff 	.word	0x0800afff
 800a0dc:	0800b070 	.word	0x0800b070

0800a0e0 <__pow5mult>:
 800a0e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0e4:	4615      	mov	r5, r2
 800a0e6:	f012 0203 	ands.w	r2, r2, #3
 800a0ea:	4606      	mov	r6, r0
 800a0ec:	460f      	mov	r7, r1
 800a0ee:	d007      	beq.n	800a100 <__pow5mult+0x20>
 800a0f0:	4c25      	ldr	r4, [pc, #148]	; (800a188 <__pow5mult+0xa8>)
 800a0f2:	3a01      	subs	r2, #1
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a0fa:	f7ff fe9b 	bl	8009e34 <__multadd>
 800a0fe:	4607      	mov	r7, r0
 800a100:	10ad      	asrs	r5, r5, #2
 800a102:	d03d      	beq.n	800a180 <__pow5mult+0xa0>
 800a104:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a106:	b97c      	cbnz	r4, 800a128 <__pow5mult+0x48>
 800a108:	2010      	movs	r0, #16
 800a10a:	f7ff fe1b 	bl	8009d44 <malloc>
 800a10e:	4602      	mov	r2, r0
 800a110:	6270      	str	r0, [r6, #36]	; 0x24
 800a112:	b928      	cbnz	r0, 800a120 <__pow5mult+0x40>
 800a114:	4b1d      	ldr	r3, [pc, #116]	; (800a18c <__pow5mult+0xac>)
 800a116:	481e      	ldr	r0, [pc, #120]	; (800a190 <__pow5mult+0xb0>)
 800a118:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a11c:	f000 fc62 	bl	800a9e4 <__assert_func>
 800a120:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a124:	6004      	str	r4, [r0, #0]
 800a126:	60c4      	str	r4, [r0, #12]
 800a128:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a12c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a130:	b94c      	cbnz	r4, 800a146 <__pow5mult+0x66>
 800a132:	f240 2171 	movw	r1, #625	; 0x271
 800a136:	4630      	mov	r0, r6
 800a138:	f7ff ff12 	bl	8009f60 <__i2b>
 800a13c:	2300      	movs	r3, #0
 800a13e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a142:	4604      	mov	r4, r0
 800a144:	6003      	str	r3, [r0, #0]
 800a146:	f04f 0900 	mov.w	r9, #0
 800a14a:	07eb      	lsls	r3, r5, #31
 800a14c:	d50a      	bpl.n	800a164 <__pow5mult+0x84>
 800a14e:	4639      	mov	r1, r7
 800a150:	4622      	mov	r2, r4
 800a152:	4630      	mov	r0, r6
 800a154:	f7ff ff1a 	bl	8009f8c <__multiply>
 800a158:	4639      	mov	r1, r7
 800a15a:	4680      	mov	r8, r0
 800a15c:	4630      	mov	r0, r6
 800a15e:	f7ff fe47 	bl	8009df0 <_Bfree>
 800a162:	4647      	mov	r7, r8
 800a164:	106d      	asrs	r5, r5, #1
 800a166:	d00b      	beq.n	800a180 <__pow5mult+0xa0>
 800a168:	6820      	ldr	r0, [r4, #0]
 800a16a:	b938      	cbnz	r0, 800a17c <__pow5mult+0x9c>
 800a16c:	4622      	mov	r2, r4
 800a16e:	4621      	mov	r1, r4
 800a170:	4630      	mov	r0, r6
 800a172:	f7ff ff0b 	bl	8009f8c <__multiply>
 800a176:	6020      	str	r0, [r4, #0]
 800a178:	f8c0 9000 	str.w	r9, [r0]
 800a17c:	4604      	mov	r4, r0
 800a17e:	e7e4      	b.n	800a14a <__pow5mult+0x6a>
 800a180:	4638      	mov	r0, r7
 800a182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a186:	bf00      	nop
 800a188:	0800b1c0 	.word	0x0800b1c0
 800a18c:	0800af8d 	.word	0x0800af8d
 800a190:	0800b070 	.word	0x0800b070

0800a194 <__lshift>:
 800a194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a198:	460c      	mov	r4, r1
 800a19a:	6849      	ldr	r1, [r1, #4]
 800a19c:	6923      	ldr	r3, [r4, #16]
 800a19e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a1a2:	68a3      	ldr	r3, [r4, #8]
 800a1a4:	4607      	mov	r7, r0
 800a1a6:	4691      	mov	r9, r2
 800a1a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a1ac:	f108 0601 	add.w	r6, r8, #1
 800a1b0:	42b3      	cmp	r3, r6
 800a1b2:	db0b      	blt.n	800a1cc <__lshift+0x38>
 800a1b4:	4638      	mov	r0, r7
 800a1b6:	f7ff fddb 	bl	8009d70 <_Balloc>
 800a1ba:	4605      	mov	r5, r0
 800a1bc:	b948      	cbnz	r0, 800a1d2 <__lshift+0x3e>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	4b2a      	ldr	r3, [pc, #168]	; (800a26c <__lshift+0xd8>)
 800a1c2:	482b      	ldr	r0, [pc, #172]	; (800a270 <__lshift+0xdc>)
 800a1c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a1c8:	f000 fc0c 	bl	800a9e4 <__assert_func>
 800a1cc:	3101      	adds	r1, #1
 800a1ce:	005b      	lsls	r3, r3, #1
 800a1d0:	e7ee      	b.n	800a1b0 <__lshift+0x1c>
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	f100 0114 	add.w	r1, r0, #20
 800a1d8:	f100 0210 	add.w	r2, r0, #16
 800a1dc:	4618      	mov	r0, r3
 800a1de:	4553      	cmp	r3, sl
 800a1e0:	db37      	blt.n	800a252 <__lshift+0xbe>
 800a1e2:	6920      	ldr	r0, [r4, #16]
 800a1e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a1e8:	f104 0314 	add.w	r3, r4, #20
 800a1ec:	f019 091f 	ands.w	r9, r9, #31
 800a1f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a1f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a1f8:	d02f      	beq.n	800a25a <__lshift+0xc6>
 800a1fa:	f1c9 0e20 	rsb	lr, r9, #32
 800a1fe:	468a      	mov	sl, r1
 800a200:	f04f 0c00 	mov.w	ip, #0
 800a204:	681a      	ldr	r2, [r3, #0]
 800a206:	fa02 f209 	lsl.w	r2, r2, r9
 800a20a:	ea42 020c 	orr.w	r2, r2, ip
 800a20e:	f84a 2b04 	str.w	r2, [sl], #4
 800a212:	f853 2b04 	ldr.w	r2, [r3], #4
 800a216:	4298      	cmp	r0, r3
 800a218:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a21c:	d8f2      	bhi.n	800a204 <__lshift+0x70>
 800a21e:	1b03      	subs	r3, r0, r4
 800a220:	3b15      	subs	r3, #21
 800a222:	f023 0303 	bic.w	r3, r3, #3
 800a226:	3304      	adds	r3, #4
 800a228:	f104 0215 	add.w	r2, r4, #21
 800a22c:	4290      	cmp	r0, r2
 800a22e:	bf38      	it	cc
 800a230:	2304      	movcc	r3, #4
 800a232:	f841 c003 	str.w	ip, [r1, r3]
 800a236:	f1bc 0f00 	cmp.w	ip, #0
 800a23a:	d001      	beq.n	800a240 <__lshift+0xac>
 800a23c:	f108 0602 	add.w	r6, r8, #2
 800a240:	3e01      	subs	r6, #1
 800a242:	4638      	mov	r0, r7
 800a244:	612e      	str	r6, [r5, #16]
 800a246:	4621      	mov	r1, r4
 800a248:	f7ff fdd2 	bl	8009df0 <_Bfree>
 800a24c:	4628      	mov	r0, r5
 800a24e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a252:	f842 0f04 	str.w	r0, [r2, #4]!
 800a256:	3301      	adds	r3, #1
 800a258:	e7c1      	b.n	800a1de <__lshift+0x4a>
 800a25a:	3904      	subs	r1, #4
 800a25c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a260:	f841 2f04 	str.w	r2, [r1, #4]!
 800a264:	4298      	cmp	r0, r3
 800a266:	d8f9      	bhi.n	800a25c <__lshift+0xc8>
 800a268:	e7ea      	b.n	800a240 <__lshift+0xac>
 800a26a:	bf00      	nop
 800a26c:	0800afff 	.word	0x0800afff
 800a270:	0800b070 	.word	0x0800b070

0800a274 <__mcmp>:
 800a274:	b530      	push	{r4, r5, lr}
 800a276:	6902      	ldr	r2, [r0, #16]
 800a278:	690c      	ldr	r4, [r1, #16]
 800a27a:	1b12      	subs	r2, r2, r4
 800a27c:	d10e      	bne.n	800a29c <__mcmp+0x28>
 800a27e:	f100 0314 	add.w	r3, r0, #20
 800a282:	3114      	adds	r1, #20
 800a284:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a288:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a28c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a290:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a294:	42a5      	cmp	r5, r4
 800a296:	d003      	beq.n	800a2a0 <__mcmp+0x2c>
 800a298:	d305      	bcc.n	800a2a6 <__mcmp+0x32>
 800a29a:	2201      	movs	r2, #1
 800a29c:	4610      	mov	r0, r2
 800a29e:	bd30      	pop	{r4, r5, pc}
 800a2a0:	4283      	cmp	r3, r0
 800a2a2:	d3f3      	bcc.n	800a28c <__mcmp+0x18>
 800a2a4:	e7fa      	b.n	800a29c <__mcmp+0x28>
 800a2a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a2aa:	e7f7      	b.n	800a29c <__mcmp+0x28>

0800a2ac <__mdiff>:
 800a2ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b0:	460c      	mov	r4, r1
 800a2b2:	4606      	mov	r6, r0
 800a2b4:	4611      	mov	r1, r2
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	4690      	mov	r8, r2
 800a2ba:	f7ff ffdb 	bl	800a274 <__mcmp>
 800a2be:	1e05      	subs	r5, r0, #0
 800a2c0:	d110      	bne.n	800a2e4 <__mdiff+0x38>
 800a2c2:	4629      	mov	r1, r5
 800a2c4:	4630      	mov	r0, r6
 800a2c6:	f7ff fd53 	bl	8009d70 <_Balloc>
 800a2ca:	b930      	cbnz	r0, 800a2da <__mdiff+0x2e>
 800a2cc:	4b3a      	ldr	r3, [pc, #232]	; (800a3b8 <__mdiff+0x10c>)
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	f240 2132 	movw	r1, #562	; 0x232
 800a2d4:	4839      	ldr	r0, [pc, #228]	; (800a3bc <__mdiff+0x110>)
 800a2d6:	f000 fb85 	bl	800a9e4 <__assert_func>
 800a2da:	2301      	movs	r3, #1
 800a2dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a2e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2e4:	bfa4      	itt	ge
 800a2e6:	4643      	movge	r3, r8
 800a2e8:	46a0      	movge	r8, r4
 800a2ea:	4630      	mov	r0, r6
 800a2ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a2f0:	bfa6      	itte	ge
 800a2f2:	461c      	movge	r4, r3
 800a2f4:	2500      	movge	r5, #0
 800a2f6:	2501      	movlt	r5, #1
 800a2f8:	f7ff fd3a 	bl	8009d70 <_Balloc>
 800a2fc:	b920      	cbnz	r0, 800a308 <__mdiff+0x5c>
 800a2fe:	4b2e      	ldr	r3, [pc, #184]	; (800a3b8 <__mdiff+0x10c>)
 800a300:	4602      	mov	r2, r0
 800a302:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a306:	e7e5      	b.n	800a2d4 <__mdiff+0x28>
 800a308:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a30c:	6926      	ldr	r6, [r4, #16]
 800a30e:	60c5      	str	r5, [r0, #12]
 800a310:	f104 0914 	add.w	r9, r4, #20
 800a314:	f108 0514 	add.w	r5, r8, #20
 800a318:	f100 0e14 	add.w	lr, r0, #20
 800a31c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a320:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a324:	f108 0210 	add.w	r2, r8, #16
 800a328:	46f2      	mov	sl, lr
 800a32a:	2100      	movs	r1, #0
 800a32c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a330:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a334:	fa1f f883 	uxth.w	r8, r3
 800a338:	fa11 f18b 	uxtah	r1, r1, fp
 800a33c:	0c1b      	lsrs	r3, r3, #16
 800a33e:	eba1 0808 	sub.w	r8, r1, r8
 800a342:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a346:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a34a:	fa1f f888 	uxth.w	r8, r8
 800a34e:	1419      	asrs	r1, r3, #16
 800a350:	454e      	cmp	r6, r9
 800a352:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a356:	f84a 3b04 	str.w	r3, [sl], #4
 800a35a:	d8e7      	bhi.n	800a32c <__mdiff+0x80>
 800a35c:	1b33      	subs	r3, r6, r4
 800a35e:	3b15      	subs	r3, #21
 800a360:	f023 0303 	bic.w	r3, r3, #3
 800a364:	3304      	adds	r3, #4
 800a366:	3415      	adds	r4, #21
 800a368:	42a6      	cmp	r6, r4
 800a36a:	bf38      	it	cc
 800a36c:	2304      	movcc	r3, #4
 800a36e:	441d      	add	r5, r3
 800a370:	4473      	add	r3, lr
 800a372:	469e      	mov	lr, r3
 800a374:	462e      	mov	r6, r5
 800a376:	4566      	cmp	r6, ip
 800a378:	d30e      	bcc.n	800a398 <__mdiff+0xec>
 800a37a:	f10c 0203 	add.w	r2, ip, #3
 800a37e:	1b52      	subs	r2, r2, r5
 800a380:	f022 0203 	bic.w	r2, r2, #3
 800a384:	3d03      	subs	r5, #3
 800a386:	45ac      	cmp	ip, r5
 800a388:	bf38      	it	cc
 800a38a:	2200      	movcc	r2, #0
 800a38c:	441a      	add	r2, r3
 800a38e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a392:	b17b      	cbz	r3, 800a3b4 <__mdiff+0x108>
 800a394:	6107      	str	r7, [r0, #16]
 800a396:	e7a3      	b.n	800a2e0 <__mdiff+0x34>
 800a398:	f856 8b04 	ldr.w	r8, [r6], #4
 800a39c:	fa11 f288 	uxtah	r2, r1, r8
 800a3a0:	1414      	asrs	r4, r2, #16
 800a3a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a3a6:	b292      	uxth	r2, r2
 800a3a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a3ac:	f84e 2b04 	str.w	r2, [lr], #4
 800a3b0:	1421      	asrs	r1, r4, #16
 800a3b2:	e7e0      	b.n	800a376 <__mdiff+0xca>
 800a3b4:	3f01      	subs	r7, #1
 800a3b6:	e7ea      	b.n	800a38e <__mdiff+0xe2>
 800a3b8:	0800afff 	.word	0x0800afff
 800a3bc:	0800b070 	.word	0x0800b070

0800a3c0 <__d2b>:
 800a3c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a3c4:	4689      	mov	r9, r1
 800a3c6:	2101      	movs	r1, #1
 800a3c8:	ec57 6b10 	vmov	r6, r7, d0
 800a3cc:	4690      	mov	r8, r2
 800a3ce:	f7ff fccf 	bl	8009d70 <_Balloc>
 800a3d2:	4604      	mov	r4, r0
 800a3d4:	b930      	cbnz	r0, 800a3e4 <__d2b+0x24>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	4b25      	ldr	r3, [pc, #148]	; (800a470 <__d2b+0xb0>)
 800a3da:	4826      	ldr	r0, [pc, #152]	; (800a474 <__d2b+0xb4>)
 800a3dc:	f240 310a 	movw	r1, #778	; 0x30a
 800a3e0:	f000 fb00 	bl	800a9e4 <__assert_func>
 800a3e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a3e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a3ec:	bb35      	cbnz	r5, 800a43c <__d2b+0x7c>
 800a3ee:	2e00      	cmp	r6, #0
 800a3f0:	9301      	str	r3, [sp, #4]
 800a3f2:	d028      	beq.n	800a446 <__d2b+0x86>
 800a3f4:	4668      	mov	r0, sp
 800a3f6:	9600      	str	r6, [sp, #0]
 800a3f8:	f7ff fd82 	bl	8009f00 <__lo0bits>
 800a3fc:	9900      	ldr	r1, [sp, #0]
 800a3fe:	b300      	cbz	r0, 800a442 <__d2b+0x82>
 800a400:	9a01      	ldr	r2, [sp, #4]
 800a402:	f1c0 0320 	rsb	r3, r0, #32
 800a406:	fa02 f303 	lsl.w	r3, r2, r3
 800a40a:	430b      	orrs	r3, r1
 800a40c:	40c2      	lsrs	r2, r0
 800a40e:	6163      	str	r3, [r4, #20]
 800a410:	9201      	str	r2, [sp, #4]
 800a412:	9b01      	ldr	r3, [sp, #4]
 800a414:	61a3      	str	r3, [r4, #24]
 800a416:	2b00      	cmp	r3, #0
 800a418:	bf14      	ite	ne
 800a41a:	2202      	movne	r2, #2
 800a41c:	2201      	moveq	r2, #1
 800a41e:	6122      	str	r2, [r4, #16]
 800a420:	b1d5      	cbz	r5, 800a458 <__d2b+0x98>
 800a422:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a426:	4405      	add	r5, r0
 800a428:	f8c9 5000 	str.w	r5, [r9]
 800a42c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a430:	f8c8 0000 	str.w	r0, [r8]
 800a434:	4620      	mov	r0, r4
 800a436:	b003      	add	sp, #12
 800a438:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a43c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a440:	e7d5      	b.n	800a3ee <__d2b+0x2e>
 800a442:	6161      	str	r1, [r4, #20]
 800a444:	e7e5      	b.n	800a412 <__d2b+0x52>
 800a446:	a801      	add	r0, sp, #4
 800a448:	f7ff fd5a 	bl	8009f00 <__lo0bits>
 800a44c:	9b01      	ldr	r3, [sp, #4]
 800a44e:	6163      	str	r3, [r4, #20]
 800a450:	2201      	movs	r2, #1
 800a452:	6122      	str	r2, [r4, #16]
 800a454:	3020      	adds	r0, #32
 800a456:	e7e3      	b.n	800a420 <__d2b+0x60>
 800a458:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a45c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a460:	f8c9 0000 	str.w	r0, [r9]
 800a464:	6918      	ldr	r0, [r3, #16]
 800a466:	f7ff fd2b 	bl	8009ec0 <__hi0bits>
 800a46a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a46e:	e7df      	b.n	800a430 <__d2b+0x70>
 800a470:	0800afff 	.word	0x0800afff
 800a474:	0800b070 	.word	0x0800b070

0800a478 <_calloc_r>:
 800a478:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a47a:	fba1 2402 	umull	r2, r4, r1, r2
 800a47e:	b94c      	cbnz	r4, 800a494 <_calloc_r+0x1c>
 800a480:	4611      	mov	r1, r2
 800a482:	9201      	str	r2, [sp, #4]
 800a484:	f000 f87a 	bl	800a57c <_malloc_r>
 800a488:	9a01      	ldr	r2, [sp, #4]
 800a48a:	4605      	mov	r5, r0
 800a48c:	b930      	cbnz	r0, 800a49c <_calloc_r+0x24>
 800a48e:	4628      	mov	r0, r5
 800a490:	b003      	add	sp, #12
 800a492:	bd30      	pop	{r4, r5, pc}
 800a494:	220c      	movs	r2, #12
 800a496:	6002      	str	r2, [r0, #0]
 800a498:	2500      	movs	r5, #0
 800a49a:	e7f8      	b.n	800a48e <_calloc_r+0x16>
 800a49c:	4621      	mov	r1, r4
 800a49e:	f7fd fdf1 	bl	8008084 <memset>
 800a4a2:	e7f4      	b.n	800a48e <_calloc_r+0x16>

0800a4a4 <_free_r>:
 800a4a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4a6:	2900      	cmp	r1, #0
 800a4a8:	d044      	beq.n	800a534 <_free_r+0x90>
 800a4aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4ae:	9001      	str	r0, [sp, #4]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	f1a1 0404 	sub.w	r4, r1, #4
 800a4b6:	bfb8      	it	lt
 800a4b8:	18e4      	addlt	r4, r4, r3
 800a4ba:	f000 fb19 	bl	800aaf0 <__malloc_lock>
 800a4be:	4a1e      	ldr	r2, [pc, #120]	; (800a538 <_free_r+0x94>)
 800a4c0:	9801      	ldr	r0, [sp, #4]
 800a4c2:	6813      	ldr	r3, [r2, #0]
 800a4c4:	b933      	cbnz	r3, 800a4d4 <_free_r+0x30>
 800a4c6:	6063      	str	r3, [r4, #4]
 800a4c8:	6014      	str	r4, [r2, #0]
 800a4ca:	b003      	add	sp, #12
 800a4cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4d0:	f000 bb14 	b.w	800aafc <__malloc_unlock>
 800a4d4:	42a3      	cmp	r3, r4
 800a4d6:	d908      	bls.n	800a4ea <_free_r+0x46>
 800a4d8:	6825      	ldr	r5, [r4, #0]
 800a4da:	1961      	adds	r1, r4, r5
 800a4dc:	428b      	cmp	r3, r1
 800a4de:	bf01      	itttt	eq
 800a4e0:	6819      	ldreq	r1, [r3, #0]
 800a4e2:	685b      	ldreq	r3, [r3, #4]
 800a4e4:	1949      	addeq	r1, r1, r5
 800a4e6:	6021      	streq	r1, [r4, #0]
 800a4e8:	e7ed      	b.n	800a4c6 <_free_r+0x22>
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	b10b      	cbz	r3, 800a4f4 <_free_r+0x50>
 800a4f0:	42a3      	cmp	r3, r4
 800a4f2:	d9fa      	bls.n	800a4ea <_free_r+0x46>
 800a4f4:	6811      	ldr	r1, [r2, #0]
 800a4f6:	1855      	adds	r5, r2, r1
 800a4f8:	42a5      	cmp	r5, r4
 800a4fa:	d10b      	bne.n	800a514 <_free_r+0x70>
 800a4fc:	6824      	ldr	r4, [r4, #0]
 800a4fe:	4421      	add	r1, r4
 800a500:	1854      	adds	r4, r2, r1
 800a502:	42a3      	cmp	r3, r4
 800a504:	6011      	str	r1, [r2, #0]
 800a506:	d1e0      	bne.n	800a4ca <_free_r+0x26>
 800a508:	681c      	ldr	r4, [r3, #0]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	6053      	str	r3, [r2, #4]
 800a50e:	4421      	add	r1, r4
 800a510:	6011      	str	r1, [r2, #0]
 800a512:	e7da      	b.n	800a4ca <_free_r+0x26>
 800a514:	d902      	bls.n	800a51c <_free_r+0x78>
 800a516:	230c      	movs	r3, #12
 800a518:	6003      	str	r3, [r0, #0]
 800a51a:	e7d6      	b.n	800a4ca <_free_r+0x26>
 800a51c:	6825      	ldr	r5, [r4, #0]
 800a51e:	1961      	adds	r1, r4, r5
 800a520:	428b      	cmp	r3, r1
 800a522:	bf04      	itt	eq
 800a524:	6819      	ldreq	r1, [r3, #0]
 800a526:	685b      	ldreq	r3, [r3, #4]
 800a528:	6063      	str	r3, [r4, #4]
 800a52a:	bf04      	itt	eq
 800a52c:	1949      	addeq	r1, r1, r5
 800a52e:	6021      	streq	r1, [r4, #0]
 800a530:	6054      	str	r4, [r2, #4]
 800a532:	e7ca      	b.n	800a4ca <_free_r+0x26>
 800a534:	b003      	add	sp, #12
 800a536:	bd30      	pop	{r4, r5, pc}
 800a538:	20000448 	.word	0x20000448

0800a53c <sbrk_aligned>:
 800a53c:	b570      	push	{r4, r5, r6, lr}
 800a53e:	4e0e      	ldr	r6, [pc, #56]	; (800a578 <sbrk_aligned+0x3c>)
 800a540:	460c      	mov	r4, r1
 800a542:	6831      	ldr	r1, [r6, #0]
 800a544:	4605      	mov	r5, r0
 800a546:	b911      	cbnz	r1, 800a54e <sbrk_aligned+0x12>
 800a548:	f000 f9e6 	bl	800a918 <_sbrk_r>
 800a54c:	6030      	str	r0, [r6, #0]
 800a54e:	4621      	mov	r1, r4
 800a550:	4628      	mov	r0, r5
 800a552:	f000 f9e1 	bl	800a918 <_sbrk_r>
 800a556:	1c43      	adds	r3, r0, #1
 800a558:	d00a      	beq.n	800a570 <sbrk_aligned+0x34>
 800a55a:	1cc4      	adds	r4, r0, #3
 800a55c:	f024 0403 	bic.w	r4, r4, #3
 800a560:	42a0      	cmp	r0, r4
 800a562:	d007      	beq.n	800a574 <sbrk_aligned+0x38>
 800a564:	1a21      	subs	r1, r4, r0
 800a566:	4628      	mov	r0, r5
 800a568:	f000 f9d6 	bl	800a918 <_sbrk_r>
 800a56c:	3001      	adds	r0, #1
 800a56e:	d101      	bne.n	800a574 <sbrk_aligned+0x38>
 800a570:	f04f 34ff 	mov.w	r4, #4294967295
 800a574:	4620      	mov	r0, r4
 800a576:	bd70      	pop	{r4, r5, r6, pc}
 800a578:	2000044c 	.word	0x2000044c

0800a57c <_malloc_r>:
 800a57c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a580:	1ccd      	adds	r5, r1, #3
 800a582:	f025 0503 	bic.w	r5, r5, #3
 800a586:	3508      	adds	r5, #8
 800a588:	2d0c      	cmp	r5, #12
 800a58a:	bf38      	it	cc
 800a58c:	250c      	movcc	r5, #12
 800a58e:	2d00      	cmp	r5, #0
 800a590:	4607      	mov	r7, r0
 800a592:	db01      	blt.n	800a598 <_malloc_r+0x1c>
 800a594:	42a9      	cmp	r1, r5
 800a596:	d905      	bls.n	800a5a4 <_malloc_r+0x28>
 800a598:	230c      	movs	r3, #12
 800a59a:	603b      	str	r3, [r7, #0]
 800a59c:	2600      	movs	r6, #0
 800a59e:	4630      	mov	r0, r6
 800a5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5a4:	4e2e      	ldr	r6, [pc, #184]	; (800a660 <_malloc_r+0xe4>)
 800a5a6:	f000 faa3 	bl	800aaf0 <__malloc_lock>
 800a5aa:	6833      	ldr	r3, [r6, #0]
 800a5ac:	461c      	mov	r4, r3
 800a5ae:	bb34      	cbnz	r4, 800a5fe <_malloc_r+0x82>
 800a5b0:	4629      	mov	r1, r5
 800a5b2:	4638      	mov	r0, r7
 800a5b4:	f7ff ffc2 	bl	800a53c <sbrk_aligned>
 800a5b8:	1c43      	adds	r3, r0, #1
 800a5ba:	4604      	mov	r4, r0
 800a5bc:	d14d      	bne.n	800a65a <_malloc_r+0xde>
 800a5be:	6834      	ldr	r4, [r6, #0]
 800a5c0:	4626      	mov	r6, r4
 800a5c2:	2e00      	cmp	r6, #0
 800a5c4:	d140      	bne.n	800a648 <_malloc_r+0xcc>
 800a5c6:	6823      	ldr	r3, [r4, #0]
 800a5c8:	4631      	mov	r1, r6
 800a5ca:	4638      	mov	r0, r7
 800a5cc:	eb04 0803 	add.w	r8, r4, r3
 800a5d0:	f000 f9a2 	bl	800a918 <_sbrk_r>
 800a5d4:	4580      	cmp	r8, r0
 800a5d6:	d13a      	bne.n	800a64e <_malloc_r+0xd2>
 800a5d8:	6821      	ldr	r1, [r4, #0]
 800a5da:	3503      	adds	r5, #3
 800a5dc:	1a6d      	subs	r5, r5, r1
 800a5de:	f025 0503 	bic.w	r5, r5, #3
 800a5e2:	3508      	adds	r5, #8
 800a5e4:	2d0c      	cmp	r5, #12
 800a5e6:	bf38      	it	cc
 800a5e8:	250c      	movcc	r5, #12
 800a5ea:	4629      	mov	r1, r5
 800a5ec:	4638      	mov	r0, r7
 800a5ee:	f7ff ffa5 	bl	800a53c <sbrk_aligned>
 800a5f2:	3001      	adds	r0, #1
 800a5f4:	d02b      	beq.n	800a64e <_malloc_r+0xd2>
 800a5f6:	6823      	ldr	r3, [r4, #0]
 800a5f8:	442b      	add	r3, r5
 800a5fa:	6023      	str	r3, [r4, #0]
 800a5fc:	e00e      	b.n	800a61c <_malloc_r+0xa0>
 800a5fe:	6822      	ldr	r2, [r4, #0]
 800a600:	1b52      	subs	r2, r2, r5
 800a602:	d41e      	bmi.n	800a642 <_malloc_r+0xc6>
 800a604:	2a0b      	cmp	r2, #11
 800a606:	d916      	bls.n	800a636 <_malloc_r+0xba>
 800a608:	1961      	adds	r1, r4, r5
 800a60a:	42a3      	cmp	r3, r4
 800a60c:	6025      	str	r5, [r4, #0]
 800a60e:	bf18      	it	ne
 800a610:	6059      	strne	r1, [r3, #4]
 800a612:	6863      	ldr	r3, [r4, #4]
 800a614:	bf08      	it	eq
 800a616:	6031      	streq	r1, [r6, #0]
 800a618:	5162      	str	r2, [r4, r5]
 800a61a:	604b      	str	r3, [r1, #4]
 800a61c:	4638      	mov	r0, r7
 800a61e:	f104 060b 	add.w	r6, r4, #11
 800a622:	f000 fa6b 	bl	800aafc <__malloc_unlock>
 800a626:	f026 0607 	bic.w	r6, r6, #7
 800a62a:	1d23      	adds	r3, r4, #4
 800a62c:	1af2      	subs	r2, r6, r3
 800a62e:	d0b6      	beq.n	800a59e <_malloc_r+0x22>
 800a630:	1b9b      	subs	r3, r3, r6
 800a632:	50a3      	str	r3, [r4, r2]
 800a634:	e7b3      	b.n	800a59e <_malloc_r+0x22>
 800a636:	6862      	ldr	r2, [r4, #4]
 800a638:	42a3      	cmp	r3, r4
 800a63a:	bf0c      	ite	eq
 800a63c:	6032      	streq	r2, [r6, #0]
 800a63e:	605a      	strne	r2, [r3, #4]
 800a640:	e7ec      	b.n	800a61c <_malloc_r+0xa0>
 800a642:	4623      	mov	r3, r4
 800a644:	6864      	ldr	r4, [r4, #4]
 800a646:	e7b2      	b.n	800a5ae <_malloc_r+0x32>
 800a648:	4634      	mov	r4, r6
 800a64a:	6876      	ldr	r6, [r6, #4]
 800a64c:	e7b9      	b.n	800a5c2 <_malloc_r+0x46>
 800a64e:	230c      	movs	r3, #12
 800a650:	603b      	str	r3, [r7, #0]
 800a652:	4638      	mov	r0, r7
 800a654:	f000 fa52 	bl	800aafc <__malloc_unlock>
 800a658:	e7a1      	b.n	800a59e <_malloc_r+0x22>
 800a65a:	6025      	str	r5, [r4, #0]
 800a65c:	e7de      	b.n	800a61c <_malloc_r+0xa0>
 800a65e:	bf00      	nop
 800a660:	20000448 	.word	0x20000448

0800a664 <__sfputc_r>:
 800a664:	6893      	ldr	r3, [r2, #8]
 800a666:	3b01      	subs	r3, #1
 800a668:	2b00      	cmp	r3, #0
 800a66a:	b410      	push	{r4}
 800a66c:	6093      	str	r3, [r2, #8]
 800a66e:	da08      	bge.n	800a682 <__sfputc_r+0x1e>
 800a670:	6994      	ldr	r4, [r2, #24]
 800a672:	42a3      	cmp	r3, r4
 800a674:	db01      	blt.n	800a67a <__sfputc_r+0x16>
 800a676:	290a      	cmp	r1, #10
 800a678:	d103      	bne.n	800a682 <__sfputc_r+0x1e>
 800a67a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a67e:	f7fe ba01 	b.w	8008a84 <__swbuf_r>
 800a682:	6813      	ldr	r3, [r2, #0]
 800a684:	1c58      	adds	r0, r3, #1
 800a686:	6010      	str	r0, [r2, #0]
 800a688:	7019      	strb	r1, [r3, #0]
 800a68a:	4608      	mov	r0, r1
 800a68c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a690:	4770      	bx	lr

0800a692 <__sfputs_r>:
 800a692:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a694:	4606      	mov	r6, r0
 800a696:	460f      	mov	r7, r1
 800a698:	4614      	mov	r4, r2
 800a69a:	18d5      	adds	r5, r2, r3
 800a69c:	42ac      	cmp	r4, r5
 800a69e:	d101      	bne.n	800a6a4 <__sfputs_r+0x12>
 800a6a0:	2000      	movs	r0, #0
 800a6a2:	e007      	b.n	800a6b4 <__sfputs_r+0x22>
 800a6a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6a8:	463a      	mov	r2, r7
 800a6aa:	4630      	mov	r0, r6
 800a6ac:	f7ff ffda 	bl	800a664 <__sfputc_r>
 800a6b0:	1c43      	adds	r3, r0, #1
 800a6b2:	d1f3      	bne.n	800a69c <__sfputs_r+0xa>
 800a6b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a6b8 <_vfiprintf_r>:
 800a6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6bc:	460d      	mov	r5, r1
 800a6be:	b09d      	sub	sp, #116	; 0x74
 800a6c0:	4614      	mov	r4, r2
 800a6c2:	4698      	mov	r8, r3
 800a6c4:	4606      	mov	r6, r0
 800a6c6:	b118      	cbz	r0, 800a6d0 <_vfiprintf_r+0x18>
 800a6c8:	6983      	ldr	r3, [r0, #24]
 800a6ca:	b90b      	cbnz	r3, 800a6d0 <_vfiprintf_r+0x18>
 800a6cc:	f7ff fa30 	bl	8009b30 <__sinit>
 800a6d0:	4b89      	ldr	r3, [pc, #548]	; (800a8f8 <_vfiprintf_r+0x240>)
 800a6d2:	429d      	cmp	r5, r3
 800a6d4:	d11b      	bne.n	800a70e <_vfiprintf_r+0x56>
 800a6d6:	6875      	ldr	r5, [r6, #4]
 800a6d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6da:	07d9      	lsls	r1, r3, #31
 800a6dc:	d405      	bmi.n	800a6ea <_vfiprintf_r+0x32>
 800a6de:	89ab      	ldrh	r3, [r5, #12]
 800a6e0:	059a      	lsls	r2, r3, #22
 800a6e2:	d402      	bmi.n	800a6ea <_vfiprintf_r+0x32>
 800a6e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6e6:	f7ff fac6 	bl	8009c76 <__retarget_lock_acquire_recursive>
 800a6ea:	89ab      	ldrh	r3, [r5, #12]
 800a6ec:	071b      	lsls	r3, r3, #28
 800a6ee:	d501      	bpl.n	800a6f4 <_vfiprintf_r+0x3c>
 800a6f0:	692b      	ldr	r3, [r5, #16]
 800a6f2:	b9eb      	cbnz	r3, 800a730 <_vfiprintf_r+0x78>
 800a6f4:	4629      	mov	r1, r5
 800a6f6:	4630      	mov	r0, r6
 800a6f8:	f7fe fa16 	bl	8008b28 <__swsetup_r>
 800a6fc:	b1c0      	cbz	r0, 800a730 <_vfiprintf_r+0x78>
 800a6fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a700:	07dc      	lsls	r4, r3, #31
 800a702:	d50e      	bpl.n	800a722 <_vfiprintf_r+0x6a>
 800a704:	f04f 30ff 	mov.w	r0, #4294967295
 800a708:	b01d      	add	sp, #116	; 0x74
 800a70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a70e:	4b7b      	ldr	r3, [pc, #492]	; (800a8fc <_vfiprintf_r+0x244>)
 800a710:	429d      	cmp	r5, r3
 800a712:	d101      	bne.n	800a718 <_vfiprintf_r+0x60>
 800a714:	68b5      	ldr	r5, [r6, #8]
 800a716:	e7df      	b.n	800a6d8 <_vfiprintf_r+0x20>
 800a718:	4b79      	ldr	r3, [pc, #484]	; (800a900 <_vfiprintf_r+0x248>)
 800a71a:	429d      	cmp	r5, r3
 800a71c:	bf08      	it	eq
 800a71e:	68f5      	ldreq	r5, [r6, #12]
 800a720:	e7da      	b.n	800a6d8 <_vfiprintf_r+0x20>
 800a722:	89ab      	ldrh	r3, [r5, #12]
 800a724:	0598      	lsls	r0, r3, #22
 800a726:	d4ed      	bmi.n	800a704 <_vfiprintf_r+0x4c>
 800a728:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a72a:	f7ff faa5 	bl	8009c78 <__retarget_lock_release_recursive>
 800a72e:	e7e9      	b.n	800a704 <_vfiprintf_r+0x4c>
 800a730:	2300      	movs	r3, #0
 800a732:	9309      	str	r3, [sp, #36]	; 0x24
 800a734:	2320      	movs	r3, #32
 800a736:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a73a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a73e:	2330      	movs	r3, #48	; 0x30
 800a740:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a904 <_vfiprintf_r+0x24c>
 800a744:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a748:	f04f 0901 	mov.w	r9, #1
 800a74c:	4623      	mov	r3, r4
 800a74e:	469a      	mov	sl, r3
 800a750:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a754:	b10a      	cbz	r2, 800a75a <_vfiprintf_r+0xa2>
 800a756:	2a25      	cmp	r2, #37	; 0x25
 800a758:	d1f9      	bne.n	800a74e <_vfiprintf_r+0x96>
 800a75a:	ebba 0b04 	subs.w	fp, sl, r4
 800a75e:	d00b      	beq.n	800a778 <_vfiprintf_r+0xc0>
 800a760:	465b      	mov	r3, fp
 800a762:	4622      	mov	r2, r4
 800a764:	4629      	mov	r1, r5
 800a766:	4630      	mov	r0, r6
 800a768:	f7ff ff93 	bl	800a692 <__sfputs_r>
 800a76c:	3001      	adds	r0, #1
 800a76e:	f000 80aa 	beq.w	800a8c6 <_vfiprintf_r+0x20e>
 800a772:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a774:	445a      	add	r2, fp
 800a776:	9209      	str	r2, [sp, #36]	; 0x24
 800a778:	f89a 3000 	ldrb.w	r3, [sl]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	f000 80a2 	beq.w	800a8c6 <_vfiprintf_r+0x20e>
 800a782:	2300      	movs	r3, #0
 800a784:	f04f 32ff 	mov.w	r2, #4294967295
 800a788:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a78c:	f10a 0a01 	add.w	sl, sl, #1
 800a790:	9304      	str	r3, [sp, #16]
 800a792:	9307      	str	r3, [sp, #28]
 800a794:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a798:	931a      	str	r3, [sp, #104]	; 0x68
 800a79a:	4654      	mov	r4, sl
 800a79c:	2205      	movs	r2, #5
 800a79e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7a2:	4858      	ldr	r0, [pc, #352]	; (800a904 <_vfiprintf_r+0x24c>)
 800a7a4:	f7f5 fd1c 	bl	80001e0 <memchr>
 800a7a8:	9a04      	ldr	r2, [sp, #16]
 800a7aa:	b9d8      	cbnz	r0, 800a7e4 <_vfiprintf_r+0x12c>
 800a7ac:	06d1      	lsls	r1, r2, #27
 800a7ae:	bf44      	itt	mi
 800a7b0:	2320      	movmi	r3, #32
 800a7b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7b6:	0713      	lsls	r3, r2, #28
 800a7b8:	bf44      	itt	mi
 800a7ba:	232b      	movmi	r3, #43	; 0x2b
 800a7bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7c0:	f89a 3000 	ldrb.w	r3, [sl]
 800a7c4:	2b2a      	cmp	r3, #42	; 0x2a
 800a7c6:	d015      	beq.n	800a7f4 <_vfiprintf_r+0x13c>
 800a7c8:	9a07      	ldr	r2, [sp, #28]
 800a7ca:	4654      	mov	r4, sl
 800a7cc:	2000      	movs	r0, #0
 800a7ce:	f04f 0c0a 	mov.w	ip, #10
 800a7d2:	4621      	mov	r1, r4
 800a7d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7d8:	3b30      	subs	r3, #48	; 0x30
 800a7da:	2b09      	cmp	r3, #9
 800a7dc:	d94e      	bls.n	800a87c <_vfiprintf_r+0x1c4>
 800a7de:	b1b0      	cbz	r0, 800a80e <_vfiprintf_r+0x156>
 800a7e0:	9207      	str	r2, [sp, #28]
 800a7e2:	e014      	b.n	800a80e <_vfiprintf_r+0x156>
 800a7e4:	eba0 0308 	sub.w	r3, r0, r8
 800a7e8:	fa09 f303 	lsl.w	r3, r9, r3
 800a7ec:	4313      	orrs	r3, r2
 800a7ee:	9304      	str	r3, [sp, #16]
 800a7f0:	46a2      	mov	sl, r4
 800a7f2:	e7d2      	b.n	800a79a <_vfiprintf_r+0xe2>
 800a7f4:	9b03      	ldr	r3, [sp, #12]
 800a7f6:	1d19      	adds	r1, r3, #4
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	9103      	str	r1, [sp, #12]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	bfbb      	ittet	lt
 800a800:	425b      	neglt	r3, r3
 800a802:	f042 0202 	orrlt.w	r2, r2, #2
 800a806:	9307      	strge	r3, [sp, #28]
 800a808:	9307      	strlt	r3, [sp, #28]
 800a80a:	bfb8      	it	lt
 800a80c:	9204      	strlt	r2, [sp, #16]
 800a80e:	7823      	ldrb	r3, [r4, #0]
 800a810:	2b2e      	cmp	r3, #46	; 0x2e
 800a812:	d10c      	bne.n	800a82e <_vfiprintf_r+0x176>
 800a814:	7863      	ldrb	r3, [r4, #1]
 800a816:	2b2a      	cmp	r3, #42	; 0x2a
 800a818:	d135      	bne.n	800a886 <_vfiprintf_r+0x1ce>
 800a81a:	9b03      	ldr	r3, [sp, #12]
 800a81c:	1d1a      	adds	r2, r3, #4
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	9203      	str	r2, [sp, #12]
 800a822:	2b00      	cmp	r3, #0
 800a824:	bfb8      	it	lt
 800a826:	f04f 33ff 	movlt.w	r3, #4294967295
 800a82a:	3402      	adds	r4, #2
 800a82c:	9305      	str	r3, [sp, #20]
 800a82e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a914 <_vfiprintf_r+0x25c>
 800a832:	7821      	ldrb	r1, [r4, #0]
 800a834:	2203      	movs	r2, #3
 800a836:	4650      	mov	r0, sl
 800a838:	f7f5 fcd2 	bl	80001e0 <memchr>
 800a83c:	b140      	cbz	r0, 800a850 <_vfiprintf_r+0x198>
 800a83e:	2340      	movs	r3, #64	; 0x40
 800a840:	eba0 000a 	sub.w	r0, r0, sl
 800a844:	fa03 f000 	lsl.w	r0, r3, r0
 800a848:	9b04      	ldr	r3, [sp, #16]
 800a84a:	4303      	orrs	r3, r0
 800a84c:	3401      	adds	r4, #1
 800a84e:	9304      	str	r3, [sp, #16]
 800a850:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a854:	482c      	ldr	r0, [pc, #176]	; (800a908 <_vfiprintf_r+0x250>)
 800a856:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a85a:	2206      	movs	r2, #6
 800a85c:	f7f5 fcc0 	bl	80001e0 <memchr>
 800a860:	2800      	cmp	r0, #0
 800a862:	d03f      	beq.n	800a8e4 <_vfiprintf_r+0x22c>
 800a864:	4b29      	ldr	r3, [pc, #164]	; (800a90c <_vfiprintf_r+0x254>)
 800a866:	bb1b      	cbnz	r3, 800a8b0 <_vfiprintf_r+0x1f8>
 800a868:	9b03      	ldr	r3, [sp, #12]
 800a86a:	3307      	adds	r3, #7
 800a86c:	f023 0307 	bic.w	r3, r3, #7
 800a870:	3308      	adds	r3, #8
 800a872:	9303      	str	r3, [sp, #12]
 800a874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a876:	443b      	add	r3, r7
 800a878:	9309      	str	r3, [sp, #36]	; 0x24
 800a87a:	e767      	b.n	800a74c <_vfiprintf_r+0x94>
 800a87c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a880:	460c      	mov	r4, r1
 800a882:	2001      	movs	r0, #1
 800a884:	e7a5      	b.n	800a7d2 <_vfiprintf_r+0x11a>
 800a886:	2300      	movs	r3, #0
 800a888:	3401      	adds	r4, #1
 800a88a:	9305      	str	r3, [sp, #20]
 800a88c:	4619      	mov	r1, r3
 800a88e:	f04f 0c0a 	mov.w	ip, #10
 800a892:	4620      	mov	r0, r4
 800a894:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a898:	3a30      	subs	r2, #48	; 0x30
 800a89a:	2a09      	cmp	r2, #9
 800a89c:	d903      	bls.n	800a8a6 <_vfiprintf_r+0x1ee>
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d0c5      	beq.n	800a82e <_vfiprintf_r+0x176>
 800a8a2:	9105      	str	r1, [sp, #20]
 800a8a4:	e7c3      	b.n	800a82e <_vfiprintf_r+0x176>
 800a8a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8aa:	4604      	mov	r4, r0
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	e7f0      	b.n	800a892 <_vfiprintf_r+0x1da>
 800a8b0:	ab03      	add	r3, sp, #12
 800a8b2:	9300      	str	r3, [sp, #0]
 800a8b4:	462a      	mov	r2, r5
 800a8b6:	4b16      	ldr	r3, [pc, #88]	; (800a910 <_vfiprintf_r+0x258>)
 800a8b8:	a904      	add	r1, sp, #16
 800a8ba:	4630      	mov	r0, r6
 800a8bc:	f7fd fc8a 	bl	80081d4 <_printf_float>
 800a8c0:	4607      	mov	r7, r0
 800a8c2:	1c78      	adds	r0, r7, #1
 800a8c4:	d1d6      	bne.n	800a874 <_vfiprintf_r+0x1bc>
 800a8c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8c8:	07d9      	lsls	r1, r3, #31
 800a8ca:	d405      	bmi.n	800a8d8 <_vfiprintf_r+0x220>
 800a8cc:	89ab      	ldrh	r3, [r5, #12]
 800a8ce:	059a      	lsls	r2, r3, #22
 800a8d0:	d402      	bmi.n	800a8d8 <_vfiprintf_r+0x220>
 800a8d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8d4:	f7ff f9d0 	bl	8009c78 <__retarget_lock_release_recursive>
 800a8d8:	89ab      	ldrh	r3, [r5, #12]
 800a8da:	065b      	lsls	r3, r3, #25
 800a8dc:	f53f af12 	bmi.w	800a704 <_vfiprintf_r+0x4c>
 800a8e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8e2:	e711      	b.n	800a708 <_vfiprintf_r+0x50>
 800a8e4:	ab03      	add	r3, sp, #12
 800a8e6:	9300      	str	r3, [sp, #0]
 800a8e8:	462a      	mov	r2, r5
 800a8ea:	4b09      	ldr	r3, [pc, #36]	; (800a910 <_vfiprintf_r+0x258>)
 800a8ec:	a904      	add	r1, sp, #16
 800a8ee:	4630      	mov	r0, r6
 800a8f0:	f7fd ff14 	bl	800871c <_printf_i>
 800a8f4:	e7e4      	b.n	800a8c0 <_vfiprintf_r+0x208>
 800a8f6:	bf00      	nop
 800a8f8:	0800b030 	.word	0x0800b030
 800a8fc:	0800b050 	.word	0x0800b050
 800a900:	0800b010 	.word	0x0800b010
 800a904:	0800b1cc 	.word	0x0800b1cc
 800a908:	0800b1d6 	.word	0x0800b1d6
 800a90c:	080081d5 	.word	0x080081d5
 800a910:	0800a693 	.word	0x0800a693
 800a914:	0800b1d2 	.word	0x0800b1d2

0800a918 <_sbrk_r>:
 800a918:	b538      	push	{r3, r4, r5, lr}
 800a91a:	4d06      	ldr	r5, [pc, #24]	; (800a934 <_sbrk_r+0x1c>)
 800a91c:	2300      	movs	r3, #0
 800a91e:	4604      	mov	r4, r0
 800a920:	4608      	mov	r0, r1
 800a922:	602b      	str	r3, [r5, #0]
 800a924:	f7fc fe30 	bl	8007588 <_sbrk>
 800a928:	1c43      	adds	r3, r0, #1
 800a92a:	d102      	bne.n	800a932 <_sbrk_r+0x1a>
 800a92c:	682b      	ldr	r3, [r5, #0]
 800a92e:	b103      	cbz	r3, 800a932 <_sbrk_r+0x1a>
 800a930:	6023      	str	r3, [r4, #0]
 800a932:	bd38      	pop	{r3, r4, r5, pc}
 800a934:	20000450 	.word	0x20000450

0800a938 <__sread>:
 800a938:	b510      	push	{r4, lr}
 800a93a:	460c      	mov	r4, r1
 800a93c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a940:	f000 f8e2 	bl	800ab08 <_read_r>
 800a944:	2800      	cmp	r0, #0
 800a946:	bfab      	itete	ge
 800a948:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a94a:	89a3      	ldrhlt	r3, [r4, #12]
 800a94c:	181b      	addge	r3, r3, r0
 800a94e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a952:	bfac      	ite	ge
 800a954:	6563      	strge	r3, [r4, #84]	; 0x54
 800a956:	81a3      	strhlt	r3, [r4, #12]
 800a958:	bd10      	pop	{r4, pc}

0800a95a <__swrite>:
 800a95a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a95e:	461f      	mov	r7, r3
 800a960:	898b      	ldrh	r3, [r1, #12]
 800a962:	05db      	lsls	r3, r3, #23
 800a964:	4605      	mov	r5, r0
 800a966:	460c      	mov	r4, r1
 800a968:	4616      	mov	r6, r2
 800a96a:	d505      	bpl.n	800a978 <__swrite+0x1e>
 800a96c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a970:	2302      	movs	r3, #2
 800a972:	2200      	movs	r2, #0
 800a974:	f000 f898 	bl	800aaa8 <_lseek_r>
 800a978:	89a3      	ldrh	r3, [r4, #12]
 800a97a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a97e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a982:	81a3      	strh	r3, [r4, #12]
 800a984:	4632      	mov	r2, r6
 800a986:	463b      	mov	r3, r7
 800a988:	4628      	mov	r0, r5
 800a98a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a98e:	f000 b817 	b.w	800a9c0 <_write_r>

0800a992 <__sseek>:
 800a992:	b510      	push	{r4, lr}
 800a994:	460c      	mov	r4, r1
 800a996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a99a:	f000 f885 	bl	800aaa8 <_lseek_r>
 800a99e:	1c43      	adds	r3, r0, #1
 800a9a0:	89a3      	ldrh	r3, [r4, #12]
 800a9a2:	bf15      	itete	ne
 800a9a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a9a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a9aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a9ae:	81a3      	strheq	r3, [r4, #12]
 800a9b0:	bf18      	it	ne
 800a9b2:	81a3      	strhne	r3, [r4, #12]
 800a9b4:	bd10      	pop	{r4, pc}

0800a9b6 <__sclose>:
 800a9b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9ba:	f000 b831 	b.w	800aa20 <_close_r>
	...

0800a9c0 <_write_r>:
 800a9c0:	b538      	push	{r3, r4, r5, lr}
 800a9c2:	4d07      	ldr	r5, [pc, #28]	; (800a9e0 <_write_r+0x20>)
 800a9c4:	4604      	mov	r4, r0
 800a9c6:	4608      	mov	r0, r1
 800a9c8:	4611      	mov	r1, r2
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	602a      	str	r2, [r5, #0]
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	f7fc f856 	bl	8006a80 <_write>
 800a9d4:	1c43      	adds	r3, r0, #1
 800a9d6:	d102      	bne.n	800a9de <_write_r+0x1e>
 800a9d8:	682b      	ldr	r3, [r5, #0]
 800a9da:	b103      	cbz	r3, 800a9de <_write_r+0x1e>
 800a9dc:	6023      	str	r3, [r4, #0]
 800a9de:	bd38      	pop	{r3, r4, r5, pc}
 800a9e0:	20000450 	.word	0x20000450

0800a9e4 <__assert_func>:
 800a9e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a9e6:	4614      	mov	r4, r2
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	4b09      	ldr	r3, [pc, #36]	; (800aa10 <__assert_func+0x2c>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4605      	mov	r5, r0
 800a9f0:	68d8      	ldr	r0, [r3, #12]
 800a9f2:	b14c      	cbz	r4, 800aa08 <__assert_func+0x24>
 800a9f4:	4b07      	ldr	r3, [pc, #28]	; (800aa14 <__assert_func+0x30>)
 800a9f6:	9100      	str	r1, [sp, #0]
 800a9f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a9fc:	4906      	ldr	r1, [pc, #24]	; (800aa18 <__assert_func+0x34>)
 800a9fe:	462b      	mov	r3, r5
 800aa00:	f000 f81e 	bl	800aa40 <fiprintf>
 800aa04:	f000 f89f 	bl	800ab46 <abort>
 800aa08:	4b04      	ldr	r3, [pc, #16]	; (800aa1c <__assert_func+0x38>)
 800aa0a:	461c      	mov	r4, r3
 800aa0c:	e7f3      	b.n	800a9f6 <__assert_func+0x12>
 800aa0e:	bf00      	nop
 800aa10:	2000000c 	.word	0x2000000c
 800aa14:	0800b1dd 	.word	0x0800b1dd
 800aa18:	0800b1ea 	.word	0x0800b1ea
 800aa1c:	0800b218 	.word	0x0800b218

0800aa20 <_close_r>:
 800aa20:	b538      	push	{r3, r4, r5, lr}
 800aa22:	4d06      	ldr	r5, [pc, #24]	; (800aa3c <_close_r+0x1c>)
 800aa24:	2300      	movs	r3, #0
 800aa26:	4604      	mov	r4, r0
 800aa28:	4608      	mov	r0, r1
 800aa2a:	602b      	str	r3, [r5, #0]
 800aa2c:	f7fc fd77 	bl	800751e <_close>
 800aa30:	1c43      	adds	r3, r0, #1
 800aa32:	d102      	bne.n	800aa3a <_close_r+0x1a>
 800aa34:	682b      	ldr	r3, [r5, #0]
 800aa36:	b103      	cbz	r3, 800aa3a <_close_r+0x1a>
 800aa38:	6023      	str	r3, [r4, #0]
 800aa3a:	bd38      	pop	{r3, r4, r5, pc}
 800aa3c:	20000450 	.word	0x20000450

0800aa40 <fiprintf>:
 800aa40:	b40e      	push	{r1, r2, r3}
 800aa42:	b503      	push	{r0, r1, lr}
 800aa44:	4601      	mov	r1, r0
 800aa46:	ab03      	add	r3, sp, #12
 800aa48:	4805      	ldr	r0, [pc, #20]	; (800aa60 <fiprintf+0x20>)
 800aa4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa4e:	6800      	ldr	r0, [r0, #0]
 800aa50:	9301      	str	r3, [sp, #4]
 800aa52:	f7ff fe31 	bl	800a6b8 <_vfiprintf_r>
 800aa56:	b002      	add	sp, #8
 800aa58:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa5c:	b003      	add	sp, #12
 800aa5e:	4770      	bx	lr
 800aa60:	2000000c 	.word	0x2000000c

0800aa64 <_fstat_r>:
 800aa64:	b538      	push	{r3, r4, r5, lr}
 800aa66:	4d07      	ldr	r5, [pc, #28]	; (800aa84 <_fstat_r+0x20>)
 800aa68:	2300      	movs	r3, #0
 800aa6a:	4604      	mov	r4, r0
 800aa6c:	4608      	mov	r0, r1
 800aa6e:	4611      	mov	r1, r2
 800aa70:	602b      	str	r3, [r5, #0]
 800aa72:	f7fc fd60 	bl	8007536 <_fstat>
 800aa76:	1c43      	adds	r3, r0, #1
 800aa78:	d102      	bne.n	800aa80 <_fstat_r+0x1c>
 800aa7a:	682b      	ldr	r3, [r5, #0]
 800aa7c:	b103      	cbz	r3, 800aa80 <_fstat_r+0x1c>
 800aa7e:	6023      	str	r3, [r4, #0]
 800aa80:	bd38      	pop	{r3, r4, r5, pc}
 800aa82:	bf00      	nop
 800aa84:	20000450 	.word	0x20000450

0800aa88 <_isatty_r>:
 800aa88:	b538      	push	{r3, r4, r5, lr}
 800aa8a:	4d06      	ldr	r5, [pc, #24]	; (800aaa4 <_isatty_r+0x1c>)
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	4604      	mov	r4, r0
 800aa90:	4608      	mov	r0, r1
 800aa92:	602b      	str	r3, [r5, #0]
 800aa94:	f7fc fd5f 	bl	8007556 <_isatty>
 800aa98:	1c43      	adds	r3, r0, #1
 800aa9a:	d102      	bne.n	800aaa2 <_isatty_r+0x1a>
 800aa9c:	682b      	ldr	r3, [r5, #0]
 800aa9e:	b103      	cbz	r3, 800aaa2 <_isatty_r+0x1a>
 800aaa0:	6023      	str	r3, [r4, #0]
 800aaa2:	bd38      	pop	{r3, r4, r5, pc}
 800aaa4:	20000450 	.word	0x20000450

0800aaa8 <_lseek_r>:
 800aaa8:	b538      	push	{r3, r4, r5, lr}
 800aaaa:	4d07      	ldr	r5, [pc, #28]	; (800aac8 <_lseek_r+0x20>)
 800aaac:	4604      	mov	r4, r0
 800aaae:	4608      	mov	r0, r1
 800aab0:	4611      	mov	r1, r2
 800aab2:	2200      	movs	r2, #0
 800aab4:	602a      	str	r2, [r5, #0]
 800aab6:	461a      	mov	r2, r3
 800aab8:	f7fc fd58 	bl	800756c <_lseek>
 800aabc:	1c43      	adds	r3, r0, #1
 800aabe:	d102      	bne.n	800aac6 <_lseek_r+0x1e>
 800aac0:	682b      	ldr	r3, [r5, #0]
 800aac2:	b103      	cbz	r3, 800aac6 <_lseek_r+0x1e>
 800aac4:	6023      	str	r3, [r4, #0]
 800aac6:	bd38      	pop	{r3, r4, r5, pc}
 800aac8:	20000450 	.word	0x20000450

0800aacc <__ascii_mbtowc>:
 800aacc:	b082      	sub	sp, #8
 800aace:	b901      	cbnz	r1, 800aad2 <__ascii_mbtowc+0x6>
 800aad0:	a901      	add	r1, sp, #4
 800aad2:	b142      	cbz	r2, 800aae6 <__ascii_mbtowc+0x1a>
 800aad4:	b14b      	cbz	r3, 800aaea <__ascii_mbtowc+0x1e>
 800aad6:	7813      	ldrb	r3, [r2, #0]
 800aad8:	600b      	str	r3, [r1, #0]
 800aada:	7812      	ldrb	r2, [r2, #0]
 800aadc:	1e10      	subs	r0, r2, #0
 800aade:	bf18      	it	ne
 800aae0:	2001      	movne	r0, #1
 800aae2:	b002      	add	sp, #8
 800aae4:	4770      	bx	lr
 800aae6:	4610      	mov	r0, r2
 800aae8:	e7fb      	b.n	800aae2 <__ascii_mbtowc+0x16>
 800aaea:	f06f 0001 	mvn.w	r0, #1
 800aaee:	e7f8      	b.n	800aae2 <__ascii_mbtowc+0x16>

0800aaf0 <__malloc_lock>:
 800aaf0:	4801      	ldr	r0, [pc, #4]	; (800aaf8 <__malloc_lock+0x8>)
 800aaf2:	f7ff b8c0 	b.w	8009c76 <__retarget_lock_acquire_recursive>
 800aaf6:	bf00      	nop
 800aaf8:	20000444 	.word	0x20000444

0800aafc <__malloc_unlock>:
 800aafc:	4801      	ldr	r0, [pc, #4]	; (800ab04 <__malloc_unlock+0x8>)
 800aafe:	f7ff b8bb 	b.w	8009c78 <__retarget_lock_release_recursive>
 800ab02:	bf00      	nop
 800ab04:	20000444 	.word	0x20000444

0800ab08 <_read_r>:
 800ab08:	b538      	push	{r3, r4, r5, lr}
 800ab0a:	4d07      	ldr	r5, [pc, #28]	; (800ab28 <_read_r+0x20>)
 800ab0c:	4604      	mov	r4, r0
 800ab0e:	4608      	mov	r0, r1
 800ab10:	4611      	mov	r1, r2
 800ab12:	2200      	movs	r2, #0
 800ab14:	602a      	str	r2, [r5, #0]
 800ab16:	461a      	mov	r2, r3
 800ab18:	f7fc fce4 	bl	80074e4 <_read>
 800ab1c:	1c43      	adds	r3, r0, #1
 800ab1e:	d102      	bne.n	800ab26 <_read_r+0x1e>
 800ab20:	682b      	ldr	r3, [r5, #0]
 800ab22:	b103      	cbz	r3, 800ab26 <_read_r+0x1e>
 800ab24:	6023      	str	r3, [r4, #0]
 800ab26:	bd38      	pop	{r3, r4, r5, pc}
 800ab28:	20000450 	.word	0x20000450

0800ab2c <__ascii_wctomb>:
 800ab2c:	b149      	cbz	r1, 800ab42 <__ascii_wctomb+0x16>
 800ab2e:	2aff      	cmp	r2, #255	; 0xff
 800ab30:	bf85      	ittet	hi
 800ab32:	238a      	movhi	r3, #138	; 0x8a
 800ab34:	6003      	strhi	r3, [r0, #0]
 800ab36:	700a      	strbls	r2, [r1, #0]
 800ab38:	f04f 30ff 	movhi.w	r0, #4294967295
 800ab3c:	bf98      	it	ls
 800ab3e:	2001      	movls	r0, #1
 800ab40:	4770      	bx	lr
 800ab42:	4608      	mov	r0, r1
 800ab44:	4770      	bx	lr

0800ab46 <abort>:
 800ab46:	b508      	push	{r3, lr}
 800ab48:	2006      	movs	r0, #6
 800ab4a:	f000 f82b 	bl	800aba4 <raise>
 800ab4e:	2001      	movs	r0, #1
 800ab50:	f7fc fcbe 	bl	80074d0 <_exit>

0800ab54 <_raise_r>:
 800ab54:	291f      	cmp	r1, #31
 800ab56:	b538      	push	{r3, r4, r5, lr}
 800ab58:	4604      	mov	r4, r0
 800ab5a:	460d      	mov	r5, r1
 800ab5c:	d904      	bls.n	800ab68 <_raise_r+0x14>
 800ab5e:	2316      	movs	r3, #22
 800ab60:	6003      	str	r3, [r0, #0]
 800ab62:	f04f 30ff 	mov.w	r0, #4294967295
 800ab66:	bd38      	pop	{r3, r4, r5, pc}
 800ab68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ab6a:	b112      	cbz	r2, 800ab72 <_raise_r+0x1e>
 800ab6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab70:	b94b      	cbnz	r3, 800ab86 <_raise_r+0x32>
 800ab72:	4620      	mov	r0, r4
 800ab74:	f000 f830 	bl	800abd8 <_getpid_r>
 800ab78:	462a      	mov	r2, r5
 800ab7a:	4601      	mov	r1, r0
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab82:	f000 b817 	b.w	800abb4 <_kill_r>
 800ab86:	2b01      	cmp	r3, #1
 800ab88:	d00a      	beq.n	800aba0 <_raise_r+0x4c>
 800ab8a:	1c59      	adds	r1, r3, #1
 800ab8c:	d103      	bne.n	800ab96 <_raise_r+0x42>
 800ab8e:	2316      	movs	r3, #22
 800ab90:	6003      	str	r3, [r0, #0]
 800ab92:	2001      	movs	r0, #1
 800ab94:	e7e7      	b.n	800ab66 <_raise_r+0x12>
 800ab96:	2400      	movs	r4, #0
 800ab98:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ab9c:	4628      	mov	r0, r5
 800ab9e:	4798      	blx	r3
 800aba0:	2000      	movs	r0, #0
 800aba2:	e7e0      	b.n	800ab66 <_raise_r+0x12>

0800aba4 <raise>:
 800aba4:	4b02      	ldr	r3, [pc, #8]	; (800abb0 <raise+0xc>)
 800aba6:	4601      	mov	r1, r0
 800aba8:	6818      	ldr	r0, [r3, #0]
 800abaa:	f7ff bfd3 	b.w	800ab54 <_raise_r>
 800abae:	bf00      	nop
 800abb0:	2000000c 	.word	0x2000000c

0800abb4 <_kill_r>:
 800abb4:	b538      	push	{r3, r4, r5, lr}
 800abb6:	4d07      	ldr	r5, [pc, #28]	; (800abd4 <_kill_r+0x20>)
 800abb8:	2300      	movs	r3, #0
 800abba:	4604      	mov	r4, r0
 800abbc:	4608      	mov	r0, r1
 800abbe:	4611      	mov	r1, r2
 800abc0:	602b      	str	r3, [r5, #0]
 800abc2:	f7fc fc75 	bl	80074b0 <_kill>
 800abc6:	1c43      	adds	r3, r0, #1
 800abc8:	d102      	bne.n	800abd0 <_kill_r+0x1c>
 800abca:	682b      	ldr	r3, [r5, #0]
 800abcc:	b103      	cbz	r3, 800abd0 <_kill_r+0x1c>
 800abce:	6023      	str	r3, [r4, #0]
 800abd0:	bd38      	pop	{r3, r4, r5, pc}
 800abd2:	bf00      	nop
 800abd4:	20000450 	.word	0x20000450

0800abd8 <_getpid_r>:
 800abd8:	f7fc bc62 	b.w	80074a0 <_getpid>

0800abdc <_init>:
 800abdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abde:	bf00      	nop
 800abe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abe2:	bc08      	pop	{r3}
 800abe4:	469e      	mov	lr, r3
 800abe6:	4770      	bx	lr

0800abe8 <_fini>:
 800abe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abea:	bf00      	nop
 800abec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abee:	bc08      	pop	{r3}
 800abf0:	469e      	mov	lr, r3
 800abf2:	4770      	bx	lr
