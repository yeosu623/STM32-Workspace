
4-1. FS-iA6B PC Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005750  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  080058e0  080058e0  000158e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b6c  08005b6c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005b6c  08005b6c  00015b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b74  08005b74  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b74  08005b74  00015b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b78  08005b78  00015b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005b7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000070  08005bec  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08005bec  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cffe  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cc4  00000000  00000000  0002d09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e98  00000000  00000000  0002fd68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d48  00000000  00000000  00030c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023d04  00000000  00000000  00031948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e3d7  00000000  00000000  0005564c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca478  00000000  00000000  00063a23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012de9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004200  00000000  00000000  0012deec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080058c8 	.word	0x080058c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080058c8 	.word	0x080058c8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000578:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <HAL_Init+0x40>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a0d      	ldr	r2, [pc, #52]	; (80005b4 <HAL_Init+0x40>)
 800057e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000582:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000584:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <HAL_Init+0x40>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0a      	ldr	r2, [pc, #40]	; (80005b4 <HAL_Init+0x40>)
 800058a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800058e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000590:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <HAL_Init+0x40>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <HAL_Init+0x40>)
 8000596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800059a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800059c:	2003      	movs	r0, #3
 800059e:	f000 f931 	bl	8000804 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005a2:	2000      	movs	r0, #0
 80005a4:	f000 f808 	bl	80005b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a8:	f003 fb70 	bl	8003c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005ac:	2300      	movs	r3, #0
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40023c00 	.word	0x40023c00

080005b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <HAL_InitTick+0x54>)
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	4b12      	ldr	r3, [pc, #72]	; (8000610 <HAL_InitTick+0x58>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	4619      	mov	r1, r3
 80005ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80005d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 f93b 	bl	8000852 <HAL_SYSTICK_Config>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005e2:	2301      	movs	r3, #1
 80005e4:	e00e      	b.n	8000604 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2b0f      	cmp	r3, #15
 80005ea:	d80a      	bhi.n	8000602 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005ec:	2200      	movs	r2, #0
 80005ee:	6879      	ldr	r1, [r7, #4]
 80005f0:	f04f 30ff 	mov.w	r0, #4294967295
 80005f4:	f000 f911 	bl	800081a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005f8:	4a06      	ldr	r2, [pc, #24]	; (8000614 <HAL_InitTick+0x5c>)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005fe:	2300      	movs	r3, #0
 8000600:	e000      	b.n	8000604 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000602:	2301      	movs	r3, #1
}
 8000604:	4618      	mov	r0, r3
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000008 	.word	0x20000008
 8000610:	20000004 	.word	0x20000004
 8000614:	20000000 	.word	0x20000000

08000618 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <HAL_IncTick+0x20>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	461a      	mov	r2, r3
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <HAL_IncTick+0x24>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4413      	add	r3, r2
 8000628:	4a04      	ldr	r2, [pc, #16]	; (800063c <HAL_IncTick+0x24>)
 800062a:	6013      	str	r3, [r2, #0]
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	20000004 	.word	0x20000004
 800063c:	2000008c 	.word	0x2000008c

08000640 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  return uwTick;
 8000644:	4b03      	ldr	r3, [pc, #12]	; (8000654 <HAL_GetTick+0x14>)
 8000646:	681b      	ldr	r3, [r3, #0]
}
 8000648:	4618      	mov	r0, r3
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	2000008c 	.word	0x2000008c

08000658 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000660:	f7ff ffee 	bl	8000640 <HAL_GetTick>
 8000664:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000670:	d005      	beq.n	800067e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000672:	4b0a      	ldr	r3, [pc, #40]	; (800069c <HAL_Delay+0x44>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	461a      	mov	r2, r3
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	4413      	add	r3, r2
 800067c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800067e:	bf00      	nop
 8000680:	f7ff ffde 	bl	8000640 <HAL_GetTick>
 8000684:	4602      	mov	r2, r0
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	1ad3      	subs	r3, r2, r3
 800068a:	68fa      	ldr	r2, [r7, #12]
 800068c:	429a      	cmp	r2, r3
 800068e:	d8f7      	bhi.n	8000680 <HAL_Delay+0x28>
  {
  }
}
 8000690:	bf00      	nop
 8000692:	bf00      	nop
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000004 	.word	0x20000004

080006a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f003 0307 	and.w	r3, r3, #7
 80006ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <__NVIC_SetPriorityGrouping+0x44>)
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006b6:	68ba      	ldr	r2, [r7, #8]
 80006b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006bc:	4013      	ands	r3, r2
 80006be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006d2:	4a04      	ldr	r2, [pc, #16]	; (80006e4 <__NVIC_SetPriorityGrouping+0x44>)
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	60d3      	str	r3, [r2, #12]
}
 80006d8:	bf00      	nop
 80006da:	3714      	adds	r7, #20
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006ec:	4b04      	ldr	r3, [pc, #16]	; (8000700 <__NVIC_GetPriorityGrouping+0x18>)
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	0a1b      	lsrs	r3, r3, #8
 80006f2:	f003 0307 	and.w	r3, r3, #7
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	e000ed00 	.word	0xe000ed00

08000704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	6039      	str	r1, [r7, #0]
 800070e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000714:	2b00      	cmp	r3, #0
 8000716:	db0a      	blt.n	800072e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	b2da      	uxtb	r2, r3
 800071c:	490c      	ldr	r1, [pc, #48]	; (8000750 <__NVIC_SetPriority+0x4c>)
 800071e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000722:	0112      	lsls	r2, r2, #4
 8000724:	b2d2      	uxtb	r2, r2
 8000726:	440b      	add	r3, r1
 8000728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800072c:	e00a      	b.n	8000744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	b2da      	uxtb	r2, r3
 8000732:	4908      	ldr	r1, [pc, #32]	; (8000754 <__NVIC_SetPriority+0x50>)
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	f003 030f 	and.w	r3, r3, #15
 800073a:	3b04      	subs	r3, #4
 800073c:	0112      	lsls	r2, r2, #4
 800073e:	b2d2      	uxtb	r2, r2
 8000740:	440b      	add	r3, r1
 8000742:	761a      	strb	r2, [r3, #24]
}
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	e000e100 	.word	0xe000e100
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000758:	b480      	push	{r7}
 800075a:	b089      	sub	sp, #36	; 0x24
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	60b9      	str	r1, [r7, #8]
 8000762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	f003 0307 	and.w	r3, r3, #7
 800076a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800076c:	69fb      	ldr	r3, [r7, #28]
 800076e:	f1c3 0307 	rsb	r3, r3, #7
 8000772:	2b04      	cmp	r3, #4
 8000774:	bf28      	it	cs
 8000776:	2304      	movcs	r3, #4
 8000778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	3304      	adds	r3, #4
 800077e:	2b06      	cmp	r3, #6
 8000780:	d902      	bls.n	8000788 <NVIC_EncodePriority+0x30>
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	3b03      	subs	r3, #3
 8000786:	e000      	b.n	800078a <NVIC_EncodePriority+0x32>
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800078c:	f04f 32ff 	mov.w	r2, #4294967295
 8000790:	69bb      	ldr	r3, [r7, #24]
 8000792:	fa02 f303 	lsl.w	r3, r2, r3
 8000796:	43da      	mvns	r2, r3
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	401a      	ands	r2, r3
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007a0:	f04f 31ff 	mov.w	r1, #4294967295
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	fa01 f303 	lsl.w	r3, r1, r3
 80007aa:	43d9      	mvns	r1, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b0:	4313      	orrs	r3, r2
         );
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3724      	adds	r7, #36	; 0x24
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
	...

080007c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	3b01      	subs	r3, #1
 80007cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007d0:	d301      	bcc.n	80007d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007d2:	2301      	movs	r3, #1
 80007d4:	e00f      	b.n	80007f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007d6:	4a0a      	ldr	r2, [pc, #40]	; (8000800 <SysTick_Config+0x40>)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	3b01      	subs	r3, #1
 80007dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007de:	210f      	movs	r1, #15
 80007e0:	f04f 30ff 	mov.w	r0, #4294967295
 80007e4:	f7ff ff8e 	bl	8000704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007e8:	4b05      	ldr	r3, [pc, #20]	; (8000800 <SysTick_Config+0x40>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ee:	4b04      	ldr	r3, [pc, #16]	; (8000800 <SysTick_Config+0x40>)
 80007f0:	2207      	movs	r2, #7
 80007f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007f4:	2300      	movs	r3, #0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	e000e010 	.word	0xe000e010

08000804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f7ff ff47 	bl	80006a0 <__NVIC_SetPriorityGrouping>
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800081a:	b580      	push	{r7, lr}
 800081c:	b086      	sub	sp, #24
 800081e:	af00      	add	r7, sp, #0
 8000820:	4603      	mov	r3, r0
 8000822:	60b9      	str	r1, [r7, #8]
 8000824:	607a      	str	r2, [r7, #4]
 8000826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800082c:	f7ff ff5c 	bl	80006e8 <__NVIC_GetPriorityGrouping>
 8000830:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	68b9      	ldr	r1, [r7, #8]
 8000836:	6978      	ldr	r0, [r7, #20]
 8000838:	f7ff ff8e 	bl	8000758 <NVIC_EncodePriority>
 800083c:	4602      	mov	r2, r0
 800083e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000842:	4611      	mov	r1, r2
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff ff5d 	bl	8000704 <__NVIC_SetPriority>
}
 800084a:	bf00      	nop
 800084c:	3718      	adds	r7, #24
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f7ff ffb0 	bl	80007c0 <SysTick_Config>
 8000860:	4603      	mov	r3, r0
}
 8000862:	4618      	mov	r0, r3
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d101      	bne.n	800087e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800087a:	2301      	movs	r3, #1
 800087c:	e267      	b.n	8000d4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	2b00      	cmp	r3, #0
 8000888:	d075      	beq.n	8000976 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800088a:	4b88      	ldr	r3, [pc, #544]	; (8000aac <HAL_RCC_OscConfig+0x240>)
 800088c:	689b      	ldr	r3, [r3, #8]
 800088e:	f003 030c 	and.w	r3, r3, #12
 8000892:	2b04      	cmp	r3, #4
 8000894:	d00c      	beq.n	80008b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000896:	4b85      	ldr	r3, [pc, #532]	; (8000aac <HAL_RCC_OscConfig+0x240>)
 8000898:	689b      	ldr	r3, [r3, #8]
 800089a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800089e:	2b08      	cmp	r3, #8
 80008a0:	d112      	bne.n	80008c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008a2:	4b82      	ldr	r3, [pc, #520]	; (8000aac <HAL_RCC_OscConfig+0x240>)
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80008ae:	d10b      	bne.n	80008c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008b0:	4b7e      	ldr	r3, [pc, #504]	; (8000aac <HAL_RCC_OscConfig+0x240>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d05b      	beq.n	8000974 <HAL_RCC_OscConfig+0x108>
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d157      	bne.n	8000974 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80008c4:	2301      	movs	r3, #1
 80008c6:	e242      	b.n	8000d4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008d0:	d106      	bne.n	80008e0 <HAL_RCC_OscConfig+0x74>
 80008d2:	4b76      	ldr	r3, [pc, #472]	; (8000aac <HAL_RCC_OscConfig+0x240>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a75      	ldr	r2, [pc, #468]	; (8000aac <HAL_RCC_OscConfig+0x240>)
 80008d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008dc:	6013      	str	r3, [r2, #0]
 80008de:	e01d      	b.n	800091c <HAL_RCC_OscConfig+0xb0>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008e8:	d10c      	bne.n	8000904 <HAL_RCC_OscConfig+0x98>
 80008ea:	4b70      	ldr	r3, [pc, #448]	; (8000aac <HAL_RCC_OscConfig+0x240>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a6f      	ldr	r2, [pc, #444]	; (8000aac <HAL_RCC_OscConfig+0x240>)
 80008f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008f4:	6013      	str	r3, [r2, #0]
 80008f6:	4b6d      	ldr	r3, [pc, #436]	; (8000aac <HAL_RCC_OscConfig+0x240>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a6c      	ldr	r2, [pc, #432]	; (8000aac <HAL_RCC_OscConfig+0x240>)
 80008fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000900:	6013      	str	r3, [r2, #0]
 8000902:	e00b      	b.n	800091c <HAL_RCC_OscConfig+0xb0>
 8000904:	4b69      	ldr	r3, [pc, #420]	; (8000aac <HAL_RCC_OscConfig+0x240>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a68      	ldr	r2, [pc, #416]	; (8000aac <HAL_RCC_OscConfig+0x240>)
 800090a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800090e:	6013      	str	r3, [r2, #0]
 8000910:	4b66      	ldr	r3, [pc, #408]	; (8000aac <HAL_RCC_OscConfig+0x240>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a65      	ldr	r2, [pc, #404]	; (8000aac <HAL_RCC_OscConfig+0x240>)
 8000916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800091a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d013      	beq.n	800094c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000924:	f7ff fe8c 	bl	8000640 <HAL_GetTick>
 8000928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800092a:	e008      	b.n	800093e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800092c:	f7ff fe88 	bl	8000640 <HAL_GetTick>
 8000930:	4602      	mov	r2, r0
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	2b64      	cmp	r3, #100	; 0x64
 8000938:	d901      	bls.n	800093e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800093a:	2303      	movs	r3, #3
 800093c:	e207      	b.n	8000d4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800093e:	4b5b      	ldr	r3, [pc, #364]	; (8000aac <HAL_RCC_OscConfig+0x240>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000946:	2b00      	cmp	r3, #0
 8000948:	d0f0      	beq.n	800092c <HAL_RCC_OscConfig+0xc0>
 800094a:	e014      	b.n	8000976 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800094c:	f7ff fe78 	bl	8000640 <HAL_GetTick>
 8000950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000952:	e008      	b.n	8000966 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000954:	f7ff fe74 	bl	8000640 <HAL_GetTick>
 8000958:	4602      	mov	r2, r0
 800095a:	693b      	ldr	r3, [r7, #16]
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	2b64      	cmp	r3, #100	; 0x64
 8000960:	d901      	bls.n	8000966 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000962:	2303      	movs	r3, #3
 8000964:	e1f3      	b.n	8000d4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000966:	4b51      	ldr	r3, [pc, #324]	; (8000aac <HAL_RCC_OscConfig+0x240>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800096e:	2b00      	cmp	r3, #0
 8000970:	d1f0      	bne.n	8000954 <HAL_RCC_OscConfig+0xe8>
 8000972:	e000      	b.n	8000976 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	2b00      	cmp	r3, #0
 8000980:	d063      	beq.n	8000a4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000982:	4b4a      	ldr	r3, [pc, #296]	; (8000aac <HAL_RCC_OscConfig+0x240>)
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	f003 030c 	and.w	r3, r3, #12
 800098a:	2b00      	cmp	r3, #0
 800098c:	d00b      	beq.n	80009a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800098e:	4b47      	ldr	r3, [pc, #284]	; (8000aac <HAL_RCC_OscConfig+0x240>)
 8000990:	689b      	ldr	r3, [r3, #8]
 8000992:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000996:	2b08      	cmp	r3, #8
 8000998:	d11c      	bne.n	80009d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800099a:	4b44      	ldr	r3, [pc, #272]	; (8000aac <HAL_RCC_OscConfig+0x240>)
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d116      	bne.n	80009d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009a6:	4b41      	ldr	r3, [pc, #260]	; (8000aac <HAL_RCC_OscConfig+0x240>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f003 0302 	and.w	r3, r3, #2
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d005      	beq.n	80009be <HAL_RCC_OscConfig+0x152>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d001      	beq.n	80009be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
 80009bc:	e1c7      	b.n	8000d4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009be:	4b3b      	ldr	r3, [pc, #236]	; (8000aac <HAL_RCC_OscConfig+0x240>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	691b      	ldr	r3, [r3, #16]
 80009ca:	00db      	lsls	r3, r3, #3
 80009cc:	4937      	ldr	r1, [pc, #220]	; (8000aac <HAL_RCC_OscConfig+0x240>)
 80009ce:	4313      	orrs	r3, r2
 80009d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009d2:	e03a      	b.n	8000a4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d020      	beq.n	8000a1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80009dc:	4b34      	ldr	r3, [pc, #208]	; (8000ab0 <HAL_RCC_OscConfig+0x244>)
 80009de:	2201      	movs	r2, #1
 80009e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80009e2:	f7ff fe2d 	bl	8000640 <HAL_GetTick>
 80009e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009e8:	e008      	b.n	80009fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009ea:	f7ff fe29 	bl	8000640 <HAL_GetTick>
 80009ee:	4602      	mov	r2, r0
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	1ad3      	subs	r3, r2, r3
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	d901      	bls.n	80009fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80009f8:	2303      	movs	r3, #3
 80009fa:	e1a8      	b.n	8000d4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009fc:	4b2b      	ldr	r3, [pc, #172]	; (8000aac <HAL_RCC_OscConfig+0x240>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f003 0302 	and.w	r3, r3, #2
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d0f0      	beq.n	80009ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a08:	4b28      	ldr	r3, [pc, #160]	; (8000aac <HAL_RCC_OscConfig+0x240>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	691b      	ldr	r3, [r3, #16]
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	4925      	ldr	r1, [pc, #148]	; (8000aac <HAL_RCC_OscConfig+0x240>)
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	600b      	str	r3, [r1, #0]
 8000a1c:	e015      	b.n	8000a4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000a1e:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <HAL_RCC_OscConfig+0x244>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a24:	f7ff fe0c 	bl	8000640 <HAL_GetTick>
 8000a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a2a:	e008      	b.n	8000a3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a2c:	f7ff fe08 	bl	8000640 <HAL_GetTick>
 8000a30:	4602      	mov	r2, r0
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	2b02      	cmp	r3, #2
 8000a38:	d901      	bls.n	8000a3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	e187      	b.n	8000d4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a3e:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <HAL_RCC_OscConfig+0x240>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d1f0      	bne.n	8000a2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f003 0308 	and.w	r3, r3, #8
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d036      	beq.n	8000ac4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	695b      	ldr	r3, [r3, #20]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d016      	beq.n	8000a8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <HAL_RCC_OscConfig+0x248>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a64:	f7ff fdec 	bl	8000640 <HAL_GetTick>
 8000a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a6a:	e008      	b.n	8000a7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a6c:	f7ff fde8 	bl	8000640 <HAL_GetTick>
 8000a70:	4602      	mov	r2, r0
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	d901      	bls.n	8000a7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	e167      	b.n	8000d4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <HAL_RCC_OscConfig+0x240>)
 8000a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000a82:	f003 0302 	and.w	r3, r3, #2
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d0f0      	beq.n	8000a6c <HAL_RCC_OscConfig+0x200>
 8000a8a:	e01b      	b.n	8000ac4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <HAL_RCC_OscConfig+0x248>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a92:	f7ff fdd5 	bl	8000640 <HAL_GetTick>
 8000a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a98:	e00e      	b.n	8000ab8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a9a:	f7ff fdd1 	bl	8000640 <HAL_GetTick>
 8000a9e:	4602      	mov	r2, r0
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	1ad3      	subs	r3, r2, r3
 8000aa4:	2b02      	cmp	r3, #2
 8000aa6:	d907      	bls.n	8000ab8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	e150      	b.n	8000d4e <HAL_RCC_OscConfig+0x4e2>
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	42470000 	.word	0x42470000
 8000ab4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ab8:	4b88      	ldr	r3, [pc, #544]	; (8000cdc <HAL_RCC_OscConfig+0x470>)
 8000aba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000abc:	f003 0302 	and.w	r3, r3, #2
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d1ea      	bne.n	8000a9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f003 0304 	and.w	r3, r3, #4
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	f000 8097 	beq.w	8000c00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ad6:	4b81      	ldr	r3, [pc, #516]	; (8000cdc <HAL_RCC_OscConfig+0x470>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d10f      	bne.n	8000b02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	4b7d      	ldr	r3, [pc, #500]	; (8000cdc <HAL_RCC_OscConfig+0x470>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	4a7c      	ldr	r2, [pc, #496]	; (8000cdc <HAL_RCC_OscConfig+0x470>)
 8000aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af0:	6413      	str	r3, [r2, #64]	; 0x40
 8000af2:	4b7a      	ldr	r3, [pc, #488]	; (8000cdc <HAL_RCC_OscConfig+0x470>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000afe:	2301      	movs	r3, #1
 8000b00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b02:	4b77      	ldr	r3, [pc, #476]	; (8000ce0 <HAL_RCC_OscConfig+0x474>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d118      	bne.n	8000b40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b0e:	4b74      	ldr	r3, [pc, #464]	; (8000ce0 <HAL_RCC_OscConfig+0x474>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a73      	ldr	r2, [pc, #460]	; (8000ce0 <HAL_RCC_OscConfig+0x474>)
 8000b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000b1a:	f7ff fd91 	bl	8000640 <HAL_GetTick>
 8000b1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b20:	e008      	b.n	8000b34 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b22:	f7ff fd8d 	bl	8000640 <HAL_GetTick>
 8000b26:	4602      	mov	r2, r0
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	1ad3      	subs	r3, r2, r3
 8000b2c:	2b02      	cmp	r3, #2
 8000b2e:	d901      	bls.n	8000b34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000b30:	2303      	movs	r3, #3
 8000b32:	e10c      	b.n	8000d4e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b34:	4b6a      	ldr	r3, [pc, #424]	; (8000ce0 <HAL_RCC_OscConfig+0x474>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d0f0      	beq.n	8000b22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d106      	bne.n	8000b56 <HAL_RCC_OscConfig+0x2ea>
 8000b48:	4b64      	ldr	r3, [pc, #400]	; (8000cdc <HAL_RCC_OscConfig+0x470>)
 8000b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b4c:	4a63      	ldr	r2, [pc, #396]	; (8000cdc <HAL_RCC_OscConfig+0x470>)
 8000b4e:	f043 0301 	orr.w	r3, r3, #1
 8000b52:	6713      	str	r3, [r2, #112]	; 0x70
 8000b54:	e01c      	b.n	8000b90 <HAL_RCC_OscConfig+0x324>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	2b05      	cmp	r3, #5
 8000b5c:	d10c      	bne.n	8000b78 <HAL_RCC_OscConfig+0x30c>
 8000b5e:	4b5f      	ldr	r3, [pc, #380]	; (8000cdc <HAL_RCC_OscConfig+0x470>)
 8000b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b62:	4a5e      	ldr	r2, [pc, #376]	; (8000cdc <HAL_RCC_OscConfig+0x470>)
 8000b64:	f043 0304 	orr.w	r3, r3, #4
 8000b68:	6713      	str	r3, [r2, #112]	; 0x70
 8000b6a:	4b5c      	ldr	r3, [pc, #368]	; (8000cdc <HAL_RCC_OscConfig+0x470>)
 8000b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b6e:	4a5b      	ldr	r2, [pc, #364]	; (8000cdc <HAL_RCC_OscConfig+0x470>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6713      	str	r3, [r2, #112]	; 0x70
 8000b76:	e00b      	b.n	8000b90 <HAL_RCC_OscConfig+0x324>
 8000b78:	4b58      	ldr	r3, [pc, #352]	; (8000cdc <HAL_RCC_OscConfig+0x470>)
 8000b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b7c:	4a57      	ldr	r2, [pc, #348]	; (8000cdc <HAL_RCC_OscConfig+0x470>)
 8000b7e:	f023 0301 	bic.w	r3, r3, #1
 8000b82:	6713      	str	r3, [r2, #112]	; 0x70
 8000b84:	4b55      	ldr	r3, [pc, #340]	; (8000cdc <HAL_RCC_OscConfig+0x470>)
 8000b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b88:	4a54      	ldr	r2, [pc, #336]	; (8000cdc <HAL_RCC_OscConfig+0x470>)
 8000b8a:	f023 0304 	bic.w	r3, r3, #4
 8000b8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	689b      	ldr	r3, [r3, #8]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d015      	beq.n	8000bc4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b98:	f7ff fd52 	bl	8000640 <HAL_GetTick>
 8000b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b9e:	e00a      	b.n	8000bb6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ba0:	f7ff fd4e 	bl	8000640 <HAL_GetTick>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d901      	bls.n	8000bb6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	e0cb      	b.n	8000d4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bb6:	4b49      	ldr	r3, [pc, #292]	; (8000cdc <HAL_RCC_OscConfig+0x470>)
 8000bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000bba:	f003 0302 	and.w	r3, r3, #2
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d0ee      	beq.n	8000ba0 <HAL_RCC_OscConfig+0x334>
 8000bc2:	e014      	b.n	8000bee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bc4:	f7ff fd3c 	bl	8000640 <HAL_GetTick>
 8000bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bca:	e00a      	b.n	8000be2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bcc:	f7ff fd38 	bl	8000640 <HAL_GetTick>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d901      	bls.n	8000be2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000bde:	2303      	movs	r3, #3
 8000be0:	e0b5      	b.n	8000d4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000be2:	4b3e      	ldr	r3, [pc, #248]	; (8000cdc <HAL_RCC_OscConfig+0x470>)
 8000be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d1ee      	bne.n	8000bcc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000bee:	7dfb      	ldrb	r3, [r7, #23]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d105      	bne.n	8000c00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000bf4:	4b39      	ldr	r3, [pc, #228]	; (8000cdc <HAL_RCC_OscConfig+0x470>)
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf8:	4a38      	ldr	r2, [pc, #224]	; (8000cdc <HAL_RCC_OscConfig+0x470>)
 8000bfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000bfe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	f000 80a1 	beq.w	8000d4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000c0a:	4b34      	ldr	r3, [pc, #208]	; (8000cdc <HAL_RCC_OscConfig+0x470>)
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	f003 030c 	and.w	r3, r3, #12
 8000c12:	2b08      	cmp	r3, #8
 8000c14:	d05c      	beq.n	8000cd0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	d141      	bne.n	8000ca2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c1e:	4b31      	ldr	r3, [pc, #196]	; (8000ce4 <HAL_RCC_OscConfig+0x478>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c24:	f7ff fd0c 	bl	8000640 <HAL_GetTick>
 8000c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c2a:	e008      	b.n	8000c3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c2c:	f7ff fd08 	bl	8000640 <HAL_GetTick>
 8000c30:	4602      	mov	r2, r0
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	2b02      	cmp	r3, #2
 8000c38:	d901      	bls.n	8000c3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	e087      	b.n	8000d4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c3e:	4b27      	ldr	r3, [pc, #156]	; (8000cdc <HAL_RCC_OscConfig+0x470>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d1f0      	bne.n	8000c2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	69da      	ldr	r2, [r3, #28]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6a1b      	ldr	r3, [r3, #32]
 8000c52:	431a      	orrs	r2, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c58:	019b      	lsls	r3, r3, #6
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c60:	085b      	lsrs	r3, r3, #1
 8000c62:	3b01      	subs	r3, #1
 8000c64:	041b      	lsls	r3, r3, #16
 8000c66:	431a      	orrs	r2, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c6c:	061b      	lsls	r3, r3, #24
 8000c6e:	491b      	ldr	r1, [pc, #108]	; (8000cdc <HAL_RCC_OscConfig+0x470>)
 8000c70:	4313      	orrs	r3, r2
 8000c72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000c74:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <HAL_RCC_OscConfig+0x478>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c7a:	f7ff fce1 	bl	8000640 <HAL_GetTick>
 8000c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c80:	e008      	b.n	8000c94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c82:	f7ff fcdd 	bl	8000640 <HAL_GetTick>
 8000c86:	4602      	mov	r2, r0
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	1ad3      	subs	r3, r2, r3
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	d901      	bls.n	8000c94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000c90:	2303      	movs	r3, #3
 8000c92:	e05c      	b.n	8000d4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <HAL_RCC_OscConfig+0x470>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d0f0      	beq.n	8000c82 <HAL_RCC_OscConfig+0x416>
 8000ca0:	e054      	b.n	8000d4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <HAL_RCC_OscConfig+0x478>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ca8:	f7ff fcca 	bl	8000640 <HAL_GetTick>
 8000cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000cae:	e008      	b.n	8000cc2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cb0:	f7ff fcc6 	bl	8000640 <HAL_GetTick>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d901      	bls.n	8000cc2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	e045      	b.n	8000d4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_RCC_OscConfig+0x470>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d1f0      	bne.n	8000cb0 <HAL_RCC_OscConfig+0x444>
 8000cce:	e03d      	b.n	8000d4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d107      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	e038      	b.n	8000d4e <HAL_RCC_OscConfig+0x4e2>
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40007000 	.word	0x40007000
 8000ce4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000ce8:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <HAL_RCC_OscConfig+0x4ec>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	699b      	ldr	r3, [r3, #24]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d028      	beq.n	8000d48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d121      	bne.n	8000d48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d11a      	bne.n	8000d48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000d18:	4013      	ands	r3, r2
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000d1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d111      	bne.n	8000d48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d2e:	085b      	lsrs	r3, r3, #1
 8000d30:	3b01      	subs	r3, #1
 8000d32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d107      	bne.n	8000d48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d001      	beq.n	8000d4c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e000      	b.n	8000d4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40023800 	.word	0x40023800

08000d5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d101      	bne.n	8000d70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e0cc      	b.n	8000f0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000d70:	4b68      	ldr	r3, [pc, #416]	; (8000f14 <HAL_RCC_ClockConfig+0x1b8>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f003 0307 	and.w	r3, r3, #7
 8000d78:	683a      	ldr	r2, [r7, #0]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d90c      	bls.n	8000d98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d7e:	4b65      	ldr	r3, [pc, #404]	; (8000f14 <HAL_RCC_ClockConfig+0x1b8>)
 8000d80:	683a      	ldr	r2, [r7, #0]
 8000d82:	b2d2      	uxtb	r2, r2
 8000d84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d86:	4b63      	ldr	r3, [pc, #396]	; (8000f14 <HAL_RCC_ClockConfig+0x1b8>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	683a      	ldr	r2, [r7, #0]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d001      	beq.n	8000d98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	e0b8      	b.n	8000f0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f003 0302 	and.w	r3, r3, #2
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d020      	beq.n	8000de6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f003 0304 	and.w	r3, r3, #4
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d005      	beq.n	8000dbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000db0:	4b59      	ldr	r3, [pc, #356]	; (8000f18 <HAL_RCC_ClockConfig+0x1bc>)
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	4a58      	ldr	r2, [pc, #352]	; (8000f18 <HAL_RCC_ClockConfig+0x1bc>)
 8000db6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000dba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f003 0308 	and.w	r3, r3, #8
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d005      	beq.n	8000dd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000dc8:	4b53      	ldr	r3, [pc, #332]	; (8000f18 <HAL_RCC_ClockConfig+0x1bc>)
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	4a52      	ldr	r2, [pc, #328]	; (8000f18 <HAL_RCC_ClockConfig+0x1bc>)
 8000dce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000dd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000dd4:	4b50      	ldr	r3, [pc, #320]	; (8000f18 <HAL_RCC_ClockConfig+0x1bc>)
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	494d      	ldr	r1, [pc, #308]	; (8000f18 <HAL_RCC_ClockConfig+0x1bc>)
 8000de2:	4313      	orrs	r3, r2
 8000de4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d044      	beq.n	8000e7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d107      	bne.n	8000e0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dfa:	4b47      	ldr	r3, [pc, #284]	; (8000f18 <HAL_RCC_ClockConfig+0x1bc>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d119      	bne.n	8000e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e07f      	b.n	8000f0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d003      	beq.n	8000e1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000e16:	2b03      	cmp	r3, #3
 8000e18:	d107      	bne.n	8000e2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e1a:	4b3f      	ldr	r3, [pc, #252]	; (8000f18 <HAL_RCC_ClockConfig+0x1bc>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d109      	bne.n	8000e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e06f      	b.n	8000f0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e2a:	4b3b      	ldr	r3, [pc, #236]	; (8000f18 <HAL_RCC_ClockConfig+0x1bc>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d101      	bne.n	8000e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e067      	b.n	8000f0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e3a:	4b37      	ldr	r3, [pc, #220]	; (8000f18 <HAL_RCC_ClockConfig+0x1bc>)
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	f023 0203 	bic.w	r2, r3, #3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	4934      	ldr	r1, [pc, #208]	; (8000f18 <HAL_RCC_ClockConfig+0x1bc>)
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000e4c:	f7ff fbf8 	bl	8000640 <HAL_GetTick>
 8000e50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e52:	e00a      	b.n	8000e6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e54:	f7ff fbf4 	bl	8000640 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d901      	bls.n	8000e6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000e66:	2303      	movs	r3, #3
 8000e68:	e04f      	b.n	8000f0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e6a:	4b2b      	ldr	r3, [pc, #172]	; (8000f18 <HAL_RCC_ClockConfig+0x1bc>)
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	f003 020c 	and.w	r2, r3, #12
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d1eb      	bne.n	8000e54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000e7c:	4b25      	ldr	r3, [pc, #148]	; (8000f14 <HAL_RCC_ClockConfig+0x1b8>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f003 0307 	and.w	r3, r3, #7
 8000e84:	683a      	ldr	r2, [r7, #0]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d20c      	bcs.n	8000ea4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e8a:	4b22      	ldr	r3, [pc, #136]	; (8000f14 <HAL_RCC_ClockConfig+0x1b8>)
 8000e8c:	683a      	ldr	r2, [r7, #0]
 8000e8e:	b2d2      	uxtb	r2, r2
 8000e90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e92:	4b20      	ldr	r3, [pc, #128]	; (8000f14 <HAL_RCC_ClockConfig+0x1b8>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	683a      	ldr	r2, [r7, #0]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d001      	beq.n	8000ea4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e032      	b.n	8000f0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f003 0304 	and.w	r3, r3, #4
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d008      	beq.n	8000ec2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000eb0:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <HAL_RCC_ClockConfig+0x1bc>)
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	4916      	ldr	r1, [pc, #88]	; (8000f18 <HAL_RCC_ClockConfig+0x1bc>)
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 0308 	and.w	r3, r3, #8
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d009      	beq.n	8000ee2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000ece:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <HAL_RCC_ClockConfig+0x1bc>)
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	691b      	ldr	r3, [r3, #16]
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	490e      	ldr	r1, [pc, #56]	; (8000f18 <HAL_RCC_ClockConfig+0x1bc>)
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ee2:	f000 f821 	bl	8000f28 <HAL_RCC_GetSysClockFreq>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <HAL_RCC_ClockConfig+0x1bc>)
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	091b      	lsrs	r3, r3, #4
 8000eee:	f003 030f 	and.w	r3, r3, #15
 8000ef2:	490a      	ldr	r1, [pc, #40]	; (8000f1c <HAL_RCC_ClockConfig+0x1c0>)
 8000ef4:	5ccb      	ldrb	r3, [r1, r3]
 8000ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8000efa:	4a09      	ldr	r2, [pc, #36]	; (8000f20 <HAL_RCC_ClockConfig+0x1c4>)
 8000efc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <HAL_RCC_ClockConfig+0x1c8>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fb58 	bl	80005b8 <HAL_InitTick>

  return HAL_OK;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40023c00 	.word	0x40023c00
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	08005aac 	.word	0x08005aac
 8000f20:	20000008 	.word	0x20000008
 8000f24:	20000000 	.word	0x20000000

08000f28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f2c:	b094      	sub	sp, #80	; 0x50
 8000f2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8000f30:	2300      	movs	r3, #0
 8000f32:	647b      	str	r3, [r7, #68]	; 0x44
 8000f34:	2300      	movs	r3, #0
 8000f36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000f38:	2300      	movs	r3, #0
 8000f3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f40:	4b79      	ldr	r3, [pc, #484]	; (8001128 <HAL_RCC_GetSysClockFreq+0x200>)
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	f003 030c 	and.w	r3, r3, #12
 8000f48:	2b08      	cmp	r3, #8
 8000f4a:	d00d      	beq.n	8000f68 <HAL_RCC_GetSysClockFreq+0x40>
 8000f4c:	2b08      	cmp	r3, #8
 8000f4e:	f200 80e1 	bhi.w	8001114 <HAL_RCC_GetSysClockFreq+0x1ec>
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d002      	beq.n	8000f5c <HAL_RCC_GetSysClockFreq+0x34>
 8000f56:	2b04      	cmp	r3, #4
 8000f58:	d003      	beq.n	8000f62 <HAL_RCC_GetSysClockFreq+0x3a>
 8000f5a:	e0db      	b.n	8001114 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000f5c:	4b73      	ldr	r3, [pc, #460]	; (800112c <HAL_RCC_GetSysClockFreq+0x204>)
 8000f5e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8000f60:	e0db      	b.n	800111a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000f62:	4b73      	ldr	r3, [pc, #460]	; (8001130 <HAL_RCC_GetSysClockFreq+0x208>)
 8000f64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8000f66:	e0d8      	b.n	800111a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f68:	4b6f      	ldr	r3, [pc, #444]	; (8001128 <HAL_RCC_GetSysClockFreq+0x200>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f70:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f72:	4b6d      	ldr	r3, [pc, #436]	; (8001128 <HAL_RCC_GetSysClockFreq+0x200>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d063      	beq.n	8001046 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f7e:	4b6a      	ldr	r3, [pc, #424]	; (8001128 <HAL_RCC_GetSysClockFreq+0x200>)
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	099b      	lsrs	r3, r3, #6
 8000f84:	2200      	movs	r2, #0
 8000f86:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f88:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f90:	633b      	str	r3, [r7, #48]	; 0x30
 8000f92:	2300      	movs	r3, #0
 8000f94:	637b      	str	r3, [r7, #52]	; 0x34
 8000f96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8000f9a:	4622      	mov	r2, r4
 8000f9c:	462b      	mov	r3, r5
 8000f9e:	f04f 0000 	mov.w	r0, #0
 8000fa2:	f04f 0100 	mov.w	r1, #0
 8000fa6:	0159      	lsls	r1, r3, #5
 8000fa8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000fac:	0150      	lsls	r0, r2, #5
 8000fae:	4602      	mov	r2, r0
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	4621      	mov	r1, r4
 8000fb4:	1a51      	subs	r1, r2, r1
 8000fb6:	6139      	str	r1, [r7, #16]
 8000fb8:	4629      	mov	r1, r5
 8000fba:	eb63 0301 	sbc.w	r3, r3, r1
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	f04f 0200 	mov.w	r2, #0
 8000fc4:	f04f 0300 	mov.w	r3, #0
 8000fc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8000fcc:	4659      	mov	r1, fp
 8000fce:	018b      	lsls	r3, r1, #6
 8000fd0:	4651      	mov	r1, sl
 8000fd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000fd6:	4651      	mov	r1, sl
 8000fd8:	018a      	lsls	r2, r1, #6
 8000fda:	4651      	mov	r1, sl
 8000fdc:	ebb2 0801 	subs.w	r8, r2, r1
 8000fe0:	4659      	mov	r1, fp
 8000fe2:	eb63 0901 	sbc.w	r9, r3, r1
 8000fe6:	f04f 0200 	mov.w	r2, #0
 8000fea:	f04f 0300 	mov.w	r3, #0
 8000fee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000ff2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000ff6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000ffa:	4690      	mov	r8, r2
 8000ffc:	4699      	mov	r9, r3
 8000ffe:	4623      	mov	r3, r4
 8001000:	eb18 0303 	adds.w	r3, r8, r3
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	462b      	mov	r3, r5
 8001008:	eb49 0303 	adc.w	r3, r9, r3
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	f04f 0200 	mov.w	r2, #0
 8001012:	f04f 0300 	mov.w	r3, #0
 8001016:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800101a:	4629      	mov	r1, r5
 800101c:	024b      	lsls	r3, r1, #9
 800101e:	4621      	mov	r1, r4
 8001020:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001024:	4621      	mov	r1, r4
 8001026:	024a      	lsls	r2, r1, #9
 8001028:	4610      	mov	r0, r2
 800102a:	4619      	mov	r1, r3
 800102c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800102e:	2200      	movs	r2, #0
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
 8001032:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001034:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001038:	f7ff f91a 	bl	8000270 <__aeabi_uldivmod>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4613      	mov	r3, r2
 8001042:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001044:	e058      	b.n	80010f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001046:	4b38      	ldr	r3, [pc, #224]	; (8001128 <HAL_RCC_GetSysClockFreq+0x200>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	099b      	lsrs	r3, r3, #6
 800104c:	2200      	movs	r2, #0
 800104e:	4618      	mov	r0, r3
 8001050:	4611      	mov	r1, r2
 8001052:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001056:	623b      	str	r3, [r7, #32]
 8001058:	2300      	movs	r3, #0
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
 800105c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001060:	4642      	mov	r2, r8
 8001062:	464b      	mov	r3, r9
 8001064:	f04f 0000 	mov.w	r0, #0
 8001068:	f04f 0100 	mov.w	r1, #0
 800106c:	0159      	lsls	r1, r3, #5
 800106e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001072:	0150      	lsls	r0, r2, #5
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4641      	mov	r1, r8
 800107a:	ebb2 0a01 	subs.w	sl, r2, r1
 800107e:	4649      	mov	r1, r9
 8001080:	eb63 0b01 	sbc.w	fp, r3, r1
 8001084:	f04f 0200 	mov.w	r2, #0
 8001088:	f04f 0300 	mov.w	r3, #0
 800108c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001090:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001094:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001098:	ebb2 040a 	subs.w	r4, r2, sl
 800109c:	eb63 050b 	sbc.w	r5, r3, fp
 80010a0:	f04f 0200 	mov.w	r2, #0
 80010a4:	f04f 0300 	mov.w	r3, #0
 80010a8:	00eb      	lsls	r3, r5, #3
 80010aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80010ae:	00e2      	lsls	r2, r4, #3
 80010b0:	4614      	mov	r4, r2
 80010b2:	461d      	mov	r5, r3
 80010b4:	4643      	mov	r3, r8
 80010b6:	18e3      	adds	r3, r4, r3
 80010b8:	603b      	str	r3, [r7, #0]
 80010ba:	464b      	mov	r3, r9
 80010bc:	eb45 0303 	adc.w	r3, r5, r3
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	f04f 0200 	mov.w	r2, #0
 80010c6:	f04f 0300 	mov.w	r3, #0
 80010ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80010ce:	4629      	mov	r1, r5
 80010d0:	028b      	lsls	r3, r1, #10
 80010d2:	4621      	mov	r1, r4
 80010d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80010d8:	4621      	mov	r1, r4
 80010da:	028a      	lsls	r2, r1, #10
 80010dc:	4610      	mov	r0, r2
 80010de:	4619      	mov	r1, r3
 80010e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010e2:	2200      	movs	r2, #0
 80010e4:	61bb      	str	r3, [r7, #24]
 80010e6:	61fa      	str	r2, [r7, #28]
 80010e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80010ec:	f7ff f8c0 	bl	8000270 <__aeabi_uldivmod>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4613      	mov	r3, r2
 80010f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80010f8:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <HAL_RCC_GetSysClockFreq+0x200>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	0c1b      	lsrs	r3, r3, #16
 80010fe:	f003 0303 	and.w	r3, r3, #3
 8001102:	3301      	adds	r3, #1
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001108:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800110a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800110c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001110:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001112:	e002      	b.n	800111a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <HAL_RCC_GetSysClockFreq+0x204>)
 8001116:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001118:	bf00      	nop
    }
  }
  return sysclockfreq;
 800111a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800111c:	4618      	mov	r0, r3
 800111e:	3750      	adds	r7, #80	; 0x50
 8001120:	46bd      	mov	sp, r7
 8001122:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001126:	bf00      	nop
 8001128:	40023800 	.word	0x40023800
 800112c:	00f42400 	.word	0x00f42400
 8001130:	007a1200 	.word	0x007a1200

08001134 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001134:	b480      	push	{r7}
 8001136:	b089      	sub	sp, #36	; 0x24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	fa93 f3a3 	rbit	r3, r3
 800114e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	fab3 f383 	clz	r3, r3
 8001156:	b2db      	uxtb	r3, r3
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	2103      	movs	r1, #3
 800115c:	fa01 f303 	lsl.w	r3, r1, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	401a      	ands	r2, r3
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	fa93 f3a3 	rbit	r3, r3
 800116e:	61bb      	str	r3, [r7, #24]
  return result;
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	fab3 f383 	clz	r3, r3
 8001176:	b2db      	uxtb	r3, r3
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	fa01 f303 	lsl.w	r3, r1, r3
 8001180:	431a      	orrs	r2, r3
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	601a      	str	r2, [r3, #0]
}
 8001186:	bf00      	nop
 8001188:	3724      	adds	r7, #36	; 0x24
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8001192:	b480      	push	{r7}
 8001194:	b085      	sub	sp, #20
 8001196:	af00      	add	r7, sp, #0
 8001198:	60f8      	str	r0, [r7, #12]
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	401a      	ands	r2, r3
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	fb01 f303 	mul.w	r3, r1, r3
 80011b0:	431a      	orrs	r2, r3
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	605a      	str	r2, [r3, #4]
}
 80011b6:	bf00      	nop
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b089      	sub	sp, #36	; 0x24
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	60f8      	str	r0, [r7, #12]
 80011ca:	60b9      	str	r1, [r7, #8]
 80011cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	689a      	ldr	r2, [r3, #8]
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	fa93 f3a3 	rbit	r3, r3
 80011dc:	613b      	str	r3, [r7, #16]
  return result;
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	fab3 f383 	clz	r3, r3
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	2103      	movs	r1, #3
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	401a      	ands	r2, r3
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	fa93 f3a3 	rbit	r3, r3
 80011fc:	61bb      	str	r3, [r7, #24]
  return result;
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	fab3 f383 	clz	r3, r3
 8001204:	b2db      	uxtb	r3, r3
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	6879      	ldr	r1, [r7, #4]
 800120a:	fa01 f303 	lsl.w	r3, r1, r3
 800120e:	431a      	orrs	r2, r3
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8001214:	bf00      	nop
 8001216:	3724      	adds	r7, #36	; 0x24
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001220:	b480      	push	{r7}
 8001222:	b089      	sub	sp, #36	; 0x24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	68da      	ldr	r2, [r3, #12]
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	fa93 f3a3 	rbit	r3, r3
 800123a:	613b      	str	r3, [r7, #16]
  return result;
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	fab3 f383 	clz	r3, r3
 8001242:	b2db      	uxtb	r3, r3
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	2103      	movs	r1, #3
 8001248:	fa01 f303 	lsl.w	r3, r1, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	401a      	ands	r2, r3
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	fa93 f3a3 	rbit	r3, r3
 800125a:	61bb      	str	r3, [r7, #24]
  return result;
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	fab3 f383 	clz	r3, r3
 8001262:	b2db      	uxtb	r3, r3
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	fa01 f303 	lsl.w	r3, r1, r3
 800126c:	431a      	orrs	r2, r3
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	60da      	str	r2, [r3, #12]
}
 8001272:	bf00      	nop
 8001274:	3724      	adds	r7, #36	; 0x24
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800127e:	b480      	push	{r7}
 8001280:	b089      	sub	sp, #36	; 0x24
 8001282:	af00      	add	r7, sp, #0
 8001284:	60f8      	str	r0, [r7, #12]
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	6a1a      	ldr	r2, [r3, #32]
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	fa93 f3a3 	rbit	r3, r3
 8001298:	613b      	str	r3, [r7, #16]
  return result;
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	fab3 f383 	clz	r3, r3
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	210f      	movs	r1, #15
 80012a6:	fa01 f303 	lsl.w	r3, r1, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	401a      	ands	r2, r3
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	fa93 f3a3 	rbit	r3, r3
 80012b8:	61bb      	str	r3, [r7, #24]
  return result;
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	fab3 f383 	clz	r3, r3
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	6879      	ldr	r1, [r7, #4]
 80012c6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ca:	431a      	orrs	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80012d0:	bf00      	nop
 80012d2:	3724      	adds	r7, #36	; 0x24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80012dc:	b480      	push	{r7}
 80012de:	b089      	sub	sp, #36	; 0x24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	0a1b      	lsrs	r3, r3, #8
 80012f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	fa93 f3a3 	rbit	r3, r3
 80012f8:	613b      	str	r3, [r7, #16]
  return result;
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	fab3 f383 	clz	r3, r3
 8001300:	b2db      	uxtb	r3, r3
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	210f      	movs	r1, #15
 8001306:	fa01 f303 	lsl.w	r3, r1, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	401a      	ands	r2, r3
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	0a1b      	lsrs	r3, r3, #8
 8001312:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	fa93 f3a3 	rbit	r3, r3
 800131a:	61bb      	str	r3, [r7, #24]
  return result;
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	fab3 f383 	clz	r3, r3
 8001322:	b2db      	uxtb	r3, r3
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	fa01 f303 	lsl.w	r3, r1, r3
 800132c:	431a      	orrs	r2, r3
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8001332:	bf00      	nop
 8001334:	3724      	adds	r7, #36	; 0x24
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b088      	sub	sp, #32
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001348:	2300      	movs	r3, #0
 800134a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800134c:	2300      	movs	r3, #0
 800134e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	fa93 f3a3 	rbit	r3, r3
 800135c:	613b      	str	r3, [r7, #16]
  return result;
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	fab3 f383 	clz	r3, r3
 8001364:	b2db      	uxtb	r3, r3
 8001366:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001368:	e050      	b.n	800140c <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	2101      	movs	r1, #1
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	fa01 f303 	lsl.w	r3, r1, r3
 8001376:	4013      	ands	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d042      	beq.n	8001406 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d003      	beq.n	8001390 <LL_GPIO_Init+0x52>
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	2b02      	cmp	r3, #2
 800138e:	d10d      	bne.n	80013ac <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	461a      	mov	r2, r3
 8001396:	69b9      	ldr	r1, [r7, #24]
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ff12 	bl	80011c2 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	461a      	mov	r2, r3
 80013a4:	69b9      	ldr	r1, [r7, #24]
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff fef3 	bl	8001192 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	691b      	ldr	r3, [r3, #16]
 80013b0:	461a      	mov	r2, r3
 80013b2:	69b9      	ldr	r1, [r7, #24]
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff ff33 	bl	8001220 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d11a      	bne.n	80013f8 <LL_GPIO_Init+0xba>
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	fa93 f3a3 	rbit	r3, r3
 80013cc:	60bb      	str	r3, [r7, #8]
  return result;
 80013ce:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80013d0:	fab3 f383 	clz	r3, r3
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b07      	cmp	r3, #7
 80013d8:	d807      	bhi.n	80013ea <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	461a      	mov	r2, r3
 80013e0:	69b9      	ldr	r1, [r7, #24]
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ff4b 	bl	800127e <LL_GPIO_SetAFPin_0_7>
 80013e8:	e006      	b.n	80013f8 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	461a      	mov	r2, r3
 80013f0:	69b9      	ldr	r1, [r7, #24]
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff ff72 	bl	80012dc <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	461a      	mov	r2, r3
 80013fe:	69b9      	ldr	r1, [r7, #24]
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7ff fe97 	bl	8001134 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3301      	adds	r3, #1
 800140a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	fa22 f303 	lsr.w	r3, r2, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1a7      	bne.n	800136a <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	3720      	adds	r7, #32
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <LL_RCC_GetSysClkSource+0x18>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f003 030c 	and.w	r3, r3, #12
}
 8001430:	4618      	mov	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800

08001440 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <LL_RCC_GetAHBPrescaler+0x18>)
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800144c:	4618      	mov	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40023800 	.word	0x40023800

0800145c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8001468:	4618      	mov	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800

08001478 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800147c:	4b04      	ldr	r3, [pc, #16]	; (8001490 <LL_RCC_GetAPB2Prescaler+0x18>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800

08001494 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <LL_RCC_PLL_GetMainSource+0x18>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	40023800 	.word	0x40023800

080014b0 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80014b4:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <LL_RCC_PLL_GetN+0x18>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	099b      	lsrs	r3, r3, #6
 80014ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80014be:	4618      	mov	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	40023800 	.word	0x40023800

080014cc <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80014d0:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <LL_RCC_PLL_GetP+0x18>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40023800 	.word	0x40023800

080014e8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80014ec:	4b04      	ldr	r3, [pc, #16]	; (8001500 <LL_RCC_PLL_GetDivider+0x18>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40023800 	.word	0x40023800

08001504 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800150c:	f000 f820 	bl	8001550 <RCC_GetSystemClockFreq>
 8001510:	4602      	mov	r2, r0
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f000 f840 	bl	80015a0 <RCC_GetHCLKClockFreq>
 8001520:	4602      	mov	r2, r0
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	4618      	mov	r0, r3
 800152c:	f000 f84e 	bl	80015cc <RCC_GetPCLK1ClockFreq>
 8001530:	4602      	mov	r2, r0
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	4618      	mov	r0, r3
 800153c:	f000 f85a 	bl	80015f4 <RCC_GetPCLK2ClockFreq>
 8001540:	4602      	mov	r2, r0
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	60da      	str	r2, [r3, #12]
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001556:	2300      	movs	r3, #0
 8001558:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800155a:	f7ff ff63 	bl	8001424 <LL_RCC_GetSysClkSource>
 800155e:	4603      	mov	r3, r0
 8001560:	2b08      	cmp	r3, #8
 8001562:	d00c      	beq.n	800157e <RCC_GetSystemClockFreq+0x2e>
 8001564:	2b08      	cmp	r3, #8
 8001566:	d80f      	bhi.n	8001588 <RCC_GetSystemClockFreq+0x38>
 8001568:	2b00      	cmp	r3, #0
 800156a:	d002      	beq.n	8001572 <RCC_GetSystemClockFreq+0x22>
 800156c:	2b04      	cmp	r3, #4
 800156e:	d003      	beq.n	8001578 <RCC_GetSystemClockFreq+0x28>
 8001570:	e00a      	b.n	8001588 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <RCC_GetSystemClockFreq+0x48>)
 8001574:	607b      	str	r3, [r7, #4]
      break;
 8001576:	e00a      	b.n	800158e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001578:	4b08      	ldr	r3, [pc, #32]	; (800159c <RCC_GetSystemClockFreq+0x4c>)
 800157a:	607b      	str	r3, [r7, #4]
      break;
 800157c:	e007      	b.n	800158e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800157e:	2008      	movs	r0, #8
 8001580:	f000 f84c 	bl	800161c <RCC_PLL_GetFreqDomain_SYS>
 8001584:	6078      	str	r0, [r7, #4]
      break;
 8001586:	e002      	b.n	800158e <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8001588:	4b03      	ldr	r3, [pc, #12]	; (8001598 <RCC_GetSystemClockFreq+0x48>)
 800158a:	607b      	str	r3, [r7, #4]
      break;
 800158c:	bf00      	nop
  }

  return frequency;
 800158e:	687b      	ldr	r3, [r7, #4]
}
 8001590:	4618      	mov	r0, r3
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	00f42400 	.word	0x00f42400
 800159c:	007a1200 	.word	0x007a1200

080015a0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80015a8:	f7ff ff4a 	bl	8001440 <LL_RCC_GetAHBPrescaler>
 80015ac:	4603      	mov	r3, r0
 80015ae:	091b      	lsrs	r3, r3, #4
 80015b0:	f003 030f 	and.w	r3, r3, #15
 80015b4:	4a04      	ldr	r2, [pc, #16]	; (80015c8 <RCC_GetHCLKClockFreq+0x28>)
 80015b6:	5cd3      	ldrb	r3, [r2, r3]
 80015b8:	461a      	mov	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	40d3      	lsrs	r3, r2
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	08005aac 	.word	0x08005aac

080015cc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80015d4:	f7ff ff42 	bl	800145c <LL_RCC_GetAPB1Prescaler>
 80015d8:	4603      	mov	r3, r0
 80015da:	0a9b      	lsrs	r3, r3, #10
 80015dc:	4a04      	ldr	r2, [pc, #16]	; (80015f0 <RCC_GetPCLK1ClockFreq+0x24>)
 80015de:	5cd3      	ldrb	r3, [r2, r3]
 80015e0:	461a      	mov	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	40d3      	lsrs	r3, r2
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	08005abc 	.word	0x08005abc

080015f4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80015fc:	f7ff ff3c 	bl	8001478 <LL_RCC_GetAPB2Prescaler>
 8001600:	4603      	mov	r3, r0
 8001602:	0b5b      	lsrs	r3, r3, #13
 8001604:	4a04      	ldr	r2, [pc, #16]	; (8001618 <RCC_GetPCLK2ClockFreq+0x24>)
 8001606:	5cd3      	ldrb	r3, [r2, r3]
 8001608:	461a      	mov	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	40d3      	lsrs	r3, r2
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	08005abc 	.word	0x08005abc

0800161c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 800161c:	b590      	push	{r4, r7, lr}
 800161e:	b087      	sub	sp, #28
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	2300      	movs	r3, #0
 800162e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001630:	f7ff ff30 	bl	8001494 <LL_RCC_PLL_GetMainSource>
 8001634:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d004      	beq.n	8001646 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001642:	d003      	beq.n	800164c <RCC_PLL_GetFreqDomain_SYS+0x30>
 8001644:	e005      	b.n	8001652 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001646:	4b12      	ldr	r3, [pc, #72]	; (8001690 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001648:	617b      	str	r3, [r7, #20]
      break;
 800164a:	e005      	b.n	8001658 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800164c:	4b11      	ldr	r3, [pc, #68]	; (8001694 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800164e:	617b      	str	r3, [r7, #20]
      break;
 8001650:	e002      	b.n	8001658 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8001652:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001654:	617b      	str	r3, [r7, #20]
      break;
 8001656:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b08      	cmp	r3, #8
 800165c:	d113      	bne.n	8001686 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800165e:	f7ff ff43 	bl	80014e8 <LL_RCC_PLL_GetDivider>
 8001662:	4602      	mov	r2, r0
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	fbb3 f4f2 	udiv	r4, r3, r2
 800166a:	f7ff ff21 	bl	80014b0 <LL_RCC_PLL_GetN>
 800166e:	4603      	mov	r3, r0
 8001670:	fb03 f404 	mul.w	r4, r3, r4
 8001674:	f7ff ff2a 	bl	80014cc <LL_RCC_PLL_GetP>
 8001678:	4603      	mov	r3, r0
 800167a:	0c1b      	lsrs	r3, r3, #16
 800167c:	3301      	adds	r3, #1
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	fbb4 f3f3 	udiv	r3, r4, r3
 8001684:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8001686:	693b      	ldr	r3, [r7, #16]
}
 8001688:	4618      	mov	r0, r3
 800168a:	371c      	adds	r7, #28
 800168c:	46bd      	mov	sp, r7
 800168e:	bd90      	pop	{r4, r7, pc}
 8001690:	00f42400 	.word	0x00f42400
 8001694:	007a1200 	.word	0x007a1200

08001698 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016a8:	2b40      	cmp	r3, #64	; 0x40
 80016aa:	d101      	bne.n	80016b0 <LL_SPI_IsEnabled+0x18>
 80016ac:	2301      	movs	r3, #1
 80016ae:	e000      	b.n	80016b2 <LL_SPI_IsEnabled+0x1a>
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
 80016c6:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	461a      	mov	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	611a      	str	r2, [r3, #16]
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b084      	sub	sp, #16
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff ffd3 	bl	8001698 <LL_SPI_IsEnabled>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d139      	bne.n	800176c <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001700:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	6811      	ldr	r1, [r2, #0]
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	6852      	ldr	r2, [r2, #4]
 800170c:	4311      	orrs	r1, r2
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	6892      	ldr	r2, [r2, #8]
 8001712:	4311      	orrs	r1, r2
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	68d2      	ldr	r2, [r2, #12]
 8001718:	4311      	orrs	r1, r2
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	6912      	ldr	r2, [r2, #16]
 800171e:	4311      	orrs	r1, r2
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	6952      	ldr	r2, [r2, #20]
 8001724:	4311      	orrs	r1, r2
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	6992      	ldr	r2, [r2, #24]
 800172a:	4311      	orrs	r1, r2
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	69d2      	ldr	r2, [r2, #28]
 8001730:	4311      	orrs	r1, r2
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	6a12      	ldr	r2, [r2, #32]
 8001736:	430a      	orrs	r2, r1
 8001738:	431a      	orrs	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f023 0204 	bic.w	r2, r3, #4
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	0c1b      	lsrs	r3, r3, #16
 800174c:	431a      	orrs	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800175a:	d105      	bne.n	8001768 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001760:	4619      	mov	r1, r3
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff ffab 	bl	80016be <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8001768:	2300      	movs	r3, #0
 800176a:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	69db      	ldr	r3, [r3, #28]
 8001770:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	61da      	str	r2, [r3, #28]
  return status;
 8001778:	7bfb      	ldrb	r3, [r7, #15]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
 800178a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
 80017a6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255 or 65535 for advanced timer.
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
 80017de:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
 8001816:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
 8001832:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	641a      	str	r2, [r3, #64]	; 0x40
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	f043 0201 	orr.w	r2, r3, #1
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	615a      	str	r2, [r3, #20]
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a3d      	ldr	r2, [pc, #244]	; (8001970 <LL_TIM_Init+0x108>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d013      	beq.n	80018a8 <LL_TIM_Init+0x40>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001886:	d00f      	beq.n	80018a8 <LL_TIM_Init+0x40>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a3a      	ldr	r2, [pc, #232]	; (8001974 <LL_TIM_Init+0x10c>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d00b      	beq.n	80018a8 <LL_TIM_Init+0x40>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a39      	ldr	r2, [pc, #228]	; (8001978 <LL_TIM_Init+0x110>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d007      	beq.n	80018a8 <LL_TIM_Init+0x40>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a38      	ldr	r2, [pc, #224]	; (800197c <LL_TIM_Init+0x114>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d003      	beq.n	80018a8 <LL_TIM_Init+0x40>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a37      	ldr	r2, [pc, #220]	; (8001980 <LL_TIM_Init+0x118>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d106      	bne.n	80018b6 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a2d      	ldr	r2, [pc, #180]	; (8001970 <LL_TIM_Init+0x108>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d02b      	beq.n	8001916 <LL_TIM_Init+0xae>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018c4:	d027      	beq.n	8001916 <LL_TIM_Init+0xae>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a2a      	ldr	r2, [pc, #168]	; (8001974 <LL_TIM_Init+0x10c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d023      	beq.n	8001916 <LL_TIM_Init+0xae>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a29      	ldr	r2, [pc, #164]	; (8001978 <LL_TIM_Init+0x110>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d01f      	beq.n	8001916 <LL_TIM_Init+0xae>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a28      	ldr	r2, [pc, #160]	; (800197c <LL_TIM_Init+0x114>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d01b      	beq.n	8001916 <LL_TIM_Init+0xae>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a27      	ldr	r2, [pc, #156]	; (8001980 <LL_TIM_Init+0x118>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d017      	beq.n	8001916 <LL_TIM_Init+0xae>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a26      	ldr	r2, [pc, #152]	; (8001984 <LL_TIM_Init+0x11c>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d013      	beq.n	8001916 <LL_TIM_Init+0xae>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a25      	ldr	r2, [pc, #148]	; (8001988 <LL_TIM_Init+0x120>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d00f      	beq.n	8001916 <LL_TIM_Init+0xae>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a24      	ldr	r2, [pc, #144]	; (800198c <LL_TIM_Init+0x124>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d00b      	beq.n	8001916 <LL_TIM_Init+0xae>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a23      	ldr	r2, [pc, #140]	; (8001990 <LL_TIM_Init+0x128>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d007      	beq.n	8001916 <LL_TIM_Init+0xae>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a22      	ldr	r2, [pc, #136]	; (8001994 <LL_TIM_Init+0x12c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d003      	beq.n	8001916 <LL_TIM_Init+0xae>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a21      	ldr	r2, [pc, #132]	; (8001998 <LL_TIM_Init+0x130>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d106      	bne.n	8001924 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	4313      	orrs	r3, r2
 8001922:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	4619      	mov	r1, r3
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff ff34 	bl	800179e <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	881b      	ldrh	r3, [r3, #0]
 800193a:	4619      	mov	r1, r3
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff ff20 	bl	8001782 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <LL_TIM_Init+0x108>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d003      	beq.n	8001952 <LL_TIM_Init+0xea>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a0c      	ldr	r2, [pc, #48]	; (8001980 <LL_TIM_Init+0x118>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d105      	bne.n	800195e <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	4619      	mov	r1, r3
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff ff2e 	bl	80017ba <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff ff71 	bl	8001846 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40010000 	.word	0x40010000
 8001974:	40000400 	.word	0x40000400
 8001978:	40000800 	.word	0x40000800
 800197c:	40000c00 	.word	0x40000c00
 8001980:	40010400 	.word	0x40010400
 8001984:	40014000 	.word	0x40014000
 8001988:	40014400 	.word	0x40014400
 800198c:	40014800 	.word	0x40014800
 8001990:	40001800 	.word	0x40001800
 8001994:	40001c00 	.word	0x40001c00
 8001998:	40002000 	.word	0x40002000

0800199c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019b2:	d027      	beq.n	8001a04 <LL_TIM_OC_Init+0x68>
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019ba:	d82a      	bhi.n	8001a12 <LL_TIM_OC_Init+0x76>
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019c2:	d018      	beq.n	80019f6 <LL_TIM_OC_Init+0x5a>
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019ca:	d822      	bhi.n	8001a12 <LL_TIM_OC_Init+0x76>
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d003      	beq.n	80019da <LL_TIM_OC_Init+0x3e>
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	2b10      	cmp	r3, #16
 80019d6:	d007      	beq.n	80019e8 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80019d8:	e01b      	b.n	8001a12 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	68f8      	ldr	r0, [r7, #12]
 80019de:	f000 f81f 	bl	8001a20 <OC1Config>
 80019e2:	4603      	mov	r3, r0
 80019e4:	75fb      	strb	r3, [r7, #23]
      break;
 80019e6:	e015      	b.n	8001a14 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f000 f884 	bl	8001af8 <OC2Config>
 80019f0:	4603      	mov	r3, r0
 80019f2:	75fb      	strb	r3, [r7, #23]
      break;
 80019f4:	e00e      	b.n	8001a14 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	f000 f8ed 	bl	8001bd8 <OC3Config>
 80019fe:	4603      	mov	r3, r0
 8001a00:	75fb      	strb	r3, [r7, #23]
      break;
 8001a02:	e007      	b.n	8001a14 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001a04:	6879      	ldr	r1, [r7, #4]
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f000 f956 	bl	8001cb8 <OC4Config>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	75fb      	strb	r3, [r7, #23]
      break;
 8001a10:	e000      	b.n	8001a14 <LL_TIM_OC_Init+0x78>
      break;
 8001a12:	bf00      	nop
  }

  return result;
 8001a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	f023 0201 	bic.w	r2, r3, #1
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f023 0303 	bic.w	r3, r3, #3
 8001a4e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f023 0202 	bic.w	r2, r3, #2
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	f023 0201 	bic.w	r2, r3, #1
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a1c      	ldr	r2, [pc, #112]	; (8001af0 <OC1Config+0xd0>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d003      	beq.n	8001a8a <OC1Config+0x6a>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a1b      	ldr	r2, [pc, #108]	; (8001af4 <OC1Config+0xd4>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d11e      	bne.n	8001ac8 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	f023 0208 	bic.w	r2, r3, #8
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	695b      	ldr	r3, [r3, #20]
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4313      	orrs	r3, r2
 8001a98:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	f023 0204 	bic.w	r2, r3, #4
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff fe7b 	bl	80017d6 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40010000 	.word	0x40010000
 8001af4:	40010400 	.word	0x40010400

08001af8 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	f023 0210 	bic.w	r2, r3, #16
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	021b      	lsls	r3, r3, #8
 8001b34:	4313      	orrs	r3, r2
 8001b36:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f023 0220 	bic.w	r2, r3, #32
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	011b      	lsls	r3, r3, #4
 8001b44:	4313      	orrs	r3, r2
 8001b46:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	f023 0210 	bic.w	r2, r3, #16
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	011b      	lsls	r3, r3, #4
 8001b54:	4313      	orrs	r3, r2
 8001b56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a1d      	ldr	r2, [pc, #116]	; (8001bd0 <OC2Config+0xd8>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d003      	beq.n	8001b68 <OC2Config+0x70>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a1c      	ldr	r2, [pc, #112]	; (8001bd4 <OC2Config+0xdc>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d11f      	bne.n	8001ba8 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	019b      	lsls	r3, r3, #6
 8001b74:	4313      	orrs	r3, r2
 8001b76:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	019b      	lsls	r3, r3, #6
 8001b84:	4313      	orrs	r3, r2
 8001b86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4313      	orrs	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff fe19 	bl	80017f2 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40010000 	.word	0x40010000
 8001bd4:	40010400 	.word	0x40010400

08001bd8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a1b      	ldr	r3, [r3, #32]
 8001be6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a1b      	ldr	r3, [r3, #32]
 8001bf2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f023 0303 	bic.w	r3, r3, #3
 8001c06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	021b      	lsls	r3, r3, #8
 8001c22:	4313      	orrs	r3, r2
 8001c24:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	021b      	lsls	r3, r3, #8
 8001c32:	4313      	orrs	r3, r2
 8001c34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a1d      	ldr	r2, [pc, #116]	; (8001cb0 <OC3Config+0xd8>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d003      	beq.n	8001c46 <OC3Config+0x6e>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a1c      	ldr	r2, [pc, #112]	; (8001cb4 <OC3Config+0xdc>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d11f      	bne.n	8001c86 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	029b      	lsls	r3, r3, #10
 8001c52:	4313      	orrs	r3, r2
 8001c54:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	029b      	lsls	r3, r3, #10
 8001c62:	4313      	orrs	r3, r2
 8001c64:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	011b      	lsls	r3, r3, #4
 8001c72:	4313      	orrs	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	69db      	ldr	r3, [r3, #28]
 8001c80:	015b      	lsls	r3, r3, #5
 8001c82:	4313      	orrs	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	4619      	mov	r1, r3
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff fdb8 	bl	800180e <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40010000 	.word	0x40010000
 8001cb4:	40010400 	.word	0x40010400

08001cb8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ce6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	021b      	lsls	r3, r3, #8
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	031b      	lsls	r3, r3, #12
 8001d04:	4313      	orrs	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	031b      	lsls	r3, r3, #12
 8001d14:	4313      	orrs	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a11      	ldr	r2, [pc, #68]	; (8001d60 <OC4Config+0xa8>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d003      	beq.n	8001d28 <OC4Config+0x70>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a10      	ldr	r2, [pc, #64]	; (8001d64 <OC4Config+0xac>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d107      	bne.n	8001d38 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	019b      	lsls	r3, r3, #6
 8001d34:	4313      	orrs	r3, r2
 8001d36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	4619      	mov	r1, r3
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff fd6d 	bl	800182a <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40010000 	.word	0x40010000
 8001d64:	40010400 	.word	0x40010400

08001d68 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d7c:	bf0c      	ite	eq
 8001d7e:	2301      	moveq	r3, #1
 8001d80:	2300      	movne	r3, #0
 8001d82:	b2db      	uxtb	r3, r3
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	431a      	orrs	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	611a      	str	r2, [r3, #16]
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
 8001dbe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	695b      	ldr	r3, [r3, #20]
 8001dc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	615a      	str	r2, [r3, #20]
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8001ddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001de0:	b0c0      	sub	sp, #256	; 0x100
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001de8:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8001dec:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001df0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001df8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dfc:	f040 810c 	bne.w	8002018 <LL_USART_SetBaudRate+0x23c>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001e00:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001e04:	2200      	movs	r2, #0
 8001e06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001e0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001e0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001e12:	4622      	mov	r2, r4
 8001e14:	462b      	mov	r3, r5
 8001e16:	1891      	adds	r1, r2, r2
 8001e18:	6639      	str	r1, [r7, #96]	; 0x60
 8001e1a:	415b      	adcs	r3, r3
 8001e1c:	667b      	str	r3, [r7, #100]	; 0x64
 8001e1e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001e22:	4621      	mov	r1, r4
 8001e24:	eb12 0801 	adds.w	r8, r2, r1
 8001e28:	4629      	mov	r1, r5
 8001e2a:	eb43 0901 	adc.w	r9, r3, r1
 8001e2e:	f04f 0200 	mov.w	r2, #0
 8001e32:	f04f 0300 	mov.w	r3, #0
 8001e36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e42:	4690      	mov	r8, r2
 8001e44:	4699      	mov	r9, r3
 8001e46:	4623      	mov	r3, r4
 8001e48:	eb18 0303 	adds.w	r3, r8, r3
 8001e4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001e50:	462b      	mov	r3, r5
 8001e52:	eb49 0303 	adc.w	r3, r9, r3
 8001e56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001e5a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001e5e:	2200      	movs	r2, #0
 8001e60:	469a      	mov	sl, r3
 8001e62:	4693      	mov	fp, r2
 8001e64:	eb1a 030a 	adds.w	r3, sl, sl
 8001e68:	65bb      	str	r3, [r7, #88]	; 0x58
 8001e6a:	eb4b 030b 	adc.w	r3, fp, fp
 8001e6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e70:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001e74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001e78:	f7fe f9fa 	bl	8000270 <__aeabi_uldivmod>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4b64      	ldr	r3, [pc, #400]	; (8002014 <LL_USART_SetBaudRate+0x238>)
 8001e82:	fba3 2302 	umull	r2, r3, r3, r2
 8001e86:	095b      	lsrs	r3, r3, #5
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	011b      	lsls	r3, r3, #4
 8001e8c:	b29c      	uxth	r4, r3
 8001e8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001e92:	2200      	movs	r2, #0
 8001e94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001e98:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001e9c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8001ea0:	4642      	mov	r2, r8
 8001ea2:	464b      	mov	r3, r9
 8001ea4:	1891      	adds	r1, r2, r2
 8001ea6:	6539      	str	r1, [r7, #80]	; 0x50
 8001ea8:	415b      	adcs	r3, r3
 8001eaa:	657b      	str	r3, [r7, #84]	; 0x54
 8001eac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001eb0:	4641      	mov	r1, r8
 8001eb2:	1851      	adds	r1, r2, r1
 8001eb4:	64b9      	str	r1, [r7, #72]	; 0x48
 8001eb6:	4649      	mov	r1, r9
 8001eb8:	414b      	adcs	r3, r1
 8001eba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	f04f 0300 	mov.w	r3, #0
 8001ec4:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8001ec8:	4659      	mov	r1, fp
 8001eca:	00cb      	lsls	r3, r1, #3
 8001ecc:	4651      	mov	r1, sl
 8001ece:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ed2:	4651      	mov	r1, sl
 8001ed4:	00ca      	lsls	r2, r1, #3
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4603      	mov	r3, r0
 8001edc:	4642      	mov	r2, r8
 8001ede:	189b      	adds	r3, r3, r2
 8001ee0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001ee4:	464b      	mov	r3, r9
 8001ee6:	460a      	mov	r2, r1
 8001ee8:	eb42 0303 	adc.w	r3, r2, r3
 8001eec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001ef0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001efa:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001efe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8001f02:	460b      	mov	r3, r1
 8001f04:	18db      	adds	r3, r3, r3
 8001f06:	643b      	str	r3, [r7, #64]	; 0x40
 8001f08:	4613      	mov	r3, r2
 8001f0a:	eb42 0303 	adc.w	r3, r2, r3
 8001f0e:	647b      	str	r3, [r7, #68]	; 0x44
 8001f10:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001f14:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8001f18:	f7fe f9aa 	bl	8000270 <__aeabi_uldivmod>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4611      	mov	r1, r2
 8001f22:	4b3c      	ldr	r3, [pc, #240]	; (8002014 <LL_USART_SetBaudRate+0x238>)
 8001f24:	fba3 2301 	umull	r2, r3, r3, r1
 8001f28:	095b      	lsrs	r3, r3, #5
 8001f2a:	2264      	movs	r2, #100	; 0x64
 8001f2c:	fb02 f303 	mul.w	r3, r2, r3
 8001f30:	1acb      	subs	r3, r1, r3
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001f38:	4b36      	ldr	r3, [pc, #216]	; (8002014 <LL_USART_SetBaudRate+0x238>)
 8001f3a:	fba3 2302 	umull	r2, r3, r3, r2
 8001f3e:	095b      	lsrs	r3, r3, #5
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	4423      	add	r3, r4
 8001f4e:	b29c      	uxth	r4, r3
 8001f50:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001f54:	2200      	movs	r2, #0
 8001f56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001f5a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001f5e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8001f62:	4642      	mov	r2, r8
 8001f64:	464b      	mov	r3, r9
 8001f66:	1891      	adds	r1, r2, r2
 8001f68:	63b9      	str	r1, [r7, #56]	; 0x38
 8001f6a:	415b      	adcs	r3, r3
 8001f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f6e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001f72:	4641      	mov	r1, r8
 8001f74:	1851      	adds	r1, r2, r1
 8001f76:	6339      	str	r1, [r7, #48]	; 0x30
 8001f78:	4649      	mov	r1, r9
 8001f7a:	414b      	adcs	r3, r1
 8001f7c:	637b      	str	r3, [r7, #52]	; 0x34
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	f04f 0300 	mov.w	r3, #0
 8001f86:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001f8a:	4659      	mov	r1, fp
 8001f8c:	00cb      	lsls	r3, r1, #3
 8001f8e:	4651      	mov	r1, sl
 8001f90:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f94:	4651      	mov	r1, sl
 8001f96:	00ca      	lsls	r2, r1, #3
 8001f98:	4610      	mov	r0, r2
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	4642      	mov	r2, r8
 8001fa0:	189b      	adds	r3, r3, r2
 8001fa2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001fa6:	464b      	mov	r3, r9
 8001fa8:	460a      	mov	r2, r1
 8001faa:	eb42 0303 	adc.w	r3, r2, r3
 8001fae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001fb2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001fbc:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001fc0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	18db      	adds	r3, r3, r3
 8001fc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fca:	4613      	mov	r3, r2
 8001fcc:	eb42 0303 	adc.w	r3, r2, r3
 8001fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001fd6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001fda:	f7fe f949 	bl	8000270 <__aeabi_uldivmod>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <LL_USART_SetBaudRate+0x238>)
 8001fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8001fe8:	095b      	lsrs	r3, r3, #5
 8001fea:	2164      	movs	r1, #100	; 0x64
 8001fec:	fb01 f303 	mul.w	r3, r1, r3
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	3332      	adds	r3, #50	; 0x32
 8001ff6:	4a07      	ldr	r2, [pc, #28]	; (8002014 <LL_USART_SetBaudRate+0x238>)
 8001ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffc:	095b      	lsrs	r3, r3, #5
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	b29b      	uxth	r3, r3
 8002006:	4423      	add	r3, r4
 8002008:	b29b      	uxth	r3, r3
 800200a:	461a      	mov	r2, r3
 800200c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002010:	609a      	str	r2, [r3, #8]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 8002012:	e107      	b.n	8002224 <LL_USART_SetBaudRate+0x448>
 8002014:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002018:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800201c:	2200      	movs	r2, #0
 800201e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002022:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002026:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 800202a:	4642      	mov	r2, r8
 800202c:	464b      	mov	r3, r9
 800202e:	1891      	adds	r1, r2, r2
 8002030:	6239      	str	r1, [r7, #32]
 8002032:	415b      	adcs	r3, r3
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
 8002036:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800203a:	4641      	mov	r1, r8
 800203c:	1854      	adds	r4, r2, r1
 800203e:	4649      	mov	r1, r9
 8002040:	eb43 0501 	adc.w	r5, r3, r1
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	f04f 0300 	mov.w	r3, #0
 800204c:	00eb      	lsls	r3, r5, #3
 800204e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002052:	00e2      	lsls	r2, r4, #3
 8002054:	4614      	mov	r4, r2
 8002056:	461d      	mov	r5, r3
 8002058:	4643      	mov	r3, r8
 800205a:	18e3      	adds	r3, r4, r3
 800205c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002060:	464b      	mov	r3, r9
 8002062:	eb45 0303 	adc.w	r3, r5, r3
 8002066:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800206a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800206e:	2200      	movs	r2, #0
 8002070:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002074:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	f04f 0300 	mov.w	r3, #0
 8002080:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8002084:	4629      	mov	r1, r5
 8002086:	008b      	lsls	r3, r1, #2
 8002088:	4621      	mov	r1, r4
 800208a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800208e:	4621      	mov	r1, r4
 8002090:	008a      	lsls	r2, r1, #2
 8002092:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002096:	f7fe f8eb 	bl	8000270 <__aeabi_uldivmod>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	4b64      	ldr	r3, [pc, #400]	; (8002230 <LL_USART_SetBaudRate+0x454>)
 80020a0:	fba3 2302 	umull	r2, r3, r3, r2
 80020a4:	095b      	lsrs	r3, r3, #5
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	011b      	lsls	r3, r3, #4
 80020aa:	b29c      	uxth	r4, r3
 80020ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80020b0:	2200      	movs	r2, #0
 80020b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80020b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80020ba:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 80020be:	4642      	mov	r2, r8
 80020c0:	464b      	mov	r3, r9
 80020c2:	1891      	adds	r1, r2, r2
 80020c4:	61b9      	str	r1, [r7, #24]
 80020c6:	415b      	adcs	r3, r3
 80020c8:	61fb      	str	r3, [r7, #28]
 80020ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020ce:	4641      	mov	r1, r8
 80020d0:	1851      	adds	r1, r2, r1
 80020d2:	6139      	str	r1, [r7, #16]
 80020d4:	4649      	mov	r1, r9
 80020d6:	414b      	adcs	r3, r1
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	f04f 0200 	mov.w	r2, #0
 80020de:	f04f 0300 	mov.w	r3, #0
 80020e2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020e6:	4659      	mov	r1, fp
 80020e8:	00cb      	lsls	r3, r1, #3
 80020ea:	4651      	mov	r1, sl
 80020ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020f0:	4651      	mov	r1, sl
 80020f2:	00ca      	lsls	r2, r1, #3
 80020f4:	4610      	mov	r0, r2
 80020f6:	4619      	mov	r1, r3
 80020f8:	4603      	mov	r3, r0
 80020fa:	4642      	mov	r2, r8
 80020fc:	189b      	adds	r3, r3, r2
 80020fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002102:	464b      	mov	r3, r9
 8002104:	460a      	mov	r2, r1
 8002106:	eb42 0303 	adc.w	r3, r2, r3
 800210a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800210e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002112:	2200      	movs	r2, #0
 8002114:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002118:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800211c:	f04f 0200 	mov.w	r2, #0
 8002120:	f04f 0300 	mov.w	r3, #0
 8002124:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8002128:	4649      	mov	r1, r9
 800212a:	008b      	lsls	r3, r1, #2
 800212c:	4641      	mov	r1, r8
 800212e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002132:	4641      	mov	r1, r8
 8002134:	008a      	lsls	r2, r1, #2
 8002136:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800213a:	f7fe f899 	bl	8000270 <__aeabi_uldivmod>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4b3b      	ldr	r3, [pc, #236]	; (8002230 <LL_USART_SetBaudRate+0x454>)
 8002144:	fba3 1302 	umull	r1, r3, r3, r2
 8002148:	095b      	lsrs	r3, r3, #5
 800214a:	2164      	movs	r1, #100	; 0x64
 800214c:	fb01 f303 	mul.w	r3, r1, r3
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	011b      	lsls	r3, r3, #4
 8002154:	3332      	adds	r3, #50	; 0x32
 8002156:	4a36      	ldr	r2, [pc, #216]	; (8002230 <LL_USART_SetBaudRate+0x454>)
 8002158:	fba2 2303 	umull	r2, r3, r2, r3
 800215c:	095b      	lsrs	r3, r3, #5
 800215e:	b29b      	uxth	r3, r3
 8002160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002164:	b29b      	uxth	r3, r3
 8002166:	4423      	add	r3, r4
 8002168:	b29c      	uxth	r4, r3
 800216a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800216e:	2200      	movs	r2, #0
 8002170:	67bb      	str	r3, [r7, #120]	; 0x78
 8002172:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002174:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002178:	4642      	mov	r2, r8
 800217a:	464b      	mov	r3, r9
 800217c:	1891      	adds	r1, r2, r2
 800217e:	60b9      	str	r1, [r7, #8]
 8002180:	415b      	adcs	r3, r3
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002188:	4641      	mov	r1, r8
 800218a:	1851      	adds	r1, r2, r1
 800218c:	6039      	str	r1, [r7, #0]
 800218e:	4649      	mov	r1, r9
 8002190:	414b      	adcs	r3, r1
 8002192:	607b      	str	r3, [r7, #4]
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	f04f 0300 	mov.w	r3, #0
 800219c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80021a0:	4659      	mov	r1, fp
 80021a2:	00cb      	lsls	r3, r1, #3
 80021a4:	4651      	mov	r1, sl
 80021a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021aa:	4651      	mov	r1, sl
 80021ac:	00ca      	lsls	r2, r1, #3
 80021ae:	4610      	mov	r0, r2
 80021b0:	4619      	mov	r1, r3
 80021b2:	4603      	mov	r3, r0
 80021b4:	4642      	mov	r2, r8
 80021b6:	189b      	adds	r3, r3, r2
 80021b8:	673b      	str	r3, [r7, #112]	; 0x70
 80021ba:	464b      	mov	r3, r9
 80021bc:	460a      	mov	r2, r1
 80021be:	eb42 0303 	adc.w	r3, r2, r3
 80021c2:	677b      	str	r3, [r7, #116]	; 0x74
 80021c4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80021c8:	2200      	movs	r2, #0
 80021ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80021cc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	f04f 0300 	mov.w	r3, #0
 80021d6:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 80021da:	4649      	mov	r1, r9
 80021dc:	008b      	lsls	r3, r1, #2
 80021de:	4641      	mov	r1, r8
 80021e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021e4:	4641      	mov	r1, r8
 80021e6:	008a      	lsls	r2, r1, #2
 80021e8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80021ec:	f7fe f840 	bl	8000270 <__aeabi_uldivmod>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4b0e      	ldr	r3, [pc, #56]	; (8002230 <LL_USART_SetBaudRate+0x454>)
 80021f6:	fba3 1302 	umull	r1, r3, r3, r2
 80021fa:	095b      	lsrs	r3, r3, #5
 80021fc:	2164      	movs	r1, #100	; 0x64
 80021fe:	fb01 f303 	mul.w	r3, r1, r3
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	011b      	lsls	r3, r3, #4
 8002206:	3332      	adds	r3, #50	; 0x32
 8002208:	4a09      	ldr	r2, [pc, #36]	; (8002230 <LL_USART_SetBaudRate+0x454>)
 800220a:	fba2 2303 	umull	r2, r3, r2, r3
 800220e:	095b      	lsrs	r3, r3, #5
 8002210:	b29b      	uxth	r3, r3
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	b29b      	uxth	r3, r3
 8002218:	4423      	add	r3, r4
 800221a:	b29b      	uxth	r3, r3
 800221c:	461a      	mov	r2, r3
 800221e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002222:	609a      	str	r2, [r3, #8]
}
 8002224:	bf00      	nop
 8002226:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800222a:	46bd      	mov	sp, r7
 800222c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002230:	51eb851f 	.word	0x51eb851f

08002234 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b088      	sub	sp, #32
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002242:	2300      	movs	r3, #0
 8002244:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff fd8e 	bl	8001d68 <LL_USART_IsEnabled>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d15e      	bne.n	8002310 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800225a:	f023 030c 	bic.w	r3, r3, #12
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	6851      	ldr	r1, [r2, #4]
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	68d2      	ldr	r2, [r2, #12]
 8002266:	4311      	orrs	r1, r2
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	6912      	ldr	r2, [r2, #16]
 800226c:	4311      	orrs	r1, r2
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	6992      	ldr	r2, [r2, #24]
 8002272:	430a      	orrs	r2, r1
 8002274:	431a      	orrs	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	4619      	mov	r1, r3
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7ff fd85 	bl	8001d90 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	4619      	mov	r1, r3
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff fd92 	bl	8001db6 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002292:	f107 0308 	add.w	r3, r7, #8
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff f934 	bl	8001504 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a1f      	ldr	r2, [pc, #124]	; (800231c <LL_USART_Init+0xe8>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d102      	bne.n	80022aa <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	61bb      	str	r3, [r7, #24]
 80022a8:	e021      	b.n	80022ee <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a1c      	ldr	r2, [pc, #112]	; (8002320 <LL_USART_Init+0xec>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d102      	bne.n	80022b8 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	61bb      	str	r3, [r7, #24]
 80022b6:	e01a      	b.n	80022ee <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a1a      	ldr	r2, [pc, #104]	; (8002324 <LL_USART_Init+0xf0>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d102      	bne.n	80022c6 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	61bb      	str	r3, [r7, #24]
 80022c4:	e013      	b.n	80022ee <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a17      	ldr	r2, [pc, #92]	; (8002328 <LL_USART_Init+0xf4>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d102      	bne.n	80022d4 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	61bb      	str	r3, [r7, #24]
 80022d2:	e00c      	b.n	80022ee <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a15      	ldr	r2, [pc, #84]	; (800232c <LL_USART_Init+0xf8>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d102      	bne.n	80022e2 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	61bb      	str	r3, [r7, #24]
 80022e0:	e005      	b.n	80022ee <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a12      	ldr	r2, [pc, #72]	; (8002330 <LL_USART_Init+0xfc>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d101      	bne.n	80022ee <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00d      	beq.n	8002310 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d009      	beq.n	8002310 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 80022fc:	2300      	movs	r3, #0
 80022fe:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	699a      	ldr	r2, [r3, #24]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	69b9      	ldr	r1, [r7, #24]
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff fd66 	bl	8001ddc <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002310:	7ffb      	ldrb	r3, [r7, #31]
}
 8002312:	4618      	mov	r0, r3
 8002314:	3720      	adds	r7, #32
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40011000 	.word	0x40011000
 8002320:	40004400 	.word	0x40004400
 8002324:	40004800 	.word	0x40004800
 8002328:	40011400 	.word	0x40011400
 800232c:	40004c00 	.word	0x40004c00
 8002330:	40005000 	.word	0x40005000

08002334 <LL_SPI_Enable>:
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	601a      	str	r2, [r3, #0]
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <LL_SPI_SetStandard>:
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f023 0210 	bic.w	r2, r3, #16
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	431a      	orrs	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	605a      	str	r2, [r3, #4]
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b01      	cmp	r3, #1
 800238c:	d101      	bne.n	8002392 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d101      	bne.n	80023b8 <LL_SPI_IsActiveFlag_TXE+0x18>
 80023b4:	2301      	movs	r3, #1
 80023b6:	e000      	b.n	80023ba <LL_SPI_IsActiveFlag_TXE+0x1a>
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	330c      	adds	r3, #12
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	b2db      	uxtb	r3, r3
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b085      	sub	sp, #20
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
 80023ea:	460b      	mov	r3, r1
 80023ec:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	330c      	adds	r3, #12
 80023f2:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	78fa      	ldrb	r2, [r7, #3]
 80023f8:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80023fa:	bf00      	nop
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
 800240e:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	691a      	ldr	r2, [r3, #16]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	4013      	ands	r3, r2
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	429a      	cmp	r2, r3
 800241c:	bf0c      	ite	eq
 800241e:	2301      	moveq	r3, #1
 8002420:	2300      	movne	r3, #0
 8002422:	b2db      	uxtb	r3, r3
}
 8002424:	4618      	mov	r0, r3
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	619a      	str	r2, [r3, #24]
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	041a      	lsls	r2, r3, #16
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	619a      	str	r2, [r3, #24]
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
	...

0800246c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002474:	4b08      	ldr	r3, [pc, #32]	; (8002498 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002478:	4907      	ldr	r1, [pc, #28]	; (8002498 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4313      	orrs	r3, r2
 800247e:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002480:	4b05      	ldr	r3, [pc, #20]	; (8002498 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002482:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4013      	ands	r3, r2
 8002488:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800248a:	68fb      	ldr	r3, [r7, #12]
}
 800248c:	bf00      	nop
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	40023800 	.word	0x40023800

0800249c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80024a4:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80024a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024a8:	4907      	ldr	r1, [pc, #28]	; (80024c8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80024b0:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80024b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4013      	ands	r3, r2
 80024b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024ba:	68fb      	ldr	r3, [r7, #12]
}
 80024bc:	bf00      	nop
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	40023800 	.word	0x40023800

080024cc <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b090      	sub	sp, #64	; 0x40
 80024d0:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80024d2:	f107 0318 	add.w	r3, r7, #24
 80024d6:	2228      	movs	r2, #40	; 0x28
 80024d8:	2100      	movs	r1, #0
 80024da:	4618      	mov	r0, r3
 80024dc:	f002 f9e8 	bl	80048b0 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e0:	463b      	mov	r3, r7
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	605a      	str	r2, [r3, #4]
 80024e8:	609a      	str	r2, [r3, #8]
 80024ea:	60da      	str	r2, [r3, #12]
 80024ec:	611a      	str	r2, [r3, #16]
 80024ee:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80024f0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80024f4:	f7ff ffd2 	bl	800249c <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80024f8:	2002      	movs	r0, #2
 80024fa:	f7ff ffb7 	bl	800246c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80024fe:	2004      	movs	r0, #4
 8002500:	f7ff ffb4 	bl	800246c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002504:	2001      	movs	r0, #1
 8002506:	f7ff ffb1 	bl	800246c <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 800250a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800250e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002510:	2302      	movs	r3, #2
 8002512:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002514:	2303      	movs	r3, #3
 8002516:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002518:	2300      	movs	r3, #0
 800251a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800251c:	2300      	movs	r3, #0
 800251e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002520:	2305      	movs	r3, #5
 8002522:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002524:	463b      	mov	r3, r7
 8002526:	4619      	mov	r1, r3
 8002528:	4841      	ldr	r0, [pc, #260]	; (8002630 <BNO080_GPIO_SPI_Initialization+0x164>)
 800252a:	f7fe ff08 	bl	800133e <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800252e:	2300      	movs	r3, #0
 8002530:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002532:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002536:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002538:	2300      	movs	r3, #0
 800253a:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800253c:	2302      	movs	r3, #2
 800253e:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002540:	2301      	movs	r3, #1
 8002542:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002544:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002548:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 800254a:	2318      	movs	r3, #24
 800254c:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800254e:	2300      	movs	r3, #0
 8002550:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002552:	2300      	movs	r3, #0
 8002554:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8002556:	230a      	movs	r3, #10
 8002558:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 800255a:	f107 0318 	add.w	r3, r7, #24
 800255e:	4619      	mov	r1, r3
 8002560:	4834      	ldr	r0, [pc, #208]	; (8002634 <BNO080_GPIO_SPI_Initialization+0x168>)
 8002562:	f7ff f8bc 	bl	80016de <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8002566:	2100      	movs	r1, #0
 8002568:	4832      	ldr	r0, [pc, #200]	; (8002634 <BNO080_GPIO_SPI_Initialization+0x168>)
 800256a:	f7ff fef3 	bl	8002354 <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 800256e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002572:	4831      	ldr	r0, [pc, #196]	; (8002638 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8002574:	f7ff ff6a 	bl	800244c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 8002578:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800257c:	482c      	ldr	r0, [pc, #176]	; (8002630 <BNO080_GPIO_SPI_Initialization+0x164>)
 800257e:	f7ff ff65 	bl	800244c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 8002582:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002586:	482d      	ldr	r0, [pc, #180]	; (800263c <BNO080_GPIO_SPI_Initialization+0x170>)
 8002588:	f7ff ff60 	bl	800244c <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 800258c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002590:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002592:	2301      	movs	r3, #1
 8002594:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002596:	2303      	movs	r3, #3
 8002598:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800259e:	2300      	movs	r3, #0
 80025a0:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 80025a2:	463b      	mov	r3, r7
 80025a4:	4619      	mov	r1, r3
 80025a6:	4822      	ldr	r0, [pc, #136]	; (8002630 <BNO080_GPIO_SPI_Initialization+0x164>)
 80025a8:	f7fe fec9 	bl	800133e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 80025ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025b0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80025b2:	2301      	movs	r3, #1
 80025b4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80025b6:	2303      	movs	r3, #3
 80025b8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80025be:	2300      	movs	r3, #0
 80025c0:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 80025c2:	463b      	mov	r3, r7
 80025c4:	4619      	mov	r1, r3
 80025c6:	481c      	ldr	r0, [pc, #112]	; (8002638 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80025c8:	f7fe feb9 	bl	800133e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 80025cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025d0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80025d2:	2301      	movs	r3, #1
 80025d4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80025d6:	2303      	movs	r3, #3
 80025d8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80025de:	2300      	movs	r3, #0
 80025e0:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 80025e2:	463b      	mov	r3, r7
 80025e4:	4619      	mov	r1, r3
 80025e6:	4815      	ldr	r0, [pc, #84]	; (800263c <BNO080_GPIO_SPI_Initialization+0x170>)
 80025e8:	f7fe fea9 	bl	800133e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 80025ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025f0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80025f2:	2300      	movs	r3, #0
 80025f4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80025f6:	2301      	movs	r3, #1
 80025f8:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 80025fa:	463b      	mov	r3, r7
 80025fc:	4619      	mov	r1, r3
 80025fe:	480e      	ldr	r0, [pc, #56]	; (8002638 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8002600:	f7fe fe9d 	bl	800133e <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 8002604:	480b      	ldr	r0, [pc, #44]	; (8002634 <BNO080_GPIO_SPI_Initialization+0x168>)
 8002606:	f7ff fe95 	bl	8002334 <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 800260a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800260e:	4808      	ldr	r0, [pc, #32]	; (8002630 <BNO080_GPIO_SPI_Initialization+0x164>)
 8002610:	f7ff ff0e 	bl	8002430 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 8002614:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002618:	4808      	ldr	r0, [pc, #32]	; (800263c <BNO080_GPIO_SPI_Initialization+0x170>)
 800261a:	f7ff ff09 	bl	8002430 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 800261e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002622:	4805      	ldr	r0, [pc, #20]	; (8002638 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8002624:	f7ff ff04 	bl	8002430 <LL_GPIO_SetOutputPin>
}
 8002628:	bf00      	nop
 800262a:	3740      	adds	r7, #64	; 0x40
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40020400 	.word	0x40020400
 8002634:	40003800 	.word	0x40003800
 8002638:	40020800 	.word	0x40020800
 800263c:	40020000 	.word	0x40020000

08002640 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 8002646:	f7ff ff41 	bl	80024cc <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 800264a:	482e      	ldr	r0, [pc, #184]	; (8002704 <BNO080_Initialization+0xc4>)
 800264c:	f002 f938 	bl	80048c0 <iprintf>
	
	CHIP_DESELECT(BNO080);
 8002650:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002654:	482c      	ldr	r0, [pc, #176]	; (8002708 <BNO080_Initialization+0xc8>)
 8002656:	f7ff feeb 	bl	8002430 <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 800265a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800265e:	482b      	ldr	r0, [pc, #172]	; (800270c <BNO080_Initialization+0xcc>)
 8002660:	f7ff fee6 	bl	8002430 <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 8002664:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002668:	4829      	ldr	r0, [pc, #164]	; (8002710 <BNO080_Initialization+0xd0>)
 800266a:	f7ff feef 	bl	800244c <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 800266e:	20c8      	movs	r0, #200	; 0xc8
 8002670:	f7fd fff2 	bl	8000658 <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 8002674:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002678:	4825      	ldr	r0, [pc, #148]	; (8002710 <BNO080_Initialization+0xd0>)
 800267a:	f7ff fed9 	bl	8002430 <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 800267e:	f000 f8d7 	bl	8002830 <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 8002682:	f000 f8d5 	bl	8002830 <BNO080_waitForSPI>
	BNO080_receivePacket();
 8002686:	f000 f8f7 	bl	8002878 <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 800268a:	f000 f8d1 	bl	8002830 <BNO080_waitForSPI>
	BNO080_receivePacket();
 800268e:	f000 f8f3 	bl	8002878 <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8002692:	4b20      	ldr	r3, [pc, #128]	; (8002714 <BNO080_Initialization+0xd4>)
 8002694:	22f9      	movs	r2, #249	; 0xf9
 8002696:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 8002698:	4b1e      	ldr	r3, [pc, #120]	; (8002714 <BNO080_Initialization+0xd4>)
 800269a:	2200      	movs	r2, #0
 800269c:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 800269e:	2102      	movs	r1, #2
 80026a0:	2002      	movs	r0, #2
 80026a2:	f000 f959 	bl	8002958 <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 80026a6:	f000 f8c3 	bl	8002830 <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 80026aa:	f000 f8e5 	bl	8002878 <BNO080_receivePacket>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d11b      	bne.n	80026ec <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 80026b4:	4b18      	ldr	r3, [pc, #96]	; (8002718 <BNO080_Initialization+0xd8>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	4619      	mov	r1, r3
 80026ba:	4b17      	ldr	r3, [pc, #92]	; (8002718 <BNO080_Initialization+0xd8>)
 80026bc:	785b      	ldrb	r3, [r3, #1]
 80026be:	461a      	mov	r2, r3
 80026c0:	4b15      	ldr	r3, [pc, #84]	; (8002718 <BNO080_Initialization+0xd8>)
 80026c2:	789b      	ldrb	r3, [r3, #2]
 80026c4:	4618      	mov	r0, r3
 80026c6:	4b14      	ldr	r3, [pc, #80]	; (8002718 <BNO080_Initialization+0xd8>)
 80026c8:	78db      	ldrb	r3, [r3, #3]
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	4603      	mov	r3, r0
 80026ce:	4813      	ldr	r0, [pc, #76]	; (800271c <BNO080_Initialization+0xdc>)
 80026d0:	f002 f8f6 	bl	80048c0 <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 80026d4:	4b0f      	ldr	r3, [pc, #60]	; (8002714 <BNO080_Initialization+0xd4>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	2bf8      	cmp	r3, #248	; 0xf8
 80026da:	d107      	bne.n	80026ec <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 80026dc:	4b0d      	ldr	r3, [pc, #52]	; (8002714 <BNO080_Initialization+0xd4>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	4619      	mov	r1, r3
 80026e2:	480f      	ldr	r0, [pc, #60]	; (8002720 <BNO080_Initialization+0xe0>)
 80026e4:	f002 f8ec 	bl	80048c0 <iprintf>
			return (0);
 80026e8:	2300      	movs	r3, #0
 80026ea:	e007      	b.n	80026fc <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 80026ec:	4b09      	ldr	r3, [pc, #36]	; (8002714 <BNO080_Initialization+0xd4>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	22f8      	movs	r2, #248	; 0xf8
 80026f2:	4619      	mov	r1, r3
 80026f4:	480b      	ldr	r0, [pc, #44]	; (8002724 <BNO080_Initialization+0xe4>)
 80026f6:	f002 f8e3 	bl	80048c0 <iprintf>
	return (1); //Something went wrong
 80026fa:	2301      	movs	r3, #1
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	080058e0 	.word	0x080058e0
 8002708:	40020400 	.word	0x40020400
 800270c:	40020000 	.word	0x40020000
 8002710:	40020800 	.word	0x40020800
 8002714:	20000094 	.word	0x20000094
 8002718:	20000090 	.word	0x20000090
 800271c:	080058f4 	.word	0x080058f4
 8002720:	0800590c 	.word	0x0800590c
 8002724:	0800592c 	.word	0x0800592c

08002728 <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 8002732:	bf00      	nop
 8002734:	480c      	ldr	r0, [pc, #48]	; (8002768 <SPI2_SendByte+0x40>)
 8002736:	f7ff fe33 	bl	80023a0 <LL_SPI_IsActiveFlag_TXE>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0f9      	beq.n	8002734 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	4619      	mov	r1, r3
 8002744:	4808      	ldr	r0, [pc, #32]	; (8002768 <SPI2_SendByte+0x40>)
 8002746:	f7ff fe4c 	bl	80023e2 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 800274a:	bf00      	nop
 800274c:	4806      	ldr	r0, [pc, #24]	; (8002768 <SPI2_SendByte+0x40>)
 800274e:	f7ff fe14 	bl	800237a <LL_SPI_IsActiveFlag_RXNE>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0f9      	beq.n	800274c <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 8002758:	4803      	ldr	r0, [pc, #12]	; (8002768 <SPI2_SendByte+0x40>)
 800275a:	f7ff fe34 	bl	80023c6 <LL_SPI_ReceiveData8>
 800275e:	4603      	mov	r3, r0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40003800 	.word	0x40003800

0800276c <BNO080_enableRotationVector>:
	return fixedPointValue * powf(2, qPoint * -1);
}

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 8002776:	88fb      	ldrh	r3, [r7, #6]
 8002778:	2200      	movs	r2, #0
 800277a:	4619      	mov	r1, r3
 800277c:	2005      	movs	r0, #5
 800277e:	f000 f805 	bl	800278c <BNO080_setFeatureCommand>
}
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <BNO080_setFeatureCommand>:
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
 8002798:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 800279a:	4b24      	ldr	r3, [pc, #144]	; (800282c <BNO080_setFeatureCommand+0xa0>)
 800279c:	22fd      	movs	r2, #253	; 0xfd
 800279e:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 80027a0:	4a22      	ldr	r2, [pc, #136]	; (800282c <BNO080_setFeatureCommand+0xa0>)
 80027a2:	7bfb      	ldrb	r3, [r7, #15]
 80027a4:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 80027a6:	4b21      	ldr	r3, [pc, #132]	; (800282c <BNO080_setFeatureCommand+0xa0>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 80027ac:	4b1f      	ldr	r3, [pc, #124]	; (800282c <BNO080_setFeatureCommand+0xa0>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 80027b2:	4b1e      	ldr	r3, [pc, #120]	; (800282c <BNO080_setFeatureCommand+0xa0>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	4b1b      	ldr	r3, [pc, #108]	; (800282c <BNO080_setFeatureCommand+0xa0>)
 80027be:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	0a1b      	lsrs	r3, r3, #8
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	4b19      	ldr	r3, [pc, #100]	; (800282c <BNO080_setFeatureCommand+0xa0>)
 80027c8:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	0c1b      	lsrs	r3, r3, #16
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	4b16      	ldr	r3, [pc, #88]	; (800282c <BNO080_setFeatureCommand+0xa0>)
 80027d2:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	0e1b      	lsrs	r3, r3, #24
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	4b14      	ldr	r3, [pc, #80]	; (800282c <BNO080_setFeatureCommand+0xa0>)
 80027dc:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 80027de:	4b13      	ldr	r3, [pc, #76]	; (800282c <BNO080_setFeatureCommand+0xa0>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 80027e4:	4b11      	ldr	r3, [pc, #68]	; (800282c <BNO080_setFeatureCommand+0xa0>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 80027ea:	4b10      	ldr	r3, [pc, #64]	; (800282c <BNO080_setFeatureCommand+0xa0>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 80027f0:	4b0e      	ldr	r3, [pc, #56]	; (800282c <BNO080_setFeatureCommand+0xa0>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	4b0c      	ldr	r3, [pc, #48]	; (800282c <BNO080_setFeatureCommand+0xa0>)
 80027fc:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	0a1b      	lsrs	r3, r3, #8
 8002802:	b2da      	uxtb	r2, r3
 8002804:	4b09      	ldr	r3, [pc, #36]	; (800282c <BNO080_setFeatureCommand+0xa0>)
 8002806:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	0c1b      	lsrs	r3, r3, #16
 800280c:	b2da      	uxtb	r2, r3
 800280e:	4b07      	ldr	r3, [pc, #28]	; (800282c <BNO080_setFeatureCommand+0xa0>)
 8002810:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	0e1b      	lsrs	r3, r3, #24
 8002816:	b2da      	uxtb	r2, r3
 8002818:	4b04      	ldr	r3, [pc, #16]	; (800282c <BNO080_setFeatureCommand+0xa0>)
 800281a:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 800281c:	2111      	movs	r1, #17
 800281e:	2002      	movs	r0, #2
 8002820:	f000 f89a 	bl	8002958 <BNO080_sendPacket>
}
 8002824:	bf00      	nop
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	20000094 	.word	0x20000094

08002830 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8002836:	2300      	movs	r3, #0
 8002838:	607b      	str	r3, [r7, #4]
 800283a:	e00c      	b.n	8002856 <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 800283c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002840:	480b      	ldr	r0, [pc, #44]	; (8002870 <BNO080_waitForSPI+0x40>)
 8002842:	f7ff fde0 	bl	8002406 <LL_GPIO_IsInputPinSet>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 800284c:	2301      	movs	r3, #1
 800284e:	e00a      	b.n	8002866 <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3301      	adds	r3, #1
 8002854:	607b      	str	r3, [r7, #4]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800285c:	d1ee      	bne.n	800283c <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 800285e:	4805      	ldr	r0, [pc, #20]	; (8002874 <BNO080_waitForSPI+0x44>)
 8002860:	f002 f8b4 	bl	80049cc <puts>
	return (0);
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40020800 	.word	0x40020800
 8002874:	08005978 	.word	0x08005978

08002878 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 800287e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002882:	4831      	ldr	r0, [pc, #196]	; (8002948 <BNO080_receivePacket+0xd0>)
 8002884:	f7ff fdbf 	bl	8002406 <LL_GPIO_IsInputPinSet>
 8002888:	4603      	mov	r3, r0
 800288a:	2b01      	cmp	r3, #1
 800288c:	d101      	bne.n	8002892 <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 800288e:	2300      	movs	r3, #0
 8002890:	e056      	b.n	8002940 <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 8002892:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002896:	482d      	ldr	r0, [pc, #180]	; (800294c <BNO080_receivePacket+0xd4>)
 8002898:	f7ff fdd8 	bl	800244c <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 800289c:	2000      	movs	r0, #0
 800289e:	f7ff ff43 	bl	8002728 <SPI2_SendByte>
 80028a2:	4603      	mov	r3, r0
 80028a4:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 80028a6:	2000      	movs	r0, #0
 80028a8:	f7ff ff3e 	bl	8002728 <SPI2_SendByte>
 80028ac:	4603      	mov	r3, r0
 80028ae:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 80028b0:	2000      	movs	r0, #0
 80028b2:	f7ff ff39 	bl	8002728 <SPI2_SendByte>
 80028b6:	4603      	mov	r3, r0
 80028b8:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 80028ba:	2000      	movs	r0, #0
 80028bc:	f7ff ff34 	bl	8002728 <SPI2_SendByte>
 80028c0:	4603      	mov	r3, r0
 80028c2:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 80028c4:	4a22      	ldr	r2, [pc, #136]	; (8002950 <BNO080_receivePacket+0xd8>)
 80028c6:	7b7b      	ldrb	r3, [r7, #13]
 80028c8:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 80028ca:	4a21      	ldr	r2, [pc, #132]	; (8002950 <BNO080_receivePacket+0xd8>)
 80028cc:	7b3b      	ldrb	r3, [r7, #12]
 80028ce:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 80028d0:	4a1f      	ldr	r2, [pc, #124]	; (8002950 <BNO080_receivePacket+0xd8>)
 80028d2:	7afb      	ldrb	r3, [r7, #11]
 80028d4:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 80028d6:	4a1e      	ldr	r2, [pc, #120]	; (8002950 <BNO080_receivePacket+0xd8>)
 80028d8:	7abb      	ldrb	r3, [r7, #10]
 80028da:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 80028dc:	7b3b      	ldrb	r3, [r7, #12]
 80028de:	021b      	lsls	r3, r3, #8
 80028e0:	b21a      	sxth	r2, r3
 80028e2:	7b7b      	ldrb	r3, [r7, #13]
 80028e4:	b21b      	sxth	r3, r3
 80028e6:	4313      	orrs	r3, r2
 80028e8:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 80028ea:	893b      	ldrh	r3, [r7, #8]
 80028ec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80028f0:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 80028f2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 80028fa:	2300      	movs	r3, #0
 80028fc:	e020      	b.n	8002940 <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 80028fe:	893b      	ldrh	r3, [r7, #8]
 8002900:	3b04      	subs	r3, #4
 8002902:	b29b      	uxth	r3, r3
 8002904:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8002906:	2300      	movs	r3, #0
 8002908:	81fb      	strh	r3, [r7, #14]
 800290a:	e00e      	b.n	800292a <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 800290c:	20ff      	movs	r0, #255	; 0xff
 800290e:	f7ff ff0b 	bl	8002728 <SPI2_SendByte>
 8002912:	4603      	mov	r3, r0
 8002914:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 8002916:	89fb      	ldrh	r3, [r7, #14]
 8002918:	2b7f      	cmp	r3, #127	; 0x7f
 800291a:	d803      	bhi.n	8002924 <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 800291c:	89fb      	ldrh	r3, [r7, #14]
 800291e:	490d      	ldr	r1, [pc, #52]	; (8002954 <BNO080_receivePacket+0xdc>)
 8002920:	79fa      	ldrb	r2, [r7, #7]
 8002922:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8002924:	89fb      	ldrh	r3, [r7, #14]
 8002926:	3301      	adds	r3, #1
 8002928:	81fb      	strh	r3, [r7, #14]
 800292a:	89fa      	ldrh	r2, [r7, #14]
 800292c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002930:	429a      	cmp	r2, r3
 8002932:	dbeb      	blt.n	800290c <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 8002934:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002938:	4804      	ldr	r0, [pc, #16]	; (800294c <BNO080_receivePacket+0xd4>)
 800293a:	f7ff fd79 	bl	8002430 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 800293e:	2301      	movs	r3, #1
}
 8002940:	4618      	mov	r0, r3
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40020800 	.word	0x40020800
 800294c:	40020400 	.word	0x40020400
 8002950:	20000090 	.word	0x20000090
 8002954:	20000094 	.word	0x20000094

08002958 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	460a      	mov	r2, r1
 8002962:	71fb      	strb	r3, [r7, #7]
 8002964:	4613      	mov	r3, r2
 8002966:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8002968:	79bb      	ldrb	r3, [r7, #6]
 800296a:	3304      	adds	r3, #4
 800296c:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 800296e:	f7ff ff5f 	bl	8002830 <BNO080_waitForSPI>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d101      	bne.n	800297c <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 8002978:	2300      	movs	r3, #0
 800297a:	e032      	b.n	80029e2 <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 800297c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002980:	481a      	ldr	r0, [pc, #104]	; (80029ec <BNO080_sendPacket+0x94>)
 8002982:	f7ff fd63 	bl	800244c <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 8002986:	7bbb      	ldrb	r3, [r7, #14]
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff fecd 	bl	8002728 <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 800298e:	7bbb      	ldrb	r3, [r7, #14]
 8002990:	121b      	asrs	r3, r3, #8
 8002992:	b2db      	uxtb	r3, r3
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff fec7 	bl	8002728 <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 800299a:	79fb      	ldrb	r3, [r7, #7]
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff fec3 	bl	8002728 <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 80029a2:	79fb      	ldrb	r3, [r7, #7]
 80029a4:	4a12      	ldr	r2, [pc, #72]	; (80029f0 <BNO080_sendPacket+0x98>)
 80029a6:	5cd2      	ldrb	r2, [r2, r3]
 80029a8:	1c51      	adds	r1, r2, #1
 80029aa:	b2c8      	uxtb	r0, r1
 80029ac:	4910      	ldr	r1, [pc, #64]	; (80029f0 <BNO080_sendPacket+0x98>)
 80029ae:	54c8      	strb	r0, [r1, r3]
 80029b0:	4610      	mov	r0, r2
 80029b2:	f7ff feb9 	bl	8002728 <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 80029b6:	2300      	movs	r3, #0
 80029b8:	73fb      	strb	r3, [r7, #15]
 80029ba:	e008      	b.n	80029ce <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
 80029be:	4a0d      	ldr	r2, [pc, #52]	; (80029f4 <BNO080_sendPacket+0x9c>)
 80029c0:	5cd3      	ldrb	r3, [r2, r3]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff feb0 	bl	8002728 <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
 80029ca:	3301      	adds	r3, #1
 80029cc:	73fb      	strb	r3, [r7, #15]
 80029ce:	7bfa      	ldrb	r2, [r7, #15]
 80029d0:	79bb      	ldrb	r3, [r7, #6]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d3f2      	bcc.n	80029bc <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 80029d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029da:	4804      	ldr	r0, [pc, #16]	; (80029ec <BNO080_sendPacket+0x94>)
 80029dc:	f7ff fd28 	bl	8002430 <LL_GPIO_SetOutputPin>

	return (1);
 80029e0:	2301      	movs	r3, #1
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40020400 	.word	0x40020400
 80029f0:	20000114 	.word	0x20000114
 80029f4:	20000094 	.word	0x20000094

080029f8 <LL_SPI_Enable>:
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	601a      	str	r2, [r3, #0]
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <LL_SPI_SetStandard>:
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f023 0210 	bic.w	r2, r3, #16
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	605a      	str	r2, [r3, #4]
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <LL_SPI_IsActiveFlag_RXNE>:
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d101      	bne.n	8002a56 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <LL_SPI_IsActiveFlag_TXE>:
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d101      	bne.n	8002a7c <LL_SPI_IsActiveFlag_TXE+0x18>
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e000      	b.n	8002a7e <LL_SPI_IsActiveFlag_TXE+0x1a>
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <LL_SPI_ReceiveData8>:
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b083      	sub	sp, #12
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	330c      	adds	r3, #12
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	b2db      	uxtb	r3, r3
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <LL_SPI_TransmitData8>:
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b085      	sub	sp, #20
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
 8002aae:	460b      	mov	r3, r1
 8002ab0:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	330c      	adds	r3, #12
 8002ab6:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	78fa      	ldrb	r2, [r7, #3]
 8002abc:	701a      	strb	r2, [r3, #0]
}
 8002abe:	bf00      	nop
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <LL_GPIO_SetOutputPin>:
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	619a      	str	r2, [r3, #24]
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <LL_GPIO_ResetOutputPin>:
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
 8002aee:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	041a      	lsls	r2, r3, #16
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	619a      	str	r2, [r3, #24]
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <LL_AHB1_GRP1_EnableClock>:
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002b0c:	4b08      	ldr	r3, [pc, #32]	; (8002b30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002b0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b10:	4907      	ldr	r1, [pc, #28]	; (8002b30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002b18:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002b1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b22:	68fb      	ldr	r3, [r7, #12]
}
 8002b24:	bf00      	nop
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	40023800 	.word	0x40023800

08002b34 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002b3c:	4b08      	ldr	r3, [pc, #32]	; (8002b60 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002b3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b40:	4907      	ldr	r1, [pc, #28]	; (8002b60 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002b48:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002b4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b52:	68fb      	ldr	r3, [r7, #12]
}
 8002b54:	bf00      	nop
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	40023800 	.word	0x40023800

08002b64 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b090      	sub	sp, #64	; 0x40
 8002b68:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002b6a:	f107 0318 	add.w	r3, r7, #24
 8002b6e:	2228      	movs	r2, #40	; 0x28
 8002b70:	2100      	movs	r1, #0
 8002b72:	4618      	mov	r0, r3
 8002b74:	f001 fe9c 	bl	80048b0 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b78:	463b      	mov	r3, r7
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	605a      	str	r2, [r3, #4]
 8002b80:	609a      	str	r2, [r3, #8]
 8002b82:	60da      	str	r2, [r3, #12]
 8002b84:	611a      	str	r2, [r3, #16]
 8002b86:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8002b88:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002b8c:	f7ff ffd2 	bl	8002b34 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002b90:	2001      	movs	r0, #1
 8002b92:	f7ff ffb7 	bl	8002b04 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002b96:	2004      	movs	r0, #4
 8002b98:	f7ff ffb4 	bl	8002b04 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002b9c:	23e0      	movs	r3, #224	; 0xe0
 8002b9e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002bac:	2300      	movs	r3, #0
 8002bae:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002bb0:	2305      	movs	r3, #5
 8002bb2:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb4:	463b      	mov	r3, r7
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4825      	ldr	r0, [pc, #148]	; (8002c50 <ICM20602_GPIO_SPI_Initialization+0xec>)
 8002bba:	f7fe fbc0 	bl	800133e <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002bc2:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002bc6:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002bcc:	2302      	movs	r3, #2
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002bd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 8002bda:	2310      	movs	r3, #16
 8002bdc:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002bde:	2300      	movs	r3, #0
 8002be0:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002be2:	2300      	movs	r3, #0
 8002be4:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8002be6:	230a      	movs	r3, #10
 8002be8:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 8002bea:	f107 0318 	add.w	r3, r7, #24
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4818      	ldr	r0, [pc, #96]	; (8002c54 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8002bf2:	f7fe fd74 	bl	80016de <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	4816      	ldr	r0, [pc, #88]	; (8002c54 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8002bfa:	f7ff ff0d 	bl	8002a18 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 8002bfe:	2110      	movs	r1, #16
 8002c00:	4815      	ldr	r0, [pc, #84]	; (8002c58 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8002c02:	f7ff ff70 	bl	8002ae6 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 8002c06:	2310      	movs	r3, #16
 8002c08:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c16:	2300      	movs	r3, #0
 8002c18:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 8002c1a:	463b      	mov	r3, r7
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	480e      	ldr	r0, [pc, #56]	; (8002c58 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8002c20:	f7fe fb8d 	bl	800133e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 8002c24:	2320      	movs	r3, #32
 8002c26:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 8002c30:	463b      	mov	r3, r7
 8002c32:	4619      	mov	r1, r3
 8002c34:	4808      	ldr	r0, [pc, #32]	; (8002c58 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8002c36:	f7fe fb82 	bl	800133e <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 8002c3a:	4806      	ldr	r0, [pc, #24]	; (8002c54 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8002c3c:	f7ff fedc 	bl	80029f8 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8002c40:	2110      	movs	r1, #16
 8002c42:	4805      	ldr	r0, [pc, #20]	; (8002c58 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8002c44:	f7ff ff41 	bl	8002aca <LL_GPIO_SetOutputPin>
}
 8002c48:	bf00      	nop
 8002c4a:	3740      	adds	r7, #64	; 0x40
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40020000 	.word	0x40020000
 8002c54:	40013000 	.word	0x40013000
 8002c58:	40020800 	.word	0x40020800

08002c5c <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 8002c66:	bf00      	nop
 8002c68:	480c      	ldr	r0, [pc, #48]	; (8002c9c <SPI1_SendByte+0x40>)
 8002c6a:	f7ff fefb 	bl	8002a64 <LL_SPI_IsActiveFlag_TXE>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0f9      	beq.n	8002c68 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 8002c74:	79fb      	ldrb	r3, [r7, #7]
 8002c76:	4619      	mov	r1, r3
 8002c78:	4808      	ldr	r0, [pc, #32]	; (8002c9c <SPI1_SendByte+0x40>)
 8002c7a:	f7ff ff14 	bl	8002aa6 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 8002c7e:	bf00      	nop
 8002c80:	4806      	ldr	r0, [pc, #24]	; (8002c9c <SPI1_SendByte+0x40>)
 8002c82:	f7ff fedc 	bl	8002a3e <LL_SPI_IsActiveFlag_RXNE>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0f9      	beq.n	8002c80 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 8002c8c:	4803      	ldr	r0, [pc, #12]	; (8002c9c <SPI1_SendByte+0x40>)
 8002c8e:	f7ff fefc 	bl	8002a8a <LL_SPI_ReceiveData8>
 8002c92:	4603      	mov	r3, r0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40013000 	.word	0x40013000

08002ca0 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 8002caa:	2110      	movs	r1, #16
 8002cac:	480b      	ldr	r0, [pc, #44]	; (8002cdc <ICM20602_Readbyte+0x3c>)
 8002cae:	f7ff ff1a 	bl	8002ae6 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8002cb2:	79fb      	ldrb	r3, [r7, #7]
 8002cb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff ffce 	bl	8002c5c <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	f7ff ffcb 	bl	8002c5c <SPI1_SendByte>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 8002cca:	2110      	movs	r1, #16
 8002ccc:	4803      	ldr	r0, [pc, #12]	; (8002cdc <ICM20602_Readbyte+0x3c>)
 8002cce:	f7ff fefc 	bl	8002aca <LL_GPIO_SetOutputPin>
	
	return val;
 8002cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40020800 	.word	0x40020800

08002ce0 <ICM20602_Writebyte>:
	}
	CHIP_DESELECT(ICM20602);
}

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	460a      	mov	r2, r1
 8002cea:	71fb      	strb	r3, [r7, #7]
 8002cec:	4613      	mov	r3, r2
 8002cee:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 8002cf0:	2110      	movs	r1, #16
 8002cf2:	480b      	ldr	r0, [pc, #44]	; (8002d20 <ICM20602_Writebyte+0x40>)
 8002cf4:	f7ff fef7 	bl	8002ae6 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff ffab 	bl	8002c5c <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 8002d06:	79bb      	ldrb	r3, [r7, #6]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff ffa7 	bl	8002c5c <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 8002d0e:	2110      	movs	r1, #16
 8002d10:	4803      	ldr	r0, [pc, #12]	; (8002d20 <ICM20602_Writebyte+0x40>)
 8002d12:	f7ff feda 	bl	8002aca <LL_GPIO_SetOutputPin>
}
 8002d16:	bf00      	nop
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40020800 	.word	0x40020800

08002d24 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8002d2e:	f107 0308 	add.w	r3, r7, #8
 8002d32:	2200      	movs	r2, #0
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8002d38:	463b      	mov	r3, r7
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 8002d40:	f7ff ff10 	bl	8002b64 <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 8002d44:	4833      	ldr	r0, [pc, #204]	; (8002e14 <ICM20602_Initialization+0xf0>)
 8002d46:	f001 fdbb 	bl	80048c0 <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 8002d4a:	2075      	movs	r0, #117	; 0x75
 8002d4c:	f7ff ffa8 	bl	8002ca0 <ICM20602_Readbyte>
 8002d50:	4603      	mov	r3, r0
 8002d52:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
 8002d56:	2b12      	cmp	r3, #18
 8002d58:	d105      	bne.n	8002d66 <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	482e      	ldr	r0, [pc, #184]	; (8002e18 <ICM20602_Initialization+0xf4>)
 8002d60:	f001 fdae 	bl	80048c0 <iprintf>
 8002d64:	e012      	b.n	8002d8c <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 8002d66:	7bfb      	ldrb	r3, [r7, #15]
 8002d68:	2b12      	cmp	r3, #18
 8002d6a:	d00f      	beq.n	8002d8c <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8002d6c:	2075      	movs	r0, #117	; 0x75
 8002d6e:	f7ff ff97 	bl	8002ca0 <ICM20602_Readbyte>
 8002d72:	4603      	mov	r3, r0
 8002d74:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
 8002d78:	2b12      	cmp	r3, #18
 8002d7a:	d007      	beq.n	8002d8c <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	2212      	movs	r2, #18
 8002d80:	4619      	mov	r1, r3
 8002d82:	4826      	ldr	r0, [pc, #152]	; (8002e1c <ICM20602_Initialization+0xf8>)
 8002d84:	f001 fd9c 	bl	80048c0 <iprintf>
			return 1; //ERROR
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e03f      	b.n	8002e0c <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8002d8c:	2180      	movs	r1, #128	; 0x80
 8002d8e:	206b      	movs	r0, #107	; 0x6b
 8002d90:	f7ff ffa6 	bl	8002ce0 <ICM20602_Writebyte>
	HAL_Delay(50);
 8002d94:	2032      	movs	r0, #50	; 0x32
 8002d96:	f7fd fc5f 	bl	8000658 <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	206b      	movs	r0, #107	; 0x6b
 8002d9e:	f7ff ff9f 	bl	8002ce0 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 8002da2:	2032      	movs	r0, #50	; 0x32
 8002da4:	f7fd fc58 	bl	8000658 <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 8002da8:	2138      	movs	r1, #56	; 0x38
 8002daa:	206c      	movs	r0, #108	; 0x6c
 8002dac:	f7ff ff98 	bl	8002ce0 <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 8002db0:	2032      	movs	r0, #50	; 0x32
 8002db2:	f7fd fc51 	bl	8000658 <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 8002db6:	2100      	movs	r1, #0
 8002db8:	2019      	movs	r0, #25
 8002dba:	f7ff ff91 	bl	8002ce0 <ICM20602_Writebyte>
	HAL_Delay(50);
 8002dbe:	2032      	movs	r0, #50	; 0x32
 8002dc0:	f7fd fc4a 	bl	8000658 <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8002dc4:	2105      	movs	r1, #5
 8002dc6:	201a      	movs	r0, #26
 8002dc8:	f7ff ff8a 	bl	8002ce0 <ICM20602_Writebyte>
	HAL_Delay(50);
 8002dcc:	2032      	movs	r0, #50	; 0x32
 8002dce:	f7fd fc43 	bl	8000658 <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 8002dd2:	2118      	movs	r1, #24
 8002dd4:	201b      	movs	r0, #27
 8002dd6:	f7ff ff83 	bl	8002ce0 <ICM20602_Writebyte>
	HAL_Delay(50);
 8002dda:	2032      	movs	r0, #50	; 0x32
 8002ddc:	f7fd fc3c 	bl	8000658 <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 8002de0:	2118      	movs	r1, #24
 8002de2:	201c      	movs	r0, #28
 8002de4:	f7ff ff7c 	bl	8002ce0 <ICM20602_Writebyte>
	HAL_Delay(50);
 8002de8:	2032      	movs	r0, #50	; 0x32
 8002dea:	f7fd fc35 	bl	8000658 <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8002dee:	2103      	movs	r1, #3
 8002df0:	201d      	movs	r0, #29
 8002df2:	f7ff ff75 	bl	8002ce0 <ICM20602_Writebyte>
	HAL_Delay(50);
 8002df6:	2032      	movs	r0, #50	; 0x32
 8002df8:	f7fd fc2e 	bl	8000658 <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	2038      	movs	r0, #56	; 0x38
 8002e00:	f7ff ff6e 	bl	8002ce0 <ICM20602_Writebyte>
	HAL_Delay(50);
 8002e04:	2032      	movs	r0, #50	; 0x32
 8002e06:	f7fd fc27 	bl	8000658 <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	0800598c 	.word	0x0800598c
 8002e18:	080059a4 	.word	0x080059a4
 8002e1c:	080059c8 	.word	0x080059c8

08002e20 <LL_SPI_Enable>:
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	601a      	str	r2, [r3, #0]
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <LL_SPI_SetStandard>:
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f023 0210 	bic.w	r2, r3, #16
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	431a      	orrs	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	605a      	str	r2, [r3, #4]
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <LL_SPI_IsActiveFlag_RXNE>:
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d101      	bne.n	8002e7e <LL_SPI_IsActiveFlag_RXNE+0x18>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <LL_SPI_IsActiveFlag_TXE>:
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d101      	bne.n	8002ea4 <LL_SPI_IsActiveFlag_TXE+0x18>
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e000      	b.n	8002ea6 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr

08002eb2 <LL_SPI_ReceiveData8>:
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	330c      	adds	r3, #12
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	b2db      	uxtb	r3, r3
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <LL_SPI_TransmitData8>:
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b085      	sub	sp, #20
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	330c      	adds	r3, #12
 8002ede:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	78fa      	ldrb	r2, [r7, #3]
 8002ee4:	701a      	strb	r2, [r3, #0]
}
 8002ee6:	bf00      	nop
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <LL_GPIO_SetOutputPin>:
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
 8002efa:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	619a      	str	r2, [r3, #24]
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <LL_GPIO_ResetOutputPin>:
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b083      	sub	sp, #12
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
 8002f16:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	041a      	lsls	r2, r3, #16
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	619a      	str	r2, [r3, #24]
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <LL_AHB1_GRP1_EnableClock>:
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002f34:	4b08      	ldr	r3, [pc, #32]	; (8002f58 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002f36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f38:	4907      	ldr	r1, [pc, #28]	; (8002f58 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002f40:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002f42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4013      	ands	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
}
 8002f4c:	bf00      	nop
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	40023800 	.word	0x40023800

08002f5c <LL_APB1_GRP1_EnableClock>:
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002f64:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002f66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f68:	4907      	ldr	r1, [pc, #28]	; (8002f88 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002f70:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002f72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4013      	ands	r3, r2
 8002f78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
}
 8002f7c:	bf00      	nop
 8002f7e:	3714      	adds	r7, #20
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	40023800 	.word	0x40023800

08002f8c <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b090      	sub	sp, #64	; 0x40
 8002f90:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002f92:	f107 0318 	add.w	r3, r7, #24
 8002f96:	2228      	movs	r2, #40	; 0x28
 8002f98:	2100      	movs	r1, #0
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f001 fc88 	bl	80048b0 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa0:	463b      	mov	r3, r7
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	605a      	str	r2, [r3, #4]
 8002fa8:	609a      	str	r2, [r3, #8]
 8002faa:	60da      	str	r2, [r3, #12]
 8002fac:	611a      	str	r2, [r3, #16]
 8002fae:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8002fb0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002fb4:	f7ff ffd2 	bl	8002f5c <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002fb8:	2002      	movs	r0, #2
 8002fba:	f7ff ffb7 	bl	8002f2c <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8002fbe:	2338      	movs	r3, #56	; 0x38
 8002fc0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8002fd2:	2306      	movs	r3, #6
 8002fd4:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fd6:	463b      	mov	r3, r7
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4826      	ldr	r0, [pc, #152]	; (8003074 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8002fdc:	f7fe f9af 	bl	800133e <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002fe4:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002fe8:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002fea:	2300      	movs	r3, #0
 8002fec:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002fee:	2302      	movs	r3, #2
 8002ff0:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002ff6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8002ffc:	2308      	movs	r3, #8
 8002ffe:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003000:	2300      	movs	r3, #0
 8003002:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003004:	2300      	movs	r3, #0
 8003006:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8003008:	230a      	movs	r3, #10
 800300a:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 800300c:	f107 0318 	add.w	r3, r7, #24
 8003010:	4619      	mov	r1, r3
 8003012:	4819      	ldr	r0, [pc, #100]	; (8003078 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8003014:	f7fe fb63 	bl	80016de <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8003018:	2100      	movs	r1, #0
 800301a:	4817      	ldr	r0, [pc, #92]	; (8003078 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 800301c:	f7ff ff10 	bl	8002e40 <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 8003020:	2140      	movs	r1, #64	; 0x40
 8003022:	4814      	ldr	r0, [pc, #80]	; (8003074 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8003024:	f7ff ff73 	bl	8002f0e <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 8003028:	2340      	movs	r3, #64	; 0x40
 800302a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800302c:	2301      	movs	r3, #1
 800302e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003030:	2303      	movs	r3, #3
 8003032:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003034:	2300      	movs	r3, #0
 8003036:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003038:	2300      	movs	r3, #0
 800303a:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 800303c:	463b      	mov	r3, r7
 800303e:	4619      	mov	r1, r3
 8003040:	480c      	ldr	r0, [pc, #48]	; (8003074 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8003042:	f7fe f97c 	bl	800133e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 8003046:	2380      	movs	r3, #128	; 0x80
 8003048:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800304a:	2300      	movs	r3, #0
 800304c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800304e:	2301      	movs	r3, #1
 8003050:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 8003052:	463b      	mov	r3, r7
 8003054:	4619      	mov	r1, r3
 8003056:	4807      	ldr	r0, [pc, #28]	; (8003074 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8003058:	f7fe f971 	bl	800133e <LL_GPIO_Init>
	
	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 800305c:	4806      	ldr	r0, [pc, #24]	; (8003078 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 800305e:	f7ff fedf 	bl	8002e20 <LL_SPI_Enable>
	
	CHIP_DESELECT(LPS22HH);
 8003062:	2140      	movs	r1, #64	; 0x40
 8003064:	4803      	ldr	r0, [pc, #12]	; (8003074 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8003066:	f7ff ff44 	bl	8002ef2 <LL_GPIO_SetOutputPin>
}
 800306a:	bf00      	nop
 800306c:	3740      	adds	r7, #64	; 0x40
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40020400 	.word	0x40020400
 8003078:	40003c00 	.word	0x40003c00

0800307c <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	4603      	mov	r3, r0
 8003084:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 8003086:	bf00      	nop
 8003088:	480c      	ldr	r0, [pc, #48]	; (80030bc <SPI3_SendByte+0x40>)
 800308a:	f7ff feff 	bl	8002e8c <LL_SPI_IsActiveFlag_TXE>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0f9      	beq.n	8003088 <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 8003094:	79fb      	ldrb	r3, [r7, #7]
 8003096:	4619      	mov	r1, r3
 8003098:	4808      	ldr	r0, [pc, #32]	; (80030bc <SPI3_SendByte+0x40>)
 800309a:	f7ff ff18 	bl	8002ece <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 800309e:	bf00      	nop
 80030a0:	4806      	ldr	r0, [pc, #24]	; (80030bc <SPI3_SendByte+0x40>)
 80030a2:	f7ff fee0 	bl	8002e66 <LL_SPI_IsActiveFlag_RXNE>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d0f9      	beq.n	80030a0 <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 80030ac:	4803      	ldr	r0, [pc, #12]	; (80030bc <SPI3_SendByte+0x40>)
 80030ae:	f7ff ff00 	bl	8002eb2 <LL_SPI_ReceiveData8>
 80030b2:	4603      	mov	r3, r0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40003c00 	.word	0x40003c00

080030c0 <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 80030ca:	2140      	movs	r1, #64	; 0x40
 80030cc:	480b      	ldr	r0, [pc, #44]	; (80030fc <LPS22HH_Readbyte+0x3c>)
 80030ce:	f7ff ff1e 	bl	8002f0e <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80030d2:	79fb      	ldrb	r3, [r7, #7]
 80030d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff ffce 	bl	800307c <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 80030e0:	2000      	movs	r0, #0
 80030e2:	f7ff ffcb 	bl	800307c <SPI3_SendByte>
 80030e6:	4603      	mov	r3, r0
 80030e8:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 80030ea:	2140      	movs	r1, #64	; 0x40
 80030ec:	4803      	ldr	r0, [pc, #12]	; (80030fc <LPS22HH_Readbyte+0x3c>)
 80030ee:	f7ff ff00 	bl	8002ef2 <LL_GPIO_SetOutputPin>
	
	return val;
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40020400 	.word	0x40020400

08003100 <LPS22HH_Writebyte>:
	}
	CHIP_DESELECT(LPS22HH);
}

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	4603      	mov	r3, r0
 8003108:	460a      	mov	r2, r1
 800310a:	71fb      	strb	r3, [r7, #7]
 800310c:	4613      	mov	r3, r2
 800310e:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 8003110:	2140      	movs	r1, #64	; 0x40
 8003112:	480b      	ldr	r0, [pc, #44]	; (8003140 <LPS22HH_Writebyte+0x40>)
 8003114:	f7ff fefb 	bl	8002f0e <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8003118:	79fb      	ldrb	r3, [r7, #7]
 800311a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800311e:	b2db      	uxtb	r3, r3
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff ffab 	bl	800307c <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 8003126:	79bb      	ldrb	r3, [r7, #6]
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff ffa7 	bl	800307c <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 800312e:	2140      	movs	r1, #64	; 0x40
 8003130:	4803      	ldr	r0, [pc, #12]	; (8003140 <LPS22HH_Writebyte+0x40>)
 8003132:	f7ff fede 	bl	8002ef2 <LL_GPIO_SetOutputPin>
}
 8003136:	bf00      	nop
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40020400 	.word	0x40020400

08003144 <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 800314a:	2300      	movs	r3, #0
 800314c:	71fb      	strb	r3, [r7, #7]
	
	LPS22HH_GPIO_SPI_Initialization();
 800314e:	f7ff ff1d 	bl	8002f8c <LPS22HH_GPIO_SPI_Initialization>
	
	printf("Checking LPS22HH...");
 8003152:	4841      	ldr	r0, [pc, #260]	; (8003258 <LPS22HH_Initialization+0x114>)
 8003154:	f001 fbb4 	bl	80048c0 <iprintf>
	
	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F); 
 8003158:	200f      	movs	r0, #15
 800315a:	f7ff ffb1 	bl	80030c0 <LPS22HH_Readbyte>
 800315e:	4603      	mov	r3, r0
 8003160:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 8003162:	79fb      	ldrb	r3, [r7, #7]
 8003164:	2bb3      	cmp	r3, #179	; 0xb3
 8003166:	d105      	bne.n	8003174 <LPS22HH_Initialization+0x30>
	{
		printf("\nLPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 8003168:	79fb      	ldrb	r3, [r7, #7]
 800316a:	4619      	mov	r1, r3
 800316c:	483b      	ldr	r0, [pc, #236]	; (800325c <LPS22HH_Initialization+0x118>)
 800316e:	f001 fba7 	bl	80048c0 <iprintf>
 8003172:	e012      	b.n	800319a <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 8003174:	79fb      	ldrb	r3, [r7, #7]
 8003176:	2bb3      	cmp	r3, #179	; 0xb3
 8003178:	d00f      	beq.n	800319a <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 800317a:	200f      	movs	r0, #15
 800317c:	f7ff ffa0 	bl	80030c0 <LPS22HH_Readbyte>
 8003180:	4603      	mov	r3, r0
 8003182:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 8003184:	79fb      	ldrb	r3, [r7, #7]
 8003186:	2bb3      	cmp	r3, #179	; 0xb3
 8003188:	d007      	beq.n	800319a <LPS22HH_Initialization+0x56>
			printf( "nLPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 800318a:	79fb      	ldrb	r3, [r7, #7]
 800318c:	22b3      	movs	r2, #179	; 0xb3
 800318e:	4619      	mov	r1, r3
 8003190:	4833      	ldr	r0, [pc, #204]	; (8003260 <LPS22HH_Initialization+0x11c>)
 8003192:	f001 fb95 	bl	80048c0 <iprintf>
			return 1; //ERROR
 8003196:	2301      	movs	r3, #1
 8003198:	e059      	b.n	800324e <LPS22HH_Initialization+0x10a>
		}
	}
	
	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 800319a:	2104      	movs	r1, #4
 800319c:	2011      	movs	r0, #17
 800319e:	f7ff ffaf 	bl	8003100 <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 80031a2:	2011      	movs	r0, #17
 80031a4:	f7ff ff8c 	bl	80030c0 <LPS22HH_Readbyte>
 80031a8:	4603      	mov	r3, r0
 80031aa:	f003 0304 	and.w	r3, r3, #4
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f7      	bne.n	80031a2 <LPS22HH_Initialization+0x5e>
	
	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 80031b2:	2010      	movs	r0, #16
 80031b4:	f7ff ff84 	bl	80030c0 <LPS22HH_Readbyte>
 80031b8:	4603      	mov	r3, r0
 80031ba:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 80031bc:	79bb      	ldrb	r3, [r7, #6]
 80031be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031c2:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 80031c4:	79bb      	ldrb	r3, [r7, #6]
 80031c6:	4619      	mov	r1, r3
 80031c8:	2010      	movs	r0, #16
 80031ca:	f7ff ff99 	bl	8003100 <LPS22HH_Writebyte>
	temp_reg = 0;
 80031ce:	2300      	movs	r3, #0
 80031d0:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 80031d2:	2010      	movs	r0, #16
 80031d4:	f7ff ff74 	bl	80030c0 <LPS22HH_Readbyte>
 80031d8:	4603      	mov	r3, r0
 80031da:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);
	
	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 80031dc:	2010      	movs	r0, #16
 80031de:	f7ff ff6f 	bl	80030c0 <LPS22HH_Readbyte>
 80031e2:	4603      	mov	r3, r0
 80031e4:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 80031e6:	79bb      	ldrb	r3, [r7, #6]
 80031e8:	f043 030c 	orr.w	r3, r3, #12
 80031ec:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 80031ee:	79bb      	ldrb	r3, [r7, #6]
 80031f0:	4619      	mov	r1, r3
 80031f2:	2010      	movs	r0, #16
 80031f4:	f7ff ff84 	bl	8003100 <LPS22HH_Writebyte>
	
	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 80031f8:	2010      	movs	r0, #16
 80031fa:	f7ff ff61 	bl	80030c0 <LPS22HH_Readbyte>
 80031fe:	4603      	mov	r3, r0
 8003200:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8003202:	79bb      	ldrb	r3, [r7, #6]
 8003204:	f043 0302 	orr.w	r3, r3, #2
 8003208:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 800320a:	79bb      	ldrb	r3, [r7, #6]
 800320c:	4619      	mov	r1, r3
 800320e:	2010      	movs	r0, #16
 8003210:	f7ff ff76 	bl	8003100 <LPS22HH_Writebyte>
	
	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 8003214:	2011      	movs	r0, #17
 8003216:	f7ff ff53 	bl	80030c0 <LPS22HH_Readbyte>
 800321a:	4603      	mov	r3, r0
 800321c:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 800321e:	79bb      	ldrb	r3, [r7, #6]
 8003220:	f043 0302 	orr.w	r3, r3, #2
 8003224:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 8003226:	79bb      	ldrb	r3, [r7, #6]
 8003228:	4619      	mov	r1, r3
 800322a:	2011      	movs	r0, #17
 800322c:	f7ff ff68 	bl	8003100 <LPS22HH_Writebyte>
	
	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 8003230:	2012      	movs	r0, #18
 8003232:	f7ff ff45 	bl	80030c0 <LPS22HH_Readbyte>
 8003236:	4603      	mov	r3, r0
 8003238:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 800323a:	79bb      	ldrb	r3, [r7, #6]
 800323c:	f043 0304 	orr.w	r3, r3, #4
 8003240:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 8003242:	79bb      	ldrb	r3, [r7, #6]
 8003244:	4619      	mov	r1, r3
 8003246:	2012      	movs	r0, #18
 8003248:	f7ff ff5a 	bl	8003100 <LPS22HH_Writebyte>
	
	return 0; //OK
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	080059f4 	.word	0x080059f4
 800325c:	08005a08 	.word	0x08005a08
 8003260:	08005a2c 	.word	0x08005a2c

08003264 <__NVIC_GetPriorityGrouping>:
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003268:	4b04      	ldr	r3, [pc, #16]	; (800327c <__NVIC_GetPriorityGrouping+0x18>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	0a1b      	lsrs	r3, r3, #8
 800326e:	f003 0307 	and.w	r3, r3, #7
}
 8003272:	4618      	mov	r0, r3
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	e000ed00 	.word	0xe000ed00

08003280 <__NVIC_EnableIRQ>:
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	4603      	mov	r3, r0
 8003288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800328a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328e:	2b00      	cmp	r3, #0
 8003290:	db0b      	blt.n	80032aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003292:	79fb      	ldrb	r3, [r7, #7]
 8003294:	f003 021f 	and.w	r2, r3, #31
 8003298:	4907      	ldr	r1, [pc, #28]	; (80032b8 <__NVIC_EnableIRQ+0x38>)
 800329a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	2001      	movs	r0, #1
 80032a2:	fa00 f202 	lsl.w	r2, r0, r2
 80032a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80032aa:	bf00      	nop
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	e000e100 	.word	0xe000e100

080032bc <__NVIC_SetPriority>:
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	4603      	mov	r3, r0
 80032c4:	6039      	str	r1, [r7, #0]
 80032c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	db0a      	blt.n	80032e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	490c      	ldr	r1, [pc, #48]	; (8003308 <__NVIC_SetPriority+0x4c>)
 80032d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032da:	0112      	lsls	r2, r2, #4
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	440b      	add	r3, r1
 80032e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80032e4:	e00a      	b.n	80032fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	4908      	ldr	r1, [pc, #32]	; (800330c <__NVIC_SetPriority+0x50>)
 80032ec:	79fb      	ldrb	r3, [r7, #7]
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	3b04      	subs	r3, #4
 80032f4:	0112      	lsls	r2, r2, #4
 80032f6:	b2d2      	uxtb	r2, r2
 80032f8:	440b      	add	r3, r1
 80032fa:	761a      	strb	r2, [r3, #24]
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	e000e100 	.word	0xe000e100
 800330c:	e000ed00 	.word	0xe000ed00

08003310 <NVIC_EncodePriority>:
{
 8003310:	b480      	push	{r7}
 8003312:	b089      	sub	sp, #36	; 0x24
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	f1c3 0307 	rsb	r3, r3, #7
 800332a:	2b04      	cmp	r3, #4
 800332c:	bf28      	it	cs
 800332e:	2304      	movcs	r3, #4
 8003330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	3304      	adds	r3, #4
 8003336:	2b06      	cmp	r3, #6
 8003338:	d902      	bls.n	8003340 <NVIC_EncodePriority+0x30>
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	3b03      	subs	r3, #3
 800333e:	e000      	b.n	8003342 <NVIC_EncodePriority+0x32>
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003344:	f04f 32ff 	mov.w	r2, #4294967295
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	43da      	mvns	r2, r3
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	401a      	ands	r2, r3
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003358:	f04f 31ff 	mov.w	r1, #4294967295
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	fa01 f303 	lsl.w	r3, r1, r3
 8003362:	43d9      	mvns	r1, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003368:	4313      	orrs	r3, r2
}
 800336a:	4618      	mov	r0, r3
 800336c:	3724      	adds	r7, #36	; 0x24
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr

08003376 <LL_USART_Enable>:
{
 8003376:	b480      	push	{r7}
 8003378:	b083      	sub	sp, #12
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	60da      	str	r2, [r3, #12]
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8003396:	b480      	push	{r7}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	615a      	str	r2, [r3, #20]
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d2:	2b80      	cmp	r3, #128	; 0x80
 80033d4:	bf0c      	ite	eq
 80033d6:	2301      	moveq	r3, #1
 80033d8:	2300      	movne	r3, #0
 80033da:	b2db      	uxtb	r3, r3
}
 80033dc:	4618      	mov	r0, r3
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	460b      	mov	r3, r1
 80033f2:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80033f4:	78fa      	ldrb	r2, [r7, #3]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	605a      	str	r2, [r3, #4]
}
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
	...

08003408 <LL_AHB1_GRP1_EnableClock>:
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003410:	4b08      	ldr	r3, [pc, #32]	; (8003434 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003412:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003414:	4907      	ldr	r1, [pc, #28]	; (8003434 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4313      	orrs	r3, r2
 800341a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800341c:	4b05      	ldr	r3, [pc, #20]	; (8003434 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800341e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4013      	ands	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003426:	68fb      	ldr	r3, [r7, #12]
}
 8003428:	bf00      	nop
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	40023800 	.word	0x40023800

08003438 <LL_APB1_GRP1_EnableClock>:
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003440:	4b08      	ldr	r3, [pc, #32]	; (8003464 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003442:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003444:	4907      	ldr	r1, [pc, #28]	; (8003464 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4313      	orrs	r3, r2
 800344a:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800344c:	4b05      	ldr	r3, [pc, #20]	; (8003464 <LL_APB1_GRP1_EnableClock+0x2c>)
 800344e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4013      	ands	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003456:	68fb      	ldr	r3, [r7, #12]
}
 8003458:	bf00      	nop
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	40023800 	.word	0x40023800

08003468 <M8N_TransmitData>:
	0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x31,
	0xBF
};

void M8N_TransmitData(unsigned char* data, unsigned char len)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	460b      	mov	r3, r1
 8003472:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<len;i++)
 8003474:	2300      	movs	r3, #0
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	e011      	b.n	800349e <M8N_TransmitData+0x36>
	{
		while(!LL_USART_IsActiveFlag_TXE(UART4));
 800347a:	bf00      	nop
 800347c:	480c      	ldr	r0, [pc, #48]	; (80034b0 <M8N_TransmitData+0x48>)
 800347e:	f7ff ffa0 	bl	80033c2 <LL_USART_IsActiveFlag_TXE>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0f9      	beq.n	800347c <M8N_TransmitData+0x14>
		LL_USART_TransmitData8(UART4, *(data+i));
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	4413      	add	r3, r2
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	4619      	mov	r1, r3
 8003492:	4807      	ldr	r0, [pc, #28]	; (80034b0 <M8N_TransmitData+0x48>)
 8003494:	f7ff ffa8 	bl	80033e8 <LL_USART_TransmitData8>
	for(int i=0;i<len;i++)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	3301      	adds	r3, #1
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	78fb      	ldrb	r3, [r7, #3]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	dbe9      	blt.n	800347a <M8N_TransmitData+0x12>
	}
}
 80034a6:	bf00      	nop
 80034a8:	bf00      	nop
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40004c00 	.word	0x40004c00

080034b4 <M8N_UART4_Initialization>:

void M8N_UART4_Initialization(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08e      	sub	sp, #56	; 0x38
 80034b8:	af00      	add	r7, sp, #0
	LL_USART_InitTypeDef USART_InitStruct = {0};
 80034ba:	f107 031c 	add.w	r3, r7, #28
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	605a      	str	r2, [r3, #4]
 80034c4:	609a      	str	r2, [r3, #8]
 80034c6:	60da      	str	r2, [r3, #12]
 80034c8:	611a      	str	r2, [r3, #16]
 80034ca:	615a      	str	r2, [r3, #20]
 80034cc:	619a      	str	r2, [r3, #24]

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ce:	1d3b      	adds	r3, r7, #4
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	605a      	str	r2, [r3, #4]
 80034d6:	609a      	str	r2, [r3, #8]
 80034d8:	60da      	str	r2, [r3, #12]
 80034da:	611a      	str	r2, [r3, #16]
 80034dc:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 80034de:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80034e2:	f7ff ffa9 	bl	8003438 <LL_APB1_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80034e6:	2004      	movs	r0, #4
 80034e8:	f7ff ff8e 	bl	8003408 <LL_AHB1_GRP1_EnableClock>
	/**UART4 GPIO Configuration
	PC10   ------> UART4_TX
	PC11   ------> UART4_RX
	*/
	GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 80034ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80034f0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80034f2:	2302      	movs	r3, #2
 80034f4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80034f6:	2303      	movs	r3, #3
 80034f8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80034fa:	2300      	movs	r3, #0
 80034fc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80034fe:	2301      	movs	r3, #1
 8003500:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8003502:	2308      	movs	r3, #8
 8003504:	61bb      	str	r3, [r7, #24]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003506:	1d3b      	adds	r3, r7, #4
 8003508:	4619      	mov	r1, r3
 800350a:	4819      	ldr	r0, [pc, #100]	; (8003570 <M8N_UART4_Initialization+0xbc>)
 800350c:	f7fd ff17 	bl	800133e <LL_GPIO_Init>

	/* UART4 interrupt Init */
	NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003510:	f7ff fea8 	bl	8003264 <__NVIC_GetPriorityGrouping>
 8003514:	4603      	mov	r3, r0
 8003516:	2200      	movs	r2, #0
 8003518:	2100      	movs	r1, #0
 800351a:	4618      	mov	r0, r3
 800351c:	f7ff fef8 	bl	8003310 <NVIC_EncodePriority>
 8003520:	4603      	mov	r3, r0
 8003522:	4619      	mov	r1, r3
 8003524:	2034      	movs	r0, #52	; 0x34
 8003526:	f7ff fec9 	bl	80032bc <__NVIC_SetPriority>
	NVIC_EnableIRQ(UART4_IRQn);
 800352a:	2034      	movs	r0, #52	; 0x34
 800352c:	f7ff fea8 	bl	8003280 <__NVIC_EnableIRQ>

	USART_InitStruct.BaudRate = 9600;
 8003530:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8003534:	61fb      	str	r3, [r7, #28]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003536:	2300      	movs	r3, #0
 8003538:	623b      	str	r3, [r7, #32]
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800353a:	2300      	movs	r3, #0
 800353c:	627b      	str	r3, [r7, #36]	; 0x24
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800353e:	2300      	movs	r3, #0
 8003540:	62bb      	str	r3, [r7, #40]	; 0x28
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003542:	230c      	movs	r3, #12
 8003544:	62fb      	str	r3, [r7, #44]	; 0x2c
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003546:	2300      	movs	r3, #0
 8003548:	633b      	str	r3, [r7, #48]	; 0x30
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800354a:	2300      	movs	r3, #0
 800354c:	637b      	str	r3, [r7, #52]	; 0x34
	LL_USART_Init(UART4, &USART_InitStruct);
 800354e:	f107 031c 	add.w	r3, r7, #28
 8003552:	4619      	mov	r1, r3
 8003554:	4807      	ldr	r0, [pc, #28]	; (8003574 <M8N_UART4_Initialization+0xc0>)
 8003556:	f7fe fe6d 	bl	8002234 <LL_USART_Init>
	LL_USART_ConfigAsyncMode(UART4);
 800355a:	4806      	ldr	r0, [pc, #24]	; (8003574 <M8N_UART4_Initialization+0xc0>)
 800355c:	f7ff ff1b 	bl	8003396 <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(UART4);
 8003560:	4804      	ldr	r0, [pc, #16]	; (8003574 <M8N_UART4_Initialization+0xc0>)
 8003562:	f7ff ff08 	bl	8003376 <LL_USART_Enable>
}
 8003566:	bf00      	nop
 8003568:	3738      	adds	r7, #56	; 0x38
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	40020800 	.word	0x40020800
 8003574:	40004c00 	.word	0x40004c00

08003578 <M8N_Initialization>:

void M8N_Initialization(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
	M8N_UART4_Initialization();
 800357c:	f7ff ff9a 	bl	80034b4 <M8N_UART4_Initialization>

	M8N_TransmitData(&UBX_CFG_PRT[0], sizeof(UBX_CFG_PRT));
 8003580:	211c      	movs	r1, #28
 8003582:	480d      	ldr	r0, [pc, #52]	; (80035b8 <M8N_Initialization+0x40>)
 8003584:	f7ff ff70 	bl	8003468 <M8N_TransmitData>
	HAL_Delay(100);
 8003588:	2064      	movs	r0, #100	; 0x64
 800358a:	f7fd f865 	bl	8000658 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_MSG[0], sizeof(UBX_CFG_MSG));
 800358e:	2110      	movs	r1, #16
 8003590:	480a      	ldr	r0, [pc, #40]	; (80035bc <M8N_Initialization+0x44>)
 8003592:	f7ff ff69 	bl	8003468 <M8N_TransmitData>
	HAL_Delay(100);
 8003596:	2064      	movs	r0, #100	; 0x64
 8003598:	f7fd f85e 	bl	8000658 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_RATE[0], sizeof(UBX_CFG_RATE));
 800359c:	210e      	movs	r1, #14
 800359e:	4808      	ldr	r0, [pc, #32]	; (80035c0 <M8N_Initialization+0x48>)
 80035a0:	f7ff ff62 	bl	8003468 <M8N_TransmitData>
	HAL_Delay(100);
 80035a4:	2064      	movs	r0, #100	; 0x64
 80035a6:	f7fd f857 	bl	8000658 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_CFG[0], sizeof(UBX_CFG_CFG));
 80035aa:	2115      	movs	r1, #21
 80035ac:	4805      	ldr	r0, [pc, #20]	; (80035c4 <M8N_Initialization+0x4c>)
 80035ae:	f7ff ff5b 	bl	8003468 <M8N_TransmitData>
}
 80035b2:	bf00      	nop
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	08005a58 	.word	0x08005a58
 80035bc:	08005a74 	.word	0x08005a74
 80035c0:	08005a84 	.word	0x08005a84
 80035c4:	08005a94 	.word	0x08005a94

080035c8 <LL_GPIO_ResetOutputPin>:
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	041a      	lsls	r2, r3, #16
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	619a      	str	r2, [r3, #24]
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
	...

080035e8 <LL_AHB1_GRP1_EnableClock>:
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80035f0:	4b08      	ldr	r3, [pc, #32]	; (8003614 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80035f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035f4:	4907      	ldr	r1, [pc, #28]	; (8003614 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80035fc:	4b05      	ldr	r3, [pc, #20]	; (8003614 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80035fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4013      	ands	r3, r2
 8003604:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003606:	68fb      	ldr	r3, [r7, #12]
}
 8003608:	bf00      	nop
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	40023800 	.word	0x40023800

08003618 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800361e:	463b      	mov	r3, r7
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	605a      	str	r2, [r3, #4]
 8003626:	609a      	str	r2, [r3, #8]
 8003628:	60da      	str	r2, [r3, #12]
 800362a:	611a      	str	r2, [r3, #16]
 800362c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800362e:	2080      	movs	r0, #128	; 0x80
 8003630:	f7ff ffda 	bl	80035e8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8003634:	2004      	movs	r0, #4
 8003636:	f7ff ffd7 	bl	80035e8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800363a:	2001      	movs	r0, #1
 800363c:	f7ff ffd4 	bl	80035e8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003640:	2002      	movs	r0, #2
 8003642:	f7ff ffd1 	bl	80035e8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8003646:	2008      	movs	r0, #8
 8003648:	f7ff ffce 	bl	80035e8 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4
 800364c:	f240 2117 	movw	r1, #535	; 0x217
 8003650:	482b      	ldr	r0, [pc, #172]	; (8003700 <MX_GPIO_Init+0xe8>)
 8003652:	f7ff ffb9 	bl	80035c8 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12|LL_GPIO_PIN_6);
 8003656:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800365a:	482a      	ldr	r0, [pc, #168]	; (8003704 <MX_GPIO_Init+0xec>)
 800365c:	f7ff ffb4 	bl	80035c8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8003660:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003664:	4828      	ldr	r0, [pc, #160]	; (8003708 <MX_GPIO_Init+0xf0>)
 8003666:	f7ff ffaf 	bl	80035c8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4
 800366a:	f240 2317 	movw	r3, #535	; 0x217
 800366e:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003670:	2301      	movs	r3, #1
 8003672:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003674:	2300      	movs	r3, #0
 8003676:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003678:	2300      	movs	r3, #0
 800367a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800367c:	2300      	movs	r3, #0
 800367e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003680:	463b      	mov	r3, r7
 8003682:	4619      	mov	r1, r3
 8003684:	481e      	ldr	r0, [pc, #120]	; (8003700 <MX_GPIO_Init+0xe8>)
 8003686:	f7fd fe5a 	bl	800133e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_8;
 800368a:	f44f 7390 	mov.w	r3, #288	; 0x120
 800368e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8003690:	2300      	movs	r3, #0
 8003692:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003694:	2300      	movs	r3, #0
 8003696:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003698:	463b      	mov	r3, r7
 800369a:	4619      	mov	r1, r3
 800369c:	4818      	ldr	r0, [pc, #96]	; (8003700 <MX_GPIO_Init+0xe8>)
 800369e:	f7fd fe4e 	bl	800133e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_6;
 80036a2:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 80036a6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80036a8:	2301      	movs	r3, #1
 80036aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80036ac:	2300      	movs	r3, #0
 80036ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80036b0:	2300      	movs	r3, #0
 80036b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80036b4:	2300      	movs	r3, #0
 80036b6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036b8:	463b      	mov	r3, r7
 80036ba:	4619      	mov	r1, r3
 80036bc:	4811      	ldr	r0, [pc, #68]	; (8003704 <MX_GPIO_Init+0xec>)
 80036be:	f7fd fe3e 	bl	800133e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80036c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036c6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80036c8:	2301      	movs	r3, #1
 80036ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80036cc:	2300      	movs	r3, #0
 80036ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80036d0:	2300      	movs	r3, #0
 80036d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80036d4:	2300      	movs	r3, #0
 80036d6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d8:	463b      	mov	r3, r7
 80036da:	4619      	mov	r1, r3
 80036dc:	480a      	ldr	r0, [pc, #40]	; (8003708 <MX_GPIO_Init+0xf0>)
 80036de:	f7fd fe2e 	bl	800133e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80036e2:	2380      	movs	r3, #128	; 0x80
 80036e4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80036e6:	2300      	movs	r3, #0
 80036e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80036ea:	2300      	movs	r3, #0
 80036ec:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ee:	463b      	mov	r3, r7
 80036f0:	4619      	mov	r1, r3
 80036f2:	4804      	ldr	r0, [pc, #16]	; (8003704 <MX_GPIO_Init+0xec>)
 80036f4:	f7fd fe23 	bl	800133e <LL_GPIO_Init>

}
 80036f8:	bf00      	nop
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40020800 	.word	0x40020800
 8003704:	40020400 	.word	0x40020400
 8003708:	40020000 	.word	0x40020000

0800370c <LL_TIM_EnableCounter>:
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f043 0201 	orr.w	r2, r3, #1
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	601a      	str	r2, [r3, #0]
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <LL_TIM_CC_EnableChannel>:
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1a      	ldr	r2, [r3, #32]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	431a      	orrs	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	621a      	str	r2, [r3, #32]
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <LL_TIM_CC_DisableChannel>:
{
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
 8003756:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a1a      	ldr	r2, [r3, #32]
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	43db      	mvns	r3, r3
 8003760:	401a      	ands	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	621a      	str	r2, [r3, #32]
}
 8003766:	bf00      	nop
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <LL_USART_IsActiveFlag_TXE>:
{
 8003772:	b480      	push	{r7}
 8003774:	b083      	sub	sp, #12
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003782:	2b80      	cmp	r3, #128	; 0x80
 8003784:	bf0c      	ite	eq
 8003786:	2301      	moveq	r3, #1
 8003788:	2300      	movne	r3, #0
 800378a:	b2db      	uxtb	r3, r3
}
 800378c:	4618      	mov	r0, r3
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <LL_USART_EnableIT_RXNE>:
{
 8003798:	b480      	push	{r7}
 800379a:	b089      	sub	sp, #36	; 0x24
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	330c      	adds	r3, #12
 80037a4:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	e853 3f00 	ldrex	r3, [r3]
 80037ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	f043 0320 	orr.w	r3, r3, #32
 80037b4:	61fb      	str	r3, [r7, #28]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	330c      	adds	r3, #12
 80037ba:	69fa      	ldr	r2, [r7, #28]
 80037bc:	61ba      	str	r2, [r7, #24]
 80037be:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c0:	6979      	ldr	r1, [r7, #20]
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	e841 2300 	strex	r3, r2, [r1]
 80037c8:	613b      	str	r3, [r7, #16]
   return(result);
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1e7      	bne.n	80037a0 <LL_USART_EnableIT_RXNE+0x8>
}
 80037d0:	bf00      	nop
 80037d2:	bf00      	nop
 80037d4:	3724      	adds	r7, #36	; 0x24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <LL_USART_TransmitData8>:
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
 80037e6:	460b      	mov	r3, r1
 80037e8:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80037ea:	78fa      	ldrb	r2, [r7, #3]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	605a      	str	r2, [r3, #4]
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char* p, int len)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
	for(int i=0;i<len;i++)
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	e011      	b.n	8003832 <_write+0x36>
	{
		while(!LL_USART_IsActiveFlag_TXE(USART6));
 800380e:	bf00      	nop
 8003810:	480c      	ldr	r0, [pc, #48]	; (8003844 <_write+0x48>)
 8003812:	f7ff ffae 	bl	8003772 <LL_USART_IsActiveFlag_TXE>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0f9      	beq.n	8003810 <_write+0x14>
		LL_USART_TransmitData8(USART6, *(p+i));
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	4413      	add	r3, r2
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	4619      	mov	r1, r3
 8003826:	4807      	ldr	r0, [pc, #28]	; (8003844 <_write+0x48>)
 8003828:	f7ff ffd9 	bl	80037de <LL_USART_TransmitData8>
	for(int i=0;i<len;i++)
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	3301      	adds	r3, #1
 8003830:	617b      	str	r3, [r7, #20]
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	429a      	cmp	r2, r3
 8003838:	dbe9      	blt.n	800380e <_write+0x12>
	}
	return len;
 800383a:	687b      	ldr	r3, [r7, #4]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40011400 	.word	0x40011400

08003848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int count = 0;
 800384e:	2300      	movs	r3, #0
 8003850:	617b      	str	r3, [r7, #20]
	float f = 1.234;
 8003852:	4b27      	ldr	r3, [pc, #156]	; (80038f0 <main+0xa8>)
 8003854:	613b      	str	r3, [r7, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003856:	f7fc fe8d 	bl	8000574 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800385a:	f000 f853 	bl	8003904 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800385e:	f7ff fedb 	bl	8003618 <MX_GPIO_Init>
  MX_TIM3_Init();
 8003862:	f000 fd2d 	bl	80042c0 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8003866:	f000 ff6f 	bl	8004748 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 800386a:	f000 f969 	bl	8003b40 <MX_SPI2_Init>
  MX_SPI1_Init();
 800386e:	f000 f915 	bl	8003a9c <MX_SPI1_Init>
  MX_SPI3_Init();
 8003872:	f000 f9b9 	bl	8003be8 <MX_SPI3_Init>
  MX_UART4_Init();
 8003876:	f000 fe8d 	bl	8004594 <MX_UART4_Init>
  MX_UART5_Init();
 800387a:	f000 feed 	bl	8004658 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM3);
 800387e:	481d      	ldr	r0, [pc, #116]	; (80038f4 <main+0xac>)
 8003880:	f7ff ff44 	bl	800370c <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003884:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003888:	481a      	ldr	r0, [pc, #104]	; (80038f4 <main+0xac>)
 800388a:	f7ff ff4f 	bl	800372c <LL_TIM_CC_EnableChannel>

  TIM3->PSC = 2000;
 800388e:	4b19      	ldr	r3, [pc, #100]	; (80038f4 <main+0xac>)
 8003890:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003894:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8003896:	2064      	movs	r0, #100	; 0x64
 8003898:	f7fc fede 	bl	8000658 <HAL_Delay>
  TIM3->PSC = 1500;
 800389c:	4b15      	ldr	r3, [pc, #84]	; (80038f4 <main+0xac>)
 800389e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80038a2:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 80038a4:	2064      	movs	r0, #100	; 0x64
 80038a6:	f7fc fed7 	bl	8000658 <HAL_Delay>
  TIM3->PSC = 1000;
 80038aa:	4b12      	ldr	r3, [pc, #72]	; (80038f4 <main+0xac>)
 80038ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038b0:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 80038b2:	2064      	movs	r0, #100	; 0x64
 80038b4:	f7fc fed0 	bl	8000658 <HAL_Delay>

  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80038b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038bc:	480d      	ldr	r0, [pc, #52]	; (80038f4 <main+0xac>)
 80038be:	f7ff ff46 	bl	800374e <LL_TIM_CC_DisableChannel>

  LL_USART_EnableIT_RXNE(USART6);
 80038c2:	480d      	ldr	r0, [pc, #52]	; (80038f8 <main+0xb0>)
 80038c4:	f7ff ff68 	bl	8003798 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(UART4);
 80038c8:	480c      	ldr	r0, [pc, #48]	; (80038fc <main+0xb4>)
 80038ca:	f7ff ff65 	bl	8003798 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(UART5);
 80038ce:	480c      	ldr	r0, [pc, #48]	; (8003900 <main+0xb8>)
 80038d0:	f7ff ff62 	bl	8003798 <LL_USART_EnableIT_RXNE>

  BNO080_Initialization();
 80038d4:	f7fe feb4 	bl	8002640 <BNO080_Initialization>
  BNO080_enableRotationVector(2500);
 80038d8:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80038dc:	f7fe ff46 	bl	800276c <BNO080_enableRotationVector>

  ICM20602_Initialization();
 80038e0:	f7ff fa20 	bl	8002d24 <ICM20602_Initialization>
  LPS22HH_Initialization();
 80038e4:	f7ff fc2e 	bl	8003144 <LPS22HH_Initialization>
  M8N_Initialization();
 80038e8:	f7ff fe46 	bl	8003578 <M8N_Initialization>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80038ec:	e7fe      	b.n	80038ec <main+0xa4>
 80038ee:	bf00      	nop
 80038f0:	3f9df3b6 	.word	0x3f9df3b6
 80038f4:	40000400 	.word	0x40000400
 80038f8:	40011400 	.word	0x40011400
 80038fc:	40004c00 	.word	0x40004c00
 8003900:	40005000 	.word	0x40005000

08003904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b094      	sub	sp, #80	; 0x50
 8003908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800390a:	f107 0320 	add.w	r3, r7, #32
 800390e:	2230      	movs	r2, #48	; 0x30
 8003910:	2100      	movs	r1, #0
 8003912:	4618      	mov	r0, r3
 8003914:	f000 ffcc 	bl	80048b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003918:	f107 030c 	add.w	r3, r7, #12
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	605a      	str	r2, [r3, #4]
 8003922:	609a      	str	r2, [r3, #8]
 8003924:	60da      	str	r2, [r3, #12]
 8003926:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003928:	2300      	movs	r3, #0
 800392a:	60bb      	str	r3, [r7, #8]
 800392c:	4b28      	ldr	r3, [pc, #160]	; (80039d0 <SystemClock_Config+0xcc>)
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	4a27      	ldr	r2, [pc, #156]	; (80039d0 <SystemClock_Config+0xcc>)
 8003932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003936:	6413      	str	r3, [r2, #64]	; 0x40
 8003938:	4b25      	ldr	r3, [pc, #148]	; (80039d0 <SystemClock_Config+0xcc>)
 800393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003940:	60bb      	str	r3, [r7, #8]
 8003942:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003944:	2300      	movs	r3, #0
 8003946:	607b      	str	r3, [r7, #4]
 8003948:	4b22      	ldr	r3, [pc, #136]	; (80039d4 <SystemClock_Config+0xd0>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a21      	ldr	r2, [pc, #132]	; (80039d4 <SystemClock_Config+0xd0>)
 800394e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003952:	6013      	str	r3, [r2, #0]
 8003954:	4b1f      	ldr	r3, [pc, #124]	; (80039d4 <SystemClock_Config+0xd0>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800395c:	607b      	str	r3, [r7, #4]
 800395e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003960:	2301      	movs	r3, #1
 8003962:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003964:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003968:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800396a:	2302      	movs	r3, #2
 800396c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800396e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003972:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003974:	2304      	movs	r3, #4
 8003976:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003978:	23a8      	movs	r3, #168	; 0xa8
 800397a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800397c:	2302      	movs	r3, #2
 800397e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003980:	2304      	movs	r3, #4
 8003982:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003984:	f107 0320 	add.w	r3, r7, #32
 8003988:	4618      	mov	r0, r3
 800398a:	f7fc ff6f 	bl	800086c <HAL_RCC_OscConfig>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003994:	f000 f820 	bl	80039d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003998:	230f      	movs	r3, #15
 800399a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800399c:	2302      	movs	r3, #2
 800399e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039a0:	2300      	movs	r3, #0
 80039a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80039a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80039a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80039aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80039b0:	f107 030c 	add.w	r3, r7, #12
 80039b4:	2105      	movs	r1, #5
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fd f9d0 	bl	8000d5c <HAL_RCC_ClockConfig>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80039c2:	f000 f809 	bl	80039d8 <Error_Handler>
  }
}
 80039c6:	bf00      	nop
 80039c8:	3750      	adds	r7, #80	; 0x50
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40023800 	.word	0x40023800
 80039d4:	40007000 	.word	0x40007000

080039d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80039dc:	bf00      	nop
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr

080039e6 <LL_SPI_SetStandard>:
{
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
 80039ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f023 0210 	bic.w	r2, r3, #16
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	605a      	str	r2, [r3, #4]
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <LL_AHB1_GRP1_EnableClock>:
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003a14:	4b08      	ldr	r3, [pc, #32]	; (8003a38 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003a16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a18:	4907      	ldr	r1, [pc, #28]	; (8003a38 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003a20:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003a22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4013      	ands	r3, r2
 8003a28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
}
 8003a2c:	bf00      	nop
 8003a2e:	3714      	adds	r7, #20
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr
 8003a38:	40023800 	.word	0x40023800

08003a3c <LL_APB1_GRP1_EnableClock>:
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003a44:	4b08      	ldr	r3, [pc, #32]	; (8003a68 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003a46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a48:	4907      	ldr	r1, [pc, #28]	; (8003a68 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003a50:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003a52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4013      	ands	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
}
 8003a5c:	bf00      	nop
 8003a5e:	3714      	adds	r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	40023800 	.word	0x40023800

08003a6c <LL_APB2_GRP1_EnableClock>:
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003a74:	4b08      	ldr	r3, [pc, #32]	; (8003a98 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003a76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a78:	4907      	ldr	r1, [pc, #28]	; (8003a98 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003a80:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003a82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4013      	ands	r3, r2
 8003a88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
}
 8003a8c:	bf00      	nop
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	40023800 	.word	0x40023800

08003a9c <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b090      	sub	sp, #64	; 0x40
 8003aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003aa2:	f107 0318 	add.w	r3, r7, #24
 8003aa6:	2228      	movs	r2, #40	; 0x28
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 ff00 	bl	80048b0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ab0:	463b      	mov	r3, r7
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	605a      	str	r2, [r3, #4]
 8003ab8:	609a      	str	r2, [r3, #8]
 8003aba:	60da      	str	r2, [r3, #12]
 8003abc:	611a      	str	r2, [r3, #16]
 8003abe:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8003ac0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003ac4:	f7ff ffd2 	bl	8003a6c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003ac8:	2001      	movs	r0, #1
 8003aca:	f7ff ff9f 	bl	8003a0c <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8003ace:	23e0      	movs	r3, #224	; 0xe0
 8003ad0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003ada:	2300      	movs	r3, #0
 8003adc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003ae2:	2305      	movs	r3, #5
 8003ae4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ae6:	463b      	mov	r3, r7
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4813      	ldr	r0, [pc, #76]	; (8003b38 <MX_SPI1_Init+0x9c>)
 8003aec:	f7fd fc27 	bl	800133e <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003af0:	2300      	movs	r3, #0
 8003af2:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003af4:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003af8:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003afa:	2300      	movs	r3, #0
 8003afc:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003afe:	2302      	movs	r3, #2
 8003b00:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003b02:	2301      	movs	r3, #1
 8003b04:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003b06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8003b0c:	2310      	movs	r3, #16
 8003b0e:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003b10:	2300      	movs	r3, #0
 8003b12:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003b14:	2300      	movs	r3, #0
 8003b16:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8003b18:	230a      	movs	r3, #10
 8003b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8003b1c:	f107 0318 	add.w	r3, r7, #24
 8003b20:	4619      	mov	r1, r3
 8003b22:	4806      	ldr	r0, [pc, #24]	; (8003b3c <MX_SPI1_Init+0xa0>)
 8003b24:	f7fd fddb 	bl	80016de <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8003b28:	2100      	movs	r1, #0
 8003b2a:	4804      	ldr	r0, [pc, #16]	; (8003b3c <MX_SPI1_Init+0xa0>)
 8003b2c:	f7ff ff5b 	bl	80039e6 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003b30:	bf00      	nop
 8003b32:	3740      	adds	r7, #64	; 0x40
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40020000 	.word	0x40020000
 8003b3c:	40013000 	.word	0x40013000

08003b40 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b090      	sub	sp, #64	; 0x40
 8003b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003b46:	f107 0318 	add.w	r3, r7, #24
 8003b4a:	2228      	movs	r2, #40	; 0x28
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 feae 	bl	80048b0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b54:	463b      	mov	r3, r7
 8003b56:	2200      	movs	r2, #0
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	605a      	str	r2, [r3, #4]
 8003b5c:	609a      	str	r2, [r3, #8]
 8003b5e:	60da      	str	r2, [r3, #12]
 8003b60:	611a      	str	r2, [r3, #16]
 8003b62:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8003b64:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003b68:	f7ff ff68 	bl	8003a3c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003b6c:	2002      	movs	r0, #2
 8003b6e:	f7ff ff4d 	bl	8003a0c <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8003b72:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003b76:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003b78:	2302      	movs	r3, #2
 8003b7a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003b80:	2300      	movs	r3, #0
 8003b82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003b84:	2300      	movs	r3, #0
 8003b86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003b88:	2305      	movs	r3, #5
 8003b8a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b8c:	463b      	mov	r3, r7
 8003b8e:	4619      	mov	r1, r3
 8003b90:	4813      	ldr	r0, [pc, #76]	; (8003be0 <MX_SPI2_Init+0xa0>)
 8003b92:	f7fd fbd4 	bl	800133e <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003b96:	2300      	movs	r3, #0
 8003b98:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003b9a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003b9e:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003bac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8003bb2:	2318      	movs	r3, #24
 8003bb4:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8003bbe:	230a      	movs	r3, #10
 8003bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8003bc2:	f107 0318 	add.w	r3, r7, #24
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4806      	ldr	r0, [pc, #24]	; (8003be4 <MX_SPI2_Init+0xa4>)
 8003bca:	f7fd fd88 	bl	80016de <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8003bce:	2100      	movs	r1, #0
 8003bd0:	4804      	ldr	r0, [pc, #16]	; (8003be4 <MX_SPI2_Init+0xa4>)
 8003bd2:	f7ff ff08 	bl	80039e6 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003bd6:	bf00      	nop
 8003bd8:	3740      	adds	r7, #64	; 0x40
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40020400 	.word	0x40020400
 8003be4:	40003800 	.word	0x40003800

08003be8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b090      	sub	sp, #64	; 0x40
 8003bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003bee:	f107 0318 	add.w	r3, r7, #24
 8003bf2:	2228      	movs	r2, #40	; 0x28
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 fe5a 	bl	80048b0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bfc:	463b      	mov	r3, r7
 8003bfe:	2200      	movs	r2, #0
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	605a      	str	r2, [r3, #4]
 8003c04:	609a      	str	r2, [r3, #8]
 8003c06:	60da      	str	r2, [r3, #12]
 8003c08:	611a      	str	r2, [r3, #16]
 8003c0a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8003c0c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003c10:	f7ff ff14 	bl	8003a3c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003c14:	2002      	movs	r0, #2
 8003c16:	f7ff fef9 	bl	8003a0c <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8003c1a:	2338      	movs	r3, #56	; 0x38
 8003c1c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003c1e:	2302      	movs	r3, #2
 8003c20:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003c22:	2303      	movs	r3, #3
 8003c24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003c26:	2300      	movs	r3, #0
 8003c28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8003c2e:	2306      	movs	r3, #6
 8003c30:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c32:	463b      	mov	r3, r7
 8003c34:	4619      	mov	r1, r3
 8003c36:	4813      	ldr	r0, [pc, #76]	; (8003c84 <MX_SPI3_Init+0x9c>)
 8003c38:	f7fd fb81 	bl	800133e <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003c40:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003c44:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003c46:	2300      	movs	r3, #0
 8003c48:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003c52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8003c58:	2308      	movs	r3, #8
 8003c5a:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003c60:	2300      	movs	r3, #0
 8003c62:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8003c64:	230a      	movs	r3, #10
 8003c66:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8003c68:	f107 0318 	add.w	r3, r7, #24
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	4806      	ldr	r0, [pc, #24]	; (8003c88 <MX_SPI3_Init+0xa0>)
 8003c70:	f7fd fd35 	bl	80016de <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8003c74:	2100      	movs	r1, #0
 8003c76:	4804      	ldr	r0, [pc, #16]	; (8003c88 <MX_SPI3_Init+0xa0>)
 8003c78:	f7ff feb5 	bl	80039e6 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003c7c:	bf00      	nop
 8003c7e:	3740      	adds	r7, #64	; 0x40
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40020400 	.word	0x40020400
 8003c88:	40003c00 	.word	0x40003c00

08003c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c92:	2300      	movs	r3, #0
 8003c94:	607b      	str	r3, [r7, #4]
 8003c96:	4b10      	ldr	r3, [pc, #64]	; (8003cd8 <HAL_MspInit+0x4c>)
 8003c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9a:	4a0f      	ldr	r2, [pc, #60]	; (8003cd8 <HAL_MspInit+0x4c>)
 8003c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ca2:	4b0d      	ldr	r3, [pc, #52]	; (8003cd8 <HAL_MspInit+0x4c>)
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003caa:	607b      	str	r3, [r7, #4]
 8003cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cae:	2300      	movs	r3, #0
 8003cb0:	603b      	str	r3, [r7, #0]
 8003cb2:	4b09      	ldr	r3, [pc, #36]	; (8003cd8 <HAL_MspInit+0x4c>)
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	4a08      	ldr	r2, [pc, #32]	; (8003cd8 <HAL_MspInit+0x4c>)
 8003cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8003cbe:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <HAL_MspInit+0x4c>)
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc6:	603b      	str	r3, [r7, #0]
 8003cc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	40023800 	.word	0x40023800

08003cdc <LL_USART_IsActiveFlag_RXNE>:
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0320 	and.w	r3, r3, #32
 8003cec:	2b20      	cmp	r3, #32
 8003cee:	bf0c      	ite	eq
 8003cf0:	2301      	moveq	r3, #1
 8003cf2:	2300      	movne	r3, #0
 8003cf4:	b2db      	uxtb	r3, r3
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <LL_USART_IsActiveFlag_TXE>:
{
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d12:	2b80      	cmp	r3, #128	; 0x80
 8003d14:	bf0c      	ite	eq
 8003d16:	2301      	moveq	r3, #1
 8003d18:	2300      	movne	r3, #0
 8003d1a:	b2db      	uxtb	r3, r3
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <LL_USART_ClearFlag_RXNE>:
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f06f 0220 	mvn.w	r2, #32
 8003d36:	601a      	str	r2, [r3, #0]
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <LL_USART_ReceiveData8>:
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	b2db      	uxtb	r3, r3
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <LL_USART_TransmitData8>:
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
 8003d66:	460b      	mov	r3, r1
 8003d68:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8003d6a:	78fa      	ldrb	r2, [r7, #3]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	605a      	str	r2, [r3, #4]
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003d80:	bf00      	nop
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d8e:	e7fe      	b.n	8003d8e <HardFault_Handler+0x4>

08003d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d94:	e7fe      	b.n	8003d94 <MemManage_Handler+0x4>

08003d96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d96:	b480      	push	{r7}
 8003d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d9a:	e7fe      	b.n	8003d9a <BusFault_Handler+0x4>

08003d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003da0:	e7fe      	b.n	8003da0 <UsageFault_Handler+0x4>

08003da2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003da2:	b480      	push	{r7}
 8003da4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003da6:	bf00      	nop
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003db4:	bf00      	nop
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003dc2:	bf00      	nop
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003dd0:	f7fc fc22 	bl	8000618 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003dd4:	bf00      	nop
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	static unsigned char cnt = 0;

	if(LL_USART_IsActiveFlag_RXNE(UART4))
 8003ddc:	4833      	ldr	r0, [pc, #204]	; (8003eac <UART4_IRQHandler+0xd4>)
 8003dde:	f7ff ff7d 	bl	8003cdc <LL_USART_IsActiveFlag_RXNE>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d05b      	beq.n	8003ea0 <UART4_IRQHandler+0xc8>
	{
		LL_USART_ClearFlag_RXNE(UART4);
 8003de8:	4830      	ldr	r0, [pc, #192]	; (8003eac <UART4_IRQHandler+0xd4>)
 8003dea:	f7ff ff9d 	bl	8003d28 <LL_USART_ClearFlag_RXNE>
		uart4_rx_data = LL_USART_ReceiveData8(UART4);
 8003dee:	482f      	ldr	r0, [pc, #188]	; (8003eac <UART4_IRQHandler+0xd4>)
 8003df0:	f7ff ffa8 	bl	8003d44 <LL_USART_ReceiveData8>
 8003df4:	4603      	mov	r3, r0
 8003df6:	461a      	mov	r2, r3
 8003df8:	4b2d      	ldr	r3, [pc, #180]	; (8003eb0 <UART4_IRQHandler+0xd8>)
 8003dfa:	701a      	strb	r2, [r3, #0]
		uart4_rx_flag = 1;
 8003dfc:	4b2d      	ldr	r3, [pc, #180]	; (8003eb4 <UART4_IRQHandler+0xdc>)
 8003dfe:	2201      	movs	r2, #1
 8003e00:	701a      	strb	r2, [r3, #0]

		//LL_USART_TransmitData8(USART6, uart4_rx_data);

		switch(cnt)
 8003e02:	4b2d      	ldr	r3, [pc, #180]	; (8003eb8 <UART4_IRQHandler+0xe0>)
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	2b23      	cmp	r3, #35	; 0x23
 8003e08:	d02e      	beq.n	8003e68 <UART4_IRQHandler+0x90>
 8003e0a:	2b23      	cmp	r3, #35	; 0x23
 8003e0c:	dc3a      	bgt.n	8003e84 <UART4_IRQHandler+0xac>
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d002      	beq.n	8003e18 <UART4_IRQHandler+0x40>
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d012      	beq.n	8003e3c <UART4_IRQHandler+0x64>
 8003e16:	e035      	b.n	8003e84 <UART4_IRQHandler+0xac>
		{
		case 0:
			if(uart4_rx_data == 0xb5)
 8003e18:	4b25      	ldr	r3, [pc, #148]	; (8003eb0 <UART4_IRQHandler+0xd8>)
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2bb5      	cmp	r3, #181	; 0xb5
 8003e1e:	d141      	bne.n	8003ea4 <UART4_IRQHandler+0xcc>
			{
				m8n_rx_buf[cnt] = uart4_rx_data;
 8003e20:	4b25      	ldr	r3, [pc, #148]	; (8003eb8 <UART4_IRQHandler+0xe0>)
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	461a      	mov	r2, r3
 8003e26:	4b22      	ldr	r3, [pc, #136]	; (8003eb0 <UART4_IRQHandler+0xd8>)
 8003e28:	7819      	ldrb	r1, [r3, #0]
 8003e2a:	4b24      	ldr	r3, [pc, #144]	; (8003ebc <UART4_IRQHandler+0xe4>)
 8003e2c:	5499      	strb	r1, [r3, r2]
				cnt++;
 8003e2e:	4b22      	ldr	r3, [pc, #136]	; (8003eb8 <UART4_IRQHandler+0xe0>)
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	3301      	adds	r3, #1
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	4b20      	ldr	r3, [pc, #128]	; (8003eb8 <UART4_IRQHandler+0xe0>)
 8003e38:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003e3a:	e033      	b.n	8003ea4 <UART4_IRQHandler+0xcc>
		case 1:
			if(uart4_rx_data == 0x62)
 8003e3c:	4b1c      	ldr	r3, [pc, #112]	; (8003eb0 <UART4_IRQHandler+0xd8>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b62      	cmp	r3, #98	; 0x62
 8003e42:	d10d      	bne.n	8003e60 <UART4_IRQHandler+0x88>
			{
				m8n_rx_buf[cnt] = uart4_rx_data;
 8003e44:	4b1c      	ldr	r3, [pc, #112]	; (8003eb8 <UART4_IRQHandler+0xe0>)
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	4b19      	ldr	r3, [pc, #100]	; (8003eb0 <UART4_IRQHandler+0xd8>)
 8003e4c:	7819      	ldrb	r1, [r3, #0]
 8003e4e:	4b1b      	ldr	r3, [pc, #108]	; (8003ebc <UART4_IRQHandler+0xe4>)
 8003e50:	5499      	strb	r1, [r3, r2]
				cnt++;
 8003e52:	4b19      	ldr	r3, [pc, #100]	; (8003eb8 <UART4_IRQHandler+0xe0>)
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	3301      	adds	r3, #1
 8003e58:	b2da      	uxtb	r2, r3
 8003e5a:	4b17      	ldr	r3, [pc, #92]	; (8003eb8 <UART4_IRQHandler+0xe0>)
 8003e5c:	701a      	strb	r2, [r3, #0]
			}
			else
				cnt = 0;
			break;
 8003e5e:	e022      	b.n	8003ea6 <UART4_IRQHandler+0xce>
				cnt = 0;
 8003e60:	4b15      	ldr	r3, [pc, #84]	; (8003eb8 <UART4_IRQHandler+0xe0>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	701a      	strb	r2, [r3, #0]
			break;
 8003e66:	e01e      	b.n	8003ea6 <UART4_IRQHandler+0xce>
		case 35:
			m8n_rx_buf[cnt] = uart4_rx_data;
 8003e68:	4b13      	ldr	r3, [pc, #76]	; (8003eb8 <UART4_IRQHandler+0xe0>)
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	4b10      	ldr	r3, [pc, #64]	; (8003eb0 <UART4_IRQHandler+0xd8>)
 8003e70:	7819      	ldrb	r1, [r3, #0]
 8003e72:	4b12      	ldr	r3, [pc, #72]	; (8003ebc <UART4_IRQHandler+0xe4>)
 8003e74:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 8003e76:	4b10      	ldr	r3, [pc, #64]	; (8003eb8 <UART4_IRQHandler+0xe0>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	701a      	strb	r2, [r3, #0]
			m8n_rx_cplt_flag = 1;
 8003e7c:	4b10      	ldr	r3, [pc, #64]	; (8003ec0 <UART4_IRQHandler+0xe8>)
 8003e7e:	2201      	movs	r2, #1
 8003e80:	701a      	strb	r2, [r3, #0]
			break;
 8003e82:	e010      	b.n	8003ea6 <UART4_IRQHandler+0xce>
		default:
			m8n_rx_buf[cnt] = uart4_rx_data;
 8003e84:	4b0c      	ldr	r3, [pc, #48]	; (8003eb8 <UART4_IRQHandler+0xe0>)
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	461a      	mov	r2, r3
 8003e8a:	4b09      	ldr	r3, [pc, #36]	; (8003eb0 <UART4_IRQHandler+0xd8>)
 8003e8c:	7819      	ldrb	r1, [r3, #0]
 8003e8e:	4b0b      	ldr	r3, [pc, #44]	; (8003ebc <UART4_IRQHandler+0xe4>)
 8003e90:	5499      	strb	r1, [r3, r2]
			cnt++;
 8003e92:	4b09      	ldr	r3, [pc, #36]	; (8003eb8 <UART4_IRQHandler+0xe0>)
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	3301      	adds	r3, #1
 8003e98:	b2da      	uxtb	r2, r3
 8003e9a:	4b07      	ldr	r3, [pc, #28]	; (8003eb8 <UART4_IRQHandler+0xe0>)
 8003e9c:	701a      	strb	r2, [r3, #0]
			break;
 8003e9e:	e002      	b.n	8003ea6 <UART4_IRQHandler+0xce>
		}
	}
 8003ea0:	bf00      	nop
 8003ea2:	e000      	b.n	8003ea6 <UART4_IRQHandler+0xce>
			break;
 8003ea4:	bf00      	nop
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003ea6:	bf00      	nop
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	40004c00 	.word	0x40004c00
 8003eb0:	2000011d 	.word	0x2000011d
 8003eb4:	2000011c 	.word	0x2000011c
 8003eb8:	20000145 	.word	0x20000145
 8003ebc:	20000120 	.word	0x20000120
 8003ec0:	20000144 	.word	0x20000144

08003ec4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(UART5))
 8003ec8:	4810      	ldr	r0, [pc, #64]	; (8003f0c <UART5_IRQHandler+0x48>)
 8003eca:	f7ff ff07 	bl	8003cdc <LL_USART_IsActiveFlag_RXNE>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d019      	beq.n	8003f08 <UART5_IRQHandler+0x44>
	{
		LL_USART_ClearFlag_RXNE(UART5);
 8003ed4:	480d      	ldr	r0, [pc, #52]	; (8003f0c <UART5_IRQHandler+0x48>)
 8003ed6:	f7ff ff27 	bl	8003d28 <LL_USART_ClearFlag_RXNE>
		uart5_rx_data = LL_USART_ReceiveData8(UART5);
 8003eda:	480c      	ldr	r0, [pc, #48]	; (8003f0c <UART5_IRQHandler+0x48>)
 8003edc:	f7ff ff32 	bl	8003d44 <LL_USART_ReceiveData8>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	4b0a      	ldr	r3, [pc, #40]	; (8003f10 <UART5_IRQHandler+0x4c>)
 8003ee6:	701a      	strb	r2, [r3, #0]
		uart5_rx_flag = 1;
 8003ee8:	4b0a      	ldr	r3, [pc, #40]	; (8003f14 <UART5_IRQHandler+0x50>)
 8003eea:	2201      	movs	r2, #1
 8003eec:	701a      	strb	r2, [r3, #0]

		while(!LL_USART_IsActiveFlag_TXE(USART6));
 8003eee:	bf00      	nop
 8003ef0:	4809      	ldr	r0, [pc, #36]	; (8003f18 <UART5_IRQHandler+0x54>)
 8003ef2:	f7ff ff06 	bl	8003d02 <LL_USART_IsActiveFlag_TXE>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0f9      	beq.n	8003ef0 <UART5_IRQHandler+0x2c>
		LL_USART_TransmitData8(USART6, uart5_rx_data);
 8003efc:	4b04      	ldr	r3, [pc, #16]	; (8003f10 <UART5_IRQHandler+0x4c>)
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	4619      	mov	r1, r3
 8003f02:	4805      	ldr	r0, [pc, #20]	; (8003f18 <UART5_IRQHandler+0x54>)
 8003f04:	f7ff ff2b 	bl	8003d5e <LL_USART_TransmitData8>
	}
  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003f08:	bf00      	nop
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	40005000 	.word	0x40005000
 8003f10:	2000011f 	.word	0x2000011f
 8003f14:	2000011e 	.word	0x2000011e
 8003f18:	40011400 	.word	0x40011400

08003f1c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART6))
 8003f20:	480a      	ldr	r0, [pc, #40]	; (8003f4c <USART6_IRQHandler+0x30>)
 8003f22:	f7ff fedb 	bl	8003cdc <LL_USART_IsActiveFlag_RXNE>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00c      	beq.n	8003f46 <USART6_IRQHandler+0x2a>
	{
		LL_USART_ClearFlag_RXNE(USART6);
 8003f2c:	4807      	ldr	r0, [pc, #28]	; (8003f4c <USART6_IRQHandler+0x30>)
 8003f2e:	f7ff fefb 	bl	8003d28 <LL_USART_ClearFlag_RXNE>
		uart6_rx_data = LL_USART_ReceiveData8(USART6);
 8003f32:	4806      	ldr	r0, [pc, #24]	; (8003f4c <USART6_IRQHandler+0x30>)
 8003f34:	f7ff ff06 	bl	8003d44 <LL_USART_ReceiveData8>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	4b04      	ldr	r3, [pc, #16]	; (8003f50 <USART6_IRQHandler+0x34>)
 8003f3e:	701a      	strb	r2, [r3, #0]
		uart6_rx_flag = 1;
 8003f40:	4b04      	ldr	r3, [pc, #16]	; (8003f54 <USART6_IRQHandler+0x38>)
 8003f42:	2201      	movs	r2, #1
 8003f44:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003f46:	bf00      	nop
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	40011400 	.word	0x40011400
 8003f50:	2000011b 	.word	0x2000011b
 8003f54:	2000011a 	.word	0x2000011a

08003f58 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f64:	2300      	movs	r3, #0
 8003f66:	617b      	str	r3, [r7, #20]
 8003f68:	e00a      	b.n	8003f80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003f6a:	f3af 8000 	nop.w
 8003f6e:	4601      	mov	r1, r0
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	1c5a      	adds	r2, r3, #1
 8003f74:	60ba      	str	r2, [r7, #8]
 8003f76:	b2ca      	uxtb	r2, r1
 8003f78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	dbf0      	blt.n	8003f6a <_read+0x12>
	}

return len;
 8003f88:	687b      	ldr	r3, [r7, #4]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3718      	adds	r7, #24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
	return -1;
 8003f9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
 8003fb2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003fba:	605a      	str	r2, [r3, #4]
	return 0;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <_isatty>:

int _isatty(int file)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
	return 1;
 8003fd2:	2301      	movs	r3, #1
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
	return 0;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
	...

08003ffc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004004:	4b11      	ldr	r3, [pc, #68]	; (800404c <_sbrk+0x50>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d102      	bne.n	8004012 <_sbrk+0x16>
		heap_end = &end;
 800400c:	4b0f      	ldr	r3, [pc, #60]	; (800404c <_sbrk+0x50>)
 800400e:	4a10      	ldr	r2, [pc, #64]	; (8004050 <_sbrk+0x54>)
 8004010:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004012:	4b0e      	ldr	r3, [pc, #56]	; (800404c <_sbrk+0x50>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004018:	4b0c      	ldr	r3, [pc, #48]	; (800404c <_sbrk+0x50>)
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4413      	add	r3, r2
 8004020:	466a      	mov	r2, sp
 8004022:	4293      	cmp	r3, r2
 8004024:	d907      	bls.n	8004036 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004026:	f000 fc19 	bl	800485c <__errno>
 800402a:	4603      	mov	r3, r0
 800402c:	220c      	movs	r2, #12
 800402e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8004030:	f04f 33ff 	mov.w	r3, #4294967295
 8004034:	e006      	b.n	8004044 <_sbrk+0x48>
	}

	heap_end += incr;
 8004036:	4b05      	ldr	r3, [pc, #20]	; (800404c <_sbrk+0x50>)
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4413      	add	r3, r2
 800403e:	4a03      	ldr	r2, [pc, #12]	; (800404c <_sbrk+0x50>)
 8004040:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004042:	68fb      	ldr	r3, [r7, #12]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	20000148 	.word	0x20000148
 8004050:	20000160 	.word	0x20000160

08004054 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004058:	4b16      	ldr	r3, [pc, #88]	; (80040b4 <SystemInit+0x60>)
 800405a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405e:	4a15      	ldr	r2, [pc, #84]	; (80040b4 <SystemInit+0x60>)
 8004060:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004064:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004068:	4b13      	ldr	r3, [pc, #76]	; (80040b8 <SystemInit+0x64>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a12      	ldr	r2, [pc, #72]	; (80040b8 <SystemInit+0x64>)
 800406e:	f043 0301 	orr.w	r3, r3, #1
 8004072:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004074:	4b10      	ldr	r3, [pc, #64]	; (80040b8 <SystemInit+0x64>)
 8004076:	2200      	movs	r2, #0
 8004078:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800407a:	4b0f      	ldr	r3, [pc, #60]	; (80040b8 <SystemInit+0x64>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a0e      	ldr	r2, [pc, #56]	; (80040b8 <SystemInit+0x64>)
 8004080:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004088:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800408a:	4b0b      	ldr	r3, [pc, #44]	; (80040b8 <SystemInit+0x64>)
 800408c:	4a0b      	ldr	r2, [pc, #44]	; (80040bc <SystemInit+0x68>)
 800408e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004090:	4b09      	ldr	r3, [pc, #36]	; (80040b8 <SystemInit+0x64>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a08      	ldr	r2, [pc, #32]	; (80040b8 <SystemInit+0x64>)
 8004096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800409a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800409c:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <SystemInit+0x64>)
 800409e:	2200      	movs	r2, #0
 80040a0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80040a2:	4b04      	ldr	r3, [pc, #16]	; (80040b4 <SystemInit+0x60>)
 80040a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80040a8:	609a      	str	r2, [r3, #8]
#endif
}
 80040aa:	bf00      	nop
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	e000ed00 	.word	0xe000ed00
 80040b8:	40023800 	.word	0x40023800
 80040bc:	24003010 	.word	0x24003010

080040c0 <LL_TIM_EnableARRPreload>:
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	601a      	str	r2, [r3, #0]
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <LL_TIM_OC_EnableFast>:
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d01c      	beq.n	800412a <LL_TIM_OC_EnableFast+0x4a>
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	d017      	beq.n	8004126 <LL_TIM_OC_EnableFast+0x46>
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	2b10      	cmp	r3, #16
 80040fa:	d012      	beq.n	8004122 <LL_TIM_OC_EnableFast+0x42>
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	2b40      	cmp	r3, #64	; 0x40
 8004100:	d00d      	beq.n	800411e <LL_TIM_OC_EnableFast+0x3e>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004108:	d007      	beq.n	800411a <LL_TIM_OC_EnableFast+0x3a>
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004110:	d101      	bne.n	8004116 <LL_TIM_OC_EnableFast+0x36>
 8004112:	2305      	movs	r3, #5
 8004114:	e00a      	b.n	800412c <LL_TIM_OC_EnableFast+0x4c>
 8004116:	2306      	movs	r3, #6
 8004118:	e008      	b.n	800412c <LL_TIM_OC_EnableFast+0x4c>
 800411a:	2304      	movs	r3, #4
 800411c:	e006      	b.n	800412c <LL_TIM_OC_EnableFast+0x4c>
 800411e:	2303      	movs	r3, #3
 8004120:	e004      	b.n	800412c <LL_TIM_OC_EnableFast+0x4c>
 8004122:	2302      	movs	r3, #2
 8004124:	e002      	b.n	800412c <LL_TIM_OC_EnableFast+0x4c>
 8004126:	2301      	movs	r3, #1
 8004128:	e000      	b.n	800412c <LL_TIM_OC_EnableFast+0x4c>
 800412a:	2300      	movs	r3, #0
 800412c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	3318      	adds	r3, #24
 8004132:	4619      	mov	r1, r3
 8004134:	7bfb      	ldrb	r3, [r7, #15]
 8004136:	4a0a      	ldr	r2, [pc, #40]	; (8004160 <LL_TIM_OC_EnableFast+0x80>)
 8004138:	5cd3      	ldrb	r3, [r2, r3]
 800413a:	440b      	add	r3, r1
 800413c:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	7bfb      	ldrb	r3, [r7, #15]
 8004144:	4907      	ldr	r1, [pc, #28]	; (8004164 <LL_TIM_OC_EnableFast+0x84>)
 8004146:	5ccb      	ldrb	r3, [r1, r3]
 8004148:	4619      	mov	r1, r3
 800414a:	2304      	movs	r3, #4
 800414c:	408b      	lsls	r3, r1
 800414e:	431a      	orrs	r2, r3
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	601a      	str	r2, [r3, #0]
}
 8004154:	bf00      	nop
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	08005ac4 	.word	0x08005ac4
 8004164:	08005acc 	.word	0x08005acc

08004168 <LL_TIM_OC_EnablePreload>:
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d01c      	beq.n	80041b2 <LL_TIM_OC_EnablePreload+0x4a>
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	2b04      	cmp	r3, #4
 800417c:	d017      	beq.n	80041ae <LL_TIM_OC_EnablePreload+0x46>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b10      	cmp	r3, #16
 8004182:	d012      	beq.n	80041aa <LL_TIM_OC_EnablePreload+0x42>
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	2b40      	cmp	r3, #64	; 0x40
 8004188:	d00d      	beq.n	80041a6 <LL_TIM_OC_EnablePreload+0x3e>
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004190:	d007      	beq.n	80041a2 <LL_TIM_OC_EnablePreload+0x3a>
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004198:	d101      	bne.n	800419e <LL_TIM_OC_EnablePreload+0x36>
 800419a:	2305      	movs	r3, #5
 800419c:	e00a      	b.n	80041b4 <LL_TIM_OC_EnablePreload+0x4c>
 800419e:	2306      	movs	r3, #6
 80041a0:	e008      	b.n	80041b4 <LL_TIM_OC_EnablePreload+0x4c>
 80041a2:	2304      	movs	r3, #4
 80041a4:	e006      	b.n	80041b4 <LL_TIM_OC_EnablePreload+0x4c>
 80041a6:	2303      	movs	r3, #3
 80041a8:	e004      	b.n	80041b4 <LL_TIM_OC_EnablePreload+0x4c>
 80041aa:	2302      	movs	r3, #2
 80041ac:	e002      	b.n	80041b4 <LL_TIM_OC_EnablePreload+0x4c>
 80041ae:	2301      	movs	r3, #1
 80041b0:	e000      	b.n	80041b4 <LL_TIM_OC_EnablePreload+0x4c>
 80041b2:	2300      	movs	r3, #0
 80041b4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3318      	adds	r3, #24
 80041ba:	4619      	mov	r1, r3
 80041bc:	7bfb      	ldrb	r3, [r7, #15]
 80041be:	4a0a      	ldr	r2, [pc, #40]	; (80041e8 <LL_TIM_OC_EnablePreload+0x80>)
 80041c0:	5cd3      	ldrb	r3, [r2, r3]
 80041c2:	440b      	add	r3, r1
 80041c4:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	7bfb      	ldrb	r3, [r7, #15]
 80041cc:	4907      	ldr	r1, [pc, #28]	; (80041ec <LL_TIM_OC_EnablePreload+0x84>)
 80041ce:	5ccb      	ldrb	r3, [r1, r3]
 80041d0:	4619      	mov	r1, r3
 80041d2:	2308      	movs	r3, #8
 80041d4:	408b      	lsls	r3, r1
 80041d6:	431a      	orrs	r2, r3
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	601a      	str	r2, [r3, #0]
}
 80041dc:	bf00      	nop
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	08005ac4 	.word	0x08005ac4
 80041ec:	08005acc 	.word	0x08005acc

080041f0 <LL_TIM_SetClockSource>:
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004202:	f023 0307 	bic.w	r3, r3, #7
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	431a      	orrs	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	609a      	str	r2, [r3, #8]
}
 800420e:	bf00      	nop
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <LL_TIM_SetTriggerOutput>:
{
 800421a:	b480      	push	{r7}
 800421c:	b083      	sub	sp, #12
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
 8004222:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	431a      	orrs	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	605a      	str	r2, [r3, #4]
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <LL_TIM_DisableMasterSlaveMode>:
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	609a      	str	r2, [r3, #8]
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <LL_AHB1_GRP1_EnableClock>:
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004268:	4b08      	ldr	r3, [pc, #32]	; (800428c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800426a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800426c:	4907      	ldr	r1, [pc, #28]	; (800428c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4313      	orrs	r3, r2
 8004272:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004274:	4b05      	ldr	r3, [pc, #20]	; (800428c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004276:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4013      	ands	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800427e:	68fb      	ldr	r3, [r7, #12]
}
 8004280:	bf00      	nop
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	40023800 	.word	0x40023800

08004290 <LL_APB1_GRP1_EnableClock>:
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8004298:	4b08      	ldr	r3, [pc, #32]	; (80042bc <LL_APB1_GRP1_EnableClock+0x2c>)
 800429a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800429c:	4907      	ldr	r1, [pc, #28]	; (80042bc <LL_APB1_GRP1_EnableClock+0x2c>)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80042a4:	4b05      	ldr	r3, [pc, #20]	; (80042bc <LL_APB1_GRP1_EnableClock+0x2c>)
 80042a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4013      	ands	r3, r2
 80042ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80042ae:	68fb      	ldr	r3, [r7, #12]
}
 80042b0:	bf00      	nop
 80042b2:	3714      	adds	r7, #20
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr
 80042bc:	40023800 	.word	0x40023800

080042c0 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b094      	sub	sp, #80	; 0x50
 80042c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80042c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80042ca:	2200      	movs	r2, #0
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	605a      	str	r2, [r3, #4]
 80042d0:	609a      	str	r2, [r3, #8]
 80042d2:	60da      	str	r2, [r3, #12]
 80042d4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80042d6:	f107 031c 	add.w	r3, r7, #28
 80042da:	2220      	movs	r2, #32
 80042dc:	2100      	movs	r1, #0
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 fae6 	bl	80048b0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042e4:	1d3b      	adds	r3, r7, #4
 80042e6:	2200      	movs	r2, #0
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	605a      	str	r2, [r3, #4]
 80042ec:	609a      	str	r2, [r3, #8]
 80042ee:	60da      	str	r2, [r3, #12]
 80042f0:	611a      	str	r2, [r3, #16]
 80042f2:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80042f4:	2002      	movs	r0, #2
 80042f6:	f7ff ffcb 	bl	8004290 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 80042fa:	f240 33e7 	movw	r3, #999	; 0x3e7
 80042fe:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004300:	2300      	movs	r3, #0
 8004302:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 20;
 8004304:	2314      	movs	r3, #20
 8004306:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004308:	2300      	movs	r3, #0
 800430a:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800430c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004310:	4619      	mov	r1, r3
 8004312:	4822      	ldr	r0, [pc, #136]	; (800439c <MX_TIM3_Init+0xdc>)
 8004314:	f7fd faa8 	bl	8001868 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8004318:	4820      	ldr	r0, [pc, #128]	; (800439c <MX_TIM3_Init+0xdc>)
 800431a:	f7ff fed1 	bl	80040c0 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 800431e:	2100      	movs	r1, #0
 8004320:	481e      	ldr	r0, [pc, #120]	; (800439c <MX_TIM3_Init+0xdc>)
 8004322:	f7ff ff65 	bl	80041f0 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8004326:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800432a:	481c      	ldr	r0, [pc, #112]	; (800439c <MX_TIM3_Init+0xdc>)
 800432c:	f7ff ff1c 	bl	8004168 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8004330:	2360      	movs	r3, #96	; 0x60
 8004332:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004334:	2300      	movs	r3, #0
 8004336:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004338:	2300      	movs	r3, #0
 800433a:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 800433c:	230a      	movs	r3, #10
 800433e:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8004340:	2300      	movs	r3, #0
 8004342:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8004344:	f107 031c 	add.w	r3, r7, #28
 8004348:	461a      	mov	r2, r3
 800434a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800434e:	4813      	ldr	r0, [pc, #76]	; (800439c <MX_TIM3_Init+0xdc>)
 8004350:	f7fd fb24 	bl	800199c <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8004354:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004358:	4810      	ldr	r0, [pc, #64]	; (800439c <MX_TIM3_Init+0xdc>)
 800435a:	f7ff fec1 	bl	80040e0 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 800435e:	2100      	movs	r1, #0
 8004360:	480e      	ldr	r0, [pc, #56]	; (800439c <MX_TIM3_Init+0xdc>)
 8004362:	f7ff ff5a 	bl	800421a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8004366:	480d      	ldr	r0, [pc, #52]	; (800439c <MX_TIM3_Init+0xdc>)
 8004368:	f7ff ff6a 	bl	8004240 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800436c:	2002      	movs	r0, #2
 800436e:	f7ff ff77 	bl	8004260 <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8004372:	2302      	movs	r3, #2
 8004374:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004376:	2302      	movs	r3, #2
 8004378:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800437a:	2300      	movs	r3, #0
 800437c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800437e:	2300      	movs	r3, #0
 8004380:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004382:	2300      	movs	r3, #0
 8004384:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8004386:	2302      	movs	r3, #2
 8004388:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800438a:	1d3b      	adds	r3, r7, #4
 800438c:	4619      	mov	r1, r3
 800438e:	4804      	ldr	r0, [pc, #16]	; (80043a0 <MX_TIM3_Init+0xe0>)
 8004390:	f7fc ffd5 	bl	800133e <LL_GPIO_Init>

}
 8004394:	bf00      	nop
 8004396:	3750      	adds	r7, #80	; 0x50
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	40000400 	.word	0x40000400
 80043a0:	40020400 	.word	0x40020400

080043a4 <__NVIC_GetPriorityGrouping>:
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043a8:	4b04      	ldr	r3, [pc, #16]	; (80043bc <__NVIC_GetPriorityGrouping+0x18>)
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	0a1b      	lsrs	r3, r3, #8
 80043ae:	f003 0307 	and.w	r3, r3, #7
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	e000ed00 	.word	0xe000ed00

080043c0 <__NVIC_EnableIRQ>:
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	4603      	mov	r3, r0
 80043c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	db0b      	blt.n	80043ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043d2:	79fb      	ldrb	r3, [r7, #7]
 80043d4:	f003 021f 	and.w	r2, r3, #31
 80043d8:	4907      	ldr	r1, [pc, #28]	; (80043f8 <__NVIC_EnableIRQ+0x38>)
 80043da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043de:	095b      	lsrs	r3, r3, #5
 80043e0:	2001      	movs	r0, #1
 80043e2:	fa00 f202 	lsl.w	r2, r0, r2
 80043e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80043ea:	bf00      	nop
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	e000e100 	.word	0xe000e100

080043fc <__NVIC_SetPriority>:
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	4603      	mov	r3, r0
 8004404:	6039      	str	r1, [r7, #0]
 8004406:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800440c:	2b00      	cmp	r3, #0
 800440e:	db0a      	blt.n	8004426 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	b2da      	uxtb	r2, r3
 8004414:	490c      	ldr	r1, [pc, #48]	; (8004448 <__NVIC_SetPriority+0x4c>)
 8004416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800441a:	0112      	lsls	r2, r2, #4
 800441c:	b2d2      	uxtb	r2, r2
 800441e:	440b      	add	r3, r1
 8004420:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004424:	e00a      	b.n	800443c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	b2da      	uxtb	r2, r3
 800442a:	4908      	ldr	r1, [pc, #32]	; (800444c <__NVIC_SetPriority+0x50>)
 800442c:	79fb      	ldrb	r3, [r7, #7]
 800442e:	f003 030f 	and.w	r3, r3, #15
 8004432:	3b04      	subs	r3, #4
 8004434:	0112      	lsls	r2, r2, #4
 8004436:	b2d2      	uxtb	r2, r2
 8004438:	440b      	add	r3, r1
 800443a:	761a      	strb	r2, [r3, #24]
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr
 8004448:	e000e100 	.word	0xe000e100
 800444c:	e000ed00 	.word	0xe000ed00

08004450 <NVIC_EncodePriority>:
{
 8004450:	b480      	push	{r7}
 8004452:	b089      	sub	sp, #36	; 0x24
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f003 0307 	and.w	r3, r3, #7
 8004462:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	f1c3 0307 	rsb	r3, r3, #7
 800446a:	2b04      	cmp	r3, #4
 800446c:	bf28      	it	cs
 800446e:	2304      	movcs	r3, #4
 8004470:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	3304      	adds	r3, #4
 8004476:	2b06      	cmp	r3, #6
 8004478:	d902      	bls.n	8004480 <NVIC_EncodePriority+0x30>
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	3b03      	subs	r3, #3
 800447e:	e000      	b.n	8004482 <NVIC_EncodePriority+0x32>
 8004480:	2300      	movs	r3, #0
 8004482:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004484:	f04f 32ff 	mov.w	r2, #4294967295
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	fa02 f303 	lsl.w	r3, r2, r3
 800448e:	43da      	mvns	r2, r3
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	401a      	ands	r2, r3
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004498:	f04f 31ff 	mov.w	r1, #4294967295
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	fa01 f303 	lsl.w	r3, r1, r3
 80044a2:	43d9      	mvns	r1, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044a8:	4313      	orrs	r3, r2
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3724      	adds	r7, #36	; 0x24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <LL_USART_Enable>:
{
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	60da      	str	r2, [r3, #12]
}
 80044ca:	bf00      	nop
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <LL_USART_ConfigAsyncMode>:
{
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	615a      	str	r2, [r3, #20]
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
	...

08004504 <LL_AHB1_GRP1_EnableClock>:
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800450c:	4b08      	ldr	r3, [pc, #32]	; (8004530 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800450e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004510:	4907      	ldr	r1, [pc, #28]	; (8004530 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4313      	orrs	r3, r2
 8004516:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004518:	4b05      	ldr	r3, [pc, #20]	; (8004530 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800451a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4013      	ands	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004522:	68fb      	ldr	r3, [r7, #12]
}
 8004524:	bf00      	nop
 8004526:	3714      	adds	r7, #20
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	40023800 	.word	0x40023800

08004534 <LL_APB1_GRP1_EnableClock>:
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800453c:	4b08      	ldr	r3, [pc, #32]	; (8004560 <LL_APB1_GRP1_EnableClock+0x2c>)
 800453e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004540:	4907      	ldr	r1, [pc, #28]	; (8004560 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4313      	orrs	r3, r2
 8004546:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8004548:	4b05      	ldr	r3, [pc, #20]	; (8004560 <LL_APB1_GRP1_EnableClock+0x2c>)
 800454a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4013      	ands	r3, r2
 8004550:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004552:	68fb      	ldr	r3, [r7, #12]
}
 8004554:	bf00      	nop
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	40023800 	.word	0x40023800

08004564 <LL_APB2_GRP1_EnableClock>:
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800456c:	4b08      	ldr	r3, [pc, #32]	; (8004590 <LL_APB2_GRP1_EnableClock+0x2c>)
 800456e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004570:	4907      	ldr	r1, [pc, #28]	; (8004590 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4313      	orrs	r3, r2
 8004576:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004578:	4b05      	ldr	r3, [pc, #20]	; (8004590 <LL_APB2_GRP1_EnableClock+0x2c>)
 800457a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4013      	ands	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004582:	68fb      	ldr	r3, [r7, #12]
}
 8004584:	bf00      	nop
 8004586:	3714      	adds	r7, #20
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	40023800 	.word	0x40023800

08004594 <MX_UART4_Init>:

/* USER CODE END 0 */

/* UART4 init function */
void MX_UART4_Init(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b08e      	sub	sp, #56	; 0x38
 8004598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800459a:	f107 031c 	add.w	r3, r7, #28
 800459e:	2200      	movs	r2, #0
 80045a0:	601a      	str	r2, [r3, #0]
 80045a2:	605a      	str	r2, [r3, #4]
 80045a4:	609a      	str	r2, [r3, #8]
 80045a6:	60da      	str	r2, [r3, #12]
 80045a8:	611a      	str	r2, [r3, #16]
 80045aa:	615a      	str	r2, [r3, #20]
 80045ac:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045ae:	1d3b      	adds	r3, r7, #4
 80045b0:	2200      	movs	r2, #0
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	605a      	str	r2, [r3, #4]
 80045b6:	609a      	str	r2, [r3, #8]
 80045b8:	60da      	str	r2, [r3, #12]
 80045ba:	611a      	str	r2, [r3, #16]
 80045bc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 80045be:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80045c2:	f7ff ffb7 	bl	8004534 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80045c6:	2004      	movs	r0, #4
 80045c8:	f7ff ff9c 	bl	8004504 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 80045cc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80045d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80045d2:	2302      	movs	r3, #2
 80045d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80045d6:	2303      	movs	r3, #3
 80045d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80045da:	2300      	movs	r3, #0
 80045dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80045de:	2300      	movs	r3, #0
 80045e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80045e2:	2308      	movs	r3, #8
 80045e4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045e6:	1d3b      	adds	r3, r7, #4
 80045e8:	4619      	mov	r1, r3
 80045ea:	4819      	ldr	r0, [pc, #100]	; (8004650 <MX_UART4_Init+0xbc>)
 80045ec:	f7fc fea7 	bl	800133e <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80045f0:	f7ff fed8 	bl	80043a4 <__NVIC_GetPriorityGrouping>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2200      	movs	r2, #0
 80045f8:	2100      	movs	r1, #0
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff ff28 	bl	8004450 <NVIC_EncodePriority>
 8004600:	4603      	mov	r3, r0
 8004602:	4619      	mov	r1, r3
 8004604:	2034      	movs	r0, #52	; 0x34
 8004606:	f7ff fef9 	bl	80043fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 800460a:	2034      	movs	r0, #52	; 0x34
 800460c:	f7ff fed8 	bl	80043c0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 8004610:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8004614:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004616:	2300      	movs	r3, #0
 8004618:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800461a:	2300      	movs	r3, #0
 800461c:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800461e:	2300      	movs	r3, #0
 8004620:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004622:	230c      	movs	r3, #12
 8004624:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004626:	2300      	movs	r3, #0
 8004628:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800462a:	2300      	movs	r3, #0
 800462c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 800462e:	f107 031c 	add.w	r3, r7, #28
 8004632:	4619      	mov	r1, r3
 8004634:	4807      	ldr	r0, [pc, #28]	; (8004654 <MX_UART4_Init+0xc0>)
 8004636:	f7fd fdfd 	bl	8002234 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 800463a:	4806      	ldr	r0, [pc, #24]	; (8004654 <MX_UART4_Init+0xc0>)
 800463c:	f7ff ff4b 	bl	80044d6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 8004640:	4804      	ldr	r0, [pc, #16]	; (8004654 <MX_UART4_Init+0xc0>)
 8004642:	f7ff ff38 	bl	80044b6 <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004646:	bf00      	nop
 8004648:	3738      	adds	r7, #56	; 0x38
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	40020800 	.word	0x40020800
 8004654:	40004c00 	.word	0x40004c00

08004658 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b08e      	sub	sp, #56	; 0x38
 800465c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800465e:	f107 031c 	add.w	r3, r7, #28
 8004662:	2200      	movs	r2, #0
 8004664:	601a      	str	r2, [r3, #0]
 8004666:	605a      	str	r2, [r3, #4]
 8004668:	609a      	str	r2, [r3, #8]
 800466a:	60da      	str	r2, [r3, #12]
 800466c:	611a      	str	r2, [r3, #16]
 800466e:	615a      	str	r2, [r3, #20]
 8004670:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004672:	1d3b      	adds	r3, r7, #4
 8004674:	2200      	movs	r2, #0
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	605a      	str	r2, [r3, #4]
 800467a:	609a      	str	r2, [r3, #8]
 800467c:	60da      	str	r2, [r3, #12]
 800467e:	611a      	str	r2, [r3, #16]
 8004680:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 8004682:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004686:	f7ff ff55 	bl	8004534 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800468a:	2004      	movs	r0, #4
 800468c:	f7ff ff3a 	bl	8004504 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8004690:	2008      	movs	r0, #8
 8004692:	f7ff ff37 	bl	8004504 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8004696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800469a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800469c:	2302      	movs	r3, #2
 800469e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80046a0:	2303      	movs	r3, #3
 80046a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80046a4:	2300      	movs	r3, #0
 80046a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80046a8:	2300      	movs	r3, #0
 80046aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80046ac:	2308      	movs	r3, #8
 80046ae:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046b0:	1d3b      	adds	r3, r7, #4
 80046b2:	4619      	mov	r1, r3
 80046b4:	4821      	ldr	r0, [pc, #132]	; (800473c <MX_UART5_Init+0xe4>)
 80046b6:	f7fc fe42 	bl	800133e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80046ba:	2304      	movs	r3, #4
 80046bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80046be:	2302      	movs	r3, #2
 80046c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80046c2:	2303      	movs	r3, #3
 80046c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80046c6:	2300      	movs	r3, #0
 80046c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80046ca:	2300      	movs	r3, #0
 80046cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80046ce:	2308      	movs	r3, #8
 80046d0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80046d2:	1d3b      	adds	r3, r7, #4
 80046d4:	4619      	mov	r1, r3
 80046d6:	481a      	ldr	r0, [pc, #104]	; (8004740 <MX_UART5_Init+0xe8>)
 80046d8:	f7fc fe31 	bl	800133e <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80046dc:	f7ff fe62 	bl	80043a4 <__NVIC_GetPriorityGrouping>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2200      	movs	r2, #0
 80046e4:	2100      	movs	r1, #0
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7ff feb2 	bl	8004450 <NVIC_EncodePriority>
 80046ec:	4603      	mov	r3, r0
 80046ee:	4619      	mov	r1, r3
 80046f0:	2035      	movs	r0, #53	; 0x35
 80046f2:	f7ff fe83 	bl	80043fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 80046f6:	2035      	movs	r0, #53	; 0x35
 80046f8:	f7ff fe62 	bl	80043c0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80046fc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004700:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004702:	2300      	movs	r3, #0
 8004704:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004706:	2300      	movs	r3, #0
 8004708:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800470a:	2300      	movs	r3, #0
 800470c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 800470e:	2304      	movs	r3, #4
 8004710:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004712:	2300      	movs	r3, #0
 8004714:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004716:	2300      	movs	r3, #0
 8004718:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 800471a:	f107 031c 	add.w	r3, r7, #28
 800471e:	4619      	mov	r1, r3
 8004720:	4808      	ldr	r0, [pc, #32]	; (8004744 <MX_UART5_Init+0xec>)
 8004722:	f7fd fd87 	bl	8002234 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 8004726:	4807      	ldr	r0, [pc, #28]	; (8004744 <MX_UART5_Init+0xec>)
 8004728:	f7ff fed5 	bl	80044d6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 800472c:	4805      	ldr	r0, [pc, #20]	; (8004744 <MX_UART5_Init+0xec>)
 800472e:	f7ff fec2 	bl	80044b6 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004732:	bf00      	nop
 8004734:	3738      	adds	r7, #56	; 0x38
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	40020800 	.word	0x40020800
 8004740:	40020c00 	.word	0x40020c00
 8004744:	40005000 	.word	0x40005000

08004748 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b08e      	sub	sp, #56	; 0x38
 800474c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800474e:	f107 031c 	add.w	r3, r7, #28
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	605a      	str	r2, [r3, #4]
 8004758:	609a      	str	r2, [r3, #8]
 800475a:	60da      	str	r2, [r3, #12]
 800475c:	611a      	str	r2, [r3, #16]
 800475e:	615a      	str	r2, [r3, #20]
 8004760:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004762:	1d3b      	adds	r3, r7, #4
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	605a      	str	r2, [r3, #4]
 800476a:	609a      	str	r2, [r3, #8]
 800476c:	60da      	str	r2, [r3, #12]
 800476e:	611a      	str	r2, [r3, #16]
 8004770:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8004772:	2020      	movs	r0, #32
 8004774:	f7ff fef6 	bl	8004564 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8004778:	2004      	movs	r0, #4
 800477a:	f7ff fec3 	bl	8004504 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800477e:	23c0      	movs	r3, #192	; 0xc0
 8004780:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004782:	2302      	movs	r3, #2
 8004784:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004786:	2303      	movs	r3, #3
 8004788:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800478a:	2300      	movs	r3, #0
 800478c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800478e:	2300      	movs	r3, #0
 8004790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8004792:	2308      	movs	r3, #8
 8004794:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004796:	1d3b      	adds	r3, r7, #4
 8004798:	4619      	mov	r1, r3
 800479a:	4819      	ldr	r0, [pc, #100]	; (8004800 <MX_USART6_UART_Init+0xb8>)
 800479c:	f7fc fdcf 	bl	800133e <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80047a0:	f7ff fe00 	bl	80043a4 <__NVIC_GetPriorityGrouping>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2200      	movs	r2, #0
 80047a8:	2100      	movs	r1, #0
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7ff fe50 	bl	8004450 <NVIC_EncodePriority>
 80047b0:	4603      	mov	r3, r0
 80047b2:	4619      	mov	r1, r3
 80047b4:	2047      	movs	r0, #71	; 0x47
 80047b6:	f7ff fe21 	bl	80043fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 80047ba:	2047      	movs	r0, #71	; 0x47
 80047bc:	f7ff fe00 	bl	80043c0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80047c0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80047c4:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80047c6:	2300      	movs	r3, #0
 80047c8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80047ca:	2300      	movs	r3, #0
 80047cc:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80047ce:	2300      	movs	r3, #0
 80047d0:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80047d2:	230c      	movs	r3, #12
 80047d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80047d6:	2300      	movs	r3, #0
 80047d8:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80047da:	2300      	movs	r3, #0
 80047dc:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 80047de:	f107 031c 	add.w	r3, r7, #28
 80047e2:	4619      	mov	r1, r3
 80047e4:	4807      	ldr	r0, [pc, #28]	; (8004804 <MX_USART6_UART_Init+0xbc>)
 80047e6:	f7fd fd25 	bl	8002234 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 80047ea:	4806      	ldr	r0, [pc, #24]	; (8004804 <MX_USART6_UART_Init+0xbc>)
 80047ec:	f7ff fe73 	bl	80044d6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 80047f0:	4804      	ldr	r0, [pc, #16]	; (8004804 <MX_USART6_UART_Init+0xbc>)
 80047f2:	f7ff fe60 	bl	80044b6 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80047f6:	bf00      	nop
 80047f8:	3738      	adds	r7, #56	; 0x38
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	40020800 	.word	0x40020800
 8004804:	40011400 	.word	0x40011400

08004808 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004808:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004840 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800480c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800480e:	e003      	b.n	8004818 <LoopCopyDataInit>

08004810 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004810:	4b0c      	ldr	r3, [pc, #48]	; (8004844 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004812:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004814:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004816:	3104      	adds	r1, #4

08004818 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004818:	480b      	ldr	r0, [pc, #44]	; (8004848 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800481a:	4b0c      	ldr	r3, [pc, #48]	; (800484c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800481c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800481e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004820:	d3f6      	bcc.n	8004810 <CopyDataInit>
  ldr  r2, =_sbss
 8004822:	4a0b      	ldr	r2, [pc, #44]	; (8004850 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004824:	e002      	b.n	800482c <LoopFillZerobss>

08004826 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004826:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004828:	f842 3b04 	str.w	r3, [r2], #4

0800482c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800482c:	4b09      	ldr	r3, [pc, #36]	; (8004854 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800482e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004830:	d3f9      	bcc.n	8004826 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004832:	f7ff fc0f 	bl	8004054 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004836:	f000 f817 	bl	8004868 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800483a:	f7ff f805 	bl	8003848 <main>
  bx  lr    
 800483e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004840:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004844:	08005b7c 	.word	0x08005b7c
  ldr  r0, =_sdata
 8004848:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800484c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8004850:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8004854:	2000015c 	.word	0x2000015c

08004858 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004858:	e7fe      	b.n	8004858 <ADC_IRQHandler>
	...

0800485c <__errno>:
 800485c:	4b01      	ldr	r3, [pc, #4]	; (8004864 <__errno+0x8>)
 800485e:	6818      	ldr	r0, [r3, #0]
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	2000000c 	.word	0x2000000c

08004868 <__libc_init_array>:
 8004868:	b570      	push	{r4, r5, r6, lr}
 800486a:	4d0d      	ldr	r5, [pc, #52]	; (80048a0 <__libc_init_array+0x38>)
 800486c:	4c0d      	ldr	r4, [pc, #52]	; (80048a4 <__libc_init_array+0x3c>)
 800486e:	1b64      	subs	r4, r4, r5
 8004870:	10a4      	asrs	r4, r4, #2
 8004872:	2600      	movs	r6, #0
 8004874:	42a6      	cmp	r6, r4
 8004876:	d109      	bne.n	800488c <__libc_init_array+0x24>
 8004878:	4d0b      	ldr	r5, [pc, #44]	; (80048a8 <__libc_init_array+0x40>)
 800487a:	4c0c      	ldr	r4, [pc, #48]	; (80048ac <__libc_init_array+0x44>)
 800487c:	f001 f824 	bl	80058c8 <_init>
 8004880:	1b64      	subs	r4, r4, r5
 8004882:	10a4      	asrs	r4, r4, #2
 8004884:	2600      	movs	r6, #0
 8004886:	42a6      	cmp	r6, r4
 8004888:	d105      	bne.n	8004896 <__libc_init_array+0x2e>
 800488a:	bd70      	pop	{r4, r5, r6, pc}
 800488c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004890:	4798      	blx	r3
 8004892:	3601      	adds	r6, #1
 8004894:	e7ee      	b.n	8004874 <__libc_init_array+0xc>
 8004896:	f855 3b04 	ldr.w	r3, [r5], #4
 800489a:	4798      	blx	r3
 800489c:	3601      	adds	r6, #1
 800489e:	e7f2      	b.n	8004886 <__libc_init_array+0x1e>
 80048a0:	08005b74 	.word	0x08005b74
 80048a4:	08005b74 	.word	0x08005b74
 80048a8:	08005b74 	.word	0x08005b74
 80048ac:	08005b78 	.word	0x08005b78

080048b0 <memset>:
 80048b0:	4402      	add	r2, r0
 80048b2:	4603      	mov	r3, r0
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d100      	bne.n	80048ba <memset+0xa>
 80048b8:	4770      	bx	lr
 80048ba:	f803 1b01 	strb.w	r1, [r3], #1
 80048be:	e7f9      	b.n	80048b4 <memset+0x4>

080048c0 <iprintf>:
 80048c0:	b40f      	push	{r0, r1, r2, r3}
 80048c2:	4b0a      	ldr	r3, [pc, #40]	; (80048ec <iprintf+0x2c>)
 80048c4:	b513      	push	{r0, r1, r4, lr}
 80048c6:	681c      	ldr	r4, [r3, #0]
 80048c8:	b124      	cbz	r4, 80048d4 <iprintf+0x14>
 80048ca:	69a3      	ldr	r3, [r4, #24]
 80048cc:	b913      	cbnz	r3, 80048d4 <iprintf+0x14>
 80048ce:	4620      	mov	r0, r4
 80048d0:	f000 fa5e 	bl	8004d90 <__sinit>
 80048d4:	ab05      	add	r3, sp, #20
 80048d6:	9a04      	ldr	r2, [sp, #16]
 80048d8:	68a1      	ldr	r1, [r4, #8]
 80048da:	9301      	str	r3, [sp, #4]
 80048dc:	4620      	mov	r0, r4
 80048de:	f000 fc67 	bl	80051b0 <_vfiprintf_r>
 80048e2:	b002      	add	sp, #8
 80048e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048e8:	b004      	add	sp, #16
 80048ea:	4770      	bx	lr
 80048ec:	2000000c 	.word	0x2000000c

080048f0 <_puts_r>:
 80048f0:	b570      	push	{r4, r5, r6, lr}
 80048f2:	460e      	mov	r6, r1
 80048f4:	4605      	mov	r5, r0
 80048f6:	b118      	cbz	r0, 8004900 <_puts_r+0x10>
 80048f8:	6983      	ldr	r3, [r0, #24]
 80048fa:	b90b      	cbnz	r3, 8004900 <_puts_r+0x10>
 80048fc:	f000 fa48 	bl	8004d90 <__sinit>
 8004900:	69ab      	ldr	r3, [r5, #24]
 8004902:	68ac      	ldr	r4, [r5, #8]
 8004904:	b913      	cbnz	r3, 800490c <_puts_r+0x1c>
 8004906:	4628      	mov	r0, r5
 8004908:	f000 fa42 	bl	8004d90 <__sinit>
 800490c:	4b2c      	ldr	r3, [pc, #176]	; (80049c0 <_puts_r+0xd0>)
 800490e:	429c      	cmp	r4, r3
 8004910:	d120      	bne.n	8004954 <_puts_r+0x64>
 8004912:	686c      	ldr	r4, [r5, #4]
 8004914:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004916:	07db      	lsls	r3, r3, #31
 8004918:	d405      	bmi.n	8004926 <_puts_r+0x36>
 800491a:	89a3      	ldrh	r3, [r4, #12]
 800491c:	0598      	lsls	r0, r3, #22
 800491e:	d402      	bmi.n	8004926 <_puts_r+0x36>
 8004920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004922:	f000 fad3 	bl	8004ecc <__retarget_lock_acquire_recursive>
 8004926:	89a3      	ldrh	r3, [r4, #12]
 8004928:	0719      	lsls	r1, r3, #28
 800492a:	d51d      	bpl.n	8004968 <_puts_r+0x78>
 800492c:	6923      	ldr	r3, [r4, #16]
 800492e:	b1db      	cbz	r3, 8004968 <_puts_r+0x78>
 8004930:	3e01      	subs	r6, #1
 8004932:	68a3      	ldr	r3, [r4, #8]
 8004934:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004938:	3b01      	subs	r3, #1
 800493a:	60a3      	str	r3, [r4, #8]
 800493c:	bb39      	cbnz	r1, 800498e <_puts_r+0x9e>
 800493e:	2b00      	cmp	r3, #0
 8004940:	da38      	bge.n	80049b4 <_puts_r+0xc4>
 8004942:	4622      	mov	r2, r4
 8004944:	210a      	movs	r1, #10
 8004946:	4628      	mov	r0, r5
 8004948:	f000 f848 	bl	80049dc <__swbuf_r>
 800494c:	3001      	adds	r0, #1
 800494e:	d011      	beq.n	8004974 <_puts_r+0x84>
 8004950:	250a      	movs	r5, #10
 8004952:	e011      	b.n	8004978 <_puts_r+0x88>
 8004954:	4b1b      	ldr	r3, [pc, #108]	; (80049c4 <_puts_r+0xd4>)
 8004956:	429c      	cmp	r4, r3
 8004958:	d101      	bne.n	800495e <_puts_r+0x6e>
 800495a:	68ac      	ldr	r4, [r5, #8]
 800495c:	e7da      	b.n	8004914 <_puts_r+0x24>
 800495e:	4b1a      	ldr	r3, [pc, #104]	; (80049c8 <_puts_r+0xd8>)
 8004960:	429c      	cmp	r4, r3
 8004962:	bf08      	it	eq
 8004964:	68ec      	ldreq	r4, [r5, #12]
 8004966:	e7d5      	b.n	8004914 <_puts_r+0x24>
 8004968:	4621      	mov	r1, r4
 800496a:	4628      	mov	r0, r5
 800496c:	f000 f888 	bl	8004a80 <__swsetup_r>
 8004970:	2800      	cmp	r0, #0
 8004972:	d0dd      	beq.n	8004930 <_puts_r+0x40>
 8004974:	f04f 35ff 	mov.w	r5, #4294967295
 8004978:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800497a:	07da      	lsls	r2, r3, #31
 800497c:	d405      	bmi.n	800498a <_puts_r+0x9a>
 800497e:	89a3      	ldrh	r3, [r4, #12]
 8004980:	059b      	lsls	r3, r3, #22
 8004982:	d402      	bmi.n	800498a <_puts_r+0x9a>
 8004984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004986:	f000 faa2 	bl	8004ece <__retarget_lock_release_recursive>
 800498a:	4628      	mov	r0, r5
 800498c:	bd70      	pop	{r4, r5, r6, pc}
 800498e:	2b00      	cmp	r3, #0
 8004990:	da04      	bge.n	800499c <_puts_r+0xac>
 8004992:	69a2      	ldr	r2, [r4, #24]
 8004994:	429a      	cmp	r2, r3
 8004996:	dc06      	bgt.n	80049a6 <_puts_r+0xb6>
 8004998:	290a      	cmp	r1, #10
 800499a:	d004      	beq.n	80049a6 <_puts_r+0xb6>
 800499c:	6823      	ldr	r3, [r4, #0]
 800499e:	1c5a      	adds	r2, r3, #1
 80049a0:	6022      	str	r2, [r4, #0]
 80049a2:	7019      	strb	r1, [r3, #0]
 80049a4:	e7c5      	b.n	8004932 <_puts_r+0x42>
 80049a6:	4622      	mov	r2, r4
 80049a8:	4628      	mov	r0, r5
 80049aa:	f000 f817 	bl	80049dc <__swbuf_r>
 80049ae:	3001      	adds	r0, #1
 80049b0:	d1bf      	bne.n	8004932 <_puts_r+0x42>
 80049b2:	e7df      	b.n	8004974 <_puts_r+0x84>
 80049b4:	6823      	ldr	r3, [r4, #0]
 80049b6:	250a      	movs	r5, #10
 80049b8:	1c5a      	adds	r2, r3, #1
 80049ba:	6022      	str	r2, [r4, #0]
 80049bc:	701d      	strb	r5, [r3, #0]
 80049be:	e7db      	b.n	8004978 <_puts_r+0x88>
 80049c0:	08005af8 	.word	0x08005af8
 80049c4:	08005b18 	.word	0x08005b18
 80049c8:	08005ad8 	.word	0x08005ad8

080049cc <puts>:
 80049cc:	4b02      	ldr	r3, [pc, #8]	; (80049d8 <puts+0xc>)
 80049ce:	4601      	mov	r1, r0
 80049d0:	6818      	ldr	r0, [r3, #0]
 80049d2:	f7ff bf8d 	b.w	80048f0 <_puts_r>
 80049d6:	bf00      	nop
 80049d8:	2000000c 	.word	0x2000000c

080049dc <__swbuf_r>:
 80049dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049de:	460e      	mov	r6, r1
 80049e0:	4614      	mov	r4, r2
 80049e2:	4605      	mov	r5, r0
 80049e4:	b118      	cbz	r0, 80049ee <__swbuf_r+0x12>
 80049e6:	6983      	ldr	r3, [r0, #24]
 80049e8:	b90b      	cbnz	r3, 80049ee <__swbuf_r+0x12>
 80049ea:	f000 f9d1 	bl	8004d90 <__sinit>
 80049ee:	4b21      	ldr	r3, [pc, #132]	; (8004a74 <__swbuf_r+0x98>)
 80049f0:	429c      	cmp	r4, r3
 80049f2:	d12b      	bne.n	8004a4c <__swbuf_r+0x70>
 80049f4:	686c      	ldr	r4, [r5, #4]
 80049f6:	69a3      	ldr	r3, [r4, #24]
 80049f8:	60a3      	str	r3, [r4, #8]
 80049fa:	89a3      	ldrh	r3, [r4, #12]
 80049fc:	071a      	lsls	r2, r3, #28
 80049fe:	d52f      	bpl.n	8004a60 <__swbuf_r+0x84>
 8004a00:	6923      	ldr	r3, [r4, #16]
 8004a02:	b36b      	cbz	r3, 8004a60 <__swbuf_r+0x84>
 8004a04:	6923      	ldr	r3, [r4, #16]
 8004a06:	6820      	ldr	r0, [r4, #0]
 8004a08:	1ac0      	subs	r0, r0, r3
 8004a0a:	6963      	ldr	r3, [r4, #20]
 8004a0c:	b2f6      	uxtb	r6, r6
 8004a0e:	4283      	cmp	r3, r0
 8004a10:	4637      	mov	r7, r6
 8004a12:	dc04      	bgt.n	8004a1e <__swbuf_r+0x42>
 8004a14:	4621      	mov	r1, r4
 8004a16:	4628      	mov	r0, r5
 8004a18:	f000 f926 	bl	8004c68 <_fflush_r>
 8004a1c:	bb30      	cbnz	r0, 8004a6c <__swbuf_r+0x90>
 8004a1e:	68a3      	ldr	r3, [r4, #8]
 8004a20:	3b01      	subs	r3, #1
 8004a22:	60a3      	str	r3, [r4, #8]
 8004a24:	6823      	ldr	r3, [r4, #0]
 8004a26:	1c5a      	adds	r2, r3, #1
 8004a28:	6022      	str	r2, [r4, #0]
 8004a2a:	701e      	strb	r6, [r3, #0]
 8004a2c:	6963      	ldr	r3, [r4, #20]
 8004a2e:	3001      	adds	r0, #1
 8004a30:	4283      	cmp	r3, r0
 8004a32:	d004      	beq.n	8004a3e <__swbuf_r+0x62>
 8004a34:	89a3      	ldrh	r3, [r4, #12]
 8004a36:	07db      	lsls	r3, r3, #31
 8004a38:	d506      	bpl.n	8004a48 <__swbuf_r+0x6c>
 8004a3a:	2e0a      	cmp	r6, #10
 8004a3c:	d104      	bne.n	8004a48 <__swbuf_r+0x6c>
 8004a3e:	4621      	mov	r1, r4
 8004a40:	4628      	mov	r0, r5
 8004a42:	f000 f911 	bl	8004c68 <_fflush_r>
 8004a46:	b988      	cbnz	r0, 8004a6c <__swbuf_r+0x90>
 8004a48:	4638      	mov	r0, r7
 8004a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a4c:	4b0a      	ldr	r3, [pc, #40]	; (8004a78 <__swbuf_r+0x9c>)
 8004a4e:	429c      	cmp	r4, r3
 8004a50:	d101      	bne.n	8004a56 <__swbuf_r+0x7a>
 8004a52:	68ac      	ldr	r4, [r5, #8]
 8004a54:	e7cf      	b.n	80049f6 <__swbuf_r+0x1a>
 8004a56:	4b09      	ldr	r3, [pc, #36]	; (8004a7c <__swbuf_r+0xa0>)
 8004a58:	429c      	cmp	r4, r3
 8004a5a:	bf08      	it	eq
 8004a5c:	68ec      	ldreq	r4, [r5, #12]
 8004a5e:	e7ca      	b.n	80049f6 <__swbuf_r+0x1a>
 8004a60:	4621      	mov	r1, r4
 8004a62:	4628      	mov	r0, r5
 8004a64:	f000 f80c 	bl	8004a80 <__swsetup_r>
 8004a68:	2800      	cmp	r0, #0
 8004a6a:	d0cb      	beq.n	8004a04 <__swbuf_r+0x28>
 8004a6c:	f04f 37ff 	mov.w	r7, #4294967295
 8004a70:	e7ea      	b.n	8004a48 <__swbuf_r+0x6c>
 8004a72:	bf00      	nop
 8004a74:	08005af8 	.word	0x08005af8
 8004a78:	08005b18 	.word	0x08005b18
 8004a7c:	08005ad8 	.word	0x08005ad8

08004a80 <__swsetup_r>:
 8004a80:	4b32      	ldr	r3, [pc, #200]	; (8004b4c <__swsetup_r+0xcc>)
 8004a82:	b570      	push	{r4, r5, r6, lr}
 8004a84:	681d      	ldr	r5, [r3, #0]
 8004a86:	4606      	mov	r6, r0
 8004a88:	460c      	mov	r4, r1
 8004a8a:	b125      	cbz	r5, 8004a96 <__swsetup_r+0x16>
 8004a8c:	69ab      	ldr	r3, [r5, #24]
 8004a8e:	b913      	cbnz	r3, 8004a96 <__swsetup_r+0x16>
 8004a90:	4628      	mov	r0, r5
 8004a92:	f000 f97d 	bl	8004d90 <__sinit>
 8004a96:	4b2e      	ldr	r3, [pc, #184]	; (8004b50 <__swsetup_r+0xd0>)
 8004a98:	429c      	cmp	r4, r3
 8004a9a:	d10f      	bne.n	8004abc <__swsetup_r+0x3c>
 8004a9c:	686c      	ldr	r4, [r5, #4]
 8004a9e:	89a3      	ldrh	r3, [r4, #12]
 8004aa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004aa4:	0719      	lsls	r1, r3, #28
 8004aa6:	d42c      	bmi.n	8004b02 <__swsetup_r+0x82>
 8004aa8:	06dd      	lsls	r5, r3, #27
 8004aaa:	d411      	bmi.n	8004ad0 <__swsetup_r+0x50>
 8004aac:	2309      	movs	r3, #9
 8004aae:	6033      	str	r3, [r6, #0]
 8004ab0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004ab4:	81a3      	strh	r3, [r4, #12]
 8004ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8004aba:	e03e      	b.n	8004b3a <__swsetup_r+0xba>
 8004abc:	4b25      	ldr	r3, [pc, #148]	; (8004b54 <__swsetup_r+0xd4>)
 8004abe:	429c      	cmp	r4, r3
 8004ac0:	d101      	bne.n	8004ac6 <__swsetup_r+0x46>
 8004ac2:	68ac      	ldr	r4, [r5, #8]
 8004ac4:	e7eb      	b.n	8004a9e <__swsetup_r+0x1e>
 8004ac6:	4b24      	ldr	r3, [pc, #144]	; (8004b58 <__swsetup_r+0xd8>)
 8004ac8:	429c      	cmp	r4, r3
 8004aca:	bf08      	it	eq
 8004acc:	68ec      	ldreq	r4, [r5, #12]
 8004ace:	e7e6      	b.n	8004a9e <__swsetup_r+0x1e>
 8004ad0:	0758      	lsls	r0, r3, #29
 8004ad2:	d512      	bpl.n	8004afa <__swsetup_r+0x7a>
 8004ad4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ad6:	b141      	cbz	r1, 8004aea <__swsetup_r+0x6a>
 8004ad8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004adc:	4299      	cmp	r1, r3
 8004ade:	d002      	beq.n	8004ae6 <__swsetup_r+0x66>
 8004ae0:	4630      	mov	r0, r6
 8004ae2:	f000 fa5b 	bl	8004f9c <_free_r>
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	6363      	str	r3, [r4, #52]	; 0x34
 8004aea:	89a3      	ldrh	r3, [r4, #12]
 8004aec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004af0:	81a3      	strh	r3, [r4, #12]
 8004af2:	2300      	movs	r3, #0
 8004af4:	6063      	str	r3, [r4, #4]
 8004af6:	6923      	ldr	r3, [r4, #16]
 8004af8:	6023      	str	r3, [r4, #0]
 8004afa:	89a3      	ldrh	r3, [r4, #12]
 8004afc:	f043 0308 	orr.w	r3, r3, #8
 8004b00:	81a3      	strh	r3, [r4, #12]
 8004b02:	6923      	ldr	r3, [r4, #16]
 8004b04:	b94b      	cbnz	r3, 8004b1a <__swsetup_r+0x9a>
 8004b06:	89a3      	ldrh	r3, [r4, #12]
 8004b08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b10:	d003      	beq.n	8004b1a <__swsetup_r+0x9a>
 8004b12:	4621      	mov	r1, r4
 8004b14:	4630      	mov	r0, r6
 8004b16:	f000 fa01 	bl	8004f1c <__smakebuf_r>
 8004b1a:	89a0      	ldrh	r0, [r4, #12]
 8004b1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b20:	f010 0301 	ands.w	r3, r0, #1
 8004b24:	d00a      	beq.n	8004b3c <__swsetup_r+0xbc>
 8004b26:	2300      	movs	r3, #0
 8004b28:	60a3      	str	r3, [r4, #8]
 8004b2a:	6963      	ldr	r3, [r4, #20]
 8004b2c:	425b      	negs	r3, r3
 8004b2e:	61a3      	str	r3, [r4, #24]
 8004b30:	6923      	ldr	r3, [r4, #16]
 8004b32:	b943      	cbnz	r3, 8004b46 <__swsetup_r+0xc6>
 8004b34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b38:	d1ba      	bne.n	8004ab0 <__swsetup_r+0x30>
 8004b3a:	bd70      	pop	{r4, r5, r6, pc}
 8004b3c:	0781      	lsls	r1, r0, #30
 8004b3e:	bf58      	it	pl
 8004b40:	6963      	ldrpl	r3, [r4, #20]
 8004b42:	60a3      	str	r3, [r4, #8]
 8004b44:	e7f4      	b.n	8004b30 <__swsetup_r+0xb0>
 8004b46:	2000      	movs	r0, #0
 8004b48:	e7f7      	b.n	8004b3a <__swsetup_r+0xba>
 8004b4a:	bf00      	nop
 8004b4c:	2000000c 	.word	0x2000000c
 8004b50:	08005af8 	.word	0x08005af8
 8004b54:	08005b18 	.word	0x08005b18
 8004b58:	08005ad8 	.word	0x08005ad8

08004b5c <__sflush_r>:
 8004b5c:	898a      	ldrh	r2, [r1, #12]
 8004b5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b62:	4605      	mov	r5, r0
 8004b64:	0710      	lsls	r0, r2, #28
 8004b66:	460c      	mov	r4, r1
 8004b68:	d458      	bmi.n	8004c1c <__sflush_r+0xc0>
 8004b6a:	684b      	ldr	r3, [r1, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	dc05      	bgt.n	8004b7c <__sflush_r+0x20>
 8004b70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	dc02      	bgt.n	8004b7c <__sflush_r+0x20>
 8004b76:	2000      	movs	r0, #0
 8004b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b7e:	2e00      	cmp	r6, #0
 8004b80:	d0f9      	beq.n	8004b76 <__sflush_r+0x1a>
 8004b82:	2300      	movs	r3, #0
 8004b84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b88:	682f      	ldr	r7, [r5, #0]
 8004b8a:	602b      	str	r3, [r5, #0]
 8004b8c:	d032      	beq.n	8004bf4 <__sflush_r+0x98>
 8004b8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b90:	89a3      	ldrh	r3, [r4, #12]
 8004b92:	075a      	lsls	r2, r3, #29
 8004b94:	d505      	bpl.n	8004ba2 <__sflush_r+0x46>
 8004b96:	6863      	ldr	r3, [r4, #4]
 8004b98:	1ac0      	subs	r0, r0, r3
 8004b9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b9c:	b10b      	cbz	r3, 8004ba2 <__sflush_r+0x46>
 8004b9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ba0:	1ac0      	subs	r0, r0, r3
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ba8:	6a21      	ldr	r1, [r4, #32]
 8004baa:	4628      	mov	r0, r5
 8004bac:	47b0      	blx	r6
 8004bae:	1c43      	adds	r3, r0, #1
 8004bb0:	89a3      	ldrh	r3, [r4, #12]
 8004bb2:	d106      	bne.n	8004bc2 <__sflush_r+0x66>
 8004bb4:	6829      	ldr	r1, [r5, #0]
 8004bb6:	291d      	cmp	r1, #29
 8004bb8:	d82c      	bhi.n	8004c14 <__sflush_r+0xb8>
 8004bba:	4a2a      	ldr	r2, [pc, #168]	; (8004c64 <__sflush_r+0x108>)
 8004bbc:	40ca      	lsrs	r2, r1
 8004bbe:	07d6      	lsls	r6, r2, #31
 8004bc0:	d528      	bpl.n	8004c14 <__sflush_r+0xb8>
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	6062      	str	r2, [r4, #4]
 8004bc6:	04d9      	lsls	r1, r3, #19
 8004bc8:	6922      	ldr	r2, [r4, #16]
 8004bca:	6022      	str	r2, [r4, #0]
 8004bcc:	d504      	bpl.n	8004bd8 <__sflush_r+0x7c>
 8004bce:	1c42      	adds	r2, r0, #1
 8004bd0:	d101      	bne.n	8004bd6 <__sflush_r+0x7a>
 8004bd2:	682b      	ldr	r3, [r5, #0]
 8004bd4:	b903      	cbnz	r3, 8004bd8 <__sflush_r+0x7c>
 8004bd6:	6560      	str	r0, [r4, #84]	; 0x54
 8004bd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bda:	602f      	str	r7, [r5, #0]
 8004bdc:	2900      	cmp	r1, #0
 8004bde:	d0ca      	beq.n	8004b76 <__sflush_r+0x1a>
 8004be0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004be4:	4299      	cmp	r1, r3
 8004be6:	d002      	beq.n	8004bee <__sflush_r+0x92>
 8004be8:	4628      	mov	r0, r5
 8004bea:	f000 f9d7 	bl	8004f9c <_free_r>
 8004bee:	2000      	movs	r0, #0
 8004bf0:	6360      	str	r0, [r4, #52]	; 0x34
 8004bf2:	e7c1      	b.n	8004b78 <__sflush_r+0x1c>
 8004bf4:	6a21      	ldr	r1, [r4, #32]
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	4628      	mov	r0, r5
 8004bfa:	47b0      	blx	r6
 8004bfc:	1c41      	adds	r1, r0, #1
 8004bfe:	d1c7      	bne.n	8004b90 <__sflush_r+0x34>
 8004c00:	682b      	ldr	r3, [r5, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d0c4      	beq.n	8004b90 <__sflush_r+0x34>
 8004c06:	2b1d      	cmp	r3, #29
 8004c08:	d001      	beq.n	8004c0e <__sflush_r+0xb2>
 8004c0a:	2b16      	cmp	r3, #22
 8004c0c:	d101      	bne.n	8004c12 <__sflush_r+0xb6>
 8004c0e:	602f      	str	r7, [r5, #0]
 8004c10:	e7b1      	b.n	8004b76 <__sflush_r+0x1a>
 8004c12:	89a3      	ldrh	r3, [r4, #12]
 8004c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c18:	81a3      	strh	r3, [r4, #12]
 8004c1a:	e7ad      	b.n	8004b78 <__sflush_r+0x1c>
 8004c1c:	690f      	ldr	r7, [r1, #16]
 8004c1e:	2f00      	cmp	r7, #0
 8004c20:	d0a9      	beq.n	8004b76 <__sflush_r+0x1a>
 8004c22:	0793      	lsls	r3, r2, #30
 8004c24:	680e      	ldr	r6, [r1, #0]
 8004c26:	bf08      	it	eq
 8004c28:	694b      	ldreq	r3, [r1, #20]
 8004c2a:	600f      	str	r7, [r1, #0]
 8004c2c:	bf18      	it	ne
 8004c2e:	2300      	movne	r3, #0
 8004c30:	eba6 0807 	sub.w	r8, r6, r7
 8004c34:	608b      	str	r3, [r1, #8]
 8004c36:	f1b8 0f00 	cmp.w	r8, #0
 8004c3a:	dd9c      	ble.n	8004b76 <__sflush_r+0x1a>
 8004c3c:	6a21      	ldr	r1, [r4, #32]
 8004c3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004c40:	4643      	mov	r3, r8
 8004c42:	463a      	mov	r2, r7
 8004c44:	4628      	mov	r0, r5
 8004c46:	47b0      	blx	r6
 8004c48:	2800      	cmp	r0, #0
 8004c4a:	dc06      	bgt.n	8004c5a <__sflush_r+0xfe>
 8004c4c:	89a3      	ldrh	r3, [r4, #12]
 8004c4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c52:	81a3      	strh	r3, [r4, #12]
 8004c54:	f04f 30ff 	mov.w	r0, #4294967295
 8004c58:	e78e      	b.n	8004b78 <__sflush_r+0x1c>
 8004c5a:	4407      	add	r7, r0
 8004c5c:	eba8 0800 	sub.w	r8, r8, r0
 8004c60:	e7e9      	b.n	8004c36 <__sflush_r+0xda>
 8004c62:	bf00      	nop
 8004c64:	20400001 	.word	0x20400001

08004c68 <_fflush_r>:
 8004c68:	b538      	push	{r3, r4, r5, lr}
 8004c6a:	690b      	ldr	r3, [r1, #16]
 8004c6c:	4605      	mov	r5, r0
 8004c6e:	460c      	mov	r4, r1
 8004c70:	b913      	cbnz	r3, 8004c78 <_fflush_r+0x10>
 8004c72:	2500      	movs	r5, #0
 8004c74:	4628      	mov	r0, r5
 8004c76:	bd38      	pop	{r3, r4, r5, pc}
 8004c78:	b118      	cbz	r0, 8004c82 <_fflush_r+0x1a>
 8004c7a:	6983      	ldr	r3, [r0, #24]
 8004c7c:	b90b      	cbnz	r3, 8004c82 <_fflush_r+0x1a>
 8004c7e:	f000 f887 	bl	8004d90 <__sinit>
 8004c82:	4b14      	ldr	r3, [pc, #80]	; (8004cd4 <_fflush_r+0x6c>)
 8004c84:	429c      	cmp	r4, r3
 8004c86:	d11b      	bne.n	8004cc0 <_fflush_r+0x58>
 8004c88:	686c      	ldr	r4, [r5, #4]
 8004c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d0ef      	beq.n	8004c72 <_fflush_r+0xa>
 8004c92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c94:	07d0      	lsls	r0, r2, #31
 8004c96:	d404      	bmi.n	8004ca2 <_fflush_r+0x3a>
 8004c98:	0599      	lsls	r1, r3, #22
 8004c9a:	d402      	bmi.n	8004ca2 <_fflush_r+0x3a>
 8004c9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c9e:	f000 f915 	bl	8004ecc <__retarget_lock_acquire_recursive>
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	4621      	mov	r1, r4
 8004ca6:	f7ff ff59 	bl	8004b5c <__sflush_r>
 8004caa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cac:	07da      	lsls	r2, r3, #31
 8004cae:	4605      	mov	r5, r0
 8004cb0:	d4e0      	bmi.n	8004c74 <_fflush_r+0xc>
 8004cb2:	89a3      	ldrh	r3, [r4, #12]
 8004cb4:	059b      	lsls	r3, r3, #22
 8004cb6:	d4dd      	bmi.n	8004c74 <_fflush_r+0xc>
 8004cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cba:	f000 f908 	bl	8004ece <__retarget_lock_release_recursive>
 8004cbe:	e7d9      	b.n	8004c74 <_fflush_r+0xc>
 8004cc0:	4b05      	ldr	r3, [pc, #20]	; (8004cd8 <_fflush_r+0x70>)
 8004cc2:	429c      	cmp	r4, r3
 8004cc4:	d101      	bne.n	8004cca <_fflush_r+0x62>
 8004cc6:	68ac      	ldr	r4, [r5, #8]
 8004cc8:	e7df      	b.n	8004c8a <_fflush_r+0x22>
 8004cca:	4b04      	ldr	r3, [pc, #16]	; (8004cdc <_fflush_r+0x74>)
 8004ccc:	429c      	cmp	r4, r3
 8004cce:	bf08      	it	eq
 8004cd0:	68ec      	ldreq	r4, [r5, #12]
 8004cd2:	e7da      	b.n	8004c8a <_fflush_r+0x22>
 8004cd4:	08005af8 	.word	0x08005af8
 8004cd8:	08005b18 	.word	0x08005b18
 8004cdc:	08005ad8 	.word	0x08005ad8

08004ce0 <std>:
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	b510      	push	{r4, lr}
 8004ce4:	4604      	mov	r4, r0
 8004ce6:	e9c0 3300 	strd	r3, r3, [r0]
 8004cea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004cee:	6083      	str	r3, [r0, #8]
 8004cf0:	8181      	strh	r1, [r0, #12]
 8004cf2:	6643      	str	r3, [r0, #100]	; 0x64
 8004cf4:	81c2      	strh	r2, [r0, #14]
 8004cf6:	6183      	str	r3, [r0, #24]
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	2208      	movs	r2, #8
 8004cfc:	305c      	adds	r0, #92	; 0x5c
 8004cfe:	f7ff fdd7 	bl	80048b0 <memset>
 8004d02:	4b05      	ldr	r3, [pc, #20]	; (8004d18 <std+0x38>)
 8004d04:	6263      	str	r3, [r4, #36]	; 0x24
 8004d06:	4b05      	ldr	r3, [pc, #20]	; (8004d1c <std+0x3c>)
 8004d08:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d0a:	4b05      	ldr	r3, [pc, #20]	; (8004d20 <std+0x40>)
 8004d0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d0e:	4b05      	ldr	r3, [pc, #20]	; (8004d24 <std+0x44>)
 8004d10:	6224      	str	r4, [r4, #32]
 8004d12:	6323      	str	r3, [r4, #48]	; 0x30
 8004d14:	bd10      	pop	{r4, pc}
 8004d16:	bf00      	nop
 8004d18:	08005759 	.word	0x08005759
 8004d1c:	0800577b 	.word	0x0800577b
 8004d20:	080057b3 	.word	0x080057b3
 8004d24:	080057d7 	.word	0x080057d7

08004d28 <_cleanup_r>:
 8004d28:	4901      	ldr	r1, [pc, #4]	; (8004d30 <_cleanup_r+0x8>)
 8004d2a:	f000 b8af 	b.w	8004e8c <_fwalk_reent>
 8004d2e:	bf00      	nop
 8004d30:	08004c69 	.word	0x08004c69

08004d34 <__sfmoreglue>:
 8004d34:	b570      	push	{r4, r5, r6, lr}
 8004d36:	2268      	movs	r2, #104	; 0x68
 8004d38:	1e4d      	subs	r5, r1, #1
 8004d3a:	4355      	muls	r5, r2
 8004d3c:	460e      	mov	r6, r1
 8004d3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004d42:	f000 f997 	bl	8005074 <_malloc_r>
 8004d46:	4604      	mov	r4, r0
 8004d48:	b140      	cbz	r0, 8004d5c <__sfmoreglue+0x28>
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	e9c0 1600 	strd	r1, r6, [r0]
 8004d50:	300c      	adds	r0, #12
 8004d52:	60a0      	str	r0, [r4, #8]
 8004d54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004d58:	f7ff fdaa 	bl	80048b0 <memset>
 8004d5c:	4620      	mov	r0, r4
 8004d5e:	bd70      	pop	{r4, r5, r6, pc}

08004d60 <__sfp_lock_acquire>:
 8004d60:	4801      	ldr	r0, [pc, #4]	; (8004d68 <__sfp_lock_acquire+0x8>)
 8004d62:	f000 b8b3 	b.w	8004ecc <__retarget_lock_acquire_recursive>
 8004d66:	bf00      	nop
 8004d68:	2000014d 	.word	0x2000014d

08004d6c <__sfp_lock_release>:
 8004d6c:	4801      	ldr	r0, [pc, #4]	; (8004d74 <__sfp_lock_release+0x8>)
 8004d6e:	f000 b8ae 	b.w	8004ece <__retarget_lock_release_recursive>
 8004d72:	bf00      	nop
 8004d74:	2000014d 	.word	0x2000014d

08004d78 <__sinit_lock_acquire>:
 8004d78:	4801      	ldr	r0, [pc, #4]	; (8004d80 <__sinit_lock_acquire+0x8>)
 8004d7a:	f000 b8a7 	b.w	8004ecc <__retarget_lock_acquire_recursive>
 8004d7e:	bf00      	nop
 8004d80:	2000014e 	.word	0x2000014e

08004d84 <__sinit_lock_release>:
 8004d84:	4801      	ldr	r0, [pc, #4]	; (8004d8c <__sinit_lock_release+0x8>)
 8004d86:	f000 b8a2 	b.w	8004ece <__retarget_lock_release_recursive>
 8004d8a:	bf00      	nop
 8004d8c:	2000014e 	.word	0x2000014e

08004d90 <__sinit>:
 8004d90:	b510      	push	{r4, lr}
 8004d92:	4604      	mov	r4, r0
 8004d94:	f7ff fff0 	bl	8004d78 <__sinit_lock_acquire>
 8004d98:	69a3      	ldr	r3, [r4, #24]
 8004d9a:	b11b      	cbz	r3, 8004da4 <__sinit+0x14>
 8004d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004da0:	f7ff bff0 	b.w	8004d84 <__sinit_lock_release>
 8004da4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004da8:	6523      	str	r3, [r4, #80]	; 0x50
 8004daa:	4b13      	ldr	r3, [pc, #76]	; (8004df8 <__sinit+0x68>)
 8004dac:	4a13      	ldr	r2, [pc, #76]	; (8004dfc <__sinit+0x6c>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	62a2      	str	r2, [r4, #40]	; 0x28
 8004db2:	42a3      	cmp	r3, r4
 8004db4:	bf04      	itt	eq
 8004db6:	2301      	moveq	r3, #1
 8004db8:	61a3      	streq	r3, [r4, #24]
 8004dba:	4620      	mov	r0, r4
 8004dbc:	f000 f820 	bl	8004e00 <__sfp>
 8004dc0:	6060      	str	r0, [r4, #4]
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	f000 f81c 	bl	8004e00 <__sfp>
 8004dc8:	60a0      	str	r0, [r4, #8]
 8004dca:	4620      	mov	r0, r4
 8004dcc:	f000 f818 	bl	8004e00 <__sfp>
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	60e0      	str	r0, [r4, #12]
 8004dd4:	2104      	movs	r1, #4
 8004dd6:	6860      	ldr	r0, [r4, #4]
 8004dd8:	f7ff ff82 	bl	8004ce0 <std>
 8004ddc:	68a0      	ldr	r0, [r4, #8]
 8004dde:	2201      	movs	r2, #1
 8004de0:	2109      	movs	r1, #9
 8004de2:	f7ff ff7d 	bl	8004ce0 <std>
 8004de6:	68e0      	ldr	r0, [r4, #12]
 8004de8:	2202      	movs	r2, #2
 8004dea:	2112      	movs	r1, #18
 8004dec:	f7ff ff78 	bl	8004ce0 <std>
 8004df0:	2301      	movs	r3, #1
 8004df2:	61a3      	str	r3, [r4, #24]
 8004df4:	e7d2      	b.n	8004d9c <__sinit+0xc>
 8004df6:	bf00      	nop
 8004df8:	08005ad4 	.word	0x08005ad4
 8004dfc:	08004d29 	.word	0x08004d29

08004e00 <__sfp>:
 8004e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e02:	4607      	mov	r7, r0
 8004e04:	f7ff ffac 	bl	8004d60 <__sfp_lock_acquire>
 8004e08:	4b1e      	ldr	r3, [pc, #120]	; (8004e84 <__sfp+0x84>)
 8004e0a:	681e      	ldr	r6, [r3, #0]
 8004e0c:	69b3      	ldr	r3, [r6, #24]
 8004e0e:	b913      	cbnz	r3, 8004e16 <__sfp+0x16>
 8004e10:	4630      	mov	r0, r6
 8004e12:	f7ff ffbd 	bl	8004d90 <__sinit>
 8004e16:	3648      	adds	r6, #72	; 0x48
 8004e18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	d503      	bpl.n	8004e28 <__sfp+0x28>
 8004e20:	6833      	ldr	r3, [r6, #0]
 8004e22:	b30b      	cbz	r3, 8004e68 <__sfp+0x68>
 8004e24:	6836      	ldr	r6, [r6, #0]
 8004e26:	e7f7      	b.n	8004e18 <__sfp+0x18>
 8004e28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e2c:	b9d5      	cbnz	r5, 8004e64 <__sfp+0x64>
 8004e2e:	4b16      	ldr	r3, [pc, #88]	; (8004e88 <__sfp+0x88>)
 8004e30:	60e3      	str	r3, [r4, #12]
 8004e32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e36:	6665      	str	r5, [r4, #100]	; 0x64
 8004e38:	f000 f847 	bl	8004eca <__retarget_lock_init_recursive>
 8004e3c:	f7ff ff96 	bl	8004d6c <__sfp_lock_release>
 8004e40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004e44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004e48:	6025      	str	r5, [r4, #0]
 8004e4a:	61a5      	str	r5, [r4, #24]
 8004e4c:	2208      	movs	r2, #8
 8004e4e:	4629      	mov	r1, r5
 8004e50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004e54:	f7ff fd2c 	bl	80048b0 <memset>
 8004e58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004e5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004e60:	4620      	mov	r0, r4
 8004e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e64:	3468      	adds	r4, #104	; 0x68
 8004e66:	e7d9      	b.n	8004e1c <__sfp+0x1c>
 8004e68:	2104      	movs	r1, #4
 8004e6a:	4638      	mov	r0, r7
 8004e6c:	f7ff ff62 	bl	8004d34 <__sfmoreglue>
 8004e70:	4604      	mov	r4, r0
 8004e72:	6030      	str	r0, [r6, #0]
 8004e74:	2800      	cmp	r0, #0
 8004e76:	d1d5      	bne.n	8004e24 <__sfp+0x24>
 8004e78:	f7ff ff78 	bl	8004d6c <__sfp_lock_release>
 8004e7c:	230c      	movs	r3, #12
 8004e7e:	603b      	str	r3, [r7, #0]
 8004e80:	e7ee      	b.n	8004e60 <__sfp+0x60>
 8004e82:	bf00      	nop
 8004e84:	08005ad4 	.word	0x08005ad4
 8004e88:	ffff0001 	.word	0xffff0001

08004e8c <_fwalk_reent>:
 8004e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e90:	4606      	mov	r6, r0
 8004e92:	4688      	mov	r8, r1
 8004e94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004e98:	2700      	movs	r7, #0
 8004e9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e9e:	f1b9 0901 	subs.w	r9, r9, #1
 8004ea2:	d505      	bpl.n	8004eb0 <_fwalk_reent+0x24>
 8004ea4:	6824      	ldr	r4, [r4, #0]
 8004ea6:	2c00      	cmp	r4, #0
 8004ea8:	d1f7      	bne.n	8004e9a <_fwalk_reent+0xe>
 8004eaa:	4638      	mov	r0, r7
 8004eac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004eb0:	89ab      	ldrh	r3, [r5, #12]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d907      	bls.n	8004ec6 <_fwalk_reent+0x3a>
 8004eb6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	d003      	beq.n	8004ec6 <_fwalk_reent+0x3a>
 8004ebe:	4629      	mov	r1, r5
 8004ec0:	4630      	mov	r0, r6
 8004ec2:	47c0      	blx	r8
 8004ec4:	4307      	orrs	r7, r0
 8004ec6:	3568      	adds	r5, #104	; 0x68
 8004ec8:	e7e9      	b.n	8004e9e <_fwalk_reent+0x12>

08004eca <__retarget_lock_init_recursive>:
 8004eca:	4770      	bx	lr

08004ecc <__retarget_lock_acquire_recursive>:
 8004ecc:	4770      	bx	lr

08004ece <__retarget_lock_release_recursive>:
 8004ece:	4770      	bx	lr

08004ed0 <__swhatbuf_r>:
 8004ed0:	b570      	push	{r4, r5, r6, lr}
 8004ed2:	460e      	mov	r6, r1
 8004ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ed8:	2900      	cmp	r1, #0
 8004eda:	b096      	sub	sp, #88	; 0x58
 8004edc:	4614      	mov	r4, r2
 8004ede:	461d      	mov	r5, r3
 8004ee0:	da08      	bge.n	8004ef4 <__swhatbuf_r+0x24>
 8004ee2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	602a      	str	r2, [r5, #0]
 8004eea:	061a      	lsls	r2, r3, #24
 8004eec:	d410      	bmi.n	8004f10 <__swhatbuf_r+0x40>
 8004eee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ef2:	e00e      	b.n	8004f12 <__swhatbuf_r+0x42>
 8004ef4:	466a      	mov	r2, sp
 8004ef6:	f000 fc95 	bl	8005824 <_fstat_r>
 8004efa:	2800      	cmp	r0, #0
 8004efc:	dbf1      	blt.n	8004ee2 <__swhatbuf_r+0x12>
 8004efe:	9a01      	ldr	r2, [sp, #4]
 8004f00:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004f04:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004f08:	425a      	negs	r2, r3
 8004f0a:	415a      	adcs	r2, r3
 8004f0c:	602a      	str	r2, [r5, #0]
 8004f0e:	e7ee      	b.n	8004eee <__swhatbuf_r+0x1e>
 8004f10:	2340      	movs	r3, #64	; 0x40
 8004f12:	2000      	movs	r0, #0
 8004f14:	6023      	str	r3, [r4, #0]
 8004f16:	b016      	add	sp, #88	; 0x58
 8004f18:	bd70      	pop	{r4, r5, r6, pc}
	...

08004f1c <__smakebuf_r>:
 8004f1c:	898b      	ldrh	r3, [r1, #12]
 8004f1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f20:	079d      	lsls	r5, r3, #30
 8004f22:	4606      	mov	r6, r0
 8004f24:	460c      	mov	r4, r1
 8004f26:	d507      	bpl.n	8004f38 <__smakebuf_r+0x1c>
 8004f28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f2c:	6023      	str	r3, [r4, #0]
 8004f2e:	6123      	str	r3, [r4, #16]
 8004f30:	2301      	movs	r3, #1
 8004f32:	6163      	str	r3, [r4, #20]
 8004f34:	b002      	add	sp, #8
 8004f36:	bd70      	pop	{r4, r5, r6, pc}
 8004f38:	ab01      	add	r3, sp, #4
 8004f3a:	466a      	mov	r2, sp
 8004f3c:	f7ff ffc8 	bl	8004ed0 <__swhatbuf_r>
 8004f40:	9900      	ldr	r1, [sp, #0]
 8004f42:	4605      	mov	r5, r0
 8004f44:	4630      	mov	r0, r6
 8004f46:	f000 f895 	bl	8005074 <_malloc_r>
 8004f4a:	b948      	cbnz	r0, 8004f60 <__smakebuf_r+0x44>
 8004f4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f50:	059a      	lsls	r2, r3, #22
 8004f52:	d4ef      	bmi.n	8004f34 <__smakebuf_r+0x18>
 8004f54:	f023 0303 	bic.w	r3, r3, #3
 8004f58:	f043 0302 	orr.w	r3, r3, #2
 8004f5c:	81a3      	strh	r3, [r4, #12]
 8004f5e:	e7e3      	b.n	8004f28 <__smakebuf_r+0xc>
 8004f60:	4b0d      	ldr	r3, [pc, #52]	; (8004f98 <__smakebuf_r+0x7c>)
 8004f62:	62b3      	str	r3, [r6, #40]	; 0x28
 8004f64:	89a3      	ldrh	r3, [r4, #12]
 8004f66:	6020      	str	r0, [r4, #0]
 8004f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f6c:	81a3      	strh	r3, [r4, #12]
 8004f6e:	9b00      	ldr	r3, [sp, #0]
 8004f70:	6163      	str	r3, [r4, #20]
 8004f72:	9b01      	ldr	r3, [sp, #4]
 8004f74:	6120      	str	r0, [r4, #16]
 8004f76:	b15b      	cbz	r3, 8004f90 <__smakebuf_r+0x74>
 8004f78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f7c:	4630      	mov	r0, r6
 8004f7e:	f000 fc63 	bl	8005848 <_isatty_r>
 8004f82:	b128      	cbz	r0, 8004f90 <__smakebuf_r+0x74>
 8004f84:	89a3      	ldrh	r3, [r4, #12]
 8004f86:	f023 0303 	bic.w	r3, r3, #3
 8004f8a:	f043 0301 	orr.w	r3, r3, #1
 8004f8e:	81a3      	strh	r3, [r4, #12]
 8004f90:	89a0      	ldrh	r0, [r4, #12]
 8004f92:	4305      	orrs	r5, r0
 8004f94:	81a5      	strh	r5, [r4, #12]
 8004f96:	e7cd      	b.n	8004f34 <__smakebuf_r+0x18>
 8004f98:	08004d29 	.word	0x08004d29

08004f9c <_free_r>:
 8004f9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f9e:	2900      	cmp	r1, #0
 8004fa0:	d044      	beq.n	800502c <_free_r+0x90>
 8004fa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fa6:	9001      	str	r0, [sp, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f1a1 0404 	sub.w	r4, r1, #4
 8004fae:	bfb8      	it	lt
 8004fb0:	18e4      	addlt	r4, r4, r3
 8004fb2:	f000 fc6b 	bl	800588c <__malloc_lock>
 8004fb6:	4a1e      	ldr	r2, [pc, #120]	; (8005030 <_free_r+0x94>)
 8004fb8:	9801      	ldr	r0, [sp, #4]
 8004fba:	6813      	ldr	r3, [r2, #0]
 8004fbc:	b933      	cbnz	r3, 8004fcc <_free_r+0x30>
 8004fbe:	6063      	str	r3, [r4, #4]
 8004fc0:	6014      	str	r4, [r2, #0]
 8004fc2:	b003      	add	sp, #12
 8004fc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004fc8:	f000 bc66 	b.w	8005898 <__malloc_unlock>
 8004fcc:	42a3      	cmp	r3, r4
 8004fce:	d908      	bls.n	8004fe2 <_free_r+0x46>
 8004fd0:	6825      	ldr	r5, [r4, #0]
 8004fd2:	1961      	adds	r1, r4, r5
 8004fd4:	428b      	cmp	r3, r1
 8004fd6:	bf01      	itttt	eq
 8004fd8:	6819      	ldreq	r1, [r3, #0]
 8004fda:	685b      	ldreq	r3, [r3, #4]
 8004fdc:	1949      	addeq	r1, r1, r5
 8004fde:	6021      	streq	r1, [r4, #0]
 8004fe0:	e7ed      	b.n	8004fbe <_free_r+0x22>
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	b10b      	cbz	r3, 8004fec <_free_r+0x50>
 8004fe8:	42a3      	cmp	r3, r4
 8004fea:	d9fa      	bls.n	8004fe2 <_free_r+0x46>
 8004fec:	6811      	ldr	r1, [r2, #0]
 8004fee:	1855      	adds	r5, r2, r1
 8004ff0:	42a5      	cmp	r5, r4
 8004ff2:	d10b      	bne.n	800500c <_free_r+0x70>
 8004ff4:	6824      	ldr	r4, [r4, #0]
 8004ff6:	4421      	add	r1, r4
 8004ff8:	1854      	adds	r4, r2, r1
 8004ffa:	42a3      	cmp	r3, r4
 8004ffc:	6011      	str	r1, [r2, #0]
 8004ffe:	d1e0      	bne.n	8004fc2 <_free_r+0x26>
 8005000:	681c      	ldr	r4, [r3, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	6053      	str	r3, [r2, #4]
 8005006:	4421      	add	r1, r4
 8005008:	6011      	str	r1, [r2, #0]
 800500a:	e7da      	b.n	8004fc2 <_free_r+0x26>
 800500c:	d902      	bls.n	8005014 <_free_r+0x78>
 800500e:	230c      	movs	r3, #12
 8005010:	6003      	str	r3, [r0, #0]
 8005012:	e7d6      	b.n	8004fc2 <_free_r+0x26>
 8005014:	6825      	ldr	r5, [r4, #0]
 8005016:	1961      	adds	r1, r4, r5
 8005018:	428b      	cmp	r3, r1
 800501a:	bf04      	itt	eq
 800501c:	6819      	ldreq	r1, [r3, #0]
 800501e:	685b      	ldreq	r3, [r3, #4]
 8005020:	6063      	str	r3, [r4, #4]
 8005022:	bf04      	itt	eq
 8005024:	1949      	addeq	r1, r1, r5
 8005026:	6021      	streq	r1, [r4, #0]
 8005028:	6054      	str	r4, [r2, #4]
 800502a:	e7ca      	b.n	8004fc2 <_free_r+0x26>
 800502c:	b003      	add	sp, #12
 800502e:	bd30      	pop	{r4, r5, pc}
 8005030:	20000150 	.word	0x20000150

08005034 <sbrk_aligned>:
 8005034:	b570      	push	{r4, r5, r6, lr}
 8005036:	4e0e      	ldr	r6, [pc, #56]	; (8005070 <sbrk_aligned+0x3c>)
 8005038:	460c      	mov	r4, r1
 800503a:	6831      	ldr	r1, [r6, #0]
 800503c:	4605      	mov	r5, r0
 800503e:	b911      	cbnz	r1, 8005046 <sbrk_aligned+0x12>
 8005040:	f000 fb7a 	bl	8005738 <_sbrk_r>
 8005044:	6030      	str	r0, [r6, #0]
 8005046:	4621      	mov	r1, r4
 8005048:	4628      	mov	r0, r5
 800504a:	f000 fb75 	bl	8005738 <_sbrk_r>
 800504e:	1c43      	adds	r3, r0, #1
 8005050:	d00a      	beq.n	8005068 <sbrk_aligned+0x34>
 8005052:	1cc4      	adds	r4, r0, #3
 8005054:	f024 0403 	bic.w	r4, r4, #3
 8005058:	42a0      	cmp	r0, r4
 800505a:	d007      	beq.n	800506c <sbrk_aligned+0x38>
 800505c:	1a21      	subs	r1, r4, r0
 800505e:	4628      	mov	r0, r5
 8005060:	f000 fb6a 	bl	8005738 <_sbrk_r>
 8005064:	3001      	adds	r0, #1
 8005066:	d101      	bne.n	800506c <sbrk_aligned+0x38>
 8005068:	f04f 34ff 	mov.w	r4, #4294967295
 800506c:	4620      	mov	r0, r4
 800506e:	bd70      	pop	{r4, r5, r6, pc}
 8005070:	20000154 	.word	0x20000154

08005074 <_malloc_r>:
 8005074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005078:	1ccd      	adds	r5, r1, #3
 800507a:	f025 0503 	bic.w	r5, r5, #3
 800507e:	3508      	adds	r5, #8
 8005080:	2d0c      	cmp	r5, #12
 8005082:	bf38      	it	cc
 8005084:	250c      	movcc	r5, #12
 8005086:	2d00      	cmp	r5, #0
 8005088:	4607      	mov	r7, r0
 800508a:	db01      	blt.n	8005090 <_malloc_r+0x1c>
 800508c:	42a9      	cmp	r1, r5
 800508e:	d905      	bls.n	800509c <_malloc_r+0x28>
 8005090:	230c      	movs	r3, #12
 8005092:	603b      	str	r3, [r7, #0]
 8005094:	2600      	movs	r6, #0
 8005096:	4630      	mov	r0, r6
 8005098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800509c:	4e2e      	ldr	r6, [pc, #184]	; (8005158 <_malloc_r+0xe4>)
 800509e:	f000 fbf5 	bl	800588c <__malloc_lock>
 80050a2:	6833      	ldr	r3, [r6, #0]
 80050a4:	461c      	mov	r4, r3
 80050a6:	bb34      	cbnz	r4, 80050f6 <_malloc_r+0x82>
 80050a8:	4629      	mov	r1, r5
 80050aa:	4638      	mov	r0, r7
 80050ac:	f7ff ffc2 	bl	8005034 <sbrk_aligned>
 80050b0:	1c43      	adds	r3, r0, #1
 80050b2:	4604      	mov	r4, r0
 80050b4:	d14d      	bne.n	8005152 <_malloc_r+0xde>
 80050b6:	6834      	ldr	r4, [r6, #0]
 80050b8:	4626      	mov	r6, r4
 80050ba:	2e00      	cmp	r6, #0
 80050bc:	d140      	bne.n	8005140 <_malloc_r+0xcc>
 80050be:	6823      	ldr	r3, [r4, #0]
 80050c0:	4631      	mov	r1, r6
 80050c2:	4638      	mov	r0, r7
 80050c4:	eb04 0803 	add.w	r8, r4, r3
 80050c8:	f000 fb36 	bl	8005738 <_sbrk_r>
 80050cc:	4580      	cmp	r8, r0
 80050ce:	d13a      	bne.n	8005146 <_malloc_r+0xd2>
 80050d0:	6821      	ldr	r1, [r4, #0]
 80050d2:	3503      	adds	r5, #3
 80050d4:	1a6d      	subs	r5, r5, r1
 80050d6:	f025 0503 	bic.w	r5, r5, #3
 80050da:	3508      	adds	r5, #8
 80050dc:	2d0c      	cmp	r5, #12
 80050de:	bf38      	it	cc
 80050e0:	250c      	movcc	r5, #12
 80050e2:	4629      	mov	r1, r5
 80050e4:	4638      	mov	r0, r7
 80050e6:	f7ff ffa5 	bl	8005034 <sbrk_aligned>
 80050ea:	3001      	adds	r0, #1
 80050ec:	d02b      	beq.n	8005146 <_malloc_r+0xd2>
 80050ee:	6823      	ldr	r3, [r4, #0]
 80050f0:	442b      	add	r3, r5
 80050f2:	6023      	str	r3, [r4, #0]
 80050f4:	e00e      	b.n	8005114 <_malloc_r+0xa0>
 80050f6:	6822      	ldr	r2, [r4, #0]
 80050f8:	1b52      	subs	r2, r2, r5
 80050fa:	d41e      	bmi.n	800513a <_malloc_r+0xc6>
 80050fc:	2a0b      	cmp	r2, #11
 80050fe:	d916      	bls.n	800512e <_malloc_r+0xba>
 8005100:	1961      	adds	r1, r4, r5
 8005102:	42a3      	cmp	r3, r4
 8005104:	6025      	str	r5, [r4, #0]
 8005106:	bf18      	it	ne
 8005108:	6059      	strne	r1, [r3, #4]
 800510a:	6863      	ldr	r3, [r4, #4]
 800510c:	bf08      	it	eq
 800510e:	6031      	streq	r1, [r6, #0]
 8005110:	5162      	str	r2, [r4, r5]
 8005112:	604b      	str	r3, [r1, #4]
 8005114:	4638      	mov	r0, r7
 8005116:	f104 060b 	add.w	r6, r4, #11
 800511a:	f000 fbbd 	bl	8005898 <__malloc_unlock>
 800511e:	f026 0607 	bic.w	r6, r6, #7
 8005122:	1d23      	adds	r3, r4, #4
 8005124:	1af2      	subs	r2, r6, r3
 8005126:	d0b6      	beq.n	8005096 <_malloc_r+0x22>
 8005128:	1b9b      	subs	r3, r3, r6
 800512a:	50a3      	str	r3, [r4, r2]
 800512c:	e7b3      	b.n	8005096 <_malloc_r+0x22>
 800512e:	6862      	ldr	r2, [r4, #4]
 8005130:	42a3      	cmp	r3, r4
 8005132:	bf0c      	ite	eq
 8005134:	6032      	streq	r2, [r6, #0]
 8005136:	605a      	strne	r2, [r3, #4]
 8005138:	e7ec      	b.n	8005114 <_malloc_r+0xa0>
 800513a:	4623      	mov	r3, r4
 800513c:	6864      	ldr	r4, [r4, #4]
 800513e:	e7b2      	b.n	80050a6 <_malloc_r+0x32>
 8005140:	4634      	mov	r4, r6
 8005142:	6876      	ldr	r6, [r6, #4]
 8005144:	e7b9      	b.n	80050ba <_malloc_r+0x46>
 8005146:	230c      	movs	r3, #12
 8005148:	603b      	str	r3, [r7, #0]
 800514a:	4638      	mov	r0, r7
 800514c:	f000 fba4 	bl	8005898 <__malloc_unlock>
 8005150:	e7a1      	b.n	8005096 <_malloc_r+0x22>
 8005152:	6025      	str	r5, [r4, #0]
 8005154:	e7de      	b.n	8005114 <_malloc_r+0xa0>
 8005156:	bf00      	nop
 8005158:	20000150 	.word	0x20000150

0800515c <__sfputc_r>:
 800515c:	6893      	ldr	r3, [r2, #8]
 800515e:	3b01      	subs	r3, #1
 8005160:	2b00      	cmp	r3, #0
 8005162:	b410      	push	{r4}
 8005164:	6093      	str	r3, [r2, #8]
 8005166:	da08      	bge.n	800517a <__sfputc_r+0x1e>
 8005168:	6994      	ldr	r4, [r2, #24]
 800516a:	42a3      	cmp	r3, r4
 800516c:	db01      	blt.n	8005172 <__sfputc_r+0x16>
 800516e:	290a      	cmp	r1, #10
 8005170:	d103      	bne.n	800517a <__sfputc_r+0x1e>
 8005172:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005176:	f7ff bc31 	b.w	80049dc <__swbuf_r>
 800517a:	6813      	ldr	r3, [r2, #0]
 800517c:	1c58      	adds	r0, r3, #1
 800517e:	6010      	str	r0, [r2, #0]
 8005180:	7019      	strb	r1, [r3, #0]
 8005182:	4608      	mov	r0, r1
 8005184:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005188:	4770      	bx	lr

0800518a <__sfputs_r>:
 800518a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800518c:	4606      	mov	r6, r0
 800518e:	460f      	mov	r7, r1
 8005190:	4614      	mov	r4, r2
 8005192:	18d5      	adds	r5, r2, r3
 8005194:	42ac      	cmp	r4, r5
 8005196:	d101      	bne.n	800519c <__sfputs_r+0x12>
 8005198:	2000      	movs	r0, #0
 800519a:	e007      	b.n	80051ac <__sfputs_r+0x22>
 800519c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051a0:	463a      	mov	r2, r7
 80051a2:	4630      	mov	r0, r6
 80051a4:	f7ff ffda 	bl	800515c <__sfputc_r>
 80051a8:	1c43      	adds	r3, r0, #1
 80051aa:	d1f3      	bne.n	8005194 <__sfputs_r+0xa>
 80051ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080051b0 <_vfiprintf_r>:
 80051b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051b4:	460d      	mov	r5, r1
 80051b6:	b09d      	sub	sp, #116	; 0x74
 80051b8:	4614      	mov	r4, r2
 80051ba:	4698      	mov	r8, r3
 80051bc:	4606      	mov	r6, r0
 80051be:	b118      	cbz	r0, 80051c8 <_vfiprintf_r+0x18>
 80051c0:	6983      	ldr	r3, [r0, #24]
 80051c2:	b90b      	cbnz	r3, 80051c8 <_vfiprintf_r+0x18>
 80051c4:	f7ff fde4 	bl	8004d90 <__sinit>
 80051c8:	4b89      	ldr	r3, [pc, #548]	; (80053f0 <_vfiprintf_r+0x240>)
 80051ca:	429d      	cmp	r5, r3
 80051cc:	d11b      	bne.n	8005206 <_vfiprintf_r+0x56>
 80051ce:	6875      	ldr	r5, [r6, #4]
 80051d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051d2:	07d9      	lsls	r1, r3, #31
 80051d4:	d405      	bmi.n	80051e2 <_vfiprintf_r+0x32>
 80051d6:	89ab      	ldrh	r3, [r5, #12]
 80051d8:	059a      	lsls	r2, r3, #22
 80051da:	d402      	bmi.n	80051e2 <_vfiprintf_r+0x32>
 80051dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051de:	f7ff fe75 	bl	8004ecc <__retarget_lock_acquire_recursive>
 80051e2:	89ab      	ldrh	r3, [r5, #12]
 80051e4:	071b      	lsls	r3, r3, #28
 80051e6:	d501      	bpl.n	80051ec <_vfiprintf_r+0x3c>
 80051e8:	692b      	ldr	r3, [r5, #16]
 80051ea:	b9eb      	cbnz	r3, 8005228 <_vfiprintf_r+0x78>
 80051ec:	4629      	mov	r1, r5
 80051ee:	4630      	mov	r0, r6
 80051f0:	f7ff fc46 	bl	8004a80 <__swsetup_r>
 80051f4:	b1c0      	cbz	r0, 8005228 <_vfiprintf_r+0x78>
 80051f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051f8:	07dc      	lsls	r4, r3, #31
 80051fa:	d50e      	bpl.n	800521a <_vfiprintf_r+0x6a>
 80051fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005200:	b01d      	add	sp, #116	; 0x74
 8005202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005206:	4b7b      	ldr	r3, [pc, #492]	; (80053f4 <_vfiprintf_r+0x244>)
 8005208:	429d      	cmp	r5, r3
 800520a:	d101      	bne.n	8005210 <_vfiprintf_r+0x60>
 800520c:	68b5      	ldr	r5, [r6, #8]
 800520e:	e7df      	b.n	80051d0 <_vfiprintf_r+0x20>
 8005210:	4b79      	ldr	r3, [pc, #484]	; (80053f8 <_vfiprintf_r+0x248>)
 8005212:	429d      	cmp	r5, r3
 8005214:	bf08      	it	eq
 8005216:	68f5      	ldreq	r5, [r6, #12]
 8005218:	e7da      	b.n	80051d0 <_vfiprintf_r+0x20>
 800521a:	89ab      	ldrh	r3, [r5, #12]
 800521c:	0598      	lsls	r0, r3, #22
 800521e:	d4ed      	bmi.n	80051fc <_vfiprintf_r+0x4c>
 8005220:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005222:	f7ff fe54 	bl	8004ece <__retarget_lock_release_recursive>
 8005226:	e7e9      	b.n	80051fc <_vfiprintf_r+0x4c>
 8005228:	2300      	movs	r3, #0
 800522a:	9309      	str	r3, [sp, #36]	; 0x24
 800522c:	2320      	movs	r3, #32
 800522e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005232:	f8cd 800c 	str.w	r8, [sp, #12]
 8005236:	2330      	movs	r3, #48	; 0x30
 8005238:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80053fc <_vfiprintf_r+0x24c>
 800523c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005240:	f04f 0901 	mov.w	r9, #1
 8005244:	4623      	mov	r3, r4
 8005246:	469a      	mov	sl, r3
 8005248:	f813 2b01 	ldrb.w	r2, [r3], #1
 800524c:	b10a      	cbz	r2, 8005252 <_vfiprintf_r+0xa2>
 800524e:	2a25      	cmp	r2, #37	; 0x25
 8005250:	d1f9      	bne.n	8005246 <_vfiprintf_r+0x96>
 8005252:	ebba 0b04 	subs.w	fp, sl, r4
 8005256:	d00b      	beq.n	8005270 <_vfiprintf_r+0xc0>
 8005258:	465b      	mov	r3, fp
 800525a:	4622      	mov	r2, r4
 800525c:	4629      	mov	r1, r5
 800525e:	4630      	mov	r0, r6
 8005260:	f7ff ff93 	bl	800518a <__sfputs_r>
 8005264:	3001      	adds	r0, #1
 8005266:	f000 80aa 	beq.w	80053be <_vfiprintf_r+0x20e>
 800526a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800526c:	445a      	add	r2, fp
 800526e:	9209      	str	r2, [sp, #36]	; 0x24
 8005270:	f89a 3000 	ldrb.w	r3, [sl]
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 80a2 	beq.w	80053be <_vfiprintf_r+0x20e>
 800527a:	2300      	movs	r3, #0
 800527c:	f04f 32ff 	mov.w	r2, #4294967295
 8005280:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005284:	f10a 0a01 	add.w	sl, sl, #1
 8005288:	9304      	str	r3, [sp, #16]
 800528a:	9307      	str	r3, [sp, #28]
 800528c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005290:	931a      	str	r3, [sp, #104]	; 0x68
 8005292:	4654      	mov	r4, sl
 8005294:	2205      	movs	r2, #5
 8005296:	f814 1b01 	ldrb.w	r1, [r4], #1
 800529a:	4858      	ldr	r0, [pc, #352]	; (80053fc <_vfiprintf_r+0x24c>)
 800529c:	f7fa ff98 	bl	80001d0 <memchr>
 80052a0:	9a04      	ldr	r2, [sp, #16]
 80052a2:	b9d8      	cbnz	r0, 80052dc <_vfiprintf_r+0x12c>
 80052a4:	06d1      	lsls	r1, r2, #27
 80052a6:	bf44      	itt	mi
 80052a8:	2320      	movmi	r3, #32
 80052aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052ae:	0713      	lsls	r3, r2, #28
 80052b0:	bf44      	itt	mi
 80052b2:	232b      	movmi	r3, #43	; 0x2b
 80052b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052b8:	f89a 3000 	ldrb.w	r3, [sl]
 80052bc:	2b2a      	cmp	r3, #42	; 0x2a
 80052be:	d015      	beq.n	80052ec <_vfiprintf_r+0x13c>
 80052c0:	9a07      	ldr	r2, [sp, #28]
 80052c2:	4654      	mov	r4, sl
 80052c4:	2000      	movs	r0, #0
 80052c6:	f04f 0c0a 	mov.w	ip, #10
 80052ca:	4621      	mov	r1, r4
 80052cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052d0:	3b30      	subs	r3, #48	; 0x30
 80052d2:	2b09      	cmp	r3, #9
 80052d4:	d94e      	bls.n	8005374 <_vfiprintf_r+0x1c4>
 80052d6:	b1b0      	cbz	r0, 8005306 <_vfiprintf_r+0x156>
 80052d8:	9207      	str	r2, [sp, #28]
 80052da:	e014      	b.n	8005306 <_vfiprintf_r+0x156>
 80052dc:	eba0 0308 	sub.w	r3, r0, r8
 80052e0:	fa09 f303 	lsl.w	r3, r9, r3
 80052e4:	4313      	orrs	r3, r2
 80052e6:	9304      	str	r3, [sp, #16]
 80052e8:	46a2      	mov	sl, r4
 80052ea:	e7d2      	b.n	8005292 <_vfiprintf_r+0xe2>
 80052ec:	9b03      	ldr	r3, [sp, #12]
 80052ee:	1d19      	adds	r1, r3, #4
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	9103      	str	r1, [sp, #12]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	bfbb      	ittet	lt
 80052f8:	425b      	neglt	r3, r3
 80052fa:	f042 0202 	orrlt.w	r2, r2, #2
 80052fe:	9307      	strge	r3, [sp, #28]
 8005300:	9307      	strlt	r3, [sp, #28]
 8005302:	bfb8      	it	lt
 8005304:	9204      	strlt	r2, [sp, #16]
 8005306:	7823      	ldrb	r3, [r4, #0]
 8005308:	2b2e      	cmp	r3, #46	; 0x2e
 800530a:	d10c      	bne.n	8005326 <_vfiprintf_r+0x176>
 800530c:	7863      	ldrb	r3, [r4, #1]
 800530e:	2b2a      	cmp	r3, #42	; 0x2a
 8005310:	d135      	bne.n	800537e <_vfiprintf_r+0x1ce>
 8005312:	9b03      	ldr	r3, [sp, #12]
 8005314:	1d1a      	adds	r2, r3, #4
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	9203      	str	r2, [sp, #12]
 800531a:	2b00      	cmp	r3, #0
 800531c:	bfb8      	it	lt
 800531e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005322:	3402      	adds	r4, #2
 8005324:	9305      	str	r3, [sp, #20]
 8005326:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800540c <_vfiprintf_r+0x25c>
 800532a:	7821      	ldrb	r1, [r4, #0]
 800532c:	2203      	movs	r2, #3
 800532e:	4650      	mov	r0, sl
 8005330:	f7fa ff4e 	bl	80001d0 <memchr>
 8005334:	b140      	cbz	r0, 8005348 <_vfiprintf_r+0x198>
 8005336:	2340      	movs	r3, #64	; 0x40
 8005338:	eba0 000a 	sub.w	r0, r0, sl
 800533c:	fa03 f000 	lsl.w	r0, r3, r0
 8005340:	9b04      	ldr	r3, [sp, #16]
 8005342:	4303      	orrs	r3, r0
 8005344:	3401      	adds	r4, #1
 8005346:	9304      	str	r3, [sp, #16]
 8005348:	f814 1b01 	ldrb.w	r1, [r4], #1
 800534c:	482c      	ldr	r0, [pc, #176]	; (8005400 <_vfiprintf_r+0x250>)
 800534e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005352:	2206      	movs	r2, #6
 8005354:	f7fa ff3c 	bl	80001d0 <memchr>
 8005358:	2800      	cmp	r0, #0
 800535a:	d03f      	beq.n	80053dc <_vfiprintf_r+0x22c>
 800535c:	4b29      	ldr	r3, [pc, #164]	; (8005404 <_vfiprintf_r+0x254>)
 800535e:	bb1b      	cbnz	r3, 80053a8 <_vfiprintf_r+0x1f8>
 8005360:	9b03      	ldr	r3, [sp, #12]
 8005362:	3307      	adds	r3, #7
 8005364:	f023 0307 	bic.w	r3, r3, #7
 8005368:	3308      	adds	r3, #8
 800536a:	9303      	str	r3, [sp, #12]
 800536c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800536e:	443b      	add	r3, r7
 8005370:	9309      	str	r3, [sp, #36]	; 0x24
 8005372:	e767      	b.n	8005244 <_vfiprintf_r+0x94>
 8005374:	fb0c 3202 	mla	r2, ip, r2, r3
 8005378:	460c      	mov	r4, r1
 800537a:	2001      	movs	r0, #1
 800537c:	e7a5      	b.n	80052ca <_vfiprintf_r+0x11a>
 800537e:	2300      	movs	r3, #0
 8005380:	3401      	adds	r4, #1
 8005382:	9305      	str	r3, [sp, #20]
 8005384:	4619      	mov	r1, r3
 8005386:	f04f 0c0a 	mov.w	ip, #10
 800538a:	4620      	mov	r0, r4
 800538c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005390:	3a30      	subs	r2, #48	; 0x30
 8005392:	2a09      	cmp	r2, #9
 8005394:	d903      	bls.n	800539e <_vfiprintf_r+0x1ee>
 8005396:	2b00      	cmp	r3, #0
 8005398:	d0c5      	beq.n	8005326 <_vfiprintf_r+0x176>
 800539a:	9105      	str	r1, [sp, #20]
 800539c:	e7c3      	b.n	8005326 <_vfiprintf_r+0x176>
 800539e:	fb0c 2101 	mla	r1, ip, r1, r2
 80053a2:	4604      	mov	r4, r0
 80053a4:	2301      	movs	r3, #1
 80053a6:	e7f0      	b.n	800538a <_vfiprintf_r+0x1da>
 80053a8:	ab03      	add	r3, sp, #12
 80053aa:	9300      	str	r3, [sp, #0]
 80053ac:	462a      	mov	r2, r5
 80053ae:	4b16      	ldr	r3, [pc, #88]	; (8005408 <_vfiprintf_r+0x258>)
 80053b0:	a904      	add	r1, sp, #16
 80053b2:	4630      	mov	r0, r6
 80053b4:	f3af 8000 	nop.w
 80053b8:	4607      	mov	r7, r0
 80053ba:	1c78      	adds	r0, r7, #1
 80053bc:	d1d6      	bne.n	800536c <_vfiprintf_r+0x1bc>
 80053be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053c0:	07d9      	lsls	r1, r3, #31
 80053c2:	d405      	bmi.n	80053d0 <_vfiprintf_r+0x220>
 80053c4:	89ab      	ldrh	r3, [r5, #12]
 80053c6:	059a      	lsls	r2, r3, #22
 80053c8:	d402      	bmi.n	80053d0 <_vfiprintf_r+0x220>
 80053ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053cc:	f7ff fd7f 	bl	8004ece <__retarget_lock_release_recursive>
 80053d0:	89ab      	ldrh	r3, [r5, #12]
 80053d2:	065b      	lsls	r3, r3, #25
 80053d4:	f53f af12 	bmi.w	80051fc <_vfiprintf_r+0x4c>
 80053d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053da:	e711      	b.n	8005200 <_vfiprintf_r+0x50>
 80053dc:	ab03      	add	r3, sp, #12
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	462a      	mov	r2, r5
 80053e2:	4b09      	ldr	r3, [pc, #36]	; (8005408 <_vfiprintf_r+0x258>)
 80053e4:	a904      	add	r1, sp, #16
 80053e6:	4630      	mov	r0, r6
 80053e8:	f000 f880 	bl	80054ec <_printf_i>
 80053ec:	e7e4      	b.n	80053b8 <_vfiprintf_r+0x208>
 80053ee:	bf00      	nop
 80053f0:	08005af8 	.word	0x08005af8
 80053f4:	08005b18 	.word	0x08005b18
 80053f8:	08005ad8 	.word	0x08005ad8
 80053fc:	08005b38 	.word	0x08005b38
 8005400:	08005b42 	.word	0x08005b42
 8005404:	00000000 	.word	0x00000000
 8005408:	0800518b 	.word	0x0800518b
 800540c:	08005b3e 	.word	0x08005b3e

08005410 <_printf_common>:
 8005410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005414:	4616      	mov	r6, r2
 8005416:	4699      	mov	r9, r3
 8005418:	688a      	ldr	r2, [r1, #8]
 800541a:	690b      	ldr	r3, [r1, #16]
 800541c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005420:	4293      	cmp	r3, r2
 8005422:	bfb8      	it	lt
 8005424:	4613      	movlt	r3, r2
 8005426:	6033      	str	r3, [r6, #0]
 8005428:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800542c:	4607      	mov	r7, r0
 800542e:	460c      	mov	r4, r1
 8005430:	b10a      	cbz	r2, 8005436 <_printf_common+0x26>
 8005432:	3301      	adds	r3, #1
 8005434:	6033      	str	r3, [r6, #0]
 8005436:	6823      	ldr	r3, [r4, #0]
 8005438:	0699      	lsls	r1, r3, #26
 800543a:	bf42      	ittt	mi
 800543c:	6833      	ldrmi	r3, [r6, #0]
 800543e:	3302      	addmi	r3, #2
 8005440:	6033      	strmi	r3, [r6, #0]
 8005442:	6825      	ldr	r5, [r4, #0]
 8005444:	f015 0506 	ands.w	r5, r5, #6
 8005448:	d106      	bne.n	8005458 <_printf_common+0x48>
 800544a:	f104 0a19 	add.w	sl, r4, #25
 800544e:	68e3      	ldr	r3, [r4, #12]
 8005450:	6832      	ldr	r2, [r6, #0]
 8005452:	1a9b      	subs	r3, r3, r2
 8005454:	42ab      	cmp	r3, r5
 8005456:	dc26      	bgt.n	80054a6 <_printf_common+0x96>
 8005458:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800545c:	1e13      	subs	r3, r2, #0
 800545e:	6822      	ldr	r2, [r4, #0]
 8005460:	bf18      	it	ne
 8005462:	2301      	movne	r3, #1
 8005464:	0692      	lsls	r2, r2, #26
 8005466:	d42b      	bmi.n	80054c0 <_printf_common+0xb0>
 8005468:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800546c:	4649      	mov	r1, r9
 800546e:	4638      	mov	r0, r7
 8005470:	47c0      	blx	r8
 8005472:	3001      	adds	r0, #1
 8005474:	d01e      	beq.n	80054b4 <_printf_common+0xa4>
 8005476:	6823      	ldr	r3, [r4, #0]
 8005478:	68e5      	ldr	r5, [r4, #12]
 800547a:	6832      	ldr	r2, [r6, #0]
 800547c:	f003 0306 	and.w	r3, r3, #6
 8005480:	2b04      	cmp	r3, #4
 8005482:	bf08      	it	eq
 8005484:	1aad      	subeq	r5, r5, r2
 8005486:	68a3      	ldr	r3, [r4, #8]
 8005488:	6922      	ldr	r2, [r4, #16]
 800548a:	bf0c      	ite	eq
 800548c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005490:	2500      	movne	r5, #0
 8005492:	4293      	cmp	r3, r2
 8005494:	bfc4      	itt	gt
 8005496:	1a9b      	subgt	r3, r3, r2
 8005498:	18ed      	addgt	r5, r5, r3
 800549a:	2600      	movs	r6, #0
 800549c:	341a      	adds	r4, #26
 800549e:	42b5      	cmp	r5, r6
 80054a0:	d11a      	bne.n	80054d8 <_printf_common+0xc8>
 80054a2:	2000      	movs	r0, #0
 80054a4:	e008      	b.n	80054b8 <_printf_common+0xa8>
 80054a6:	2301      	movs	r3, #1
 80054a8:	4652      	mov	r2, sl
 80054aa:	4649      	mov	r1, r9
 80054ac:	4638      	mov	r0, r7
 80054ae:	47c0      	blx	r8
 80054b0:	3001      	adds	r0, #1
 80054b2:	d103      	bne.n	80054bc <_printf_common+0xac>
 80054b4:	f04f 30ff 	mov.w	r0, #4294967295
 80054b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054bc:	3501      	adds	r5, #1
 80054be:	e7c6      	b.n	800544e <_printf_common+0x3e>
 80054c0:	18e1      	adds	r1, r4, r3
 80054c2:	1c5a      	adds	r2, r3, #1
 80054c4:	2030      	movs	r0, #48	; 0x30
 80054c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054ca:	4422      	add	r2, r4
 80054cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054d4:	3302      	adds	r3, #2
 80054d6:	e7c7      	b.n	8005468 <_printf_common+0x58>
 80054d8:	2301      	movs	r3, #1
 80054da:	4622      	mov	r2, r4
 80054dc:	4649      	mov	r1, r9
 80054de:	4638      	mov	r0, r7
 80054e0:	47c0      	blx	r8
 80054e2:	3001      	adds	r0, #1
 80054e4:	d0e6      	beq.n	80054b4 <_printf_common+0xa4>
 80054e6:	3601      	adds	r6, #1
 80054e8:	e7d9      	b.n	800549e <_printf_common+0x8e>
	...

080054ec <_printf_i>:
 80054ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054f0:	7e0f      	ldrb	r7, [r1, #24]
 80054f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054f4:	2f78      	cmp	r7, #120	; 0x78
 80054f6:	4691      	mov	r9, r2
 80054f8:	4680      	mov	r8, r0
 80054fa:	460c      	mov	r4, r1
 80054fc:	469a      	mov	sl, r3
 80054fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005502:	d807      	bhi.n	8005514 <_printf_i+0x28>
 8005504:	2f62      	cmp	r7, #98	; 0x62
 8005506:	d80a      	bhi.n	800551e <_printf_i+0x32>
 8005508:	2f00      	cmp	r7, #0
 800550a:	f000 80d8 	beq.w	80056be <_printf_i+0x1d2>
 800550e:	2f58      	cmp	r7, #88	; 0x58
 8005510:	f000 80a3 	beq.w	800565a <_printf_i+0x16e>
 8005514:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005518:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800551c:	e03a      	b.n	8005594 <_printf_i+0xa8>
 800551e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005522:	2b15      	cmp	r3, #21
 8005524:	d8f6      	bhi.n	8005514 <_printf_i+0x28>
 8005526:	a101      	add	r1, pc, #4	; (adr r1, 800552c <_printf_i+0x40>)
 8005528:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800552c:	08005585 	.word	0x08005585
 8005530:	08005599 	.word	0x08005599
 8005534:	08005515 	.word	0x08005515
 8005538:	08005515 	.word	0x08005515
 800553c:	08005515 	.word	0x08005515
 8005540:	08005515 	.word	0x08005515
 8005544:	08005599 	.word	0x08005599
 8005548:	08005515 	.word	0x08005515
 800554c:	08005515 	.word	0x08005515
 8005550:	08005515 	.word	0x08005515
 8005554:	08005515 	.word	0x08005515
 8005558:	080056a5 	.word	0x080056a5
 800555c:	080055c9 	.word	0x080055c9
 8005560:	08005687 	.word	0x08005687
 8005564:	08005515 	.word	0x08005515
 8005568:	08005515 	.word	0x08005515
 800556c:	080056c7 	.word	0x080056c7
 8005570:	08005515 	.word	0x08005515
 8005574:	080055c9 	.word	0x080055c9
 8005578:	08005515 	.word	0x08005515
 800557c:	08005515 	.word	0x08005515
 8005580:	0800568f 	.word	0x0800568f
 8005584:	682b      	ldr	r3, [r5, #0]
 8005586:	1d1a      	adds	r2, r3, #4
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	602a      	str	r2, [r5, #0]
 800558c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005590:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005594:	2301      	movs	r3, #1
 8005596:	e0a3      	b.n	80056e0 <_printf_i+0x1f4>
 8005598:	6820      	ldr	r0, [r4, #0]
 800559a:	6829      	ldr	r1, [r5, #0]
 800559c:	0606      	lsls	r6, r0, #24
 800559e:	f101 0304 	add.w	r3, r1, #4
 80055a2:	d50a      	bpl.n	80055ba <_printf_i+0xce>
 80055a4:	680e      	ldr	r6, [r1, #0]
 80055a6:	602b      	str	r3, [r5, #0]
 80055a8:	2e00      	cmp	r6, #0
 80055aa:	da03      	bge.n	80055b4 <_printf_i+0xc8>
 80055ac:	232d      	movs	r3, #45	; 0x2d
 80055ae:	4276      	negs	r6, r6
 80055b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055b4:	485e      	ldr	r0, [pc, #376]	; (8005730 <_printf_i+0x244>)
 80055b6:	230a      	movs	r3, #10
 80055b8:	e019      	b.n	80055ee <_printf_i+0x102>
 80055ba:	680e      	ldr	r6, [r1, #0]
 80055bc:	602b      	str	r3, [r5, #0]
 80055be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80055c2:	bf18      	it	ne
 80055c4:	b236      	sxthne	r6, r6
 80055c6:	e7ef      	b.n	80055a8 <_printf_i+0xbc>
 80055c8:	682b      	ldr	r3, [r5, #0]
 80055ca:	6820      	ldr	r0, [r4, #0]
 80055cc:	1d19      	adds	r1, r3, #4
 80055ce:	6029      	str	r1, [r5, #0]
 80055d0:	0601      	lsls	r1, r0, #24
 80055d2:	d501      	bpl.n	80055d8 <_printf_i+0xec>
 80055d4:	681e      	ldr	r6, [r3, #0]
 80055d6:	e002      	b.n	80055de <_printf_i+0xf2>
 80055d8:	0646      	lsls	r6, r0, #25
 80055da:	d5fb      	bpl.n	80055d4 <_printf_i+0xe8>
 80055dc:	881e      	ldrh	r6, [r3, #0]
 80055de:	4854      	ldr	r0, [pc, #336]	; (8005730 <_printf_i+0x244>)
 80055e0:	2f6f      	cmp	r7, #111	; 0x6f
 80055e2:	bf0c      	ite	eq
 80055e4:	2308      	moveq	r3, #8
 80055e6:	230a      	movne	r3, #10
 80055e8:	2100      	movs	r1, #0
 80055ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055ee:	6865      	ldr	r5, [r4, #4]
 80055f0:	60a5      	str	r5, [r4, #8]
 80055f2:	2d00      	cmp	r5, #0
 80055f4:	bfa2      	ittt	ge
 80055f6:	6821      	ldrge	r1, [r4, #0]
 80055f8:	f021 0104 	bicge.w	r1, r1, #4
 80055fc:	6021      	strge	r1, [r4, #0]
 80055fe:	b90e      	cbnz	r6, 8005604 <_printf_i+0x118>
 8005600:	2d00      	cmp	r5, #0
 8005602:	d04d      	beq.n	80056a0 <_printf_i+0x1b4>
 8005604:	4615      	mov	r5, r2
 8005606:	fbb6 f1f3 	udiv	r1, r6, r3
 800560a:	fb03 6711 	mls	r7, r3, r1, r6
 800560e:	5dc7      	ldrb	r7, [r0, r7]
 8005610:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005614:	4637      	mov	r7, r6
 8005616:	42bb      	cmp	r3, r7
 8005618:	460e      	mov	r6, r1
 800561a:	d9f4      	bls.n	8005606 <_printf_i+0x11a>
 800561c:	2b08      	cmp	r3, #8
 800561e:	d10b      	bne.n	8005638 <_printf_i+0x14c>
 8005620:	6823      	ldr	r3, [r4, #0]
 8005622:	07de      	lsls	r6, r3, #31
 8005624:	d508      	bpl.n	8005638 <_printf_i+0x14c>
 8005626:	6923      	ldr	r3, [r4, #16]
 8005628:	6861      	ldr	r1, [r4, #4]
 800562a:	4299      	cmp	r1, r3
 800562c:	bfde      	ittt	le
 800562e:	2330      	movle	r3, #48	; 0x30
 8005630:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005634:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005638:	1b52      	subs	r2, r2, r5
 800563a:	6122      	str	r2, [r4, #16]
 800563c:	f8cd a000 	str.w	sl, [sp]
 8005640:	464b      	mov	r3, r9
 8005642:	aa03      	add	r2, sp, #12
 8005644:	4621      	mov	r1, r4
 8005646:	4640      	mov	r0, r8
 8005648:	f7ff fee2 	bl	8005410 <_printf_common>
 800564c:	3001      	adds	r0, #1
 800564e:	d14c      	bne.n	80056ea <_printf_i+0x1fe>
 8005650:	f04f 30ff 	mov.w	r0, #4294967295
 8005654:	b004      	add	sp, #16
 8005656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800565a:	4835      	ldr	r0, [pc, #212]	; (8005730 <_printf_i+0x244>)
 800565c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005660:	6829      	ldr	r1, [r5, #0]
 8005662:	6823      	ldr	r3, [r4, #0]
 8005664:	f851 6b04 	ldr.w	r6, [r1], #4
 8005668:	6029      	str	r1, [r5, #0]
 800566a:	061d      	lsls	r5, r3, #24
 800566c:	d514      	bpl.n	8005698 <_printf_i+0x1ac>
 800566e:	07df      	lsls	r7, r3, #31
 8005670:	bf44      	itt	mi
 8005672:	f043 0320 	orrmi.w	r3, r3, #32
 8005676:	6023      	strmi	r3, [r4, #0]
 8005678:	b91e      	cbnz	r6, 8005682 <_printf_i+0x196>
 800567a:	6823      	ldr	r3, [r4, #0]
 800567c:	f023 0320 	bic.w	r3, r3, #32
 8005680:	6023      	str	r3, [r4, #0]
 8005682:	2310      	movs	r3, #16
 8005684:	e7b0      	b.n	80055e8 <_printf_i+0xfc>
 8005686:	6823      	ldr	r3, [r4, #0]
 8005688:	f043 0320 	orr.w	r3, r3, #32
 800568c:	6023      	str	r3, [r4, #0]
 800568e:	2378      	movs	r3, #120	; 0x78
 8005690:	4828      	ldr	r0, [pc, #160]	; (8005734 <_printf_i+0x248>)
 8005692:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005696:	e7e3      	b.n	8005660 <_printf_i+0x174>
 8005698:	0659      	lsls	r1, r3, #25
 800569a:	bf48      	it	mi
 800569c:	b2b6      	uxthmi	r6, r6
 800569e:	e7e6      	b.n	800566e <_printf_i+0x182>
 80056a0:	4615      	mov	r5, r2
 80056a2:	e7bb      	b.n	800561c <_printf_i+0x130>
 80056a4:	682b      	ldr	r3, [r5, #0]
 80056a6:	6826      	ldr	r6, [r4, #0]
 80056a8:	6961      	ldr	r1, [r4, #20]
 80056aa:	1d18      	adds	r0, r3, #4
 80056ac:	6028      	str	r0, [r5, #0]
 80056ae:	0635      	lsls	r5, r6, #24
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	d501      	bpl.n	80056b8 <_printf_i+0x1cc>
 80056b4:	6019      	str	r1, [r3, #0]
 80056b6:	e002      	b.n	80056be <_printf_i+0x1d2>
 80056b8:	0670      	lsls	r0, r6, #25
 80056ba:	d5fb      	bpl.n	80056b4 <_printf_i+0x1c8>
 80056bc:	8019      	strh	r1, [r3, #0]
 80056be:	2300      	movs	r3, #0
 80056c0:	6123      	str	r3, [r4, #16]
 80056c2:	4615      	mov	r5, r2
 80056c4:	e7ba      	b.n	800563c <_printf_i+0x150>
 80056c6:	682b      	ldr	r3, [r5, #0]
 80056c8:	1d1a      	adds	r2, r3, #4
 80056ca:	602a      	str	r2, [r5, #0]
 80056cc:	681d      	ldr	r5, [r3, #0]
 80056ce:	6862      	ldr	r2, [r4, #4]
 80056d0:	2100      	movs	r1, #0
 80056d2:	4628      	mov	r0, r5
 80056d4:	f7fa fd7c 	bl	80001d0 <memchr>
 80056d8:	b108      	cbz	r0, 80056de <_printf_i+0x1f2>
 80056da:	1b40      	subs	r0, r0, r5
 80056dc:	6060      	str	r0, [r4, #4]
 80056de:	6863      	ldr	r3, [r4, #4]
 80056e0:	6123      	str	r3, [r4, #16]
 80056e2:	2300      	movs	r3, #0
 80056e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056e8:	e7a8      	b.n	800563c <_printf_i+0x150>
 80056ea:	6923      	ldr	r3, [r4, #16]
 80056ec:	462a      	mov	r2, r5
 80056ee:	4649      	mov	r1, r9
 80056f0:	4640      	mov	r0, r8
 80056f2:	47d0      	blx	sl
 80056f4:	3001      	adds	r0, #1
 80056f6:	d0ab      	beq.n	8005650 <_printf_i+0x164>
 80056f8:	6823      	ldr	r3, [r4, #0]
 80056fa:	079b      	lsls	r3, r3, #30
 80056fc:	d413      	bmi.n	8005726 <_printf_i+0x23a>
 80056fe:	68e0      	ldr	r0, [r4, #12]
 8005700:	9b03      	ldr	r3, [sp, #12]
 8005702:	4298      	cmp	r0, r3
 8005704:	bfb8      	it	lt
 8005706:	4618      	movlt	r0, r3
 8005708:	e7a4      	b.n	8005654 <_printf_i+0x168>
 800570a:	2301      	movs	r3, #1
 800570c:	4632      	mov	r2, r6
 800570e:	4649      	mov	r1, r9
 8005710:	4640      	mov	r0, r8
 8005712:	47d0      	blx	sl
 8005714:	3001      	adds	r0, #1
 8005716:	d09b      	beq.n	8005650 <_printf_i+0x164>
 8005718:	3501      	adds	r5, #1
 800571a:	68e3      	ldr	r3, [r4, #12]
 800571c:	9903      	ldr	r1, [sp, #12]
 800571e:	1a5b      	subs	r3, r3, r1
 8005720:	42ab      	cmp	r3, r5
 8005722:	dcf2      	bgt.n	800570a <_printf_i+0x21e>
 8005724:	e7eb      	b.n	80056fe <_printf_i+0x212>
 8005726:	2500      	movs	r5, #0
 8005728:	f104 0619 	add.w	r6, r4, #25
 800572c:	e7f5      	b.n	800571a <_printf_i+0x22e>
 800572e:	bf00      	nop
 8005730:	08005b49 	.word	0x08005b49
 8005734:	08005b5a 	.word	0x08005b5a

08005738 <_sbrk_r>:
 8005738:	b538      	push	{r3, r4, r5, lr}
 800573a:	4d06      	ldr	r5, [pc, #24]	; (8005754 <_sbrk_r+0x1c>)
 800573c:	2300      	movs	r3, #0
 800573e:	4604      	mov	r4, r0
 8005740:	4608      	mov	r0, r1
 8005742:	602b      	str	r3, [r5, #0]
 8005744:	f7fe fc5a 	bl	8003ffc <_sbrk>
 8005748:	1c43      	adds	r3, r0, #1
 800574a:	d102      	bne.n	8005752 <_sbrk_r+0x1a>
 800574c:	682b      	ldr	r3, [r5, #0]
 800574e:	b103      	cbz	r3, 8005752 <_sbrk_r+0x1a>
 8005750:	6023      	str	r3, [r4, #0]
 8005752:	bd38      	pop	{r3, r4, r5, pc}
 8005754:	20000158 	.word	0x20000158

08005758 <__sread>:
 8005758:	b510      	push	{r4, lr}
 800575a:	460c      	mov	r4, r1
 800575c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005760:	f000 f8a0 	bl	80058a4 <_read_r>
 8005764:	2800      	cmp	r0, #0
 8005766:	bfab      	itete	ge
 8005768:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800576a:	89a3      	ldrhlt	r3, [r4, #12]
 800576c:	181b      	addge	r3, r3, r0
 800576e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005772:	bfac      	ite	ge
 8005774:	6563      	strge	r3, [r4, #84]	; 0x54
 8005776:	81a3      	strhlt	r3, [r4, #12]
 8005778:	bd10      	pop	{r4, pc}

0800577a <__swrite>:
 800577a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800577e:	461f      	mov	r7, r3
 8005780:	898b      	ldrh	r3, [r1, #12]
 8005782:	05db      	lsls	r3, r3, #23
 8005784:	4605      	mov	r5, r0
 8005786:	460c      	mov	r4, r1
 8005788:	4616      	mov	r6, r2
 800578a:	d505      	bpl.n	8005798 <__swrite+0x1e>
 800578c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005790:	2302      	movs	r3, #2
 8005792:	2200      	movs	r2, #0
 8005794:	f000 f868 	bl	8005868 <_lseek_r>
 8005798:	89a3      	ldrh	r3, [r4, #12]
 800579a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800579e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057a2:	81a3      	strh	r3, [r4, #12]
 80057a4:	4632      	mov	r2, r6
 80057a6:	463b      	mov	r3, r7
 80057a8:	4628      	mov	r0, r5
 80057aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057ae:	f000 b817 	b.w	80057e0 <_write_r>

080057b2 <__sseek>:
 80057b2:	b510      	push	{r4, lr}
 80057b4:	460c      	mov	r4, r1
 80057b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ba:	f000 f855 	bl	8005868 <_lseek_r>
 80057be:	1c43      	adds	r3, r0, #1
 80057c0:	89a3      	ldrh	r3, [r4, #12]
 80057c2:	bf15      	itete	ne
 80057c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80057c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80057ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80057ce:	81a3      	strheq	r3, [r4, #12]
 80057d0:	bf18      	it	ne
 80057d2:	81a3      	strhne	r3, [r4, #12]
 80057d4:	bd10      	pop	{r4, pc}

080057d6 <__sclose>:
 80057d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057da:	f000 b813 	b.w	8005804 <_close_r>
	...

080057e0 <_write_r>:
 80057e0:	b538      	push	{r3, r4, r5, lr}
 80057e2:	4d07      	ldr	r5, [pc, #28]	; (8005800 <_write_r+0x20>)
 80057e4:	4604      	mov	r4, r0
 80057e6:	4608      	mov	r0, r1
 80057e8:	4611      	mov	r1, r2
 80057ea:	2200      	movs	r2, #0
 80057ec:	602a      	str	r2, [r5, #0]
 80057ee:	461a      	mov	r2, r3
 80057f0:	f7fe f804 	bl	80037fc <_write>
 80057f4:	1c43      	adds	r3, r0, #1
 80057f6:	d102      	bne.n	80057fe <_write_r+0x1e>
 80057f8:	682b      	ldr	r3, [r5, #0]
 80057fa:	b103      	cbz	r3, 80057fe <_write_r+0x1e>
 80057fc:	6023      	str	r3, [r4, #0]
 80057fe:	bd38      	pop	{r3, r4, r5, pc}
 8005800:	20000158 	.word	0x20000158

08005804 <_close_r>:
 8005804:	b538      	push	{r3, r4, r5, lr}
 8005806:	4d06      	ldr	r5, [pc, #24]	; (8005820 <_close_r+0x1c>)
 8005808:	2300      	movs	r3, #0
 800580a:	4604      	mov	r4, r0
 800580c:	4608      	mov	r0, r1
 800580e:	602b      	str	r3, [r5, #0]
 8005810:	f7fe fbbf 	bl	8003f92 <_close>
 8005814:	1c43      	adds	r3, r0, #1
 8005816:	d102      	bne.n	800581e <_close_r+0x1a>
 8005818:	682b      	ldr	r3, [r5, #0]
 800581a:	b103      	cbz	r3, 800581e <_close_r+0x1a>
 800581c:	6023      	str	r3, [r4, #0]
 800581e:	bd38      	pop	{r3, r4, r5, pc}
 8005820:	20000158 	.word	0x20000158

08005824 <_fstat_r>:
 8005824:	b538      	push	{r3, r4, r5, lr}
 8005826:	4d07      	ldr	r5, [pc, #28]	; (8005844 <_fstat_r+0x20>)
 8005828:	2300      	movs	r3, #0
 800582a:	4604      	mov	r4, r0
 800582c:	4608      	mov	r0, r1
 800582e:	4611      	mov	r1, r2
 8005830:	602b      	str	r3, [r5, #0]
 8005832:	f7fe fbba 	bl	8003faa <_fstat>
 8005836:	1c43      	adds	r3, r0, #1
 8005838:	d102      	bne.n	8005840 <_fstat_r+0x1c>
 800583a:	682b      	ldr	r3, [r5, #0]
 800583c:	b103      	cbz	r3, 8005840 <_fstat_r+0x1c>
 800583e:	6023      	str	r3, [r4, #0]
 8005840:	bd38      	pop	{r3, r4, r5, pc}
 8005842:	bf00      	nop
 8005844:	20000158 	.word	0x20000158

08005848 <_isatty_r>:
 8005848:	b538      	push	{r3, r4, r5, lr}
 800584a:	4d06      	ldr	r5, [pc, #24]	; (8005864 <_isatty_r+0x1c>)
 800584c:	2300      	movs	r3, #0
 800584e:	4604      	mov	r4, r0
 8005850:	4608      	mov	r0, r1
 8005852:	602b      	str	r3, [r5, #0]
 8005854:	f7fe fbb9 	bl	8003fca <_isatty>
 8005858:	1c43      	adds	r3, r0, #1
 800585a:	d102      	bne.n	8005862 <_isatty_r+0x1a>
 800585c:	682b      	ldr	r3, [r5, #0]
 800585e:	b103      	cbz	r3, 8005862 <_isatty_r+0x1a>
 8005860:	6023      	str	r3, [r4, #0]
 8005862:	bd38      	pop	{r3, r4, r5, pc}
 8005864:	20000158 	.word	0x20000158

08005868 <_lseek_r>:
 8005868:	b538      	push	{r3, r4, r5, lr}
 800586a:	4d07      	ldr	r5, [pc, #28]	; (8005888 <_lseek_r+0x20>)
 800586c:	4604      	mov	r4, r0
 800586e:	4608      	mov	r0, r1
 8005870:	4611      	mov	r1, r2
 8005872:	2200      	movs	r2, #0
 8005874:	602a      	str	r2, [r5, #0]
 8005876:	461a      	mov	r2, r3
 8005878:	f7fe fbb2 	bl	8003fe0 <_lseek>
 800587c:	1c43      	adds	r3, r0, #1
 800587e:	d102      	bne.n	8005886 <_lseek_r+0x1e>
 8005880:	682b      	ldr	r3, [r5, #0]
 8005882:	b103      	cbz	r3, 8005886 <_lseek_r+0x1e>
 8005884:	6023      	str	r3, [r4, #0]
 8005886:	bd38      	pop	{r3, r4, r5, pc}
 8005888:	20000158 	.word	0x20000158

0800588c <__malloc_lock>:
 800588c:	4801      	ldr	r0, [pc, #4]	; (8005894 <__malloc_lock+0x8>)
 800588e:	f7ff bb1d 	b.w	8004ecc <__retarget_lock_acquire_recursive>
 8005892:	bf00      	nop
 8005894:	2000014c 	.word	0x2000014c

08005898 <__malloc_unlock>:
 8005898:	4801      	ldr	r0, [pc, #4]	; (80058a0 <__malloc_unlock+0x8>)
 800589a:	f7ff bb18 	b.w	8004ece <__retarget_lock_release_recursive>
 800589e:	bf00      	nop
 80058a0:	2000014c 	.word	0x2000014c

080058a4 <_read_r>:
 80058a4:	b538      	push	{r3, r4, r5, lr}
 80058a6:	4d07      	ldr	r5, [pc, #28]	; (80058c4 <_read_r+0x20>)
 80058a8:	4604      	mov	r4, r0
 80058aa:	4608      	mov	r0, r1
 80058ac:	4611      	mov	r1, r2
 80058ae:	2200      	movs	r2, #0
 80058b0:	602a      	str	r2, [r5, #0]
 80058b2:	461a      	mov	r2, r3
 80058b4:	f7fe fb50 	bl	8003f58 <_read>
 80058b8:	1c43      	adds	r3, r0, #1
 80058ba:	d102      	bne.n	80058c2 <_read_r+0x1e>
 80058bc:	682b      	ldr	r3, [r5, #0]
 80058be:	b103      	cbz	r3, 80058c2 <_read_r+0x1e>
 80058c0:	6023      	str	r3, [r4, #0]
 80058c2:	bd38      	pop	{r3, r4, r5, pc}
 80058c4:	20000158 	.word	0x20000158

080058c8 <_init>:
 80058c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ca:	bf00      	nop
 80058cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ce:	bc08      	pop	{r3}
 80058d0:	469e      	mov	lr, r3
 80058d2:	4770      	bx	lr

080058d4 <_fini>:
 80058d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058d6:	bf00      	nop
 80058d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058da:	bc08      	pop	{r3}
 80058dc:	469e      	mov	lr, r3
 80058de:	4770      	bx	lr
